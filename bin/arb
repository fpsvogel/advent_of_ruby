#!/usr/bin/env ruby

require "thor"
require_relative "../lib/arb/arb"

# Advent of Ruby CLI application
class ArbApp < Thor
  desc "bootstrap [YEAR] [DAY]", "Creates puzzle files for the next day, or " \
    "for a given year and optionally day (defaults to Day 1)."
  def bootstrap(year = nil, day = nil)
    Arb::Cli.bootstrap(year:, day:)
  end

  desc "run [YEAR] [DAY]", "Runs the puzzle that's untracked in Git, or the " \
    "puzzle of the given day and year. `-s` runs only specs, `-o` part 1, `-t` part 2."
  method_option :spec, type: :boolean, aliases: "-s"
  method_option :one, type: :boolean, aliases: "-o"
  method_option :two, type: :boolean, aliases: "-t"
  def run_day(year = nil, day = nil) # can't be named `run` due to Thor conflict
    Arb::Cli.run(year:, day:, options:)
  end

  desc "progress", "Shows progress based on the number of your solutions " \
    "committed in Git."
  def progress
    Arb::Cli.progress
  end

  # TODO extract/abstract run_day contents (without terminal output) to a class,
  # then use it here to silently run each untracked puzzle before committing it,
  # and if anything is incorrect then show confirmation prompt to user.
  desc "commit", "Commits new and modified solutions to Git."
  def commit
    Arb::Cli.commit
  end

  default_task :run_day
end

ArbApp.start
