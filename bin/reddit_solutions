#!/usr/bin/env ruby

require "debug"
require "dotenv"
require "faraday"
require "faraday/retry"
require "pastel"
require "reverse_markdown"
require "thor"
require "yaml"
require_relative "../lib/arb/api/reddit"
require_relative "../lib/arb/version"

InputError = Class.new(StandardError)

PASTEL = Pastel.new

# AoC Reddit Solutions Downloader CLI application
class RedditSolutionsApp < Thor
  desc "download", "Downloads Reddit solutions for the given language (-l), " \
    "optionally only for the given year (-y) and day (-d), and optionally " \
    "force (-f) overwriting existing files."
  method_option :language, type: :array, aliases: "-l", default: ["ruby"]
  method_option :year, type: :numeric, aliases: "-y"
  method_option :day, type: :numeric, aliases: "-d"
  method_option :force, type: :boolean, aliases: "-f", default: false
  def download
    if options[:day] && options[:year].nil?
      raise InputError, "Year must be specified when day is specified."
    end
    if !options[:year].between?(2015, Date.today.year)
      raise InputError, "Year must be between 2015 and this year."
    end
    if options[:day] && !options[:day].between?(1, 25) && Date.new(options[:year], 12, options[:day]) > Date.today
      raise InputError, "Day must be between 1 and 25, and <= today."
    end

    force_description = PASTEL.red("FORCE ") if options[:force]
    year_description = options[:year].nil? ? "all years" : "#{options[:year]}"
    day_description = options[:day].nil? ? "" : "##{options[:day].to_s.rjust(2, "0")}"
    time_description = PASTEL.blue("#{year_description}#{day_description}")
    language_names = PASTEL.blue(options[:language].join(", "))

    puts "#{force_description}Downloading Reddit solutions from #{time_description} for #{language_names}..."
    puts

    reddit_api_keys = %w[CLIENT_ID CLIENT_SECRET USERNAME PASSWORD]

    Dotenv.load
    Dotenv.require_keys(reddit_api_keys)

    reddit = Arb::Api::Reddit.new(
      client_id: ENV["CLIENT_ID"],
      client_secret: ENV["CLIENT_SECRET"],
      username: ENV["USERNAME"],
      password: ENV["PASSWORD"],
    )

    max_year, max_day = if Date.today.year == options[:year] && Date.today.month == 12
      [Date.today.year, Date.today.day]
    else
      [Date.today.year - 1, 25]
    end

    language_directory = File.join("data", "solutions", "reddit", options[:language].join("-"))
    Dir.mkdir(language_directory) unless Dir.exist?(language_directory)

    (options[:year] || 2015).upto(options[:year] || max_year) do |year|
      year_directory = File.join("data", "solutions", "reddit", options[:language].join("-"), year.to_s)
      Dir.mkdir(year_directory) unless Dir.exist?(year_directory)

      (options[:day] || 1).upto(options[:day] || max_day) do |day|
        path = File.join("data", "solutions", "reddit", options[:language].join("-"), year.to_s, "#{day.to_s.rjust(2, "0")}.yml")

        if File.exist?(path) && !options[:force]
          puts PASTEL.yellow("Skipping #{year}##{day.to_s.rjust(2, "0")} as it already exists.")
          puts
          next
        end

        comments = reddit.get_comments(
          year:,
          day:,
          language_names: options[:language],
        )

        File.write(path, comments.to_yaml(line_width: -1))

        puts "Saved #{PASTEL.blue("#{year}##{day.to_s.rjust(2, "0")}")} to #{path}"
        puts
      end
    end

    # TODO loop through all years and days

    # TODO separately, transform to Markdown:
    #
    # comments = YAML.load_file(...)
    #
    # comments_markdown = comments.map { |comment|
    #   comment_to_markdown(comment)
    # }.join
    #
    # File.write(
    #   ...,
    #   comments_markdown,
    # )
  rescue InputError => e
    puts PASTEL.red(e.message)
  end

  default_task :download

  private

  def comment_to_markdown(comment, level: 0)
    replies = comment[:replies].map { |reply|
      comment_to_str(reply, level: level + 1)
    }.join("\n\n")

    <<~COMMENT.gsub(/(?:\n\s*){3,}/, "\n\n")
      #{"#" * (level + 1)} #{"â†³" * level}#{level.zero? ? "Solution by" : "Reply by"} #{comment[:author]}
      #{comment[:url]}

      #{comment[:body]}

      #{replies unless replies.empty?}
    COMMENT
  end
end

RedditSolutionsApp.start
