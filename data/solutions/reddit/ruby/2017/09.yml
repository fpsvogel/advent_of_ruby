---
- :author: Unihedron
  :url: https://www.reddit.com/r/adventofcode/comments/7iksqc/2017_day_9_solutions/dqziwer/
  :body: |-
    Ruby. Tried writing a regex hack for part 1 to avoid writing a stack engine, didn't work out. Vastly disappointed by the amount of failures and ended up being penalized heavily in terms of waiting. Part 2 was shockingly easy though, feels like it could had been swapped with part 1.

    ```ruby
    h=0
    v=gets.gsub(/!./,'').gsub(/<(.*?)>/){
    h+=$1.size # part 2
    ''
    }
    p h
    exit # part 1
    h=0
    s=[]
    p v
    p v=v.tr('^{}','')
    v.chars{|x|(h+=s.size
    next s.pop) if x=='}'
    s<<x}
    p h
    ```
  :replies:
  - :author: nakilon
    :url: https://www.reddit.com/r/adventofcode/comments/7iksqc/2017_day_9_solutions/dqzj539/
    :body: |-
      Wow, didn't expect solution with gsub would be that short. Here is a straight-forward state machine:

      ```ruby
      current_value = 0
      line_value = 0
      inside_garbage = false
      skip = false
      n = 0
      gets.strip.chars do |c|
        next skip = false if skip
        if inside_garbage
          case c
          when ?>
            inside_garbage = false
          when ?!
            skip = true
          else
            n += 1
          end
        else
          case c
          when ?{
            line_value += current_value += 1
          when ?}
            current_value -= 1
          when ?<
            inside_garbage = true
          end
        end
      end
      p line_value
      p n
      ```
    :replies: []
- :author: dtinth
  :url: https://www.reddit.com/r/adventofcode/comments/7iksqc/2017_day_9_solutions/dqzi2be/
  :body: |-
    # Ruby one-liner (16th, 15th)

    The `pbpaste` command must be available in the `$PATH`, and should return the contents in the clipboard (macOS has this command by default).

    ```ruby
    # Part 1
    -> x { g = false; n = 0; t = 0; s = false; x.chars.each { |c| if s; s = false; elsif g && c == '>'; g = false; elsif g && c == '!'; s = true; elsif g; elsif c == '<'; g = true; elsif c == '{'; n += 1; elsif c == '}'; t += n; n -= 1; end }; t }[`pbpaste`]

    # Part 2
    -> x { g = false; n = 0; t = 0; gc = 0; s = false; x.chars.each { |c| if s; s = false; elsif g && c == '>'; g = false; elsif g && c == '!'; s = true; elsif g; gc += 1; elsif c == '<'; g = true; elsif c == '{'; n += 1; elsif c == '}'; t += n; n -= 1; end }; gc }[`pbpaste`]
    ```

    Variable names:

    - `x` input
    - `g` inside garbage flag
    - `n` nesting level
    - `t` total score
    - `s` skipping flag
    - `c` current character
    - `gc` garbage count
  :replies:
  - :author: nakilon
    :url: https://www.reddit.com/r/adventofcode/comments/7iksqc/2017_day_9_solutions/dqzj0zn/
    :body: Your definition of the term "one-liner" is wrong.
    :replies: []
- :author: yjerem
  :url: https://www.reddit.com/r/adventofcode/comments/7iksqc/2017_day_9_solutions/dqzjj37/
  :body: |-
    Ruby with regex

    ```ruby
    stream = DATA.read

    stream.gsub! /!./, ''

    garbage = 0
    stream.gsub!(/<.*?>/) { |s| garbage += s.length - 2; }

    stream.gsub!(/[^{}]/, '')
    _, score = stream.chars.inject([0, 0]) do |(level, score), c|
      case c
      when ?{ then [level + 1, score]
      when ?} then [level - 1, score + level]
      end
    end

    p score
    p garbage
    ```
  :replies: []
- :author: rnd4g
  :url: https://www.reddit.com/r/adventofcode/comments/7iksqc/2017_day_9_solutions/dqzjrdz/
  :body: |-
    Ruby. Figured out that you can drop everything that doesn't matter and eval the rest. Ugly code warning.

    ```ruby
    input = open('input.txt').read
    #input = "{{<ab>},{<ab>},{<ab>},{<ab>}}"

    def solve(input)
        parsed = input.clone

        parsed = parsed.gsub(/!!/, '').gsub(/!./, '').gsub("'", "x").gsub(/\<([^\>]+)\>/, "'" + '\1' + "'").gsub('<>', "''").gsub('{', '[').gsub('}', ']').chomp

        groups = eval(parsed)

        p groups.flatten.map(&:length).reduce(&:+)
        p score(groups, 1)
    end

    def score(groups, current_score)
        if groups.kind_of?(Array) && groups != []
            return current_score + groups.map { |g|
                score(g, 1 + current_score)
            }.reduce(&:+)
        elsif groups == []
            return current_score
        else
            return 0
        end
    end

    solve(input)
    ```
  :replies: []
- :author: rkachowski
  :url: https://www.reddit.com/r/adventofcode/comments/7iksqc/2017_day_9_solutions/dr04rmz/
  :body: |-
    ruby, i had to shake off the hangover for this one. i never thought about just gsub-ing out the exclamation mark and every next character.. i iterated over the chars and moved 2 steps forward when one was found... i'll leave it in though as a testament to try harder

    ```ruby
    input = File.read("input")

    processed = []
    index = 0
    input.chars.size.times do |i|
      if input[index] == "!"
        index +=1
      else
        processed << input[index]
      end

      index += 1
    end

    garbage_free = processed.join.gsub /<.*?>/, ''
    result = garbage_free.chars.each_with_object({current_val: 0, total: 0}) do |c,o|
       case c
       when "{"
        o[:current_val] += 1
        o[:total] += o[:current_val]
       when "}"
        o[:current_val] -= 1
       end
    end
    puts result[:total]

    garbages = processed.join.to_enum(:scan, /(<.*?>)/).map { Regexp.last_match }
    puts garbages.map{|g| g[1].size - 2 }.sum
    ```
  :replies: []
