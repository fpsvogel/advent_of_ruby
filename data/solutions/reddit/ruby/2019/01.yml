---
- :author: J-Swift
  :url: https://www.reddit.com/r/adventofcode/comments/e4axxe/2019_day_1_solutions/f9i4ujc
  :body: |-
    Ruby

    https://github.com/J-Swift/advent-of-code-2019/tree/master/day\_01
  :replies: []
- :author: ECTXGK
  :url: https://www.reddit.com/r/adventofcode/comments/e4axxe/2019_day_1_solutions/f9etbve
  :body: |-
    Ruby

    ```ruby
    def total_fuel_for_module(module_fuel)
      current_fuel_needed = (module_fuel / 3).floor - 2
      return 0 if current_fuel_needed <= 0
      current_fuel_needed + total_fuel_for_module(current_fuel_needed)
    end

    x = input.reduce(0) do |total_fuel, single_module_fuel|
      total_fuel + total_fuel_for_module(single_module_fuel)
    end

    puts x
    ```
  :replies:
  - :author: nakilon
    :url: https://www.reddit.com/r/adventofcode/comments/e4axxe/2019_day_1_solutions/f9f31db
    :body: |-
      ```ruby
      ruby -rmll/core_ext -e 'p `pbpaste`.split.sum{ |s| MLL::nest_while_list[s.to_i, ->_{_/3-2}, ->_{_>0}].to_a.most.rest.sum }'
      ```
    :replies: []
- :author: Unihedron
  :url: https://www.reddit.com/r/adventofcode/comments/e4axxe/2019_day_1_solutions/f98due7
  :body: |-
    I had wrong answer

    ​ ​ ​ ​ Forgot to check negative

    ​ ​ ​ ​ ​ ​ ​ ​ Please wait 20 secs

    ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ - "Wrong answer", a poem by Uni

    `ruby 1.rb input` 23/105

    ```ruby
    # part 1
    p $<.map{|x|a=(x.to_i/3)-2}.sum
    # part 2
    p $<.map{|x|a=(x.to_i/3)-2
    s=a
    while a > 0
    a=a/3-2
    s+=a if a>0 # <- left this out...
    end
    s }.sum
    ```

    * * *

    With [reception for my poem](https://i.imgur.com/BJPi4gP.png) being better than expected (I had no expectations) I guess I will write more on the next days :P
  :replies:
  - :author: tslater2006
    :url: https://www.reddit.com/r/adventofcode/comments/e4axxe/2019_day_1_solutions/f98uztc
    :body: Upvoted for the poem :)
    :replies: []
- :author: BluFoot
  :url: https://www.reddit.com/r/adventofcode/comments/e4axxe/2019_day_1_solutions/f98e7ds
  :body: |-
    Ruby 24/148

    ```ruby
    f=->m{n=m/3-2;n<0?0:n+f[n]}
    p $<.sum{|l|f[l.to_i]}
    ```
  :replies:
  - :author: Unihedron
    :url: https://www.reddit.com/r/adventofcode/comments/e4axxe/2019_day_1_solutions/f98f6fz
    :body: |-
      Very compact I approve

      If you're golfing, I'm p. sure I can beat you with `-p`
    :replies:
    - :author: BluFoot
      :url: https://www.reddit.com/r/adventofcode/comments/e4axxe/2019_day_1_solutions/f98gvi5
      :body: I've never used `-p` before, can you show me an example? I can't figure it out..
      :replies:
      - :author: Unihedron
        :url: https://www.reddit.com/r/adventofcode/comments/e4axxe/2019_day_1_solutions/f98ke18
        :body: |-
          [-p demo](https://tio.run/##KypNqvz/XyXeViVeryi1LLWoOPX//4zUnJx8rvL8opwUrsSkZBBO4fqXX1CSmZ9X/F@3AAA "Ruby – Try It Online")

          `ruby -p input`

          ```ruby
          $_=$_.reverse
          ```

          On second thoughts, I take that back, ultimately you have to print a sum which is not per-line, so it probably doesn't save much
        :replies: []
- :author: jamie_ca
  :url: https://www.reddit.com/r/adventofcode/comments/e4axxe/2019_day_1_solutions/f9dns88
  :body: |-
    Firstly, a unified solution in ruby:

    ```ruby
    def fuel(mass, recurse: false)
      return 0 if mass < 7
      f_mass = mass / 3 - 2
      f_mass += fuel(f_mass, recurse: recurse) if recurse
      f_mass
    end

    puts input.map { |m| fuel(m) }.sum
    puts input.map { |m| fuel(m, true) }.sum
    ```

    And for bonus points (taking Fuel as one syllable):

    ```ruby
    First, for the input
    Parse the lines as integers.
    Store in an array.

    Define a method
    Fuel, taking as input mass
    And a recurse flag.

    For masses less than
    Seven, return a zero
    And call it a day.

    Fuel mass is then
    Two less than one third the mass.
    Make sure to round down.

    Check the recurse flag.
    If set, call Fuel with fuel mass,
    Setting still the flag.

    The recursed result
    Is then added to fuel mass,
    Which then is returned.

    Our problems' answers:
    Sum Fuel for all input, and
    The same, with recurse.
    ```
  :replies: []
- :author: ShinobuLove
  :url: https://www.reddit.com/r/adventofcode/comments/e4axxe/2019_day_1_solutions/f9b9r1k
  :body: |-
    Where are my Ruby-bros at?

    ```ruby
    input = File.open("input.txt").map(&:to_i)
    # input = File.open("bigboyinput").map(&:to_i)

    def calculate_fuel value
      value / 3 - 2
    end

    def recursive_fuel fuel, sum=0
      return sum if fuel <= 0
      recursive_fuel(calculate_fuel(fuel), sum + fuel)
    end

    # Part 1
    # Answer 3365459
    list = input.map do |mass|
      calculate_fuel mass
    end
    puts "Part 1: #{ list.sum }"

    # Part 2
    # Answer 5045301
    final_fuel_sum = list.sum do |fuel|
      recursive_fuel fuel
    end

    puts "Part 2: #{ final_fuel_sum }"
    ```
  :replies: []
