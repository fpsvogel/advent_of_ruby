---
- :author: J-Swift
  :url: https://www.reddit.com/r/adventofcode/comments/eaurfo/2019_day_15_solutions/fbtloxq
  :body: |-
    Ruby

    https://github.com/J-Swift/advent-of-code-2019/tree/master/day\_15
  :replies: []
- :author: petercooper
  :url: https://www.reddit.com/r/adventofcode/comments/eaurfo/2019_day_15_solutions/fb2lefx
  :body: |-
    [**Ruby**](https://github.com/peterc/aoc2019solutions/blob/master/15.rb)

    I was out all day so only had pen and paper so I planned my solution on paper. Luckily it worked right away when I got back to my computer! For part 1, I took what seems to be a novel approach based on my reading here. I added snapshotting and rollback to my IntCode VM. I have a "to visit" list, I pull a location from this, snapshot the VM, try all of the directions, and any that are clear, I pass on the current VM state and add the location to the "to visit" list. Rinse and repeat until I find the oxygen. So "unsuccessful" VMs keep getting killed and one is lucky enough to get straight to the goal! :-) The power of clones.. but it is parallelizable.

    Sadly this approach doesn't help with part 2 whatsoever, alas, so now I'm working on that and sadly it seems I'll have to go with a more bog standard algorithm.. which I've been trying to avoid.

    _Update: So for part 2 I managed to avoid implementing anything. I just took my maximum distance on the entire map, took away the distance from the origin at the closest intersection to the oxygen tank, then added the length of the passage to to the oxygen tank. No path searching needed as I had the distance values already stored for every single block :-)_
  :replies: []
- :author: BluFoot
  :url: https://www.reddit.com/r/adventofcode/comments/eaurfo/2019_day_15_solutions/faxs1m7
  :body: |-
    [Ruby 54/52](https://github.com/acornellier/adventofcode/blob/master/2019/15.rb)

    I made my bot wander randomly for a while, then printed the map to the screen, and copy pasted the map into my code. Once that was done it was easy to apply my dijkstra and "grid" libraries to solve it!
  :replies: []
