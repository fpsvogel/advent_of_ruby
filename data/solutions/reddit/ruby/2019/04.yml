---
- :author: Chibbot
  :url: https://www.reddit.com/r/adventofcode/comments/e5u5fv/2019_day_4_solutions/fbxgvz7
  :body: |-
    Ruby solution for [Part One](https://repl.it/@Xerillius/AOC-41)

    Working on part two but it's giving me a lot more trouble than I thought it would.
  :replies: []
- :author: ni3t
  :url: https://www.reddit.com/r/adventofcode/comments/e5u5fv/2019_day_4_solutions/f9m0ha4
  :body: |-
    Ruby - leaderboard be damned!

    Spent way too long fiddling with a regex when Enumerable could have solved it so much faster...

    https://github.com/ni3t/advent-2019/blob/master/4_secure_container.rb
  :replies:
  - :author: bibstha
    :url: https://www.reddit.com/r/adventofcode/comments/e5u5fv/2019_day_4_solutions/f9m1so2
    :body: |-
      I had to go through the Enumerable api to find out `slice_when` which is very much similar to `chunk`. Took me way too long to find the method.

      https://github.com/bibstha/advent2019/blob/master/day04/soln\_test.rb
    :replies: []
- :author: J-Swift
  :url: https://www.reddit.com/r/adventofcode/comments/e5u5fv/2019_day_4_solutions/f9lzhlu
  :body: |-
    Ruby

    https://github.com/J-Swift/advent-of-code-2019/tree/master/day\_04
  :replies: []
- :author: Unihedron
  :url: https://www.reddit.com/r/adventofcode/comments/e5u5fv/2019_day_4_solutions/f9m0da5
  :body: |-
    Find rocket fuel requirements;

    ​ ​ ​ ​ Drink a cup of coffee. ☕

    Emulate and solve a machine;

    ​ ​ ​ ​ Drink a cup of coffee. ☕

    Develop and navigate a gridworld;

    ​ ​ ​ ​ Drink a cup of coffee. ☕

    Crack and find possible passwords;

    ​ ​ ​ ​ Drink a cup of coffee. ☕

    ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ ​ - "On my laptop", a poem by Uni

    [POEM] as above

    `ruby 4.rb` 6/22

    ```ruby
    a=387638..919123
    # part 1
    p a.count{|x|x.to_s[/(\d)\1/]&&x.digits.reverse.each_cons(2).all?{|x,y|x<=y}}
    # part 2
    p a.count{|x|x.digits.reverse.chunk{|x|x}.to_a.any?{|x,y|y.size==2}&&x.digits.reverse.each_cons(2).all?{|x,y|x<=y}}
    ```

    * * *

    Note for ruby learners: `digits` list of digits is backwards! When in doubt, always `reverse` it. (It doesn't need to be done for the first part of part 2, but I instinctively typed it anyways.

    For part 1 I did a regex which can't work for part 2 (negative lookbehinds must be pure, where as [`(*FAIL)`](https://stackoverflow.com/a/20008790/3622940) which I want from PHP regex isn't here...) and required rewriting, so it costed some time finding the right function... :p (I used chunk\_by from memory, where as it should've been chunk so it took 2 seconds to debug)

    Today's poem is a [chant](https://www.writersdigest.com/editor-blogs/poetic-asides/poetic-forms/chant-poems-poetic-forms). My poem sounded cooler in my head, but after having typed it I feel meh, didn't do it justice I think.
  :replies:
  - :author: nicereddy
    :url: https://www.reddit.com/r/adventofcode/comments/e5u5fv/2019_day_4_solutions/f9m2sn3
    :body: |-
      Interesting, your solution errors for me.

      ```ruby
      day4-2.rb:3:in `[]': no implicit conversion of Regexp into Integer (TypeError)
      ```
    :replies:
    - :author: Unihedron
      :url: https://www.reddit.com/r/adventofcode/comments/e5u5fv/2019_day_4_solutions/f9m2ur6
      :body: Thanks, there should be a `.to_s`. I recreated it from memory (since I changed the code between going into part 2, which is lost after saving), it's entirely my fault!
      :replies: []
  - :author: J-Swift
    :url: https://www.reddit.com/r/adventofcode/comments/e5u5fv/2019_day_4_solutions/f9m4jl1
    :body: |-
      Ahhhhhhh `each_cons`. Thats what I was trying to think of before I said screw it and just did a handrolled for-loop version.

      Nice job
    :replies: []
- :author: shandley256
  :url: https://www.reddit.com/r/adventofcode/comments/e5u5fv/2019_day_4_solutions/f9m8jm9
  :body: |-
    Ruby

    I discovered the [Enum#slice\_when](https://ruby-doc.org/core-2.6.5/Enumerable.html#method-i-slice_when) method and it made the code super simple.

    ```ruby
    # Ensure there are no sequences of decreasing digits
    password.chars.slice_when { |a, b| a <= b }.count == password.length
    # Ensure there is at least one contiguous repeating digit
    password.chars.slice_when { |a, b| a != b }.count < password.length
    # Ensure there is at least one digit that repeats no more than twice contiguously
    password.chars.slice_when { |a, b| a != b }.any? { |run| run.count == 2 }
    ```
  :replies: []
- :author: krazyito65
  :url: https://www.reddit.com/r/adventofcode/comments/e5u5fv/2019_day_4_solutions/f9nl0xl
  :body: |-
    # RUBY

    https://github.com/krazyito65/Advent-Of-Code/blob/master/2019/4.rb

    Here's my Ruby solution, I've updated it, and now provides both solutions at around 1s.
  :replies: []
- :author: Gck2702
  :url: https://www.reddit.com/r/adventofcode/comments/e5u5fv/2019_day_4_solutions/f9mcb7u
  :body: |-
    Short & sweet Ruby solution

    [https://topaz.github.io/paste/#XQAAAQD9AQAAAAAAAAAFCYv/dcJTd8kzW33d5k8b/V8TyIe8jtqHLuWhRScQtarmPaMI9KavTBGf0dlg0GxXvxCqXGiz0k96c4FRzayJj2pK1a8yc90XEffTwNEyCtXk0Dx+4uQh/AeBbo+tbVJfVngKqU4MN4u9YvZUvNps7SHLQObw18znyHQLoTiZixGcGJn5tIFj6PINF1ttjEN7tFGSK5STF+O5WouppYM42yQFeP7036KMZiPqXa3JdCE3WemSbDjpgGRpSLy1YdJG3vx1hVASWejC/TJxQf4ysEvVwJimKNiducO/FW7lTtfvI6bEHs89RJbfhkbn6U1KruFBqYsOZvkOL3AjqjTQCORTQ3q6fzs3YRlYXKj+tTSu](https://topaz.github.io/paste/#XQAAAQD9AQAAAAAAAAAFCYv/dcJTd8kzW33d5k8b/V8TyIe8jtqHLuWhRScQtarmPaMI9KavTBGf0dlg0GxXvxCqXGiz0k96c4FRzayJj2pK1a8yc90XEffTwNEyCtXk0Dx+4uQh/AeBbo+tbVJfVngKqU4MN4u9YvZUvNps7SHLQObw18znyHQLoTiZixGcGJn5tIFj6PINF1ttjEN7tFGSK5STF+O5WouppYM42yQFeP7036KMZiPqXa3JdCE3WemSbDjpgGRpSLy1YdJG3vx1hVASWejC/TJxQf4ysEvVwJimKNiducO/FW7lTtfvI6bEHs89RJbfhkbn6U1KruFBqYsOZvkOL3AjqjTQCORTQ3q6fzs3YRlYXKj+tTSu)
  :replies: []
