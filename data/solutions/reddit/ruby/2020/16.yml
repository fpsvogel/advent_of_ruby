---
- :author: "[deleted]"
  :url: https://www.reddit.com/r/adventofcode/comments/ke2qp6/2020_day_16_solutions/ghogxmi
  :body: |-
    Better late than never. Kinda overengineered. Ended up using a matrix transpose for the second part.

    Ruby

    [https://github.com/izaguirrejoe/AoC2020/blob/main/Day16.rb](https://github.com/izaguirrejoe/AoC2020/blob/main/Day16.rb)
  :replies: []
- :author: Krakhan
  :url: https://www.reddit.com/r/adventofcode/comments/ke2qp6/2020_day_16_solutions/gg4h48g
  :body: |-
    # Ruby

    Straight forward, just a lot of book keeping. Did anyone have puzzle inputs where it would turn out you would have to potentially consider more than one field for part 2? See my comment for part 2. I was able to skip that since every time I stepped through it I just used a systematic process of elimination where it all worked out.

    [paste](https://topaz.github.io/paste/#XQAAAQAzBwAAAAAAAAA5GUqKNoFH6SMqoVC09YUYlYrjjNB8HNCAJ2iwkNLh9g1eeWZnbDThi7et4cKyVjQoO6JtbMbEDJrVZQmYsm3hDg8vXoCnlqQyqJ5kVDFYCnzWt64eTZ4sJSA+hbZ48OLbN3iBDBWJLcIANNNqeDLMqkbtdgPmdsfPvNJM3roTJy3j6SCNE9uL0HrcN02iueu6quMei4RU9sN/e2EnVw0aNQ/Zmc6KC1ePEx+HT/CAFECShK3jvhdsAlTATOYSOycse4bPVfrqiS6fECL4eAnrlyiwQKsQeXMdybRyOCKjUANTeSjQWZTsHI56tJ1Fih4/k9MbYL7bdanfTh8o5bw2/gfM5n9cszF6cGN/Wz0CtGkPiPh3sDq65ju+L/N6Pp8mLY0ZJ8xv214t+IpqPucOBu+G8lmkQZ//CxNH+jUL1LqieXY3zDyIi+hwZ1+BfnAGbKsDVCvFC29r99dSnT4vlY5EvPcYGb+p9rmbauSyl5gGCzDyQPdbg69EpFsnp4/fO3xy5WHMnzYNOE4v7dYcqWYmQpXYU9zDWGwmt+CopNeqAIKAkg6ydPdZFQ9OrclQP0VmB+XaqBSeG5BZwUAfyPJTId5Tjrn6lgnQpVc9ov0L0TJ+/xxE3vnSz7mcfx8n6qdqgvvBp5NfsmEZhybkmnFgtwMH84cs7tdTA7QBnV29SELe+hrYmRK0Ng7ubJdeszpHy2cPVuBZ9GZSIzSU52bOEOFZ2XeEnqQZl+57tvNhgaYRtR2Ngi39jEI82aqxE4VT6tvVcY+8Bl34y1xCs43Zo/81R7uf59hzPFKRsvI04CaiOs7It5OXqy7R/MHaimh+231dovIbCP4ER/dbg83rDb5NA3c9TKRodvMjUP4prETflGoq76bDKiZe3Hh0MlRJp+PUrpeuHSeh9jeIsM24oIa/yb2wuYhSrFnDab3RD02Hd0ZXo7uS5jRlbsB08jHnKfsLhoz0ZWixWwd7zTcYl716qEmUX1icupyBszDydaOESbBHpqes7txypkBO6AM2YoUZn+2Cv37grC0tgUAGQI6DUecCBpPRK5hgI8UxgqsAOxD6X6wYgqX/2WXxSA==)
  :replies:
  - :author: ForkInBrain
    :url: https://www.reddit.com/r/adventofcode/comments/ke2qp6/2020_day_16_solutions/gglge3m
    :body: I think you just got lucky. I instrumented mine and it had to retry about 90 times. Looking at your code, I think we had a similar algorithm.
    :replies: []
- :author: mattaman101
  :url: https://www.reddit.com/r/adventofcode/comments/ke2qp6/2020_day_16_solutions/gg35lfy
  :body: |-
    # [RUBY](https://www.codepile.net/pile/Vm7EWVY9) Part 2

    Using hashes with a key of the rule (route, price etc) and a value of sets containing indexes in the ticket that it cannot be. A pattern emerged and these sets were of length 19 - 18 - 17- 16- 15 etc etc. You look at the length 19 set and see what index is missing, and assign that as the correct index of that sets key in a new hash, and then add that missing number to all of the sets, since now none of them can be at that index. Keep checking the length 19 set (since the length 18 one is now 19, and the former 19 one is now 20) and eventually, you get all of the correct indexes.
  :replies: []
- :author: skawid
  :url: https://www.reddit.com/r/adventofcode/comments/ke2qp6/2020_day_16_solutions/gg2wh9j
  :body: |-
    [Ruby!](https://github.com/simonbrahan/aoc2020/blob/master/day16/main.rb)

    Keep finding ticket columns with only a single valid rule, until you have all the columns. My original solution (breadth first search) is still running.
  :replies: []
- :author: prophetjohn
  :url: https://www.reddit.com/r/adventofcode/comments/ke2qp6/2020_day_16_solutions/gg1wyls
  :body: "# RUBY\n\n[https://github.com/j-clark/adventofcode/commit/29225aa85fe56909fa2cdd19fb30c68537f79d46](https://github.com/j-clark/adventofcode/commit/29225aa85fe56909fa2cdd19fb30c68537f79d46)\n\nI just hacked it as naively as I could think of and it worked and was definitely not my slowest solution \U0001F937‍♀️"
  :replies: []
- :author: CodeIsTheEnd
  :url: https://www.reddit.com/r/adventofcode/comments/ke2qp6/2020_day_16_solutions/gg09e24
  :body: |-
    **Ruby:** 9:13/23:45, 300/153

    Here's a [recording](https://youtu.be/O7fH7o8OqZ8) of me solving it, and the code is [here](https://github.com/PaulJuliusMartinez/advent-of-code/blob/9e281426087683cbc166ffd1ed9a4d6ab190f3ed/2020/dec16.rb). (I'm streaming myself solving the problems right when they come out on [Twitch](https://twitch.tv/codeistheend)!)

    This one was great! Super fun. My favorite yet. Thankfully Eric made Part 2 "easy", but it still would have been fun even if we had to "search" for a solution. I don't mind getting to bed a little earlier though!
  :replies: []
- :author: gurgeous
  :url: https://www.reddit.com/r/adventofcode/comments/ke2qp6/2020_day_16_solutions/gg05zvr
  :body: |-
    Ruby 147/124

    Nothing too fancy, just trying not to make mistakes. Read slow, decent variable names...

    https://gist.github.com/gurgeous/9ceb70393345c2233b3923647d3095d6
  :replies: []
- :author: billiamthesecond
  :url: https://www.reddit.com/r/adventofcode/comments/ke2qp6/2020_day_16_solutions/gg0ag9a
  :body: |-
    # [Ruby](https://www.billiam.org/advent-of-code/16.html)

    Nothing too fancy, and none too fast
  :replies: []
- :author: rhardih
  :url: https://www.reddit.com/r/adventofcode/comments/ke2qp6/2020_day_16_solutions/gg0hlnq
  :body: |-
    Ruby solution to part 1 with a bit of meta programming:

    ```ruby
    sum = 0
    top, _, bottom = STDIN.read.split("\n\n")

    valid = top.split("\n").map do |line|
      line.scan(/(\d+)-(\d+)/).map do |tuple|
        low, high = tuple
        "#{low} <= v && v <= #{high}"
      end.join(" || ")
    end.join(" || ")

    bottom.split("\n")[1..-1].each do |ticket|
      ticket.split(",").map(&:to_i).each do |v|
        sum += v unless eval(valid)
      end
    end

    puts "Ticket scanning error rate: #{sum}"
    ```
  :replies: []
- :author: shandley256
  :url: https://www.reddit.com/r/adventofcode/comments/ke2qp6/2020_day_16_solutions/gg0snlr
  :body: |-
    # Ruby

    [Part 1](https://github.com/seanhandley/adventofcode2020/blob/master/ruby/day_16/advent16.1.rb)

    [Part 2](https://github.com/seanhandley/adventofcode2020/blob/master/ruby/day_16/advent16.2.rb)

    Both run in ~150ms. Disregarding load/boot time for Ruby it's more like 15ms.
  :replies:
  - :author: petercooper
    :url: https://www.reddit.com/r/adventofcode/comments/ke2qp6/2020_day_16_solutions/gg0ueh2
    :body: Like this. Very idiomatically Rubyish solution. Mine was somewhat messier (though `Array#transpose` came in handy – a method I've never needed to use before).
    :replies:
    - :author: shandley256
      :url: https://www.reddit.com/r/adventofcode/comments/ke2qp6/2020_day_16_solutions/gg1g51h
      :body: "Ah nice! Thanks \U0001F601\n\nI didn't think of using `transpose` ... did you post your solution somewhere?"
      :replies: []
