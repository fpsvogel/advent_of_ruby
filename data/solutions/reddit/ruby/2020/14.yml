---
- :author: MintyMiku
  :url: https://www.reddit.com/r/adventofcode/comments/kcr1ct/2020_day_14_solutions/gg08r3p
  :body: |-
    # [Ruby](https://github.com/Ciremun/AOC-2020/blob/main/14%20-%20Ruby/14.rb)

    it just works 4Head
  :replies: []
- :author: Krakhan
  :url: https://www.reddit.com/r/adventofcode/comments/kcr1ct/2020_day_14_solutions/gfvx57t
  :body: |-
    # Ruby

    Took me awhile due to just learning more of the stuff ruby has to offer for this. I did peak a bit before and did see the use of the repeated\_permutation being a very nice time saver though. :)

    [paste](https://topaz.github.io/paste/#XQAAAQA2BgAAAAAAAAAkk4as5/1fmEdghelgYMg6VrsIK/UBR2vu5GgUjeztZFOMhdNgpLgx74sjP7cfZLLgPnfjH19j93zimPOcyRiaOsNyuGVl34T27q33yI7WUCYtyV2RlViqdyqRz5NtpdJ8M/ltXHnk8kEOLgarODukYeCLCPGbwu1QIgxrm9rYyE8ANN7y3Dv9Ui1ShiEJIpbPcE+XTbtznyfGhw3WUFT0w9gDEioL/moxPa/0CAkSj29eD1GFxihtgyjXco+KGOaJZHdFmBUxgk+XNssXjMFLyelsug4QkyV5iCCG4HhrdnJFfuMi7Ae68M2+b/FGtbZdmhw+Cz9BdQHDP78I5I8VTO+QBJSLrIeM5/DYVGXNbzUOn+7SRDSa+W+OUkqUUJGAEEsH2mYUEWNHLJuTY5B+DflNw+qywtMyuwrOr0iD2whD+W1ebeBfIlWK6tjcC4YXh0ELkA7qxSHAX6HuHG8cPjZhYjUrKZwHDRJjuqeNljg85p5iy5sGkz+PhU0XdQ4vtPR/vQ6Tj7+DAFKK52MLiI5p6de3AYwp+XqrLdsZ1kygso5P9PST6EHGFqFVZDtdxe83ci+b1yl3Glkb217rnh9FHuS2RLHVsRxYVPLYjSJtvHYUciIgid2wyua3UZ3JxSmfvXegE+2Gl9daPWO2dhjMbuYD8zVb6scZGkUOYzTe/xEqxEMu+5MFep8nu+XtIXXitdar2n48YGgzL54snH3gAqXqmk+6qDuKDiSVTrLooeE7PrE8FHbNW447wqLjrLkBEURd35JPHGTqsUaIlddtKB1UwG1lazTvfmNWXX2WTEBjvBa6sYMbVR7ZCjX5tsToqrH5HyUX74nb/mpajkXBGR4fXSJioWqlA53DfYjRwlU9g0U/Nxsv1BAeZfwY/fa7kpw=)
  :replies: []
- :author: willkill07
  :url: https://www.reddit.com/r/adventofcode/comments/kcr1ct/2020_day_14_solutions/gfvakic
  :body: |-
    # Ruby

    [paste](https://topaz.github.io/paste/#XQAAAQDdBQAAAAAAAAAxmwhIY/U9BVB8ketYcM8sE4hjXrFjIt9vIZU63PHjs/EBsxdoahabvHzgv+yWg5ttwac91QaHxPaH95XpPuREaqTx4tJjQxZq2wlMYIh5mBw2SxfNNxkBcGm2pVS5aa+ew6Dcf/De/60WPLCdBcxlz7U8PgTwkw2fUOHlSzgyfZ9yVWZdsXUeNCyqSK7jLbcGVeQTVubic3fmjG3OqzGKIB/zaMn4b++7Sbz61bjKmPC5NUHq9F4qjkHU7ySoJ0DfxvcTWRv9PH2QSifItl6B9/ich5uPAOxfyFmEwl+N4YESKynIAjktDXldQNNnGMnhXCrwCD+6dJrJKEK+FrMGTLajrTPKWKAPEsYhQ+gDmGiLerCoJeYpuf0GeURl2udeOsuV8dnnxpZIgm43R7DfWS+fW7SYOaWIHNj2+Zm7ak7ZtDFrFsDwMbj9HQjXtfk8+kD/v7Fs2um2rGZufRgwSrIrCdsfFzwQ+f2A9O7vS1nDEdfI0eUBdNgco3Gyhn+5c39CITy7cA+eMszt6ksXAW1H8FQAZfLLrPhj5lE7Lxm1MBTXGNOoXOjrBxAQSwuODVRNyd9Rl5a43dOnmEpfGlVPxXmU8dOItl3pHv9ouiSiht2J9DV0D5cDckSsdq4x5Vx6BFpEeJiAnQynlRoGyBVxG4/5cjldT/2UyIzlaGo3h3C2yPN+HzeUKMtvFqwkrQkP1JyvPsyP/utohQ==)

    My only experience with ruby prior to today was working with an awesome [autograding platform](https://www.github.com/autolab/autolab) deployed at the university where I teach

    I defined an abstract base class + two implementations for each part. Overall I'm pretty pleased!
  :replies: []
- :author: adjudicator
  :url: https://www.reddit.com/r/adventofcode/comments/kcr1ct/2020_day_14_solutions/gfuh7xh
  :body: |-
    Ruby Part 2.

    Man... ruby is really not meant for bitwise operations.

    `0` is truthy. `0b0` is not. Got sick of mixing them up and did this as strings without XORs. Big yikes.

    https://pastebin.com/9S77hyCc

    refactored a bit: https://pastebin.com/w4zyYfSJ
  :replies: []
- :author: billiamthesecond
  :url: https://www.reddit.com/r/adventofcode/comments/kcr1ct/2020_day_14_solutions/gfsezb0
  :body: |-
    [Ruby](https://www.billiam.org/advent-of-code/14.html)

    Needs cleanup, but another successful use of repeated\_permutation
  :replies:
  - :author: adjudicator
    :url: https://www.reddit.com/r/adventofcode/comments/kcr1ct/2020_day_14_solutions/gfuzeql
    :body: |-
      > repeated\_permutation

      Cooooooool. Had no idea. I just did:

      ```ruby
        def bit_combinations(bits)
          combinations = []
          (2**bits).times do |number|
            combinations.append(
              number
              .to_s(2)
              .rjust(bits, '0')
            )
          end
          combinations
        end
      ```
    :replies: []
- :author: justinpaulson
  :url: https://www.reddit.com/r/adventofcode/comments/kcr1ct/2020_day_14_solutions/gfsa36z
  :body: |-
    Ruby 325 / 310

    First day I was actually under 500 for both! Hoping to hit the leaderboard sometime... I think my solutions are just more wordy than they need to be...

    [Github](https://github.com/justinpaulson/advent-of-code-2020/blob/master/day_14.rb)
  :replies: []
- :author: odlp
  :url: https://www.reddit.com/r/adventofcode/comments/kcr1ct/2020_day_14_solutions/gfszlek
  :body: |-
    **Ruby**

    - [Part 1](https://github.com/odlp/advent-of-code-2020/blob/main/day-14/part1.rb)
    - [Part 2](https://github.com/odlp/advent-of-code-2020/blob/main/day-14/part2.rb)
  :replies: []
- :author: gurgeous
  :url: https://www.reddit.com/r/adventofcode/comments/kcr1ct/2020_day_14_solutions/gfsa879
  :body: |-
    Ruby, 835/440

    Big breakthrough was just treating things as strings since perf isn't an issue. As usual, many comprehension errors from typing way too quickly. In part 1 I initially assumed there was only one mask. In part 2 I kept operating on the value (not the address). Sigh. This has been cleaned up a bit, don't despair rubyists.

    https://gist.github.com/gurgeous/eeeef7c3760ae2825d93313912ba83ab
  :replies: []
- :author: frontpageminus
  :url: https://www.reddit.com/r/adventofcode/comments/kcr1ct/2020_day_14_solutions/gfsctyo
  :body: |-
    Ruby 3481/2141. I wasted a lot of time before I realized the issue was that `x | y & z` != `(x | y) & z`.

    [paste](https://topaz.github.io/paste/#XQAAAQBFBgAAAAAAAAARiAqGkkN7pUjVWW5QMRJorQl/iGDTuz7z9FE7Z0PROHdaroTicEU21UyHqu+JbrZn/hZVJVA0o7+hBbTdOUtULU7YRXF8ZeND/yP8nUt4GSQfvvOXxsFQUu/S5kfezPDFrh8UVeGBywu+Tsmdm7fBw/uebQWn/OUtkuYg7pHYif7HYE7mdq8/UAD4eq2xCKQyvq2NM0CBnu3tEjr3TVSA1kOA6B7qA5WjP0tZ97QjNG2BZjb7WLwYybRXPUvvIhvTcA+BYUb/rAwCQ1xaXVeNSug586eu8fuubIYzf0bet9YM7slUvq9poS7RtWlyWGwf5jeyqVRANHxDOP2Ld7Ff7ADXIQizNkgUWLumY0EpNhaEOgJ/AOKDKZa9+LjcBFNjwUHauibFBwvf+be2oiIlh+ZjmEmpg727tnfrQv6zqPeJJbDm62MMs9OzGEUqOuledDjU2nyYBErjYW6TVg2gFSLYml9xxC+4ogHkICymn/Yfm3q8LFxLNO7eI0TigZ96KfOlhD+C5UV14iJ0VBynrG4PRs+YM82sZVUKFp04tHy3wbhp1kidYRiM2MOI2rp05732v3+EsqeodL6KHPjc3hHCjLmaRJykTDaoWv3TwoGV1M2al3YHbAvIyd8BmeU5cBd41ZTMK8uFFRlUDpCiOHD+wpC1kQ3ZQSTq7QZE4iwj/b8VoA==)
  :replies: []
- :author: CodeIsTheEnd
  :url: https://www.reddit.com/r/adventofcode/comments/kcr1ct/2020_day_14_solutions/gfsdyft
  :body: |-
    **Ruby:** 11:43/26:41, 489/470

    Here's a [recording](https://youtu.be/5KUmnuaIq14) of me solving it, and the code is [here](https://github.com/PaulJuliusMartinez/advent-of-code/blob/bbd16fef4f01e20467d4446ebf3e22f0a8122def/2020/dec14.rb). (I'm streaming myself solving the problems right when they come out on [Twitch](https://twitch.tv/codeistheend)!)

    Wow, I am not good with bitmasks.

    Looping from 0 to n, then using Ruby's combination method is definitely a much better way to loop through power sets. That approach crossed through my mind, but I ended up going a different, very convoluted route.
  :replies: []
