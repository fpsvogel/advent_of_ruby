---
- :author: adjudicator
  :url: https://www.reddit.com/r/adventofcode/comments/kbj5me/2020_day_12_solutions/gflr8bq/
  :body: |-
    OO Ruby:

    https://pastebin.com/wR4j041i

    Just using the 90 degree neg/swap vector rotation trick. Still took a while to figure out!
  :replies: []
- :author: odlp
  :url: https://www.reddit.com/r/adventofcode/comments/kbj5me/2020_day_12_solutions/gfkejes/
  :body: |-
    [Ruby](https://github.com/odlp/advent-of-code-2020/blob/main/day-12/solution.rb)

    Enjoyed cracking out `Array#rotate!` ([ref](https://ruby-doc.org/core-2.7.2/Array.html#method-i-rotate-21)) to adjust the direction in part 1!
  :replies: []
- :author: willkill07
  :url: https://www.reddit.com/r/adventofcode/comments/kbj5me/2020_day_12_solutions/gfjy87o/
  :body: |-
    # Swift

    [paste](https://topaz.github.io/paste/#XQAAAQAKCAAAAAAAAAA0m0pnuFI8c4GDemuKS6NnNxbsUIBZ1PBVtHNiuwjq8Qk8GVq20+X09OWAuALN2UVWvl6h0A0MQ3N5G/M7yGoSR8eJo1GbatXfAWSxaYO1i6UlYkLCuNmE4B8KhFv2h3Z/5qJMqd6gt9Gk1XMUXUVUODpI6bv5mwuVa8dExIX8Ps7PUMg6qEPNMwa1KFAyimZZ/+5v/+C7xo+DAiRPQd60EmWhFNR3F3a55H80vhY+LtcCgL9MYWVizAaD7Iw1AxN+K7xAj97DsGUkVKF4a8fBMAn/G+AZL+h6BgFGKIvtKD8XaNC5CtAXV7xxD4JlL0qZi2xBUDGuZpGB+6g3TevngMFSL8hKSb3npuPWumMAmVktiRyYC4V54zX4ytBAT/tLzAY67toiK1xORpfz5hmmSeeaoJYdSMYXn5rWssaueme+5cjovlD0Mdm8pXzYIHEva4bHtamQQYTP1iRWmINJ/CzwBBYg6nVPQWVdEOirVnkHg+LANZra1n2819wX9+E4NMXkZnATp8NzkGlCdDXPekg53czlziYmInueicf9XBKw4Cm9R+2asGsJ6SYJHmk+z6dGd9/DFkitaRD5CTu+NYsG/SlQdAwaWu4CD414elfxdsdPmE8lhMKLKSeHuSsDjH/HwVk4DVfCMnHbxxs3to/yqqlh2Kaf04ipECnVLFLdFXDbybFMa/f/Fk4qz8BzmD+XnFi1L8Ege7qP93QP27ZPqkQALmfseOvmdNU6GoCtUM2wYVCwYAj1z2byuEtQWjzcPI1hsYin/JFKfHEisXF0S2AmWAS9M4+WVIVg4pzRyY1xo5w5OFBZKZ0gkvUy6qM3vpP4uf5C/IPI1g+RCoPfVqhbo2wlw4KMAcNDC8y+kUdulkoy/4qYMkg=)

    My first swift program (ever) for Advent of Code! -- pivoting and going to try to do 25 different languages this year.

    Done: C (2) , C++ (6) , Java (3), OCaml (1), Python (4), Bash (5), Swift (12) Todo (well, ones to choose from): F#, Haskell, Lisp, C#, Javascript, Typescript, Perl, Ruby, Scala, Rust, Assembly, Kotlin, FORTRAN, D, Go, Nim, Awk, Sed, Perl
  :replies:
  - :author: its_a_gibibyte
    :url: https://www.reddit.com/r/adventofcode/comments/kbj5me/2020_day_12_solutions/gfkblw5/
    :body: This is an awesome idea, and a cool way to familiarize yourself with a bunch of different languages. What about Raku? If you're planning on doing Perl anyway, it'd be nice to do them one after another and compare the two.
    :replies:
    - :author: willkill07
      :url: https://www.reddit.com/r/adventofcode/comments/kbj5me/2020_day_12_solutions/gfl7nx4/
      :body: |-
        Well /u/ **abigail** mentioned that I have Perl twice to choose from... so I’ll add Raku to the potential list

        I have some familiarity with most of these, so it’s just a matter of **doing** it
      :replies: []
  - :author: __Abigail__
    :url: https://www.reddit.com/r/adventofcode/comments/kbj5me/2020_day_12_solutions/gfk9wvu/
    :body: Perl twice? Good choice.
    :replies: []
  - :author: i_have_no_biscuits
    :url: https://www.reddit.com/r/adventofcode/comments/kbj5me/2020_day_12_solutions/gfk6bu5/
    :body: |-
      ... GWBASIC?

      Come on in, the water's lovely!

      (You can dip your toe in the water with QBASIC if you want...)
    :replies: []
- :author: parentheses-of-doom
  :url: https://www.reddit.com/r/adventofcode/comments/kbj5me/2020_day_12_solutions/gfi249v/
  :body: |-
    [Ruby](https://github.com/Prajjwal/advent-of-code/blob/master/2020/ruby/day_12.rb)

    Had a bit of fun with this. Modeled ferries as objects aware of their location in a 2d space that you can issue commands to.

    Runs lightning fast, too, since the cartesian transforms are just static lookups.
  :replies: []
- :author: petercooper
  :url: https://www.reddit.com/r/adventofcode/comments/kbj5me/2020_day_12_solutions/gfiw6qf/
  :body: |-
    # Ruby

    Kept it [short and sweet](https://gist.github.com/peterc/ef27494a081c48334d1ef29ff67f9f4c) today. I don't do both solutions in one file so mushed them together here.
  :replies: []
- :author: gurgeous
  :url: https://www.reddit.com/r/adventofcode/comments/kbj5me/2020_day_12_solutions/gfhsb4b/
  :body: |-
    Ruby, 50/305

    Cleaned up version below. I misread part 2 and was diligently calculating the distance between the ship and the waypoint, sigh. I admire those who can do this quickly with complex numbers.

    https://gist.github.com/gurgeous/925b29e43f1f0203985f40bb799fd752

    Edit: here's how you do it with Ruby's Complex number support. I gotta learn this https://gist.github.com/gurgeous/a719b780fa5b117ec5a8f6ede5280985
  :replies:
  - :author: ald_loop
    :url: https://www.reddit.com/r/adventofcode/comments/kbj5me/2020_day_12_solutions/gfhsjry/
    :body: |-
      > sigh. I admire those who can do this quickly with complex numbers.
      >
      > 50/305

      Does not compute
    :replies: []
- :author: frontpageminus
  :url: https://www.reddit.com/r/adventofcode/comments/kbj5me/2020_day_12_solutions/gfhsbhf/
  :body: |-
    Ruby 744/1520. My brain absolutely shut down trying to figure out how to do the L/R rotations in part two.

    [paste](https://topaz.github.io/paste/#XQAAAQCpBgAAAAAAAAARiAqGkkN7pUjVWW5N06C9m0mxVKYwp83rTcRiKZucKy4ybNfbMp0Ut7lQYAGdIiY8Ss+49n+2YO5gh8nFh4IluugFFJd3MqZpehAvPqerIS/eDJJ2lyaUXh9xddAmGUA0ojALOLzyegeztuXdWijKBp8cEPi0NK7+91NXXH/EhX8o5hu7nYFFl4On5dMfZvkztMvb3fPtC6TGigR9H7AFB2A/pk8coLYV3mGmhrEPnZHPq5pP7zf/zYc+QoJz0xkPD/6QKN/Jrs6G1iDx49lR5RMaensNbQPWgMptlmx6kX6mTCM+ibVSDl9A8iR9E7iyTh0mopQ3Skv2luUBJCk0uDJVnfso2BGS4GuhOhGkC2Xe9G6tVRlGMn0SNsteteL4PjNn+vJJCVcRWZbKwvbGqrts/7x5zolt/H4SLZX48cW9Y1Vc5ONnIBk2ojQae/HDyU3vPX/RBaP5BM+672pBjqKRu+wfOPuudYBojizeRH5PGf/gUtHPJVHzfubM+ULS6VDU53wuH0Aggi5Ebrhn9i2/0zpt70KzKpvU4ycvVx9Nz7pBJv/2rpp4)
  :replies:
  - :author: sentry07
    :url: https://www.reddit.com/r/adventofcode/comments/kbj5me/2020_day_12_solutions/gfhtb5p/
    :body: I misread the second part and thought it was still rotating the ship. Then I fixed it and screwed up an if statement and my 180 rotations weren’t happening. I shouldn’t do these when I’m tired.
    :replies: []
  - :author: nospamas
    :url: https://www.reddit.com/r/adventofcode/comments/kbj5me/2020_day_12_solutions/gfi5fdd/
    :body: If you ever need a reference in future googling for "Coordinate rotation rules" or "Coordinate rotation table" will get you something like [this](https://useruploads.socratic.org/V4G3pprQT5evsH3JS5Zy_9D861043-9375-4DC6-85EE-5FDA751F5053.png). You could probably work it out with a piece of paper but way easier to google.
    :replies:
    - :author: frontpageminus
      :url: https://www.reddit.com/r/adventofcode/comments/kbj5me/2020_day_12_solutions/gfkcc48/
      :body: Yeah, that would’ve been much easier than drawing it out. Thanks!
      :replies: []
- :author: "[deleted]"
  :url: https://www.reddit.com/r/adventofcode/comments/kbj5me/2020_day_12_solutions/gfhxo8f/
  :body: |-
    # Ruby

    5458/4751

    [https://gist.github.com/Clashbuster/b66c950a6ad762a378d5c3c54d78c1a5](https://gist.github.com/Clashbuster/b66c950a6ad762a378d5c3c54d78c1a5)
  :replies: []
- :author: Krakhan
  :url: https://www.reddit.com/r/adventofcode/comments/kbj5me/2020_day_12_solutions/gfi05h8/
  :body: |-
    # Ruby

    Nice easy one for Friday. Got to bust out some complex numbers to help simplify the rotation calculation for part 2 ironically enough. :)

    [pastebin](https://pastebin.com/RdhqEzCa)
  :replies:
  - :author: jtgorn
    :url: https://www.reddit.com/r/adventofcode/comments/kbj5me/2020_day_12_solutions/gfipktf/
    :body: |-
      I have the same approach, however I prefer another style of coding

      ```ruby
      a = ARGF.readlines.map{ |ins| [ins[0], ins.chomp[1..-1].to_i]}

      i = Complex::I
      angle = { 90=> i, 180=> -1, 270=> -i}

      puts "Part 1:"
      pos = Complex(0,0)
      dir = Complex(1,0)

      a.each { |ins,n|
        case ins
          when 'N' then pos += n*i
          when 'S' then pos += -n*i
          when 'E' then pos += n
          when 'W' then pos += -n
          when 'F' then pos += n*dir
          when 'L' then dir = dir*angle[n]
          when 'R' then dir = dir*angle[360-n]
        end
      }

      puts pos.real.abs+pos.imaginary.abs
      ```
    :replies: []
  - :author: Krakhan
    :url: https://www.reddit.com/r/adventofcode/comments/kbj5me/2020_day_12_solutions/gfi7jcv/
    :body: |-
      More compact version that uses complex numbers for both parts after realizing the generalisation noting that Part 1 is just a 'waypoint' at (1, 0) as well. Edit: Realized as I woke up that the only thing needed to change was whether you're moving the ship or waypoint. So, corrected function here below for that.

      [pastebin](https://pastebin.com/SDzcS0mx)
    :replies: []
- :author: CodeIsTheEnd
  :url: https://www.reddit.com/r/adventofcode/comments/kbj5me/2020_day_12_solutions/gfi084b/
  :body: |-
    **Ruby:** 7:16/14:30, 347/257

    Here's a [recording](https://youtu.be/tQpDPgLesCU) of me solving it, and the code is [here](https://github.com/PaulJuliusMartinez/advent-of-code/blob/63fa11dda94d4f5470e6a8e280d69efeedb1b467/2020/dec12.rb). (I'm streaming myself solving the problems right when they come out on [Twitch](https://twitch.tv/codeistheend)!)

    Reasonably satisfied with this one. I imagine people who do more competition coding have rotation matrices down pat. Lost some time in Part 2 due to a bad find/replace.
  :replies: []
- :author: el_daniero
  :url: https://www.reddit.com/r/adventofcode/comments/kbj5me/2020_day_12_solutions/gfizpvb/
  :body: |-
    # Ruby

    Today was the first day I did't bother refactoring part 1 into something reusable for part 2. Instead I copied the loop and replaced the oneliners for each instructions in the `case` statement. Messed up and wasted a lot of time because I forgot to replace every necessary piece.

    ```ruby
    instructions = File
      .readlines('input-12.txt")
      .map { |line| [line[0], line[1..-1].to_i] }

    DIRECTIONS = [
      [1, 0], # east
      [0, 1], # south
      [-1, 0], # west
      [0,-1], # north
    ]

    # Part 1
    x,y = [0, 0]
    dir = 0

    instructions.each do |inst, arg|
      case inst
      when 'R'
        dir += arg
      when 'L'
        dir -= arg
      when 'F'
        i, j = DIRECTIONS[dir / 90 % 4]
        x, y = x + i*arg, y + j*arg
      when 'E'
        x += arg
      when 'S'
        y += arg
      when 'W'
        x -= arg
      when 'N'
        y -= arg
      end
    end

    puts x.abs + y.abs

    # Part 2
    ship_x, ship_y = [0, 0]
    waypoint_x, waypoint_y = [10, -1]

    instructions.each do |inst, arg|
      case inst
      when 'R'
        (arg / 90).times { waypoint_x, waypoint_y = -waypoint_y, waypoint_x }
      when 'L'
        (arg / 90).times { waypoint_x, waypoint_y = waypoint_y, -waypoint_x }
      when 'F'
        ship_x += waypoint_x * arg
        ship_y += waypoint_y * arg
      when 'E'
        waypoint_x += arg
      when 'S'
        waypoint_y += arg
      when 'W'
        waypoint_x -= arg
      when 'N'
        waypoint_y -= arg
      end
    end

    puts ship_x.abs + ship_y.abs
    ```

    Also, for part two at first I had `puts ship_x + ship_y` at the bottom (forgot the `.abs` part) and ended up with the same resulta as part1; Is there a pattern here, or just coincidence?
  :replies:
  - :author: el_daniero
    :url: https://www.reddit.com/r/adventofcode/comments/kbj5me/2020_day_12_solutions/gfmwdd8/
    :body: 'Also made an online visualization thing here: [https://daniero.netlify.app/aoc/2020/12/part2](https://daniero.netlify.app/aoc/2020/12/part2) (WIP)'
    :replies: []
