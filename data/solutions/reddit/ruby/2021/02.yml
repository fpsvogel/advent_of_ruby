---
- :author: lo-crawfish
  :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hp7qf8l/
  :body: |-
    I'm late to the party, but here's my Ruby solution:

    ```ruby
    class DayTwo
      def getInput
        File.readlines('input.txt', chomp: true)
      end

      def getPosition(input)
        horizontal_position = 0
        depth_position = 0
        input.each do |x|
          y = x.split(" ")
          if y.first == "forward"
            horizontal_position += y.last.to_i
          end
          if y.first == "down"
            depth_position += y.last.to_i
          end
          if y.first == "up"
            depth_position -= y.last.to_i
          end
        end
        horizontal_position * depth_position
      end

      def getAccuratePosition(input)
        horizontal_position = 0
        depth_position = 0
        aim = 0
        input.each do |x|
          y = x.split(" ")
          if y.first == "forward"
            horizontal_position += y.last.to_i
            if aim >= 0
              depth_position += aim * y.last.to_i
            end
          end
          if y.first == "down"
            aim += y.last.to_i
          end
          if y.first == "up"
            aim -= y.last.to_i
          end
        end
        print horizontal_position * depth_position
      end
    end
    ```
  :replies: []
- :author: thedjotaku
  :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hn0aelt/
  :body: |-
    My [Ruby solution](https://github.com/djotaku/adventofcode/blob/857a34910ea29720298c3eb4b8d9b5065d6f433b/2021/Day_02/Ruby/solution.rb)

    Today was easy enough that I was able to do Ruby, too! All in one function.
  :replies: []
- :author: Sharparam
  :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmwc4t3/
  :body: |-
    ## **Ruby** (426/627)

    Did a very messy initial solution and then rewrote to this one abusing `eval` :)

    ```ruby
    $position = 0
    $depth = 0 # also aim
    $depth2 = 0

    def forward(n)
      $position += n
      $depth2 += $depth * n
    end

    def down(n) = $depth += n
    def up(n) = $depth -= n

    eval ARGF.read

    puts $position * $depth
    puts $position * $depth2
    ```
  :replies:
  - :author: '442401'
    :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmwd562/
    :body: |-
      Oh, that is nice! Sweet evaling, my friend. +1

      And sweet use of one line methods. +1
    :replies: []
  - :author: "[deleted]"
    :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmwctyv/
    :body: woah that's clever
    :replies: []
  - :author: snowe2010
    :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmzly8c/
    :body: |-
      I golfed your solution down to 115 chars.

      ```ruby
      $p=$a=$d=0
      f=->n{$p+=n;$d+=$a*n}
      d=->n{$a+=n}
      u=->n{$a-=n}
      eval ARGF.read.gsub(/(.).*(\d+)/,'\1[\2]')
      p $p*$d,$p*$a
      ```

      the eval is hilariously clever
    :replies:
    - :author: Sharparam
      :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hn1bdwk/
      :body: |-
        Nice one :D

        Yeah, last year there were at least 2 days where I saw the input and went "this could be valid Ruby code with some defines". Always nice to abuse that property.

        Edit: [2020 day 18](https://github.com/Sharparam/advent-of-code/blob/main/2020/18/solution.rb) was another fun one.
      :replies:
      - :author: snowe2010
        :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hn1jsjo/
        :body: That’s awesome. I’ll need to unlearn some good habits to start seeing things that way lol. I need to go back and finish all the years I started and never completed.
        :replies: []
  - :author: Chrinkus
    :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmwg6mk/
    :body: LOL 'depth is also aim'! I didn't pick up on that while working it out but something DID bug me about 'aim'. Well done!
    :replies: []
- :author: BluFoot
  :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmwdm4d/
  :body: |-
    **Ruby 78 bytes.**

    ```ruby
    h=d=a=0
    $<.map{
    n=_1[-2..].to_i
    _1[?f]?(h+=n;d+=a*n):a+=n*(_1[?d]?1:-1)}
    p h*d
    ```
  :replies:
  - :author: '442401'
    :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmwhtpk/
    :body: |-
      > `n=_1[-2..].to_i`

      We are assuming (rightly or wrongly) that the magnitude of the command is only 1 digit.

      In that case, can we save a few bytes by `n=_1[-2].to_i` ?
    :replies:
    - :author: BluFoot
      :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmxzhgx/
      :body: I did that originally, but the last line doesn't have a newline character :( So on every line but the last line, it's [-2], but for the last line it's [-1]. [-2..] works because it simply includes the space before the number in the last line.
      :replies: []
  - :author: snowe2010
    :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmzhmak/
    :body: |-
      dang, that's good. Mine was a few characters longer and I assume I've already got the lines as an array.

      ```ruby
        h,a,d=0,0,0
        lines.map(&:split).each{|k,i|v=i.to_i;if k[?f];h+=v;d+=(a*v)end;a+=v if k[?n];a-=v if k[?u]}
        p h*d
      ```

      completely forgot you could multiple assign like that, and not splitting the lines saves you a lot. Glad I came to the same `k[?f]` solution as you though, I thought I was really smart lol.
    :replies:
    - :author: BluFoot
      :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmzszxu/
      :body: Nice, yours is pretty great too!! Using the ternary operator is a very ugly but effective solution to to save some characters as well :)
      :replies: []
- :author: snowe2010
  :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmze5ma/
  :body: |-
    # Ruby

    with both normal and golfed solutions:

    https://github.com/snowe2010/advent-of-code/blob/8771b40cad30e0cf9bf5f4662351d62bd05e6d5c/ruby\_aoc/2021/day02/day02.rb

    ## p1 ungolfed:

    ```ruby
    hsh = Hash.new(0)
    lines.map(&:split).each do |dir, amount|
      hsh[dir] += amount.to_i
    end
    hsh['forward'] * (hsh['down'] - hsh['up'])
    ```

    ## p1 golfed:

    ```ruby
    h=Hash.new(0)
    l.map(&:split).each{h[_1[0]]+=_2.to_i}
    h[?f].*h[?d]-h[?u]
    ```

    ## p2 ungolfed:

    ```ruby
    hp = 0
    aim = 0
    depth = 0
    lines.map(&:split).each do |dir, amount|
      a = amount.to_i
      if dir == 'forward'
        hp += a
        depth += aim * a
      end
      aim += a if dir == 'down'
      aim -= a if dir == 'up'
    end
    hp * depth
    ```

    ## p2 golfed:

    ```ruby
    h,a,d=0,0,0
    l.map(&:split).each{|k,i|v=i.to_i;if k[?f];h+=v;d+=(a*v)end;a+=v if k[?n];a-=v if k[?u]}
    p h*d
    ```
  :replies: []
- :author: "[deleted]"
  :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmy7i73/
  :body: |-
    Part 2, Awk.

    ```ruby
    BEGIN { pos = 0; depth = 0; aim = 0 }

    $1 == "forward" { pos = pos + $2; depth = depth + $2 * aim }
    $1 == "down" { aim = aim + $2 }
    $1 == "up" { aim = aim - $2 }

    END { print pos * depth }
    ```

    My main solution was Ruby, I just wrote this for fun
  :replies:
  - :author: campingD
    :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmyamyd/
    :body: looks so clean
    :replies: []
- :author: dtinth
  :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmwa7uc/
  :body: |-
    Ruby, 251 / 155

    [paste](https://topaz.github.io/paste/#XQAAAQD6AAAAAAAAAAARiAbIwVXFxjAFhvd0P6dc/kdEmPKdJWEA65I7TrC7n2ao7P3Wc51+w9su91+56HN1jRznHXIgR+rEUnYEvISM/5gRXUpD7hVfyvGcL+Q4BtKN746NCjPQyKBRw6xBdEN9GBvCD3Xy0dbm3SQb51XD9DxpxkGbyyzor7EZWFbgrvP7pTF7ncgRD+ci653KA/BtC3P3w/TBDsQxt8P/d9kAAA==)

    I got slowed down by duplicate variable names. **Note to self:** Next time, stick with the names given by problem. Don’t shorten `horizontal position` down to `x` because it clashes with the input `x` in the problem, try something like `hpos` instead.
  :replies: []
- :author: gurgeous
  :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmwa95c/
  :body: |-
    **Ruby** , 546/993 (you guys are fast!!)

    ```ruby
    depth = horiz = aim = 0
    data.each_line do
      x = _1.split.last.to_i
      case _1.split.first
      when "forward" then horiz += x ; depth += aim * x
      when "down" then aim += x
      when "up" then aim -= x
      end
    end
    p horiz * depth
    ```
  :replies:
  - :author: AbdussamiT
    :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmwaixp/
    :body: From where do you see that you ranked 546 and 993 respectively?
    :replies:
    - :author: MasterMedo
      :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmwapci/
      :body: When you submit the solution it tells your rank, but you can also check it on the stats -\> personal stats page :)
      :replies:
      - :author: heroBrauni
        :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmwbdlu/
        :body: |-
          It is under Leaderboard -\> Personal Stats, in case someone else can't find it:

          https://adventofcode.com/2021/leaderboard/self
        :replies:
        - :author: AbdussamiT
          :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmwc0k7/
          :body: Found it, thanks! Thanks to you too u/MasterMedo
          :replies: []
      - :author: TransdermalHug
        :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmwaxlb/
        :body: It only tells you if you're in the top 1000. Otherwise, you have to look at the personal stats page.
        :replies: []
- :author: "[deleted]"
  :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmwciod/
  :body: |-
    ## Ruby

    https://github.com/zsarge/advent-of-code-2021/blob/main/solutions/02/solve2.rb
  :replies:
  - :author: '442401'
    :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmwcr3x/
    :body: Yup, mine was similar. Haven't found a way to do it without massive `case` statements, yet.
    :replies:
    - :author: "[deleted]"
      :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmwdjn3/
      :body: |-
        [Take a look at this person's solution using eval](https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmwc4t3)

        edit: nevermind, i guess you saw it :)
      :replies:
      - :author: '442401'
        :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmwjwsj/
        :body: "Yup, pretty sweet. \U0001F44D"
        :replies: []
    - :author: BluFoot
      :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmwdsa8/
      :body: This works if you can read it https://www.reddit.com/r/adventofcode/comments/r6zd93/comment/hmwdm4d/?utm_source=share&utm_medium=web2x&context=3
      :replies:
      - :author: '442401'
        :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmwkcla/
        :body: Nice! I can just about follow that. It's amazing how flexible Ruby is, it can be as beautiful, or as ugly, as you choose. Whatever brings most joy! (Thank you, Matz)
        :replies: []
- :author: CodeIsTheEnd
  :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmwdh94/
  :body: |-
    **Ruby** : 1:36/2:50, 87/82!

    Here's a [recording](https://youtu.be/uTPQ6FMlmgo) of me solving it, and the code is [here](https://github.com/PaulJuliusMartinez/advent-of-code/blob/master/2021/dec02.rb). I stream myself solving every day's problem on [Twitch](https://twitch.tv/codeistheend)!

    Made the leaderboard! Missing the '=' in a '+=' cost me 10 seconds on Part 2 and about 20 leaderboard spots.
  :replies:
  - :author: '442401'
    :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmwktpz/
    :body: |-
      _cough_ 26 seconds _cough_

      Great effort though. I love your postmortems. Subscribed!
    :replies: []
- :author: LyleiLanar
  :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmwuhu5/
  :body: |-
    Here's my solution:

    [I love unnecessary long code in Ruby :D](https://github.com/LyleiLanar/advent-of-code/blob/main/2021/day_2.rb)
  :replies: []
- :author: ni3t
  :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmwgy43/
  :body: |-
    ### Ruby

    Was deploying the work production app and totally missed midnight.

    ```ruby
    @data = DATA.each_line.map(&:chomp)
    @ex1 = ex1.each_line.map(&:chomp)
    @ship = [0, 0]
    @ship2 = [0, 0, 0]

    @data.map do |line|
      _, dir, deg = line.match(/(\w+) (\d+)/).to_a
      case dir
      when 'forward'
        @ship[0] += deg.to_i
        @ship2[0] += deg.to_i
        @ship2[1] += (@ship2[2] * deg.to_i)
      when 'up'
        @ship[1] -= deg.to_i
        @ship2[2] -= deg.to_i
      when 'down'
        @ship[1] += deg.to_i
        @ship2[2] += deg.to_i
      end
    end

    puts @ship[0] * @ship[1]
    puts @ship2[0] * @ship2[1]
    ```
  :replies:
  - :author: snowe2010
    :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmzh21n/
    :body: interesting solution
    :replies: []
- :author: antoniotto
  :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmwtdow/
  :body: |-
    My solution for part 2 in Ruby. Any advice warmly welcome. Thanks.

    ```ruby
    instructions = File.readlines('input_day2.txt', chomp: true)

    class Submarine
      attr_reader :depth, :horizontal_position, :aim

      def initialize
        @depth = 0
        @horizontal_position = 0
        @aim = 0
      end

      def move(instruction)
        direction = instruction.match(/([a-z]+)/)[0]
        quantity = instruction.match(/(\d)/)[0].to_i
        case direction
        when 'forward'
          @horizontal_position += quantity
          @depth += @aim * quantity
        when 'down'
          @aim += quantity
        when 'up'
          @aim -= quantity
        end
      end

      def position_product
        @horizontal_position * @depth
      end
    end

    my_sub = Submarine.new

    instructions.each { |instruction| my_sub.move(instruction)}

    p answ2 = my_sub.position_product
    ```
  :replies:
  - :author: snowe2010
    :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmzgswt/
    :body: |-
      for your instructions, you can use regex, but it's much simpler to just split the string, and then use multiple assignments to assign each value.

      `direction, quantity = instruction.split`
    :replies: []
- :author: jeffers0n
  :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmxb66r/
  :body: |-
    My Solution in Ruby is here: [https://git.doublehack.me/s00ner/AoC2021/src/branch/master/day02/solution.rb](https://git.doublehack.me/s00ner/AoC2021/src/branch/master/day02/solution.rb)

    Pretty straightforward. Happy to hear criticism of my code.
  :replies:
  - :author: snowe2010
    :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmzdq2m/
    :body: "looks good! easy to read I like it! I golfed mine so mine is completely unreadable \U0001F605"
    :replies: []
- :author: dirtydave0221
  :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmxoq54/
  :body: |-
    [Day 2 Solution via SnapLogic IIP](https://imgur.com/6iVSWgn)

    I'm doing the solutions right as they're released via Java, then using the product I work on (the SnapLogic Intelligent Integration Platform [IIP]) at work to do them during the day (yes, it gives me an advantage because I know how the puzzles work, but man, it's hard).

    The only way to represent them is with the screenshot of the block-based representation. I'll be putting a github repository together of after-the-fact pipelines if others are interested.

    The rule(s) that I've been using so far is that I can't use our script snap (basically allows the use of python or javascript or ruby directly in the platform) other than for running aggregations and only as a last resort, which I had to today in order to aggregate the running aim value, there's not really a way to do these kinds of aggregations where you might need the aggregated value within the stream of documents (perhaps we need to add something to do that)

    [All Solutions](https://imgur.com/a/t02e0dA)
  :replies: []
- :author: roundscribehector5
  :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmxsizh/
  :body: |-
    [OOP Ruby Solution(refactored for part 2)](https://topaz.github.io/paste/#XQAAAQAZBQAAAAAAAAA5GUqKNoFH6SMnPH0B27EPe3NVv6DkupK7fPy5HX6q3gJULAlCRfWhi77KvRbNPpJROieHwkSIeYOkK5d9tLdEte6puwksCa3gAUZ1KWv2nahRgEEcme1gUjTMmgKr5rGLzUgHS3vnNeJL8WwOiGN4U8PRpt7nkTCl6jRTkwk/AUsrjx0EAEarywoCKb7Curm5fD5yqJW6wZ11XeDjHxocXesS5TZDJIRZX9orjbujOvRgGUpvHaIKw1nA+7RXZ03JHVLTW/JX58KzzxRD8IgARU3dnnmIUubpYDX0u47qRnbp/pd3Nlojz2hXo3ARbG9V3+g2indp1N4WjY5lqz349xBDvc0XPTbEz5wyWhtuu5gqV+DVCDpOAOgDjI9XCPwd4WtdvkUgicfJa/bCz1Udqralz7LXXx39aeHupR0g5yHbt9yTc1VD0h18XwSyJnnzxdUv5MiprCa3k5zIHU59oeuw0lYC97/qGBsl/t2DhGER4GrFCZ8yDhqzzKvbRacUE31qO31Uy4eLFQFZ/1wtu7XCKiqYDbVN0j1xu52YG+Nskc3dPP/3m9yh)

    I'd appreciate any feedback.
  :replies:
  - :author: tsroelae
    :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmyodzn/
    :body: |-
      Nice, but to me, looks a bit focused on the problem at hand, maybe consider a more public API.

      The method get\_location does a lot. I implemented mine, with distinct, forward, down, up methods.

      If you want to have a look https://github.com/RolandStuder/advent_of_code/commit/cb9b385e498e484389a0f427eee532fa6869cd89#diff-1d1f139bb117ffdb7a31574ad444cf143b84e2b843b9342644093f8a00210377

      Though I kept converting instructions to method calls out of the class.
    :replies:
    - :author: roundscribehector5
      :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hn2lmmd/
      :body: |-
        Thank you, I appreciate the feedback.

        I think I get the gist of what you're saying. Have the methods do less and combine them to solve the problem? Can you go into a little more detail of what you mean by public API?
      :replies:
      - :author: tsroelae
        :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hn7lkhw/
        :body: |-
          Sure, so the public API is the the way how you interact with an object from the outside.

          To compare your class has the following public methods: split_direction_and_distance / distance_to_i / get_location and new (I am ignoring the attr\_accessors for the moment. So most of those could probably be private methods. But more importantly the only way to interact with you SubmarineNavigation Object is to initialize set the `instructions`. To be fair this is exactly what the task requires. Give a list of instructions and execute them. But if I would have to interact with such an object in a codebase, I would really prefer to be able to call: `submarine.forward(5)` as opposed to `submarine.instructions << "FORWARD 5"`

          So how you let people interact with your submarine object is the public API. So if you have a public api, with method like :forward, :up, :down it is nicer to interact with.

          But of course such things are unnecessary for actually solving advent of code, as strictly speaking you alway have one puzzle input and two outputs that you need. So from that perspective it's completely fine. I may be overdoing the OOP part for puzzles, but I like the practice. For day 4 I had 4 classes, a Parser, a Game and a Board class.
        :replies: []
- :author: maattdd
  :url: https://www.reddit.com/r/adventofcode/comments/r6zd93/2021_day_2_solutions/hmyaqgp/
  :body: 'Functional Ruby : https://gist.github.com/maattdd/09ad91d44cf337857ed0d58f6a4d7be7'
  :replies: []
