---
- :author: el_daniero
  :url: https://www.reddit.com/r/adventofcode/comments/5isvxv/2016_day_17_solutions/dbb5xbi
  :body: |-
    Ruby. I made the search into a generator which yields all the paths in the order they are found. Then I could call `first` and `max` on the same object to get the answers for part 1 and 2 respectively.

    ```ruby
    require 'digest'

    CODE = 'lpvhkcbi'

    START = [0,0]
    TARGET = [3,3]
    DIRECTIONS = {"U" => [0, -1], "D" => [0, 1], "L" => [-1, 0], "R" => [1, 0]}

    paths = Enumerator.new do |yielder|
      queue = [[0, '', START]] # moves, path, coordinates

      loop do
        state = queue.shift
        break unless state

        moves, path, (x,y) = state

        if [x,y] == TARGET
          yielder << state
          next
        end

        doors_open =
          Digest::MD5.hexdigest(CODE+path)
          .chars.take(4)
          .map { |c| c =~ /[b-f]/ }

        directions = DIRECTIONS.select.with_index { |_, i| doors_open[i] }

        directions.each do |direction, (i, j)|
          new_x, new_y = x + i, y + j
          next if new_x < 0 || new_x > 3 || new_y < 0 || new_y > 3

          queue << [moves + 1, path + direction, [new_x, new_y]]
        end
      end
    end

    p paths.first
    p paths.max
    ```
  :replies: []
- :author: yjerem
  :url: https://www.reddit.com/r/adventofcode/comments/5isvxv/2016_day_17_solutions/dbarvjw
  :body: |-
    Ruby, 13/11!

    ```ruby
    require 'digest'

    PASSCODE = 'vwbaicqe'

    last_finished = nil
    found_shortest = false
    paths = [["", 0, 0]]
    until paths.empty?
      next_paths = []
      paths.each do |dirs, x, y|
        md5 = Digest::MD5.hexdigest("#{PASSCODE}#{dirs}")
        "UDLR".chars.select.with_index { |_, i| "bcdef".include? md5[i] }.each do |dir|
          path = [dirs + dir, x + {?U=>0,?D=>0,?L=>-1,?R=>1}[dir], y + {?U=>-1,?D=>1,?L=>0,?R=>0}[dir]]
          next if path[1] < 0 or path[1] >= 4 or path[2] < 0 or path[2] >= 4
          if path[1] == 3 and path[2] == 3
            if !found_shortest
              found_shortest = true
              puts "Shortest: #{path[0]}"
            end
            last_finished = path
          else
            next_paths << path
          end
        end
      end
      paths = next_paths
    end

    puts "Longest: #{last_finished[0].length}"
    ```
  :replies:
  - :author: mperham
    :url: https://www.reddit.com/r/adventofcode/comments/5isvxv/2016_day_17_solutions/dbbbt1b
    :body: |-
      Recursion will clean up your code alot.

      ```ruby
      require 'digest/md5'

      input = "vwbaicqe"
      $open = "bcdef"
      $sols = []

      def explore(str, x, y, count)
        return ($sols << str; true) if x == 3 && y == 3

        doors = Digest::MD5.hexdigest(str)[0...4].chars

        explore(str + ?U, x, y-1, count+1) if y > 0 && $open.index(doors[0])
        explore(str + ?D, x, y+1, count+1) if y < 3 && $open.index(doors[1])
        explore(str + ?L, x-1, y, count+1) if x > 0 && $open.index(doors[2])
        explore(str + ?R, x+1, y, count+1) if x < 3 && $open.index(doors[3])
      end

      explore(input, 0, 0, 0)

      p $sols.sort_by {|x| x.size }.last.size - input.size
      ```
    :replies: []
