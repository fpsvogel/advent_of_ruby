---
- :author: fixed_carbon
  :url: https://www.reddit.com/r/adventofcode/comments/5gy1f2/2016_day_7_solutions/daw1gcv
  :body: |-
    Ruby, showing part 2 only. I wasted a bunch of time trying to understand why the sample input for part 1 passed my original regexp-based code, but the real input gave me the wrong answer. Took me forever to realize the real input could contain multiple hypernet sequences on each line. Ditched my nice stateless regexp solution for this stateful mess. I feel all dirty.

    ```ruby
    def hasababab(code)
      idx = 0
      isbracket = false
      abas = []
      babs = []
      code.chars.each_cons(2) do |a, b|
        isbracket = true if a == '['
        isbracket = false if a == ']'
        if a != b
          if code.chars[idx+2] == a
            babs << [b,a,b] if isbracket
            abas << [a,b,a] if !isbracket
          end
        end
        idx += 1
      end
      return false if abas.empty? || babs.empty?
      abas.each do |aba|
        return true if babs.include?(aba)
      end
      return false
    end

    inp = File.readlines(INPUTFILE).map{|s| s.strip}
    puts inp.map{|code| hasababab(code)}.count(true)
    ```
  :replies:
  - :author: fixed_carbon
    :url: https://www.reddit.com/r/adventofcode/comments/5gy1f2/2016_day_7_solutions/daw3542
    :body: |-
      Couldn't resist polishing that stateful turd into a stateless one:

      ```ruby
      def group(addr)
        addr.split(/\[|\]/).
          zip([0, 1].cycle).
          sort_by{|a, i| i}.
          chunk{|a, i| i}.to_a.
          map{|ck, ary| ary.map{|str, num| str} }
      end

      def checkgroups2(groups)
        out, hyp = groups.map{|g| g.map{|el| getabas(el)}.flatten}
        out.each do |o|
          a, b, c = o.chars
          return true if hyp.include?(b + a + b)
        end
        false
      end

      def getabas(str)
        str.chars.each_cons(3).map{|a, b, c| (a == c && a != b) ? [a,b,c].join : nil}.compact
      end

      inp = File.readlines(INPUTFILE).map{|s| s.strip}
      inp.map{|addr| checkgroups2(group(addr))}.count(true)
      ```
    :replies: []
- :author: johneffort
  :url: https://www.reddit.com/r/adventofcode/comments/5gy1f2/2016_day_7_solutions/dawq1go
  :body: |-
    Day 7 part 2 in Ruby:

    ```ruby
    def abas(input)
      results = []
      (0..(input.length - 3)).each do |i|
        current = input[i..(i+2)]
        results << current if (current[0] == current[2] && current[0] != current[1])
      end
      return results
    end

    def match(abas, babs)
      inverted = babs.map{|b|[b[1],b[0],b[1]].join}
      return (abas & inverted).length > 0
    end

    def valid(full_input)

      brackets = full_input.scan(/\[(\w+)/).flatten.compact
      non_brackets = full_input.scan(/(^|\])(\w+)/).map{|l|l[1]}.flatten.compact

    # puts full_input
    # puts "brackets:#{brackets.join(',')}"
    # puts "non_brackets:#{non_brackets.join(',')}"

      abas = non_brackets.map{|l|abas(l)}.flatten
      babs = brackets.map{|l|abas(l)}.flatten
      return (match(abas, babs))
    end

    def process(lines)
      valid_count = 0
      lines.each do |l|
        valid = valid(l.strip)
        valid_count += 1 if valid
        puts "#{l.strip}: #{valid}"
      end
      puts "Total valid: #{valid_count}"
    end

    test1 = "aba[bab]xyz"
    test2 = "xyx[xyx]xyx"
    test3 = "aaa[kek]eke"
    test4 = "zazbz[bzb]cdb"

    process([test1,test2,test3,test4])

    puts

     process(File.new("day7_input.txt").readlines.map{|l|l.strip})
    ```
  :replies: []
