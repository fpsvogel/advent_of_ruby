---
- :author: broadwall
  :url: https://www.reddit.com/r/adventofcode/comments/5gk2yv/2016_day_5_solutions/dasy3lw
  :body: |-
    Solution: [GitHub](https://github.com/broad-well/aoc2016/blob/master/day5.rb)

    A bunch of mistakes postponed my 2nd part. They include accidentally calling part 1's code (I should split the files next time) and overwriting certain positions of the password.

    **This program should display a nice hacking effect on ANSI terminals. For part 2, call this using `ruby day5.rb part2`**
  :replies: []
- :author: eregontp
  :url: https://www.reddit.com/r/adventofcode/comments/5gk2yv/2016_day_5_solutions/dat3ff8
  :body: |-
    A clean and simple Ruby solution:

    ```ruby
    require 'digest/md5'
    door_id = "reyedfim"
    start = "00000"
    code = " "*8
    (0..Float::INFINITY).each { |i|
      md5 = Digest::MD5.hexdigest "#{door_id}#{i}"
      if md5.start_with?(start)
        p md5
        pos = Integer(md5[5], 16)
        digit = md5[6]
        if 0 <= pos and pos < 8
          if code[pos] == " "
            code[pos] = digit
          end
          break if code.count(" ") == 0
        end
      end
    }
    p code
    ```
  :replies: []
- :author: fixed_carbon
  :url: https://www.reddit.com/r/adventofcode/comments/5gk2yv/2016_day_5_solutions/datwn7c
  :body: |-
    Ruby solution (part two) using an Enumerator to generate [digit, position] pairs. This one is interesting because it generalizes to passwords of any length between 1 and 16 simply by changing the number in the last line of the `take_while` block.

    ```ruby
    require 'digest'

    # Yields *all* digit, position pairs
    coderator = Enumerator.new do |y|
      md5 = Digest::MD5.new
      (0..Float::INFINITY).each do |n|
        digest = md5.hexdigest("#{INPUT}#{n}")
        if digest.start_with?("00000")
          y.yield [digest[6], digest[5].hex]
        end
      end
    end

    # Applies positional and stateful constraints to digit, position pairs
    code = Array.new(16, nil)
    coderator.take_while do |digit, pos|
      code[pos] = digit if code[pos].nil?
      puts code.map{|c| c.nil? ? '_' : c}.join
      code.take(8).include?(nil)
    end

    puts code.take(8).join
    ```
  :replies: []
