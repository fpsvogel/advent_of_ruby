---
- :author: careyi4
  :url: https://www.reddit.com/r/adventofcode/comments/18i0xtn/2023_day_14_solutions/kdcswsg/
  :body: |-
    Fun today messing with pattern matching... Partial manual for part 2, but still fast etc.

    [Github](https://github.com/careyi3/aoc_2023/tree/master/solutions/14)[Video Walkthrough](https://youtu.be/Ta9mF9YuLBg)
  :replies: []
- :author: Nnnes
  :url: https://www.reddit.com/r/adventofcode/comments/18i0xtn/2023_day_14_solutions/kdbokqb/
  :body: |-
    No half-punchcard-sized solutions for both parts yet? Here's one

    ```ruby
    a = STDIN.readlines.map{ _1.chomp.chars }; def r(a) = a.reverse.transpose
    def f(a) = a.map{ |r| r.chunk{ _1 == ?# }.map{ _1.last.sort }.flatten }
    def l(a) = a.map{ |r| r.each_with_index.map{ _1 == ?O ? _2 + 1 : 0 }.sum }.sum
    p l f r a; 4.times{ a = f r a } until i = ((c ||= []) << a)[0..-2].index(a)
    p l r c[((1_000_000_000 - i) % (c.size - 1 - i) + i)]
    ```

    `r()` for "rotate", `f()` for "fall", and `l()` for "load".

    North is to the right!

    To get the rocks to roll, this program `chunk`s each line into continuous `#` and non-`#` runs, then sorts the contents of each run. This moves the `O`s to the right of the `.`s and keeps the `#`s in place.

    Execution time on a Snapdragon 865 is 3.2 seconds. Adding `# frozen_string_literal: true` at the top of the file reduces that by ~10%.

    Here's a drop-in replacement for `f()` that reduces total runtime to under 0.9 seconds: [paste](https://topaz.github.io/paste/#XQAAAQAsAQAAAAAAAAAyGUj/Tv+WAV3g/Epryrh8/EkGcaOk2Vq/TzdNF3JIxxliAwe73NuADxZL1UqbLlDPlP1BSWDzX265F9rQceiT3VKKrtzFhN9hkWUz4uKRVnQjVjpCKH8tY8Wr/O/SEUYEG8n2FVbUu5kXHqJF8e6AzlrpGOvaPDZw+3Dn7PaKB43Uf1qd6KfmhX6hDA/1Ih8giCPGvQs7UaBiguCuIWFDCkdloSHE5qxaFd1VXAASaq+NmGwf/7WTyQA=) â€” very straightforward; just remembers where the next rock should roll to as it iterates through each line. `.`s get replaced by `nil`s because it's a little faster that way. Converting all the single-character strings to integers to begin with saves another ~10% on runtime.
  :replies: []
- :author: glebm
  :url: https://www.reddit.com/r/adventofcode/comments/18i0xtn/2023_day_14_solutions/kdadna3/
  :body: |-
    Both parts start with `tilt_north` and `north_load` functions:

    ```ruby
    def tilt_north(data)
      data = data.map(&:dup)
      (0...data.size).each { |y|
        (0...data[0].size).each { |x|
          next unless data[y][x] == 'O'
          new_y = (0...y).reverse_each.lazy.
            take_while { data[_1][x] == '.' }.reduce { _2 }
          if new_y
            data[new_y][x] = 'O'
            data[y][x] = '.'
          end
        }
      }
      data
    end

    def north_load(data)
      (0...data.size).lazy.filter_map { |y|
        (0...data[0].size).lazy.filter_map { |x|
          data.size - y if data[y][x] == 'O'
        }.sum
      }.sum
    end
    ```

    Part 1:

    ```ruby
    data = $<.readlines(chomp: true)
    puts north_load(tilt_north(data))
    ```

    Part 2:

    ```ruby
    def transpose(data) = data.map(&:chars).transpose.map(&:join)
    def reverse(data) = data.reverse

    def tilt_south(data) = reverse tilt_north reverse data
    def tilt_west(data) = transpose tilt_north transpose data
    def tilt_east(data) = transpose reverse tilt_north reverse transpose data
    def cycle(data) = tilt_east tilt_south tilt_west tilt_north data

    def cycles(data, n)
      seq = [data]
      cycle_begin = 0
      loop do
        data = cycle(data)
        idx = seq.index(data)
        if !idx.nil?
          cycle_begin = idx
          break
        end
        seq << data
      end
      return seq[n] if n < cycle_begin
      seq[cycle_begin + ((n - cycle_begin) % (seq.size - cycle_begin))]
    end

    data = $<.readlines(chomp: true)
    data = cycles(data, 1000000000)
    puts north_load(data)
    ```

    In part 2, we define `tilt_south/west/east` in terms of `tilt_north`, transposition, and reversal. We then cycle until we find a configuration that we've seen before, indicating a repeating pattern.

    [https://github.com/glebm/advent-of-code](https://github.com/glebm/advent-of-code)
  :replies:
  - :author: globalreset
    :url: https://www.reddit.com/r/adventofcode/comments/18i0xtn/2023_day_14_solutions/kdafdnz/
    :body: I had no idea lazy enumerations were a thing in Ruby. Love this about AoC, just finding out about unique language features that I wouldn't otherwise see.
    :replies: []
- :author: globalreset
  :url: https://www.reddit.com/r/adventofcode/comments/18i0xtn/2023_day_14_solutions/kdad6l7/
  :body: |-
    3905/1478

    My solution wasn't too hard in Ruby, the brute force for part 2 took 13 seconds. I need to find someone who made a tutorial on how they find, and utilize, the cycle information in this. Is it just 'cache the state after every iteration and when you find a full cycle that matches a previous cycle, the number of cycles between them is your cycle count'? Then you just skip X times those numbers of cycles to get you close to the end and simulate the rest?

    [github](https://github.com/globalreset/advent_of_code_2023/blob/main/2023/14/solution.rb)
  :replies:
  - :author: e36freak92
    :url: https://www.reddit.com/r/adventofcode/comments/18i0xtn/2023_day_14_solutions/kdaf7h4/
    :body: I stored cycle start and cycle length, then the result is the load from cycle loop\_start + ((total\_cycles - loop\_start) % loop\_len).
    :replies: []
  - :author: schveiguy
    :url: https://www.reddit.com/r/adventofcode/comments/18i0xtn/2023_day_14_solutions/kdag59k/
    :body: |-
      The way to find cycles is to use Floyd's Tortoise and Hare algorithm: [https://en.wikipedia.org/wiki/Cycle\_detection](https://en.wikipedia.org/wiki/Cycle_detection)

      That tells you that there _is_ a cycle, and then you need to measure the cycle by running it once.
    :replies:
    - :author: globalreset
      :url: https://www.reddit.com/r/adventofcode/comments/18i0xtn/2023_day_14_solutions/kdahfp4/
      :body: It's hard to figure out how Floyd's applies to these grid states. But I'll chew on this a bit and see if I can make the connection.
      :replies:
      - :author: schveiguy
        :url: https://www.reddit.com/r/adventofcode/comments/18i0xtn/2023_day_14_solutions/kdc1k8j/
        :body: You compare the entire grid (at least that's what I did). Remember, you are just running the same algorithm, on one grid you run it 2x per step, on the other you run it 1x. then compare at each step and see if they are equal -- this means there's a cycle. It's cheap enough because you are comparing what, like 100 strings? If there wasn't a cycle, yeah, it would be super inefficient, but once you get the cycle, you can stop and skip to the end!
        :replies:
        - :author: globalreset
          :url: https://www.reddit.com/r/adventofcode/comments/18i0xtn/2023_day_14_solutions/kdffpla/
          :body: Ah! I get it. Run 2 different grids at different rates until they match let's you skip all the storage, so you're only ever storing one grid for the tortoise rate and one for the hare rate. Thanks for clarifying! That's going to come in handy.
          :replies: []
  - :author: globalreset
    :url: https://www.reddit.com/r/adventofcode/comments/18i0xtn/2023_day_14_solutions/kdaez2b/
    :body: okay, tried what I thought the trick might be and dropped 10 seconds off my runtime. 3 seconds is still pretty slow, but my rock moving is probably not the most efficient solution either.
    :replies: []
- :author: gurgeous
  :url: https://www.reddit.com/r/adventofcode/comments/18i0xtn/2023_day_14_solutions/kdagghb/
  :body: |-
    165/776

    Reminds me of the one last year. First version was a bit messy, this one is cleaner.

    [paste](https://topaz.github.io/paste/#XQAAAQCmAwAAAAAAAAAyGUj/TzqOZqu+85MIr+7I2PN0WUff+HeS/WSf1Fe62O1gtVpl8OjMxtl/mhz9FSocwvtz4RdGpsL1Re/3qZhzm9C3LM7XtpH3TBE91Whglx5p6C36lD9FCX71oyeCcfUQ0nIPQX85mZYeDnmO9pRJ3lS5xFaBMRozGIgacXXv/TS7kWytUCvfMtvJ/nMhTMalZbD21+steDVdBSwziMIX8n+/kJfukSfyHRs+x2B/jUgpeDZ/TluULjsq6RkPkALQ2Vc6twgYgUZvmcDg3+Y3iz5aAupStQHtkxAC8YQOtSe5W3sWEMKvsO31XQH2RZv41gkyn+IiRN00boU5SvRNrKrW0WLfK+SFRzZTP+WLgzHpNQaE+jeEyObrGaNC0kWiPE7oH3TT11GazIZUfEZr6axFqiTpqi6ArDslX5lIrVPmVfytbjQFfV/T+mJHeu4/JgLHwaMoehSjZZsJey/DVwkqdWmfUroBMSQFQMC25UVo30y1dcdOosZGpxPSh4w68w3t/T2K59YyY7yaoJACT7s6iHQZN6rLszUis2aA+2NFhs6Wj1FSohX87BkOADPHsodB+Nsi8erZLeW3apbCKG4PJBc+0f2rR0U=)
  :replies: []
- :author: p_tseng
  :url: https://www.reddit.com/r/adventofcode/comments/18i0xtn/2023_day_14_solutions/kdauk3g/
  :body: |-
    [Language: Haskell]

    Ruby solution runs in 200 ms, and Haskell in 50 ms. Both implementations represent the grid as a pair of (height\*width)-bit integers (one for the blocks, one for the rocks) and use bit-shifting to determine which rocks can move and move all movable rocks simultaneously. This is the same technique as is used to make the fast 2021 day 25 and 2022 day 23 solutions.

    Ruby: [14\_parabolic\_reflector\_dish.rb](https://github.com/petertseng/adventofcode-rb-2023/blob/master/14_parabolic_reflector_dish.rb)

    Haskell: [14\_parabolic\_reflector\_dish.hs](https://github.com/petertseng/adventofcode-hs-2023/blob/master/bin/14_parabolic_reflector_dish.hs)
  :replies: []
- :author: Symbroson
  :url: https://www.reddit.com/r/adventofcode/comments/18i0xtn/2023_day_14_solutions/kdc1uax/
  :body: |-
    Nothing special from me today I guess

    clockwise rotations are done with reverse.transpose

    after that I can always drop in the same direction by using a quick&dirty regex in a while loop

    After each cycle I check if the load has been seen in the history already, and break the loop when the history repeats the first time

    Takes about 3.5s to complete

    ```ruby
    m = $<.map(&:chars)
    getload = -> { _1.map.with_index { |b, i| b.count('O') * -~i }.sum }
    drop = -> { _1.gsub!(/(O+)(\.+)/, '\2\1') while _1.include?('O.'); _1 }
    hist = []

    loop do
        4.times do |i|
            m = m.reverse.transpose.map { drop[_1.join].chars }
            puts "Part1: #{getload[m.transpose]}" if hist.empty? && i == 0
        end

        hist << load = getload[m.reverse]
        si = hist[..-2].rindex(load)
        len = hist.size - 1
        next unless si && hist[si..-2] == hist[2 * si - len...si]

        len -= si
        puts "Part2: #{hist[si + (1_000_000_000 + ~si) % len]}"
        break
    end
    ```
  :replies: []
