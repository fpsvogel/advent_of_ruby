---
- :author: globalreset
  :url: https://www.reddit.com/r/adventofcode/comments/18o7014/2023_day_22_solutions/kefyqao/
  :body: |-
    Nice straight-forward one after yesterday's. For part 1, I created a collection of all the brick coordinates and then populated a grid to help with collision detection. Falling was just iterating through all of the bricks (sorted by the lower z value) and checking if the next z coordinate down was empty and moving the brick if not. Then I made two hashes, one to store all bricks above and another for below. I was surprised how fast the part 2 ran, I was expecting that a bfs per brick would've been a time sink.

    ```ruby
    bricks.sum do |b|
      felled = [b].to_set
      q = above[b].to_a
      until q.empty?
        t = q.shift
        next if felled.include?(t)
        next unless (below[t].all? { felled.include?(_1) })
        felled << t
        q += above[t].to_a
      end
      felled.size - 1
    end
    ```

    [github](https://github.com/globalreset/advent_of_code_2023/blob/main/2023/20/solution.rb)
  :replies: []
- :author: '0x623'
  :url: https://www.reddit.com/r/adventofcode/comments/18o7014/2023_day_22_solutions/kefrpta/
  :body: |-
    Bit manipulation

    [Carbon](https://carbon.now.sh/?bg=rgba%280%2C0%2C0%2C0%29&t=a11y-dark&wt=none&l=ruby&width=666&ds=false&dsyoff=20px&dsblur=68px&wc=false&wa=true&pv=0px&ph=0px&ln=true&fl=1&fm=JetBrains+Mono&fs=14px&lh=152%25&si=false&es=1x&wm=false&code=inp%2520%253D%2520DATA.read%250A%2560make%2560%253B%2520inp%2520%253D%2520IO.read%2520%27input22%27%250A%250AB%2520%253D%2520inp.each_line%28chomp%253A%2520true%29.map%2520%257B%2520%257Cln%257C%250A%2520%2520x0%252C%2520x1%2520%253D%2520ln.split%28%253F%7E%29.map%2520%257B%2520_1.split%28%253F%252C%29.map%2520%2526%253Ato_i%2520%257D%250A%2520%2520%255Bx0%252C%2520x1.zip%28x0%29.map%2520%257B%2520%257Cv1%252C%2520v0%257C%2520v1%2520%252B%25201%2520-%2520v0%2520%257D%255D%250A%257D%250A%250A%28OFFX%252C%2520_OFFY%252C%2520_OFFZ%29%252C%2520%28WX%252C%2520_WY%252C%2520_WZ%29%2520%253D%2520B.reduce%28%255B%255B0%255D*3%252C%2520%255B0%255D*3%255D%29%2520%257B%2520%257Cx%252C%2520b%257C%250A%2520%2520x.zip%28b%29.map%2520%257B%2520_1.zip%28_2%29.map%2520%2526%253Amax%2520%257D%250A%257D%250AMAX_X%2520%253D%2520OFFX%2520%252B%2520WX%250A%250Ato_bits%2520%253D%2520proc%2520%257B%2520%257C%28x0%252C%2520y0%252C%2520z0%29%252C%2520%28wx%252C%2520wy%252C%2520wz%29%257C%250A%2520%2520plane%2520%253D%25200%250A%2520%2520%280...wx%29.each%2520%257B%2520%257Cdx%257C%250A%2520%2520%2520%2520x%2520%253D%2520x0%2520%252B%2520dx%250A%2520%2520%2520%2520%280...wy%29.each%2520%257B%2520%257Cdy%257C%2520plane%2520%257C%253D%25201%2520%253C%253C%2520%28x%2520%252B%2520%28y0%252Bdy%29%2520*%2520MAX_X%29%2520%257D%250A%2520%2520%257D%250A%2520%2520%255Bz0%252C%2520plane%252C%2520wz%255D%250A%257D%250A%250AB.map%21%28%2526to_bits%29.sort%21%250A%250Atower%2520%253D%2520%255B-1%255D%250Afloor%2520%253D%2520-%253E%2520z%2520%257B%2520tower%255Bz%255D%2520%257C%257C%25200%2520%257D%250Abricks%2520%253D%2520%255B%255D%250AB.each%2520%257B%2520%257Cz%252C%2520layer%252C%2520wz%257C%250A%2520%2520z%2520-%253D%25201%2520while%2520floor%255Bz-1%255D%2520%2526%2520layer%2520%253D%253D%25200%250A%2520%2520%280...wz%29.each%2520%257B%2520%257Cdz%257C%2520tower%255Bz%252Bdz%255D%2520%253D%2520floor%255Bz%252Bdz%255D%2520%257C%2520layer%2520%257D%250A%2520%2520bricks%2520%253C%253C%2520%255Bz%252C%2520layer%252C%2520wz%255D%250A%257D%250A%250Apart_1%2520%253D%2520-%253E%2520%257B%250A%2520%2520p%2520bricks.each_with_index.count%2520%257B%2520%257C%28z%252C%2520layer%252C%2520wz%29%252C%2520i%257C%250A%2520%2520%2520%2520dis%2520%253D%2520tower.dup%250A%2520%2520%2520%2520%280...wz%29.each%2520%257B%2520%257Cdz%257C%2520dis%255Bz%252Bdz%255D%2520%255E%253D%2520layer%2520%257D%250A%2520%2520%2520%2520not%2520bricks%255Bi%252B1..%255D.any%253F%2520%257B%2520%257Cz_%252C%2520layer_%252C%2520_%257C%2520dis%255Bz_-1%255D%2520%2526%2520layer_%2520%253D%253D%25200%2520%257D%250A%2520%2520%257D%250A%257D%250A%250Apart_2%2520%253D%2520-%253E%2520%257B%250A%2520%2520p%2520bricks.each_with_index.sum%2520%257B%2520%257Cb0%252C%2520i%257C%250A%2520%2520%2520%2520dis%2520%253D%2520tower.dup%250A%2520%2520%2520%2520rm%2520%253D%2520proc%2520%257B%2520%257Cz%252C%2520layer%252C%2520wz%257C%250A%2520%2520%2520%2520%2520%2520%280...wz%29.each%2520%257B%2520%257Cdz%257C%2520dis%255Bz%252Bdz%255D%2520%255E%253D%2520layer%2520%257D%250A%2520%2520%2520%2520%257D%250A%2520%2520%2520%2520fallable%2520%253D%2520proc%2520%257B%2520%257Cz%252C%2520layer%252C%2520_wz%257C%2520dis%255Bz-1%255D%2520%2526%2520layer%2520%253D%253D%25200%2520%257D%250A%2520%2520%2520%2520fall%2520%253D%2520proc%2520%257B%2520%257Cz%252C%2520layer%252C%2520wz%257C%250A%2520%2520%2520%2520%2520%2520rm%255Bz%252C%2520layer%252C%2520wz%255D%250A%2520%2520%2520%2520%2520%2520z%2520-%253D%25201%2520while%2520fallable%255Bz%252C%2520layer%255D%250A%2520%2520%2520%2520%2520%2520%280...wz%29.each%2520%257B%2520%257Cdz%257C%2520dis%255Bz%252Bdz%255D%2520%257C%253D%2520layer%2520%257D%250A%2520%2520%2520%2520%257D%250A%250A%2520%2520%2520%2520rm%255Bb0%255D%250A%2520%2520%2520%2520bricks%255Bi%252B1..%255D.count%2520%257B%2520%257Cb%257C%2520fallable%255Bb%255D%2520and%2520fall%255Bb%255D%2520%257D%250A%2520%2520%257D%250A%257D%250A%250Apart_1%255B%255D%250Apart_2%255B%255D%250A%250A __END__ %250A1%252C0%252C1%7E1%252C2%252C1%250A0%252C0%252C2%7E2%252C0%252C2%250A0%252C2%252C3%7E2%252C2%252C3%250A0%252C0%252C4%7E0%252C2%252C4%250A2%252C0%252C5%7E2%252C2%252C5%250A0%252C1%252C6%7E2%252C1%252C6%250A1%252C1%252C8%7E1%252C1%252C9) (52 loc) (600 ms)
  :replies: []
