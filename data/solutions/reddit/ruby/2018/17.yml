---
- :author: p_tseng
  :url: https://www.reddit.com/r/adventofcode/comments/a6wpup/2018_day_17_solutions/ec0lfem/
  :body: |-
    I found this one fun because it was a mix of novel and interesting. My favourite so far.

    I went the recursive way because that's how I was most naturally able to translate the problem description into code. Water flows down, and when it hits an obstacle (resting water or clay) then it searches left and right. If both sides are walled, then water rests at that level. Otherwise, water flows at that level and then drops (hence recursion) at the side(s) that is not a wall. Looks like many others did that as well. That's great, so I'll let `fill_down` be responsible for filling a single row of water at a time.

    It was necessary for my code to distinguish between flowing water and resting water because flowing water isn't an obstacle for dropping water (water would stack up in weird ways if that were true).

    This worked fine for exactly 247 iterations... Then the 248th iteration sets off a monster chain of recursive calls: `fill_down(srcy: 1846, srcx: 425)` gets called a massive 282444 times, and `fill_down(srcy: 1867, srcx: 423)` close behind with 282432 times. I was examining the output, seeing all those repeated calls, and thought I had hit an infinite loop somehow.

    So I terminated that (I'd later find out that if I had just waited two minutes, the chain of recursive calls would have finished). I decided that if `fill_down` has already been called at a given location, it doesn't need to be called again for that loop iteration. Then I just kept calling `fill_down` in a loop until the value stopped changing. That got runtime down to six seconds, with which I submitted for the first star.

    The second star came easily since I mentioned above that it was already necessary to distinguish between flowing water and resting water for the part 1 to be correct anyway.

    Then I realised that the reason it was taking six seconds was because starting from the spring (0, 500) every single iteration forces all the water to traverse down through the entire map. That's quite unnecessary since once water fills a container, all future incoming water will overflow to the sides of it in exactly the same way each time. So I just made `fill_down` fill the entire container it finds (in addition to recursing appropriately as it was already doing). Now a single call to `fill_down` is sufficient to fill the entire map. So that got runtime down to 0.2 seconds, great.

    Ruby:

    ```ruby
    class Reservoir
      attr_reader :ymin, :ymax

      def initialize(clay)
        @clay = clay.each_value(&:freeze).freeze
        @water = Hash.new { |h, k| h[k] = {} }
        @ymin, @ymax = clay.each_key.minmax
      end

      def fill_down(srcy:, srcx:)
        done_drops = {}
        checked_fill_down(srcy: srcy, srcx: srcx, done: done_drops)
      end

      def water_at_rest
        (@ymin..@ymax).sum { |y| @water[y].each_value.count(:rest) }
      end

      def water_reach
        (@ymin..@ymax).sum { |y| @water[y].size }
      end

      def to_s(yrange: (@ymin..@ymax), xrange: nil)
        xrange ||= begin
          xs = @water.each_value.flat_map(&:keys)
          xmin, xmax = xs.minmax
          # Margin of 1 so we can see the limiting walls too.
          ((xmin - 1)..(xmax + 1))
        end

        yrange.map { |y|
          xrange.map { |x|
            water = case w = @water[y][x]
            when :flow; ?|
            when :rest; ?~
            when nil; nil
            else raise "Unknown water #{w} at #{y}, #{x}"
            end

            clay = @clay.dig(y, x) ? ?# : nil

            raise "#{y}, #{x} conflicts: #{clay} and #{water}" if clay && water

            clay || water || ' '
          }.join + " #{y}"
        }.join("\n")
      end

      private

      def checked_fill_down(srcy:, srcx:, done:)
        return if done[[srcy, srcx]]
        done[[srcy, srcx]] = true

        obstacle_below = (srcy..@ymax).find { |y|
          # The code is still correct if we remove the resting water check,
          # but it would have to redo work it already did.
          # So we will consider resting water an obstacle for dropping water.
          @clay.dig(y, srcx) || @water[y][srcx] == :rest
        }

        unless obstacle_below
          puts "Water falls from #{srcy} #{srcx} off screen" if VERBOSE
          (srcy..@ymax).each { |y| @water[y][srcx] = :flow }
          return
        end

        (srcy...obstacle_below).each { |y| @water[y][srcx] = :flow }

        # Start filling upwards, starting from one above that obstacle.
        (obstacle_below - 1).step(by: -1) { |current|
          left_type, leftx = scout(srcy: current, srcx: srcx, dir: -1)
          right_type, rightx = scout(srcy: current, srcx: srcx, dir: 1)
          range = (leftx + 1)...rightx

          if left_type == :wall && right_type == :wall
            # Walls on either side.
            # Water rests, we move up and do it again.
            range.each { |x| @water[current][x] = :rest }
          else
            # One or both sides lacks a wall.
            # Water flows on this level, and drops on any side lacking a wall.
            range.each { |x| @water[current][x] = :flow }
            puts [
              "Water falls from #{srcy} #{srcx} to #{obstacle_below - 1}",
              "filled up to #{current}",
              "left[#{left_type}@#{leftx}]",
              "right[#{right_type}@#{rightx}]",
            ].join(', ') if VERBOSE
            checked_fill_down(srcy: current, srcx: leftx, done: done) if left_type == :drop
            checked_fill_down(srcy: current, srcx: rightx, done: done) if right_type == :drop
            break
          end
        }
      end

      def scout(srcy:, srcx:, dir:)
        (srcx + dir).step(by: dir) { |x|
          if @clay.dig(srcy, x)
            return [:wall, x]
          elsif !@clay.dig(srcy + 1, x) && @water[srcy + 1][x] != :rest
            # As in fill_down, water can rest on top of resting water or clay.
            # If neither of those things is below, then it's a drop.
            return [:drop, x]
          end
        }
      end
    end

    SPRING = 500
    VERBOSE = ARGV.delete('-v')
    xrange = if ARGV.delete('-x')
      :auto
    elsif xarg = ARGV.find { |x| x.start_with?('-x') }
      ARGV.delete(xarg)
      l, r = xarg.scan(/\d+/).map(&:to_i)
      # If it's two numbers, assume it's left/right.
      # If it's one number, assume it's margin around the spring.
      r ? l..r : (SPRING - l)..(SPRING + l)
    end

    TESTDATA = <<TEST.freeze
    x=495, y=2..7
    y=7, x=495..501
    x=501, y=3..7
    x=498, y=2..4
    x=506, y=1..2
    x=498, y=10..13
    x=504, y=10..13
    y=13, x=498..504
    TEST

    # No default_proc because I'm freezing it,
    # so attempts to access should not write.
    clay = {}

    (ARGV.include?('-t') ? TESTDATA : ARGV.empty? ? DATA : ARGF).each_line.map { |line|
      names = line.split(', ').map { |elt|
        name, spec = elt.split(?=)
        spec = if spec.include?('..')
          l, r = spec.split('..')
          l.to_i..r.to_i
        else
          spec.to_i..spec.to_i
        end
        [name, spec]
      }.to_h

      names[?y].each { |y|
        clay[y] ||= {}
        names[?x].each { |x|
          clay[y][x] = true
        }
      }
    }

    reservoir = Reservoir.new(clay)
    reservoir.fill_down(srcy: 0, srcx: SPRING)
    puts reservoir.water_reach
    puts reservoir.water_at_rest

    puts reservoir.to_s(xrange: xrange == :auto ? nil : xrange) if xrange

    __END__
    x=399, y=453..458
    x=557, y=590..599
    y=1182, x=364..369
    omitted
    ```
  :replies: []
