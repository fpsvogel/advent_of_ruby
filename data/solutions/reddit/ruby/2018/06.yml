---
- :author: daybreaker
  :url: https://www.reddit.com/r/adventofcode/comments/a3kr4r/2018_day_6_solutions/eb74i3j/
  :body: |-
    While we wait for the bug fix, here's my theoretically working part 1 and 2 in completely non-optimized horrible ruby

    Part 1 basically loops through each point and stores the "ID" (array index position) of the closest Coordinate. If a coordinate already exists there (a shared coordinate) it nils it out basically (I planned to put an 'x', but it wound up being nil somehow. Code magic? ¯\_(ツ)\_/¯). Then you flatten a 2D array of IDs, count how many times they each show up, and delete any that have infinite bounds (same x coord as the left or right edge, or same y coord as the top or bottom edge).

    Ignore the set of nil indexed (shared) coordinates, and the largest count with an index will be the answer. CoordList[index]

    Part 2 does the same initial loop through every single possible x,y coord in our 2D space, and marks it off if the manhattan sum of every point is under 10000. Then you just count how many of those there are.

    * * *

    ```ruby
    points = File.readlines('day6.txt').map { |line| line.strip.split(', ').map(&:to_i) }

    x0 = 0
    y0 = 0
    xmax = points.collect { |x| x[0] }.max
    ymax = points.collect { |x| x[1] }.max

    def manhattan(pt1, pt2)
      (pt1[0] - pt2[0]).abs + (pt1[1] - pt2[1]).abs
    end

    def find_closest(points, xxx, yyy)
      closest_for_point = points.each_with_index
                                .map { |point, index| [index, manhattan([xxx, yyy], point)] }
                                .sort_by { |_xxxx, yyyy| yyyy }.first(2)
      closest_for_point.first[1] == closest_for_point.last[1] ? false : closest_for_point.first
    end

    distances = []

    (x0..xmax).each do |x|
      (y0..ymax).each do |y|
        distances[x] ||= []
        closest = find_closest(points, x, y)
        closest ? distances[x][y] = closest[0] : 'x'
      end
    end

    def infinite?(distances, points, id, xmax, ymax)
      return if id.nil?

      x, y = points[id]
      [distances[0][y], distances[x][0], distances[0][ymax], distances[xmax][0]].include?(id)
    end

    results = distances.clone.flatten
                       .group_by(&:itself).transform_values(&:count)
                       .delete_if { |id, _count| infinite?(distances, points, id, xmax, ymax) }

    puts results.sort_by { |_x, y| y }.inspect # Take highest non-nil-index count

    #-------PART 2--------

    def sum_closest(points, xxx, yyy)
      points.inject(0) { |sum, point| sum + manhattan(point, [xxx, yyy]) } < 10_000
    end

    answers = []

    (x0..xmax).each do |x|
      (y0..ymax).each do |y|
        answers << [x, y] if sum_closest(points, x, y)
      end
    end

    puts answers.count
    ```
  :replies: []
- :author: Unihedron
  :url: https://www.reddit.com/r/adventofcode/comments/a3kr4r/2018_day_6_solutions/eb765k8/
  :body: |-
    Ruby

    ```ruby
    p a=$<.map{|x|x.split(/\D+/).map{|x|x.to_i}}
    h=Hash.new 0
    u=[]
    j=0
    (0..ll=a.max_by{|x,y|x}.first).each{|b|
    (0..lp=a.max_by{|x,y|y}.last).each{|c|
    j+=1if a.sum{|x,y|(x-b).abs+(y-c).abs}<10000
    next
    e=d.min_by{|x,y|y}
    (h[e[0]]+=1

    u|=[e[0]] if b==0 || c==0 || c==lp || b==ll
    #print (65+a.index(e[0])).chr
    )if ddd=d.count{|x,y|y==e[1]}==1
    #print ?. if !ddd
    }
    #print "\n"
    }
    p j
    ```
  :replies: []
- :author: charismotron
  :url: https://www.reddit.com/r/adventofcode/comments/a3kr4r/2018_day_6_solutions/eb74hkg/
  :body: |-
    _Ruby_

    ```ruby
    require 'set'

    def manhattan(pt1, pt2)
      (pt1[0] - pt2[0]).abs + (pt1[1] - pt2[1]).abs
    end

    def find_closest(points, x, y)
      distances = []
      points.each_with_index do |pt, idx|
        distances << [manhattan([x, y], pt), idx]
      end
      distances.sort!

      return -1 if distances[0][0] == distances[1][0] # same distance counts to no one
      distances[0][1]
    end

    def largest_non_infinite_region(points)
      max_x = points.max_by { |p| p[0] }
      max_y = points.max_by { |p| p[1] }

      grid = {}
      pt_idx_counts = {}

      (0..max_x[0]).each do |x|
        (0..max_y[1]).each do |y|
          pt_idx = find_closest(points, x, y)
          grid[[x, y]] = pt_idx
          pt_idx_counts[pt_idx] ||= 0
          pt_idx_counts[pt_idx] += 1
        end
      end

      find_infinite_indexes(grid, max_x[0], max_y[1]).each do |inf_idx|
        pt_idx_counts.delete(inf_idx)
      end

      pt_idx_counts.max_by { |idx, count| count }[1]
    end

    def find_infinite_indexes(grid, max_x, max_y)
      infinite_indexes = Set.new
      grid.each_pair do |pt, idx|
        if pt[0] == 0 || pt[1] == 0 || pt[0] == max_x || pt[1] == max_y
          infinite_indexes << idx
        end
      end
      infinite_indexes
    end

    def largest_region_with_closest_distances(points, max_distance)
      max_x = points.max_by { |p| p[0] }
      max_y = points.max_by { |p| p[1] }

      grid_of_distance_sums = {}
      (0..max_x[0]).each do |x|
        (0..max_y[1]).each do |y|
          d_sums = points.sum(0) { |pt| manhattan(pt, [x, y]) }
          grid_of_distance_sums[[x, y]] = d_sums
        end
      end
      grid_of_distance_sums.select { |pt, distance| distance < max_distance }.length
    end

    if __FILE__ == $0
      puts "Part 1"
      input = File.readlines('input.txt').map { |ln| ln.split(', ').map(&:to_i) }
      output = largest_non_infinite_region(input)
      p output

      puts "Part 2"
      output = largest_region_with_closest_distances(input, 10_000)
      p output
    end
    ```
  :replies: []
- :author: Frizkie
  :url: https://www.reddit.com/r/adventofcode/comments/a3kr4r/2018_day_6_solutions/eb9fmta/
  :body: |-
    Ruby

    ```ruby
    data = File.read('data.txt').chomp.split("\n").map.with_index do |d, i|
      [i, d.match(/(\d+), (\d+)/)[1..2].map(&:to_i)]
    end
    ```

    **Part 1:**

    ```ruby
    grid = Array.new(1000) { Array.new(1000) }
    1000.times do |i|
      1000.times do |j|
        dists = data.map { |id, coords| [id, (coords[0] - i).abs + (coords[1] - j).abs] }
        closest = dists.min_by { |_, dist| dist }
        grid[j][i] = closest[0] if dists.map{ |d| d[1] }.count(closest[1]) == 1
      end
    end

    infinites = [grid[0], grid[999], grid.map { |r| r[0] }, grid.map { |r| r[999] }].flatten.compact

    flat = grid.flatten.compact.reject { |e| infinites.include? e }
    freq = flat.inject(Hash.new(0)) { |h, v| h[v] += 1; h }
    puts flat.count(flat.max_by { |v| freq[v] })
    ```

    **Part 2:**

    ```ruby
    grid = Array.new(1000) { Array.new(1000) }
    1000.times { |i| 1000.times { |j| grid[i][j] = data.map { |_, coords| (coords[0] - i).abs + (coords[1] - j).abs }.sum } }
    puts grid.flatten.count { |e| e < 10000 }
    ```
  :replies: []
