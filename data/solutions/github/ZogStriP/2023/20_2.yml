---
- :name: 20_pulse_propagation.rb
  :url: https://github.com/ZogStriP/adventofcode-old/blob/master/2023
  :solution: |-
    M, S, T = {}, {}, {}

    DATA.each {
      name, targets = _1.chomp.split(" -> ")
      type = name[0].to_sym
      name = name["broadcaster"] ? name : name[1..]

      M[name] = type
      T[name] = targets.split(", ")
      S[name] = type == :& ? {} : false
    }

    T.each { |src, targets|
      targets.each { M[_1] == :& && S[_1][src] = false }
    }

    rx_src = T.find { _2.include? "rx" }[0]
    H = S[rx_src].keys.to_h { [_1, nil] }

    P = { true => 0, false => 0 }

    1.step { |pushes|
      q = [["button", false, "broadcaster"]]

      p P[true] * P[false] if pushes == 1000

      while c = q.shift
        src, pulse, dst = c

        P[pulse] += 1

        H[dst] ||= pushes if H.has_key?(dst) && !pulse
        (p H.values.reduce &:lcm; exit) if H.values.all?

        case M[dst]
        when :b
          T[dst].each { q << [dst, pulse, _1] }
        when :%
          next if pulse
          S[dst] = !S[dst]
          T[dst].each { q << [dst, S[dst], _1] }
        when :&
          S[dst][src] = pulse
          pulse = !S[dst].values.all?
          T[dst].each { q << [dst, pulse, _1] }
        end
      end
    }
