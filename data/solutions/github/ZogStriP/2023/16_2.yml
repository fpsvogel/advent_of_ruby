---
- :name: 16_the_floor_will_be_lava.rb
  :url: https://github.com/ZogStriP/adventofcode-old/blob/master/2023
  :solution: "G = DATA.map &:chomp\nY, X = G.size, G[0].size\n\ndef \U0001F526(y, x, dy, dx)\n  beams = [[y, x, dy, dx]]\n  energized = Set.new\n  seen = Set.new\n\n  while b = beams.shift\n    next if !seen.add?(b)\n    y, x, dy, dx = b\n    ny, nx = y + dy, x + dx\n    next if ny < 0 || ny >= Y || nx < 0 || nx >= X\n    energized << [ny, nx]\n\n    case G[ny][nx]\n    when ?.\n      beams << [ny, nx, dy, dx]\n    when ?/\n      if dy > 0 # down\n        beams << [ny, nx, 0, -1]\n      elsif dy < 0 # up\n        beams << [ny, nx, 0, 1]\n      elsif dx > 0 # right\n        beams << [ny, nx, -1, 0]\n      elsif dx < 0 # left\n        beams << [ny, nx, 1, 0]\n      end\n    when ?\\\\\n      if dy > 0 # down\n        beams << [ny, nx, 0, 1]\n      elsif dy < 0 # up\n        beams << [ny, nx, 0, -1]\n      elsif dx > 0 # right\n        beams << [ny, nx, 1, 0]\n      elsif dx < 0 # left\n        beams << [ny, nx, -1, 0]\n      end\n    when ?-\n      if dy == 0\n        beams << [ny, nx, dy, dx]\n      else\n        beams << [ny, nx, -dx, dy]\n        beams << [ny, nx, dx, -dy]\n      end\n    when ?|\n      if dx == 0\n        beams << [ny, nx, dy, dx]\n      else\n        beams << [ny, nx, -dx, dy]\n        beams << [ny, nx, dx, -dy]\n      end\n    end\n  end\n\n  energized.size\nend\n\np \U0001F526(0, -1, 0, 1)\n\np [\n  *Y.times.map { \U0001F526(_1, -1, 0, 1) },\n  *Y.times.map { \U0001F526(_1, X, 0, -1) },\n  *X.times.map { \U0001F526(-1, _1, 1, 0) },\n  *X.times.map { \U0001F526(Y, _1, -1, 0) }\n].max"
