---
- :name: 19_tractor_beam.rb
  :url: https://github.com/ZogStriP/adventofcode-old/blob/master/2019
  :solution: |-
    PROGRAM = DATA.read.split(?,).map(&:to_i).freeze

    class IntCode

      def initialize(mem, input = [])
        @pc = 0
        @base = 0
        @input = input
        @mem = mem.map.with_index { |m, i| [i, m] }.to_h
        @mem.default = 0
      end

      def read(address, mode)
        case mode.to_i
        when 0 then @mem[@mem[address]]
        when 1 then @mem[address]
        when 2 then @mem[@mem[address] + @base]
        end
      end

      def write(address, mode, value)
        case mode.to_i
        when 0 then @mem[@mem[address]] = value
        when 2 then @mem[@mem[address] + @base] = value
        end
      end

      def run
        loop do
          mode, opcode = @mem[@pc].divmod(100)
          m = mode.digits
          a = read(@pc + 1, m[0])
          b = read(@pc + 2, m[1])

          case opcode
          when 1
            write(@pc + 3, m[2], a + b)
            @pc += 4
          when 2
            write(@pc + 3, m[2], a * b)
            @pc += 4
          when 3
            write(@pc + 1, m[0], @input.shift)
            @pc += 2
          when 4
            @pc += 2
            return a
          when 5
            a != 0 ? @pc = b : @pc += 3
          when 6
            a == 0 ? @pc = b : @pc += 3
          when 7
            write(@pc + 3, m[2], a < b ? 1 : 0)
            @pc += 4
          when 8
            write(@pc + 3, m[2], a == b ? 1 : 0)
            @pc += 4
          when 9
            @base += a
            @pc += 2
          when 99
            return
          else
            throw "Unknown opcode: #{opcode}"
          end
        end
      end

    end

    def in_beam?(x, y)
      IntCode.new(PROGRAM, [x, y]).run == 1
    end

    p (0..49).sum { |y| (0..49).count { |x| in_beam?(x, y) }}

    x = 0

    p 1000.step { |y|
      x = (x..).find { |xx| in_beam?(xx, y) }
      break x * 10000 + y - 99 if in_beam?(x + 99, y - 99)
    }
