---
- :name: 11_space_police.rb
  :url: https://github.com/ZogStriP/adventofcode-old/blob/master/2019
  :solution: |-
    program = DATA.read.split(?,).map(&:to_i)

    class IntCode

      def initialize(mem, input: [])
        @pc = 0
        @base = 0
        @input = input
        @mem = mem.map.with_index { |m, i| [i, m] }.to_h
        @mem.default = 0
      end

      def read(address, mode)
        case mode.to_i
        when 0 then @mem[@mem[address]]
        when 1 then @mem[address]
        when 2 then @mem[@mem[address] + @base]
        end
      end

      def write(address, mode, value)
        case mode.to_i
        when 0 then @mem[@mem[address]] = value
        when 2 then @mem[@mem[address] + @base] = value
        end
      end

      def run(input = nil)
        @input.push(input) if input

        loop do
          mode, opcode = @mem[@pc].divmod(100)
          m = mode.digits
          a = read(@pc + 1, m[0])
          b = read(@pc + 2, m[1])

          case opcode
          when 1
            write(@pc + 3, m[2], a + b)
            @pc += 4
          when 2
            write(@pc + 3, m[2], a * b)
            @pc += 4
          when 3
            write(@pc + 1, m[0], @input.shift)
            @pc += 2
          when 4
            @pc += 2
            return a
          when 5
            a != 0 ? @pc = b : @pc += 3
          when 6
            a == 0 ? @pc = b : @pc += 3
          when 7
            write(@pc + 3, m[2], a < b ? 1 : 0)
            @pc += 4
          when 8
            write(@pc + 3, m[2], a == b ? 1 : 0)
            @pc += 4
          when 9
            @base += a
            @pc += 2
          when 99
            return
          end
        end
      end

    end

    DIR = [
      [ 0, -1],
      [ 1,  0],
      [ 0,  1],
      [-1,  0],
    ]

    def paint(program, start_color)
      d = 0
      p = [0, 0]
      grid = Hash.new(0)
      grid[p] = start_color
      robot = IntCode.new(program.dup)

      loop {
        color, dir = robot.run(grid[p]), robot.run
        break if color.nil? || dir.nil?
        grid[p] = color
        d = (dir == 0 ? d - 1 : d + 1) % DIR.size
        p = [p[0] + DIR[d][0], p[1] + DIR[d][1]]
      }

      grid
    end

    p paint(program, 0).keys.size

    grid = paint(program, 1)
    xs, ys = grid.keys.transpose

    Range.new(*ys.minmax).each { |y|
      puts Range.new(*xs.minmax).map { |x|
        grid[[x, y]] == 1 ? "â–ˆ" : " "
      }.join
    }
