---
- :name: 12_hill_climbing_algorithm.rb
  :url: https://github.com/ZogStriP/adventofcode-old/blob/master/2022
  :solution: |-
    map = DATA.map { _1.chop.bytes }
    Y = map.size
    X = map[0].size
    map.flatten!

    goal = start = nil
    goals = {}

    Y.times { |y|
      X.times { |x|
        case map[c = y * X + x].chr
        when ?a; goals[c] = true
        when ?S; goals[c] = true; map[goal = c] = ?a.ord
        when ?E; map[start = c] = ?z.ord
        end
      }
    }

    steps = -> (goals) {
      q = [start]
      d = Array.new(map.size, map.size + 1)
      d[start] = 0

      while c = q.shift
        return d[c] if goals[c]

        y, x = c.divmod(X)

        [
          (c - X if y > 0),
          (c - 1 if x > 0),
          (c + 1 if x + 1 < X),
          (c + X if y + 1 < Y),
        ].each { (d[_1] = d[c] + 1; q << _1) if _1 && map[_1] >= map[c] - 1 && d[_1] > d[c] + 1 }
      end
    }

    p steps[{ goal => true }], steps[goals]
