---
- :name: part1.rb
  :url: https://github.com/erikw/advent-of-code-solutions/blob/main/2019/16
  :solution: |-
    # PHASES = 4
    PHASES = 100

    KEEP_DIGITS = 8

    BASE_PATTERN = [0, 1, 0, -1]

    def fft(input, phases = 1)
      output = Array.new(input.length)
      patterns = Array.new(input.length)
      (0...input.length).each do |i|
        patterns[i] = BASE_PATTERN.map do |p|
          [p] * (i + 1)
        end.flatten.rotate.cycle.take(input.length)
      end

      phases.times do
        (0...input.length).each do |i|
          v = input.zip(patterns[i]).map { |a, b| a * b }.sum
          output[i] = v.abs % 10
        end
        input = output
      end
      output
    end

    signal = ARGF.readline.chomp.each_char.map(&:to_i)
    puts fft(signal, PHASES)[0, KEEP_DIGITS].join
