---
- :name: 7b.rb
  :url: https://github.com/eregon/adventofcode/blob/master/2015
  :solution: |-
    # 123 -> x
    # 456 -> y
    # x AND y -> d
    # x OR y -> e
    # x LSHIFT 2 -> f
    # y RSHIFT 2 -> g
    # NOT x -> h
    # NOT y -> i

    data = {}

    def input_or_number(v)
      Integer(v)
    rescue
      v
    end

    STDIN.each_line { |line|
      line.chomp!
      if /^(?<input>\w+) -> (?<var>\w+)$/ =~ line
        data[var] = [:+@, input_or_number(input)]
      elsif /^NOT (?<a>\w+) -> (?<r>\w+)$/ =~ line
        data[r] = [:~, input_or_number(a)]
      elsif /^(?<a>\w+) (?<op>AND|OR|LSHIFT|RSHIFT) (?<b>\w+) -> (?<r>\w+)$/ =~ line
        op = {'AND' => :&, 'OR' => :|, 'LSHIFT' => :<<, 'RSHIFT' => :>>}[op]
        data[r] = [op, input_or_number(a), input_or_number(b)]
      end
    }

    def solve(data, var)
      p [[var]]
      val = data[var]
      case val
      when Integer
        val
      when Array
        (1...val.size).each { |i|
          p val[i]
          val[i] = solve(data, val[i]) unless Integer === val[i]
        }
        op, *inputs = val
        p val
        p [op,inputs]
        data[var] = inputs[0].send(op, *inputs[1..-1]) & 65535
      else
        raise var.inspect
      end
    end

    copy = Marshal.load(Marshal.dump(data))
    b = solve(data, 'a')
    copy['b'] = b
    p solve(copy, 'a')
- :name: 7futures.rb
  :url: https://github.com/eregon/adventofcode/blob/master/2015
  :solution: |-
    # 123 -> x
    # 456 -> y
    # x AND y -> d
    # x OR y -> e
    # x LSHIFT 2 -> f
    # y RSHIFT 2 -> g
    # NOT x -> h
    # NOT y -> i

    class Future < BasicObject
      def initialize(&block)
        @block = block
      end

      def reset
        @value = nil
      end

      def value
        @value ||= @block.call
      end

      def method_missing(meth, *args, &block)
        value.send(meth, *args, &block)
      end
    end

    def thread(&block)
      Future.new(&block)
    end

    D = {}

    def input_or_number(v)
      i = Integer(v)
      thread { i }
    rescue
      D[v]
    end

    STDIN.each_line { |line|
      if /^(?<a>\w+) -> (?<r>\w+)$/ =~ line
        D[r] = thread { +input_or_number(a) }
      elsif /^NOT (?<a>\w+) -> (?<r>\w+)$/ =~ line
        D[r] = thread { ~input_or_number(a) }
      elsif /^(?<a>\w+) (?<op>AND|OR|LSHIFT|RSHIFT) (?<b>\w+) -> (?<r>\w+)$/ =~ line
        op = {'AND' => :&, 'OR' => :|, 'LSHIFT' => :<<, 'RSHIFT' => :>>}[op]
        D[r] = thread { input_or_number(a).send(op, input_or_number(b)) }
      end
    }

    a = +D['a']
    p a

    D.each_value(&:reset)
    D['b'] = a
    p +D['a']
