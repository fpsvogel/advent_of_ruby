---
- :name: 4a.rb
  :url: https://github.com/eregon/adventofcode/blob/master/2024
  :solution: |-
    def overlapping_scan(string, regexp)
      offset = 0
      matches = []
      while m = regexp.match(string, offset)
        matches << m
        offset = m.begin(0) + 1
      end
      matches
    end

    c = $<.read
    w = c.lines.first.size
    used = ("." * (w-1) + "\n") * c.lines.size
    regexps = [
      /(XMAS)/,
      /(SAMX)/,
      *(-2..0).flat_map {
        [
          /(X).{#{w+it}}(M).{#{w+it}}(A).{#{w+it}}(S)/m,
          /(S).{#{w+it}}(A).{#{w+it}}(M).{#{w+it}}(X)/m
        ]
      }
    ]
    p regexps.sum {
      overlapping_scan(c, it).each { |m|
        m.captures.each_index { |i|
          a, b = m.offset(i+1)
          used[a...b] = c[a...b]
        }
      }
      overlapping_scan(c, it).size
    }

    puts used
- :name: 4a2.rb
  :url: https://github.com/eregon/adventofcode/blob/master/2024
  :solution: |-
    def overlapping_scan(string, regexp)
      offset = 0
      matches = []
      while m = regexp.match(string, offset)
        matches << m
        offset = m.begin(0) + 1
      end
      matches
    end

    c = $<.read
    w = c.lines.first.size
    regexps = [
      /XMAS/,
      /SAMX/,
      *(-2..0).flat_map {
        [
          /X.{#{w+it}}M.{#{w+it}}A.{#{w+it}}S/m,
          /S.{#{w+it}}A.{#{w+it}}M.{#{w+it}}X/m
        ]
      }
    ]
    p regexps.sum {
      overlapping_scan(c, it).size
    }
- :name: 4a_golf.rb
  :url: https://github.com/eregon/adventofcode/blob/master/2024
  :solution: z=->s,r{o=n=0;(n+=1;s=s[o+1..])while o=r=~s;n};p [-(w=((c=$<.read)=~/$/)+1),-2,-1,0].sum{r=/#{%w[X M A S].join".{#{w+it}}"}/m;z[c,r]+z[c.reverse,r]}
- :name: 4a_golf2.rb
  :url: https://github.com/eregon/adventofcode/blob/master/2024
  :solution: p [-(w=((c=$<.read)=~/$/)+1),-2,-1,0].sum{s=c+??*w+c.reverse;o=n=0;(n+=1;s=s[o+1..])while o=/#{%w[X M A S].join".{#{w+it}}"}/m=~s;n}
