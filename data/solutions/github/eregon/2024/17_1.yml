---
- :name: 17a.rb
  :url: https://github.com/eregon/adventofcode/blob/master/2024
  :solution: |-
    a, b, c, *program = $<.read.scan(/\d+/).map(&:to_i)

    literal = :itself.to_proc

    combo = -> x {
      case x
      in 0..3 then x
      in 4 then a
      in 5 then b
      in 6 then c
      end
    }

    ip = 0

    instructions = [
      -> x { a /= (2 ** combo[x]) }, # adv
      -> x { b ^= literal[x] }, # bxl
      -> x { b = combo[x] % 8 }, # bst
      -> x { ip = literal[x] - 2 unless a == 0 }, # jnz
      -> x { b ^= c }, # bxc
      -> x { print "#{combo[x] % 8}," }, # out
      -> x { b = a / (2 ** combo[x]) }, # bdv
      -> x { c = a / (2 ** combo[x]) }, # cdv
    ]

    while opcode = program[ip]
      instructions[opcode][program[ip + 1]]
      ip += 2
    end

    puts
    p [a,b,c]
- :name: 17a_golf.rb
  :url: https://github.com/eregon/adventofcode/blob/master/2024
  :solution: |-
    a,b,c,*p=$<.read.scan(/\d+/).map &:to_i
    e=->x{x<4?x:[a,b,c][x-4]}
    o=i=0
    # [->{a>>=e[it]},->{b^=it},->{b=e[it]%8},->{a!=0&&i=it},->_{b^=c},->{print"#{e[it]%8},"},->{b=a>>e[it]},->{c=a>>e[it]}][o][p[(i+=2)-1]]while o=p[i]
    # eval("proc{#{%w[a>>=e[it] b^=it b=e[it]%8 a!=0&&i=it b^=c print"#{e[it]%8}," b=a>>e[it] c=a>>e[it]][o]}}")[p[(i+=2)-1]]while o=p[i]
    # proc{it=_1;eval(%w[a>>=e[it] b^=it b=e[it]%8 a!=0&&i=it b^=c print"#{e[it]%8}," b=a>>e[it] c=a>>e[it]][o])}[p[(i+=2)-1]]while o=p[i]
    # (z=p[(i+=2)-1];eval %w[a>>=e[z] b^=z b=e[z]%8 a!=0&&i=z b^=c print"#{e[z]%8}," b=a>>e[z] c=a>>e[z]][o])while o=p[i]
    eval'z=p[(i+=2)-1];'+%w[a>>=e[z] b^=z b=e[z]%8 a!=0&&i=z b^=c print(e[z]%8,?,) b=a>>e[z] c=a>>e[z]][o]while o=p[i]
- :name: 17a_golf2.rb
  :url: https://github.com/eregon/adventofcode/blob/master/2024
  :solution: a,b,c,*p=$<.read.scan(/\d+/).map &:to_i;e=->x{x<4?x:[a,b,c][x-4]};o=i=0;eval'x=p[(i+=2)-1];'+%w[a>>=e[x] b^=x b=e[x]%8 a!=0&&i=x b^=c print(e[x]%8,?,) b=a>>e[x] c=a>>e[x]][o]while o=p[i]
