---
- :name: 23b.decoded.rb
  :url: https://github.com/eregon/adventofcode/blob/master/2017
  :solution: |-
    b = 65
    c = b
    if a == 0 # jump + 2 if a != 0
      jump + 5; end
    b *= 100
    b += 100_000
    c = b
    c += 17_000
    loop do;f = 1
    d = 2
    begin; e = 2
    begin; g = d
    g *= e
    g -= b
    if g == 0; # jump + 2 if g != 0
      f = 0; end
    e += 1
    g = e
    g -= b
    end while g != 0 # jump -8 if g != 0
    d += 1
    g = d
    g -= b
    end while g != 0 # jump - 13 if g != 0
    if f == 0 # jump + 2 if f != 0
      h += 1; end
    g = b
    g -= c
    if g == 0 # jump + 2 if g != 0
      exit; end # jump + 3
    b += 17
    end # jump -23
- :name: 23b.indented.rb
  :url: https://github.com/eregon/adventofcode/blob/master/2017
  :solution: |-
    # Init
    m = 0
    a = 0
    h = 0

    b = 65
    c = b
    if a != 0
      b *= 100; m += 1
      b += 100_000
      c = b
      c += 17_000
    end
    loop do
      f = 1
      d = 2
      begin
        e = 2
        begin
          g = d
          g *= e; m += 1
          g -= b
          if g == 0
            f = 0
          end
          e += 1
          g = e
          g -= b
        end while g != 0
        d += 1
        g = d
        g -= b
      end while g != 0
      if f == 0
        h += 1
      end
      g = b
      g -= c
      if g == 0 # jump + 2 if g != 0
        p m
        exit
      end # jump + 3
      b += 17
    end # jump -23
- :name: 23b.rb
  :url: https://github.com/eregon/adventofcode/blob/master/2017
  :solution: |-
    # Solved by disassembling the input to Ruby code and manually optimizing

    # The program actually counts the non-prime numbers amongst
    # 106_500, +17, +34, ..., 123_500
    require 'prime'
    p (106_500..123_500).step(17).count { |e| !Prime.prime?(e) }

    a = 1
    h = 0

    A = 1
    b = 106_500
    C = 123_500

    loop do
      f = 1
      d = 2
      begin

        # e = 2
        # begin
        #   f = 0 if d * e == b
        #   e += 1
        # end while e != b

        # Optimized to:
        e = b
        # Check if b is the product of 2 integers, both >= 2,
        # i.e., if it is not a prime number
        f = 0 if b % d == 0 and div = b / d and div.between?(2, e-1)

        d += 1
      end while d != b

      h += 1 if f == 0
      break if b == C
      b += 17
    end

    p h
