---
- :name: 19.rb
  :url: https://github.com/eregon/adventofcode/blob/master/2017
  :solution: "input = File.read(\"19.txt\")\ninput2 = <<AOC\n     |          \n     |  +--+    \n     A  |  C    \n F---|----E|--+ \n     |  |  |  D \n     +B-+  +--+ \n\nAOC\n\ngrid = input.chomp.lines.map { |line| line.chars.map { |c| c == ' ' ? nil : c } }\nheight = grid.size\nwidth = grid.map(&:size).max\n\nin_bounds = -> pos {\n  pos.real.between?(0, width-1) and\n  pos.imag.between?(0, height-1)\n}\nat = -> pos {\n  if in_bounds.(pos)\n    grid[pos.imag][pos.real]\n  end\n}\n\nstart = grid[0].index('|') + 0.i\npos = start\ndir = 1i\nsteps = 1\npath = []\n\nNEIGHBORS = [-1i, 1, 1i, -1]\n\nloop {\n  cur = at.(pos)\n  path << cur if ('A'..'Z').include?(cur)\n\n  if cur == '|' or cur == '-' or ('A'..'Z').include?(cur)\n    front = pos + dir\n    if at.(front)\n      pos = front\n    else\n      break\n    end\n  elsif cur == '+'\n    turns = NEIGHBORS - [dir, -dir]\n    possible = turns.select { |turn| at.(pos+turn) }\n    raise unless possible.size == 1\n    dir = possible.first\n    pos += dir\n  else\n    raise cur\n  end\n  steps += 1\n}\n\np path.join\np steps"
