---
- :name: day-21-part-1.rb
  :url: https://github.com/gchan/advent-of-code-ruby/blob/main/2018/day-21
  :solution: |-
    def operation(reg, op, a, b, c)
      case op
      when 'addr'
        reg[c] = reg[a] + reg[b]
      when 'addi'
        reg[c] = reg[a] + b
      when 'mulr'
        reg[c] = reg[a] * reg[b]
      when 'muli'
        reg[c] = reg[a] * b
      when 'banr'
        reg[c] = reg[a] & reg[b]
      when 'bani'
        reg[c] = reg[a] & b
      when 'boor'
        reg[c] = reg[a] | reg[b]
      when 'bori'
        reg[c] = reg[a] | b
      when 'setr'
        reg[c] = reg[a]
      when 'seti'
        reg[c] = a
      when 'gtir'
        reg[c] = a > reg[b] ? 1 : 0
      when 'gtri'
        reg[c] = reg[a] > b ? 1 : 0
      when 'gtrr'
        reg[c] = reg[a] > reg[b] ? 1 : 0
      when 'eqir'
        reg[c] = a == reg[b] ? 1 : 0
      when 'eqri'
        reg[c] = reg[a] == b ? 1 : 0
      when 'eqrr'
        reg[c] = reg[a] == reg[b] ? 1 : 0
      end

      reg
    end

    reg = [0, 0, 0, 0, 0, 0]

    instructions = input.split("\n")

    pointer = instructions.shift.scan(/\d+/)[0].to_i

    instructions = instructions.map do |instruction|
      op, *val = instruction.split(" ")
      a, b, c = val.map(&:to_i)

      [op, a, b, c]
    end

    while reg[pointer] >= 0 && reg[pointer] < instructions.size
      # Instruction 28 exits when reg[5] == reg[0]
      if reg[pointer] == 28
        puts reg[5]
        exit
      end

      op, a, b, c = instructions[reg[pointer]]

      reg = operation(reg, op, a, b, c)
      reg[pointer] += 1
    end
