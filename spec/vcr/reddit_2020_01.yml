---
http_interactions:
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:31 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=cqWJPrkgnArJ95NWhY; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sat, 08 Mar 2025 23:06:31 GMT
- request:
    method: get
    uri: https://oauth.reddit.com/r/adventofcode/comments/k4e4lm/2020_day_1_solutions.json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '82256'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      access-control-allow-origin:
      - "*"
      access-control-expose-headers:
      - X-Moose
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '15'
      x-ratelimit-remaining:
      - '85.0'
      x-ratelimit-reset:
      - '208'
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:33 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - loid=000000001ksigb7sw5.2.1741475191734.Z0FBQUFBQm56TTE1M3FhTjUyMlB2RFdVV1h5QjhpLVNONVZFWG9XZUxDXzNrYldfakVMOGZqVTdjenBNRUJvTkNZaWp1NkJXOUpfb2ktZW1Ha1ptZ1VZZjZGT2p6eHVQa0cxRmFhMnhWZ09uMTZaQ0ZHTlN0ZFdWWUppNUg0ZVpmNGo4Y3BXYzk5OVQ;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Mon, 08-Mar-2027 23:06:33
        GMT; secure; SameSite=None; Secure, session_tracker=kodhadkpcfieeeghda.0.1741475191747.Z0FBQUFBQm56TTE1OFYxSURSQlZ3TnZqMkxxRlFiR0FNckN3RV8wR1B0bUVTZlplQ2pscE1SWW1aYkVhc2p1d3V6MHItTWN6cDJHNkhhOWp0NzFPeXFZNWNISTcxTVNNVGFZWDQzLVhBRm9tRm1vMTVsVkM1V0c0RVlCZXI3cnR6RmlVcnplWXctMEs;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 01:06:33
        GMT; secure; SameSite=None; Secure, csv=2; Max-Age=63072000; Domain=.reddit.com;
        Path=/; Secure; SameSite=None, edgebucket=XmDxXZrWYZhIOd12jI; Domain=reddit.com;
        Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '[{"kind": "Listing", "data": {"after": null, "dist": 1, "modhash":
        "", "geo_filter": "", "children": [{"kind": "t3", "data": {"approved_at_utc":
        null, "subreddit": "adventofcode", "selftext": "It''s been one heck of a crappy
        year, so let''s make the holidays bright with Advent of Code 2020! If you
        participated in a previous year, welcome back, and if you''re new this year,
        we hope you have fun and learn lots!\n\nWe''re following the same general
        format as previous years'' megathreads, so make sure to read the full description
        in the wiki ([How Do the Daily Megathreads Work?](https://www.reddit.com/r/adventofcode/wiki/index#wiki_how_do_the_daily_megathreads_work.3F))
        before you post!  If you have any questions, please create your own thread
        and ask!\n\nAbove all, remember, AoC is all about having fun and learning
        more about the wonderful world of programming!\n\n***\n\n**[Update @ 00:04]**
        Oops, server issues!\n\n+ /u/topaz2078''s working on it.\n+ In the meantime,
        hop over to Twitch and listen to our [live DJ Veloxxmusic](https://www.twitch.tv/veloxxmusic)!\n\n**[Update
        @ 00:06]**\n\n+ Servers are up!  \n\n**[Update @ 00:27]**\n\n+ [Crash post-mortem
        explanation](https://www.reddit.com/r/adventofcode/comments/k4ejjz/2020_day_1_unlock_crash_postmortem/)
        from /u/topaz2078\n\n**[Update @ 01:26]**\n\n+ Many thanks to our live deejay
        [Veloxxmusic](https://linktr.ee/veloxx) for providing the best tunes I''ve
        heard all year!!!\n\n***\n\n## NEW AND NOTEWORTHY THIS YEAR\n\n* Created new
        post flair for `Other`\n* When posting in the daily megathreads, make sure
        to mention somewhere in your post which language(s) your solution is written
        in\n\n## COMMUNITY NEWS\n\n**Advent of Code Community Fun 2020:** [Gettin''
        Crafty With It](/r/adventofcode/w/gettincrafty)\n\n* Last year y''all got
        *real* creative with poetry and we all loved it.  This year we''re gonna up
        our own ante and increase scope to *anything* you make yourself that is related
        to Advent of Code.  Any form of craft is valid as long as you make it yourself!\n
        * Full details, rules, timeline, templates, etc. are in the [Submissions Megathread](/k4emxn).\n*
        Several folks have forked /u/topaz2078''s [`paste`](https://topaz.github.io/paste/)
        (source on [GitHub](https://github.com/topaz/paste)) to create less minimalistic
        clones.  If you wished `paste` had code syntax coloring and/or other nifty
        features, well then, check ''em out!\n * /u/brskbk - [NoPaste](https://nopaste.ml/)\n
        * GitHub user [EthanJohnson](https://github.com/EthanJohnson) - `paste` fork
        [on GitHub](https://github.com/EthanJohnson/paste)\n * /u/Tranzystorek - fork
        of EthanJohnson''s fork [on GitHub](https://tranzystorek-io.github.io/paste)\n\n***\n\n#---
        Day 1: Report Repair ---\n\n***\n\nPost your solution in this megathread.  Include
        what language(s) your solution uses!  If you need a refresher, the full posting
        rules are detailed in the wiki under [How Do The Daily Megathreads Work?](/r/adventofcode/wiki/index#wiki_how_do_the_daily_megathreads_work.3F).\n\n**Reminder:**
        Top-level posts in Solution Megathreads are for *solutions* only. If you have
        questions, please post your own thread and make sure to flair it with `Help`.\n\n***\n\n###~~This
        thread will be unlocked when there are a significant number of people on the
        global leaderboard with gold stars for today''s puzzle.~~\n###*EDIT:* Global
        leaderboard gold cap reached, thread unlocked at 00:??:??!", "user_reports":
        [], "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false,
        "title": "-\ud83c\udf84- 2020 Day 1 Solutions -\ud83c\udf84-", "link_flair_richtext":
        [], "subreddit_name_prefixed": "r/adventofcode", "hidden": false, "pwls":
        6, "link_flair_css_class": "flair-solutionmegathread", "downs": 0, "top_awarded_type":
        null, "hide_score": false, "name": "t3_k4e4lm", "quarantine": false, "link_flair_text_color":
        "light", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type":
        "public", "ups": 137, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id":
        null, "is_original_content": false, "author_fullname": "t2_60niu", "secure_media":
        null, "is_reddit_media_domain": false, "is_meta": false, "category": null,
        "secure_media_embed": {}, "link_flair_text": "SOLUTION MEGATHREAD", "can_mod_post":
        false, "score": 137, "approved_by": null, "is_created_from_ads_ui": false,
        "author_premium": false, "thumbnail": "", "edited": 1606809783.0, "author_flair_css_class":
        null, "author_flair_richtext": [], "gildings": {}, "content_categories": null,
        "is_self": true, "mod_note": null, "created": 1606798818.0, "link_flair_type":
        "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type":
        "text", "domain": "self.adventofcode", "allow_live_comments": true, "selftext_html":
        "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s been one
        heck of a crappy year, so let&amp;#39;s make the holidays bright with Advent
        of Code 2020! If you participated in a previous year, welcome back, and if
        you&amp;#39;re new this year, we hope you have fun and learn lots!&lt;/p&gt;\n\n&lt;p&gt;We&amp;#39;re
        following the same general format as previous years&amp;#39; megathreads,
        so make sure to read the full description in the wiki (&lt;a href=\"https://www.reddit.com/r/adventofcode/wiki/index#wiki_how_do_the_daily_megathreads_work.3F\"&gt;How
        Do the Daily Megathreads Work?&lt;/a&gt;) before you post!  If you have any
        questions, please create your own thread and ask!&lt;/p&gt;\n\n&lt;p&gt;Above
        all, remember, AoC is all about having fun and learning more about the wonderful
        world of programming!&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;&lt;strong&gt;[Update
        @ 00:04]&lt;/strong&gt; Oops, server issues!&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a
        href=\"/u/topaz2078\"&gt;/u/topaz2078&lt;/a&gt;&amp;#39;s working on it.&lt;/li&gt;\n&lt;li&gt;In
        the meantime, hop over to Twitch and listen to our &lt;a href=\"https://www.twitch.tv/veloxxmusic\"&gt;live
        DJ Veloxxmusic&lt;/a&gt;!&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;[Update
        @ 00:06]&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Servers are up!&lt;br/&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;[Update
        @ 00:27]&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://www.reddit.com/r/adventofcode/comments/k4ejjz/2020_day_1_unlock_crash_postmortem/\"&gt;Crash
        post-mortem explanation&lt;/a&gt; from &lt;a href=\"/u/topaz2078\"&gt;/u/topaz2078&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;[Update
        @ 01:26]&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Many thanks to
        our live deejay &lt;a href=\"https://linktr.ee/veloxx\"&gt;Veloxxmusic&lt;/a&gt;
        for providing the best tunes I&amp;#39;ve heard all year!!!&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr/&gt;\n\n&lt;h2&gt;NEW
        AND NOTEWORTHY THIS YEAR&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Created new post
        flair for &lt;code&gt;Other&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;When posting
        in the daily megathreads, make sure to mention somewhere in your post which
        language(s) your solution is written in&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;COMMUNITY
        NEWS&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;Advent of Code Community Fun 2020:&lt;/strong&gt;
        &lt;a href=\"/r/adventofcode/w/gettincrafty\"&gt;Gettin&amp;#39; Crafty With
        It&lt;/a&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Last year y&amp;#39;all got
        &lt;em&gt;real&lt;/em&gt; creative with poetry and we all loved it.  This
        year we&amp;#39;re gonna up our own ante and increase scope to &lt;em&gt;anything&lt;/em&gt;
        you make yourself that is related to Advent of Code.  Any form of craft is
        valid as long as you make it yourself!\n\n&lt;ul&gt;\n&lt;li&gt;Full details,
        rules, timeline, templates, etc. are in the &lt;a href=\"/k4emxn\"&gt;Submissions
        Megathread&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;Several
        folks have forked &lt;a href=\"/u/topaz2078\"&gt;/u/topaz2078&lt;/a&gt;&amp;#39;s
        &lt;a href=\"https://topaz.github.io/paste/\"&gt;&lt;code&gt;paste&lt;/code&gt;&lt;/a&gt;
        (source on &lt;a href=\"https://github.com/topaz/paste\"&gt;GitHub&lt;/a&gt;)
        to create less minimalistic clones.  If you wished &lt;code&gt;paste&lt;/code&gt;
        had code syntax coloring and/or other nifty features, well then, check &amp;#39;em
        out!\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"/u/brskbk\"&gt;/u/brskbk&lt;/a&gt;
        - &lt;a href=\"https://nopaste.ml/\"&gt;NoPaste&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;GitHub
        user &lt;a href=\"https://github.com/EthanJohnson\"&gt;EthanJohnson&lt;/a&gt;
        - &lt;code&gt;paste&lt;/code&gt; fork &lt;a href=\"https://github.com/EthanJohnson/paste\"&gt;on
        GitHub&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"/u/Tranzystorek\"&gt;/u/Tranzystorek&lt;/a&gt;
        - fork of EthanJohnson&amp;#39;s fork &lt;a href=\"https://tranzystorek-io.github.io/paste\"&gt;on
        GitHub&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr/&gt;\n\n&lt;h1&gt;---
        Day 1: Report Repair ---&lt;/h1&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;Post your solution
        in this megathread.  Include what language(s) your solution uses!  If you
        need a refresher, the full posting rules are detailed in the wiki under &lt;a
        href=\"/r/adventofcode/wiki/index#wiki_how_do_the_daily_megathreads_work.3F\"&gt;How
        Do The Daily Megathreads Work?&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Reminder:&lt;/strong&gt;
        Top-level posts in Solution Megathreads are for &lt;em&gt;solutions&lt;/em&gt;
        only. If you have questions, please post your own thread and make sure to
        flair it with &lt;code&gt;Help&lt;/code&gt;.&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h3&gt;&lt;del&gt;This
        thread will be unlocked when there are a significant number of people on the
        global leaderboard with gold stars for today&amp;#39;s puzzle.&lt;/del&gt;&lt;/h3&gt;\n\n&lt;h3&gt;&lt;em&gt;EDIT:&lt;/em&gt;
        Global leaderboard gold cap reached, thread unlocked at 00:??:??!&lt;/h3&gt;\n&lt;/div&gt;&lt;!--
        SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null,
        "view_count": null, "archived": true, "no_follow": false, "is_crosspostable":
        false, "pinned": false, "over_18": false, "all_awardings": [], "awarders":
        [], "media_only": false, "link_flair_template_id": "caf5e484-9c70-11e5-aa5d-0e1abaa211ff",
        "can_gild": false, "spoiler": false, "locked": false, "author_flair_text":
        null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports":
        null, "distinguished": "moderator", "subreddit_id": "t5_3b3wa", "author_is_blocked":
        false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color":
        "#000000", "id": "k4e4lm", "is_robot_indexable": true, "num_duplicates": 0,
        "report_reasons": null, "author": "daggerdragon", "discussion_type": null,
        "num_comments": 1391, "send_replies": false, "media": null, "contest_mode":
        false, "author_patreon_flair": false, "author_flair_text_color": null, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/", "stickied": false,
        "url": "https://www.reddit.com/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/",
        "subreddit_subscribers": 131311, "created_utc": 1606798818.0, "num_crossposts":
        0, "mod_reports": [], "is_video": false}}], "before": null}}, {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gxtq1tv",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "chinawebs",
        "can_mod_post": false, "created_utc": 1620800770.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_9cgg5", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "[My
        solution](https://topaz.github.io/paste/#XQAAAQDlBwAAAAAAAAAd4Hx7uDgrWCNNHBet77gk0S9Jg38LYfMkG2yuhv+YyHk8CV8aM0+I2LzFKPS8VjThwJsU+QSalo/xF4bXV5yEQsLyKbuEE8tpcscZUCUxVzlIxfHsMUXqPgPxXT0EvKro8NiHwSyTCrBaHO1eDpHNfFWBSFpLeheaTIpGrVSF2nGkmQKAKjn+2Wu2r4Mnq6Pf6uF0drCoCdYXFDviJ7e6BAKBlXtMghLA5R+oymsUNkE6RavfoV8o48On48A2dJBvieDquFFBlfys+ow7sQQe7eIaMWug1dqbuMHT3kv3OB5xUXHa+7tn7yHUs+oGTV5g3OThS/1gvuLILL37D7Xh9a/lmD0fAnzNhFMGbMCjtVJ0M5ErtZGbDXStbHGkOkYUGXUsl36A1Apvv0Gv89lXMxjxVX/upQvGK9gaDh/xrszi1GdJyhnUksf3OCYyx+NG0LOksNg/0dStnYNTyAhNFHUGWypcFaRBTh+4uRoc2edXN9yJ/fDL2TNM+ikaU7stZvPhOScSStFMun+09G0aWIhDVxYndAy8+uVf+QQihyiEynkaRkMyDSMB5jaBp+CIRqABXFuNXCZl+5BO0KwZ4pQL/fM+nSgyzB40bnaniVZ7PhC/9ES5XMdkrS4NMcJ8vRtNWTvckThrxryn4s3uf+HYTWnGhPwsQzeGY/tEXKiEZrjdgfn8Ye7U+PfGbsEg/vDxFeBnaStEqe0R3OvAmkD1jqFtofA+a4DigvNoVPQ+sGS3GgOWRS/cvGYB6Z3489VZNzW98krpPl2zR0GVxL2fZOuw7zd9YQRFzpYD2paYnxtG96StqI5+vZlkB65FTw90Fvm6pfZFixBGu0lP+fem/YDPEA==)
        to Part 1 in Racket Beginning Student (with List Abbreviations)", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_gxtq1tv",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://topaz.github.io/paste/#XQAAAQDlBwAAAAAAAAAd4Hx7uDgrWCNNHBet77gk0S9Jg38LYfMkG2yuhv+YyHk8CV8aM0+I2LzFKPS8VjThwJsU+QSalo/xF4bXV5yEQsLyKbuEE8tpcscZUCUxVzlIxfHsMUXqPgPxXT0EvKro8NiHwSyTCrBaHO1eDpHNfFWBSFpLeheaTIpGrVSF2nGkmQKAKjn+2Wu2r4Mnq6Pf6uF0drCoCdYXFDviJ7e6BAKBlXtMghLA5R+oymsUNkE6RavfoV8o48On48A2dJBvieDquFFBlfys+ow7sQQe7eIaMWug1dqbuMHT3kv3OB5xUXHa+7tn7yHUs+oGTV5g3OThS/1gvuLILL37D7Xh9a/lmD0fAnzNhFMGbMCjtVJ0M5ErtZGbDXStbHGkOkYUGXUsl36A1Apvv0Gv89lXMxjxVX/upQvGK9gaDh/xrszi1GdJyhnUksf3OCYyx+NG0LOksNg/0dStnYNTyAhNFHUGWypcFaRBTh+4uRoc2edXN9yJ/fDL2TNM+ikaU7stZvPhOScSStFMun+09G0aWIhDVxYndAy8+uVf+QQihyiEynkaRkMyDSMB5jaBp+CIRqABXFuNXCZl+5BO0KwZ4pQL/fM+nSgyzB40bnaniVZ7PhC/9ES5XMdkrS4NMcJ8vRtNWTvckThrxryn4s3uf+HYTWnGhPwsQzeGY/tEXKiEZrjdgfn8Ye7U+PfGbsEg/vDxFeBnaStEqe0R3OvAmkD1jqFtofA+a4DigvNoVPQ+sGS3GgOWRS/cvGYB6Z3489VZNzW98krpPl2zR0GVxL2fZOuw7zd9YQRFzpYD2paYnxtG96StqI5+vZlkB65FTw90Fvm6pfZFixBGu0lP+fem/YDPEA==\"&gt;My
        solution&lt;/a&gt; to Part 1 in Racket Beginning Student (with List Abbreviations)&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gxtq1tv/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1620800770.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gjpm1kh",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "backtickbot",
        "can_mod_post": false, "created_utc": 1610968815.0, "send_replies": true,
        "parent_id": "t1_gjpm0tm", "score": 1, "author_fullname": "t2_8n9fijwc", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "[Fixed formatting.](https://np.reddit.com/r/backtickbot/comments/kzstcr/httpsnpredditcomradventofcodecommentsk4e4lm2020/)\n\nHello,
        gozkoon: code blocks using triple backticks (\\`\\`\\`) don''t work on all
        versions of Reddit!\n\nSome users see [this](https://stalas.alm.lt/backformat/gjpm0tm.png)
        / [this](https://stalas.alm.lt/backformat/gjpm0tm.html) instead.\n\nTo fix
        this, **indent every line with 4 spaces** instead.\n\n[FAQ](https://www.reddit.com/r/backtickbot/wiki/index)\n\n^(You
        can opt out by replying with backtickopt6 to this comment.)", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_gjpm1kh",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://np.reddit.com/r/backtickbot/comments/kzstcr/httpsnpredditcomradventofcodecommentsk4e4lm2020/\"&gt;Fixed
        formatting.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Hello, gozkoon: code blocks using
        triple backticks (```) don&amp;#39;t work on all versions of Reddit!&lt;/p&gt;\n\n&lt;p&gt;Some
        users see &lt;a href=\"https://stalas.alm.lt/backformat/gjpm0tm.png\"&gt;this&lt;/a&gt;
        / &lt;a href=\"https://stalas.alm.lt/backformat/gjpm0tm.html\"&gt;this&lt;/a&gt;
        instead.&lt;/p&gt;\n\n&lt;p&gt;To fix this, &lt;strong&gt;indent every line
        with 4 spaces&lt;/strong&gt; instead.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/backtickbot/wiki/index\"&gt;FAQ&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;You
        can opt out by replying with backtickopt6 to this comment.&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gjpm1kh/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1610968815.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gjpm0tm", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "gozkoon", "can_mod_post": false, "created_utc":
        1610968795.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_9vjki98v", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "With great delay here''s my solution in Python
        for a generic target sum and tuple length.\n\n```python\nfrom typing import
        Optional, Tuple, Set\n\ndef sum_of_k(numbers: Set[int], d: int, k: int) -&gt;
        Optional[Tuple[int]]:\n    \"\"\"\n    Returns A tuple of numbers `T` such
        that: `T \u2286 numbers`, `|T| = k` and `sum(T) = d`.\n    \"\"\"\n    if
        k == 1:\n        return (d,) if d in numbers else None\n    \n    for n in
        numbers:\n        n_comp  = sum_of_k(numbers, d - n, k - 1) \n        if n_comp:\n            return
        n_comp + (n,)\n\n\nnumbers = {int(l) for l in open(\"input.txt\", \"r\").readlines()}\n\n#
        Part 1\nn1, n2 =  sum_of_k(numbers, 2020, 2)\nprint(f\"Part 1: N1 = {n1},
        N2 = {n2}, product = {n1 * n2}\")\n\n# Part 2\nn1, n2, n3 = sum_of_k(numbers,
        2020, 3)\nprint(f\"Part 2: N1 = {n1}, N2 = {n2}, N3 = {n3} product = {n1 *
        n2 * n3}\")\n```", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gjpm0tm", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;With
        great delay here&amp;#39;s my solution in Python for a generic target sum
        and tuple length.&lt;/p&gt;\n\n&lt;p&gt;```python\nfrom typing import Optional,
        Tuple, Set&lt;/p&gt;\n\n&lt;p&gt;def sum_of_k(numbers: Set[int], d: int, k:
        int) -&amp;gt; Optional[Tuple[int]]:\n    &amp;quot;&amp;quot;&amp;quot;\n    Returns
        A tuple of numbers &lt;code&gt;T&lt;/code&gt; such that: &lt;code&gt;T \u2286
        numbers&lt;/code&gt;, &lt;code&gt;|T| = k&lt;/code&gt; and &lt;code&gt;sum(T)
        = d&lt;/code&gt;.\n    &amp;quot;&amp;quot;&amp;quot;\n    if k == 1:\n        return
        (d,) if d in numbers else None&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for n in
        numbers:\n    n_comp  = sum_of_k(numbers, d - n, k - 1) \n    if n_comp:\n        return
        n_comp + (n,)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;numbers = {int(l) for
        l in open(&amp;quot;input.txt&amp;quot;, &amp;quot;r&amp;quot;).readlines()}&lt;/p&gt;\n\n&lt;h1&gt;Part
        1&lt;/h1&gt;\n\n&lt;p&gt;n1, n2 =  sum_of_k(numbers, 2020, 2)\nprint(f&amp;quot;Part
        1: N1 = {n1}, N2 = {n2}, product = {n1 * n2}&amp;quot;)&lt;/p&gt;\n\n&lt;h1&gt;Part
        2&lt;/h1&gt;\n\n&lt;p&gt;n1, n2, n3 = sum_of_k(numbers, 2020, 3)\nprint(f&amp;quot;Part
        2: N1 = {n1}, N2 = {n2}, N3 = {n3} product = {n1 * n2 * n3}&amp;quot;)\n```&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gjpm0tm/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1610968795.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gj3t9sd", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "victorz", "can_mod_post": false, "created_utc":
        1610540429.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_6o7cx", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "These are my solutions, employing some convenient
        use of `Set` and `Map`.\n\n# JavaScript\n\n## Part 1\n\n    const fs = require(\"fs\");\n    const
        input = fs\n      .readFileSync(\"input\", \"utf8\")\n      .split(\"\\n\")\n      .filter((s)
        =&gt; s !== \"\")\n      .map(Number);\n    \n    const set = new Set(input);\n    const
        target = 2020;\n    const found = input.find((i) =&gt; set.has(target - i));\n    \n    if
        (found !== undefined) {\n      console.log(`${found} x ${target - found} =
        ${found * (target - found)}`);\n    }\n\n## Part 2\n\n    const fs = require(\"fs\");\n    \n    const
        input = fs\n      .readFileSync(\"input\", \"utf8\")\n      .split(\"\\n\")\n      .filter((s)
        =&gt; s !== \"\")\n      .map(Number);\n    \n    const target = 2020;\n    const
        factors = new Map();\n    \n    input.forEach((i) =&gt; {\n      input.forEach((j)
        =&gt; {\n        factors.set(i + j, [i, j]);\n      });\n    });\n    \n    const
        e = input.find((e) =&gt; factors.has(target - e));\n    const [i, j] = factors.get(target
        - e);\n    console.log(`${e} x ${i} x ${j} = ${e * i * j}`);", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_gj3t9sd",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;These are my solutions,
        employing some convenient use of &lt;code&gt;Set&lt;/code&gt; and &lt;code&gt;Map&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h1&gt;JavaScript&lt;/h1&gt;\n\n&lt;h2&gt;Part
        1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;const fs = require(&amp;quot;fs&amp;quot;);\nconst
        input = fs\n  .readFileSync(&amp;quot;input&amp;quot;, &amp;quot;utf8&amp;quot;)\n  .split(&amp;quot;\\n&amp;quot;)\n  .filter((s)
        =&amp;gt; s !== &amp;quot;&amp;quot;)\n  .map(Number);\n\nconst set = new
        Set(input);\nconst target = 2020;\nconst found = input.find((i) =&amp;gt;
        set.has(target - i));\n\nif (found !== undefined) {\n  console.log(`${found}
        x ${target - found} = ${found * (target - found)}`);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Part
        2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;const fs = require(&amp;quot;fs&amp;quot;);\n\nconst
        input = fs\n  .readFileSync(&amp;quot;input&amp;quot;, &amp;quot;utf8&amp;quot;)\n  .split(&amp;quot;\\n&amp;quot;)\n  .filter((s)
        =&amp;gt; s !== &amp;quot;&amp;quot;)\n  .map(Number);\n\nconst target = 2020;\nconst
        factors = new Map();\n\ninput.forEach((i) =&amp;gt; {\n  input.forEach((j)
        =&amp;gt; {\n    factors.set(i + j, [i, j]);\n  });\n});\n\nconst e = input.find((e)
        =&amp;gt; factors.has(target - e));\nconst [i, j] = factors.get(target - e);\nconsole.log(`${e}
        x ${i} x ${j} = ${e * i * j}`);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gj3t9sd/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1610540429.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gj0j6it", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Jackurius_f", "can_mod_post": false, "created_utc":
        1610469841.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_8ib9asa9", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "After finishing all of the days for this
        year. I have decided to post my code on reddit! My code is not the best and
        I am learning, so if you have any tips please comment!\n\n    from itertools
        import combinations\n    numbers = [int(x) for x in open(\"numbers.txt\").read().splitlines()]\n    y
        = [x for x in list(combinations(numbers, 2)) if sum(x) == 2020][0]\n    part_1
        = y[0] * y[1]\n    print(f\"Part 1: {part_1}\")\n    y = [x for x in list(combinations(numbers,
        3)) if sum(x) == 2020][0]\n    part_2 = y[0] * y[1] * y[2]\n    print(f\"Part
        2: {part_2}\")", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gj0j6it", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;After
        finishing all of the days for this year. I have decided to post my code on
        reddit! My code is not the best and I am learning, so if you have any tips
        please comment!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from itertools import
        combinations\nnumbers = [int(x) for x in open(&amp;quot;numbers.txt&amp;quot;).read().splitlines()]\ny
        = [x for x in list(combinations(numbers, 2)) if sum(x) == 2020][0]\npart_1
        = y[0] * y[1]\nprint(f&amp;quot;Part 1: {part_1}&amp;quot;)\ny = [x for x
        in list(combinations(numbers, 3)) if sum(x) == 2020][0]\npart_2 = y[0] * y[1]
        * y[2]\nprint(f&amp;quot;Part 2: {part_2}&amp;quot;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gj0j6it/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1610469841.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "giau5xg",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "jayfoad",
        "can_mod_post": false, "created_utc": 1609939664.0, "send_replies": true,
        "parent_id": "t1_gi5hv5i", "score": 2, "author_fullname": "t2_2vxcy8d", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Here''s an idea for a completely different array oriented solution: you''re
        looking for a value x such that both x and 2020-x are present in VALS. So
        you could try applying the APL set functions (dyadic `\u2373` `\u220a` `\u2229`
        `\u222a` `~`) to VALS and 2020-VALS.", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_giau5xg", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s an idea for
        a completely different array oriented solution: you&amp;#39;re looking for
        a value x such that both x and 2020-x are present in VALS. So you could try
        applying the APL set functions (dyadic &lt;code&gt;\u2373&lt;/code&gt; &lt;code&gt;\u220a&lt;/code&gt;
        &lt;code&gt;\u2229&lt;/code&gt; &lt;code&gt;\u222a&lt;/code&gt; &lt;code&gt;~&lt;/code&gt;)
        to VALS and 2020-VALS.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_k4e4lm", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/giau5xg/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1609939664.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gi7tamc", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "joeyGibson",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_gi7q3i2", "score":
        3, "author_fullname": "t2_yggr", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Ooo, yes! More advice for
        me to try out tonight! Thanks! I actually removed that entire `cvt` function,
        where `Ferret` was, after seeing some other code that did what I wanted better.
        Basically, I was reading the file, and getting a multiply-nested structure,
        from which I needed to get the integer values, and this is what I came up
        with. Once I saw an example, I was able to remove that function, and just
        replace my \n\n    data\u2190\u2283\u2395nget ''adventofcode2020/day1/input.txt''1\n\nwith
        \n\n    data\u2190\u234e\u00a8\u2283\u2395nget ''adventofcode2020/day1/input.txt''1\n\nand
        that got me a single-level vector with usable integers in it.", "edited":
        false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null,
        "name": "t1_gi7tamc", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ooo,
        yes! More advice for me to try out tonight! Thanks! I actually removed that
        entire &lt;code&gt;cvt&lt;/code&gt; function, where &lt;code&gt;Ferret&lt;/code&gt;
        was, after seeing some other code that did what I wanted better. Basically,
        I was reading the file, and getting a multiply-nested structure, from which
        I needed to get the integer values, and this is what I came up with. Once
        I saw an example, I was able to remove that function, and just replace my
        &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;data\u2190\u2283\u2395nget &amp;#39;adventofcode2020/day1/input.txt&amp;#39;1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;with
        &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;data\u2190\u234e\u00a8\u2283\u2395nget
        &amp;#39;adventofcode2020/day1/input.txt&amp;#39;1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and
        that got me a single-level vector with usable integers in it.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gi7tamc/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1609877242.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1609877242.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gi7q3i2", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "ka-splam", "can_mod_post": false, "created_utc":
        1609876181.0, "send_replies": true, "parent_id": "t1_gi5hv5i", "score": 2,
        "author_fullname": "t2_furr1", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Well done!\n\n&gt; I tried
        to \"think in APL\", and not in procedural languages, but I just couldn''t
        come up with those idioms, yet. \n\nI''ve been a beginner in APL for a couple
        of years, and this is by far the hardest part - much harder than the weird
        symbols - \"okay but ... how do I *solve problems* using arrays?\" :D  I don''t
        fault you at all for using loops. This `others\u2190VALS~val` and `pos/others`
        are nice bits of array thinking, just to make a point of calling that out
        \ud83d\udc4d\n\nOn your code, I know it''s possible to solve the problems
        in one-liners, and you can see that code in other people''s answers if you
        want to go there so I''m not saying \"do it completely differently\" - code
        you write is more fun than code other people wrote; I''m going to throw some
        comments, not actually saying you ought to use them, just hoping to share
        some things APL can do:\n\n    Ferret\u2190{\u2375[2]}\n    R\u2190Ferret\u00a8(\u2395VFI\u00a8LINES)\n\nThat
        `\u2375[2]` to get the second item can be written `2\u2283\u2375` \"2 pick\"
        or \"pick 2nd item of omega\" (as a rule of thumb they try to put control
        instructions like what to pick on the left of builtins, and data to be processed
        on the right), and that would let you write it without the `{}` dfn as `2\u2283\u00a8
        (\u2395VFI\u00a8LINES)` \"pick the second item of each of...\". \n\nAnother
        way, because it''s a fairly unique-y APL thing, if you raise the dimension
        of the \u2395VFI result with `\u2191` \"mix\", instead of a 1D list it turns
        into a 2D array, and then you can select the entire second column with `[;2]`
        in one move: `(\u2191\u2395VFI\u00a8LINES)[;2]`.\n\nHere `\u2283\u00a8\u2283\u00a8R`
        looks like you''re un-nesting or disclosing the numbers? Nesting and enclosing
        always trips me up; I suspect you''re doing `\u2283\u00a8` twice to make suuuure?
        Monadic `\u220a` is that kind of blunt tool \"flatten everything, lose the
        structure and get me all the values in a simple array\", and `\u220aR` might
        do the same thing here.\n    \nThis line `R\u2190R,pos/others` looks like
        it''s appending to a list, and APL can do that with `,\u2190` as in `R,\u2190pos/others`.
        As an aside, in PowerShell catenating onto an array can be done with `$array
        += $item` which is a special-case use of `+=` that hardly shows up anywhere
        else, but APL is much cooler and can combine a lot of functions with `\u2190`
        assignment not limited to just addition or catenation, it can do things like:\n\n          array
        \u2190 1 2 3 4 5 6 7 8 9 10\n          array \u230a\u2190 5\n          array\n    1
        2 3 4 5 5 5 5 5 5\n    \nI''m not sure if that''s always a shorthand for writing
        the variable name twice `array \u2190 array \u230a 5` or if there''s more
        to it than that, but it would make it less annoying to use a longer variable
        name `result,\u2190pos/others` instead of `result\u2190result,pos/others`.\n\nAnyway,
        good job though, it''s made me happy :)", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_gi7q3i2", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well done!&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;I
        tried to &amp;quot;think in APL&amp;quot;, and not in procedural languages,
        but I just couldn&amp;#39;t come up with those idioms, yet. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I&amp;#39;ve
        been a beginner in APL for a couple of years, and this is by far the hardest
        part - much harder than the weird symbols - &amp;quot;okay but ... how do
        I &lt;em&gt;solve problems&lt;/em&gt; using arrays?&amp;quot; :D  I don&amp;#39;t
        fault you at all for using loops. This &lt;code&gt;others\u2190VALS~val&lt;/code&gt;
        and &lt;code&gt;pos/others&lt;/code&gt; are nice bits of array thinking, just
        to make a point of calling that out \ud83d\udc4d&lt;/p&gt;\n\n&lt;p&gt;On
        your code, I know it&amp;#39;s possible to solve the problems in one-liners,
        and you can see that code in other people&amp;#39;s answers if you want to
        go there so I&amp;#39;m not saying &amp;quot;do it completely differently&amp;quot;
        - code you write is more fun than code other people wrote; I&amp;#39;m going
        to throw some comments, not actually saying you ought to use them, just hoping
        to share some things APL can do:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Ferret\u2190{\u2375[2]}\nR\u2190Ferret\u00a8(\u2395VFI\u00a8LINES)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That
        &lt;code&gt;\u2375[2]&lt;/code&gt; to get the second item can be written &lt;code&gt;2\u2283\u2375&lt;/code&gt;
        &amp;quot;2 pick&amp;quot; or &amp;quot;pick 2nd item of omega&amp;quot; (as
        a rule of thumb they try to put control instructions like what to pick on
        the left of builtins, and data to be processed on the right), and that would
        let you write it without the &lt;code&gt;{}&lt;/code&gt; dfn as &lt;code&gt;2\u2283\u00a8
        (\u2395VFI\u00a8LINES)&lt;/code&gt; &amp;quot;pick the second item of each
        of...&amp;quot;. &lt;/p&gt;\n\n&lt;p&gt;Another way, because it&amp;#39;s
        a fairly unique-y APL thing, if you raise the dimension of the \u2395VFI result
        with &lt;code&gt;\u2191&lt;/code&gt; &amp;quot;mix&amp;quot;, instead of a
        1D list it turns into a 2D array, and then you can select the entire second
        column with &lt;code&gt;[;2]&lt;/code&gt; in one move: &lt;code&gt;(\u2191\u2395VFI\u00a8LINES)[;2]&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Here
        &lt;code&gt;\u2283\u00a8\u2283\u00a8R&lt;/code&gt; looks like you&amp;#39;re
        un-nesting or disclosing the numbers? Nesting and enclosing always trips me
        up; I suspect you&amp;#39;re doing &lt;code&gt;\u2283\u00a8&lt;/code&gt; twice
        to make suuuure? Monadic &lt;code&gt;\u220a&lt;/code&gt; is that kind of blunt
        tool &amp;quot;flatten everything, lose the structure and get me all the values
        in a simple array&amp;quot;, and &lt;code&gt;\u220aR&lt;/code&gt; might do
        the same thing here.&lt;/p&gt;\n\n&lt;p&gt;This line &lt;code&gt;R\u2190R,pos/others&lt;/code&gt;
        looks like it&amp;#39;s appending to a list, and APL can do that with &lt;code&gt;,\u2190&lt;/code&gt;
        as in &lt;code&gt;R,\u2190pos/others&lt;/code&gt;. As an aside, in PowerShell
        catenating onto an array can be done with &lt;code&gt;$array += $item&lt;/code&gt;
        which is a special-case use of &lt;code&gt;+=&lt;/code&gt; that hardly shows
        up anywhere else, but APL is much cooler and can combine a lot of functions
        with &lt;code&gt;\u2190&lt;/code&gt; assignment not limited to just addition
        or catenation, it can do things like:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;      array
        \u2190 1 2 3 4 5 6 7 8 9 10\n      array \u230a\u2190 5\n      array\n1 2
        3 4 5 5 5 5 5 5\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&amp;#39;m not sure
        if that&amp;#39;s always a shorthand for writing the variable name twice &lt;code&gt;array
        \u2190 array \u230a 5&lt;/code&gt; or if there&amp;#39;s more to it than that,
        but it would make it less annoying to use a longer variable name &lt;code&gt;result,\u2190pos/others&lt;/code&gt;
        instead of &lt;code&gt;result\u2190result,pos/others&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Anyway,
        good job though, it&amp;#39;s made me happy :)&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gi7q3i2/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1609876181.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "distinguished": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "giat4pz",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "joeyGibson",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_giad5bl", "score":
        2, "author_fullname": "t2_yggr", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "I keep seeing the `2020=\u237a+\u2375`
        style, which reminds me of how some people write Java code with `if (null
        == foo)...`, which annoys me greatly. Knowing _why_ APL code is written that
        way makes total sense, and I will certainly adopt that style.\n\nAs for your
        other points I will definitely be working through them tonight. Thank you!",
        "edited": false, "author_flair_css_class": null, "name": "t1_giat4pz", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I keep seeing the &lt;code&gt;2020=\u237a+\u2375&lt;/code&gt;
        style, which reminds me of how some people write Java code with &lt;code&gt;if
        (null == foo)...&lt;/code&gt;, which annoys me greatly. Knowing &lt;em&gt;why&lt;/em&gt;
        APL code is written that way makes total sense, and I will certainly adopt
        that style.&lt;/p&gt;\n\n&lt;p&gt;As for your other points I will definitely
        be working through them tonight. Thank you!&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "link_id": "t3_k4e4lm", "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": null, "treatment_tags":
        [], "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/giat4pz/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1609938971.0, "author_flair_text": null, "collapsed": false, "created_utc":
        1609938971.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 4, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "giad5bl", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "jayfoad", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_gi9vjan", "score": 1, "author_fullname": "t2_2vxcy8d",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Good question! Boolean arrays, and especially
        vectors, are used a lot. One thing you can do with a Boolean vector is use
        it to select items from another vector with Compress `/`:\n\n          X\u21903
        1 4 1 5 9 2\n          X&gt;6\n    0 0 0 0 0 1 0\n          (X&gt;6)/X\n    9\n\nOne
        trick I saw in someone else''s solution was to do an or-reduction `\u2228/`
        on your Boolean matrix to find which rows contain a 1, and use that result
        to select items from `data`.\n\nAnother option is to use Where `\u2378` on
        the Boolean matrix. This will give you a vector of pairs with the coordinates
        of the 1s. (Sorry Where is too new to feature in Mastering Dyalog APL.)\n\nSome
        stylistic comments about `data\u2218.{(\u237a+\u2375)=2020}data` which you
        are free to take or leave!\n\n1. APLers tend to write `2020=\u237a+\u2375`
        instead of `(\u237a+\u2375)=2020` just so they can omit the parens. You might
        think that''s a dumb reason for writing everything \"the wrong way round\",
        and I wouldn''t argue with you, but you will see it everywhere in APL and
        you might just find that you get used to it yourself.\n2. `=` is a \"scalar
        function\" so you can pull it out of the outer product: `2020=data\u2218.{\u237a+\u2375}data`
        which is of course just `2020=data\u2218.+data`. Because APL is interpreted
        there is some overhead to evaluating lambdas, so `\u2218.+` will almost certainly
        run a lot faster than `\u2218.{...}`.\n3. The Commute operator `\u2368` lets
        you apply a function to two identical arguments: `2020=\u2218.+\u2368data`.
        (This usage of Commute really needs a better name, like Selfie?)\n\nWith that
        in mind, another option for solving part 1 is to use the *Ravel* of the entire
        Boolean matrix to select from the Ravel of a matrix of products, something
        like: `(,2020=\u2218.+\u2368data)/,\u2218.\u00d7\u2368data`\n\nYes it''s a
        bit wasteful generating the whole of `\u2218.\u00d7\u2368data` just to select
        one or two items from it, but I bet you''ll find it still runs pretty fast!",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_giad5bl", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Good
        question! Boolean arrays, and especially vectors, are used a lot. One thing
        you can do with a Boolean vector is use it to select items from another vector
        with Compress &lt;code&gt;/&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;      X\u21903
        1 4 1 5 9 2\n      X&amp;gt;6\n0 0 0 0 0 1 0\n      (X&amp;gt;6)/X\n9\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;One
        trick I saw in someone else&amp;#39;s solution was to do an or-reduction &lt;code&gt;\u2228/&lt;/code&gt;
        on your Boolean matrix to find which rows contain a 1, and use that result
        to select items from &lt;code&gt;data&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Another
        option is to use Where &lt;code&gt;\u2378&lt;/code&gt; on the Boolean matrix.
        This will give you a vector of pairs with the coordinates of the 1s. (Sorry
        Where is too new to feature in Mastering Dyalog APL.)&lt;/p&gt;\n\n&lt;p&gt;Some
        stylistic comments about &lt;code&gt;data\u2218.{(\u237a+\u2375)=2020}data&lt;/code&gt;
        which you are free to take or leave!&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;APLers
        tend to write &lt;code&gt;2020=\u237a+\u2375&lt;/code&gt; instead of &lt;code&gt;(\u237a+\u2375)=2020&lt;/code&gt;
        just so they can omit the parens. You might think that&amp;#39;s a dumb reason
        for writing everything &amp;quot;the wrong way round&amp;quot;, and I wouldn&amp;#39;t
        argue with you, but you will see it everywhere in APL and you might just find
        that you get used to it yourself.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;=&lt;/code&gt;
        is a &amp;quot;scalar function&amp;quot; so you can pull it out of the outer
        product: &lt;code&gt;2020=data\u2218.{\u237a+\u2375}data&lt;/code&gt; which
        is of course just &lt;code&gt;2020=data\u2218.+data&lt;/code&gt;. Because
        APL is interpreted there is some overhead to evaluating lambdas, so &lt;code&gt;\u2218.+&lt;/code&gt;
        will almost certainly run a lot faster than &lt;code&gt;\u2218.{...}&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;The
        Commute operator &lt;code&gt;\u2368&lt;/code&gt; lets you apply a function
        to two identical arguments: &lt;code&gt;2020=\u2218.+\u2368data&lt;/code&gt;.
        (This usage of Commute really needs a better name, like Selfie?)&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;With
        that in mind, another option for solving part 1 is to use the &lt;em&gt;Ravel&lt;/em&gt;
        of the entire Boolean matrix to select from the Ravel of a matrix of products,
        something like: &lt;code&gt;(,2020=\u2218.+\u2368data)/,\u2218.\u00d7\u2368data&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Yes
        it&amp;#39;s a bit wasteful generating the whole of &lt;code&gt;\u2218.\u00d7\u2368data&lt;/code&gt;
        just to select one or two items from it, but I bet you&amp;#39;ll find it
        still runs pretty fast!&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_k4e4lm", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/giad5bl/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1609924680.0,
        "author_flair_text": null, "treatment_tags": [], "created_utc": 1609924680.0,
        "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0, "depth":
        3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "distinguished":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "distinguished": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "giasxev",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "joeyGibson",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_giadj31", "score":
        2, "author_fullname": "t2_yggr", "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "I have seen uses of boolean results like that, but it didn''t
        occur to me to use that here. That definitely cuts out some of the fluff.",
        "edited": false, "gildings": {}, "downs": 0, "author_flair_css_class": null,
        "name": "t1_giasxev", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        have seen uses of boolean results like that, but it didn&amp;#39;t occur to
        me to use that here. That definitely cuts out some of the fluff.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "link_id": "t3_k4e4lm",
        "associated_award": null, "stickied": false, "author_premium": false, "can_gild":
        false, "top_awarded_type": null, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/giasxev/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1609938830.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1609938830.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 5, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "giadj31", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "jayfoad", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_gi9zvy8", "score": 1, "author_fullname": "t2_2vxcy8d",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "Yup, that works. Some of the outer parens are just not needed:
        `\u00d7/\u220a(data\u2218.{(\u237a+\u2375)=2020:\u2375 \u22c4 0}data)~0`\n\nAnother
        APLism to to use Booleans as the mathematical values 0 and 1 (this is \"Iverson''s
        convention\" and [Knuth says it''s OK](https://arxiv.org/pdf/math/9205211.pdf)).
        So your lambda could be written as `{((\u237a+\u2375)=2020)\u00d7\u2375}`
        or `{\u2375\u00d72020=\u237a+\u2375}`.", "edited": false, "author_flair_css_class":
        null, "name": "t1_giadj31", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yup,
        that works. Some of the outer parens are just not needed: &lt;code&gt;\u00d7/\u220a(data\u2218.{(\u237a+\u2375)=2020:\u2375
        \u22c4 0}data)~0&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Another APLism to to use
        Booleans as the mathematical values 0 and 1 (this is &amp;quot;Iverson&amp;#39;s
        convention&amp;quot; and &lt;a href=\"https://arxiv.org/pdf/math/9205211.pdf\"&gt;Knuth
        says it&amp;#39;s OK&lt;/a&gt;). So your lambda could be written as &lt;code&gt;{((\u237a+\u2375)=2020)\u00d7\u2375}&lt;/code&gt;
        or &lt;code&gt;{\u2375\u00d72020=\u237a+\u2375}&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "link_id": "t3_k4e4lm", "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": null, "treatment_tags":
        [], "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/giadj31/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1609925063.0, "author_flair_text": null, "collapsed": false, "created_utc":
        1609925063.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 4, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gi9zvy8", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "joeyGibson", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_gi9vjan", "score": 2, "author_fullname": "t2_yggr",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "After some more testing, and reading, I came
        up with\n\n    \u00d7/((\u220a(data\u2218.{(\u237a+\u2375)=2020:\u2375 \u22c4
        0}data))~0)\n\nwhich works, but all the parens are kind of smelly, I think.",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_gi9zvy8", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;After
        some more testing, and reading, I came up with&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;\u00d7/((\u220a(data\u2218.{(\u237a+\u2375)=2020:\u2375
        \u22c4 0}data))~0)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which works, but
        all the parens are kind of smelly, I think.&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gi9zvy8/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1609913423.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1609913423.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gi9vjan", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "joeyGibson", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_gi655c0", "score": 2, "author_fullname": "t2_yggr",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "If `data` contains `1721 979 366 299 675 1456`, and I run\n\n`data\u2218.{(\u237a+\u2375)=2020}data`,
        then I get a matrix of true/false values\n\n    0 0 0 1 0 0\n    0 0 0 0 0
        0\n    0 0 0 0 0 0\n    1 0 0 0 0 0\n    0 0 0 0 0 0\n    0 0 0 0 0 0\n\nHow
        can I get the value at that junction? I tried to figure out how to have the
        anonymous function return `\u2375` if the condition is true, but I couldn''t
        figure out how to do it. I feel like I''m close, but not sure where to go
        next.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_gi9vjan", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If
        &lt;code&gt;data&lt;/code&gt; contains &lt;code&gt;1721 979 366 299 675 1456&lt;/code&gt;,
        and I run&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;data\u2218.{(\u237a+\u2375)=2020}data&lt;/code&gt;,
        then I get a matrix of true/false values&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;0
        0 0 1 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n1 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;How
        can I get the value at that junction? I tried to figure out how to have the
        anonymous function return &lt;code&gt;\u2375&lt;/code&gt; if the condition
        is true, but I couldn&amp;#39;t figure out how to do it. I feel like I&amp;#39;m
        close, but not sure where to go next.&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gi9vjan/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1609910643.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1609910643.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gi6bk46", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "joeyGibson", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_gi655c0", "score": 2, "author_fullname": "t2_yggr",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "YES! Thank you! This is the kind of feedback I was hoping for.
        I knew that the `:For` loops smelled bad, I just couldn''t figure out how
        to get the same effect any other way. I''m only about 250 pages into \"Mastering
        Dyalog APL\", so I''m still finding my way. I will definitely investigate
        this tonight.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_gi6bk46", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;YES!
        Thank you! This is the kind of feedback I was hoping for. I knew that the
        &lt;code&gt;:For&lt;/code&gt; loops smelled bad, I just couldn&amp;#39;t figure
        out how to get the same effect any other way. I&amp;#39;m only about 250 pages
        into &amp;quot;Mastering Dyalog APL&amp;quot;, so I&amp;#39;m still finding
        my way. I will definitely investigate this tonight.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gi6bk46/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1609851410.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1609851410.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gi655c0", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "jayfoad", "can_mod_post": false, "created_utc":
        1609845844.0, "send_replies": true, "parent_id": "t1_gi5hv5i", "score": 2,
        "author_fullname": "t2_2vxcy8d", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Great! The only thing about
        your code that really stands out as un-idiomatic is the :For loops. To get
        the best out of APL you should really strive to do operations on whole arrays
        at a time. The practical reason for this is: it''ll run faster. The more important
        reason is: it unlocks a whole new way of looking at problems, with a higher
        level of abstraction.\n\nIn part 1 you use a :For loop as a way of searching
        all pairs of numbers in VALS, to find two that sum to 2020. If you look at
        APL''s outer product (`\u2218.f`) you''ll find it''s a general way of doing
        a Cartesian product (all pairs) on any two arrays, which you can use here
        to find the sum of all pairs drawn from VALS and VALS in a single shot.\n\nFor
        part 2 you might like to think about how you can find all *triples*, still
        making use of the same outer product operator.\n\nIncidentally [The APL Orchard](https://chat.stackexchange.com/rooms/52405/the-apl-orchard)
        is a great place for learning and discussing APL.", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_gi655c0", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Great! The only thing about
        your code that really stands out as un-idiomatic is the :For loops. To get
        the best out of APL you should really strive to do operations on whole arrays
        at a time. The practical reason for this is: it&amp;#39;ll run faster. The
        more important reason is: it unlocks a whole new way of looking at problems,
        with a higher level of abstraction.&lt;/p&gt;\n\n&lt;p&gt;In part 1 you use
        a :For loop as a way of searching all pairs of numbers in VALS, to find two
        that sum to 2020. If you look at APL&amp;#39;s outer product (&lt;code&gt;\u2218.f&lt;/code&gt;)
        you&amp;#39;ll find it&amp;#39;s a general way of doing a Cartesian product
        (all pairs) on any two arrays, which you can use here to find the sum of all
        pairs drawn from VALS and VALS in a single shot.&lt;/p&gt;\n\n&lt;p&gt;For
        part 2 you might like to think about how you can find all &lt;em&gt;triples&lt;/em&gt;,
        still making use of the same outer product operator.&lt;/p&gt;\n\n&lt;p&gt;Incidentally
        &lt;a href=\"https://chat.stackexchange.com/rooms/52405/the-apl-orchard\"&gt;The
        APL Orchard&lt;/a&gt; is a great place for learning and discussing APL.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gi655c0/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1609845844.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gi5hv5i", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "joeyGibson", "can_mod_post": false, "created_utc":
        1609824556.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 3,
        "author_fullname": "t2_yggr", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "After seeing multiple submissions in APL
        by /u/jayfoad and /u/ka-splam, I started experimenting with Dyalog APL, and
        decided to take a whack at re-implementing some of the AoC challenges in APL
        (I did them all in Ruby the first time). Starting with Day 1, which took me
        many hours, I came up with this. It''s probably shitty APL code, but it''s
        mine. :-) I tried to \"think in APL\", and not in procedural languages, but
        I just couldn''t come up with those idioms, yet. \n\nI welcome any comments
        from fans of APL, who know more about it than I do.\n\n    \u235d a function
        to solve part 1\n     R\u2190combos VALS;val;pos;others\n     R\u2190\u236c\n     :For
        val :In VALS\n         others\u2190VALS~val\n         pos\u2190(others=(2020-val))\n         R\u2190R,pos/others\n     :EndFor\n    \n     R\u2190\u00d7/R\n    \n    \u235d
        a function to solve part 2\n     R\u2190combos3 VALS;val;val1;pos;others;others1\n     R\u2190\u236c\n     :For
        val :In VALS\n         others\u2190VALS~val\n         :For val1 :In others\n             others1\u2190others~val1\n             pos\u2190(others1=(2020-(val+val1)))\n             R\u2190R,pos/others1\n         :EndFor\n     :EndFor\n    \n     R\u2190((\u2373\u2374R)=(R\u2373R))/R\n     R\u2190\u00d7/R\n    \n    \u235d
        Read the test data file\n    data\u2190\u234e\u00a8\u2283\u2395nget ''adventofcode2020/day1/input.txt''1\n\n    \u235d
        run part 1\n    combos data\n    \u235d run part 2\n    combos3 data\n\nEdit:
        I looked at someone else''s code, and realized I could remove one of the functions,
        if I changed how I read in the text file.", "edited": 1609826685.0, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_gi5hv5i", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;After seeing multiple submissions
        in APL by &lt;a href=\"/u/jayfoad\"&gt;/u/jayfoad&lt;/a&gt; and &lt;a href=\"/u/ka-splam\"&gt;/u/ka-splam&lt;/a&gt;,
        I started experimenting with Dyalog APL, and decided to take a whack at re-implementing
        some of the AoC challenges in APL (I did them all in Ruby the first time).
        Starting with Day 1, which took me many hours, I came up with this. It&amp;#39;s
        probably shitty APL code, but it&amp;#39;s mine. :-) I tried to &amp;quot;think
        in APL&amp;quot;, and not in procedural languages, but I just couldn&amp;#39;t
        come up with those idioms, yet. &lt;/p&gt;\n\n&lt;p&gt;I welcome any comments
        from fans of APL, who know more about it than I do.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;\u235d
        a function to solve part 1\n R\u2190combos VALS;val;pos;others\n R\u2190\u236c\n
        :For val :In VALS\n     others\u2190VALS~val\n     pos\u2190(others=(2020-val))\n     R\u2190R,pos/others\n
        :EndFor\n\n R\u2190\u00d7/R\n\n\u235d a function to solve part 2\n R\u2190combos3
        VALS;val;val1;pos;others;others1\n R\u2190\u236c\n :For val :In VALS\n     others\u2190VALS~val\n     :For
        val1 :In others\n         others1\u2190others~val1\n         pos\u2190(others1=(2020-(val+val1)))\n         R\u2190R,pos/others1\n     :EndFor\n
        :EndFor\n\n R\u2190((\u2373\u2374R)=(R\u2373R))/R\n R\u2190\u00d7/R\n\n\u235d
        Read the test data file\ndata\u2190\u234e\u00a8\u2283\u2395nget &amp;#39;adventofcode2020/day1/input.txt&amp;#39;1\n\n\u235d
        run part 1\ncombos data\n\u235d run part 2\ncombos3 data\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Edit:
        I looked at someone else&amp;#39;s code, and realized I could remove one of
        the functions, if I changed how I read in the text file.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gi5hv5i/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1609824556.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "ghhxuux", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Yesterday512", "can_mod_post": false,
        "created_utc": 1609335932.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 1, "author_fullname": "t2_227muclq", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "# AmigaBASIC\n\nFor
        Part 2 I had to implement iterative quicksort, to improve performance (on
        an emulated Amiga 2000 with Workbench 1.3).\n\n**Part 1**\n\n    DIM SHARED
        n%     '' number of input lines\n    DIM SHARED solution&amp;\n    \n    filename$
        = \"Shared:input.txt\"\n    CountFileLines(filename$)\n    \n    PRINT \"read\";
        n%; \"lines from \"; filename$\n    \n    DIM SHARED lines(n%)\n    ReadLines(filename$)\n    \n    PRINT
        TIME$; \" starting calculation\"\n    \n    SolvePart1(2020)\n    \n    PRINT
        TIME$; \" finished calculation\"\n    PRINT \"solution: \"; solution&amp;\n    \n    \n    ''
        -------- sub routines --------\n    \n    SUB SolvePart1 (target%) STATIC\n      FOR
        a% = 1 TO n%-1\n        FOR b% = a%+1 TO n%\n          IF lines(a%) + lines(b%)
        = target% THEN\n            solution&amp; = lines(a%) * lines(b%)\n            EXIT
        SUB\n          END IF\n        NEXT b%\n      NEXT a%  \n    END SUB\n    \n    SUB
        CountFileLines (filename$) STATIC\n      OPEN filename$ FOR INPUT AS #1\n      n%
        = 0\n      WHILE EOF(1) = 0\n        INPUT#1, content\n        n% = n% + 1\n      WEND\n      CLOSE
        #1\n    END SUB\n    \n    SUB ReadLines (filename$) STATIC\n      OPEN filename$
        FOR INPUT AS #1\n      FOR i% = 1 TO n%\n        INPUT#1, lines(i%)\n      NEXT\n      CLOSE
        #1\n    END SUB  \n\n**Part 2**\n\n    DIM SHARED n%     '' number of input
        lines\n    DIM SHARED solution&amp;\n    \n    filename$ = \"Shared:input.txt\"\n    CountFileLines(filename$)\n    \n    PRINT
        \"read\"; n%; \"lines from \"; filename$\n    \n    DIM SHARED lines%(n%)\n    ReadLines(filename$)\n    \n    PRINT
        TIME$; \" sorting\"\n    \n    QuickSort\n    \n    PRINT TIME$; \" starting
        calculation\"\n    \n    SolvePart2(2020)\n    \n    PRINT TIME$; \" solution:\";
        solution&amp;\n    \n    \n    '' -------- sub routines --------\n    \n    SUB
        SolvePart2 (target%) STATIC\n      '' required shared variables:\n      ''   lines%    -&gt;
        input array\n      ''   solution&amp; -&gt; return value\n      \n      n%
        = UBOUND(lines%)\n      solution&amp; = 0\n      FOR a% = 1 TO n%-2\n        FOR
        b% = a%+1 TO n%-1\n          CALL SubSolver(a%, b%, target%)\n          IF
        solution&amp; &gt; 0 THEN EXIT SUB\n        NEXT b%\n      NEXT a%  \n    END
        SUB\n    \n    SUB SubSolver(a%, b%, target%) STATIC\n      FOR c% = b%+1
        TO n%\n        s% = lines%(a%) + lines%(b%) + lines%(c%)\n        IF s% =
        target% THEN\n          solution&amp; = CDBL(lines%(a%)) * CDBL(lines%(b%))
        * CDBL(lines%(c%))\n          EXIT SUB\n        ELSEIF s% &gt; target% THEN\n          EXIT
        SUB\n        END IF\n      NEXT  \n    END SUB\n    \n    SUB QuickSort STATIC\n      ''
        required shared variable:\n      ''  lines% -&gt; input array (gets inplace
        sorted)\n    \n      n% = UBOUND(lines%)\n      left% = 1\n      right% =
        n%\n      DIM stack%(n%)\n      stack%(1) = left%\n      stack%(2) = right%\n      is%
        = 2\n      WHILE is% &gt; 0\n        right% = stack%(is%)\n        is% = is%
        - 1\n        left% = stack%(is%)\n        is% = is% - 1\n    \n        ip%
        = left% - 1\n        FOR j% = left% TO right%-1\n          IF lines%(j%) &lt;=
        lines%(right%) THEN\n            ip% = ip% + 1\n            SWAP lines%(ip%),
        lines%(j%)\n          END IF\n        NEXT\n        SWAP lines%(ip%+1), lines%(right%)\n        pivot%
        = ip% + 1\n    \n        IF pivot% - 1 &gt; left% THEN\n          is% = is%
        + 1\n          stack%(is%) = left%\n          is% = is% + 1\n          stack%(is%)
        = pivot% - 1\n        END IF\n    \n        IF pivot% + 1 &lt; right% THEN\n          is%
        = is% + 1\n          stack%(is%) = pivot% + 1\n          is% = is% + 1\n          stack%(is%)
        = right%\n        END IF\n    \n      WEND \n    END SUB\n    \n    SUB CountFileLines
        (filename$) STATIC\n      '' required shared variable:\n      ''  n% -&gt;
        returns number of lines in file\n    \n      OPEN filename$ FOR INPUT AS #1\n      n%
        = 0\n      WHILE EOF(1) = 0\n        INPUT#1, content\n        n% = n% + 1\n      WEND\n      CLOSE
        #1\n    END SUB\n    \n    SUB ReadLines (filename$) STATIC\n      '' required
        shared variables:\n      ''  n%     -&gt; number of lines to be read\n      ''  lines%
        -&gt; returns lines\n    \n      OPEN filename$ FOR INPUT AS #1\n      FOR
        i% = 1 TO n%\n        INPUT#1, lines%(i%)\n      NEXT\n      CLOSE #1\n    END
        SUB", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_ghhxuux", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;AmigaBASIC&lt;/h1&gt;\n\n&lt;p&gt;For
        Part 2 I had to implement iterative quicksort, to improve performance (on
        an emulated Amiga 2000 with Workbench 1.3).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Part
        1&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;DIM SHARED n%     &amp;#39;
        number of input lines\nDIM SHARED solution&amp;amp;\n\nfilename$ = &amp;quot;Shared:input.txt&amp;quot;\nCountFileLines(filename$)\n\nPRINT
        &amp;quot;read&amp;quot;; n%; &amp;quot;lines from &amp;quot;; filename$\n\nDIM
        SHARED lines(n%)\nReadLines(filename$)\n\nPRINT TIME$; &amp;quot; starting
        calculation&amp;quot;\n\nSolvePart1(2020)\n\nPRINT TIME$; &amp;quot; finished
        calculation&amp;quot;\nPRINT &amp;quot;solution: &amp;quot;; solution&amp;amp;\n\n\n&amp;#39;
        -------- sub routines --------\n\nSUB SolvePart1 (target%) STATIC\n  FOR a%
        = 1 TO n%-1\n    FOR b% = a%+1 TO n%\n      IF lines(a%) + lines(b%) = target%
        THEN\n        solution&amp;amp; = lines(a%) * lines(b%)\n        EXIT SUB\n      END
        IF\n    NEXT b%\n  NEXT a%  \nEND SUB\n\nSUB CountFileLines (filename$) STATIC\n  OPEN
        filename$ FOR INPUT AS #1\n  n% = 0\n  WHILE EOF(1) = 0\n    INPUT#1, content\n    n%
        = n% + 1\n  WEND\n  CLOSE #1\nEND SUB\n\nSUB ReadLines (filename$) STATIC\n  OPEN
        filename$ FOR INPUT AS #1\n  FOR i% = 1 TO n%\n    INPUT#1, lines(i%)\n  NEXT\n  CLOSE
        #1\nEND SUB  \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Part 2&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;DIM
        SHARED n%     &amp;#39; number of input lines\nDIM SHARED solution&amp;amp;\n\nfilename$
        = &amp;quot;Shared:input.txt&amp;quot;\nCountFileLines(filename$)\n\nPRINT
        &amp;quot;read&amp;quot;; n%; &amp;quot;lines from &amp;quot;; filename$\n\nDIM
        SHARED lines%(n%)\nReadLines(filename$)\n\nPRINT TIME$; &amp;quot; sorting&amp;quot;\n\nQuickSort\n\nPRINT
        TIME$; &amp;quot; starting calculation&amp;quot;\n\nSolvePart2(2020)\n\nPRINT
        TIME$; &amp;quot; solution:&amp;quot;; solution&amp;amp;\n\n\n&amp;#39; --------
        sub routines --------\n\nSUB SolvePart2 (target%) STATIC\n  &amp;#39; required
        shared variables:\n  &amp;#39;   lines%    -&amp;gt; input array\n  &amp;#39;   solution&amp;amp;
        -&amp;gt; return value\n\n  n% = UBOUND(lines%)\n  solution&amp;amp; = 0\n  FOR
        a% = 1 TO n%-2\n    FOR b% = a%+1 TO n%-1\n      CALL SubSolver(a%, b%, target%)\n      IF
        solution&amp;amp; &amp;gt; 0 THEN EXIT SUB\n    NEXT b%\n  NEXT a%  \nEND
        SUB\n\nSUB SubSolver(a%, b%, target%) STATIC\n  FOR c% = b%+1 TO n%\n    s%
        = lines%(a%) + lines%(b%) + lines%(c%)\n    IF s% = target% THEN\n      solution&amp;amp;
        = CDBL(lines%(a%)) * CDBL(lines%(b%)) * CDBL(lines%(c%))\n      EXIT SUB\n    ELSEIF
        s% &amp;gt; target% THEN\n      EXIT SUB\n    END IF\n  NEXT  \nEND SUB\n\nSUB
        QuickSort STATIC\n  &amp;#39; required shared variable:\n  &amp;#39;  lines%
        -&amp;gt; input array (gets inplace sorted)\n\n  n% = UBOUND(lines%)\n  left%
        = 1\n  right% = n%\n  DIM stack%(n%)\n  stack%(1) = left%\n  stack%(2) = right%\n  is%
        = 2\n  WHILE is% &amp;gt; 0\n    right% = stack%(is%)\n    is% = is% - 1\n    left%
        = stack%(is%)\n    is% = is% - 1\n\n    ip% = left% - 1\n    FOR j% = left%
        TO right%-1\n      IF lines%(j%) &amp;lt;= lines%(right%) THEN\n        ip%
        = ip% + 1\n        SWAP lines%(ip%), lines%(j%)\n      END IF\n    NEXT\n    SWAP
        lines%(ip%+1), lines%(right%)\n    pivot% = ip% + 1\n\n    IF pivot% - 1 &amp;gt;
        left% THEN\n      is% = is% + 1\n      stack%(is%) = left%\n      is% = is%
        + 1\n      stack%(is%) = pivot% - 1\n    END IF\n\n    IF pivot% + 1 &amp;lt;
        right% THEN\n      is% = is% + 1\n      stack%(is%) = pivot% + 1\n      is%
        = is% + 1\n      stack%(is%) = right%\n    END IF\n\n  WEND \nEND SUB\n\nSUB
        CountFileLines (filename$) STATIC\n  &amp;#39; required shared variable:\n  &amp;#39;  n%
        -&amp;gt; returns number of lines in file\n\n  OPEN filename$ FOR INPUT AS
        #1\n  n% = 0\n  WHILE EOF(1) = 0\n    INPUT#1, content\n    n% = n% + 1\n  WEND\n  CLOSE
        #1\nEND SUB\n\nSUB ReadLines (filename$) STATIC\n  &amp;#39; required shared
        variables:\n  &amp;#39;  n%     -&amp;gt; number of lines to be read\n  &amp;#39;  lines%
        -&amp;gt; returns lines\n\n  OPEN filename$ FOR INPUT AS #1\n  FOR i% = 1
        TO n%\n    INPUT#1, lines%(i%)\n  NEXT\n  CLOSE #1\nEND SUB\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ghhxuux/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1609335932.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gh3ax5t", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Jerslev", "can_mod_post": false, "created_utc":
        1609007675.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_igkx7", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Python\n\nFirst time doing AOC.\n\n[paste](https://topaz.github.io/paste/#XQAAAQBwBAAAAAAAAAA7mkrvHeIvDZUizuahZXjZEQ8CUoVKAs1G9EBL+TIdkXz1p02p6GTpCwajJw26ddCHqn1nH+kvDkcrTVLbx+wGBALMq8bGlGKfmn5a5Rqo5PbPoFXiQIHX0TTJKYJ5O9fCMWnZlAg/v2NEWVD2oAAxdzkq/2W/lCtkLf6V7GAPAvRs3ylDQ/dm9d/D1+uaYoexKqJpP0G3EIy1AxCGsBscgU8YWBhana8We/sq5dZRx17dv4zPvyL/QI0t8UmmONoc0v7l+OAdbuyCSWhsiyvkaIkEGQbEhkGy116HkSZvsZNybbyTAVl23vs1/XilDlewY50x66gKgsUAllV0+96hWDNdRqJJoRAETjkQVZ6im/LLxRfxSxIb6cP56JkOYB70XUJzTtl4LoZ+Kbb6hLC6TtAU4zsYosJvpWajXAbNRBFiWzSACY27ZEaJsv2Lwaq28RkjCKf0JHZI2FxNhuApHc44k/Cj4/wQxh3w8YU17mEbolM9fKqG7FulYcAhf/zHoIyafq5D/xrixgA=)",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_gh3ax5t", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python&lt;/p&gt;\n\n&lt;p&gt;First
        time doing AOC.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://topaz.github.io/paste/#XQAAAQBwBAAAAAAAAAA7mkrvHeIvDZUizuahZXjZEQ8CUoVKAs1G9EBL+TIdkXz1p02p6GTpCwajJw26ddCHqn1nH+kvDkcrTVLbx+wGBALMq8bGlGKfmn5a5Rqo5PbPoFXiQIHX0TTJKYJ5O9fCMWnZlAg/v2NEWVD2oAAxdzkq/2W/lCtkLf6V7GAPAvRs3ylDQ/dm9d/D1+uaYoexKqJpP0G3EIy1AxCGsBscgU8YWBhana8We/sq5dZRx17dv4zPvyL/QI0t8UmmONoc0v7l+OAdbuyCSWhsiyvkaIkEGQbEhkGy116HkSZvsZNybbyTAVl23vs1/XilDlewY50x66gKgsUAllV0+96hWDNdRqJJoRAETjkQVZ6im/LLxRfxSxIb6cP56JkOYB70XUJzTtl4LoZ+Kbb6hLC6TtAU4zsYosJvpWajXAbNRBFiWzSACY27ZEaJsv2Lwaq28RkjCKf0JHZI2FxNhuApHc44k/Cj4/wQxh3w8YU17mEbolM9fKqG7FulYcAhf/zHoIyafq5D/xrixgA=\"&gt;paste&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": true, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gh3ax5t/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1609007675.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gh2wib2", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "RedTwinkleToes", "can_mod_post": false,
        "created_utc": 1608999182.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 1, "author_fullname": "t2_o3lqqio", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Python \n\n    input
        = [int(x) for x in open(''input'').read().strip(''\\n'').splitlines()]\n    \n    #Part
        1\n    def solve(target, data):\n        inv = set()\n        for x in data:\n            if
        x in inv:\n                return x * (target - x)\n            inv.add(target-x)\n        return
        None\n    \n    print(solve(2020,input))\n    \n    #Part 2\n    index = 0\n    while
        True:\n        first = input[index]\n        sol = solve(2020-first,input[index+1:])\n        if
        sol is not None:\n            print(sol*first)\n            break\n        index
        = index + 1\n\nI didn''t bother to record my code the first time around for
        the first 6 days. I''m going to fix that.", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_gh2wib2", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;input
        = [int(x) for x in open(&amp;#39;input&amp;#39;).read().strip(&amp;#39;\\n&amp;#39;).splitlines()]\n\n#Part
        1\ndef solve(target, data):\n    inv = set()\n    for x in data:\n        if
        x in inv:\n            return x * (target - x)\n        inv.add(target-x)\n    return
        None\n\nprint(solve(2020,input))\n\n#Part 2\nindex = 0\nwhile True:\n    first
        = input[index]\n    sol = solve(2020-first,input[index+1:])\n    if sol is
        not None:\n        print(sol*first)\n        break\n    index = index + 1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I
        didn&amp;#39;t bother to record my code the first time around for the first
        6 days. I&amp;#39;m going to fix that.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gh2wib2/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1608999182.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gh09qok", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "aoc-fan", "can_mod_post": false, "created_utc":
        1608922758.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_13cqpt", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Now that I am done with all days, solving
        them with F#. [Repo](https://github.com/bhosale-ajay/adventofcode/blob/master/2020/fsharp/aoc2020-test/D01.fs).\n\nLearning
        F#, No for loops, No mutation", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_gh09qok", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Now that I am done with all days, solving
        them with F#. &lt;a href=\"https://github.com/bhosale-ajay/adventofcode/blob/master/2020/fsharp/aoc2020-test/D01.fs\"&gt;Repo&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Learning
        F#, No for loops, No mutation&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gh09qok/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1608922758.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "ggslsau", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Tosxychor", "can_mod_post": false, "created_utc":
        1608729431.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_5ios6", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "# Fennel\n\n[https://paste.xinu.at/tW42/fnl](https://paste.xinu.at/tW42/fnl)",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_ggslsau", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Fennel&lt;/h1&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://paste.xinu.at/tW42/fnl\"&gt;https://paste.xinu.at/tW42/fnl&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ggslsau/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1608729431.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ggxmh7k",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1608845685.0, "send_replies": true,
        "parent_id": "t1_ggqi1ze", "score": 1, "author_fullname": "t2_60niu", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Your code is hard to read on old.reddit.  Please edit it as per our posting
        guidelines in the wiki: [How do I format code?](https://www.reddit.com/r/adventofcode/wiki/index#wiki_how_do_i_format_code.3F)",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_ggxmh7k", "is_submitter": true, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Your
        code is hard to read on old.reddit.  Please edit it as per our posting guidelines
        in the wiki: &lt;a href=\"https://www.reddit.com/r/adventofcode/wiki/index#wiki_how_do_i_format_code.3F\"&gt;How
        do I format code?&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": "moderator", "associated_award": null, "stickied":
        false, "author_premium": false, "can_gild": false, "link_id": "t3_k4e4lm",
        "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ggxmh7k/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1608845685.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "ggqi1ze", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "tomnr100", "can_mod_post": false, "created_utc":
        1608675169.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_txtdx", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Python 3.9 solution without using external
        libraries:\n\n```\nr = open(''input.txt'', ''r'')\n\nnumbers = []\nfor number
        in r:\n    number = number.replace(''\\n'', '''')\n    numbers.append(int(number))\n\nnumbers.sort()\n\n\nl
        = 0\nm = int(len(numbers))-1\n\n\nlol = True\nwhile lol:\n    if numbers[int(l)]
        + numbers[int(m)] == 2020:\n        print(''The numbers are:'' + str(l) +
        str(m))\n        lol = False\n    elif numbers[int(l)] + numbers[int(m)] &lt;
        2020:\n        l += 1\n    elif numbers[int(l)] + numbers[int(m)] &gt; 2020:\n        m
        -= 1\n\nprint(numbers[1])\nprint(numbers[180])\n```", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_ggqi1ze", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python 3.9 solution without
        using external libraries:&lt;/p&gt;\n\n&lt;p&gt;```\nr = open(&amp;#39;input.txt&amp;#39;,
        &amp;#39;r&amp;#39;)&lt;/p&gt;\n\n&lt;p&gt;numbers = []\nfor number in r:\n    number
        = number.replace(&amp;#39;\\n&amp;#39;, &amp;#39;&amp;#39;)\n    numbers.append(int(number))&lt;/p&gt;\n\n&lt;p&gt;numbers.sort()&lt;/p&gt;\n\n&lt;p&gt;l
        = 0\nm = int(len(numbers))-1&lt;/p&gt;\n\n&lt;p&gt;lol = True\nwhile lol:\n    if
        numbers[int(l)] + numbers[int(m)] == 2020:\n        print(&amp;#39;The numbers
        are:&amp;#39; + str(l) + str(m))\n        lol = False\n    elif numbers[int(l)]
        + numbers[int(m)] &amp;lt; 2020:\n        l += 1\n    elif numbers[int(l)]
        + numbers[int(m)] &amp;gt; 2020:\n        m -= 1&lt;/p&gt;\n\n&lt;p&gt;print(numbers[1])\nprint(numbers[180])\n```&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ggqi1ze/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1608675169.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "ggo2d3y", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "dizzyhobbes", "can_mod_post": false, "created_utc":
        1608617308.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_1yhucx86", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Go solution: [Github repo](https://github.com/alexchao26/advent-of-code-go/tree/main/2020/day01/main.go)",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_ggo2d3y", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Go
        solution: &lt;a href=\"https://github.com/alexchao26/advent-of-code-go/tree/main/2020/day01/main.go\"&gt;Github
        repo&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ggo2d3y/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1608617308.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 2}}, {"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 2, "removal_reason": null, "link_id": "t3_k4e4lm",
        "author_flair_template_id": null, "likes": null, "replies": {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ggxmi45",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1608845700.0, "send_replies": true,
        "parent_id": "t1_ggfhsdf", "score": 2, "author_fullname": "t2_60niu", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "&gt; First time attempting AoC!\n\nWelcome!  We hope you have fun this year!",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_ggxmi45", "is_submitter": true, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;First
        time attempting AoC!&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Welcome!  We
        hope you have fun this year!&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": "moderator", "associated_award": null, "stickied":
        false, "author_premium": false, "can_gild": false, "link_id": "t3_k4e4lm",
        "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ggxmi45/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1608845700.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "ggfhsdf", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        "DELETED", "no_follow": true, "author": "[deleted]", "can_mod_post": false,
        "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2, "approved_by":
        null, "report_reasons": null, "all_awardings": [], "subreddit_id": "t5_3b3wa",
        "body": "[deleted]", "edited": 1645634945.0, "downs": 0, "author_flair_css_class":
        null, "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ggfhsdf/",
        "num_reports": null, "locked": false, "name": "t1_ggfhsdf", "created": 1608429150.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1608429150.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "ggeegty", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "KingCravenGamer", "can_mod_post": false,
        "created_utc": 1608411957.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 2, "author_fullname": "t2_yj84f", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "**Python 3**\n\n241/
        98\n\nMy first ever top 100 placement! Obviously got a bit lucky with me refreshing
        reddit to see when it was back up and I had a third for loop already ready
        haaha\n\n[Solution](https://topaz.github.io/paste/#XQAAAQBIAgAAAAAAAAAzHIoib6pMX4iobf0sl0vv5hTOnitXABQtzHo3CfV9RX4F04ZZ6AjEKpI9j6EXk7sNfr8sMrUXLhuzmUMxL2MRS03XTwqcoBy2LXZUGSXgYKsulh7x0lVHsN81/7ZTPIXJc5vbtEkXzEx47DA3a8gyY5dU/UWnAq2ASpZI8oUGbEErgY//rRFRyd4uwQRCLXj+0wsVoZSOGLSlXQXXhEUmjTRwgmImXygiEYaI6oJ3Eiq9ifIAhTiyevASH8lrF3doSVFzjP1on3+Fn7QGBiV1GKSrd/AvVBvqbmNlyINRCKgntaVf/2cgIwA=)",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_ggeegty", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python
        3&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;241/ 98&lt;/p&gt;\n\n&lt;p&gt;My first
        ever top 100 placement! Obviously got a bit lucky with me refreshing reddit
        to see when it was back up and I had a third for loop already ready haaha&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://topaz.github.io/paste/#XQAAAQBIAgAAAAAAAAAzHIoib6pMX4iobf0sl0vv5hTOnitXABQtzHo3CfV9RX4F04ZZ6AjEKpI9j6EXk7sNfr8sMrUXLhuzmUMxL2MRS03XTwqcoBy2LXZUGSXgYKsulh7x0lVHsN81/7ZTPIXJc5vbtEkXzEx47DA3a8gyY5dU/UWnAq2ASpZI8oUGbEErgY//rRFRyd4uwQRCLXj+0wsVoZSOGLSlXQXXhEUmjTRwgmImXygiEYaI6oJ3Eiq9ifIAhTiyevASH8lrF3doSVFzjP1on3+Fn7QGBiV1GKSrd/AvVBvqbmNlyINRCKgntaVf/2cgIwA=\"&gt;Solution&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ggeegty/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1608411957.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gg31si3", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "MischaDy", "can_mod_post": false, "created_utc":
        1608161491.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 3,
        "author_fullname": "t2_gybvs", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Python 3 - [Part 1](https://github.com/MischaDy/PyAdventOfCode2020/blob/main/day%2001/day01_part1.py),
        [Part 2](https://github.com/MischaDy/PyAdventOfCode2020/blob/main/day%2001/day01_part2.py)\n\nPosting
        late here, but better this than... :)", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_gg31si3", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python 3 - &lt;a href=\"https://github.com/MischaDy/PyAdventOfCode2020/blob/main/day%2001/day01_part1.py\"&gt;Part
        1&lt;/a&gt;, &lt;a href=\"https://github.com/MischaDy/PyAdventOfCode2020/blob/main/day%2001/day01_part2.py\"&gt;Part
        2&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Posting late here, but better this than...
        :)&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason": null,
        "distinguished": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gg31si3/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1608161491.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gfwlq38", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "danielcs88", "can_mod_post": false, "created_utc":
        1608022023.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 3,
        "author_fullname": "t2_d37wp", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "# Python\n\nLeveraging `itertools and Pandas`\n\n##
        Part 1\n\n    # %%\n    from itertools import combinations\n    \n    import
        numpy as np\n    import pandas as pd\n    \n    nums = list(pd.read_csv(\"input.txt\",
        header=None, names=[\"nums\"])[\"nums\"])\n    \n    # %%\n    combs = list(combinations(nums,
        2))\n    \n    # %%\n    sol = [c for c in combs if sum(c) == 2020]\n    \n    #
        %%\n    print(sol)\n    \n    # %%\n    np.prod(sol)\n\n## Part 2\n\n    #
        %%\n    combs = list(combinations(nums, 3))\n    \n    # %%\n    sol = [c
        for c in combs if sum(c) == 2020]\n    \n    # %%\n    print(sol)\n    \n    #
        %%\n    np.prod(sol)", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gfwlq38", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Python&lt;/h1&gt;\n\n&lt;p&gt;Leveraging
        &lt;code&gt;itertools and Pandas&lt;/code&gt;&lt;/p&gt;\n\n&lt;h2&gt;Part
        1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;# %%\nfrom itertools import combinations\n\nimport
        numpy as np\nimport pandas as pd\n\nnums = list(pd.read_csv(&amp;quot;input.txt&amp;quot;,
        header=None, names=[&amp;quot;nums&amp;quot;])[&amp;quot;nums&amp;quot;])\n\n#
        %%\ncombs = list(combinations(nums, 2))\n\n# %%\nsol = [c for c in combs if
        sum(c) == 2020]\n\n# %%\nprint(sol)\n\n# %%\nnp.prod(sol)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Part
        2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;# %%\ncombs = list(combinations(nums,
        3))\n\n# %%\nsol = [c for c in combs if sum(c) == 2020]\n\n# %%\nprint(sol)\n\n#
        %%\nnp.prod(sol)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gfwlq38/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1608022023.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gfvfe8c", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "willkill07", "can_mod_post": false, "created_utc":
        1607994313.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 3,
        "author_fullname": "t2_7j0ca", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "# x86 Assembly\n\nRecursive backtracking
        algorithm originally written in C++, then converted to C, then converted to
        assembly.\n\n[paste](https://topaz.github.io/paste/#XQAAAQBjEQAAAAAAAAAQYLToZTvxRtaCUfUzv8w6A0dECvpnqLodzUZZKwMhjR+DyI/5VjTaI7G0GS4sQAtt0po3bxUVOBHbQ13iR24PIbgpJdbIDyuOF0XdGgP21yp+c409Y6fTd5ZnVE+obVkhONIFGu2Fk3wF7tETCz4QosNk4SiSG9Tjhbgqa+qeszk2sQ14GdazVJJr8/kQrhJt7ZinGBG4DOnqSD9V/7BUmWr13ZKW4NRUiVXTML32kUCDY6hMbLPmNkg7hfhtmYkGcIcAx/kv7kjewv6rSJJPIagLzrdb2chN3GQj3XkiV2uOcyw/ezj94RG8B13ukAtj80Ttsvyej2jMMisWUkc6K06ywGFbK4PMu80dJmfzzjdS3R7f97UJyGqvKbEhrG2u0B4+3htLvPSC7tLO8Z2LEJEeqZfgF2Aj8UseVWR6obgNuyFS3SLVbJHZ5mrwFHlmk3KIlto9Yd1s2Zk6iHo50tx8hY3iywME70fsHhoEo3csgqbZr8vSMqmYYDDBaHls6mR9/DkUtcHpAKab0Tf/k8L19W0Lnr/2TNkNK6qA3zqwsLWAyuOSVRgZo9/s2gMb1bS2TzZNiGhd+nBhbW512HkZVyXdZ4jTWNKIChSdSSwhw1LV74L4M85o+vcZOvGaqNjdx4zcmj2DvOU4zGLx2li2ijmg6gc9ozxMLyZZavBLn+RPwY6yQlpA5Nz3NB8GUMljae+O8+ER5OQM6GYcg+5DSENikDIZjETbefR2dnd71XSaIygvjDASUlPI8tIkTnrgidiCYBGDa12WpEXAN7Vl+WPmt0+f0+xR9epyZ38XXuXd0EWWQ12py1jyySgkQSrH5xxCSNKO6MGskREZE+xPqK0JXTAV8VVkXXinJJ74o7vZGwgRvwW+GTspj936vzJsD18FftCDSDbA9JNu47gWu+Q2RQGr25IVJ/SUjNpthMRmuRTNqEk+2MUx6sfUI9+cuE+KGol2D2oqLI99UnwzrSqrcLZut/PqUZTukQ22awGXE7rL3bUzS97akqMuwFLba1BWlSiK4gxW0hmEp+VWnSrBxj48cOzpPX75iNfoPt/WKO7w/ZFLUasnc+AcTScOfUyzYpvlyHVQpmHvWXjURPSTr0hch9Vw1XT7CDaUu7ry8NIQEwwFlj3qxbZU4lfci5YCEKyv32UhJM9/uoStSUS2G1JOZUZU+gghrEj75dXLSHWKiY7RAUBqHJftdXAH2MLiOwYA7INe3EFyLumLAP2dR136C7NgHiozx7k+mlO5T4XknWlI7Ld3Tsj+KYC6+Eh1ovNJODMixpiXGsagkNe/Ue5MZJt2/5AsbQfvc85rI9mfzNLdKY3cVG896v1AEU5GFtmIhDh80fK852WlRCxjDZGLIIijrqLWANclQU8EIK2NEO5Coze4viwqhOSXB8I6RRI8LralUud+mXvhu1Iq/4omLGI=)",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_gfvfe8c", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;x86
        Assembly&lt;/h1&gt;\n\n&lt;p&gt;Recursive backtracking algorithm originally
        written in C++, then converted to C, then converted to assembly.&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://topaz.github.io/paste/#XQAAAQBjEQAAAAAAAAAQYLToZTvxRtaCUfUzv8w6A0dECvpnqLodzUZZKwMhjR+DyI/5VjTaI7G0GS4sQAtt0po3bxUVOBHbQ13iR24PIbgpJdbIDyuOF0XdGgP21yp+c409Y6fTd5ZnVE+obVkhONIFGu2Fk3wF7tETCz4QosNk4SiSG9Tjhbgqa+qeszk2sQ14GdazVJJr8/kQrhJt7ZinGBG4DOnqSD9V/7BUmWr13ZKW4NRUiVXTML32kUCDY6hMbLPmNkg7hfhtmYkGcIcAx/kv7kjewv6rSJJPIagLzrdb2chN3GQj3XkiV2uOcyw/ezj94RG8B13ukAtj80Ttsvyej2jMMisWUkc6K06ywGFbK4PMu80dJmfzzjdS3R7f97UJyGqvKbEhrG2u0B4+3htLvPSC7tLO8Z2LEJEeqZfgF2Aj8UseVWR6obgNuyFS3SLVbJHZ5mrwFHlmk3KIlto9Yd1s2Zk6iHo50tx8hY3iywME70fsHhoEo3csgqbZr8vSMqmYYDDBaHls6mR9/DkUtcHpAKab0Tf/k8L19W0Lnr/2TNkNK6qA3zqwsLWAyuOSVRgZo9/s2gMb1bS2TzZNiGhd+nBhbW512HkZVyXdZ4jTWNKIChSdSSwhw1LV74L4M85o+vcZOvGaqNjdx4zcmj2DvOU4zGLx2li2ijmg6gc9ozxMLyZZavBLn+RPwY6yQlpA5Nz3NB8GUMljae+O8+ER5OQM6GYcg+5DSENikDIZjETbefR2dnd71XSaIygvjDASUlPI8tIkTnrgidiCYBGDa12WpEXAN7Vl+WPmt0+f0+xR9epyZ38XXuXd0EWWQ12py1jyySgkQSrH5xxCSNKO6MGskREZE+xPqK0JXTAV8VVkXXinJJ74o7vZGwgRvwW+GTspj936vzJsD18FftCDSDbA9JNu47gWu+Q2RQGr25IVJ/SUjNpthMRmuRTNqEk+2MUx6sfUI9+cuE+KGol2D2oqLI99UnwzrSqrcLZut/PqUZTukQ22awGXE7rL3bUzS97akqMuwFLba1BWlSiK4gxW0hmEp+VWnSrBxj48cOzpPX75iNfoPt/WKO7w/ZFLUasnc+AcTScOfUyzYpvlyHVQpmHvWXjURPSTr0hch9Vw1XT7CDaUu7ry8NIQEwwFlj3qxbZU4lfci5YCEKyv32UhJM9/uoStSUS2G1JOZUZU+gghrEj75dXLSHWKiY7RAUBqHJftdXAH2MLiOwYA7INe3EFyLumLAP2dR136C7NgHiozx7k+mlO5T4XknWlI7Ld3Tsj+KYC6+Eh1ovNJODMixpiXGsagkNe/Ue5MZJt2/5AsbQfvc85rI9mfzNLdKY3cVG896v1AEU5GFtmIhDh80fK852WlRCxjDZGLIIijrqLWANclQU8EIK2NEO5Coze4viwqhOSXB8I6RRI8LralUud+mXvhu1Iq/4omLGI=\"&gt;paste&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gfvfe8c/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607994313.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gfvb817",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "orcus",
        "can_mod_post": false, "created_utc": 1607991992.0, "send_replies": true,
        "parent_id": "t1_gfti340", "score": 1, "author_fullname": "t2_468wg", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "    #!/usr/bin/env tclsh\n\nI am saddened. I expected Bash from you. ;(",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_gfvb817", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env
        tclsh\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I am saddened. I expected Bash
        from you. ;(&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_k4e4lm", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gfvb817/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1607991992.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "gfti340", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "greycat70",
        "can_mod_post": false, "created_utc": 1607960035.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_il9cr", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "**Tcl**\n\n[part
        1](http://wooledge.org/~greg/advent/2020/1a), [part 2](http://wooledge.org/~greg/advent/2020/1b)\n\nSimple
        brute force.  Nothing fancy at all.  Welcome to day 1. ;-)", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_gfti340",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Tcl&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"http://wooledge.org/%7Egreg/advent/2020/1a\"&gt;part 1&lt;/a&gt;, &lt;a
        href=\"http://wooledge.org/%7Egreg/advent/2020/1b\"&gt;part 2&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Simple
        brute force.  Nothing fancy at all.  Welcome to day 1. ;-)&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gfti340/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607960035.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gfrtxlg", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "CrAzYmEtAlHeAd1", "can_mod_post": false,
        "created_utc": 1607914235.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 2, "author_fullname": "t2_8ctzo", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "# Java\n\nThis is
        my first submission to any sort of code challenge!  I hope participate more
        in the Advent of Code.  \n\n    import java.io.BufferedReader;\n    import
        java.io.FileReader;\n    import java.util.ArrayList;\n    import java.util.Arrays;\n    import
        java.util.List;\n    \n    public class mainCode {\n    \n    \tpublic static
        void main(String[] args) {\n    \t\t   List&lt;List&lt;String&gt;&gt; expenses
        = importExpenses();\n       \t\tcheckEntries(expenses);\t\t\n    \t}\n    \t\n    \tpublic
        static List&lt;List&lt;String&gt;&gt; importExpenses() {\n       \t\tList&lt;List&lt;String&gt;&gt;
        expenses = new ArrayList&lt;&gt;();\n    \t\t   try (BufferedReader br = new
        BufferedReader(new FileReader(\"expenses.csv\"))) {\n    \t\t\t      String
        line;\n          \t\t\twhile ((line = br.readLine()) != null) {\n             \t\t\t\tString[]
        values = line.split(\",\");\n    \t\t\t\t         expenses.add(Arrays.asList(values));\n          \t\t\t}\n       \t\t}\n       \t\tcatch(Exception
        e) {\n    \t\t\t\n    \t\t}\n    \t\t\n    \t\t\n    \t\treturn expenses;\n    \t}\n    \t\n    \tpublic
        static void checkEntries(List&lt;List&lt;String&gt;&gt; expenseList) {\n       \t\tList&lt;List&lt;String&gt;&gt;
        expenses = expenseList;\n       \t\tList&lt;Integer&gt; dupes = new ArrayList&lt;Integer&gt;();\n       \t\tfor
        (int i = 0; i &lt; expenses.size(); i++) {\n          \t\t\tint x = Integer.parseInt(expenses.get(i).get(0));\t\t\t\n          \t\t\tfor
        (int j = 0; j &lt; expenses.size(); j++) {\n             \t\t\t\tif (i !=
        j) {\n    \t\t\t\t\t            int y = Integer.parseInt(expenses.get(j).get(0));\n                \t\t\t\t\tint
        sum = x + y;\n                \t\t\t\t\tif (sum == 2020) {\n                   \t\t\t\t\t\tif
        (!dupes.contains(y)) {\n    \t\t\t\t\t\t\t                  System.out.println(\"Entry
        \" + (i + 1) + \", \" + x + \" and entry \" + (j + 1) + \" equal 2020 and
        multiply to equal: \" + (x * y));\n                      \t\t\t\t\t\t\tdupes.add(x);\n                      \t\t\t\t\t\t}\n                   \t\t\t\t\t}\n               \t\t\t\t}
        \n             \t\t\t}\n          \t\t}\n       \t}\n    }", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_gfrtxlg",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Java&lt;/h1&gt;\n\n&lt;p&gt;This
        is my first submission to any sort of code challenge!  I hope participate
        more in the Advent of Code.  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import java.io.BufferedReader;\nimport
        java.io.FileReader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport
        java.util.List;\n\npublic class mainCode {\n\n    public static void main(String[]
        args) {\n           List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; expenses
        = importExpenses();\n        checkEntries(expenses);     \n    }\n\n    public
        static List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; importExpenses() {\n        List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;
        expenses = new ArrayList&amp;lt;&amp;gt;();\n           try (BufferedReader
        br = new BufferedReader(new FileReader(&amp;quot;expenses.csv&amp;quot;)))
        {\n                  String line;\n                while ((line = br.readLine())
        != null) {\n                        String[] values = line.split(&amp;quot;,&amp;quot;);\n                         expenses.add(Arrays.asList(values));\n                }\n        }\n        catch(Exception
        e) {\n\n        }\n\n\n        return expenses;\n    }\n\n    public static
        void checkEntries(List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; expenseList)
        {\n        List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; expenses = expenseList;\n        List&amp;lt;Integer&amp;gt;
        dupes = new ArrayList&amp;lt;Integer&amp;gt;();\n        for (int i = 0; i
        &amp;lt; expenses.size(); i++) {\n                int x = Integer.parseInt(expenses.get(i).get(0));           \n                for
        (int j = 0; j &amp;lt; expenses.size(); j++) {\n                        if
        (i != j) {\n                                int y = Integer.parseInt(expenses.get(j).get(0));\n                                int
        sum = x + y;\n                                if (sum == 2020) {\n                                    if
        (!dupes.contains(y)) {\n                                              System.out.println(&amp;quot;Entry
        &amp;quot; + (i + 1) + &amp;quot;, &amp;quot; + x + &amp;quot; and entry &amp;quot;
        + (j + 1) + &amp;quot; equal 2020 and multiply to equal: &amp;quot; + (x *
        y));\n                                            dupes.add(x);\n                                        }\n                                }\n                        }
        \n                    }\n            }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gfrtxlg/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607914235.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gfl6du9", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "i_have_no_biscuits", "can_mod_post": false,
        "created_utc": 1607808124.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 2, "author_fullname": "t2_qbkju5j", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "GWBASIC\n\nHaving
        picked up ''Advent of GWBASIC'' with Day 6, I''m filling in the gaps of all
        the earlier days. Day 1 is a nice 10 line solution for both parts:\n\n    10
        DIM N(2020): OPEN \"I\",1,\"data01.txt\"\n    20 INPUT#1,I%: N(I%)=-1: IF
        NOT EOF(1) GOTO 20\n    30 FOR I=1 TO 2020: IF N(I) AND N(2020-I) GOTO 50\n    40
        NEXT I\n    50 N#=I*(2020-I): PRINT \"Part 1:\",N#\n    60 FOR I=1 TO 2020:
        IF NOT N(I) GOTO 90\n    70 FOR J=I+1 TO 2020-I: IF N(J) AND N(2020-I-J) GOTO
        100\n    80 NEXT J\n    90 NEXT I\n    100 N#=I*J*(2020-I-J): PRINT \"Part
        2:\",N#\n\nNotice that False in GWBASIC is 0, and True in GWBASIC is -1. If
        you use 1 for True, then you''ll run into problems with logical operators
        in IF statements, as NOT 1 is -2 (it''s flipping the bits and interpreting
        the result as a signed integer). Also note that N is an array of 2020 booleans,
        while N# is a double that I use to store the result of the calculation.",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_gfl6du9", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;GWBASIC&lt;/p&gt;\n\n&lt;p&gt;Having
        picked up &amp;#39;Advent of GWBASIC&amp;#39; with Day 6, I&amp;#39;m filling
        in the gaps of all the earlier days. Day 1 is a nice 10 line solution for
        both parts:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;10 DIM N(2020): OPEN &amp;quot;I&amp;quot;,1,&amp;quot;data01.txt&amp;quot;\n20
        INPUT#1,I%: N(I%)=-1: IF NOT EOF(1) GOTO 20\n30 FOR I=1 TO 2020: IF N(I) AND
        N(2020-I) GOTO 50\n40 NEXT I\n50 N#=I*(2020-I): PRINT &amp;quot;Part 1:&amp;quot;,N#\n60
        FOR I=1 TO 2020: IF NOT N(I) GOTO 90\n70 FOR J=I+1 TO 2020-I: IF N(J) AND
        N(2020-I-J) GOTO 100\n80 NEXT J\n90 NEXT I\n100 N#=I*J*(2020-I-J): PRINT &amp;quot;Part
        2:&amp;quot;,N#\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Notice that False in
        GWBASIC is 0, and True in GWBASIC is -1. If you use 1 for True, then you&amp;#39;ll
        run into problems with logical operators in IF statements, as NOT 1 is -2
        (it&amp;#39;s flipping the bits and interpreting the result as a signed integer).
        Also note that N is an array of 2020 booleans, while N# is a double that I
        use to store the result of the calculation.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gfl6du9/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607808124.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gimgaux", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "the_t_block",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_gim5ptl", "score":
        2, "author_fullname": "t2_btysc", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Thanks! Always nice to hear
        that someone finds it useful.\n\nAs for feedback, if you don''t feel like
        digging up the corresponding post in megathread for the day, you could always
        just DM me.\n\nThanks for the tip on (/=) as well... much more concise, and
        seems so obvious in hindsight. I''ll definitely remember that going forward
        =)", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_gimgaux", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks!
        Always nice to hear that someone finds it useful.&lt;/p&gt;\n\n&lt;p&gt;As
        for feedback, if you don&amp;#39;t feel like digging up the corresponding
        post in megathread for the day, you could always just DM me.&lt;/p&gt;\n\n&lt;p&gt;Thanks
        for the tip on (/=) as well... much more concise, and seems so obvious in
        hindsight. I&amp;#39;ll definitely remember that going forward =)&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gimgaux/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1610165942.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1610165942.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gim5ptl", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "mihassan", "can_mod_post": false, "created_utc":
        1610160201.0, "send_replies": true, "parent_id": "t1_gfkjo1u", "score": 1,
        "author_fullname": "t2_eaxy8rp", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "This is awesome. I use Haskell
        to complete AOC as well and I am going through your solutions to see if I
        missed something. Thanks for the extra effort of explaining the a algorithm
        as well.\n\nOne question though, is there any way to leave feedback on individual
        solutions? For example, in day 2 solution you asked whether you need to implement
        xor or not. In my choice I used (/=) as a substitute for xor. For Boolean
        they are equivalent.", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gim5ptl", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This
        is awesome. I use Haskell to complete AOC as well and I am going through your
        solutions to see if I missed something. Thanks for the extra effort of explaining
        the a algorithm as well.&lt;/p&gt;\n\n&lt;p&gt;One question though, is there
        any way to leave feedback on individual solutions? For example, in day 2 solution
        you asked whether you need to implement xor or not. In my choice I used (/=)
        as a substitute for xor. For Boolean they are equivalent.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gim5ptl/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1610160201.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gfkjo1u", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "the_t_block", "can_mod_post": false, "created_utc":
        1607800703.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 3,
        "author_fullname": "t2_btysc", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Haskell:\n\n[http://www.michaelcw.com/programming/2020/12/05/aoc-2020-d1.html](http://www.michaelcw.com/programming/2020/12/05/aoc-2020-d1.html)\n\nThis
        is a series of blog posts with explanations written by a Haskell beginner,
        for a Haskell beginner audience.", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_gfkjo1u", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Haskell:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://www.michaelcw.com/programming/2020/12/05/aoc-2020-d1.html\"&gt;http://www.michaelcw.com/programming/2020/12/05/aoc-2020-d1.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This
        is a series of blog posts with explanations written by a Haskell beginner,
        for a Haskell beginner audience.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gfkjo1u/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607800703.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gfjw8fz", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "popodiloco", "can_mod_post": false, "created_utc":
        1607793146.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 3,
        "author_fullname": "t2_9am92oi8", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "#Scratch\nhello my name is Luca and im 10
        years old. My father was doing aoe. He liked it and does it every day. I saw
        the puzzle from day 1 and i think: maybe i can do that in Scratch. So here
        is the answer of day 1.\npart 1: https://scratch.mit.edu/projects/460138367/\npart
        2: https://scratch.mit.edu/projects/461104926/", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_gfjw8fz", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Scratch&lt;/h1&gt;\n\n&lt;p&gt;hello
        my name is Luca and im 10 years old. My father was doing aoe. He liked it
        and does it every day. I saw the puzzle from day 1 and i think: maybe i can
        do that in Scratch. So here is the answer of day 1.\npart 1: &lt;a href=\"https://scratch.mit.edu/projects/460138367/\"&gt;https://scratch.mit.edu/projects/460138367/&lt;/a&gt;\npart
        2: &lt;a href=\"https://scratch.mit.edu/projects/461104926/\"&gt;https://scratch.mit.edu/projects/461104926/&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gfjw8fz/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607793146.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gflbsdt", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Urgazhi",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_gfl7cx7", "score":
        1, "author_fullname": "t2_cc3e2", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "I plan on doing the other
        days as well. Started day 2, I''ll work on it more Monday. Had the logic down,
        just needed to work on the variable length inputs.", "edited": false, "top_awarded_type":
        null, "downs": 0, "author_flair_css_class": null, "name": "t1_gflbsdt", "is_submitter":
        false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I plan on doing the
        other days as well. Started day 2, I&amp;#39;ll work on it more Monday. Had
        the logic down, just needed to work on the variable length inputs.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gflbsdt/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607809868.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1607809868.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gfl7cx7", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "i_have_no_biscuits", "can_mod_post": false,
        "created_utc": 1607808440.0, "send_replies": true, "parent_id": "t1_gfetkat",
        "score": 2, "author_fullname": "t2_qbkju5j", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "I am full of admiration
        (and a little horror).", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gfl7cx7", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        am full of admiration (and a little horror).&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gfl7cx7/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607808440.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gfetkat", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Urgazhi", "can_mod_post": false, "created_utc":
        1607707518.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 4,
        "author_fullname": "t2_cc3e2", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "a bit late...\n\nMy solution in COBOL\n\n[ADVENT2020_1](https://topaz.github.io/paste/#XQAAAQAyCgAAAAAAAAAQHApHERdbz2EKvvQ/U122OC8YStIPEJBKnG8uM+BkuQsdOLAMAVF7ljj4C5eRdZzUex+nShBJCvaqTMoKTIEzkpMiLdFA4VwZmqOzROybaw8K+OhX7L/Vbms9B+RcIzNWo8p+D3WMpRMqQvJSYsUvmWyRmrc5kQKSpfiqIMzpJGZ5oZID5rwgcWu4ZX/rFFWW4xdbJdP0wjPRt1Dyi8CNwqK26ZZSljmKZGsA41kiC5PhmK6Si6MMUanDuZ6ipzLqfE3iXUKlzdql6mJT2qqJ5PWuFhg/XyYpvogvGglaZOiqyVT9xdcpQFirJsOcYIoKS93kM83bq3jy7baL9CpBlo9oYxtb8nlWuT6vgLgout5zO+yQ6k5M984s0hDNfEIThINz1yaTy8Ip5ECMtsigsTC/0Vn2r9/AALEZN6qYGfEPIhr/62NnAaqLgd0eqXb78ayIrZ3pDYlSAFShyWUHMeMtDwrI3oiuWhN4CslizElI10mD28f10+rDNCiM/tnmUhLKU76iAaIsCs8Tn5MyikF/Eg9Yl+owCAKvArFXZzHBAAvG2OaomOEcjWl8axUnt8nbtqtbd093blLsltWV74oopDMe6eLF6e0Sr3VpwnmxhQAfe1LnYSchUjhrdYxz3Gzrs+xhq1N/jM3W8UBvzzaWR8a0G9mWUBD7ZetAv0SCpIG5YSLPuP1euJzXTJjatUfpYaXN8a1eKq1Ov/dA95elT3nIhNsV97aT/q/QSLYTNEmoNfeXAzZo7VFRJIpSxkA6/gVnpLbqZ9MHW8HGidMTdhCMYv53ks5jOx+txnUcJtNIdd4QT3r5zb08WWv1l1I+Zh6B1cq3eefAT3H69Jh9BooT3vMVXqhKOWV1x6NBPPe5WNt2WepjZXShQehaRVc2rqCEhEx4a5kJEc9LEWQAMMBHocXKEN9rMiku1DzTJKoJFy6JmjMUDAwGPyakLf1p1uQV5OTRLX0ZdxX2/HKg2gY89Nk6DoYchbpYYizmFEA/I/Gl55jbqC9P78H/k5h+yTo6n2h2iNxA6EJMiY2z6ylCJx4nnwFFwNsO08gpbjhjLgS1cgaO+prUabggvp3HsEP9I6i/V8z8pwS5T44KrSrkIigVQfkNWXmZbEmuZwmUvud2bHmmncRutAce++ujfQPsJ8ZMYa22VS+0S1xok1DL2rRiQcg6dDvVS/a1jqAo8lTy4rad6eKN7dvGMuYGmYlmmowqIZLeAQhHZe3U+CcH/zR5kU5gXgmUj8pSTqqL3uPwJhoV+bIDDlFn/egSSeFwJJXFuHX91Ez2)",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_gfetkat", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;a
        bit late...&lt;/p&gt;\n\n&lt;p&gt;My solution in COBOL&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://topaz.github.io/paste/#XQAAAQAyCgAAAAAAAAAQHApHERdbz2EKvvQ/U122OC8YStIPEJBKnG8uM+BkuQsdOLAMAVF7ljj4C5eRdZzUex+nShBJCvaqTMoKTIEzkpMiLdFA4VwZmqOzROybaw8K+OhX7L/Vbms9B+RcIzNWo8p+D3WMpRMqQvJSYsUvmWyRmrc5kQKSpfiqIMzpJGZ5oZID5rwgcWu4ZX/rFFWW4xdbJdP0wjPRt1Dyi8CNwqK26ZZSljmKZGsA41kiC5PhmK6Si6MMUanDuZ6ipzLqfE3iXUKlzdql6mJT2qqJ5PWuFhg/XyYpvogvGglaZOiqyVT9xdcpQFirJsOcYIoKS93kM83bq3jy7baL9CpBlo9oYxtb8nlWuT6vgLgout5zO+yQ6k5M984s0hDNfEIThINz1yaTy8Ip5ECMtsigsTC/0Vn2r9/AALEZN6qYGfEPIhr/62NnAaqLgd0eqXb78ayIrZ3pDYlSAFShyWUHMeMtDwrI3oiuWhN4CslizElI10mD28f10+rDNCiM/tnmUhLKU76iAaIsCs8Tn5MyikF/Eg9Yl+owCAKvArFXZzHBAAvG2OaomOEcjWl8axUnt8nbtqtbd093blLsltWV74oopDMe6eLF6e0Sr3VpwnmxhQAfe1LnYSchUjhrdYxz3Gzrs+xhq1N/jM3W8UBvzzaWR8a0G9mWUBD7ZetAv0SCpIG5YSLPuP1euJzXTJjatUfpYaXN8a1eKq1Ov/dA95elT3nIhNsV97aT/q/QSLYTNEmoNfeXAzZo7VFRJIpSxkA6/gVnpLbqZ9MHW8HGidMTdhCMYv53ks5jOx+txnUcJtNIdd4QT3r5zb08WWv1l1I+Zh6B1cq3eefAT3H69Jh9BooT3vMVXqhKOWV1x6NBPPe5WNt2WepjZXShQehaRVc2rqCEhEx4a5kJEc9LEWQAMMBHocXKEN9rMiku1DzTJKoJFy6JmjMUDAwGPyakLf1p1uQV5OTRLX0ZdxX2/HKg2gY89Nk6DoYchbpYYizmFEA/I/Gl55jbqC9P78H/k5h+yTo6n2h2iNxA6EJMiY2z6ylCJx4nnwFFwNsO08gpbjhjLgS1cgaO+prUabggvp3HsEP9I6i/V8z8pwS5T44KrSrkIigVQfkNWXmZbEmuZwmUvud2bHmmncRutAce++ujfQPsJ8ZMYa22VS+0S1xok1DL2rRiQcg6dDvVS/a1jqAo8lTy4rad6eKN7dvGMuYGmYlmmowqIZLeAQhHZe3U+CcH/zR5kU5gXgmUj8pSTqqL3uPwJhoV+bIDDlFn/egSSeFwJJXFuHX91Ez2\"&gt;ADVENT2020_1&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gfetkat/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607707518.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gfducqc", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "damien_pirsy", "can_mod_post": false,
        "created_utc": 1607688014.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 2, "author_fullname": "t2_kl4u8", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "My solution in PHP\n\n[https://github.com/DamienPirsy/AoC\\_2020/blob/master/01/day01.php](https://github.com/DamienPirsy/AoC_2020/blob/master/01/day01.php)\n\nNot
        much time to dedicate on these puzzles so I''m gonna go for a no-fancy and
        plain approach.", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gfducqc", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My
        solution in PHP&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/DamienPirsy/AoC_2020/blob/master/01/day01.php\"&gt;https://github.com/DamienPirsy/AoC_2020/blob/master/01/day01.php&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Not
        much time to dedicate on these puzzles so I&amp;#39;m gonna go for a no-fancy
        and plain approach.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gfducqc/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1607688014.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gf9o7ne",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "pngipngi",
        "can_mod_post": false, "created_utc": 1607600062.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_jdv18q", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "My
        solution in Excel:  [https://github.com/pengi/advent\\_of\\_code/blob/master/2020/day1.xlsx](https://github.com/pengi/advent_of_code/blob/master/2020/day1.xlsx)\n\nAnd
        a few days more, the twitch VOD will be available on: [https://www.twitch.tv/videos/821917317](https://www.twitch.tv/videos/821917317)\n\nLater
        it might be added to my youtube channel for coding videos:\n\n[https://www.youtube.com/channel/UCXX6tDQ8BJjS2hhekK9XJyg](https://www.youtube.com/channel/UCXX6tDQ8BJjS2hhekK9XJyg)",
        "edited": 1607600715.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gf9o7ne", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My
        solution in Excel:  &lt;a href=\"https://github.com/pengi/advent_of_code/blob/master/2020/day1.xlsx\"&gt;https://github.com/pengi/advent_of_code/blob/master/2020/day1.xlsx&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;And
        a few days more, the twitch VOD will be available on: &lt;a href=\"https://www.twitch.tv/videos/821917317\"&gt;https://www.twitch.tv/videos/821917317&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Later
        it might be added to my youtube channel for coding videos:&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://www.youtube.com/channel/UCXX6tDQ8BJjS2hhekK9XJyg\"&gt;https://www.youtube.com/channel/UCXX6tDQ8BJjS2hhekK9XJyg&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gf9o7ne/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607600062.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gg3imd6",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "SESteve",
        "can_mod_post": false, "created_utc": 1608170582.0, "send_replies": true,
        "parent_id": "t1_gf6gsr3", "score": 1, "author_fullname": "t2_27pd8fn", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Beautiful. In the mid-80s my coworker wrote a MIDI Voice Librarian for Apple
        \\]\\[ and Commodore 64 in 6502 assembly. I wrote it for DOS in Forth.", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_gg3imd6",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Beautiful. In the mid-80s
        my coworker wrote a MIDI Voice Librarian for Apple ][ and Commodore 64 in
        6502 assembly. I wrote it for DOS in Forth.&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gg3imd6/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1608170582.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gf6gsr3", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "Vijfhoek", "can_mod_post": false, "created_utc":
        1607530526.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 3,
        "author_fullname": "t2_6xyj3", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "# Commodore 64 (6502 Assembly)\n\nI''ve finished
        part 2 since my Upping The Ante post :D\n\nParsing the input takes 176 ms
        (including sticking it into a binary search tree), part 1 takes 69 ms ^^^nice
        , and part 2 takes 7222 ms, all according to VICE''s built-in timer.\n\nCould
        probably knock a lot of time off of part 2. Maybe. Sometime in the future.\n\n[Puzzle
        solution](https://github.com/sijmn/aoc2020/blob/master/c64/day01.asm) | [Project
        directory](https://github.com/sijmn/aoc2020/blob/master/c64) | [Picture](https://i.imgur.com/G7Yzmc8.jpg)",
        "edited": 1607530708.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gf6gsr3", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Commodore
        64 (6502 Assembly)&lt;/h1&gt;\n\n&lt;p&gt;I&amp;#39;ve finished part 2 since
        my Upping The Ante post :D&lt;/p&gt;\n\n&lt;p&gt;Parsing the input takes 176
        ms (including sticking it into a binary search tree), part 1 takes 69 ms &lt;sup&gt;&lt;sup&gt;&lt;sup&gt;nice&lt;/sup&gt;&lt;/sup&gt;&lt;/sup&gt;
        , and part 2 takes 7222 ms, all according to VICE&amp;#39;s built-in timer.&lt;/p&gt;\n\n&lt;p&gt;Could
        probably knock a lot of time off of part 2. Maybe. Sometime in the future.&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/sijmn/aoc2020/blob/master/c64/day01.asm\"&gt;Puzzle
        solution&lt;/a&gt; | &lt;a href=\"https://github.com/sijmn/aoc2020/blob/master/c64\"&gt;Project
        directory&lt;/a&gt; | &lt;a href=\"https://i.imgur.com/G7Yzmc8.jpg\"&gt;Picture&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gf6gsr3/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607530526.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gf0t0tr",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1607401262.0, "send_replies": true,
        "parent_id": "t1_gf0si2r", "score": 1, "author_fullname": "t2_60niu", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Your code is hard to read on old.reddit.  Please edit it as per our posting
        guidelines in the wiki: [How do I format code?](https://www.reddit.com/r/adventofcode/wiki/index#wiki_how_do_i_format_code.3F)",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_gf0t0tr", "is_submitter": true, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Your
        code is hard to read on old.reddit.  Please edit it as per our posting guidelines
        in the wiki: &lt;a href=\"https://www.reddit.com/r/adventofcode/wiki/index#wiki_how_do_i_format_code.3F\"&gt;How
        do I format code?&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": "moderator", "associated_award": null, "stickied":
        false, "author_premium": false, "can_gild": false, "link_id": "t3_k4e4lm",
        "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gf0t0tr/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607401262.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gf0sivk", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "backtickbot", "can_mod_post": false, "created_utc":
        1607400971.0, "send_replies": true, "parent_id": "t1_gf0si2r", "score": 1,
        "author_fullname": "t2_8n9fijwc", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "[Fixed formatting.](https://np.reddit.com/r/backtickbot/comments/k8x7xm/httpsnpredditcomradventofcodecommentsk4e4lm2020/)\n\nHello,
        r00t4cc3ss: code blocks using triple backticks (\\`\\`\\`) don''t work on
        all versions of Reddit!\n\nSome users see [this](https://stalas.alm.lt/backformat/gf0si2r.png)
        / [this](https://stalas.alm.lt/backformat/gf0si2r.html) instead.\n\nTo fix
        this, **indent every line with 4 spaces** instead.\n\n[FAQ](https://www.reddit.com/r/backtickbot/wiki/index)\n\n^(You
        can opt out by replying with backtickopt6 to this comment.)", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_gf0sivk",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://np.reddit.com/r/backtickbot/comments/k8x7xm/httpsnpredditcomradventofcodecommentsk4e4lm2020/\"&gt;Fixed
        formatting.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Hello, r00t4cc3ss: code blocks
        using triple backticks (```) don&amp;#39;t work on all versions of Reddit!&lt;/p&gt;\n\n&lt;p&gt;Some
        users see &lt;a href=\"https://stalas.alm.lt/backformat/gf0si2r.png\"&gt;this&lt;/a&gt;
        / &lt;a href=\"https://stalas.alm.lt/backformat/gf0si2r.html\"&gt;this&lt;/a&gt;
        instead.&lt;/p&gt;\n\n&lt;p&gt;To fix this, &lt;strong&gt;indent every line
        with 4 spaces&lt;/strong&gt; instead.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/backtickbot/wiki/index\"&gt;FAQ&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;You
        can opt out by replying with backtickopt6 to this comment.&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gf0sivk/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607400971.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gf0si2r", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "r00t4cc3ss", "can_mod_post": false, "created_utc":
        1607400957.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_12vsgq", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "C#: [https://github.com/mavanmanen/AdventOfCode/blob/master/AdventOfCode.Y2020/Day01.cs](https://github.com/mavanmanen/AdventOfCode/blob/master/AdventOfCode.Y2020/Day01.cs)",
        "edited": 1607401537.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gf0si2r", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C#:
        &lt;a href=\"https://github.com/mavanmanen/AdventOfCode/blob/master/AdventOfCode.Y2020/Day01.cs\"&gt;https://github.com/mavanmanen/AdventOfCode/blob/master/AdventOfCode.Y2020/Day01.cs&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gf0si2r/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607400957.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gezuefo", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "codertee", "can_mod_post": false, "created_utc":
        1607382482.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_977ug760", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Functional Python 3: [github](https://github.com/codertee/adventofcode/blob/main/adventofcode/solutions/y2020/d01_combinations.py)\n\n    import
        math\n    from itertools import combinations, dropwhile\n\n    from adventofcode.inputs
        import get_input\n    from adventofcode.utils import aoc_timer\n\n\n    @aoc_timer()\n    def
        parse_input(input_str):\n        return list(map(int, input_str.split()))\n\n\n    def
        solve(expenses, n):\n        constraint = lambda x: sum(x) != 2020\n        accepted_values
        = next(dropwhile(constraint, combinations(expenses, n)))\n        return math.prod(accepted_values)\n\n\n    @aoc_timer(1,
        1, 2020)\n    def solve_first(expenses):\n        return solve(expenses, 2)\n\n\n    @aoc_timer(2,
        1, 2020)\n    def solve_second(expenses):\n        return solve(expenses,
        3)\n\n\n    if __name__ == ''__main__'':\n        expenses = parse_input(get_input(1,
        year=2020))\n        solve_first(expenses)\n        solve_second(expenses)",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_gezuefo", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Functional
        Python 3: &lt;a href=\"https://github.com/codertee/adventofcode/blob/main/adventofcode/solutions/y2020/d01_combinations.py\"&gt;github&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        math\nfrom itertools import combinations, dropwhile\n\nfrom adventofcode.inputs
        import get_input\nfrom adventofcode.utils import aoc_timer\n\n\n@aoc_timer()\ndef
        parse_input(input_str):\n    return list(map(int, input_str.split()))\n\n\ndef
        solve(expenses, n):\n    constraint = lambda x: sum(x) != 2020\n    accepted_values
        = next(dropwhile(constraint, combinations(expenses, n)))\n    return math.prod(accepted_values)\n\n\n@aoc_timer(1,
        1, 2020)\ndef solve_first(expenses):\n    return solve(expenses, 2)\n\n\n@aoc_timer(2,
        1, 2020)\ndef solve_second(expenses):\n    return solve(expenses, 3)\n\n\nif
        __name__ == &amp;#39;__main__&amp;#39;:\n    expenses = parse_input(get_input(1,
        year=2020))\n    solve_first(expenses)\n    solve_second(expenses)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gezuefo/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607382482.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gezvimo",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "codertee",
        "can_mod_post": false, "created_utc": 1607383042.0, "send_replies": true,
        "parent_id": "t1_gezq4zi", "score": 1, "author_fullname": "t2_977ug760", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Can you add code for input loading and parsing?", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_gezvimo", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Can you add code for input
        loading and parsing?&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_k4e4lm", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gezvimo/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1607383042.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "gezq4zi", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Dospunk",
        "can_mod_post": false, "created_utc": 1607380299.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_gt0mv", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "#Pyth\n\n`FNQI}-2020NQ*N-2020NB`",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_gezq4zi", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Pyth&lt;/h1&gt;\n\n&lt;p&gt;&lt;code&gt;FNQI}-2020NQ*N-2020NB&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gezq4zi/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607380299.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gezivn0", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "devcodex", "can_mod_post": false, "created_utc":
        1607376435.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_475mh", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "# C++ w/ range-v3\n\n    #include &lt;fmt/core.h&gt;\n    #include
        &lt;range/v3/all.hpp&gt;\n    \n    #include &lt;array&gt;\n    #include &lt;fstream&gt;\n    \n    namespace
        rv = ranges::views;\n    \n    auto contains_last_element(const std::vector&lt;int&gt;&amp;
        input)\n    {\n        return [&amp;input](const auto&amp; p) { return ranges::contains(input,
        p.back()); };\n    }\n    \n    auto accumulate_multiply()\n    {\n        return
        [](auto&amp;&amp; p) { return ranges::accumulate(p, 1, std::multiplies&lt;&gt;());
        };\n    }\n    \n    int part1(const std::vector&lt;int&gt;&amp; input)\n    {\n        //
        clang-format off\n        auto result = input \n            | rv::transform([](auto
        i) { return std::array{i, 2020 - i}; })\n            | rv::filter(contains_last_element(input))\n            |
        rv::transform(accumulate_multiply());\n        // clang-format on\n    \n        return
        ranges::front(result);\n    }\n    \n    int part2(const std::vector&lt;int&gt;&amp;
        input)\n    {\n        // clang-format off\n        auto result = rv::cartesian_product(input,
        input)\n            | rv::transform([](auto&amp;&amp; i) { \n                auto
        [a, b] = i;\n                return std::array{a, b, 2020 - a - b}; })\n            |
        rv::filter(contains_last_element(input))\n            | rv::transform(accumulate_multiply());\n        //
        clang-format on\n    \n        return ranges::front(result);\n    }\n    \n    int
        main()\n    {\n        fmt::print(\"Advent of Code 2020 - Day 01\\n\");\n    \n        std::ifstream
        ifs{\"days/day01/input.txt\"};\n    \n        std::vector&lt;int&gt; input
        = ranges::getlines(ifs)\n                                 | rv::transform([](auto&amp;&amp;
        s) { return std::stoi(s); })\n                                 | ranges::to&lt;std::vector&lt;int&gt;&gt;;\n    \n        fmt::print(\"Part
        1 Solution: {}\\n\", part1(input));\n        fmt::print(\"Part 2 Solution:
        {}\\n\", part2(input));\n    \n        return 0;\n    }", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_gezivn0",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;C++ w/ range-v3&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;#include
        &amp;lt;fmt/core.h&amp;gt;\n#include &amp;lt;range/v3/all.hpp&amp;gt;\n\n#include
        &amp;lt;array&amp;gt;\n#include &amp;lt;fstream&amp;gt;\n\nnamespace rv =
        ranges::views;\n\nauto contains_last_element(const std::vector&amp;lt;int&amp;gt;&amp;amp;
        input)\n{\n    return [&amp;amp;input](const auto&amp;amp; p) { return ranges::contains(input,
        p.back()); };\n}\n\nauto accumulate_multiply()\n{\n    return [](auto&amp;amp;&amp;amp;
        p) { return ranges::accumulate(p, 1, std::multiplies&amp;lt;&amp;gt;()); };\n}\n\nint
        part1(const std::vector&amp;lt;int&amp;gt;&amp;amp; input)\n{\n    // clang-format
        off\n    auto result = input \n        | rv::transform([](auto i) { return
        std::array{i, 2020 - i}; })\n        | rv::filter(contains_last_element(input))\n        |
        rv::transform(accumulate_multiply());\n    // clang-format on\n\n    return
        ranges::front(result);\n}\n\nint part2(const std::vector&amp;lt;int&amp;gt;&amp;amp;
        input)\n{\n    // clang-format off\n    auto result = rv::cartesian_product(input,
        input)\n        | rv::transform([](auto&amp;amp;&amp;amp; i) { \n            auto
        [a, b] = i;\n            return std::array{a, b, 2020 - a - b}; })\n        |
        rv::filter(contains_last_element(input))\n        | rv::transform(accumulate_multiply());\n    //
        clang-format on\n\n    return ranges::front(result);\n}\n\nint main()\n{\n    fmt::print(&amp;quot;Advent
        of Code 2020 - Day 01\\n&amp;quot;);\n\n    std::ifstream ifs{&amp;quot;days/day01/input.txt&amp;quot;};\n\n    std::vector&amp;lt;int&amp;gt;
        input = ranges::getlines(ifs)\n                             | rv::transform([](auto&amp;amp;&amp;amp;
        s) { return std::stoi(s); })\n                             | ranges::to&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;;\n\n    fmt::print(&amp;quot;Part
        1 Solution: {}\\n&amp;quot;, part1(input));\n    fmt::print(&amp;quot;Part
        2 Solution: {}\\n&amp;quot;, part2(input));\n\n    return 0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gezivn0/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607376435.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gezdfru", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "bz2pl", "can_mod_post": false, "created_utc":
        1607373670.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_7w23u32j", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "**Bash**\n\n    in=\"1.in\"\n    inf=\"$(sort
        -n &lt; $in)\"\n    \n    while IFS= read -r x; do\n            while IFS=
        read -r y; do\n                    if [ $((x+y)) == 2020 ]; then\n                            echo
        \"$((x*y))\"\n                            break 2\n                    fi\n            done
        &lt;&lt;&lt; \"$inf\"\n    done &lt;&lt;&lt; \"$inf\"\n    \n    while IFS=
        read -r x; do\n            while IFS= read -r y; do\n                    while
        IFS= read -r z; do\n                            if [ $((x+y+z)) == 2020 ];
        then\n                                    echo \"$((x*y*z))\"\n                                    break
        3\n                            fi\n                    done &lt;&lt;&lt; \"$inf\"\n            done
        &lt;&lt;&lt; \"$inf\"\n    done &lt;&lt;&lt; \"$inf\"", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_gezdfru", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Bash&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;in=&amp;quot;1.in&amp;quot;\ninf=&amp;quot;$(sort
        -n &amp;lt; $in)&amp;quot;\n\nwhile IFS= read -r x; do\n        while IFS=
        read -r y; do\n                if [ $((x+y)) == 2020 ]; then\n                        echo
        &amp;quot;$((x*y))&amp;quot;\n                        break 2\n                fi\n        done
        &amp;lt;&amp;lt;&amp;lt; &amp;quot;$inf&amp;quot;\ndone &amp;lt;&amp;lt;&amp;lt;
        &amp;quot;$inf&amp;quot;\n\nwhile IFS= read -r x; do\n        while IFS= read
        -r y; do\n                while IFS= read -r z; do\n                        if
        [ $((x+y+z)) == 2020 ]; then\n                                echo &amp;quot;$((x*y*z))&amp;quot;\n                                break
        3\n                        fi\n                done &amp;lt;&amp;lt;&amp;lt;
        &amp;quot;$inf&amp;quot;\n        done &amp;lt;&amp;lt;&amp;lt; &amp;quot;$inf&amp;quot;\ndone
        &amp;lt;&amp;lt;&amp;lt; &amp;quot;$inf&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gezdfru/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607373670.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gh0ppit", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ViliamPucik",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_ggktxea", "score":
        1, "author_fullname": "t2_8s8cgq3w", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "Using faster `set` based
        lookup approach can lead into false positives if duplicates or `1010` are
        present in the input. A stream of unique combinations works correctly in such
        cases. Please be aware that those are *combinations* in mathematical sense
        and not permutations or the Cartesian product.", "edited": false, "top_awarded_type":
        null, "downs": 0, "author_flair_css_class": null, "name": "t1_gh0ppit", "is_submitter":
        false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Using faster &lt;code&gt;set&lt;/code&gt;
        based lookup approach can lead into false positives if duplicates or &lt;code&gt;1010&lt;/code&gt;
        are present in the input. A stream of unique combinations works correctly
        in such cases. Please be aware that those are &lt;em&gt;combinations&lt;/em&gt;
        in mathematical sense and not permutations or the Cartesian product.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gh0ppit/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1608932535.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1608932535.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "ggktxea", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "icanblink", "can_mod_post": false, "created_utc":
        1608551059.0, "send_replies": true, "parent_id": "t1_gezakca", "score": 1,
        "author_fullname": "t2_d7qum", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "I know it''s 13 days late,
        but my God... why use combinations?", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_ggktxea", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I know it&amp;#39;s 13 days
        late, but my God... why use combinations?&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ggktxea/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1608551059.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gezakca", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "ViliamPucik", "can_mod_post": false, "created_utc":
        1607372288.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_8s8cgq3w", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "**Python 3** \\- Minimal readable solution
        for both parts [\\[GitHub\\]](https://github.com/viliampucik/adventofcode/blob/master/2020/01.py)\n\n    import
        fileinput\n    from math import prod\n    from itertools import combinations\n    \n    \n    def
        solve(length):\n        for c in combinations(n, length):\n            if
        sum(c) == 2020:\n                return prod(c)\n    \n    \n    n = [int(line.strip())
        for line in fileinput.input()]\n    print(solve(2))\n    print(solve(3))",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_gezakca", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python
        3&lt;/strong&gt; - Minimal readable solution for both parts &lt;a href=\"https://github.com/viliampucik/adventofcode/blob/master/2020/01.py\"&gt;[GitHub]&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        fileinput\nfrom math import prod\nfrom itertools import combinations\n\n\ndef
        solve(length):\n    for c in combinations(n, length):\n        if sum(c) ==
        2020:\n            return prod(c)\n\n\nn = [int(line.strip()) for line in
        fileinput.input()]\nprint(solve(2))\nprint(solve(3))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gezakca/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607372288.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gezpxm0",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1607380195.0, "send_replies": true,
        "parent_id": "t1_gexg9ys", "score": 2, "author_fullname": "t2_60niu", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "&gt; This is my first advent of code, and it looks like so much fun!\n\nWelcome!  We''re
        happy to have you playing with us this year!", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_gezpxm0", "is_submitter":
        true, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;This is
        my first advent of code, and it looks like so much fun!&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Welcome!  We&amp;#39;re
        happy to have you playing with us this year!&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": "moderator", "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gezpxm0/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607380195.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gexg9ys", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "jamesjpk123", "can_mod_post": false, "created_utc":
        1607334814.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_12elsp", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "# Java\n\n[Tweet Thread](https://twitter.com/JamesKerrane/status/1335878616714891264)
        \n\n[GitHub Link](https://github.com/thatrobotdev/advent-of-code-solutions)\n\nThis
        is my first advent of code, and it looks like so much fun! I wrote my solution
        in Java because I really want to get better at writing Java for AP CS-A this
        year :D\n\n    import java.io.File;\n    import java.util.ArrayList;\n    import
        java.util.Scanner;\n    \n    public class Day1ReportRepair {\n        public
        static void main(String[] args) throws java.io.IOException {\n    \n            //
        Get inputs from input.txt file\n            Scanner s = new Scanner(new File(\"./Day
        1 - Report Repair/input.txt\"));\n            ArrayList&lt;Integer&gt; inputs
        = new ArrayList&lt;&gt;();\n            while(s.hasNext()) {\n                if(s.hasNextInt())
        {\n                    inputs.add(s.nextInt());\n                } else {\n                    s.next();\n                }\n            }\n            s.close();\n    \n            //
        Part 1\n            System.out.println(partOne(inputs));\n    \n            //
        Part 2\n            System.out.println(partTwo(inputs));\n    \n        }\n    \n        //
        Part 1: Find the two entries that sum to 2020 and then multiply those two
        numbers together\n        public static int partOne(ArrayList&lt;Integer&gt;
        inputs) {\n            for(Integer entry1 : inputs) {\n                for(Integer
        entry2 : inputs) {\n                    if(entry1 + entry2 == 2020) {\n                        return
        entry1 * entry2;\n                    }\n                }\n            }\n            return
        0;\n        }\n    \n        // Part 2: Find the product of the three entries
        that sum to 2020\n        public static int partTwo(ArrayList&lt;Integer&gt;
        inputs) {\n            for (Integer entry1 : inputs) {\n                for
        (Integer entry2 : inputs) {\n                    for (Integer entry3 : inputs)
        {\n                        if (entry1 + entry2 + entry3 == 2020) {\n                            return
        entry1 * entry2 * entry3;\n                        }\n                    }\n                }\n            }\n            return
        0;\n        }\n    }", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gexg9ys", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Java&lt;/h1&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://twitter.com/JamesKerrane/status/1335878616714891264\"&gt;Tweet
        Thread&lt;/a&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/thatrobotdev/advent-of-code-solutions\"&gt;GitHub
        Link&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This is my first advent of code, and
        it looks like so much fun! I wrote my solution in Java because I really want
        to get better at writing Java for AP CS-A this year :D&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        java.io.File;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic
        class Day1ReportRepair {\n    public static void main(String[] args) throws
        java.io.IOException {\n\n        // Get inputs from input.txt file\n        Scanner
        s = new Scanner(new File(&amp;quot;./Day 1 - Report Repair/input.txt&amp;quot;));\n        ArrayList&amp;lt;Integer&amp;gt;
        inputs = new ArrayList&amp;lt;&amp;gt;();\n        while(s.hasNext()) {\n            if(s.hasNextInt())
        {\n                inputs.add(s.nextInt());\n            } else {\n                s.next();\n            }\n        }\n        s.close();\n\n        //
        Part 1\n        System.out.println(partOne(inputs));\n\n        // Part 2\n        System.out.println(partTwo(inputs));\n\n    }\n\n    //
        Part 1: Find the two entries that sum to 2020 and then multiply those two
        numbers together\n    public static int partOne(ArrayList&amp;lt;Integer&amp;gt;
        inputs) {\n        for(Integer entry1 : inputs) {\n            for(Integer
        entry2 : inputs) {\n                if(entry1 + entry2 == 2020) {\n                    return
        entry1 * entry2;\n                }\n            }\n        }\n        return
        0;\n    }\n\n    // Part 2: Find the product of the three entries that sum
        to 2020\n    public static int partTwo(ArrayList&amp;lt;Integer&amp;gt; inputs)
        {\n        for (Integer entry1 : inputs) {\n            for (Integer entry2
        : inputs) {\n                for (Integer entry3 : inputs) {\n                    if
        (entry1 + entry2 + entry3 == 2020) {\n                        return entry1
        * entry2 * entry3;\n                    }\n                }\n            }\n        }\n        return
        0;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gexg9ys/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607334814.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "distinguished":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "distinguished": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gf3jpct",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "_MiguelVargas_",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_gf3c890", "score":
        1, "author_fullname": "t2_3ji6kl98", "approved_by": null, "mod_note": null,
        "all_awardings": [], "body": "That''s a good point, my reading of the requirements
        \"Find the two entries...\" I assumed they would be unique.", "edited": false,
        "gildings": {}, "downs": 0, "author_flair_css_class": null, "name": "t1_gf3jpct",
        "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s a good
        point, my reading of the requirements &amp;quot;Find the two entries...&amp;quot;
        I assumed they would be unique.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "link_id": "t3_k4e4lm", "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gf3jpct/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607464070.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1607464070.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 5, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "distinguished": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gf3iltw",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "0xVali__",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_gf3c890", "score":
        1, "author_fullname": "t2_3u1ymtqy", "approved_by": null, "mod_note": null,
        "all_awardings": [], "body": "Could be an internal requirement where it''d
        just filter out all non unique numbers while copying", "edited": false, "gildings":
        {}, "downs": 0, "author_flair_css_class": null, "name": "t1_gf3iltw", "is_submitter":
        false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Could be an internal
        requirement where it&amp;#39;d just filter out all non unique numbers while
        copying&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "link_id": "t3_k4e4lm", "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gf3iltw/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1607463565.0,
        "author_flair_text": null, "treatment_tags": [], "created_utc": 1607463565.0,
        "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0, "depth":
        5, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gf3c890", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "philipwigg", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_gf37o0t", "score": 1, "author_fullname": "t2_5i3woimw",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "I think the HashSet solution relies on the input numbers being
        unique in the list though? There''s no reason they have to be I guess.", "edited":
        false, "author_flair_css_class": null, "name": "t1_gf3c890", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think the HashSet solution
        relies on the input numbers being unique in the list though? There&amp;#39;s
        no reason they have to be I guess.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "link_id": "t3_k4e4lm", "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": null, "treatment_tags":
        [], "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gf3c890/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607460588.0, "author_flair_text": null, "collapsed": false, "created_utc":
        1607460588.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 4, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gf37o0t", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "0xVali__", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_gf0db9q", "score": 1, "author_fullname": "t2_3u1ymtqy",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Ah yeah that''s true.", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_gf37o0t",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ah yeah that&amp;#39;s
        true.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null,
        "distinguished": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "link_id": "t3_k4e4lm", "unrepliable_reason": null,
        "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gf37o0t/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607458470.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1607458470.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gf0db9q", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "_MiguelVargas_", "can_mod_post": false,
        "send_replies": true, "parent_id": "t1_gezvz97", "score": 2, "author_fullname":
        "t2_3ji6kl98", "removal_reason": null, "approved_by": null, "mod_note": null,
        "all_awardings": [], "body": "HashSet is a performance optimization. The call
        to `contains()` on a list iterates through the whole list looking for the
        element, that means that you end up with nested loops, it has to loop through
        the list for every element in the list. So the performance would be O(n^2)
        for part 1 and O(n^3) for part 2. Using a HashSet makes it O(n) because each
        `contains()` lookup is done in constant time.", "edited": 1607393190.0, "top_awarded_type":
        null, "downs": 0, "author_flair_css_class": null, "name": "t1_gf0db9q", "is_submitter":
        false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;HashSet is a performance
        optimization. The call to &lt;code&gt;contains()&lt;/code&gt; on a list iterates
        through the whole list looking for the element, that means that you end up
        with nested loops, it has to loop through the list for every element in the
        list. So the performance would be O(n&lt;sup&gt;2)&lt;/sup&gt; for part 1
        and O(n&lt;sup&gt;3)&lt;/sup&gt; for part 2. Using a HashSet makes it O(n)
        because each &lt;code&gt;contains()&lt;/code&gt; lookup is done in constant
        time.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null,
        "distinguished": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "link_id": "t3_k4e4lm", "unrepliable_reason": null,
        "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gf0db9q/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607392493.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1607392493.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gezvz97", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "0xVali__", "can_mod_post": false, "created_utc":
        1607383278.0, "send_replies": true, "parent_id": "t1_gexfshn", "score": 1,
        "author_fullname": "t2_3u1ymtqy", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "It''s a nice solution however
        converting the data to a hashset isn''t necessary. Might as well keep it as
        a List&lt;Int&gt; returned by .map.  \n`lines.map{ it.toInt() }.filter { contains(2020
        - it) }.reduce { acc, i -&gt; acc * i }`  \nwould yield the same result",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_gezvz97", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s
        a nice solution however converting the data to a hashset isn&amp;#39;t necessary.
        Might as well keep it as a List&amp;lt;Int&amp;gt; returned by .map.&lt;br/&gt;\n&lt;code&gt;lines.map{
        it.toInt() }.filter { contains(2020 - it) }.reduce { acc, i -&amp;gt; acc
        * i }&lt;/code&gt;&lt;br/&gt;\nwould yield the same result&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gezvz97/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607383278.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gexfshn", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "_MiguelVargas_", "can_mod_post": false,
        "created_utc": 1607334277.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 2, "author_fullname": "t2_3ji6kl98", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Kotlin\n\n    fun
        main() {\n        val file = File(\"src/main/kotlin/day1/day1.input\")\n        val
        input = HashSet(file.readLines().map { it.toInt() })\n    \n        fun addUpto(total:
        Int) = input.filter { input.contains(total - it) }\n    \n        fun threeAddUpTo(total:
        Int) = input.filter { addUpto(total - it).isNotEmpty() }\n    \n        //
        part 1\n        println(addUpto(2020).let { it[0] * it[1] })\n        // part2\n        println(threeAddUpTo(2020).let
        { it[0] * it[1] * it[2] })\n    }", "edited": 1607334991.0, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_gexfshn", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Kotlin&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fun
        main() {\n    val file = File(&amp;quot;src/main/kotlin/day1/day1.input&amp;quot;)\n    val
        input = HashSet(file.readLines().map { it.toInt() })\n\n    fun addUpto(total:
        Int) = input.filter { input.contains(total - it) }\n\n    fun threeAddUpTo(total:
        Int) = input.filter { addUpto(total - it).isNotEmpty() }\n\n    // part 1\n    println(addUpto(2020).let
        { it[0] * it[1] })\n    // part2\n    println(threeAddUpTo(2020).let { it[0]
        * it[1] * it[2] })\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gexfshn/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607334277.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gevz75q",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "wikipedia_text_bot",
        "can_mod_post": false, "created_utc": 1607297880.0, "send_replies": true,
        "parent_id": "t1_gevz5q9", "score": 1, "author_fullname": "t2_8pm6pzxo", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "**[Partial application](https://en.wikipedia.org/wiki/Partial application)**\n\nIn
        computer science, partial application (or partial function application) refers
        to the process of fixing a number of arguments to a function, producing another
        function of smaller arity. Given a function             f     :     (     X     \u00d7     Y     \u00d7     Z     )     \u2192     N         {\\displaystyle
        f\\colon (X\\times Y\\times Z)\\to N}  , we might fix (or ''bind'') the first
        argument, producing a function of type                  partial         (     f     )     :     (     Y     \u00d7     Z     )     \u2192     N         {\\displaystyle
        {\\text{partial}}(f)\\colon (Y\\times Z)\\to N}  . Evaluation of this function
        might be represented as                  f            p       a       r       t       i       a       l               (     2     ,     3     )         {\\displaystyle
        f_{partial}(2,3)}  . Note that the result of partial function application
        in this case is a function that takes two arguments.\n\n[About Me](https://www.reddit.com/user/wikipedia_text_bot/comments/jrn2mj/about_me/)
        - [Opt out](https://www.reddit.com/user/wikipedia_text_bot/comments/jrti43/opt_out_here/)
        - OP can reply !delete to delete - [Article of the day](https://redd.it/k7isfc)",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_gevz75q", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;&lt;a
        href=\"https://en.wikipedia.org/wiki/Partial%20application\"&gt;Partial application&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In
        computer science, partial application (or partial function application) refers
        to the process of fixing a number of arguments to a function, producing another
        function of smaller arity. Given a function             f     :     (     X     \u00d7     Y     \u00d7     Z     )     \u2192     N         {\\displaystyle
        f\\colon (X\\times Y\\times Z)\\to N}  , we might fix (or &amp;#39;bind&amp;#39;)
        the first argument, producing a function of type                  partial         (     f     )     :     (     Y     \u00d7     Z     )     \u2192     N         {\\displaystyle
        {\\text{partial}}(f)\\colon (Y\\times Z)\\to N}  . Evaluation of this function
        might be represented as                  f            p       a       r       t       i       a       l               (     2     ,     3     )         {\\displaystyle
        f_{partial}(2,3)}  . Note that the result of partial function application
        in this case is a function that takes two arguments.&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://www.reddit.com/user/wikipedia_text_bot/comments/jrn2mj/about_me/\"&gt;About
        Me&lt;/a&gt; - &lt;a href=\"https://www.reddit.com/user/wikipedia_text_bot/comments/jrti43/opt_out_here/\"&gt;Opt
        out&lt;/a&gt; - OP can reply !delete to delete - &lt;a href=\"https://redd.it/k7isfc\"&gt;Article
        of the day&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_k4e4lm", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gevz75q/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1607297880.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "gevz5q9", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "friedrich_aurelius",
        "can_mod_post": false, "created_utc": 1607297860.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_32oe10w0", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "#
        Elixir\n\n[Github link](https://github.com/APB9785/AoC-2020-elixir/blob/main/day_01.ex)\n\nAfter
        implementing a simple ''find\\_complements'' function for Part 1, I made a
        looping wrapper for it to consider the first value in advance, then have ''find\\_complements''
        pick up from there and check for possible second and third values.  I was
        thinking somewhere along the lines of [partial function application](https://en.wikipedia.org/wiki/Partial_application).\n\n    defp
        part_2(n_list) do\n      start_val = hd(n_list)\n    \n      case find_complements(tl(n_list),
        (2020 - start_val)) do\n        \"none\" -&gt; tl(n_list) |&gt; part_2\n        x      -&gt;
        x * start_val |&gt; Integer.to_string\n      end\n    end", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_gevz5q9",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Elixir&lt;/h1&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/APB9785/AoC-2020-elixir/blob/main/day_01.ex\"&gt;Github
        link&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;After implementing a simple &amp;#39;find_complements&amp;#39;
        function for Part 1, I made a looping wrapper for it to consider the first
        value in advance, then have &amp;#39;find_complements&amp;#39; pick up from
        there and check for possible second and third values.  I was thinking somewhere
        along the lines of &lt;a href=\"https://en.wikipedia.org/wiki/Partial_application\"&gt;partial
        function application&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;defp part_2(n_list)
        do\n  start_val = hd(n_list)\n\n  case find_complements(tl(n_list), (2020
        - start_val)) do\n    &amp;quot;none&amp;quot; -&amp;gt; tl(n_list) |&amp;gt;
        part_2\n    x      -&amp;gt; x * start_val |&amp;gt; Integer.to_string\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gevz5q9/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607297860.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gevk9y0", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "ditao1", "can_mod_post": false, "created_utc":
        1607290276.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_e8mdl", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Learning **OCaml** for Compilers next semseter
        -- using a very \"Matthias Felleisen\" approved subset of OCaml... we''ll
        see how this goes!\n    \n    let rec build_int_list (ic, l) =\n      match
        input_line ic with\n      | line -&gt; build_int_list (ic, (int_of_string
        line) :: l)\n      | exception End_of_file -&gt; close_in ic; List.rev l\n    \n    let
        rec string_of_list_of_int (l: int list)  =\n      match l with\n      | []
        -&gt; \"\"\n      | first::rest -&gt; (string_of_int first)^\", \"^(string_of_list_of_int
        rest)  \n    \n    let rec find_int (i : int) ( l : int list) : int option
        =\n      match l with\n      | [] -&gt; None\n      | first::rest -&gt; if
        first == i then Some(first) else find_int i rest\n    \n    let rec find_2020_pair
        (l1 : int list) (l2 : int list): int =\n      match l1 with\n      | [] -&gt;
        -1\n      | first::rest -&gt; \n          let pair = find_int (2020 - first)
        l2 in\n          match pair with\n          | None -&gt; find_2020_pair rest
        l2\n          | Some p -&gt; p * first\n    \n    let rec find_2020_triplet
        (l1: int list) (l2: int list) (l3: int list): int =\n    \n      let rec find_2020_triplet_two_lists
        i l2 l3 =\n        match l2 with\n        | [] -&gt; None\n        | first::rest
        -&gt; \n          let find = find_int (2020 - i - first) l3 in\n          match
        find with\n          | None -&gt; find_2020_triplet_two_lists i rest l3\n          |
        Some(p) -&gt; Some(i, first, p) \n        in\n    \n      match l1 with\n      |
        [] -&gt; -1\n      | first::rest -&gt;\n        let triplet = find_2020_triplet_two_lists
        first l2 l3 in\n        match triplet with\n        | None -&gt; find_2020_triplet
        rest l2 l3\n        | Some (first, second, third) -&gt; first * second * third\n    \n    let
        () =\n      let ic = open_in \"input.txt\" in\n      let l = build_int_list(ic,
        []) in\n      \n      print_endline (\"part 1: \"^string_of_int (find_2020_pair
        l l));(* 719796 *)\n      print_endline (\"part 2: \"^string_of_int (find_2020_triplet
        l l l)); (*144554112*)", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gevk9y0", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Learning
        &lt;strong&gt;OCaml&lt;/strong&gt; for Compilers next semseter -- using a
        very &amp;quot;Matthias Felleisen&amp;quot; approved subset of OCaml... we&amp;#39;ll
        see how this goes!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let rec build_int_list
        (ic, l) =\n  match input_line ic with\n  | line -&amp;gt; build_int_list (ic,
        (int_of_string line) :: l)\n  | exception End_of_file -&amp;gt; close_in ic;
        List.rev l\n\nlet rec string_of_list_of_int (l: int list)  =\n  match l with\n  |
        [] -&amp;gt; &amp;quot;&amp;quot;\n  | first::rest -&amp;gt; (string_of_int
        first)^&amp;quot;, &amp;quot;^(string_of_list_of_int rest)  \n\nlet rec find_int
        (i : int) ( l : int list) : int option =\n  match l with\n  | [] -&amp;gt;
        None\n  | first::rest -&amp;gt; if first == i then Some(first) else find_int
        i rest\n\nlet rec find_2020_pair (l1 : int list) (l2 : int list): int =\n  match
        l1 with\n  | [] -&amp;gt; -1\n  | first::rest -&amp;gt; \n      let pair =
        find_int (2020 - first) l2 in\n      match pair with\n      | None -&amp;gt;
        find_2020_pair rest l2\n      | Some p -&amp;gt; p * first\n\nlet rec find_2020_triplet
        (l1: int list) (l2: int list) (l3: int list): int =\n\n  let rec find_2020_triplet_two_lists
        i l2 l3 =\n    match l2 with\n    | [] -&amp;gt; None\n    | first::rest -&amp;gt;
        \n      let find = find_int (2020 - i - first) l3 in\n      match find with\n      |
        None -&amp;gt; find_2020_triplet_two_lists i rest l3\n      | Some(p) -&amp;gt;
        Some(i, first, p) \n    in\n\n  match l1 with\n  | [] -&amp;gt; -1\n  | first::rest
        -&amp;gt;\n    let triplet = find_2020_triplet_two_lists first l2 l3 in\n    match
        triplet with\n    | None -&amp;gt; find_2020_triplet rest l2 l3\n    | Some
        (first, second, third) -&amp;gt; first * second * third\n\nlet () =\n  let
        ic = open_in &amp;quot;input.txt&amp;quot; in\n  let l = build_int_list(ic,
        []) in\n\n  print_endline (&amp;quot;part 1: &amp;quot;^string_of_int (find_2020_pair
        l l));(* 719796 *)\n  print_endline (&amp;quot;part 2: &amp;quot;^string_of_int
        (find_2020_triplet l l l)); (*144554112*)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gevk9y0/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607290276.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gevc6gm", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "smokebath", "can_mod_post": false, "created_utc":
        1607286485.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_81tbl", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Python 3.8\n\n    GOAL = 2020\n    \n    def
        integers(s):\n        \"\"\"Takes a string and return digits split by any
        other character into generator.\"\"\"\n        return [int(i) for i in re.split(r''\\D+'',
        s) if i]\n    \n    def part_1(data: list) -&gt; int:\n        for index_a,
        a in enumerate(data):\n            for b in data[index_a:]:\n                if
        a + b == GOAL:\n                    return a * b\n    \n    def part_2(data:
        list) -&gt; int:\n        for index_a, a in enumerate(data):\n            for
        index_b, b in enumerate(data[index_a:]):\n                for c in data[index_b:]:\n                    if
        a + b + c == GOAL:\n                        return a * b * c\n    \n    def
        main():\n        d = integers(open(''../inputs/01'').read())\n        print(part_1(d))\n        print(part_2(d))\n    \n    \n    if
        __name__ == ''__main__'':\n        main()", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_gevc6gm", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python 3.8&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;GOAL
        = 2020\n\ndef integers(s):\n    &amp;quot;&amp;quot;&amp;quot;Takes a string
        and return digits split by any other character into generator.&amp;quot;&amp;quot;&amp;quot;\n    return
        [int(i) for i in re.split(r&amp;#39;\\D+&amp;#39;, s) if i]\n\ndef part_1(data:
        list) -&amp;gt; int:\n    for index_a, a in enumerate(data):\n        for
        b in data[index_a:]:\n            if a + b == GOAL:\n                return
        a * b\n\ndef part_2(data: list) -&amp;gt; int:\n    for index_a, a in enumerate(data):\n        for
        index_b, b in enumerate(data[index_a:]):\n            for c in data[index_b:]:\n                if
        a + b + c == GOAL:\n                    return a * b * c\n\ndef main():\n    d
        = integers(open(&amp;#39;../inputs/01&amp;#39;).read())\n    print(part_1(d))\n    print(part_2(d))\n\n\nif
        __name__ == &amp;#39;__main__&amp;#39;:\n    main()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gevc6gm/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607286485.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "geuqvcv", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "ropecrawler", "can_mod_post": false, "created_utc":
        1607277994.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_bih7f", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "__Rust__\n\nhttps://github.com/ropewalker/advent_of_code_2020/blob/master/src/day1.rs",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_geuqvcv", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/ropewalker/advent_of_code_2020/blob/master/src/day1.rs\"&gt;https://github.com/ropewalker/advent_of_code_2020/blob/master/src/day1.rs&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geuqvcv/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607277994.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gewl4hv", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "daggerdragon", "can_mod_post": false,
        "send_replies": true, "parent_id": "t1_gewdgsy", "score": 1, "author_fullname":
        "t2_60niu", "removal_reason": null, "approved_by": null, "mod_note": null,
        "all_awardings": [], "collapsed": false, "body": "\ud83d\udc4d", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_gewl4hv",
        "is_submitter": true, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;\ud83d\udc4d&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": "moderator", "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gewl4hv/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607309859.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1607309859.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gewdgsy", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "DmitryShvetsov", "can_mod_post": false,
        "send_replies": true, "parent_id": "t1_gevehtd", "score": 1, "author_fullname":
        "t2_7a5bzu8s", "removal_reason": null, "approved_by": null, "mod_note": null,
        "all_awardings": [], "body": "thanks, should be fixed", "edited": false, "top_awarded_type":
        null, "downs": 0, "author_flair_css_class": null, "name": "t1_gewdgsy", "is_submitter":
        false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;thanks, should be fixed&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gewdgsy/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607305606.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1607305606.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gevehtd", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "daggerdragon", "can_mod_post": false,
        "created_utc": 1607287583.0, "send_replies": true, "parent_id": "t1_geuhmev",
        "score": 2, "author_fullname": "t2_60niu", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "Your code is hard to
        read on old.reddit.  As per our [posting guidelines](https://www.reddit.com/r/adventofcode/wiki/index#wiki_how_do_i_format_code.3F),
        would you please edit it using old.reddit''s four-spaces formatting instead
        of new.reddit''s triple backticks?\n\nPut four spaces before every code line.  (If
        you''re using new.reddit, click the button in the editor that says \"Switch
        to Markdown\" first.)\n\n`[space space space space]public static void main()`  \n`[space
        space space space][more spaces for indenting]/* more code here*/`\n\nturns
        into\n\n    public static void main()\n        /* more code here */\n\nAlternatively,
        stuff your code in /u/topaz2078''s [`paste`](https://topaz.github.io/paste/)
        or an external repo instead and link to that instead.", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_gevehtd", "is_submitter":
        true, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Your code is hard to read on
        old.reddit.  As per our &lt;a href=\"https://www.reddit.com/r/adventofcode/wiki/index#wiki_how_do_i_format_code.3F\"&gt;posting
        guidelines&lt;/a&gt;, would you please edit it using old.reddit&amp;#39;s
        four-spaces formatting instead of new.reddit&amp;#39;s triple backticks?&lt;/p&gt;\n\n&lt;p&gt;Put
        four spaces before every code line.  (If you&amp;#39;re using new.reddit,
        click the button in the editor that says &amp;quot;Switch to Markdown&amp;quot;
        first.)&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;[space space space space]public
        static void main()&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;[space space space
        space][more spaces for indenting]/* more code here*/&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;turns
        into&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public static void main()\n    /*
        more code here */\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Alternatively, stuff
        your code in &lt;a href=\"/u/topaz2078\"&gt;/u/topaz2078&lt;/a&gt;&amp;#39;s
        &lt;a href=\"https://topaz.github.io/paste/\"&gt;&lt;code&gt;paste&lt;/code&gt;&lt;/a&gt;
        or an external repo instead and link to that instead.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": "moderator", "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gevehtd/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607287583.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "geuhnkw", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "backtickbot", "can_mod_post": false, "created_utc":
        1607273402.0, "send_replies": true, "parent_id": "t1_geuhmev", "score": 0,
        "author_fullname": "t2_8n9fijwc", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Hello, DmitryShvetsov: code
        blocks using backticks (\\`\\`\\`) don''t work on all versions of Reddit!\n\nSome
        users see [this](https://stalas.alm.lt/backformat/geuhmev.png) / [this](https://stalas.alm.lt/backformat/geuhmev.html)
        instead.\n\nTo fix this, indent every line with **4 spaces** instead. It''s
        a bit annoying, but then your code blocks are properly formatted for everyone.\n\nAn
        easy way to do this is to use the [code-block button in the editor](https://stalas.alm.lt/files/new-reddit-codeblock.png).
        If it''s not working, try switching to the fancy-pants editor and back again.\n\n[Comment
        with formatting fixed for old.reddit.com users](https://np.reddit.com/r/backtickbot/comments/k7x5c3/httpsnpredditcomradventofcodecommentsk4e4lm2020/)\n\n[FAQ](https://www.reddit.com/r/backtickbot/wiki/index)\n\n^(You
        can opt out by replying with backtickopt6 to this comment.)", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_geuhnkw",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hello, DmitryShvetsov:
        code blocks using backticks (```) don&amp;#39;t work on all versions of Reddit!&lt;/p&gt;\n\n&lt;p&gt;Some
        users see &lt;a href=\"https://stalas.alm.lt/backformat/geuhmev.png\"&gt;this&lt;/a&gt;
        / &lt;a href=\"https://stalas.alm.lt/backformat/geuhmev.html\"&gt;this&lt;/a&gt;
        instead.&lt;/p&gt;\n\n&lt;p&gt;To fix this, indent every line with &lt;strong&gt;4
        spaces&lt;/strong&gt; instead. It&amp;#39;s a bit annoying, but then your
        code blocks are properly formatted for everyone.&lt;/p&gt;\n\n&lt;p&gt;An
        easy way to do this is to use the &lt;a href=\"https://stalas.alm.lt/files/new-reddit-codeblock.png\"&gt;code-block
        button in the editor&lt;/a&gt;. If it&amp;#39;s not working, try switching
        to the fancy-pants editor and back again.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://np.reddit.com/r/backtickbot/comments/k7x5c3/httpsnpredditcomradventofcodecommentsk4e4lm2020/\"&gt;Comment
        with formatting fixed for old.reddit.com users&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://www.reddit.com/r/backtickbot/wiki/index\"&gt;FAQ&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;You
        can opt out by replying with backtickopt6 to this comment.&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geuhnkw/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607273402.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 0}}], "before": null}},
        "user_reports": [], "saved": false, "id": "geuhmev", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "DmitryShvetsov", "can_mod_post": false,
        "created_utc": 1607273385.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 3, "author_fullname": "t2_7a5bzu8s", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Part 1, **faster than
        brute-force** (Python)\n\n    def solution(data, result=2020):\n        data.sort()\n        lidx
        = 0\n        ridx = len(data) - 1\n        while (lidx &lt; ridx):\n            if
        data[lidx] + data[ridx] == result:\n                return data[lidx] * data[ridx]\n            if
        data[lidx] + data[ridx] &gt; result:\n                ridx -= 1\n            else:\n                lidx
        += 1\n\npart 2, **faster than brute-force** (Python)\n\n    def solution(data,
        result=2020):\n        data.sort()\n    \n        for bidx, base in enumerate(data):\n            rem
        = 2020 - base\n            lidx = bidx + 1\n            ridx = len(data) -
        1\n            while (lidx &lt; ridx):\n                if data[lidx] + data[ridx]
        == rem:\n                    return base * data[lidx] * data[ridx]\n                if
        data[lidx] + data[ridx] &gt; rem:\n                    ridx -= 1\n                else:\n                    lidx
        += 1\n\n[source](https://github.com/dmshvetsov/adventofcode/blob/master/2020/01/2.py)",
        "edited": 1607305574.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_geuhmev", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Part
        1, &lt;strong&gt;faster than brute-force&lt;/strong&gt; (Python)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        solution(data, result=2020):\n    data.sort()\n    lidx = 0\n    ridx = len(data)
        - 1\n    while (lidx &amp;lt; ridx):\n        if data[lidx] + data[ridx] ==
        result:\n            return data[lidx] * data[ridx]\n        if data[lidx]
        + data[ridx] &amp;gt; result:\n            ridx -= 1\n        else:\n            lidx
        += 1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;part 2, &lt;strong&gt;faster than
        brute-force&lt;/strong&gt; (Python)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        solution(data, result=2020):\n    data.sort()\n\n    for bidx, base in enumerate(data):\n        rem
        = 2020 - base\n        lidx = bidx + 1\n        ridx = len(data) - 1\n        while
        (lidx &amp;lt; ridx):\n            if data[lidx] + data[ridx] == rem:\n                return
        base * data[lidx] * data[ridx]\n            if data[lidx] + data[ridx] &amp;gt;
        rem:\n                ridx -= 1\n            else:\n                lidx +=
        1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/dmshvetsov/adventofcode/blob/master/2020/01/2.py\"&gt;source&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geuhmev/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607273385.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "ger5x0f", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "techworker123", "can_mod_post": false,
        "created_utc": 1607213229.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 1, "author_fullname": "t2_tgdts", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "PHP (Solution 2)\n\nAdded
        clusters for 3rd level to reduce the amount of loops\n\n    $cluster = [];\n    $clusterSize
        = 100;\n    $numbers = array_map(''intval'', array_values(array_filter(file(''data.txt''))));\n    sort($numbers);\n    foreach($numbers
        as $num) {\n        $cluster[floor($num / $clusterSize)][] = $num;\n    }\n    \n    foreach($numbers
        as $num1) {\n        foreach($numbers as $num2) {\n            $rest = 2020
        - ($num1 + $num2);\n            if($rest &lt;= 0) {\n                continue;\n            }\n            $subCluster
        = $cluster[floor($rest / $clusterSize)] ?? [];\n            // large clusters..\n            /*if($rest
        % ($clusterSize / 2) === $rest) {\n                $subCluster = array_reverse($subCluster);\n            }*/\n            for($i
        = 0; $i &lt; count($subCluster); $i++) {\n                if($num1+$num2+$subCluster[$i]
        === 2020) {\n                    return $num1 * $num2 * $subCluster[$i];\n                }\n            }\n        }\n    }",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_ger5x0f", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;PHP
        (Solution 2)&lt;/p&gt;\n\n&lt;p&gt;Added clusters for 3rd level to reduce
        the amount of loops&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$cluster = [];\n$clusterSize
        = 100;\n$numbers = array_map(&amp;#39;intval&amp;#39;, array_values(array_filter(file(&amp;#39;data.txt&amp;#39;))));\nsort($numbers);\nforeach($numbers
        as $num) {\n    $cluster[floor($num / $clusterSize)][] = $num;\n}\n\nforeach($numbers
        as $num1) {\n    foreach($numbers as $num2) {\n        $rest = 2020 - ($num1
        + $num2);\n        if($rest &amp;lt;= 0) {\n            continue;\n        }\n        $subCluster
        = $cluster[floor($rest / $clusterSize)] ?? [];\n        // large clusters..\n        /*if($rest
        % ($clusterSize / 2) === $rest) {\n            $subCluster = array_reverse($subCluster);\n        }*/\n        for($i
        = 0; $i &amp;lt; count($subCluster); $i++) {\n            if($num1+$num2+$subCluster[$i]
        === 2020) {\n                return $num1 * $num2 * $subCluster[$i];\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ger5x0f/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607213229.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ger8lgm",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1607214527.0, "send_replies": true,
        "parent_id": "t1_geqtqg4", "score": 1, "author_fullname": "t2_60niu", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "&gt; Late to the party\n\nNo such thing, we''re open all month long (for
        the megathreads) and Advent of Code is available year ''round!\n\nPlease follow
        the [posting guidelines](https://www.reddit.com/r/adventofcode/wiki/index#wiki_posting_guidelines)
        and add the language used to your post to make it easier for folks who Ctrl-F
        the megathreads looking for a specific language.  Thanks!", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_ger8lgm",
        "is_submitter": true, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Late
        to the party&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;No such thing, we&amp;#39;re
        open all month long (for the megathreads) and Advent of Code is available
        year &amp;#39;round!&lt;/p&gt;\n\n&lt;p&gt;Please follow the &lt;a href=\"https://www.reddit.com/r/adventofcode/wiki/index#wiki_posting_guidelines\"&gt;posting
        guidelines&lt;/a&gt; and add the language used to your post to make it easier
        for folks who Ctrl-F the megathreads looking for a specific language.  Thanks!&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": "moderator", "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ger8lgm/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607214527.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "geqtqg4", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "blafunke", "can_mod_post": false, "created_utc":
        1607207607.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_4gehg", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Late to the party, but I tried to dress it
        up a bit to make up for tardiness. \n\nruby:\n\n                          11\n                         es
        = \n                        $stdin\n                     .read.split(\n                   \"\\n\").map{|e|e.to_i\n                }and
        es.each_index{|i|es[\n              i+1..es.length-1].each_index{\n             |j|
        1111111111111111111111111111\n            1111111111111111111111111111111111\n          11111111111111111111111111111111111111\n        es[j+1..es.length-1].each{|e|
        111111111111\n      1111111111111111111111111111111111111111111111                           \n    abort((es[i]*es[j]*e).to_s)if
        es[i]+es[j]+e==2020}\n                          }}\n                          {}",
        "edited": 1607233744.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_geqtqg4", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Late
        to the party, but I tried to dress it up a bit to make up for tardiness. &lt;/p&gt;\n\n&lt;p&gt;ruby:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;                      11\n                     es
        = \n                    $stdin\n                 .read.split(\n               &amp;quot;\\n&amp;quot;).map{|e|e.to_i\n            }and
        es.each_index{|i|es[\n          i+1..es.length-1].each_index{\n         |j|
        1111111111111111111111111111\n        1111111111111111111111111111111111\n      11111111111111111111111111111111111111\n    es[j+1..es.length-1].each{|e|
        111111111111\n  1111111111111111111111111111111111111111111111                           \nabort((es[i]*es[j]*e).to_s)if
        es[i]+es[j]+e==2020}\n                      }}\n                      {}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geqtqg4/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607207607.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 1, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "geqssbp", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "backtickbot", "can_mod_post": false, "created_utc":
        1607207174.0, "send_replies": true, "parent_id": "t1_geqsrb3", "score": 1,
        "author_fullname": "t2_8n9fijwc", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Hello, blafunke: code blocks
        using backticks (\\`\\`\\`) don''t work on all versions of Reddit!\n\nSome
        users see [this](https://stalas.alm.lt/backformat/geqsrb3.png) / [this](https://stalas.alm.lt/backformat/geqsrb3.html)
        instead.\n\nTo fix this, indent every line with **4 spaces** instead. It''s
        a bit annoying, but then your code blocks are properly formatted for everyone.\n\nAn
        easy way to do this is to use the [code-block button in the editor](https://stalas.alm.lt/files/new-reddit-codeblock.png).
        If it''s not working, try switching to the fancy-pants editor and back again.\n\n[Comment
        with formatting fixed for old.reddit.com users](https://np.reddit.com/r/backtickbot/comments/k7h5zj/httpsnpredditcomradventofcodecommentsk4e4lm2020/)\n\n[FAQ](https://www.reddit.com/r/backtickbot/wiki/index)\n\n^(You
        can opt out by replying with backtickopt6 to this comment.)", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_geqssbp",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hello, blafunke: code
        blocks using backticks (```) don&amp;#39;t work on all versions of Reddit!&lt;/p&gt;\n\n&lt;p&gt;Some
        users see &lt;a href=\"https://stalas.alm.lt/backformat/geqsrb3.png\"&gt;this&lt;/a&gt;
        / &lt;a href=\"https://stalas.alm.lt/backformat/geqsrb3.html\"&gt;this&lt;/a&gt;
        instead.&lt;/p&gt;\n\n&lt;p&gt;To fix this, indent every line with &lt;strong&gt;4
        spaces&lt;/strong&gt; instead. It&amp;#39;s a bit annoying, but then your
        code blocks are properly formatted for everyone.&lt;/p&gt;\n\n&lt;p&gt;An
        easy way to do this is to use the &lt;a href=\"https://stalas.alm.lt/files/new-reddit-codeblock.png\"&gt;code-block
        button in the editor&lt;/a&gt;. If it&amp;#39;s not working, try switching
        to the fancy-pants editor and back again.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://np.reddit.com/r/backtickbot/comments/k7h5zj/httpsnpredditcomradventofcodecommentsk4e4lm2020/\"&gt;Comment
        with formatting fixed for old.reddit.com users&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://www.reddit.com/r/backtickbot/wiki/index\"&gt;FAQ&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;You
        can opt out by replying with backtickopt6 to this comment.&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geqssbp/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607207174.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "geqsrb3", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        "DELETED", "no_follow": true, "author": "[deleted]", "can_mod_post": false,
        "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1, "approved_by":
        null, "report_reasons": null, "all_awardings": [], "subreddit_id": "t5_3b3wa",
        "body": "[deleted]", "edited": false, "downs": 0, "author_flair_css_class":
        null, "collapsed": true, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geqsrb3/",
        "num_reports": null, "locked": false, "name": "t1_geqsrb3", "created": 1607207160.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1607207160.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "geqkl01", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "kaklarakol", "can_mod_post": false, "created_utc":
        1607203466.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_7isinsjq", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "# ELisp\n\nThis was done in XEmacs, but it
        should be valid CommonLisp code. What''s missing here is the code to read
        in the data. This can be accomplished by a simple variable assignment.\n\nThe
        code works for any number of additions, not just two and three.\n\n        (defun
        find (baseset sumset result n)\n          \"Looks for N numbers from BASESET
        whose sum is RESULT.\n    SUMSET is used to gather and return potential summands
        and finally the matching summands in recursive function calls.\"\n           (if
        (= n 1)\n              (let* ((sum (apply ''+ sumset))\n                     (i
        0)\n                     (ret))\n                 (while (and (null ret) (&lt;
        i (length baseset)))\n                    (if (= (+ sum (nth i baseset)) result)\n                       (setq
        ret (cons (nth i baseset) sumset))) \n                   (setq i (1+ i)))\n                 ret)\n              (let
        ((i 0)\n                    (ret))\n                 (while (and (null ret)
        (&lt; i (length baseset)))\n                    (setq ret (find (append (butlast
        baseset (- (length baseset) i))\n                                           (last
        baseset (- (length baseset) (1+ i))))\n                                    (cons
        (nth i baseset) sumset)\n                                    result\n                                    (1-
        n)))\n                    (setq i (1+ i)))\n                 ret)))\n        \n        (find
        numbers ''() 2020 2)\n        (find numbers ''() 2020 3)", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_geqkl01",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;ELisp&lt;/h1&gt;\n\n&lt;p&gt;This
        was done in XEmacs, but it should be valid CommonLisp code. What&amp;#39;s
        missing here is the code to read in the data. This can be accomplished by
        a simple variable assignment.&lt;/p&gt;\n\n&lt;p&gt;The code works for any
        number of additions, not just two and three.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    (defun
        find (baseset sumset result n)\n      &amp;quot;Looks for N numbers from BASESET
        whose sum is RESULT.\nSUMSET is used to gather and return potential summands
        and finally the matching summands in recursive function calls.&amp;quot;\n       (if
        (= n 1)\n          (let* ((sum (apply &amp;#39;+ sumset))\n                 (i
        0)\n                 (ret))\n             (while (and (null ret) (&amp;lt;
        i (length baseset)))\n                (if (= (+ sum (nth i baseset)) result)\n                   (setq
        ret (cons (nth i baseset) sumset))) \n               (setq i (1+ i)))\n             ret)\n          (let
        ((i 0)\n                (ret))\n             (while (and (null ret) (&amp;lt;
        i (length baseset)))\n                (setq ret (find (append (butlast baseset
        (- (length baseset) i))\n                                       (last baseset
        (- (length baseset) (1+ i))))\n                                (cons (nth
        i baseset) sumset)\n                                result\n                                (1-
        n)))\n                (setq i (1+ i)))\n             ret)))\n\n    (find numbers
        &amp;#39;() 2020 2)\n    (find numbers &amp;#39;() 2020 3)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geqkl01/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607203466.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geur7zs",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "foureyedraven",
        "can_mod_post": false, "created_utc": 1607278166.0, "send_replies": true,
        "parent_id": "t1_geqeg2s", "score": 1, "author_fullname": "t2_htbbd", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "NB, you will need to run \\`solution\\` and \\`solutionPart2\\` in the console
        to see the actual value.", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_geur7zs", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;NB,
        you will need to run `solution` and `solutionPart2` in the console to see
        the actual value.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_k4e4lm", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geur7zs/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1607278166.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "geqeg2s", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "foureyedraven",
        "can_mod_post": false, "created_utc": 1607200657.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_htbbd", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "#
        Chrome Dev Tools Console / Javascript\n\nWhile on [`https://adventofcode.com/2020/day/1/input`](https://adventofcode.com/2020/day/1/input)\n\n    //
        PART 1\n    // Store array of strings of values from page element\n    const
        entries = $(''pre'').innerText.split(''\\n'')\n    // We just want to know
        if a corresponding part of sum 2020 exists, and save it.\n    // .filter gets
        array of those two values, reduce returns their product\n    const solution
        = entries.filter(entry =&gt; entries.indexOf(String(2020 - parseInt(entry)))
        &gt; -1).reduce((acc, curr) =&gt; acc*curr)\n    \n    // PART 2\n    // Iterate
        through all entries once at top (reducer) level, and iterate \n    // only
        remaining array internally; together, produce third value.\n    // It would
        be better to not reduce, use iterator, and break on solution.\n    const solutionPart2
        = entries.reduce((acc, curr, i, source) =&gt; { \n      source.slice(i).forEach(num
        =&gt; { \n       var third = String(2020-parseInt(curr)-parseInt(num))\n       if
        (source.indexOf(third) &gt; -1) { \n        acc = third*curr*num \n       }\n      })\n     return
        acc \n    })", "edited": 1607210619.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_geqeg2s", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Chrome
        Dev Tools Console / Javascript&lt;/h1&gt;\n\n&lt;p&gt;While on &lt;a href=\"https://adventofcode.com/2020/day/1/input\"&gt;&lt;code&gt;https://adventofcode.com/2020/day/1/input&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;//
        PART 1\n// Store array of strings of values from page element\nconst entries
        = $(&amp;#39;pre&amp;#39;).innerText.split(&amp;#39;\\n&amp;#39;)\n// We just
        want to know if a corresponding part of sum 2020 exists, and save it.\n//
        .filter gets array of those two values, reduce returns their product\nconst
        solution = entries.filter(entry =&amp;gt; entries.indexOf(String(2020 - parseInt(entry)))
        &amp;gt; -1).reduce((acc, curr) =&amp;gt; acc*curr)\n\n// PART 2\n// Iterate
        through all entries once at top (reducer) level, and iterate \n// only remaining
        array internally; together, produce third value.\n// It would be better to
        not reduce, use iterator, and break on solution.\nconst solutionPart2 = entries.reduce((acc,
        curr, i, source) =&amp;gt; { \n  source.slice(i).forEach(num =&amp;gt; { \n   var
        third = String(2020-parseInt(curr)-parseInt(num))\n   if (source.indexOf(third)
        &amp;gt; -1) { \n    acc = third*curr*num \n   }\n  })\n return acc \n})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geqeg2s/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607200657.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gepnh39", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "mschaap", "can_mod_post": false, "created_utc":
        1607187297.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_13dwf0", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "**Raku**\n\n[https://github.com/mscha/aoc/blob/master/aoc2020/aoc01](https://github.com/mscha/aoc/blob/master/aoc2020/aoc01)",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_gepnh39", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Raku&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/mscha/aoc/blob/master/aoc2020/aoc01\"&gt;https://github.com/mscha/aoc/blob/master/aoc2020/aoc01&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gepnh39/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607187297.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gepibxb", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "roemel11", "can_mod_post": false, "created_utc":
        1607184522.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 3,
        "author_fullname": "t2_967e1l2m", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "**C#**\n\nMaybe not the most elegant solution,
        but it did quite the trick.\n\nPart 1:\n\n    private static void Day1Part1(List&lt;int&gt;
        list)\n    {\n        int val = 0;\n        int val2 = 0;\n    \n        for
        (int i1 = 0; i1 &lt; list.Count; i1++)\n        {\n            for (int i2
        = 1; i2 &lt; list.Count; i2++)\n            {\n                if (list[i1]
        + list[i2] != 2020)\n                    continue;\n    \n                val
        = list[i1];\n                val2 = list[i2];\n                break;\n            }\n    \n            if
        (val != 0 &amp;&amp; val2 != 0)\n                break;\n        }\n    \n        Console.WriteLine($\"Day
        1, calculating {val} * {val2}\");\n        Console.WriteLine($\"Day 1, result:
        {val * val2}\");\n    }\n\nPart 2:\n\n    private static void Day1Part2(List&lt;int&gt;
        list)\n    {\n        int val = 0;\n        int val2 = 0;\n        int val3
        = 0;\n    \n        for (int i1 = 0; i1 &lt; list.Count; i1++)\n        {\n            for
        (int i2 = 1; i2 &lt; list.Count; i2++)\n            {\n                for
        (int i3 = 2; i3 &lt; list.Count; i3++)\n                {\n                    if
        (list[i1] + list[i2] + list[i3] != 2020)\n                        continue;\n    \n                    val
        = list[i1];\n                    val2 = list[i2];\n                    val3
        = list[i3];\n                    break;\n                }\n    \n                if
        (val != 0 &amp;&amp; val2 != 0 &amp;&amp; val3 != 0)\n                    break;\n            }\n    \n            if
        (val != 0 &amp;&amp; val2 != 0 &amp;&amp; val3 != 0)\n                break;\n        }\n    \n        Console.WriteLine($\"Day
        1, calculating {val} * {val2} * {val3}\");\n        Console.WriteLine($\"Day
        1, result: {val * val2 * val3}\");\n    }\n\nThe `List&lt;int&gt;` is the
        list containing all the integers from the source read from file.", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_gepibxb",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;C#&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Maybe
        not the most elegant solution, but it did quite the trick.&lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;private static void Day1Part1(List&amp;lt;int&amp;gt;
        list)\n{\n    int val = 0;\n    int val2 = 0;\n\n    for (int i1 = 0; i1 &amp;lt;
        list.Count; i1++)\n    {\n        for (int i2 = 1; i2 &amp;lt; list.Count;
        i2++)\n        {\n            if (list[i1] + list[i2] != 2020)\n                continue;\n\n            val
        = list[i1];\n            val2 = list[i2];\n            break;\n        }\n\n        if
        (val != 0 &amp;amp;&amp;amp; val2 != 0)\n            break;\n    }\n\n    Console.WriteLine($&amp;quot;Day
        1, calculating {val} * {val2}&amp;quot;);\n    Console.WriteLine($&amp;quot;Day
        1, result: {val * val2}&amp;quot;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;private static void Day1Part2(List&amp;lt;int&amp;gt;
        list)\n{\n    int val = 0;\n    int val2 = 0;\n    int val3 = 0;\n\n    for
        (int i1 = 0; i1 &amp;lt; list.Count; i1++)\n    {\n        for (int i2 = 1;
        i2 &amp;lt; list.Count; i2++)\n        {\n            for (int i3 = 2; i3
        &amp;lt; list.Count; i3++)\n            {\n                if (list[i1] +
        list[i2] + list[i3] != 2020)\n                    continue;\n\n                val
        = list[i1];\n                val2 = list[i2];\n                val3 = list[i3];\n                break;\n            }\n\n            if
        (val != 0 &amp;amp;&amp;amp; val2 != 0 &amp;amp;&amp;amp; val3 != 0)\n                break;\n        }\n\n        if
        (val != 0 &amp;amp;&amp;amp; val2 != 0 &amp;amp;&amp;amp; val3 != 0)\n            break;\n    }\n\n    Console.WriteLine($&amp;quot;Day
        1, calculating {val} * {val2} * {val3}&amp;quot;);\n    Console.WriteLine($&amp;quot;Day
        1, result: {val * val2 * val3}&amp;quot;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The
        &lt;code&gt;List&amp;lt;int&amp;gt;&lt;/code&gt; is the list containing all
        the integers from the source read from file.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gepibxb/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607184522.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gep6yex", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Lispwizard", "can_mod_post": false, "created_utc":
        1607177561.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_56lorqhk", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "# Emacs lisp (elisp) inside termux emacs
        26.3 on Galaxy Tab A 10\"\n\n    (require''cl)\n    (defun hadds-to (n list-of-numbers
        target)\n      \"return list of n individual numbers and indices that add
        up to target\"\n      (let ((l (length list-of-numbers))\n            (numbers-and-indices\n             (sort
        (loop for i from 0 for n in list-of-numbers\n                         collect
        (list n i))\n                   #''(lambda (a b) (&lt; (car a) (car b))))))\n        (let
        ((ht (make-hash-table)))\n          ;; put list of number and index for each
        number into hash table\n          (loop for e in numbers-and-indices do (setf
        (gethash (car e) ht) e))\n          (cond ((eql n 2)\n                 (loop
        for (n i) in numbers-and-indices\n                       for deficit = (-
        target n)\n                       while (&gt; deficit 0) ;; works because
        we sorted list\n                       for (other-n other-index) = (gethash
        deficit ht)\n                       when (and other-n ;; don''t use same number
        twice\n                                 (not (eql other-index i))) \n                       return
        (list n i other-n other-index)))\n                ((eql n 3)\n                 (catch
        ''answer\n                   (loop for (n1 i1) in numbers-and-indices\n                         for
        c from 0 ;; for starting inner loop past us\n                         do (catch
        ''inner\n                              (loop for (n2 i2) in (nthcdr (1+ c)
        numbers-and-indices)\n                                    for partial = (+
        n1 n2)\n                                    for deficit = (- target partial)\n                                    when
        (&lt;= deficit 0)\n                                    do ;; already past
        target value, abandon inner loop\n                                    (throw
        ''inner nil)\n                                    for (other-n other-index)
        = (gethash deficit ht)\n                                    when (and other-n\n                                              (not
        (eql other-index i1))\n                                              (not
        (eql other-index i2)))\n                                    do (throw ''answer\n                                              (list
        n1 i1 n2 i2 other-n other-index)))))))\n                (t (debug \"nyi\"))))))\n    \n    ;;
        Part 1 - input to m-: or c-x c-e\n    ;; (apply ''* (loop for (n) on (hadds-to
        2 *day1-part1-input* 2020) by ''cddr collect n))\n    \n    ;; Part 2 (same
        as last but 2 -&gt; 3)\n    ;; (apply ''* (loop for (n) on (hadds-to 3 *day1-part1-input*
        2020) by ''cddr collect n))", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gep6yex", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Emacs
        lisp (elisp) inside termux emacs 26.3 on Galaxy Tab A 10&amp;quot;&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;(require&amp;#39;cl)\n(defun
        hadds-to (n list-of-numbers target)\n  &amp;quot;return list of n individual
        numbers and indices that add up to target&amp;quot;\n  (let ((l (length list-of-numbers))\n        (numbers-and-indices\n         (sort
        (loop for i from 0 for n in list-of-numbers\n                     collect
        (list n i))\n               #&amp;#39;(lambda (a b) (&amp;lt; (car a) (car
        b))))))\n    (let ((ht (make-hash-table)))\n      ;; put list of number and
        index for each number into hash table\n      (loop for e in numbers-and-indices
        do (setf (gethash (car e) ht) e))\n      (cond ((eql n 2)\n             (loop
        for (n i) in numbers-and-indices\n                   for deficit = (- target
        n)\n                   while (&amp;gt; deficit 0) ;; works because we sorted
        list\n                   for (other-n other-index) = (gethash deficit ht)\n                   when
        (and other-n ;; don&amp;#39;t use same number twice\n                             (not
        (eql other-index i))) \n                   return (list n i other-n other-index)))\n            ((eql
        n 3)\n             (catch &amp;#39;answer\n               (loop for (n1 i1)
        in numbers-and-indices\n                     for c from 0 ;; for starting
        inner loop past us\n                     do (catch &amp;#39;inner\n                          (loop
        for (n2 i2) in (nthcdr (1+ c) numbers-and-indices)\n                                for
        partial = (+ n1 n2)\n                                for deficit = (- target
        partial)\n                                when (&amp;lt;= deficit 0)\n                                do
        ;; already past target value, abandon inner loop\n                                (throw
        &amp;#39;inner nil)\n                                for (other-n other-index)
        = (gethash deficit ht)\n                                when (and other-n\n                                          (not
        (eql other-index i1))\n                                          (not (eql
        other-index i2)))\n                                do (throw &amp;#39;answer\n                                          (list
        n1 i1 n2 i2 other-n other-index)))))))\n            (t (debug &amp;quot;nyi&amp;quot;))))))\n\n;;
        Part 1 - input to m-: or c-x c-e\n;; (apply &amp;#39;* (loop for (n) on (hadds-to
        2 *day1-part1-input* 2020) by &amp;#39;cddr collect n))\n\n;; Part 2 (same
        as last but 2 -&amp;gt; 3)\n;; (apply &amp;#39;* (loop for (n) on (hadds-to
        3 *day1-part1-input* 2020) by &amp;#39;cddr collect n))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gep6yex/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607177561.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "geot9ge", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "4rgento", "can_mod_post": false, "created_utc":
        1607164588.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 3,
        "author_fullname": "t2_50gp3", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "My slow solution in Raku:\n\n    use v6;\n    \n    #
        tails (1, 2, 3) = (1 =&gt; (2, 3), 2 =&gt; 3)\n    sub tails(@a) {\n        if
        @a { # The list is not emmpty\n            return lazy (@a[0] =&gt; @a[1..*],
        slip(tails(@a[1..*])));\n        } else {\n            return ();\n        }\n    }\n    \n    my
        @input = ''input/Day01''.IO.lines;\n    \n    # Part 1\n    tails(@input)\n        .map({($_.key
        =&gt; $_.value.first: * == (2020 - $_.key))})\n        .first({$_.value})\n        .map({
        $_.key * $_.value })\n        .map: *.say;\n    \n    # Part 2\n    sub find_pair(Int:D
        $total, *@a where {$_.all ~~ Int}) {\n        return tails(@a)\n            .map(
        {($_.key =&gt; $_.value.first: * == ($total - $_.key))} )\n            .first:
        *.value;\n    }\n    \n    tails(@input.map: *.Int) # Coerces the input to
        a list of integer\n        .map( {($_.key =&gt; find_pair(2020 - $_.key, $_.value))})\n        .first({$_.value})\n        .map({
        $_.key * $_.value.key * $_.value.value })\n        .map: *.say;", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_geot9ge",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My slow solution in
        Raku:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use v6;\n\n# tails (1, 2, 3) = (1
        =&amp;gt; (2, 3), 2 =&amp;gt; 3)\nsub tails(@a) {\n    if @a { # The list
        is not emmpty\n        return lazy (@a[0] =&amp;gt; @a[1..*], slip(tails(@a[1..*])));\n    }
        else {\n        return ();\n    }\n}\n\nmy @input = &amp;#39;input/Day01&amp;#39;.IO.lines;\n\n#
        Part 1\ntails(@input)\n    .map({($_.key =&amp;gt; $_.value.first: * == (2020
        - $_.key))})\n    .first({$_.value})\n    .map({ $_.key * $_.value })\n    .map:
        *.say;\n\n# Part 2\nsub find_pair(Int:D $total, *@a where {$_.all ~~ Int})
        {\n    return tails(@a)\n        .map( {($_.key =&amp;gt; $_.value.first:
        * == ($total - $_.key))} )\n        .first: *.value;\n}\n\ntails(@input.map:
        *.Int) # Coerces the input to a list of integer\n    .map( {($_.key =&amp;gt;
        find_pair(2020 - $_.key, $_.value))})\n    .first({$_.value})\n    .map({
        $_.key * $_.value.key * $_.value.value })\n    .map: *.say;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geot9ge/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607164588.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "geot0me", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "MichalMarsalek", "can_mod_post": false,
        "created_utc": 1607164309.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 1, "author_fullname": "t2_idz5q4m", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Python:\n\n    def
        solve(inp):\n        nums = set(intcolumn(inp)) #helper function to load a
        column integer vector from string\n        for a in nums:\n            for
        b in nums - {a}:\n                if a + b == 2020:\n                    part1
        = a * b\n                c = 2020 - a - b\n                if c in nums:\n                    part2
        = a * b * c\n        return part1, part2", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_geot0me", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        solve(inp):\n    nums = set(intcolumn(inp)) #helper function to load a column
        integer vector from string\n    for a in nums:\n        for b in nums - {a}:\n            if
        a + b == 2020:\n                part1 = a * b\n            c = 2020 - a -
        b\n            if c in nums:\n                part2 = a * b * c\n    return
        part1, part2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geot0me/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607164309.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "geojn61", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Krakhan", "can_mod_post": false, "created_utc":
        1607154116.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_37h4l", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "**Ruby**\n\nStarted to learn Ruby for fun,
        so going to try to do these challenges this year with that then just using
        C# for what I do at my work:\n\n    expenses = File.read(\"day1input.txt\").split.map{|s|
        s.to_i}\n    \n    # Part 1\n    puts \"#{expenses.combination(2).to_a.select{|c|
        c.reduce(:+) == 2020}.first.reduce(:*)}\"\n    \n    # Part 2\n    puts \"#{expenses.combination(3).to_a.select{|c|
        c.reduce(:+) == 2020}.first.reduce(:*)}\"", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_geojn61", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Started
        to learn Ruby for fun, so going to try to do these challenges this year with
        that then just using C# for what I do at my work:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;expenses
        = File.read(&amp;quot;day1input.txt&amp;quot;).split.map{|s| s.to_i}\n\n#
        Part 1\nputs &amp;quot;#{expenses.combination(2).to_a.select{|c| c.reduce(:+)
        == 2020}.first.reduce(:*)}&amp;quot;\n\n# Part 2\nputs &amp;quot;#{expenses.combination(3).to_a.select{|c|
        c.reduce(:+) == 2020}.first.reduce(:*)}&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geojn61/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607154116.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "geoeu9w", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "ZoltarTheGreat69", "can_mod_post": false,
        "created_utc": 1607149656.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 2, "author_fullname": "t2_83i0md6e", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Finished this in less
        than an hour. JavaScript for memes, no data structures so my complexity is
        bad  \n\n\n**JavaScript**  \n\n\n    var numbers = new Int8Array();\n    \n    function
        loadFile() {\n        var fs = require(\"fs\");\n        var text = fs.readFileSync(\"input.txt\").toString(''utf-8'');\n        numbers
        = text.split(\"\\n\").map(Number);\n    }\n    \n    loadFile();\n    numbers.sort(function
        (a, b) { return a - b; });\n    \n    for (i = 0; i &lt; numbers.length; i++)
        {\n        var currNum = numbers[i];\n        var solved = false;\n        if
        (currNum == 0) {\n            continue;\n        }\n    \n        for (j =
        numbers.length - 1; j &gt; i; j--) {\n            if (numbers[i] + numbers[j]
        &gt; 2020) {\n                continue;\n            }\n            else if
        (numbers[i] + numbers[j] == 2020) {\n                solved = true;\n                console.log(numbers[i]
        + numbers[j]);\n                console.log(numbers[i] * numbers[j]);\n                break;\n            }\n            else
        if (numbers[i] + numbers[j] &lt; 2020) {\n                break;\n            }\n        }\n    \n        if
        (solved) {\n            console.log(\"WOO\");\n            break;\n        }\n    }\n    \n    for
        (i = 0; i &lt; numbers.length; i++) {\n        var currNum = numbers[i];\n        var
        solved = false;\n        if (currNum == 0) {\n            continue;\n        }\n    \n        for
        (j = i + 1; j &lt; numbers.length; j++) {\n    \n            for (k = j +
        1; k &lt; numbers.length; k++) {\n    \n                if (numbers[i] + numbers[j]
        + numbers[k] &lt; 2020) {\n                    continue;\n                }\n                else
        if (numbers[i] + numbers[j] + numbers[k] == 2020) {\n                    solved
        = true;\n                    console.log(numbers[i] + numbers[j] + numbers[k]);\n                    console.log(numbers[i]
        * numbers[j] * numbers[k]);\n                    break;\n                }\n                else
        if (numbers[i] + numbers[j] + numbers[k] &gt; 2020) {\n                    break;\n                }\n            }\n            \n            if
        (solved) {\n                console.log(\"WOO\");\n                break;\n            }\n        }\n    \n        if
        (solved) {\n            console.log(\"WOO\");\n            break;\n        }\n    }",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_geoeu9w", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Finished
        this in less than an hour. JavaScript for memes, no data structures so my
        complexity is bad  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var
        numbers = new Int8Array();\n\nfunction loadFile() {\n    var fs = require(&amp;quot;fs&amp;quot;);\n    var
        text = fs.readFileSync(&amp;quot;input.txt&amp;quot;).toString(&amp;#39;utf-8&amp;#39;);\n    numbers
        = text.split(&amp;quot;\\n&amp;quot;).map(Number);\n}\n\nloadFile();\nnumbers.sort(function
        (a, b) { return a - b; });\n\nfor (i = 0; i &amp;lt; numbers.length; i++)
        {\n    var currNum = numbers[i];\n    var solved = false;\n    if (currNum
        == 0) {\n        continue;\n    }\n\n    for (j = numbers.length - 1; j &amp;gt;
        i; j--) {\n        if (numbers[i] + numbers[j] &amp;gt; 2020) {\n            continue;\n        }\n        else
        if (numbers[i] + numbers[j] == 2020) {\n            solved = true;\n            console.log(numbers[i]
        + numbers[j]);\n            console.log(numbers[i] * numbers[j]);\n            break;\n        }\n        else
        if (numbers[i] + numbers[j] &amp;lt; 2020) {\n            break;\n        }\n    }\n\n    if
        (solved) {\n        console.log(&amp;quot;WOO&amp;quot;);\n        break;\n    }\n}\n\nfor
        (i = 0; i &amp;lt; numbers.length; i++) {\n    var currNum = numbers[i];\n    var
        solved = false;\n    if (currNum == 0) {\n        continue;\n    }\n\n    for
        (j = i + 1; j &amp;lt; numbers.length; j++) {\n\n        for (k = j + 1; k
        &amp;lt; numbers.length; k++) {\n\n            if (numbers[i] + numbers[j]
        + numbers[k] &amp;lt; 2020) {\n                continue;\n            }\n            else
        if (numbers[i] + numbers[j] + numbers[k] == 2020) {\n                solved
        = true;\n                console.log(numbers[i] + numbers[j] + numbers[k]);\n                console.log(numbers[i]
        * numbers[j] * numbers[k]);\n                break;\n            }\n            else
        if (numbers[i] + numbers[j] + numbers[k] &amp;gt; 2020) {\n                break;\n            }\n        }\n\n        if
        (solved) {\n            console.log(&amp;quot;WOO&amp;quot;);\n            break;\n        }\n    }\n\n    if
        (solved) {\n        console.log(&amp;quot;WOO&amp;quot;);\n        break;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geoeu9w/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607149656.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 1, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "genep3t", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "**F#**\n\n    let input = \"InputFiles/Day1Input.txt\"
        |&gt; Seq.ofFileLines\n    let expenses = input |&gt; Seq.map (int) |&gt;
        Array.ofSeq\n    \n    let e1, e2 =\n        [for i in 0..expenses.Length-1
        do\n            for j in 0..expenses.Length-1 -&gt; if i &lt;&gt; j then (i,j)
        else (-1,-1)]\n        |&gt; List.filter (fun (a,b) -&gt; a &gt; 0 &amp;&amp;
        expenses.[a] + expenses.[b] = 2020)\n        |&gt; List.head\n\n    printf
        \"Part 1: result is %d\\n\" (expenses.[e1] * expenses.[e2]) \n   \n    let
        e1, e2, e3 =\n        [for i in 0..expenses.Length-1 do\n            for j
        in 0..expenses.Length-1 do\n                for k in 0..expenses.Length-1
        -&gt; if i &lt;&gt; j &amp;&amp; j &lt;&gt; k then (i,j,k) else (-1,-1,-1)]\n        |&gt;
        List.filter (fun (a,b,c) -&gt; a &gt; 0 &amp;&amp; expenses.[a] + expenses.[b]
        + expenses.[c] = 2020)\n        |&gt; List.head\n\n    printf \"Part 2: result
        is %d\\n\" (expenses.[e1] * expenses.[e2] * expenses.[e3]) \n    0", "edited":
        false, "downs": 0, "author_flair_css_class": null, "collapsed": false, "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;F#&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let
        input = &amp;quot;InputFiles/Day1Input.txt&amp;quot; |&amp;gt; Seq.ofFileLines\nlet
        expenses = input |&amp;gt; Seq.map (int) |&amp;gt; Array.ofSeq\n\nlet e1,
        e2 =\n    [for i in 0..expenses.Length-1 do\n        for j in 0..expenses.Length-1
        -&amp;gt; if i &amp;lt;&amp;gt; j then (i,j) else (-1,-1)]\n    |&amp;gt;
        List.filter (fun (a,b) -&amp;gt; a &amp;gt; 0 &amp;amp;&amp;amp; expenses.[a]
        + expenses.[b] = 2020)\n    |&amp;gt; List.head\n\nprintf &amp;quot;Part 1:
        result is %d\\n&amp;quot; (expenses.[e1] * expenses.[e2]) \n\nlet e1, e2,
        e3 =\n    [for i in 0..expenses.Length-1 do\n        for j in 0..expenses.Length-1
        do\n            for k in 0..expenses.Length-1 -&amp;gt; if i &amp;lt;&amp;gt;
        j &amp;amp;&amp;amp; j &amp;lt;&amp;gt; k then (i,j,k) else (-1,-1,-1)]\n    |&amp;gt;
        List.filter (fun (a,b,c) -&amp;gt; a &amp;gt; 0 &amp;amp;&amp;amp; expenses.[a]
        + expenses.[b] + expenses.[c] = 2020)\n    |&amp;gt; List.head\n\nprintf &amp;quot;Part
        2: result is %d\\n&amp;quot; (expenses.[e1] * expenses.[e2] * expenses.[e3])
        \n0\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "subreddit_type": "public",
        "can_gild": false, "top_awarded_type": null, "unrepliable_reason": null, "author_flair_text_color":
        "dark", "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/genep3t/",
        "num_reports": null, "locked": false, "name": "t1_genep3t", "created": 1607126144.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1607126144.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gemeuh8", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "xMufasaa", "can_mod_post": false, "created_utc":
        1607107695.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_dg44z", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "**PoSH**\n\nMay not be as pretty as some
        others, but it''s functional.\n\n    Write-Host \"+++++++++++++++++++++++++++++++++++++++++++++++++++++++\"
        -ForegroundColor Green\n    Write-Host \"+             Advent of Code 2020;
        Day 1              +\" -ForegroundColor Green\n    Write-Host \"+++++++++++++++++++++++++++++++++++++++++++++++++++++++\"
        -ForegroundColor Green\n    \n    Set-Location $PSScriptRoot\n    \n    $input
        = Get-Content \"day1input.txt\"\n    \n    Write-Host \"++++++ Part 1 ++++++\"
        -ForegroundColor Yellow\n    Try {\n        :part1 foreach ($x in $input)
        {\n            foreach ($y in $input) {\n                if (([int]$x + [int]$y)
        -eq 2020) {\n                    Write-Output \"$x + $y = 2020\"\n                    $prod
        = ([int]$x * [int]$y)\n                    Write-Output \"Product is $prod\"\n                    Break
        part1\n                }\n            }\n        }\n    } Catch {\n        Throw
        $_.Exception.Message\n    }\n    \n    Write-Host \"++++++ Part 2 ++++++\"
        -ForegroundColor Yellow\n    Try {\n        foreach ($x in $input) {\n            foreach
        ($y in $input) {\n                foreach ($z in $input) {\n                    if
        (([int]$x + [int]$y + [int]$z) -eq 2020) {\n                        Write-Output
        \"$x + $y + $z = 2020\"\n                        $prod = ([int]$x * [int]$y
        * [int]$z)\n                        Write-Output \"Product is $prod\"\n                        Exit\n                    }\n                }\n            }\n        }\n    }
        Catch {\n        Throw $_.Exception.Message\n    }", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_gemeuh8", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;PoSH&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;May
        not be as pretty as some others, but it&amp;#39;s functional.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Write-Host
        &amp;quot;+++++++++++++++++++++++++++++++++++++++++++++++++++++++&amp;quot;
        -ForegroundColor Green\nWrite-Host &amp;quot;+             Advent of Code
        2020; Day 1              +&amp;quot; -ForegroundColor Green\nWrite-Host &amp;quot;+++++++++++++++++++++++++++++++++++++++++++++++++++++++&amp;quot;
        -ForegroundColor Green\n\nSet-Location $PSScriptRoot\n\n$input = Get-Content
        &amp;quot;day1input.txt&amp;quot;\n\nWrite-Host &amp;quot;++++++ Part 1 ++++++&amp;quot;
        -ForegroundColor Yellow\nTry {\n    :part1 foreach ($x in $input) {\n        foreach
        ($y in $input) {\n            if (([int]$x + [int]$y) -eq 2020) {\n                Write-Output
        &amp;quot;$x + $y = 2020&amp;quot;\n                $prod = ([int]$x * [int]$y)\n                Write-Output
        &amp;quot;Product is $prod&amp;quot;\n                Break part1\n            }\n        }\n    }\n}
        Catch {\n    Throw $_.Exception.Message\n}\n\nWrite-Host &amp;quot;++++++
        Part 2 ++++++&amp;quot; -ForegroundColor Yellow\nTry {\n    foreach ($x in
        $input) {\n        foreach ($y in $input) {\n            foreach ($z in $input)
        {\n                if (([int]$x + [int]$y + [int]$z) -eq 2020) {\n                    Write-Output
        &amp;quot;$x + $y + $z = 2020&amp;quot;\n                    $prod = ([int]$x
        * [int]$y * [int]$z)\n                    Write-Output &amp;quot;Product is
        $prod&amp;quot;\n                    Exit\n                }\n            }\n        }\n    }\n}
        Catch {\n    Throw $_.Exception.Message\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gemeuh8/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607107695.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gelxlfj", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "euidzero", "can_mod_post": false, "created_utc":
        1607099521.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 3,
        "author_fullname": "t2_b50hb", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "**Perl part1, golfed**\n\n    #!/usr/bin/perl\n    while(&lt;&gt;)
        {\n     for$v(@a){die$v*$_ if$v+$_==2020}\n     push@a,$_;\n    }", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_gelxlfj",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Perl part1,
        golfed&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl\nwhile(&amp;lt;&amp;gt;)
        {\n for$v(@a){die$v*$_ if$v+$_==2020}\n push@a,$_;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gelxlfj/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607099521.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gesgro8", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "specbug",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_geqazlr", "score":
        1, "author_fullname": "t2_dvk7rwt", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "In Part 2, we essentially
        want `x + y + z = 2020`. We can formulate this as `x + p = 2020` where `p
        = y + z`.\n\nHere, **sum\\_2020** takes in the *input array* and the value
        for which it''ll find the ***two*** integers that sum to that total (assume
        same logic as fn. for Part 1).\n\n1. Pass the input array and **total=2020**\n2.
        Branches into the *if* condition. Here we have arr\\[i\\] = (some no.) such
        that `arr[i] + i_hat = 2020 (x + p = 2020)`. Now if we can find two no. (\\[a,
        b\\]) such that `a + b = i_hat (y + z = p)`. Which is where recursion comes
        in, I''m essentially calling the same fn. again tofind 2 nos. whose sum is
        *i\\_hat.*\n3. Calls **sum\\_2020** with inp. array (not encountering the
        same element again) and **total = i\\_hat**\n4. Branches into the *else* condition
        and returns two no.s that sum to i\\_hat (here i\\_hat is the initial i\\_hat
        or the total we passed or `p`, and we have found `y, z`, such that `y + z
        = p`)\n5. If it finds two such no.s (*not None*), it returns their product
        and multiplies with our initial no.`x * (y * z)`, such that `y + z = p` and
        `x + p = 2020`\n\nHope this helps.", "edited": false, "top_awarded_type":
        null, "downs": 0, "author_flair_css_class": null, "name": "t1_gesgro8", "is_submitter":
        false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In Part 2, we essentially
        want &lt;code&gt;x + y + z = 2020&lt;/code&gt;. We can formulate this as &lt;code&gt;x
        + p = 2020&lt;/code&gt; where &lt;code&gt;p = y + z&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Here,
        &lt;strong&gt;sum_2020&lt;/strong&gt; takes in the &lt;em&gt;input array&lt;/em&gt;
        and the value for which it&amp;#39;ll find the &lt;strong&gt;&lt;em&gt;two&lt;/em&gt;&lt;/strong&gt;
        integers that sum to that total (assume same logic as fn. for Part 1).&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Pass
        the input array and &lt;strong&gt;total=2020&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;Branches
        into the &lt;em&gt;if&lt;/em&gt; condition. Here we have arr[i] = (some no.)
        such that &lt;code&gt;arr[i] + i_hat = 2020 (x + p = 2020)&lt;/code&gt;. Now
        if we can find two no. ([a, b]) such that &lt;code&gt;a + b = i_hat (y + z
        = p)&lt;/code&gt;. Which is where recursion comes in, I&amp;#39;m essentially
        calling the same fn. again tofind 2 nos. whose sum is &lt;em&gt;i_hat.&lt;/em&gt;&lt;/li&gt;\n&lt;li&gt;Calls
        &lt;strong&gt;sum_2020&lt;/strong&gt; with inp. array (not encountering the
        same element again) and &lt;strong&gt;total = i_hat&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;Branches
        into the &lt;em&gt;else&lt;/em&gt; condition and returns two no.s that sum
        to i_hat (here i_hat is the initial i_hat or the total we passed or &lt;code&gt;p&lt;/code&gt;,
        and we have found &lt;code&gt;y, z&lt;/code&gt;, such that &lt;code&gt;y +
        z = p&lt;/code&gt;)&lt;/li&gt;\n&lt;li&gt;If it finds two such no.s (&lt;em&gt;not
        None&lt;/em&gt;), it returns their product and multiplies with our initial
        no.&lt;code&gt;x * (y * z)&lt;/code&gt;, such that &lt;code&gt;y + z = p&lt;/code&gt;
        and &lt;code&gt;x + p = 2020&lt;/code&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Hope
        this helps.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_k4e4lm", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gesgro8/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1607237720.0,
        "author_flair_text": null, "treatment_tags": [], "created_utc": 1607237720.0,
        "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0, "depth":
        2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "geqazlr", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Technoturnovers", "can_mod_post": false,
        "created_utc": 1607199130.0, "send_replies": true, "parent_id": "t1_gel2gg9",
        "score": 2, "author_fullname": "t2_vjg8x", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "I''m trying to understand
        this solution, but the recursion is totally fucking with me.", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_geqazlr",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m trying to
        understand this solution, but the recursion is totally fucking with me.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geqazlr/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607199130.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gel2gg9", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "specbug", "can_mod_post": false, "created_utc":
        1607081003.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_dvk7rwt", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "**Python**\n\n    # Part 1\n    def sum_2020(arr):\n    \ttotal
        = 2020\n    \n    \tfor i in arr:\n    \t\ti_hat = total - i\n    \t\tif i_hat
        in arr:\n    \t\t\treturn i*i_hat\n    \n    \n    # Part 2\n    def sum_2020(arr,
        total):\n    \n    \tfor i in range(len(arr)):\n    \t\ti_hat = total - arr[i]\n    \t\tif
        total == 2020:\n    \t\t\tsub_com = sum_2020(arr[i+1:], i_hat)\n    \t\t\tif
        sub_com is not None:\n    \t\t\t\treturn arr[i]*sub_com\n    \t\telse:\n    \t\t\tif
        i_hat in arr:\n    \t\t\t\treturn arr[i]*i_hat\n    \n    \treturn None",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_gel2gg9", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#
        Part 1\ndef sum_2020(arr):\n    total = 2020\n\n    for i in arr:\n        i_hat
        = total - i\n        if i_hat in arr:\n            return i*i_hat\n\n\n# Part
        2\ndef sum_2020(arr, total):\n\n    for i in range(len(arr)):\n        i_hat
        = total - arr[i]\n        if total == 2020:\n            sub_com = sum_2020(arr[i+1:],
        i_hat)\n            if sub_com is not None:\n                return arr[i]*sub_com\n        else:\n            if
        i_hat in arr:\n                return arr[i]*i_hat\n\n    return None\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gel2gg9/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607081003.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gekypxo", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "maxmage006", "can_mod_post": false, "created_utc":
        1607077745.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 4,
        "author_fullname": "t2_63qpzrdl", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "**iOS Shortcuts**\n\nAt first, I did it in
        Python. That was too sane. Had to redo it with iOS Shortcuts:\n\n[https://i.imgur.com/dPSmALc.jpg](https://i.imgur.com/dPSmALc.jpg)\n\nPerformance
        is miserable. Takes about 3:10,38 Minutes and 7% of Battery on my iPad Air
        2. Apple, pls improve Shortcuts Performance!\n\nAnyways, have a look at my
        [other submissions](https://github.com/mwerner96/advent_of_code_2020). Maybe
        I come up with some other stupid stuff.", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_gekypxo", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;iOS Shortcuts&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;At
        first, I did it in Python. That was too sane. Had to redo it with iOS Shortcuts:&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://i.imgur.com/dPSmALc.jpg\"&gt;https://i.imgur.com/dPSmALc.jpg&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Performance
        is miserable. Takes about 3:10,38 Minutes and 7% of Battery on my iPad Air
        2. Apple, pls improve Shortcuts Performance!&lt;/p&gt;\n\n&lt;p&gt;Anyways,
        have a look at my &lt;a href=\"https://github.com/mwerner96/advent_of_code_2020\"&gt;other
        submissions&lt;/a&gt;. Maybe I come up with some other stupid stuff.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gekypxo/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607077745.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gekrbxg", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "YaBoyChipsAhoy", "can_mod_post": false,
        "created_utc": 1607070206.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 3, "author_fullname": "t2_rzpeij8", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "rust\n\nmy first rust
        program!\n\nhttps://github.com/ExpoSeed/advent_of_code_2020/blob/main/src/day1.rs",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_gekrbxg", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;rust&lt;/p&gt;\n\n&lt;p&gt;my
        first rust program!&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/ExpoSeed/advent_of_code_2020/blob/main/src/day1.rs\"&gt;https://github.com/ExpoSeed/advent_of_code_2020/blob/main/src/day1.rs&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gekrbxg/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607070206.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gem1c4f", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "quappa",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_gekh7f9", "score":
        3, "author_fullname": "t2_itjdk", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "And it allows spaces inside
        identifiers! :)", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_gem1c4f", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;And
        it allows spaces inside identifiers! :)&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gem1c4f/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607101305.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1607101305.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gekh7f9", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "daggerdragon", "can_mod_post": false,
        "created_utc": 1607061313.0, "send_replies": true, "parent_id": "t1_gekew3n",
        "score": 4, "author_fullname": "t2_60niu", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "Comrade, what even?",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_gekh7f9", "is_submitter": true, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Comrade,
        what even?&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null,
        "distinguished": "moderator", "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_k4e4lm", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gekh7f9/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1607061313.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 4}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "gekew3n", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "quappa",
        "can_mod_post": false, "created_utc": 1607059421.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_itjdk", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "#
        School Algorithmic language (\u0428\u043a\u043e\u043b\u044c\u043d\u044b\u0439
        \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0439).\n\nThe
        language was created in the Soviet Union in 1980s as a teaching tool for schools.
        Uses Russian keywords and identifiers.\n\n    \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c
        \u0424\u0430\u0439\u043b\u044b\n\n    \u043b\u0438\u0442 \u0438\u043c\u044f
        \u0444\u0430\u0439\u043b\u0430\n    \u0446\u0435\u043b \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c
        \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432, \u0436\u0435\u043b\u0430\u0435\u043c\u0430\u044f
        \u0441\u0443\u043c\u043c\u0430\n\n    \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430
        := \"\u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\"\n    \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c
        \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432 := 5000\n    \u0436\u0435\u043b\u0430\u0435\u043c\u0430\u044f
        \u0441\u0443\u043c\u043c\u0430 := 2020\n\n    \u0430\u043b\u0433 \u041a\u043e\u0440\u043e\u0447\u0443\u043d
        \u0434\u0435\u043d\u044c 1 \u0447\u0430\u0441\u0442\u044c 1\n    # \u0441\u0447\u0438\u0442\u0430\u0442\u044c
        \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0441\u0435\u043b, \u043d\u0430\u0439\u0442\u0438
        \u0441\u0440\u0435\u0434\u0438 \u043d\u0438\u0445 \u043f\u0430\u0440\u0443,\n    #
        \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432 \u0441\u0443\u043c\u043c\u0435
        \u0434\u0430\u0451\u0442 \"\u0436\u0435\u043b\u0430\u0435\u043c\u0430\u044f
        \u0441\u0443\u043c\u043c\u0430\",\n    # \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438
        \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u0435\u043b
        \u0432 \u044d\u0442\u043e\u0439 \u043f\u0430\u0440\u0435\n      \u0434\u0430\u043d\u043e
        \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044c
        \u043d\u0430 \u0447\u0442\u0435\u043d\u0438\u0435(\u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430)\n    \u043d\u0430\u0447\n      \u0444\u0430\u0439\u043b
        \u0432\u0432\n      \u0432\u0432 := \u043e\u0442\u043a\u0440\u044b\u0442\u044c
        \u043d\u0430 \u0447\u0442\u0435\u043d\u0438\u0435(\u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430)\n\n      \u0446\u0435\u043b
        \u0442\u0430\u0431 \u0440\u0430\u0441\u0445\u043e\u0434\u044b[1:\u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c
        \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432]\n      \u0446\u0435\u043b
        \u043a\u043e\u043b\u0432\u043e \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432\n      \u043a\u043e\u043b\u0432\u043e
        \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432 := 0\n      \u043d\u0446
        \u043f\u043e\u043a\u0430 \u043d\u0435 \u043a\u043e\u043d\u0435\u0446 \u0444\u0430\u0439\u043b\u0430(\u0432\u0432)
        \u0438 \u043a\u043e\u043b\u0432\u043e \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432
        &lt; \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432\n        \u043a\u043e\u043b\u0432\u043e
        \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432 := \u043a\u043e\u043b\u0432\u043e
        \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432 + 1\n        \u0432\u0432\u043e\u0434
        \u0432\u0432, \u0440\u0430\u0441\u0445\u043e\u0434\u044b[\u043a\u043e\u043b\u0432\u043e
        \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432], \u043d\u0441\n      \u043a\u0446\n\n      \u0437\u0430\u043a\u0440\u044b\u0442\u044c(\u0432\u0432)\n\n      \u0446\u0435\u043b
        \u043f\u0435\u0440\u0432\u044b\u0439, \u0432\u0442\u043e\u0440\u043e\u0439\n      \u043d\u0446
        \u0434\u043b\u044f \u043f\u0435\u0440\u0432\u044b\u0439 \u043e\u0442 1 \u0434\u043e
        \u043a\u043e\u043b\u0432\u043e \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432
        - 1\n        \u043d\u0446 \u0434\u043b\u044f \u0432\u0442\u043e\u0440\u043e\u0439
        \u043e\u0442 \u043f\u0435\u0440\u0432\u044b\u0439 \u0434\u043e \u043a\u043e\u043b\u0432\u043e
        \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432\n          \u0435\u0441\u043b\u0438
        \u0440\u0430\u0441\u0445\u043e\u0434\u044b[\u043f\u0435\u0440\u0432\u044b\u0439]
        + \u0440\u0430\u0441\u0445\u043e\u0434\u044b[\u0432\u0442\u043e\u0440\u043e\u0439]
        = \u0436\u0435\u043b\u0430\u0435\u043c\u0430\u044f \u0441\u0443\u043c\u043c\u0430\n            \u0442\u043e\n              \u0432\u044b\u0432\u043e\u0434
        \u0440\u0430\u0441\u0445\u043e\u0434\u044b[\u043f\u0435\u0440\u0432\u044b\u0439]
        * \u0440\u0430\u0441\u0445\u043e\u0434\u044b[\u0432\u0442\u043e\u0440\u043e\u0439]\n              \u0432\u044b\u0445\u043e\u0434\n          \u0432\u0441\u0435\n        \u043a\u0446\n      \u043a\u0446\n    \u043a\u043e\u043d",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_gekew3n", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;School
        Algorithmic language (\u0428\u043a\u043e\u043b\u044c\u043d\u044b\u0439 \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0439).&lt;/h1&gt;\n\n&lt;p&gt;The
        language was created in the Soviet Union in 1980s as a teaching tool for schools.
        Uses Russian keywords and identifiers.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c
        \u0424\u0430\u0439\u043b\u044b\n\n\u043b\u0438\u0442 \u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430\n\u0446\u0435\u043b
        \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432,
        \u0436\u0435\u043b\u0430\u0435\u043c\u0430\u044f \u0441\u0443\u043c\u043c\u0430\n\n\u0438\u043c\u044f
        \u0444\u0430\u0439\u043b\u0430 := &amp;quot;\u0432\u0445\u043e\u0434\u043d\u044b\u0435
        \u0434\u0430\u043d\u043d\u044b\u0435&amp;quot;\n\u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c
        \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432 := 5000\n\u0436\u0435\u043b\u0430\u0435\u043c\u0430\u044f
        \u0441\u0443\u043c\u043c\u0430 := 2020\n\n\u0430\u043b\u0433 \u041a\u043e\u0440\u043e\u0447\u0443\u043d
        \u0434\u0435\u043d\u044c 1 \u0447\u0430\u0441\u0442\u044c 1\n# \u0441\u0447\u0438\u0442\u0430\u0442\u044c
        \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0441\u0435\u043b, \u043d\u0430\u0439\u0442\u0438
        \u0441\u0440\u0435\u0434\u0438 \u043d\u0438\u0445 \u043f\u0430\u0440\u0443,\n#
        \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432 \u0441\u0443\u043c\u043c\u0435
        \u0434\u0430\u0451\u0442 &amp;quot;\u0436\u0435\u043b\u0430\u0435\u043c\u0430\u044f
        \u0441\u0443\u043c\u043c\u0430&amp;quot;,\n# \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438
        \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u0435\u043b
        \u0432 \u044d\u0442\u043e\u0439 \u043f\u0430\u0440\u0435\n  \u0434\u0430\u043d\u043e
        \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044c
        \u043d\u0430 \u0447\u0442\u0435\u043d\u0438\u0435(\u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430)\n\u043d\u0430\u0447\n  \u0444\u0430\u0439\u043b
        \u0432\u0432\n  \u0432\u0432 := \u043e\u0442\u043a\u0440\u044b\u0442\u044c
        \u043d\u0430 \u0447\u0442\u0435\u043d\u0438\u0435(\u0438\u043c\u044f \u0444\u0430\u0439\u043b\u0430)\n\n  \u0446\u0435\u043b
        \u0442\u0430\u0431 \u0440\u0430\u0441\u0445\u043e\u0434\u044b[1:\u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c
        \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432]\n  \u0446\u0435\u043b \u043a\u043e\u043b\u0432\u043e
        \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432\n  \u043a\u043e\u043b\u0432\u043e
        \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432 := 0\n  \u043d\u0446 \u043f\u043e\u043a\u0430
        \u043d\u0435 \u043a\u043e\u043d\u0435\u0446 \u0444\u0430\u0439\u043b\u0430(\u0432\u0432)
        \u0438 \u043a\u043e\u043b\u0432\u043e \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432
        &amp;lt; \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432\n    \u043a\u043e\u043b\u0432\u043e
        \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432 := \u043a\u043e\u043b\u0432\u043e
        \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432 + 1\n    \u0432\u0432\u043e\u0434
        \u0432\u0432, \u0440\u0430\u0441\u0445\u043e\u0434\u044b[\u043a\u043e\u043b\u0432\u043e
        \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432], \u043d\u0441\n  \u043a\u0446\n\n  \u0437\u0430\u043a\u0440\u044b\u0442\u044c(\u0432\u0432)\n\n  \u0446\u0435\u043b
        \u043f\u0435\u0440\u0432\u044b\u0439, \u0432\u0442\u043e\u0440\u043e\u0439\n  \u043d\u0446
        \u0434\u043b\u044f \u043f\u0435\u0440\u0432\u044b\u0439 \u043e\u0442 1 \u0434\u043e
        \u043a\u043e\u043b\u0432\u043e \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432
        - 1\n    \u043d\u0446 \u0434\u043b\u044f \u0432\u0442\u043e\u0440\u043e\u0439
        \u043e\u0442 \u043f\u0435\u0440\u0432\u044b\u0439 \u0434\u043e \u043a\u043e\u043b\u0432\u043e
        \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432\n      \u0435\u0441\u043b\u0438
        \u0440\u0430\u0441\u0445\u043e\u0434\u044b[\u043f\u0435\u0440\u0432\u044b\u0439]
        + \u0440\u0430\u0441\u0445\u043e\u0434\u044b[\u0432\u0442\u043e\u0440\u043e\u0439]
        = \u0436\u0435\u043b\u0430\u0435\u043c\u0430\u044f \u0441\u0443\u043c\u043c\u0430\n        \u0442\u043e\n          \u0432\u044b\u0432\u043e\u0434
        \u0440\u0430\u0441\u0445\u043e\u0434\u044b[\u043f\u0435\u0440\u0432\u044b\u0439]
        * \u0440\u0430\u0441\u0445\u043e\u0434\u044b[\u0432\u0442\u043e\u0440\u043e\u0439]\n          \u0432\u044b\u0445\u043e\u0434\n      \u0432\u0441\u0435\n    \u043a\u0446\n  \u043a\u0446\n\u043a\u043e\u043d\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gekew3n/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607059421.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gejl0ro", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Fanatsu", "can_mod_post": false, "created_utc":
        1607039563.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 3,
        "author_fullname": "t2_7rtvp", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Here is my Node JS solution\n\n    var fs
        = require(\"fs\");\n    var text = fs.readFileSync(\"./text.txt\", \"utf-8\");\n    var
        textByLine = text.split(''\\n'').map(function(item) {\n        return parseInt(item,
        10);\n    });\n    \n    // Part 1\n    for(let i = 0; i &lt; textByLine.length;
        i++) {\n        for(let j = i; j &lt; textByLine.length; j++) {\n    \n            if
        (i !== j) {\n    \t    if (textByLine[i] + textByLine[j] == 2020) {\n    \t        console.log(textByLine[i]*textByLine[j]);\n    \t    }\n            }\n        }\n    };\n    \n    //
        Part 2\n    for (let i = 0; i &lt; textByLine.length; i++) {\n        for
        (let j = i; j &lt; textByLine.length; j++) {\n            for (let k = j;
        k &lt; textByLine.length; k++) {\n    \n                if (i !== j !== k)
        {\n    \t\tif (textByLine[i] + textByLine[j] + textByLine[k] == 2020) {\n    \t\t    console.log(textByLine[i]*textByLine[j]*textByLine[k]);\n    \t\t}\n    \t    }\n    \t}\n        }\n    };",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_gejl0ro", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here
        is my Node JS solution&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var fs = require(&amp;quot;fs&amp;quot;);\nvar
        text = fs.readFileSync(&amp;quot;./text.txt&amp;quot;, &amp;quot;utf-8&amp;quot;);\nvar
        textByLine = text.split(&amp;#39;\\n&amp;#39;).map(function(item) {\n    return
        parseInt(item, 10);\n});\n\n// Part 1\nfor(let i = 0; i &amp;lt; textByLine.length;
        i++) {\n    for(let j = i; j &amp;lt; textByLine.length; j++) {\n\n        if
        (i !== j) {\n        if (textByLine[i] + textByLine[j] == 2020) {\n            console.log(textByLine[i]*textByLine[j]);\n        }\n        }\n    }\n};\n\n//
        Part 2\nfor (let i = 0; i &amp;lt; textByLine.length; i++) {\n    for (let
        j = i; j &amp;lt; textByLine.length; j++) {\n        for (let k = j; k &amp;lt;
        textByLine.length; k++) {\n\n            if (i !== j !== k) {\n        if
        (textByLine[i] + textByLine[j] + textByLine[k] == 2020) {\n            console.log(textByLine[i]*textByLine[j]*textByLine[k]);\n        }\n        }\n    }\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gejl0ro/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607039563.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gej95jw", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "J-Swift", "can_mod_post": false, "created_utc":
        1607033219.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_4z1sk", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "C#\n\nhttps://github.com/J-Swift/advent-of-code-2020/tree/master/day_01",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_gej95jw", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C#&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/J-Swift/advent-of-code-2020/tree/master/day_01\"&gt;https://github.com/J-Swift/advent-of-code-2020/tree/master/day_01&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gej95jw/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607033219.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "geiwnzt", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "lucbloom", "can_mod_post": false, "created_utc":
        1607027864.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 3,
        "author_fullname": "t2_vof3v4a", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "JavaScript, Part 2\n\n    let input = [ ,
        , , , ]; // Regex replaced ''\\n'' with '',''.\n    for (i = 0; i &lt; input.length
        - 2; ++i) {\n      for (j = i + 1; j &lt; input.length - 1; ++j) {\n        for
        (k = j + 1; k &lt; input.length; ++k) {\n          if (input[i] + input[j]
        + input[k] == 2020) {\n            console.log(i, input[i]);\n            console.log(j,
        input[j]);\n            console.log(k, input[k]);\n            console.log(input[i]
        * input[j] * input[k]);\n          }\n        }\n      }\n    }", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_geiwnzt",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;JavaScript, Part 2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let
        input = [ , , , , ]; // Regex replaced &amp;#39;\\n&amp;#39; with &amp;#39;,&amp;#39;.\nfor
        (i = 0; i &amp;lt; input.length - 2; ++i) {\n  for (j = i + 1; j &amp;lt;
        input.length - 1; ++j) {\n    for (k = j + 1; k &amp;lt; input.length; ++k)
        {\n      if (input[i] + input[j] + input[k] == 2020) {\n        console.log(i,
        input[i]);\n        console.log(j, input[j]);\n        console.log(k, input[k]);\n        console.log(input[i]
        * input[j] * input[k]);\n      }\n    }\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geiwnzt/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607027864.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gejnm9k",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1607041017.0, "send_replies": true,
        "parent_id": "t1_geifjqz", "score": 1, "author_fullname": "t2_60niu", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Your code is hard to read on old.reddit.  As per our [posting guidelines](https://www.reddit.com/r/adventofcode/wiki/index#wiki_how_do_i_format_code.3F),
        would you please edit it using old.reddit''s four-spaces formatting instead
        of new.reddit''s triple backticks?\n\nPut four spaces before every code line.  (If
        you''re using new.reddit, click the button in the editor that says \"Switch
        to Markdown\" first.)\n\n`[space space space space]public static void main()`\n`[space
        space space space][more spaces for indenting]/* more code here*/`\n\nturns
        into\n\n    public static void main()\n        /* more code here */\n\nAlternatively,
        stuff your code in /u/topaz2078''s [`paste`](https://topaz.github.io/paste/)
        or an external repo instead and link to that instead.\n\nThanks!", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_gejnm9k",
        "is_submitter": true, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Your code is hard to
        read on old.reddit.  As per our &lt;a href=\"https://www.reddit.com/r/adventofcode/wiki/index#wiki_how_do_i_format_code.3F\"&gt;posting
        guidelines&lt;/a&gt;, would you please edit it using old.reddit&amp;#39;s
        four-spaces formatting instead of new.reddit&amp;#39;s triple backticks?&lt;/p&gt;\n\n&lt;p&gt;Put
        four spaces before every code line.  (If you&amp;#39;re using new.reddit,
        click the button in the editor that says &amp;quot;Switch to Markdown&amp;quot;
        first.)&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;[space space space space]public
        static void main()&lt;/code&gt;\n&lt;code&gt;[space space space space][more
        spaces for indenting]/* more code here*/&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;turns
        into&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public static void main()\n    /*
        more code here */\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Alternatively, stuff
        your code in &lt;a href=\"/u/topaz2078\"&gt;/u/topaz2078&lt;/a&gt;&amp;#39;s
        &lt;a href=\"https://topaz.github.io/paste/\"&gt;&lt;code&gt;paste&lt;/code&gt;&lt;/a&gt;
        or an external repo instead and link to that instead.&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": "moderator", "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gejnm9k/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607041017.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "geifjqz", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "noidesto", "can_mod_post": false, "created_utc":
        1607020712.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_x4gdu", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Clojure \n```\n(ns aoc-2020.core\n  (:require
        [clojure.math.combinatorics :as combo]))\n\n(defn readinput\n  \"reads aoc
        input\"\n  [day]\n  (map read-string (clojure.string/split-lines (slurp (format
        \"adventofcode/2020/%s\" day)))))\n\n(defn day1part1 []\n  (let [lines (readinput
        \"day1\")]\n    (filter #(not= nil %) (for [combo (combo/combinations lines
        2)]\n      (if (= 2020 (+ (first combo) (second combo)))\n        (* (first
        combo) (second combo)))))))\n(println (day1part1))\n\n(defn day1part2 []\n  (let
        [lines (readinput \"day1\")]\n    (filter #(not= nil %) (for [combo (combo/combinations
        lines 3)]\n      (if (= 2020 (+ (first combo) (second combo) (last combo)))\n        (*
        (first combo) (second combo) (last combo)))))))\n(println (day1part2))\n```",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_geifjqz", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Clojure
        \n```\n(ns aoc-2020.core\n  (:require [clojure.math.combinatorics :as combo]))&lt;/p&gt;\n\n&lt;p&gt;(defn
        readinput\n  &amp;quot;reads aoc input&amp;quot;\n  [day]\n  (map read-string
        (clojure.string/split-lines (slurp (format &amp;quot;adventofcode/2020/%s&amp;quot;
        day)))))&lt;/p&gt;\n\n&lt;p&gt;(defn day1part1 []\n  (let [lines (readinput
        &amp;quot;day1&amp;quot;)]\n    (filter #(not= nil %) (for [combo (combo/combinations
        lines 2)]\n      (if (= 2020 (+ (first combo) (second combo)))\n        (*
        (first combo) (second combo)))))))\n(println (day1part1))&lt;/p&gt;\n\n&lt;p&gt;(defn
        day1part2 []\n  (let [lines (readinput &amp;quot;day1&amp;quot;)]\n    (filter
        #(not= nil %) (for [combo (combo/combinations lines 3)]\n      (if (= 2020
        (+ (first combo) (second combo) (last combo)))\n        (* (first combo) (second
        combo) (last combo)))))))\n(println (day1part2))\n```&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geifjqz/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607020712.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gei9jsh", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "ramrunner0xff", "can_mod_post": false,
        "created_utc": 1607017927.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 2, "author_fullname": "t2_n66l8ma", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "scheme (chicken) [repo](https://github.com/ramrunner/AOC2020)\n\n\n    (import
        format)\n    (import srfi-1)\n    (import (chicken io))\n \n    (define (shiftlist
        lst)\n      (append (cdr lst) (list (car lst))))\n \n    (define (allpairs
        lst)\n      (letrec* ((tmp lst)\n                (res ''())\n                (loop
        (lambda (i)\n                  (if (&gt; i 0)\n                      (begin\n                        (set!
        res (append res (zip lst tmp)))\n                        (set! tmp (shiftlist
        tmp))\n                        (loop (- i 1)))))))\n        (loop (length
        lst))\n\n    (call-with-input-file \"inputs/smallinput\"\n      (lambda (port)\n        (let*
        ((strdata (read-lines port))\n               (data (map string-&gt;number
        strdata))\n               (allp (allpairs data)))\n          (format #t \n                  \"all
        pairs with sum 2020: ~A~%\" \n                  (filter (lambda (x)\n                                  (=
        2020\n                                     (reduce + 0 x))) allp))\n          (format
        #t \n                  \"all triplets : ~A~%\"\n                  (map (lambda
        (x)\n                         (filter (lambda (y)\n                                   (=
        (- 2020 x) \n                                      (reduce + 0 y))) \n                                 allp))
        \n                        data)))))", "edited": 1607018535.0, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_gei9jsh", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;scheme (chicken) &lt;a href=\"https://github.com/ramrunner/AOC2020\"&gt;repo&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(import
        format)\n(import srfi-1)\n(import (chicken io))\n\n(define (shiftlist lst)\n  (append
        (cdr lst) (list (car lst))))\n\n(define (allpairs lst)\n  (letrec* ((tmp lst)\n            (res
        &amp;#39;())\n            (loop (lambda (i)\n              (if (&amp;gt; i
        0)\n                  (begin\n                    (set! res (append res (zip
        lst tmp)))\n                    (set! tmp (shiftlist tmp))\n                    (loop
        (- i 1)))))))\n    (loop (length lst))\n\n(call-with-input-file &amp;quot;inputs/smallinput&amp;quot;\n  (lambda
        (port)\n    (let* ((strdata (read-lines port))\n           (data (map string-&amp;gt;number
        strdata))\n           (allp (allpairs data)))\n      (format #t \n              &amp;quot;all
        pairs with sum 2020: ~A~%&amp;quot; \n              (filter (lambda (x)\n                              (=
        2020\n                                 (reduce + 0 x))) allp))\n      (format
        #t \n              &amp;quot;all triplets : ~A~%&amp;quot;\n              (map
        (lambda (x)\n                     (filter (lambda (y)\n                               (=
        (- 2020 x) \n                                  (reduce + 0 y))) \n                             allp))
        \n                    data)))))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gei9jsh/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607017927.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gekrhyz", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "simonbaars",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_geisum6", "score":
        1, "author_fullname": "t2_11dlo0", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "Indeed, you''re correct.
        But well, I assigned a low probability to that, and prefer the short solution
        :)", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_gekrhyz", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Indeed,
        you&amp;#39;re correct. But well, I assigned a low probability to that, and
        prefer the short solution :)&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_k4e4lm", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gekrhyz/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1607070371.0,
        "author_flair_text": null, "treatment_tags": [], "created_utc": 1607070371.0,
        "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0, "depth":
        2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "geisum6", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "one_excited_guy", "can_mod_post": false,
        "created_utc": 1607026366.0, "send_replies": true, "parent_id": "t1_gehl6jk",
        "score": 1, "author_fullname": "t2_iqp0030", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "if 1010 existed exactly
        once in input this would falsely give you 1020100, wouldnt it?", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_geisum6",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;if 1010 existed exactly
        once in input this would falsely give you 1020100, wouldnt it?&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geisum6/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607026366.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gehl6jk", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "simonbaars", "can_mod_post": false, "created_utc":
        1607005889.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 4,
        "author_fullname": "t2_11dlo0", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "[Haskell](https://github.com/SimonBaars/AdventOfCode-Haskell/blob/master/2020/Day1.hs)\n\n  \nThis
        is why I love Haskell:\n\n    head [x*y | x &lt;- input, y &lt;- input, x+y
        == 2020]", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gehl6jk", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a
        href=\"https://github.com/SimonBaars/AdventOfCode-Haskell/blob/master/2020/Day1.hs\"&gt;Haskell&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This
        is why I love Haskell:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;head [x*y | x &amp;lt;-
        input, y &amp;lt;- input, x+y == 2020]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gehl6jk/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607005889.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gehl3dd", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "simonbaars", "can_mod_post": false, "created_utc":
        1607005838.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_11dlo0", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "[Java](https://github.com/SimonBaars/AdventOfCode-Java/blob/master/src/main/java/com/sbaars/adventofcode/year20/days/Day1.java)  \nTook
        a stream approach for part one, and a for-loop approach for part 2, just to
        be unnecessarily hipster.", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gehl3dd", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a
        href=\"https://github.com/SimonBaars/AdventOfCode-Java/blob/master/src/main/java/com/sbaars/adventofcode/year20/days/Day1.java\"&gt;Java&lt;/a&gt;&lt;br/&gt;\nTook
        a stream approach for part one, and a for-loop approach for part 2, just to
        be unnecessarily hipster.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gehl3dd/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607005838.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gehgzgk", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "marGEEKa", "can_mod_post": false, "created_utc":
        1607003381.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_9rogf", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "My **JavaScript** [solution](https://topaz.github.io/paste/#XQAAAQBAAwAAAAAAAAATnUpmZJL1WShhPwix31hiGfwWyxAuKA+kbvQr5qOgg8vS4s2Bj14HMnsHy6yFtnVStD1iQxSQZzZb+rW+eYKuVNAHSQR53CvXNmR9fmVyeK2aA1yQaXyL1Bl570ULVo0tr4g2N1/yID73KTywaGGV5oPuqJtwN8CYx2vbGYrIOZFca/uOs+nYdlOpuYXT4QPhCS2D4nPWPAXwxOI1WVSbXZfXz++O29o7d7G0iXeCcwRJwJRZjp0xxSIvV/KyMWfeh5/bifrNF4Y04h3nfj7GgUD2diVq5QT5++ra73hyRZYNIuGWMkmkutsuRkjJ/7cWVVb+6W2OkriEb1lhXeaKBoOZDdDLTUPKYljmP6KHyUV7cRXB/SBb9X9B5OHkeeHDoAu791OTdpnUoj5CHKpujD1hObJhsoZaAuah/74mT4Q=)\n\nThis
        year, I''ve decided to use a basic [scaffolding tool](https://www.npmjs.com/package/advent-of-code).
        If anyone else is using the advent-of-code npm module, I''d love to see your
        template files.", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gehgzgk", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My
        &lt;strong&gt;JavaScript&lt;/strong&gt; &lt;a href=\"https://topaz.github.io/paste/#XQAAAQBAAwAAAAAAAAATnUpmZJL1WShhPwix31hiGfwWyxAuKA+kbvQr5qOgg8vS4s2Bj14HMnsHy6yFtnVStD1iQxSQZzZb+rW+eYKuVNAHSQR53CvXNmR9fmVyeK2aA1yQaXyL1Bl570ULVo0tr4g2N1/yID73KTywaGGV5oPuqJtwN8CYx2vbGYrIOZFca/uOs+nYdlOpuYXT4QPhCS2D4nPWPAXwxOI1WVSbXZfXz++O29o7d7G0iXeCcwRJwJRZjp0xxSIvV/KyMWfeh5/bifrNF4Y04h3nfj7GgUD2diVq5QT5++ra73hyRZYNIuGWMkmkutsuRkjJ/7cWVVb+6W2OkriEb1lhXeaKBoOZDdDLTUPKYljmP6KHyUV7cRXB/SBb9X9B5OHkeeHDoAu791OTdpnUoj5CHKpujD1hObJhsoZaAuah/74mT4Q=\"&gt;solution&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This
        year, I&amp;#39;ve decided to use a basic &lt;a href=\"https://www.npmjs.com/package/advent-of-code\"&gt;scaffolding
        tool&lt;/a&gt;. If anyone else is using the advent-of-code npm module, I&amp;#39;d
        love to see your template files.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gehgzgk/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607003381.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gfx1l9v",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "saw-lau",
        "can_mod_post": false, "created_utc": 1608037600.0, "send_replies": true,
        "parent_id": "t1_gehf06l", "score": 1, "author_fullname": "t2_omerp", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "D''oh! Of *course*!!!", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gfx1l9v", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;D&amp;#39;oh!
        Of &lt;em&gt;course&lt;/em&gt;!!!&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gfx1l9v/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1608037600.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gehf06l", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "89netraM", "can_mod_post": false, "created_utc":
        1607002061.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 3,
        "author_fullname": "t2_12dd0x", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "**C#**\n\n[Part 1](https://github.com/89netraM/Advent-of-Code/blob/master/2020/1/1.csx)  \n[Part
        2](https://github.com/89netraM/Advent-of-Code/blob/master/2020/1/2.csx)",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_gehf06l", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;C#&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/89netraM/Advent-of-Code/blob/master/2020/1/1.csx\"&gt;Part
        1&lt;/a&gt;&lt;br/&gt;\n&lt;a href=\"https://github.com/89netraM/Advent-of-Code/blob/master/2020/1/2.csx\"&gt;Part
        2&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gehf06l/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1607002061.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geoxykf", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Barbonetor",
        "can_mod_post": false, "created_utc": 1607169776.0, "send_replies": true,
        "parent_id": "t1_gehcs7z", "score": 1, "author_fullname": "t2_hvjp6", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "It is the first time i see filter used in python and i wanted to ask isn''t
        your function (findSummingTerms) a fancy looking brute force?  \n\n\nAlso,
        thanks for letting me discover filter!", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_geoxykf", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It is the first time i see
        filter used in python and i wanted to ask isn&amp;#39;t your function (findSummingTerms)
        a fancy looking brute force?  &lt;/p&gt;\n\n&lt;p&gt;Also, thanks for letting
        me discover filter!&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_k4e4lm", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geoxykf/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1607169776.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "gehcs7z", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Jens_472",
        "can_mod_post": false, "created_utc": 1607000436.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_orh4h", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "**Python**\n\nCombinatorics
        Solution + general solution for n\n\n    from math import prod\n    from itertools
        import combinations\n    \n    \n    def findSummingTerms(inputList, target,
        numberOfTerms):\n        return next(filter(lambda n: sum(n) == target, combinations(inputList,
        numberOfTerms)))\n    \n    \n    def partOne(input):\n        return prod(findSummingTerms(input,
        2020, 2))\n    \n    \n    def partTwo(input):\n        return prod(findSummingTerms(input,
        2020, 3))\n    \n    \n    def partN(input, n):\n        return prod(findSummingTerms(input,
        2020, n))\n    \n    \n    with open(''input.txt'', ''r'') as inputFile:\n        input
        = list(map(int, inputFile.read().split(''\\n'')))\n    \n        print(''Part
        One =&gt; '', partOne(input))\n        print(''Part Two =&gt; '', partTwo(input))\n        print(''(N=4)
        =&gt; '', partN(input, 4))", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gehcs7z", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Combinatorics
        Solution + general solution for n&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from
        math import prod\nfrom itertools import combinations\n\n\ndef findSummingTerms(inputList,
        target, numberOfTerms):\n    return next(filter(lambda n: sum(n) == target,
        combinations(inputList, numberOfTerms)))\n\n\ndef partOne(input):\n    return
        prod(findSummingTerms(input, 2020, 2))\n\n\ndef partTwo(input):\n    return
        prod(findSummingTerms(input, 2020, 3))\n\n\ndef partN(input, n):\n    return
        prod(findSummingTerms(input, 2020, n))\n\n\nwith open(&amp;#39;input.txt&amp;#39;,
        &amp;#39;r&amp;#39;) as inputFile:\n    input = list(map(int, inputFile.read().split(&amp;#39;\\n&amp;#39;)))\n\n    print(&amp;#39;Part
        One =&amp;gt; &amp;#39;, partOne(input))\n    print(&amp;#39;Part Two =&amp;gt;
        &amp;#39;, partTwo(input))\n    print(&amp;#39;(N=4) =&amp;gt; &amp;#39;,
        partN(input, 4))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gehcs7z/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607000436.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gehatpw", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "Wilfred-kun", "can_mod_post": false,
        "created_utc": 1606998888.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 6, "author_fullname": "t2_9odb7py", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "**SQL**\n\n    SELECT
        DISTINCT * FROM\n    (SELECT(a.value * b.value) FROM input a, input b WHERE
        a.value + b.value = 2020),\n    (SELECT(a.value * b.value * c.value) FROM
        input a, input b, input c WHERE a.value+b.value+c.value=2020)\n\n**C**\n\n    #include&lt;stdio.h&gt;\n    main(){FILE*d=fopen(\"input\",\"r\");int
        l=0,i=0,j=-1,k,c,a,f;while((c=getc(d))!=-1)c==10?l++:0;rewind(d);int n[l];while(i&lt;l)fscanf(d,\"%d\\n\",&amp;n[i++]);for(i=j;++i&lt;l;a=n[i])for(j=-1;++j&lt;l;f=n[j])for(k=j-1;++k&lt;l;c=n[k])c+a==2020?printf(\"%d\\n\",c*a):c+a+f==2020?printf(\"%d\\n\",c*f*a):0;}\n\n**Python3**\n\n    from
        itertools import combinations as c\n    d=list(map(int,open(\"input\",\"r\").readlines()))\n    print([x*y
        for x,y in c(d,2)if x+y==2020][0],[x*y*z for x,y,z in c(d,3)if x+y+z==2020][0])\n    print([x*(2020-x)
        for x in d[::2] if 2020-x in d])", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_gehatpw", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;SQL&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;SELECT
        DISTINCT * FROM\n(SELECT(a.value * b.value) FROM input a, input b WHERE a.value
        + b.value = 2020),\n(SELECT(a.value * b.value * c.value) FROM input a, input
        b, input c WHERE a.value+b.value+c.value=2020)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;\nmain(){FILE*d=fopen(&amp;quot;input&amp;quot;,&amp;quot;r&amp;quot;);int
        l=0,i=0,j=-1,k,c,a,f;while((c=getc(d))!=-1)c==10?l++:0;rewind(d);int n[l];while(i&amp;lt;l)fscanf(d,&amp;quot;%d\\n&amp;quot;,&amp;amp;n[i++]);for(i=j;++i&amp;lt;l;a=n[i])for(j=-1;++j&amp;lt;l;f=n[j])for(k=j-1;++k&amp;lt;l;c=n[k])c+a==2020?printf(&amp;quot;%d\\n&amp;quot;,c*a):c+a+f==2020?printf(&amp;quot;%d\\n&amp;quot;,c*f*a):0;}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Python3&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from
        itertools import combinations as c\nd=list(map(int,open(&amp;quot;input&amp;quot;,&amp;quot;r&amp;quot;).readlines()))\nprint([x*y
        for x,y in c(d,2)if x+y==2020][0],[x*y*z for x,y,z in c(d,3)if x+y+z==2020][0])\nprint([x*(2020-x)
        for x in d[::2] if 2020-x in d])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gehatpw/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606998888.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 6}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geib5c7",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ramrunner0xff",
        "can_mod_post": false, "created_utc": 1607018664.0, "send_replies": true,
        "parent_id": "t1_gehadms", "score": 1, "author_fullname": "t2_n66l8ma", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "good docu! noice! :)", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_geib5c7", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;good
        docu! noice! :)&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_k4e4lm", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geib5c7/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1607018664.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "gehadms", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "blu3r4y",
        "can_mod_post": false, "created_utc": 1606998510.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_mqy1z", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "**x86-32
        Assembly**\n\nAs part of my \"25 puzzles, 25 languages\" adventure I present
        you a x86-32 solution ;)\n\n[https://github.com/blu3r4y/AdventOfLanguages2020/blob/main/src/day1.s](https://github.com/blu3r4y/AdventOfLanguages2020/blob/main/src/day1.s)",
        "edited": 1607201401.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gehadms", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;x86-32
        Assembly&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;As part of my &amp;quot;25 puzzles,
        25 languages&amp;quot; adventure I present you a x86-32 solution ;)&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/blu3r4y/AdventOfLanguages2020/blob/main/src/day1.s\"&gt;https://github.com/blu3r4y/AdventOfLanguages2020/blob/main/src/day1.s&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gehadms/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606998510.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "geh8jls", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Wolfrost_", "can_mod_post": false, "created_utc":
        1606996870.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 3,
        "author_fullname": "t2_4dui5c5d", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Here''s mine, C++ only \\^\\^\n\n[https://github.com/DoubleHub/advent\\_of\\_code/blob/master/2020/report\\_repair.cpp](https://github.com/DoubleHub/advent_of_code/blob/master/2020/report_repair.cpp)",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_geh8jls", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s
        mine, C++ only ^^&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/DoubleHub/advent_of_code/blob/master/2020/report_repair.cpp\"&gt;https://github.com/DoubleHub/advent_of_code/blob/master/2020/report_repair.cpp&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geh8jls/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606996870.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "geh21pj", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Nosp1", "can_mod_post": false, "created_utc":
        1606989972.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_d0w2v", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "This my day 1 in Java:\n\n    part 1:\n    List&lt;Integer&gt;
        integers = FileInputReader.getConnection(\"https://adventofcode.com/2020/day/1/input\")\n    integers.forEach(i
        -&gt;\n                integers.stream()\n                    .filter(x -&gt;
        i + x == 2020)\n                    .mapToInt(x -&gt; i * x)\n                    .forEach(System.out::println));\n        \n    part
        2\n    integers.forEach(i -&gt;\n     integers.forEach(x -&gt; \n        integers.stream()\n                .filter(y
        -&gt; i + x + y == 2020)\n                .distinct()\n                .mapToInt(w
        -&gt; i * x * w)\n                .forEach(System.out::println)));", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_geh21pj",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This my day 1 in Java:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;part
        1:\nList&amp;lt;Integer&amp;gt; integers = FileInputReader.getConnection(&amp;quot;https://adventofcode.com/2020/day/1/input&amp;quot;)\nintegers.forEach(i
        -&amp;gt;\n            integers.stream()\n                .filter(x -&amp;gt;
        i + x == 2020)\n                .mapToInt(x -&amp;gt; i * x)\n                .forEach(System.out::println));\n\npart
        2\nintegers.forEach(i -&amp;gt;\n integers.forEach(x -&amp;gt; \n    integers.stream()\n            .filter(y
        -&amp;gt; i + x + y == 2020)\n            .distinct()\n            .mapToInt(w
        -&amp;gt; i * x * w)\n            .forEach(System.out::println)));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geh21pj/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606989972.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gegukud", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Iain_M_Norman", "can_mod_post": false,
        "created_utc": 1606982157.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 2, "author_fullname": "t2_iu374", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "# C# - Brute force
        nested goodness\n\n[Day 1 on github](https://github.com/IainMNorman/aoc2020/blob/master/Aoc2020/Day1/Day1.cs)",
        "edited": 1607240060.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gegukud", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;C#
        - Brute force nested goodness&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/IainMNorman/aoc2020/blob/master/Aoc2020/Day1/Day1.cs\"&gt;Day
        1 on github&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gegukud/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1606982157.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gegh7e3",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "1-more",
        "can_mod_post": false, "created_utc": 1606971415.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_e1nfa", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "Solved
        it in Elm after doing it in JS. Ellie is [here](https://ellie-app.com/bHDKRHbgsQNa1),
        my github is [here](https://github.com/perkee/advent-2020/blob/main/src/D01.elm).
        I''m using parsers and making an actual webapp where you can paste in your
        input, so it''s just a little bit bloated. In 4 minutes I may abandon that
        for d3", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gegh7e3", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Solved
        it in Elm after doing it in JS. Ellie is &lt;a href=\"https://ellie-app.com/bHDKRHbgsQNa1\"&gt;here&lt;/a&gt;,
        my github is &lt;a href=\"https://github.com/perkee/advent-2020/blob/main/src/D01.elm\"&gt;here&lt;/a&gt;.
        I&amp;#39;m using parsers and making an actual webapp where you can paste
        in your input, so it&amp;#39;s just a little bit bloated. In 4 minutes I may
        abandon that for d3&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gegh7e3/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1606971415.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gegc6qw",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Gaboik",
        "can_mod_post": false, "created_utc": 1606968252.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_130e81", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "#
        TypeScript\n\nAyt so at first I had the intention to go with a language that
        I didn''t know already, maybe Eiffel or Rust but I felt tired and went with
        the comfortable option of using a language I''m very familiar with. I''m kind
        of proud of my performance here because I thought about it for around 5 minutes
        and basically wrote the whole thing from top to bottom almost and succeeded
        on first try, granted, this is not the programming challenge of the century
        but ya know, it felt good. Anyway, here it is!\n\n    import { readFileSync
        } from ''fs'';\n    \n    const expenses = readFileSync(''input.txt'').toString(''utf8'').split(''\\n'').map(n
        =&gt; parseInt(n));\n    \n    const threeNumberSumIndices = (numbers: number[],
        targetSum: number) : [number, number, number] | null=&gt; {\n        let first,
        second, third;\n        for (let i = 0; i &lt; numbers.length; i++) {\n            first
        = numbers[i];\n            for (let j = i + 1; j &lt; numbers.length; j++)
        {\n                second = numbers[j];\n                for (let k = i +
        1; k &lt; numbers.length; k++) {\n                    third = numbers[k];\n                    if
        (first + second + third === targetSum) {\n                        return [i,
        j, k];\n                    }\n                }\n            }\n        }\n    \n        return
        null;\n    }\n    \n    /**\n     * Finds the indices of two numbers adding
        up to `targetSum` in a list of numbers. Returns `null` if\n     * no combination
        of two numbers is found\n     * @param numbers The list of numbers in which
        to find indices\n     * @param targetSum The sum to find two numbers adding
        up to\n     */\n    const twoNumberSumIndices = (numbers: number[], targetSum:
        number) : [number, number] | null=&gt; {\n        let currentLHS, currentRHS;\n        for
        (let i = 0; i &lt; numbers.length; i++) {\n            currentLHS = numbers[i];\n            for
        (let j = i + 1; j &lt; numbers.length; j++) {\n                currentRHS
        = numbers[j];\n                if (currentLHS + currentRHS === targetSum)
        {\n                    return [i, j];\n                }\n            }\n        }\n    \n        return
        null;\n    }\n    \n    const twoIndices = twoNumberSumIndices(expenses, 2020);\n    if
        (twoIndices) {\n        const [lhs, rhs] = twoIndices;\n        console.log(\"Chapter
        1\", expenses[lhs] * expenses[rhs]);\n    } else {\n        throw new Error(''No
        indices found'');\n    }\n    \n    const threeIndices = threeNumberSumIndices(expenses,
        2020);\n    if (threeIndices) {\n        const [first, second, third] = threeIndices;\n        console.log(\"Chapter
        2\", expenses[first] * expenses[second] * expenses[third]);\n    } else {\n        throw
        new Error(''No indices found'');\n    }\n\nWhat I''m not proud of is I didn''t
        find a good solution that would be suitable for both chapters at once. Anything
        I thought of I found way too convoluted for nothing and felt like it was more
        obvious to have a function to find 2 and 3 numbers that added up, even though
        it''s obviously less ''dry''. Any feedback on this?", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_gegc6qw", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;TypeScript&lt;/h1&gt;\n\n&lt;p&gt;Ayt
        so at first I had the intention to go with a language that I didn&amp;#39;t
        know already, maybe Eiffel or Rust but I felt tired and went with the comfortable
        option of using a language I&amp;#39;m very familiar with. I&amp;#39;m kind
        of proud of my performance here because I thought about it for around 5 minutes
        and basically wrote the whole thing from top to bottom almost and succeeded
        on first try, granted, this is not the programming challenge of the century
        but ya know, it felt good. Anyway, here it is!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        { readFileSync } from &amp;#39;fs&amp;#39;;\n\nconst expenses = readFileSync(&amp;#39;input.txt&amp;#39;).toString(&amp;#39;utf8&amp;#39;).split(&amp;#39;\\n&amp;#39;).map(n
        =&amp;gt; parseInt(n));\n\nconst threeNumberSumIndices = (numbers: number[],
        targetSum: number) : [number, number, number] | null=&amp;gt; {\n    let first,
        second, third;\n    for (let i = 0; i &amp;lt; numbers.length; i++) {\n        first
        = numbers[i];\n        for (let j = i + 1; j &amp;lt; numbers.length; j++)
        {\n            second = numbers[j];\n            for (let k = i + 1; k &amp;lt;
        numbers.length; k++) {\n                third = numbers[k];\n                if
        (first + second + third === targetSum) {\n                    return [i, j,
        k];\n                }\n            }\n        }\n    }\n\n    return null;\n}\n\n/**\n
        * Finds the indices of two numbers adding up to `targetSum` in a list of numbers.
        Returns `null` if\n * no combination of two numbers is found\n * @param numbers
        The list of numbers in which to find indices\n * @param targetSum The sum
        to find two numbers adding up to\n */\nconst twoNumberSumIndices = (numbers:
        number[], targetSum: number) : [number, number] | null=&amp;gt; {\n    let
        currentLHS, currentRHS;\n    for (let i = 0; i &amp;lt; numbers.length; i++)
        {\n        currentLHS = numbers[i];\n        for (let j = i + 1; j &amp;lt;
        numbers.length; j++) {\n            currentRHS = numbers[j];\n            if
        (currentLHS + currentRHS === targetSum) {\n                return [i, j];\n            }\n        }\n    }\n\n    return
        null;\n}\n\nconst twoIndices = twoNumberSumIndices(expenses, 2020);\nif (twoIndices)
        {\n    const [lhs, rhs] = twoIndices;\n    console.log(&amp;quot;Chapter 1&amp;quot;,
        expenses[lhs] * expenses[rhs]);\n} else {\n    throw new Error(&amp;#39;No
        indices found&amp;#39;);\n}\n\nconst threeIndices = threeNumberSumIndices(expenses,
        2020);\nif (threeIndices) {\n    const [first, second, third] = threeIndices;\n    console.log(&amp;quot;Chapter
        2&amp;quot;, expenses[first] * expenses[second] * expenses[third]);\n} else
        {\n    throw new Error(&amp;#39;No indices found&amp;#39;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What
        I&amp;#39;m not proud of is I didn&amp;#39;t find a good solution that would
        be suitable for both chapters at once. Anything I thought of I found way too
        convoluted for nothing and felt like it was more obvious to have a function
        to find 2 and 3 numbers that added up, even though it&amp;#39;s obviously
        less &amp;#39;dry&amp;#39;. Any feedback on this?&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gegc6qw/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606968252.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gejnocy",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1607041049.0, "send_replies": true,
        "parent_id": "t1_geg5oh0", "score": 1, "author_fullname": "t2_60niu", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Your code is hard to read on old.reddit.  As per our [posting guidelines](https://www.reddit.com/r/adventofcode/wiki/index#wiki_how_do_i_format_code.3F),
        would you please edit it using old.reddit''s four-spaces formatting instead
        of new.reddit''s triple backticks?\n\nPut four spaces before every code line.  (If
        you''re using new.reddit, click the button in the editor that says \"Switch
        to Markdown\" first.)\n\n`[space space space space]public static void main()`\n`[space
        space space space][more spaces for indenting]/* more code here*/`\n\nturns
        into\n\n    public static void main()\n        /* more code here */\n\nAlternatively,
        stuff your code in /u/topaz2078''s [`paste`](https://topaz.github.io/paste/)
        or an external repo instead and link to that instead.\n\nThanks!", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_gejnocy",
        "is_submitter": true, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Your code is hard to
        read on old.reddit.  As per our &lt;a href=\"https://www.reddit.com/r/adventofcode/wiki/index#wiki_how_do_i_format_code.3F\"&gt;posting
        guidelines&lt;/a&gt;, would you please edit it using old.reddit&amp;#39;s
        four-spaces formatting instead of new.reddit&amp;#39;s triple backticks?&lt;/p&gt;\n\n&lt;p&gt;Put
        four spaces before every code line.  (If you&amp;#39;re using new.reddit,
        click the button in the editor that says &amp;quot;Switch to Markdown&amp;quot;
        first.)&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;[space space space space]public
        static void main()&lt;/code&gt;\n&lt;code&gt;[space space space space][more
        spaces for indenting]/* more code here*/&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;turns
        into&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public static void main()\n    /*
        more code here */\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Alternatively, stuff
        your code in &lt;a href=\"/u/topaz2078\"&gt;/u/topaz2078&lt;/a&gt;&amp;#39;s
        &lt;a href=\"https://topaz.github.io/paste/\"&gt;&lt;code&gt;paste&lt;/code&gt;&lt;/a&gt;
        or an external repo instead and link to that instead.&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": "moderator", "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gejnocy/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607041049.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "geg5pkd", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "backtickbot", "can_mod_post": false, "created_utc":
        1606964482.0, "send_replies": true, "parent_id": "t1_geg5oh0", "score": 1,
        "author_fullname": "t2_8n9fijwc", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Hello, SolarBear: code blocks
        using backticks (\\`\\`\\`) don''t work on all versions of Reddit!\n\nSome
        users see [this](https://stalas.alm.lt/backformat/geg5oh0.png) / [this](https://stalas.alm.lt/backformat/geg5oh0.html)
        instead.\n\nTo fix this, indent every line with **4 spaces** instead. It''s
        a bit annoying, but then your code blocks are properly formatted for everyone.\n\nAn
        easy way to do this is to use the [code-block button in the editor](https://stalas.alm.lt/files/new-reddit-codeblock.png).
        If it''s not working, try switching to the fancy-pants editor and back again.\n\n[Comment
        with formatting fixed for old.reddit.com users](https://np.reddit.com/r/backtickbot/comments/k5oxny/httpsnpredditcomradventofcodecommentsk4e4lm2020/)\n\n[FAQ](https://www.reddit.com/r/backtickbot/wiki/index)\n\n^(You
        can opt out by replying with backtickopt6 to this comment.)", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_geg5pkd",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hello, SolarBear: code
        blocks using backticks (```) don&amp;#39;t work on all versions of Reddit!&lt;/p&gt;\n\n&lt;p&gt;Some
        users see &lt;a href=\"https://stalas.alm.lt/backformat/geg5oh0.png\"&gt;this&lt;/a&gt;
        / &lt;a href=\"https://stalas.alm.lt/backformat/geg5oh0.html\"&gt;this&lt;/a&gt;
        instead.&lt;/p&gt;\n\n&lt;p&gt;To fix this, indent every line with &lt;strong&gt;4
        spaces&lt;/strong&gt; instead. It&amp;#39;s a bit annoying, but then your
        code blocks are properly formatted for everyone.&lt;/p&gt;\n\n&lt;p&gt;An
        easy way to do this is to use the &lt;a href=\"https://stalas.alm.lt/files/new-reddit-codeblock.png\"&gt;code-block
        button in the editor&lt;/a&gt;. If it&amp;#39;s not working, try switching
        to the fancy-pants editor and back again.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://np.reddit.com/r/backtickbot/comments/k5oxny/httpsnpredditcomradventofcodecommentsk4e4lm2020/\"&gt;Comment
        with formatting fixed for old.reddit.com users&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://www.reddit.com/r/backtickbot/wiki/index\"&gt;FAQ&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;You
        can opt out by replying with backtickopt6 to this comment.&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geg5pkd/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606964482.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "geg5oh0", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "SolarBear", "can_mod_post": false, "created_utc":
        1606964467.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_1vm8", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "# Racket (Scheme)\n\nI decided to try out
        a functional language for my first \"real\" participation in AoC and settled
        on Racket.\n\nOn day 1 I came up with a (terrible, absolutely terrible) solution
        for the first part but got stuck on part 2.\n\nI spent the better part of
        the evening getting my shit together and I came up with a much more decent
        solution. It''s inefficient and probably still terrible, but much less so
        than on my first try! (code for part 1 available,but commented out)\n\n```scheme\n    #lang
        racket\n\n    ; Read a file\n    (define (input-file filename)\n      (port-&gt;string
        (open-input-file filename) #:close? #t))\n\n    ; Read the file as lines,
        converting them to integers\n    (define (inputs-as-ints filename)\n      (map
        string-&gt;number (string-split (input-file filename))))\n\n    (define (n-plets
        n current lst)\n      (cond\n        [(empty? lst) ''()]\n        [(= n 1)\n          (map
        (lambda (x) (append current (list x))) lst)]\n        [else\n          (append
        (n-plets (- n 1) (append current (list (car lst))) (cdr lst))\n                   (n-plets
        n current (cdr lst)))]))\n\n    ;(define pairs (n-plets 2 ''() (inputs-as-ints
        \"input1.1.txt\")))\n     (define triples (n-plets 3 ''() (inputs-as-ints
        \"input1.1.txt\")))\n\n    ;(apply * (car (filter (lambda (x) (= 2020 (apply
        + x))) pairs)))\n    (apply * (car (filter (lambda (x) (= 2020 (apply + x)))
        triples)))\n```", "edited": 1607048599.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_geg5oh0", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Racket
        (Scheme)&lt;/h1&gt;\n\n&lt;p&gt;I decided to try out a functional language
        for my first &amp;quot;real&amp;quot; participation in AoC and settled on
        Racket.&lt;/p&gt;\n\n&lt;p&gt;On day 1 I came up with a (terrible, absolutely
        terrible) solution for the first part but got stuck on part 2.&lt;/p&gt;\n\n&lt;p&gt;I
        spent the better part of the evening getting my shit together and I came up
        with a much more decent solution. It&amp;#39;s inefficient and probably still
        terrible, but much less so than on my first try! (code for part 1 available,but
        commented out)&lt;/p&gt;\n\n&lt;p&gt;```scheme\n    #lang racket&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;;
        Read a file\n(define (input-file filename)\n  (port-&amp;gt;string (open-input-file
        filename) #:close? #t))\n\n; Read the file as lines, converting them to integers\n(define
        (inputs-as-ints filename)\n  (map string-&amp;gt;number (string-split (input-file
        filename))))\n\n(define (n-plets n current lst)\n  (cond\n    [(empty? lst)
        &amp;#39;()]\n    [(= n 1)\n      (map (lambda (x) (append current (list x)))
        lst)]\n    [else\n      (append (n-plets (- n 1) (append current (list (car
        lst))) (cdr lst))\n               (n-plets n current (cdr lst)))]))\n\n;(define
        pairs (n-plets 2 &amp;#39;() (inputs-as-ints &amp;quot;input1.1.txt&amp;quot;)))\n
        (define triples (n-plets 3 &amp;#39;() (inputs-as-ints &amp;quot;input1.1.txt&amp;quot;)))\n\n;(apply
        * (car (filter (lambda (x) (= 2020 (apply + x))) pairs)))\n(apply * (car (filter
        (lambda (x) (= 2020 (apply + x))) triples)))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;```&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geg5oh0/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606964467.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "geg4tn9", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Vultureosa", "can_mod_post": false, "created_utc":
        1606963990.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_uy84l", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "**Python**\n\nI wrote a short python script
        for Day1. Line1 converts the input to a set (that uses hash table) to achieve
        very fast membership checks.\n\n    num_list = set([int(nr) for nr in input_numbers.split(\"\\n\")])\n    for
        nr in num_list:  \n      if 2020-nr in num_list and nr != 2020-nr:\n        print(**\"Part
        1 solution: {} \\* {} = {}\".format(nr, 2020-nr, nr*(2020-nr)))  \n        break  \n    result_part2
        = [(nr1, nr2, (2020-(nr1+nr2)), nr1*nr2*(2020-(nr1+nr2))) \n               for
        nr1 in num_list for nr2 in num_list if 2020-(nr1+nr2) in \n               num_list][0]  \n    print(\"Part
        2 solution: {} * {} * {} = {}\".format(*result_part2))", "edited": 1606964530.0,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_geg4tn9",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I
        wrote a short python script for Day1. Line1 converts the input to a set (that
        uses hash table) to achieve very fast membership checks.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;num_list
        = set([int(nr) for nr in input_numbers.split(&amp;quot;\\n&amp;quot;)])\nfor
        nr in num_list:  \n  if 2020-nr in num_list and nr != 2020-nr:\n    print(**&amp;quot;Part
        1 solution: {} \\* {} = {}&amp;quot;.format(nr, 2020-nr, nr*(2020-nr)))  \n    break  \nresult_part2
        = [(nr1, nr2, (2020-(nr1+nr2)), nr1*nr2*(2020-(nr1+nr2))) \n           for
        nr1 in num_list for nr2 in num_list if 2020-(nr1+nr2) in \n           num_list][0]  \nprint(&amp;quot;Part
        2 solution: {} * {} * {} = {}&amp;quot;.format(*result_part2))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geg4tn9/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606963990.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "geg3k36", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "rrcjab", "can_mod_post": false, "created_utc":
        1606963282.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_qvyv", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Scratch: https://scratch.mit.edu/projects/458087657/",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_geg3k36", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Scratch:
        &lt;a href=\"https://scratch.mit.edu/projects/458087657/\"&gt;https://scratch.mit.edu/projects/458087657/&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geg3k36/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606963282.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gefyaot", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Thedodosconundrum", "can_mod_post": false,
        "created_utc": 1606960403.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 1, "author_fullname": "t2_623ks", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "### Javascript\nI
        tried using the built-in`includes()` method instead of nesting another for
        loop. I couldn''t find anything in the ECMA specs that would suggest if this
        approach is any better than O(n^(3)), but I thought it was interesting at
        least!\n\n    const find2020InThree = (array, sum) =&gt; {\n        for (let
        i = 0; i &lt; array.length; i++){\n            for (let j = 1; j &lt; array.length;
        j++) {\n                let num3 = (sum - array[j] - array[i]);\n                if
        (array.includes(num3)) {\n                    return {\n                        num1:
        array[j],\n                        num2: array[i],\n                        num3:
        num3,\n                        sum: array[j] + array[i] + num3,\n                        index:
        array.indexOf(num3),\n                        product: array[j] * array[i]
        * num3\n                    }\n                }\n            }\n        }\n    };",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_gefyaot", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h3&gt;Javascript&lt;/h3&gt;\n\n&lt;p&gt;I
        tried using the built-in&lt;code&gt;includes()&lt;/code&gt; method instead
        of nesting another for loop. I couldn&amp;#39;t find anything in the ECMA
        specs that would suggest if this approach is any better than O(n&lt;sup&gt;3&lt;/sup&gt;),
        but I thought it was interesting at least!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const
        find2020InThree = (array, sum) =&amp;gt; {\n    for (let i = 0; i &amp;lt;
        array.length; i++){\n        for (let j = 1; j &amp;lt; array.length; j++)
        {\n            let num3 = (sum - array[j] - array[i]);\n            if (array.includes(num3))
        {\n                return {\n                    num1: array[j],\n                    num2:
        array[i],\n                    num3: num3,\n                    sum: array[j]
        + array[i] + num3,\n                    index: array.indexOf(num3),\n                    product:
        array[j] * array[i] * num3\n                }\n            }\n        }\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gefyaot/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606960403.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gefshse", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "purplepinapples", "can_mod_post": false,
        "created_utc": 1606957225.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 1, "author_fullname": "t2_i359s", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Re-implemented this
        in erlang for fun; [Repo](https://github.com/seanbreckenridge/advent-of-code-2020/tree/master/01-erlang)\n\nGlad
        I could use part_one in part_two for the inner loop\n\n    -module(main).\n    -export([main/1]).\n    -define(TARGET,
        2020).\n    \n    load_data(From) -&gt;\n      {ok, Data} = file:read_file(From),\n      %%
        global splits on all occurences, not just first\n      Lines = binary:split(string:trim(Data),
        &lt;&lt;\"\\n\"&gt;&gt;, [global]),\n      %% https://stackoverflow.com/a/12508106/9348376\n      Nums
        = [begin {Int,_}=string:to_integer(Ln), Int end || Ln &lt;- Lines],\n      Nums.\n    \n    %%
        in part 1, Tar is always 2020\n    %% this acts as the ''inner loop'' for
        part_two, so its set as an\n    %% argument here\n    part_one(N, S) -&gt;
        part_one(N, S, ?TARGET).\n    part_one([], _, _) -&gt; error;\n    part_one([C|N],
        S, Tar) -&gt;\n      Target = Tar - C,\n      case sets:is_element(Target,
        S) of\n        true -&gt; Target * C;\n        false -&gt; part_one(N, S,
        Tar)\n      end.\n    \n    %% C acts as the ''outer loop value''\n    part_two(N,
        S) -&gt; part_two(N, N, S).\n    part_two([], _, _) -&gt; error;\n    part_two([C|OuterNums],
        OrigNums, S) -&gt;\n      Midtarget = ?TARGET - C,\n      case part_one(OrigNums,
        S, Midtarget) of\n        error -&gt; part_two(OuterNums, OrigNums, S);  %%
        part_one couldnt find a solution, try next number\n        Prod -&gt; Prod
        * C\n      end.\n    \n    main(Args) -&gt;\n      [Filename|_] = Args,\n      Nums
        = load_data(Filename),\n      Snums = sets:from_list(Nums),\n      io:format(\"Part
        1: ~p~n\", [part_one(Nums, Snums)]),\n      io:format(\"Part 2: ~p~n\", [part_two(Nums,
        Snums)]).", "edited": 1606957418.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gefshse", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Re-implemented
        this in erlang for fun; &lt;a href=\"https://github.com/seanbreckenridge/advent-of-code-2020/tree/master/01-erlang\"&gt;Repo&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Glad
        I could use part_one in part_two for the inner loop&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;-module(main).\n-export([main/1]).\n-define(TARGET,
        2020).\n\nload_data(From) -&amp;gt;\n  {ok, Data} = file:read_file(From),\n  %%
        global splits on all occurences, not just first\n  Lines = binary:split(string:trim(Data),
        &amp;lt;&amp;lt;&amp;quot;\\n&amp;quot;&amp;gt;&amp;gt;, [global]),\n  %%
        https://stackoverflow.com/a/12508106/9348376\n  Nums = [begin {Int,_}=string:to_integer(Ln),
        Int end || Ln &amp;lt;- Lines],\n  Nums.\n\n%% in part 1, Tar is always 2020\n%%
        this acts as the &amp;#39;inner loop&amp;#39; for part_two, so its set as
        an\n%% argument here\npart_one(N, S) -&amp;gt; part_one(N, S, ?TARGET).\npart_one([],
        _, _) -&amp;gt; error;\npart_one([C|N], S, Tar) -&amp;gt;\n  Target = Tar
        - C,\n  case sets:is_element(Target, S) of\n    true -&amp;gt; Target * C;\n    false
        -&amp;gt; part_one(N, S, Tar)\n  end.\n\n%% C acts as the &amp;#39;outer loop
        value&amp;#39;\npart_two(N, S) -&amp;gt; part_two(N, N, S).\npart_two([],
        _, _) -&amp;gt; error;\npart_two([C|OuterNums], OrigNums, S) -&amp;gt;\n  Midtarget
        = ?TARGET - C,\n  case part_one(OrigNums, S, Midtarget) of\n    error -&amp;gt;
        part_two(OuterNums, OrigNums, S);  %% part_one couldnt find a solution, try
        next number\n    Prod -&amp;gt; Prod * C\n  end.\n\nmain(Args) -&amp;gt;\n  [Filename|_]
        = Args,\n  Nums = load_data(Filename),\n  Snums = sets:from_list(Nums),\n  io:format(&amp;quot;Part
        1: ~p~n&amp;quot;, [part_one(Nums, Snums)]),\n  io:format(&amp;quot;Part 2:
        ~p~n&amp;quot;, [part_two(Nums, Snums)]).\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gefshse/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606957225.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gefu5xz",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606958128.0, "send_replies": true,
        "parent_id": "t1_gefrk8m", "score": 1, "author_fullname": "t2_60niu", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "I see you fixed the code formatting (thank you, /u/backtickbot!) but can
        you also include the language that you''re using?", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_gefu5xz", "is_submitter":
        true, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I see you fixed the code formatting
        (thank you, &lt;a href=\"/u/backtickbot\"&gt;/u/backtickbot&lt;/a&gt;!) but
        can you also include the language that you&amp;#39;re using?&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": "moderator", "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gefu5xz/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606958128.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gefrlod", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "wikipedia_text_bot", "can_mod_post": false,
        "created_utc": 1606956734.0, "send_replies": true, "parent_id": "t1_gefrk8m",
        "score": 1, "author_fullname": "t2_8pm6pzxo", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "**[Rete algorithm](https://en.wikipedia.org/wiki/Rete
        algorithm)**\n\nThe Rete algorithm ( REE-tee, RAY-tee, rarely REET, reh-TAY)
        is a pattern matching algorithm for implementing rule-based systems. The algorithm
        was developed to efficiently apply many rules or patterns to many objects,
        or facts, in a knowledge base. It is used to determine which of the system''s
        rules should fire based on its data store, its facts. The Rete algorithm was
        designed by Charles L.\n\n[About Me](https://www.reddit.com/user/wikipedia_text_bot/comments/jrn2mj/about_me/)
        - [Opt out](https://www.reddit.com/user/wikipedia_text_bot/comments/jrti43/opt_out_here/)
        - OP can reply !delete to delete - [Article of the day](https://redd.it/k5lt2e)",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_gefrlod", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;&lt;a
        href=\"https://en.wikipedia.org/wiki/Rete%20algorithm\"&gt;Rete algorithm&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;The
        Rete algorithm ( REE-tee, RAY-tee, rarely REET, reh-TAY) is a pattern matching
        algorithm for implementing rule-based systems. The algorithm was developed
        to efficiently apply many rules or patterns to many objects, or facts, in
        a knowledge base. It is used to determine which of the system&amp;#39;s rules
        should fire based on its data store, its facts. The Rete algorithm was designed
        by Charles L.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/user/wikipedia_text_bot/comments/jrn2mj/about_me/\"&gt;About
        Me&lt;/a&gt; - &lt;a href=\"https://www.reddit.com/user/wikipedia_text_bot/comments/jrti43/opt_out_here/\"&gt;Opt
        out&lt;/a&gt; - OP can reply !delete to delete - &lt;a href=\"https://redd.it/k5lt2e\"&gt;Article
        of the day&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_k4e4lm", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gefrlod/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1606956734.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gefrl5g",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "backtickbot",
        "can_mod_post": false, "created_utc": 1606956726.0, "send_replies": true,
        "parent_id": "t1_gefrk8m", "score": 1, "author_fullname": "t2_8n9fijwc", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Hello, massimo-zaniboni: code blocks using backticks (\\`\\`\\`) don''t work
        on all versions of Reddit!\n\nSome users see [this](https://stalas.alm.lt/backformat/gefrk8m.png)
        / [this](https://stalas.alm.lt/backformat/gefrk8m.html) instead.\n\nTo fix
        this, indent every line with **4 spaces** instead. It''s a bit annoying, but
        then your code blocks are properly formatted for everyone.\n\nAn easy way
        to do this is to use the [code-block button in the editor](https://stalas.alm.lt/files/new-reddit-codeblock.png).
        If it''s not working, try switching to the fancy-pants editor and back again.\n\n[Comment
        with formatting fixed for old.reddit.com users](https://np.reddit.com/r/backtickbot/comments/k5mppn/httpsnpredditcomradventofcodecommentsk4e4lm2020/)\n\n[FAQ](https://www.reddit.com/r/backtickbot/wiki/index)\n\n^(You
        can opt out by replying with backtickopt6 to this comment.)", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_gefrl5g",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hello, massimo-zaniboni:
        code blocks using backticks (```) don&amp;#39;t work on all versions of Reddit!&lt;/p&gt;\n\n&lt;p&gt;Some
        users see &lt;a href=\"https://stalas.alm.lt/backformat/gefrk8m.png\"&gt;this&lt;/a&gt;
        / &lt;a href=\"https://stalas.alm.lt/backformat/gefrk8m.html\"&gt;this&lt;/a&gt;
        instead.&lt;/p&gt;\n\n&lt;p&gt;To fix this, indent every line with &lt;strong&gt;4
        spaces&lt;/strong&gt; instead. It&amp;#39;s a bit annoying, but then your
        code blocks are properly formatted for everyone.&lt;/p&gt;\n\n&lt;p&gt;An
        easy way to do this is to use the &lt;a href=\"https://stalas.alm.lt/files/new-reddit-codeblock.png\"&gt;code-block
        button in the editor&lt;/a&gt;. If it&amp;#39;s not working, try switching
        to the fancy-pants editor and back again.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://np.reddit.com/r/backtickbot/comments/k5mppn/httpsnpredditcomradventofcodecommentsk4e4lm2020/\"&gt;Comment
        with formatting fixed for old.reddit.com users&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://www.reddit.com/r/backtickbot/wiki/index\"&gt;FAQ&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;You
        can opt out by replying with backtickopt6 to this comment.&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gefrl5g/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606956726.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gefrk8m", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "massimo-zaniboni", "can_mod_post": false,
        "created_utc": 1606956711.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 1, "author_fullname": "t2_el6e8", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Instead of thinking
        to combinatorial problem, I were inspired from pattern matching algo like
        https://en.wikipedia.org/wiki/Rete_algorithm\n\nI read the file as a sequence
        of events and I maintain a data structure with the values we need for answering
        the question.\nWhen we encounter it, the solution is returned.\n\nSpeed is
        comparable to ``cat data.csv &gt; /dev/null``, at least on 200 entries.\n\nThe
        code is in C and it uses Judy Arrays as working data structure.\n\n    /*\n    \n    ##
        Benchmarks\n    \n    The slowest part of the code is not calculating the
        result but reading the file.\n    \n    ### Calculate the result\n    \n    $
        bench \"./main on ../day1_1.csv\"\n    benchmarking ./main on ../day1_1.csv\n    time                 3.806
        ms   (3.799 ms .. 3.814 ms)\n                         1.000 R\u00b2   (1.000
        R\u00b2 .. 1.000 R\u00b2)\n    mean                 3.805 ms   (3.798 ms ..
        3.812 ms)\n    std dev              22.41 \u03bcs   (17.81 \u03bcs .. 29.07
        \u03bcs)\n    \n    ### Do not calculate nothing, but count only lines and
        print the total\n    \n    $ bench \"./main off ../day1_1.csv\"\n    benchmarking
        ./main off ../day1_1.csv\n    time                 2.760 ms   (2.745 ms ..
        2.779 ms)\n                         1.000 R\u00b2   (1.000 R\u00b2 .. 1.000
        R\u00b2)\n    mean                 2.751 ms   (2.746 ms .. 2.760 ms)\n    std
        dev              21.07 \u03bcs   (14.10 \u03bcs .. 31.28 \u03bcs)\n    \n    ###
        cat to /dev/null\n    \n    $ bench \"cat ../day1_1.csv &gt; /dev/null\"\n    benchmarking
        cat ../day1_1.csv &gt; /dev/null\n    time                 3.292 ms   (3.279
        ms .. 3.304 ms)\n                         1.000 R\u00b2   (1.000 R\u00b2 ..
        1.000 R\u00b2)\n    mean                 3.297 ms   (3.291 ms .. 3.308 ms)\n    std
        dev              25.96 \u03bcs   (17.51 \u03bcs .. 44.36 \u03bcs)\n    \n    */\n    \n    #include
        &lt;stdio.h&gt;\n    #include &lt;string.h&gt;\n    #include &lt;Judy.h&gt;\n    \n    int
        main(int argc, char** argv)\n    {\n        if (argc &lt; 3) {\n          printf(\"Usage:
        &lt;on|off&gt; &lt;file-name&gt;\");\n          return 1;\n        }\n    \n        FILE*
        ptr = fopen(argv[2], \"r\");\n        if (ptr==NULL)\n        {\n            printf(\"no
        such file.\");\n            return 0;\n        }\n    \n        int skip_processing
        = 0;\n        if (strcmp(argv[1], \"off\") == 0) {\n          skip_processing
        = 1;\n        }\n    \n        // e0, e1, e2 are the 3 distinct entries to
        combine.\n        // e0 + e1 + e2 == target_sum\n        const Word_t target_sum
        = 2020;\n    \n        // The set with the e0 we have found right now.\n        Pvoid_t
        set_of_found_e0 = (Pvoid_t) NULL;\n    \n        // The map with missing e2
        we are waiting for reaching target_sum.\n        Pvoid_t map_of_missing_e2
        = (Pvoid_t) NULL;\n    \n        // Read all the entries.\n        // NOTE:
        every read entry is managed from the point of view of e0, e1 and e2\n        //
        because it can be used in all three ways countemporary.\n        Word_t entry;\n        int
        count_entries = 0;\n        while (fscanf(ptr,\"%lu\",&amp;entry) == 1) {\n          count_entries++;\n    \n          if
        (!skip_processing) {\n            // no hope to have something of useful\n            if
        (entry &gt;= target_sum) {\n              continue;\n            }\n    \n            //
        Test if we have found a missing e2 (i.e. we have found a solution of the problem)\n            Word_t
        e2 = entry;\n            PWord_t  ptr_product_e0_e1;\n            JLG(ptr_product_e0_e1,
        map_of_missing_e2, e2);\n            if (ptr_product_e0_e1 != NULL) {\n              Word_t
        result = (*ptr_product_e0_e1) * e2;\n              printf(\"%lu\", result);\n              return
        0;\n            }\n    \n            // Update the map_of_missing_e2 with
        the new found e1 and previously found e0\n            Word_t e1 = entry;\n            Word_t
        e0_limit = target_sum - e1;\n            int found_e0;\n            Word_t
        e0 = 0;\n            J1F(found_e0, set_of_found_e0, e0);\n            while(found_e0)
        {\n              Word_t missing_e2 = e0_limit - e0;\n              if (missing_e2
        &gt; 0) {\n                JLI(ptr_product_e0_e1, map_of_missing_e2, missing_e2);\n                //
        NOTE: there can be multiple results, but we are interested to only one, so
        overwrite in any case\n                (*ptr_product_e0_e1) = e0 * e1;\n              }
        else {\n                // this e0 and next e0 in the map are too much big\n                break;\n              }\n    \n              //
        next found e0 in ascending order\n              J1N(found_e0, set_of_found_e0,
        e0);\n            }\n    \n            // Add the new found e0\n            Word_t
        ignore;\n            J1S(ignore, set_of_found_e0, entry);\n          }\n        }\n    \n        if
        (skip_processing) {\n          printf(\"Entries %d\", count_entries);\n        }\n    \n        return
        0;\n    }", "edited": 1606958221.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gefrk8m", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Instead
        of thinking to combinatorial problem, I were inspired from pattern matching
        algo like &lt;a href=\"https://en.wikipedia.org/wiki/Rete_algorithm\"&gt;https://en.wikipedia.org/wiki/Rete_algorithm&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I
        read the file as a sequence of events and I maintain a data structure with
        the values we need for answering the question.\nWhen we encounter it, the
        solution is returned.&lt;/p&gt;\n\n&lt;p&gt;Speed is comparable to &lt;code&gt;cat
        data.csv &amp;gt; /dev/null&lt;/code&gt;, at least on 200 entries.&lt;/p&gt;\n\n&lt;p&gt;The
        code is in C and it uses Judy Arrays as working data structure.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;/*\n\n##
        Benchmarks\n\nThe slowest part of the code is not calculating the result but
        reading the file.\n\n### Calculate the result\n\n$ bench &amp;quot;./main
        on ../day1_1.csv&amp;quot;\nbenchmarking ./main on ../day1_1.csv\ntime                 3.806
        ms   (3.799 ms .. 3.814 ms)\n                     1.000 R\u00b2   (1.000 R\u00b2
        .. 1.000 R\u00b2)\nmean                 3.805 ms   (3.798 ms .. 3.812 ms)\nstd
        dev              22.41 \u03bcs   (17.81 \u03bcs .. 29.07 \u03bcs)\n\n### Do
        not calculate nothing, but count only lines and print the total\n\n$ bench
        &amp;quot;./main off ../day1_1.csv&amp;quot;\nbenchmarking ./main off ../day1_1.csv\ntime                 2.760
        ms   (2.745 ms .. 2.779 ms)\n                     1.000 R\u00b2   (1.000 R\u00b2
        .. 1.000 R\u00b2)\nmean                 2.751 ms   (2.746 ms .. 2.760 ms)\nstd
        dev              21.07 \u03bcs   (14.10 \u03bcs .. 31.28 \u03bcs)\n\n### cat
        to /dev/null\n\n$ bench &amp;quot;cat ../day1_1.csv &amp;gt; /dev/null&amp;quot;\nbenchmarking
        cat ../day1_1.csv &amp;gt; /dev/null\ntime                 3.292 ms   (3.279
        ms .. 3.304 ms)\n                     1.000 R\u00b2   (1.000 R\u00b2 .. 1.000
        R\u00b2)\nmean                 3.297 ms   (3.291 ms .. 3.308 ms)\nstd dev              25.96
        \u03bcs   (17.51 \u03bcs .. 44.36 \u03bcs)\n\n*/\n\n#include &amp;lt;stdio.h&amp;gt;\n#include
        &amp;lt;string.h&amp;gt;\n#include &amp;lt;Judy.h&amp;gt;\n\nint main(int
        argc, char** argv)\n{\n    if (argc &amp;lt; 3) {\n      printf(&amp;quot;Usage:
        &amp;lt;on|off&amp;gt; &amp;lt;file-name&amp;gt;&amp;quot;);\n      return
        1;\n    }\n\n    FILE* ptr = fopen(argv[2], &amp;quot;r&amp;quot;);\n    if
        (ptr==NULL)\n    {\n        printf(&amp;quot;no such file.&amp;quot;);\n        return
        0;\n    }\n\n    int skip_processing = 0;\n    if (strcmp(argv[1], &amp;quot;off&amp;quot;)
        == 0) {\n      skip_processing = 1;\n    }\n\n    // e0, e1, e2 are the 3
        distinct entries to combine.\n    // e0 + e1 + e2 == target_sum\n    const
        Word_t target_sum = 2020;\n\n    // The set with the e0 we have found right
        now.\n    Pvoid_t set_of_found_e0 = (Pvoid_t) NULL;\n\n    // The map with
        missing e2 we are waiting for reaching target_sum.\n    Pvoid_t map_of_missing_e2
        = (Pvoid_t) NULL;\n\n    // Read all the entries.\n    // NOTE: every read
        entry is managed from the point of view of e0, e1 and e2\n    // because it
        can be used in all three ways countemporary.\n    Word_t entry;\n    int count_entries
        = 0;\n    while (fscanf(ptr,&amp;quot;%lu&amp;quot;,&amp;amp;entry) == 1)
        {\n      count_entries++;\n\n      if (!skip_processing) {\n        // no
        hope to have something of useful\n        if (entry &amp;gt;= target_sum)
        {\n          continue;\n        }\n\n        // Test if we have found a missing
        e2 (i.e. we have found a solution of the problem)\n        Word_t e2 = entry;\n        PWord_t  ptr_product_e0_e1;\n        JLG(ptr_product_e0_e1,
        map_of_missing_e2, e2);\n        if (ptr_product_e0_e1 != NULL) {\n          Word_t
        result = (*ptr_product_e0_e1) * e2;\n          printf(&amp;quot;%lu&amp;quot;,
        result);\n          return 0;\n        }\n\n        // Update the map_of_missing_e2
        with the new found e1 and previously found e0\n        Word_t e1 = entry;\n        Word_t
        e0_limit = target_sum - e1;\n        int found_e0;\n        Word_t e0 = 0;\n        J1F(found_e0,
        set_of_found_e0, e0);\n        while(found_e0) {\n          Word_t missing_e2
        = e0_limit - e0;\n          if (missing_e2 &amp;gt; 0) {\n            JLI(ptr_product_e0_e1,
        map_of_missing_e2, missing_e2);\n            // NOTE: there can be multiple
        results, but we are interested to only one, so overwrite in any case\n            (*ptr_product_e0_e1)
        = e0 * e1;\n          } else {\n            // this e0 and next e0 in the
        map are too much big\n            break;\n          }\n\n          // next
        found e0 in ascending order\n          J1N(found_e0, set_of_found_e0, e0);\n        }\n\n        //
        Add the new found e0\n        Word_t ignore;\n        J1S(ignore, set_of_found_e0,
        entry);\n      }\n    }\n\n    if (skip_processing) {\n      printf(&amp;quot;Entries
        %d&amp;quot;, count_entries);\n    }\n\n    return 0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gefrk8m/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606956711.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gefpjua", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "techkid6", "can_mod_post": false, "created_utc":
        1606955809.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_5t9iy", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "**Scratch**\n\n[**https://scratch.mit.edu/projects/457375336/**](https://scratch.mit.edu/projects/457375336/)\n\nMeant
        to post this yesterday but forgot! My goal is to do as many of these as possible
        in Scratch this year. (I''m writing in Python for the leaderboards)", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_gefpjua",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Scratch&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://scratch.mit.edu/projects/457375336/\"&gt;&lt;strong&gt;https://scratch.mit.edu/projects/457375336/&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Meant
        to post this yesterday but forgot! My goal is to do as many of these as possible
        in Scratch this year. (I&amp;#39;m writing in Python for the leaderboards)&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gefpjua/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606955809.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gefheez", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "lib20", "can_mod_post": false, "created_utc":
        1606951981.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_60tjs", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "In TCL\n\n    #!/usr/bin/env tclsh\n\n    set
        fd [open 01_1_input.txt]\n    set input [read $fd]\n    close $fd\n\n    set
        sum_target 2020\n\n    foreach i $input {\n\tif {$i &lt;= [expr {$sum_target
        / 2}]} {\n  \t    lappend minor $i\n\t} else {\n\t    lappend major $i\n\t}\n    }\n\n    set
        minor [lsort $minor]\n    set major [lsort -decreasing $major]\n\n    # ---
        part 1\n    foreach mi $minor {\n\tforeach ma $major {\n\t\tif {[expr {$mi
        + $ma}] == $sum_target} {\n  \t    \t    puts \"day 01 p 1: $mi * $ma = [expr
        {$mi * $ma}]\"\n\t\t    break\n\t\t}\n\t}\n    }\n\n    # --- part 2\n    foreach
        ma $major {\n    \tset i 0\n\tforeach mi1 $minor {\n\t    set minor_rest [lrange
        $minor [expr {$i + 1}] end]\n\t\tforeach mi2 $minor_rest {\n\t\t    if {[expr
        {$ma + $mi1 + $mi2}] == $sum_target} {\n\t\t        puts \"day 01 p 2: $ma
        * $mi1 * $mi2 = [expr {$ma * $mi1 * $mi2}]\"\n\t\t\tbreak\n\t\t    }\n\t\t}\n\t\tincr
        i\n\t}\n    }", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gefheez", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In
        TCL&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/usr/bin/env tclsh\n\nset fd [open
        01_1_input.txt]\nset input [read $fd]\nclose $fd\n\nset sum_target 2020\n\nforeach
        i $input {\nif {$i &amp;lt;= [expr {$sum_target / 2}]} {\n    lappend minor
        $i\n} else {\n    lappend major $i\n}\n}\n\nset minor [lsort $minor]\nset
        major [lsort -decreasing $major]\n\n# --- part 1\nforeach mi $minor {\nforeach
        ma $major {\n    if {[expr {$mi + $ma}] == $sum_target} {\n            puts
        &amp;quot;day 01 p 1: $mi * $ma = [expr {$mi * $ma}]&amp;quot;\n        break\n    }\n}\n}\n\n#
        --- part 2\nforeach ma $major {\n    set i 0\nforeach mi1 $minor {\n    set
        minor_rest [lrange $minor [expr {$i + 1}] end]\n    foreach mi2 $minor_rest
        {\n        if {[expr {$ma + $mi1 + $mi2}] == $sum_target} {\n            puts
        &amp;quot;day 01 p 2: $ma * $mi1 * $mi2 = [expr {$ma * $mi1 * $mi2}]&amp;quot;\n        break\n        }\n    }\n    incr
        i\n}\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gefheez/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606951981.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "genm5pe", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "SecureCone", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_genl2kv", "score": 1, "author_fullname": "t2_90x8mz9g",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "I see, turns out I don\u2019t know how to
        read rust docs. Thanks!", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_genm5pe", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        see, turns out I don\u2019t know how to read rust docs. Thanks!&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/genm5pe/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607130529.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1607130529.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "genl2kv", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "HashWorks", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_gen8cop", "score": 1, "author_fullname": "t2_g8gp3",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "Yeah, that''s itertools. https://docs.rs/itertools/0.9.0/itertools/trait.Itertools.html#method.cartesian_product",
        "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_genl2kv", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yeah,
        that&amp;#39;s itertools. &lt;a href=\"https://docs.rs/itertools/0.9.0/itertools/trait.Itertools.html#method.cartesian_product\"&gt;https://docs.rs/itertools/0.9.0/itertools/trait.Itertools.html#method.cartesian_product&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/genl2kv/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607129897.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1607129897.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gen8cop", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "SecureCone", "can_mod_post": false, "created_utc":
        1607122597.0, "send_replies": true, "parent_id": "t1_gef8888", "score": 1,
        "author_fullname": "t2_90x8mz9g", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Where did your cartesian_product()
        function come from? Is that from itertools? It doesn''t look like it from
        [the itertools documentation](https://docs.rs/itertools/0.9.0/itertools/#functions)
        but I don''t see it anywhere else in your code.", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_gen8cop", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Where did your cartesian_product()
        function come from? Is that from itertools? It doesn&amp;#39;t look like it
        from &lt;a href=\"https://docs.rs/itertools/0.9.0/itertools/#functions\"&gt;the
        itertools documentation&lt;/a&gt; but I don&amp;#39;t see it anywhere else
        in your code.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_k4e4lm", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gen8cop/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1607122597.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "gef8888", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "HashWorks",
        "can_mod_post": false, "created_utc": 1606947643.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_g8gp3", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "###
        Rust, O(n) and O(n\u00b2)\n\nhttps://github.com/hashworks/AoC/blob/master/2020/day1/src/main.rs",
        "edited": 1606996663.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gef8888", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h3&gt;Rust,
        O(n) and O(n\u00b2)&lt;/h3&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/hashworks/AoC/blob/master/2020/day1/src/main.rs\"&gt;https://github.com/hashworks/AoC/blob/master/2020/day1/src/main.rs&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gef8888/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606947643.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gef6noo", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Chaphasilor", "can_mod_post": false, "created_utc":
        1606946912.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_obfkf", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "### OpenSCAD\nHaven''t seen that one yet,
        so here we go...\n\nThe code below generates [this nice little visualization
        of the different solutions](https://i.imgur.com/tz7TB4r.png) (which you could
        export as .stl and 3D-print, naturally xD\n\n    module part1() {\n      for
        (i = input) {\n        for (j = input) {\n          if (i+j == 2020) {\n            echo(i*j);\n            color(\"red\")\n              cube([i,
        j, 1]);\n          }\n        }\n      }\n    }\n\n    module part2() {\n      for
        (i = input) {\n        for (j = input) {\n          for (k = input) {\n            if
        (i+j+k == 2020) {\n              echo(i*j*k);\n              color(\"green\")\n                cube([i,
        j, k]);\n            }\n          }\n        }\n      }\n    }", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_gef6noo",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h3&gt;OpenSCAD&lt;/h3&gt;\n\n&lt;p&gt;Haven&amp;#39;t
        seen that one yet, so here we go...&lt;/p&gt;\n\n&lt;p&gt;The code below generates
        &lt;a href=\"https://i.imgur.com/tz7TB4r.png\"&gt;this nice little visualization
        of the different solutions&lt;/a&gt; (which you could export as .stl and 3D-print,
        naturally xD&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;module part1() {\n  for (i
        = input) {\n    for (j = input) {\n      if (i+j == 2020) {\n        echo(i*j);\n        color(&amp;quot;red&amp;quot;)\n          cube([i,
        j, 1]);\n      }\n    }\n  }\n}\n\nmodule part2() {\n  for (i = input) {\n    for
        (j = input) {\n      for (k = input) {\n        if (i+j+k == 2020) {\n          echo(i*j*k);\n          color(&amp;quot;green&amp;quot;)\n            cube([i,
        j, k]);\n        }\n      }\n    }\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gef6noo/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606946912.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gef62ga", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "gfvirga", "can_mod_post": false, "created_utc":
        1606946642.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_ak8po", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Python - Divide and Conquer:\n\n[https://github.com/gfvirga/python\\_lessons/blob/master/Advent%20of%20Code%202020/day1.py](https://github.com/gfvirga/python_lessons/blob/master/Advent%20of%20Code%202020/day2.py)\n\n    array
        = []\n    \n    with open(''day1input.txt'') as f:\n        for line in f:\n            array.append(int(line))\n    \n    \n    left
        = 0\n    right = len(array)-1\n    array.sort()\n    \n    #Two Sum\n    while
        left &lt; right:\n        sum = array[right] + array[left] \n        if sum
        == 2020:\n            print(array[right] * array[left])\n            break\n    \n        if
        sum &gt; 2020:\n            right -= 1\n        else:\n            left +=
        1\n    \n    # Three Sum\n    for i in range(len(array) - 2):\n        left
        = i + 1\n        right = len(array)-1\n        while left &lt; right:\n            sum
        = array[i] + array[right] + array[left] \n            if sum == 2020:\n                print(array[i]
        * array[right] * array[left])\n                break\n    \n            if
        sum &gt; 2020:\n                right -= 1\n            elif sum &lt; 2020:\n                left
        += 1", "edited": 1607203053.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gef62ga", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python
        - Divide and Conquer:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/gfvirga/python_lessons/blob/master/Advent%20of%20Code%202020/day2.py\"&gt;https://github.com/gfvirga/python_lessons/blob/master/Advent%20of%20Code%202020/day1.py&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;array
        = []\n\nwith open(&amp;#39;day1input.txt&amp;#39;) as f:\n    for line in
        f:\n        array.append(int(line))\n\n\nleft = 0\nright = len(array)-1\narray.sort()\n\n#Two
        Sum\nwhile left &amp;lt; right:\n    sum = array[right] + array[left] \n    if
        sum == 2020:\n        print(array[right] * array[left])\n        break\n\n    if
        sum &amp;gt; 2020:\n        right -= 1\n    else:\n        left += 1\n\n#
        Three Sum\nfor i in range(len(array) - 2):\n    left = i + 1\n    right =
        len(array)-1\n    while left &amp;lt; right:\n        sum = array[i] + array[right]
        + array[left] \n        if sum == 2020:\n            print(array[i] * array[right]
        * array[left])\n            break\n\n        if sum &amp;gt; 2020:\n            right
        -= 1\n        elif sum &amp;lt; 2020:\n            left += 1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gef62ga/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606946642.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gef1evw", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "AndreasFurster", "can_mod_post": false,
        "created_utc": 1606944554.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 4, "author_fullname": "t2_11b5fk", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "First I did it in
        Python, but then was thinking it should be possible in SQL. Pretty easy actually.
        \n\n    # Part 1\n    SELECT \n    \t(i.number * j.number) AS solution\n    \tFROM
        input i \n    \tJOIN input j \n    \tWHERE i.number + j.number = 2020 \n    \tLIMIT
        1;\n    \t\n    # Part 2\n    SELECT \n    \t(i.number * j.number * k.number)
        AS solution\n    \tFROM input i \n    \tJOIN input j\n    \tJOIN input k \n    \tWHERE
        i.number + j.number + k.number = 2020 \n    \tLIMIT 1;", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_gef1evw",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;First I did it in Python,
        but then was thinking it should be possible in SQL. Pretty easy actually.
        &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# Part 1\nSELECT \n    (i.number * j.number)
        AS solution\n    FROM input i \n    JOIN input j \n    WHERE i.number + j.number
        = 2020 \n    LIMIT 1;\n\n# Part 2\nSELECT \n    (i.number * j.number * k.number)
        AS solution\n    FROM input i \n    JOIN input j\n    JOIN input k \n    WHERE
        i.number + j.number + k.number = 2020 \n    LIMIT 1;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gef1evw/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606944554.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "geep08y", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "isms_", "can_mod_post": false, "created_utc":
        1606939083.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_fbsi5", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "This solution uses the Python bindings for
        the Z3 SMT solver.\n\n    import z3\n    import numpy as np\n\n    # load
        the data\n    arr = np.loadtxt(\"input.txt\", dtype=int)\n\n    # set number
        of numbers to use; 2 for part 1, 3 for part 2\n    N = 3\n\n    # initialize
        the solver\n    s = z3.Solver()\n\n    # create the boolean decision variables
        about which of the input\n    # numbers are chosen - true means use that number
        as one of the N\n    xs = [z3.Bool(f\"x_{i}\") for i in range(len(arr))]\n\n    #
        add a constraint that the numbers sum to 2020 -- PbEq is pseudo-booleans\n    #
        but works like a SUMIF where the second value in each tuple is the value \n    #
        be added and the first is the Bool which controls whether it''s added or not\n    s.add(z3.PbEq([(x,
        int(a)) for x, a in zip(xs, arr)], 2020))\n\n    # add a constraint that we
        only select N of the numbers, here the PbEq\n    # acting as a SUMIF only
        adds 1 for each, so it''s the absolute number chosen\n    s.add(z3.PbEq([(x,
        1) for x in xs], N))\n\n    # check that these constraints are feasible\n    result
        = s.check()\n\n    # extract the indices of the bools which ended up being
        true\n    indices = [i for i, x in enumerate(xs) if s.model()[x]]\n\n    #
        pick those out of of the array and multiply them together\n    answer = np.product(arr[indices])\n    print(\"answer:\",
        answer)\n\nI wrote up a little more detail [here](https://www.reddit.com/r/adventofcode/comments/k5d66m/2020_day_1z3_using_the_z3_theorem_prover_to_solve/).",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_geep08y", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This
        solution uses the Python bindings for the Z3 SMT solver.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        z3\nimport numpy as np\n\n# load the data\narr = np.loadtxt(&amp;quot;input.txt&amp;quot;,
        dtype=int)\n\n# set number of numbers to use; 2 for part 1, 3 for part 2\nN
        = 3\n\n# initialize the solver\ns = z3.Solver()\n\n# create the boolean decision
        variables about which of the input\n# numbers are chosen - true means use
        that number as one of the N\nxs = [z3.Bool(f&amp;quot;x_{i}&amp;quot;) for
        i in range(len(arr))]\n\n# add a constraint that the numbers sum to 2020 --
        PbEq is pseudo-booleans\n# but works like a SUMIF where the second value in
        each tuple is the value \n# be added and the first is the Bool which controls
        whether it&amp;#39;s added or not\ns.add(z3.PbEq([(x, int(a)) for x, a in
        zip(xs, arr)], 2020))\n\n# add a constraint that we only select N of the numbers,
        here the PbEq\n# acting as a SUMIF only adds 1 for each, so it&amp;#39;s the
        absolute number chosen\ns.add(z3.PbEq([(x, 1) for x in xs], N))\n\n# check
        that these constraints are feasible\nresult = s.check()\n\n# extract the indices
        of the bools which ended up being true\nindices = [i for i, x in enumerate(xs)
        if s.model()[x]]\n\n# pick those out of of the array and multiply them together\nanswer
        = np.product(arr[indices])\nprint(&amp;quot;answer:&amp;quot;, answer)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I
        wrote up a little more detail &lt;a href=\"https://www.reddit.com/r/adventofcode/comments/k5d66m/2020_day_1z3_using_the_z3_theorem_prover_to_solve/\"&gt;here&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geep08y/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606939083.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "geeodij", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "kamicc", "can_mod_post": false, "created_utc":
        1606938833.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_6covc", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Quick take with Lua:\n\n    local table =
        require \"table\"\n    local io = require \"io\"\n    \n    local entries
        = {}\n    \n    for line in io.lines(\"input.txt\") do\n    \tlocal n = tonumber(line)\n    \tfor
        i, entry in ipairs(entries) do\n    \t\tif (entry + n == 2020) then\n    \t\t\tprint(''2
        prod: '', entry * n)\n    \t\tend\n    \n    \t\tfor j = i + 1, #entries,
        1 do\n    \t\t\tif entry + entries[j] + n == 2020 then\n    \t\t\t\tprint(''3
        prod: '', entry * entries[j] * n)\n    \t\t\tend\n    \t\tend\n    \tend\n    \ttable.insert(entries,
        n)\n    end", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_geeodij", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Quick
        take with Lua:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;local table = require &amp;quot;table&amp;quot;\nlocal
        io = require &amp;quot;io&amp;quot;\n\nlocal entries = {}\n\nfor line in io.lines(&amp;quot;input.txt&amp;quot;)
        do\n    local n = tonumber(line)\n    for i, entry in ipairs(entries) do\n        if
        (entry + n == 2020) then\n            print(&amp;#39;2 prod: &amp;#39;, entry
        * n)\n        end\n\n        for j = i + 1, #entries, 1 do\n            if
        entry + entries[j] + n == 2020 then\n                print(&amp;#39;3 prod:
        &amp;#39;, entry * entries[j] * n)\n            end\n        end\n    end\n    table.insert(entries,
        n)\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geeodij/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606938833.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "geenvzx", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "StevoTVR", "can_mod_post": false, "created_utc":
        1606938645.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 0,
        "author_fullname": "t2_380rl", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "**Java**\n\nhttps://github.com/stevotvr/adventofcode2020/blob/main/aoc2020/src/com/stevotvr/aoc2020/Day01.java",
        "edited": 1609013017.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_geenvzx", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/stevotvr/adventofcode2020/blob/main/aoc2020/src/com/stevotvr/aoc2020/Day01.java\"&gt;https://github.com/stevotvr/adventofcode2020/blob/main/aoc2020/src/com/stevotvr/aoc2020/Day01.java&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geenvzx/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606938645.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 0}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "geejr64", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "AbooMatta", "can_mod_post": false, "created_utc":
        1606936856.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_7tdv93n8", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "\\[2020 Day 1 (Part 2)\\] \\[Excel VBA\\]
        because it is all I know\n\nHere''s my code, Part 1 is similar but with only
        2 For...Next loops\n\n    Sub Day1Step1()\n    ''\n    '' Day1Part1 Macro\n    ''
        Keyboard Shortcut: Ctrl+j\n    ''\n    Dim i, j, k, sum, addend1, addend2,
        addend3 As Variant\n    k = 200\n    For i = 1 To 199\n        For j = i +
        1 To 200\n           For k = i + 2 To 200\n                addend1 = Cells(i,
        1).Value\n                addend2 = Cells(j, 1).Value\n                addend3
        = Cells(k, 1).Value\n                sum = addend1 + addend2 + addend3\n                If
        sum = 2020 Then ''check for solution\n                    Cells(1, 2).Value
        = sum ''print solution in cell B1\n                    Cells(1, 3).Value =
        addend1 * addend2 * addend3 ''print answer in C1\n                    Cells(1,
        4).Value = addend1 ''print inputs used\n                    Cells(1, 5).Value
        = addend2\n                    Cells(1, 6).Value = addend3\n                End
        If\n            Next k\n        Next j\n    Next i\n    End Sub", "edited":
        1606947530.0, "top_awarded_type": null, "author_flair_css_class": null, "name":
        "t1_geejr64", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[2020
        Day 1 (Part 2)] [Excel VBA] because it is all I know&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s
        my code, Part 1 is similar but with only 2 For...Next loops&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Sub
        Day1Step1()\n&amp;#39;\n&amp;#39; Day1Part1 Macro\n&amp;#39; Keyboard Shortcut:
        Ctrl+j\n&amp;#39;\nDim i, j, k, sum, addend1, addend2, addend3 As Variant\nk
        = 200\nFor i = 1 To 199\n    For j = i + 1 To 200\n       For k = i + 2 To
        200\n            addend1 = Cells(i, 1).Value\n            addend2 = Cells(j,
        1).Value\n            addend3 = Cells(k, 1).Value\n            sum = addend1
        + addend2 + addend3\n            If sum = 2020 Then &amp;#39;check for solution\n                Cells(1,
        2).Value = sum &amp;#39;print solution in cell B1\n                Cells(1,
        3).Value = addend1 * addend2 * addend3 &amp;#39;print answer in C1\n                Cells(1,
        4).Value = addend1 &amp;#39;print inputs used\n                Cells(1, 5).Value
        = addend2\n                Cells(1, 6).Value = addend3\n            End If\n        Next
        k\n    Next j\nNext i\nEnd Sub\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geejr64/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606936856.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "geebeup", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "azatol", "can_mod_post": false, "created_utc":
        1606933378.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_1v3ph", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Proved the correct result for my Day 1 input
        in Coq. Part 1 only.\n\nPart 2 will take about 200 times longer with the current
        approach, and it''s already 10 minutes.\n\nhttps://github.com/apeterson-BFI/AdventOfCode/blob/coq/Adv2020V/day1.V",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_geebeup", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Proved
        the correct result for my Day 1 input in Coq. Part 1 only.&lt;/p&gt;\n\n&lt;p&gt;Part
        2 will take about 200 times longer with the current approach, and it&amp;#39;s
        already 10 minutes.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/apeterson-BFI/AdventOfCode/blob/coq/Adv2020V/day1.V\"&gt;https://github.com/apeterson-BFI/AdventOfCode/blob/coq/Adv2020V/day1.V&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geebeup/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606933378.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "geeb4is", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "MaterialFeeling", "can_mod_post": false,
        "created_utc": 1606933269.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 2, "author_fullname": "t2_sadcrj6", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "simple python3 solution\n\n[https://github.com/Krykiet/advent\\_of\\_code\\_2020](https://github.com/Krykiet/advent_of_code_2020)",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_geeb4is", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;simple
        python3 solution&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/Krykiet/advent_of_code_2020\"&gt;https://github.com/Krykiet/advent_of_code_2020&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geeb4is/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606933269.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gg2hk4i", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "themacmaniac", "can_mod_post": false,
        "send_replies": true, "parent_id": "t1_gg2cj8e", "score": 1, "author_fullname":
        "t2_2ixztuez", "removal_reason": null, "approved_by": null, "mod_note": null,
        "all_awardings": [], "collapsed": false, "body": "thx for your quick answer.\n\n&amp;#x200B;\n\nI  dropped
        the actual numlist, too, and used a list. Your result made me think, I remembered
        a similar case I had with filereader. I often use print function for tracking
        values. Used in a for loop, print slows down the whole thing. Now here''s
        the full working code:\n\n* deleted print within loop\n* added third value
        for product\n\n&amp;#x200B;\n\n    file = [1977, 1515, ... 1469, 1888]\n    length
        = len(file)\n    print(\"Listlength:\", length)\n    for i in file:\n        x
        = file.index(i) + 1\n        for j in range (x, length):\n            for
        h in range (x + 1, length):\n                result = i + file[j] + file[h]\n                if
        result == 2020:\n                    product = i * file[j] * file[h]\n                    print(\"match!\")\n                    print(\"Solution:
        ---&gt;\", product)\n                    x = length\n                    break\n            else:\n                continue\n            break",
        "edited": 1608151847.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gg2hk4i", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;thx
        for your quick answer.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;I  dropped
        the actual numlist, too, and used a list. Your result made me think, I remembered
        a similar case I had with filereader. I often use print function for tracking
        values. Used in a for loop, print slows down the whole thing. Now here&amp;#39;s
        the full working code:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;deleted print within
        loop&lt;/li&gt;\n&lt;li&gt;added third value for product&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;file
        = [1977, 1515, ... 1469, 1888]\nlength = len(file)\nprint(&amp;quot;Listlength:&amp;quot;,
        length)\nfor i in file:\n    x = file.index(i) + 1\n    for j in range (x,
        length):\n        for h in range (x + 1, length):\n            result = i
        + file[j] + file[h]\n            if result == 2020:\n                product
        = i * file[j] * file[h]\n                print(&amp;quot;match!&amp;quot;)\n                print(&amp;quot;Solution:
        ---&amp;gt;&amp;quot;, product)\n                x = length\n                break\n        else:\n            continue\n        break\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gg2hk4i/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1608151505.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1608151505.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gg2cj8e", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "SgtKashim", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_gg28mgz", "score": 1, "author_fullname": "t2_5a7ge",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "My code for both solutions ran correctly, and returned an answer
        in a few milliseconds. \n\nI think, at a quick glance, your issue is with
        your first \"for\" loop. There''s some bits missing - the way you''re opening
        the file. If you did something like \n\n    file = open(''myfile.txt'', ''w'')   \n\nthen
        your line\n\n    for i in file:\n\nIt looks like what this does is pull the
        i^th character out of the file (not the i^th line). You want to iterate over
        the lines in the file. See [here](https://www.geeksforgeeks.org/read-a-file-line-by-line-in-python/).
        Unless I''m mis-remembering how file-readers work in Python and it''s pulling
        bits. \n\nThe rest of the logic looks right, at a quick glance.", "edited":
        1608149752.0, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_gg2cj8e", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My
        code for both solutions ran correctly, and returned an answer in a few milliseconds.
        &lt;/p&gt;\n\n&lt;p&gt;I think, at a quick glance, your issue is with your
        first &amp;quot;for&amp;quot; loop. There&amp;#39;s some bits missing - the
        way you&amp;#39;re opening the file. If you did something like &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;file
        = open(&amp;#39;myfile.txt&amp;#39;, &amp;#39;w&amp;#39;)   \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;then
        your line&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for i in file:\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It
        looks like what this does is pull the i&lt;sup&gt;th&lt;/sup&gt; character
        out of the file (not the i&lt;sup&gt;th&lt;/sup&gt; line). You want to iterate
        over the lines in the file. See &lt;a href=\"https://www.geeksforgeeks.org/read-a-file-line-by-line-in-python/\"&gt;here&lt;/a&gt;.
        Unless I&amp;#39;m mis-remembering how file-readers work in Python and it&amp;#39;s
        pulling bits. &lt;/p&gt;\n\n&lt;p&gt;The rest of the logic looks right, at
        a quick glance.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_k4e4lm", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gg2cj8e/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1608149139.0,
        "author_flair_text": null, "treatment_tags": [], "created_utc": 1608149139.0,
        "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0, "depth":
        2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gg28mgz", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "themacmaniac", "can_mod_post": false,
        "created_utc": 1608147298.0, "send_replies": true, "parent_id": "t1_gee9gva",
        "score": 2, "author_fullname": "t2_2ixztuez", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "That''s nice - I also
        worked with nested for-loops. Most solutions I found used some modules.\n\nI
        have two questions:\n\n* if your code got the solution, it still checks the
        other numbers, right?\n* is your solution with 3 nested for-loops usable?
        I let my code run over 1.5h, still no result.\n\nbtw, here''s my code:\n\n    file
        = [1977, 1515, ... 1469, 1888]\n    length = len(file)\n    print(\"Listlength:\",
        length)\n    for i in file:\n        x = file.index(i) + 1\n        for j
        in range (x, length):\n            for h in range (x + 1, length):\n                result
        = i + file[j] + file[h]\n                print(result)\n                if
        result == 2020:\n                    product = i * file[j]\n                    print(\"match!\")\n                    print(\"Solution:
        ---&gt;\", product)\n                    x = length\n                    print(\"X:\",
        x)\n                    break\n            else:\n                continue\n            break",
        "edited": 1608150531.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gg28mgz", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s
        nice - I also worked with nested for-loops. Most solutions I found used some
        modules.&lt;/p&gt;\n\n&lt;p&gt;I have two questions:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;if
        your code got the solution, it still checks the other numbers, right?&lt;/li&gt;\n&lt;li&gt;is
        your solution with 3 nested for-loops usable? I let my code run over 1.5h,
        still no result.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;btw, here&amp;#39;s my
        code:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;file = [1977, 1515, ... 1469, 1888]\nlength
        = len(file)\nprint(&amp;quot;Listlength:&amp;quot;, length)\nfor i in file:\n    x
        = file.index(i) + 1\n    for j in range (x, length):\n        for h in range
        (x + 1, length):\n            result = i + file[j] + file[h]\n            print(result)\n            if
        result == 2020:\n                product = i * file[j]\n                print(&amp;quot;match!&amp;quot;)\n                print(&amp;quot;Solution:
        ---&amp;gt;&amp;quot;, product)\n                x = length\n                print(&amp;quot;X:&amp;quot;,
        x)\n                break\n        else:\n            continue\n        break\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gg28mgz/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1608147298.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gef7qzj", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_gef7mkb", "score":
        1, "author_fullname": "t2_60niu", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "collapsed": false, "body": "\ud83d\udc4d",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_gef7qzj", "is_submitter": true, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;\ud83d\udc4d&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": "moderator", "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gef7qzj/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606947417.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606947417.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gef7mkb", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "SgtKashim", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_gef60je", "score": 2, "author_fullname": "t2_5a7ge",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "Done.", "edited": false, "top_awarded_type": null, "downs": 0,
        "author_flair_css_class": null, "name": "t1_gef7mkb", "is_submitter": false,
        "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Done.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gef7mkb/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606947366.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606947366.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gef60je", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "daggerdragon", "can_mod_post": false,
        "created_utc": 1606946619.0, "send_replies": true, "parent_id": "t1_gee9gva",
        "score": 1, "author_fullname": "t2_60niu", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "Please add the language
        to your post to make it easier for folks who Ctrl-F the megathreads looking
        for a specific language.  Thanks!", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_gef60je", "is_submitter": true,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Please add the language to your post to
        make it easier for folks who Ctrl-F the megathreads looking for a specific
        language.  Thanks!&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": "moderator", "associated_award": null, "stickied":
        false, "author_premium": false, "can_gild": false, "link_id": "t3_k4e4lm",
        "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gef60je/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606946619.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gee9gva", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "SgtKashim", "can_mod_post": false, "created_utc":
        1606932632.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_5a7ge", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "I solved in Python. \n\nPuzzle 1\n\n     #dropped
        the actual numlist from this - it''s not needed to see the algorithm  \n     l
        = len(numlist)  \n     for i in range(0, l):   \n         for j in range(i,
        l):  \n            if (2020 - numlist[i]) == numlist[j]:   \n                 print(\"Magic
        Numbers: \", numlist[i], \" AND \", numlist[j])  \n                 print(\"Product:
        \", numlist[i] * numlist[j])  \n\nPuzzle 2\n\n     #dropped the actual numlist
        from this - it''s not needed to see the algorithm  \n     l = len(numlist)  \n     for
        i in range(0, l):   \n         for j in range(i, l):  \n             for k
        in range(j, l):  \n                 if ((2020 - numlist[i] - numlist[j]) ==
        numlist[k]) :   \n                     print(\"Magic Numbers: \", numlist[i],
        \" AND \", numlist[j], \" AND \", numlist[k])  \n                     print(\"Product:
        \", numlist[i] * numlist[j] * numlist[k])", "edited": 1606947361.0, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_gee9gva", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I solved in Python. &lt;/p&gt;\n\n&lt;p&gt;Puzzle
        1&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; #dropped the actual numlist from this
        - it&amp;#39;s not needed to see the algorithm  \n l = len(numlist)  \n for
        i in range(0, l):   \n     for j in range(i, l):  \n        if (2020 - numlist[i])
        == numlist[j]:   \n             print(&amp;quot;Magic Numbers: &amp;quot;,
        numlist[i], &amp;quot; AND &amp;quot;, numlist[j])  \n             print(&amp;quot;Product:
        &amp;quot;, numlist[i] * numlist[j])  \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Puzzle
        2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; #dropped the actual numlist from this
        - it&amp;#39;s not needed to see the algorithm  \n l = len(numlist)  \n for
        i in range(0, l):   \n     for j in range(i, l):  \n         for k in range(j,
        l):  \n             if ((2020 - numlist[i] - numlist[j]) == numlist[k]) :   \n                 print(&amp;quot;Magic
        Numbers: &amp;quot;, numlist[i], &amp;quot; AND &amp;quot;, numlist[j], &amp;quot;
        AND &amp;quot;, numlist[k])  \n                 print(&amp;quot;Product: &amp;quot;,
        numlist[i] * numlist[j] * numlist[k])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gee9gva/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606932632.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 1, "removal_reason": null, "link_id": "t3_k4e4lm",
        "author_flair_template_id": null, "likes": null, "replies": {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geh3aq0",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "andrewsredditstuff",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_gef2cw6", "score":
        1, "author_fullname": "t2_2h5225av", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "Of course!  Obvious
        now you''ve pointed it out.  And not only simpler, but presumably up to 4
        times faster too (depending on how far into the set the result is).  Thanks.\n\nEdit-
        just tried it, and down from 40ms to 15ms.", "edited": 1606991626.0, "top_awarded_type":
        null, "downs": 0, "author_flair_css_class": null, "name": "t1_geh3aq0", "is_submitter":
        false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Of course!  Obvious
        now you&amp;#39;ve pointed it out.  And not only simpler, but presumably up
        to 4 times faster too (depending on how far into the set the result is).  Thanks.&lt;/p&gt;\n\n&lt;p&gt;Edit-
        just tried it, and down from 40ms to 15ms.&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geh3aq0/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606991363.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606991363.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gef2cw6", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        "DELETED", "no_follow": true, "author": "[deleted]", "can_mod_post": false,
        "send_replies": true, "parent_id": "t1_gedzr73", "score": 1, "approved_by":
        null, "report_reasons": null, "all_awardings": [], "subreddit_id": "t5_3b3wa",
        "body": "[deleted]", "edited": false, "author_flair_css_class": null, "collapsed":
        true, "downs": 0, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gef2cw6/",
        "num_reports": null, "locked": false, "name": "t1_gef2cw6", "created": 1606944969.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1606944969.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "gedzr73", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "andrewsredditstuff", "can_mod_post": false,
        "created_utc": 1606928746.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 2, "author_fullname": "t2_2h5225av", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "C# (very unsophisticated
        - will probably go back and do in LINQ sometime).  But it does work reasonably
        quickly, and it won''t use the same entry twice (or three times).\n\n    int
        result = 0;\n    int[] numbers = InputSplit.Select(n =&gt; int.Parse(n)).ToArray();\n    \n    for
        (int i = 0; i &lt; numbers.Length; i++)\n    {\n        for (int j = 0; j
        &lt; numbers.Length; j++)\n        {\n            if (i == j) continue;\n            for
        (int k = 0; k &lt; numbers.Length; k++)\n            {\n                if
        (WhichPart == 2 &amp;&amp; (j == k || i == k)) continue;\n                    if
        (numbers[i] + numbers[j] + (WhichPart == 1 ? 0 : numbers[k]) == 2020)\n                    {\n                        result
        = numbers[i] * numbers[j] * (WhichPart == 1 ? 1 : numbers[k]);\n                        goto
        foundOne;\n                    }\n                if (WhichPart == 1) continue;\n            }\n        }\n    }\n    foundOne:\n    return
        result;", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gedzr73", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C#
        (very unsophisticated - will probably go back and do in LINQ sometime).  But
        it does work reasonably quickly, and it won&amp;#39;t use the same entry twice
        (or three times).&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;int result = 0;\nint[]
        numbers = InputSplit.Select(n =&amp;gt; int.Parse(n)).ToArray();\n\nfor (int
        i = 0; i &amp;lt; numbers.Length; i++)\n{\n    for (int j = 0; j &amp;lt;
        numbers.Length; j++)\n    {\n        if (i == j) continue;\n        for (int
        k = 0; k &amp;lt; numbers.Length; k++)\n        {\n            if (WhichPart
        == 2 &amp;amp;&amp;amp; (j == k || i == k)) continue;\n                if
        (numbers[i] + numbers[j] + (WhichPart == 1 ? 0 : numbers[k]) == 2020)\n                {\n                    result
        = numbers[i] * numbers[j] * (WhichPart == 1 ? 1 : numbers[k]);\n                    goto
        foundOne;\n                }\n            if (WhichPart == 1) continue;\n        }\n    }\n}\nfoundOne:\nreturn
        result;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gedzr73/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606928746.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gefddxp",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "jfb1337",
        "can_mod_post": false, "created_utc": 1606950110.0, "send_replies": true,
        "parent_id": "t1_gedosh1", "score": 1, "author_fullname": "t2_dhdti", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "AoC only requires you solve for your own input, and there are a fixed set
        of inputs. I remember one from last year where there''s a *significantly*
        faster algorithm if the input had a certain property that was unspecified
        but turned out to always be true.\nI''m guessing the inputs are crafted such
        that that those kind of edge cases either come up for everyone or for noone;
        and considering that it''s the first day it''s likely that no one got aninput
        where the distinctness matters. I could be wrong though; maybe someone did
        get a 1010.", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gefddxp", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;AoC
        only requires you solve for your own input, and there are a fixed set of inputs.
        I remember one from last year where there&amp;#39;s a &lt;em&gt;significantly&lt;/em&gt;
        faster algorithm if the input had a certain property that was unspecified
        but turned out to always be true.\nI&amp;#39;m guessing the inputs are crafted
        such that that those kind of edge cases either come up for everyone or for
        noone; and considering that it&amp;#39;s the first day it&amp;#39;s likely
        that no one got aninput where the distinctness matters. I could be wrong though;
        maybe someone did get a 1010.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_k4e4lm", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gefddxp/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1606950110.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gef66il",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606946694.0, "send_replies": true,
        "parent_id": "t1_gedosh1", "score": 2, "author_fullname": "t2_60niu", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "&gt; # Top-level posts in Solution Megathreads are for *code solutions* only.\n\nThis
        is a top-level post, so please edit your post and share your code/repo/solution
        or, if you haven''t finished the puzzle yet, you can always create your own
        thread and make sure to flair it with `Help`.", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_gef66il", "is_submitter":
        true, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;h1&gt;Top-level
        posts in Solution Megathreads are for &lt;em&gt;code solutions&lt;/em&gt;
        only.&lt;/h1&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This is a top-level post,
        so please edit your post and share your code/repo/solution or, if you haven&amp;#39;t
        finished the puzzle yet, you can always create your own thread and make sure
        to flair it with &lt;code&gt;Help&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": "moderator", "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gef66il/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606946694.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gedosh1", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "blacksqr", "can_mod_post": false, "created_utc":
        1606924319.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 3,
        "author_fullname": "t2_4nylf", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Is it me or does it seem like a lot of solutions
        neglect the condition that the numbers chosen have to be separate entries?\n\ni.e.,
        In part 1, if one of the entries happened to be 1010, would your solution
        just grab that entry twice?  Is it just by the accident that your input data
        doesn''t contain that number that your code works?", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_gedosh1", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Is it me or does it seem like
        a lot of solutions neglect the condition that the numbers chosen have to be
        separate entries?&lt;/p&gt;\n\n&lt;p&gt;i.e., In part 1, if one of the entries
        happened to be 1010, would your solution just grab that entry twice?  Is it
        just by the accident that your input data doesn&amp;#39;t contain that number
        that your code works?&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gedosh1/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1606924319.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "distinguished": null, "likes": null, "replies": {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "distinguished":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gezcczu", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "mcmillhj",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_gezbf5g", "score":
        1, "author_fullname": "t2_nyxfu", "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "ah ok, that makes sense, I basically did this same thing with
        a hash instead of the boolean array:\n\n    my %filter; \n    foreach my $expense
        (@expenses) {\n      if (exists $filter{2020 - $expense}) {\n        say $expense
        * (2020 - $expense);\n        last;\n      }\n      $filter{$expense} = 1;\n    }",
        "edited": 1607374288.0, "gildings": {}, "downs": 0, "author_flair_css_class":
        null, "name": "t1_gezcczu", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;ah
        ok, that makes sense, I basically did this same thing with a hash instead
        of the boolean array:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;my %filter; \nforeach
        my $expense (@expenses) {\n  if (exists $filter{2020 - $expense}) {\n    say
        $expense * (2020 - $expense);\n    last;\n  }\n  $filter{$expense} = 1;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "link_id": "t3_k4e4lm",
        "associated_award": null, "stickied": false, "author_premium": false, "can_gild":
        false, "top_awarded_type": null, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gezcczu/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607373147.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1607373147.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 5, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gezbf5g", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Mattpn", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_geyb1su", "score": 2, "author_fullname": "t2_n0xvd",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "(pseudo code)\n```\n// Assume all bool in array are false by
        default   \nbool[] array = bool[2020]   \n  \ncurrentValue = 700\nif bool[2020-currentValue]
        == true:\n   return [currentValue,2020-currentValue]\nelse:\n   bool[currentValue]
        = true;\n    \n```", "edited": false, "author_flair_css_class": null, "name":
        "t1_gezbf5g", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;(pseudo
        code)\n```\n// Assume all bool in array are false by default&lt;br/&gt;\nbool[]
        array = bool[2020]   &lt;/p&gt;\n\n&lt;p&gt;currentValue = 700\nif bool[2020-currentValue]
        == true:\n   return [currentValue,2020-currentValue]\nelse:\n   bool[currentValue]
        = true;&lt;/p&gt;\n\n&lt;p&gt;```&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "link_id": "t3_k4e4lm", "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": null, "treatment_tags":
        [], "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gezbf5g/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607372697.0, "author_flair_text": null, "collapsed": false, "created_utc":
        1607372697.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 4, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "geyb1su", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "mcmillhj", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_gempl0d", "score": 1, "author_fullname": "t2_nyxfu",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Do you have an example of this? Struggling
        to follow what you mean.", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_geyb1su", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Do
        you have an example of this? Struggling to follow what you mean.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geyb1su/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607357668.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1607357668.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "distinguished":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geqd3oz", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Mattpn",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_gemqz57", "score":
        1, "author_fullname": "t2_n0xvd", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Effectively it could work
        with an almost infinite number of entries as you would just use addresses
        instead of an initialized array.  You are just trading memory optimization
        for increased speed.", "edited": false, "author_flair_css_class": null, "name":
        "t1_geqd3oz", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Effectively
        it could work with an almost infinite number of entries as you would just
        use addresses instead of an initialized array.  You are just trading memory
        optimization for increased speed.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "link_id": "t3_k4e4lm", "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": null, "treatment_tags":
        [], "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geqd3oz/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607200064.0, "author_flair_text": null, "collapsed": false, "created_utc":
        1607200064.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 4, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gemqz57", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "himmelundhoelle", "can_mod_post": false,
        "send_replies": true, "parent_id": "t1_gempl0d", "score": 1, "author_fullname":
        "t2_2nfkd8wx", "removal_reason": null, "approved_by": null, "mod_note": null,
        "all_awardings": [], "collapsed": false, "body": "...which is like a hashset
        with 2020 buckets and perfect hashing. Smart!\n\n(even though this only works
        with a limited number of entries, making big O complexity irrelevant)", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_gemqz57",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;...which is like a hashset
        with 2020 buckets and perfect hashing. Smart!&lt;/p&gt;\n\n&lt;p&gt;(even
        though this only works with a limited number of entries, making big O complexity
        irrelevant)&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_k4e4lm", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gemqz57/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1607113577.0,
        "author_flair_text": null, "treatment_tags": [], "created_utc": 1607113577.0,
        "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0, "depth":
        3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gempl0d", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Mattpn", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_gehziab", "score": 1, "author_fullname": "t2_n0xvd",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "Boolean Array with a length of 2020.  \nChecks that index of
        the (desired value - current value) if true.", "edited": false, "top_awarded_type":
        null, "downs": 0, "author_flair_css_class": null, "name": "t1_gempl0d", "is_submitter":
        false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Boolean Array with a
        length of 2020.&lt;br/&gt;\nChecks that index of the (desired value - current
        value) if true.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_k4e4lm", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gempl0d/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1607112882.0,
        "author_flair_text": null, "treatment_tags": [], "created_utc": 1607112882.0,
        "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0, "depth":
        2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gemq6te",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "himmelundhoelle",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_gelzrkm", "score":
        1, "author_fullname": "t2_2nfkd8wx", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "Right,
        add/contains operations are _O(1)_ on an ideal hashset!", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_gemq6te",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Right, add/contains
        operations are &lt;em&gt;O(1)&lt;/em&gt; on an ideal hashset!&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gemq6te/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607113183.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1607113183.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gelzrkm", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "FederX", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_gehziab", "score": 1, "author_fullname": "t2_mno6x",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "You could add all the numbers to a set, then go back over the
        list again and check in the set for the number needed to sum to 2020?", "edited":
        false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null,
        "name": "t1_gelzrkm", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You
        could add all the numbers to a set, then go back over the list again and check
        in the set for the number needed to sum to 2020?&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gelzrkm/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607100558.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1607100558.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gehziab", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "himmelundhoelle", "can_mod_post": false,
        "created_utc": 1607013209.0, "send_replies": true, "parent_id": "t1_gedo7g8",
        "score": 1, "author_fullname": "t2_2nfkd8wx", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "How do you do part 1
        in *O(n)*? I got it in *O(n log n)*...", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_gehziab", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;How do you do part 1 in &lt;em&gt;O(n)&lt;/em&gt;?
        I got it in &lt;em&gt;O(n log n)&lt;/em&gt;...&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gehziab/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1607013209.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gef6ark", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "daggerdragon", "can_mod_post": false,
        "created_utc": 1606946747.0, "send_replies": true, "parent_id": "t1_gedo7g8",
        "score": 1, "author_fullname": "t2_60niu", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "&gt; # Top-level posts
        in Solution Megathreads are for *code solutions* only.\n\nThis is a top-level
        post, so please edit your post and share your code/repo/solution or, if you
        haven''t finished the puzzle yet, you can always create your own thread and
        make sure to flair it with `Help`.", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_gef6ark", "is_submitter":
        true, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;h1&gt;Top-level
        posts in Solution Megathreads are for &lt;em&gt;code solutions&lt;/em&gt;
        only.&lt;/h1&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This is a top-level post,
        so please edit your post and share your code/repo/solution or, if you haven&amp;#39;t
        finished the puzzle yet, you can always create your own thread and make sure
        to flair it with &lt;code&gt;Help&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": "moderator", "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gef6ark/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606946747.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gedupcc",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "wikipedia_text_bot",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_gedunja", "score":
        1, "author_fullname": "t2_8pm6pzxo", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "**[3SUM](https://en.wikipedia.org/wiki/3SUM)**\n\nIn
        computational complexity theory, the 3SUM problem asks if a given set of             n         {\\displaystyle
        n}  real numbers contains three elements that sum to zero. A generalized version,
        k-SUM, asks the same question on k numbers. 3SUM can be easily solved in             O     (          n            2               )         {\\displaystyle
        O(n^{2})}  time, and matching             \u03a9     (          n            \u2308       k              /             2       \u2309               )         {\\displaystyle
        \\Omega (n^{\\lceil k/2\\rceil })}  lower bounds are known in some specialized
        models of computation (Erickson 1999). It was conjectured that any deterministic
        algorithm for the 3SUM requires             \u03a9     (          n            2               )         {\\displaystyle
        \\Omega (n^{2})}  time.\n\n[About Me](https://www.reddit.com/user/wikipedia_text_bot/comments/jrn2mj/about_me/)
        - [Opt out](https://www.reddit.com/user/wikipedia_text_bot/comments/jrti43/opt_out_here/)
        - OP can reply !delete to delete - [Article of the day](https://redd.it/k4xild)",
        "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_gedupcc", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;&lt;a
        href=\"https://en.wikipedia.org/wiki/3SUM\"&gt;3SUM&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;In
        computational complexity theory, the 3SUM problem asks if a given set of             n         {\\displaystyle
        n}  real numbers contains three elements that sum to zero. A generalized version,
        k-SUM, asks the same question on k numbers. 3SUM can be easily solved in             O     (          n            2               )         {\\displaystyle
        O(n&lt;sup&gt;{2})}&lt;/sup&gt;  time, and matching             \u03a9     (          n            \u2308       k              /             2       \u2309               )         {\\displaystyle
        \\Omega (n&lt;sup&gt;{\\lceil&lt;/sup&gt; k/2\\rceil })}  lower bounds are
        known in some specialized models of computation (Erickson 1999). It was conjectured
        that any deterministic algorithm for the 3SUM requires             \u03a9     (          n            2               )         {\\displaystyle
        \\Omega (n&lt;sup&gt;{2})}&lt;/sup&gt;  time.&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://www.reddit.com/user/wikipedia_text_bot/comments/jrn2mj/about_me/\"&gt;About
        Me&lt;/a&gt; - &lt;a href=\"https://www.reddit.com/user/wikipedia_text_bot/comments/jrti43/opt_out_here/\"&gt;Opt
        out&lt;/a&gt; - OP can reply !delete to delete - &lt;a href=\"https://redd.it/k4xild\"&gt;Article
        of the day&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_k4e4lm", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gedupcc/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1606926757.0,
        "author_flair_text": null, "treatment_tags": [], "created_utc": 1606926757.0,
        "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0, "depth":
        2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gedunja", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "1-more", "can_mod_post": false, "created_utc":
        1606926736.0, "send_replies": true, "parent_id": "t1_gedo7g8", "score": 1,
        "author_fullname": "t2_e1nfa", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "That''s actually an open problem
        in Computer Science: is there a solution to [3sum](https://en.wikipedia.org/wiki/3SUM)
        in O(n^k) where k &lt; 2! I was sure that it would be proved that there isn''t
        but nope! I guess greater minds than mine have tackled this. It''s been a
        VERY long time since I''ve proved the O size of a problem using the tree diameter
        thing, so I wouldn''t really know where to begin with this. But I could not
        do better than any of the math nerds who have already tackled it.", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_gedunja",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s actually
        an open problem in Computer Science: is there a solution to &lt;a href=\"https://en.wikipedia.org/wiki/3SUM\"&gt;3sum&lt;/a&gt;
        in O(n&lt;sup&gt;k)&lt;/sup&gt; where k &amp;lt; 2! I was sure that it would
        be proved that there isn&amp;#39;t but nope! I guess greater minds than mine
        have tackled this. It&amp;#39;s been a VERY long time since I&amp;#39;ve proved
        the O size of a problem using the tree diameter thing, so I wouldn&amp;#39;t
        really know where to begin with this. But I could not do better than any of
        the math nerds who have already tackled it.&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_k4e4lm", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gedunja/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606926736.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "gedo7g8", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Mattpn", "can_mod_post": false, "created_utc":
        1606924081.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_n0xvd", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Has anyone come up with an x\\*O(n) solution
        for part 2?  It''s easy for O(n\\^2) but I''m curious if anyone has a better
        solution that is O(n).", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_gedo7g8", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Has
        anyone come up with an x*O(n) solution for part 2?  It&amp;#39;s easy for
        O(n^2) but I&amp;#39;m curious if anyone has a better solution that is O(n).&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gedo7g8/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1606924081.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "more",
        "data": {"count": 1386, "name": "t1_gednq6d", "id": "gednq6d", "parent_id":
        "t3_k4e4lm", "depth": 0, "children": ["gednq6d", "gedn6ai", "ged959m", "gedmx6c",
        "gedl7y0", "gecoa0z", "geco79q", "gedle57", "gedjo2d", "ged616q", "ged4hhm",
        "gec5osj", "gebx1yf", "gecibnq", "geck8u2", "gecyms2", "gectazu", "ged8jld",
        "ged2syd", "gecjat6", "gecq4io", "ged4e5g", "geby48b", "gebrkuf", "gec1oxq",
        "gebidqz", "gebt73a", "gecbbcr", "gec8bw1", "gecelbl", "gecjm46", "gec5h0g",
        "gecca7r", "gec6ysm", "gecd75d", "ged6aaq", "gecoya2", "gec1vl4", "gec4rjz",
        "gec2gg5", "gebx4pn", "gec65da", "gebx9gq", "gec3n80", "gebk1zj", "gebpzhl",
        "gebv38e", "gearve7", "gebpih7", "geakvfh", "geafecs", "geaeazy", "geayab9",
        "gebmrn5", "geb8t7f", "geavhwk", "gebuoyc", "geb5xuz", "geb0hzp", "gebhkq4",
        "gec0e6f", "gebdy00", "geb2800", "gec2cvf", "gebka8s", "gec7khr", "geby132",
        "geaqgdt", "gec5y4z", "gec66m6", "gebn1q2", "gecfir8", "gecsn65", "gebiwyv",
        "gebs83z", "gebgpfi", "gebclbc", "gebkzju", "gec24rm", "gebmpyg", "gebvdck",
        "gebkcl1", "geaxx0l", "gebpra6", "gebi4f8", "gebjdgw", "gebkezv", "geb2kzp",
        "gebmnz0", "gea3dle", "geaqgwd", "geawos1", "geat8vy", "gebt57q", "geakqc4",
        "ge9w3sf", "geaj57s", "gebn00e", "geb7njk", "gea9tbw", "gea6p3j", "gea6m9x",
        "ge9px27", "ge8vrzv", "geacp52", "ge96iwo", "gealkby", "geb1ywi", "geb72uc",
        "geb22xg", "geaptro", "geator7", "geanteq", "gebkewe", "gea2gdy", "geap7rl",
        "geajhnt", "geal0ma", "geajrnx", "geash89", "geaco7m", "geapk7s", "geb5m5w",
        "geb9tkh", "geb34hs", "geatz0f", "geac8gr", "ge9lf9j", "geblstp", "geb7ept",
        "gea55cz", "gec124u", "geblftt", "geaz3ql", "gebdwoh", "ge9ysx3", "gea97s3",
        "gebbsdv", "geafk7o", "geb8tua", "geaeq43", "geb9x0t", "geasy2d", "gec7b6w",
        "gebuvuw", "gea1c82", "gec7jgm", "geadna4", "geakexd", "geapdes", "geb9b3s",
        "ge9qqq4", "geaiot5", "geaskv9", "geb434g", "geabg9r", "geaxi7b", "geboier",
        "gebykhw", "ge92lj3", "gebhpca", "geb1ylq", "gea7tzx", "geall6i", "ge9963b",
        "geajrji", "ge98ysx", "gebk3nj", "geb7p6r", "ge93wxk", "ge9nnl1", "geakrug",
        "gea60ob", "gea1x61", "geb62j1", "geax0kn", "gea8ouf", "geamgj3", "gebjbwq",
        "ge99kma", "ge8ugt2", "ge95uhg", "ge8vf78", "ge9r2st", "ge988ei", "gead5e6",
        "gea91jq", "gea5sgr", "geamp0x", "ge8t5hs", "gea5os4", "ge95t56", "ge8fo5f",
        "ge9fs08", "ge9qj85", "ge9sgsy", "ge9ntyq", "ge9p8jh", "geagd2g", "ge9nvip",
        "ge9p7h9", "ge99hmm", "ge9m14j", "ge93efl", "ge9d0ld", "ge9f357", "ge8lr2b",
        "ge8qk88", "ge8iotj", "ge9s0ou", "ge8xlj2", "ge93z7e", "ge93rku", "gea8mt6",
        "ge92otc", "gea2ml2", "ge8qeua", "ge9x8om", "gea69ik", "geat0j3", "geahpdb",
        "ge8v27u", "geak8vy", "gea8skb", "gea4g6s", "ge93z8h", "ge8pjw2", "ge9dal7",
        "geazt0h", "ge998wb", "ge92kna", "ge8ub8c", "ge9wiwj", "ge8vu5a", "ge9l4ak",
        "ge9qhcj", "ge952tt", "ge92sk0", "ge9fh10", "ge90t2q", "ge98q2x", "ge8rqxk",
        "geaanxo", "ge95r6o", "gea7lc6", "geascdo", "geamavo", "geas9jr", "ge9sd18",
        "geaonwr", "geady27", "geaqlo1", "ge9euu1", "ge8wj14", "ge9vs5f", "ge9h6ew",
        "ge8nctl", "gebecfl", "ge9wtc6", "ge98us1", "ge9pptc", "ge90snh", "ge9u529",
        "ge985ep", "gebkep2", "geagj02", "ge8sub1", "ge9d2dm", "geaegmq", "geaj285",
        "ge8qd3m", "ge8hogv", "ge9autn", "ge9k6ig", "ge9r1t7", "geaez7c", "geb9e3q",
        "ge9yjts", "gea9o1a", "geae2je", "ge8sd2z", "gea9n6w", "ge9x8du", "ge9qgy9",
        "gead2hx", "geasoby", "gea0ovw", "ge9m01l", "geaxt4t", "ge9lb2t", "ge8fzl7",
        "ge8z0r0", "ge9oow8", "geajnim", "gea17ge", "gea37gf", "ge9xr0x", "ge96tiq",
        "ge9k3gq", "ge9osbn", "ge9lt7o", "ge9c3l6", "geayy5d", "ge9hgu2", "ge9fr4e",
        "ge8oces", "geaek04", "ge8zyte", "geafdj9", "geb2ead", "ge9adsg", "ge9dk0d",
        "ge9kgch", "geaja8q", "ge99xa3", "gea6u2s", "ge8ymhn", "ge9i56x", "ge95a1e",
        "ge8xemy", "ge8pk2k", "gebftfl", "ge8d6bv", "geaqabf", "ge95uga", "ge9gln9",
        "ge8py6d", "ge94liw", "ge96u2q", "ge8umgx", "ge8yqmy", "gea0reu", "ge8j4w1",
        "ge8d3oo", "ge8rwqc", "ge9quzr", "gebcdzv", "ge9tvkg", "geb73sk", "ge8de7e",
        "ge8q1ox", "ge8w7ap", "ge8xkyv", "geaj1v1", "ge8f3us", "ge8zqyt", "ge8hblp",
        "ge9ic0a", "ge8sr2j", "ge9cwwc", "geak8fk", "ge94tnj", "ge8fr91", "ge8vnir",
        "ge9c2p4", "ge8vp59", "ge8cl3c", "ge8dgjc", "ge9n0k8", "ge8xp9f", "ge8dte7",
        "ge8gj8r", "ge8s7r4", "ge8g5rw", "ge8d8xr", "ge8hasg", "ge8sucw", "ge8s76t",
        "ge94kss", "ge9060g", "ge91y87", "ge8wxzs", "ge8cm9v", "ge8gy21", "ge8p2li",
        "ge8zfpr", "ge8eqo4", "ge9idwm", "geab8yv", "ge8e9e9", "ge8lrki", "ge8fciw",
        "ge8yvut", "ge8em6p", "ge8temf", "ge8dyk7", "ge8eiis", "ge8fohw", "ge8dnbn",
        "ge8nxeg", "ge8gb0m", "ge8dljn", "ge8hczq", "ge9m65s", "ge97rgx", "ge8gr6w",
        "ge8e2mm", "ge8dw1k", "ge8vk39", "ge9066a", "ge8t51y", "ge8ff2d", "ge99dmt",
        "ge8qd7s", "ge8h6cs", "ge9hyrm", "ge8isow", "ge8ndxc", "ge8wy22", "ge8dhow",
        "ge8uxge", "ge95f68", "ge8cqa5", "ge8g56f", "ge8l8lb", "ge8d3xk", "ge8gx4l",
        "ge8dewk", "ge8djkf", "ge8jcbw", "ge9225u", "ge8ttxd", "ge8r3ie", "ge8qxnh",
        "ge8xx75", "ge8f6p3", "ge8hrji", "ge8dckb", "ge8pc39", "ge8dc2t", "ge8xpoi",
        "ge8iorh", "ge8d8ht", "ge8drnn", "ge8dqnf", "ge8s8wl", "ge8y4ey", "ge8gvxc",
        "ge8yk7u", "ge8sdvm", "ge8zxsv", "ge8jjoi", "ge8cu21", "ge8iw3m", "ge8lxy8",
        "ge8jf9z", "ge9v0oa", "ge8ucg7", "ge933cq", "ge8debh", "ge8hj6a", "ge8y8a7",
        "ge8cuek", "ge8g3mb", "ge8pbbi", "ge9bnyc", "ge989na", "ge8dq4x", "ge8xday",
        "ge8eiq2", "ge8kak3", "ge8gkoa", "ge8cp9i", "ge8e2ut", "ge8jglc", "ge8hf6j",
        "ge8crvi", "ge8japz", "ge8feyg", "ge8x995", "ge9aay1", "ge8cv0w", "ge8pcbs",
        "ge8tfea", "ge8fa12", "ge8d575", "ge8v2we", "ge8grtd", "ge98qck", "ge8dxxi",
        "ge8nz5v", "ge8w3bh", "ge946ho", "ge8gwg3", "ge8d3d4", "ge9e7k1", "ge9p67o",
        "ge8mph5", "ge8ggww", "ge8dg41", "gea6vh1", "ge9vh7d", "gearyyf", "ge8eek9",
        "ge8enay", "ge8et2j", "ge9k6sa", "ge9ddtn", "ge8niic", "ge8w08q", "ge99296",
        "ge8rsst", "ge96qlc", "ge9809q", "ge8e72m", "ge8dglu", "ge8ft9b", "ge8edqs",
        "ge8cxl7", "ge9c2ap", "ge8tuo5", "ge90c7v", "ge8egd7", "ge8hjs0", "ge8co7i",
        "ge8lqi6", "ge8g4iv", "ge9cla0", "ge959yk", "ge8x2ax", "ge92wg5", "ge8dbyz",
        "ge8ypio", "ge8zlpr", "ge8ctqe", "ge8hgha", "ge8yog2", "ge8gd8r", "ge8nhml",
        "gea846b", "ge8dmcw", "ge8ebyv", "ge9l7o8", "ge8dv07", "ge8jsx5", "ge93jm1",
        "ge8d75b", "ge8d0wc", "ge9hbp6", "ge9lrxu", "gea04hh", "ge8e5m5", "ge8e6do",
        "ge8fij5", "ge8gn6r", "ge8qbcy", "ge8t4j6", "ge8d981", "ge8d95j", "ge8v5vh",
        "ge8fngh", "ge90pv4", "ge9rsbj", "ge8d6qk", "geaq1d5", "ge8m0g1", "ge8q9ju",
        "ge948qx", "ge8rhbi", "ge8w6hf", "ge8zg5h", "ge8cl31", "ge8rlp9", "ge8qa9v",
        "ge8mj02", "ge92fd0", "ge8h9ur", "ge8d3cg", "ge99c2y", "ge98dse", "ge8p549",
        "ge8ndkq", "ge8qs04", "ge8ufj6", "ge928sq", "ge8q2j7", "ge8u58v", "ge90035",
        "ge8ogb7", "ge95sr1", "ge8npxe", "ge8e5vy", "ge8d88g", "ge8n6xl", "ge8dil8",
        "ge8rgu3", "ge8z4ff", "ge9adgc", "ge970wr", "ge8hhxr", "ge9kuii", "ge8psgp",
        "ge8d4fv", "ge8xree", "ge8gwlv", "ge8uwqi", "ge8nkcd", "ge90ffa", "ge9i0tt",
        "ge8e32r", "ge93bhe", "ge9kr1i", "ge8v5uh"]}}], "before": null}}]'
  recorded_at: Sat, 08 Mar 2025 23:06:33 GMT
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:33 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=nb5r90Cy4YsS7u4Nrq; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sat, 08 Mar 2025 23:06:33 GMT
- request:
    method: post
    uri: https://oauth.reddit.com/api/morechildren.json
    body:
      encoding: UTF-8
      string: link_id=t3_k4e4lm&children=gednq6d,gedn6ai,ged959m,gedmx6c,gedl7y0,gecoa0z,geco79q,gedle57,gedjo2d,ged616q,ged4hhm,gec5osj,gebx1yf,gecibnq,geck8u2,gecyms2,gectazu,ged8jld,ged2syd,gecjat6,gecq4io,ged4e5g,geby48b,gebrkuf,gec1oxq,gebidqz,gebt73a,gecbbcr,gec8bw1,gecelbl,gecjm46,gec5h0g,gecca7r,gec6ysm,gecd75d,ged6aaq,gecoya2,gec1vl4,gec4rjz,gec2gg5,gebx4pn,gec65da,gebx9gq,gec3n80,gebk1zj,gebpzhl,gebv38e,gearve7,gebpih7,geakvfh,geafecs,geaeazy,geayab9,gebmrn5,geb8t7f,geavhwk,gebuoyc,geb5xuz,geb0hzp,gebhkq4,gec0e6f,gebdy00,geb2800,gec2cvf,gebka8s,gec7khr,geby132,geaqgdt,gec5y4z,gec66m6,gebn1q2,gecfir8,gecsn65,gebiwyv,gebs83z,gebgpfi,gebclbc,gebkzju,gec24rm,gebmpyg,gebvdck,gebkcl1,geaxx0l,gebpra6,gebi4f8,gebjdgw,gebkezv,geb2kzp,gebmnz0,gea3dle,geaqgwd,geawos1,geat8vy,gebt57q,geakqc4,ge9w3sf,geaj57s,gebn00e,geb7njk,gea9tbw,gea6p3j,gea6m9x,ge9px27,ge8vrzv,geacp52,ge96iwo,gealkby,geb1ywi,geb72uc,geb22xg,geaptro,geator7,geanteq,gebkewe,gea2gdy,geap7rl,geajhnt,geal0ma,geajrnx,geash89,geaco7m,geapk7s,geb5m5w,geb9tkh,geb34hs,geatz0f,geac8gr,ge9lf9j,geblstp,geb7ept,gea55cz,gec124u,geblftt,geaz3ql,gebdwoh,ge9ysx3,gea97s3,gebbsdv,geafk7o,geb8tua,geaeq43,geb9x0t,geasy2d,gec7b6w,gebuvuw,gea1c82,gec7jgm,geadna4,geakexd,geapdes,geb9b3s,ge9qqq4,geaiot5,geaskv9,geb434g,geabg9r,geaxi7b,geboier,gebykhw,ge92lj3,gebhpca,geb1ylq,gea7tzx,geall6i,ge9963b,geajrji,ge98ysx,gebk3nj,geb7p6r,ge93wxk,ge9nnl1,geakrug,gea60ob,gea1x61,geb62j1,geax0kn,gea8ouf,geamgj3,gebjbwq,ge99kma,ge8ugt2,ge95uhg,ge8vf78,ge9r2st,ge988ei,gead5e6,gea91jq,gea5sgr,geamp0x,ge8t5hs,gea5os4,ge95t56,ge8fo5f,ge9fs08,ge9qj85,ge9sgsy,ge9ntyq,ge9p8jh,geagd2g,ge9nvip,ge9p7h9,ge99hmm,ge9m14j,ge93efl,ge9d0ld,ge9f357,ge8lr2b,ge8qk88,ge8iotj,ge9s0ou,ge8xlj2,ge93z7e,ge93rku,gea8mt6,ge92otc,gea2ml2,ge8qeua,ge9x8om,gea69ik,geat0j3,geahpdb,ge8v27u,geak8vy,gea8skb,gea4g6s,ge93z8h,ge8pjw2,ge9dal7,geazt0h,ge998wb,ge92kna,ge8ub8c,ge9wiwj,ge8vu5a,ge9l4ak,ge9qhcj,ge952tt,ge92sk0,ge9fh10,ge90t2q,ge98q2x,ge8rqxk,geaanxo,ge95r6o,gea7lc6,geascdo,geamavo,geas9jr,ge9sd18,geaonwr,geady27,geaqlo1,ge9euu1,ge8wj14,ge9vs5f,ge9h6ew,ge8nctl,gebecfl,ge9wtc6,ge98us1,ge9pptc,ge90snh,ge9u529,ge985ep,gebkep2,geagj02,ge8sub1,ge9d2dm,geaegmq,geaj285,ge8qd3m,ge8hogv,ge9autn,ge9k6ig,ge9r1t7,geaez7c,geb9e3q,ge9yjts,gea9o1a,geae2je,ge8sd2z,gea9n6w,ge9x8du,ge9qgy9,gead2hx,geasoby,gea0ovw,ge9m01l,geaxt4t,ge9lb2t,ge8fzl7,ge8z0r0,ge9oow8,geajnim,gea17ge,gea37gf,ge9xr0x,ge96tiq,ge9k3gq,ge9osbn,ge9lt7o,ge9c3l6,geayy5d,ge9hgu2,ge9fr4e,ge8oces,geaek04,ge8zyte,geafdj9,geb2ead,ge9adsg,ge9dk0d,ge9kgch,geaja8q,ge99xa3,gea6u2s,ge8ymhn,ge9i56x,ge95a1e,ge8xemy,ge8pk2k,gebftfl,ge8d6bv,geaqabf,ge95uga,ge9gln9,ge8py6d,ge94liw,ge96u2q,ge8umgx,ge8yqmy,gea0reu,ge8j4w1,ge8d3oo,ge8rwqc,ge9quzr,gebcdzv,ge9tvkg,geb73sk,ge8de7e,ge8q1ox,ge8w7ap,ge8xkyv,geaj1v1,ge8f3us,ge8zqyt,ge8hblp,ge9ic0a,ge8sr2j,ge9cwwc,geak8fk,ge94tnj,ge8fr91,ge8vnir,ge9c2p4,ge8vp59,ge8cl3c,ge8dgjc,ge9n0k8,ge8xp9f,ge8dte7,ge8gj8r,ge8s7r4,ge8g5rw,ge8d8xr,ge8hasg,ge8sucw,ge8s76t,ge94kss,ge9060g,ge91y87,ge8wxzs,ge8cm9v,ge8gy21,ge8p2li,ge8zfpr,ge8eqo4,ge9idwm,geab8yv,ge8e9e9,ge8lrki,ge8fciw,ge8yvut,ge8em6p,ge8temf,ge8dyk7,ge8eiis,ge8fohw,ge8dnbn,ge8nxeg,ge8gb0m,ge8dljn,ge8hczq,ge9m65s,ge97rgx,ge8gr6w,ge8e2mm,ge8dw1k,ge8vk39,ge9066a,ge8t51y,ge8ff2d,ge99dmt,ge8qd7s,ge8h6cs,ge9hyrm,ge8isow,ge8ndxc,ge8wy22,ge8dhow,ge8uxge,ge95f68,ge8cqa5,ge8g56f,ge8l8lb,ge8d3xk,ge8gx4l,ge8dewk,ge8djkf,ge8jcbw,ge9225u,ge8ttxd,ge8r3ie,ge8qxnh,ge8xx75,ge8f6p3,ge8hrji,ge8dckb,ge8pc39,ge8dc2t,ge8xpoi,ge8iorh,ge8d8ht,ge8drnn,ge8dqnf,ge8s8wl,ge8y4ey,ge8gvxc,ge8yk7u,ge8sdvm,ge8zxsv,ge8jjoi,ge8cu21,ge8iw3m,ge8lxy8,ge8jf9z,ge9v0oa,ge8ucg7,ge933cq,ge8debh,ge8hj6a,ge8y8a7,ge8cuek,ge8g3mb,ge8pbbi,ge9bnyc,ge989na,ge8dq4x,ge8xday,ge8eiq2,ge8kak3,ge8gkoa,ge8cp9i,ge8e2ut,ge8jglc,ge8hf6j,ge8crvi,ge8japz,ge8feyg,ge8x995,ge9aay1,ge8cv0w,ge8pcbs,ge8tfea,ge8fa12,ge8d575,ge8v2we,ge8grtd,ge98qck,ge8dxxi,ge8nz5v,ge8w3bh,ge946ho,ge8gwg3,ge8d3d4,ge9e7k1,ge9p67o,ge8mph5,ge8ggww,ge8dg41,gea6vh1,ge9vh7d,gearyyf,ge8eek9,ge8enay,ge8et2j,ge9k6sa,ge9ddtn,ge8niic,ge8w08q,ge99296,ge8rsst,ge96qlc,ge9809q,ge8e72m,ge8dglu,ge8ft9b,ge8edqs,ge8cxl7,ge9c2ap,ge8tuo5,ge90c7v,ge8egd7,ge8hjs0,ge8co7i,ge8lqi6,ge8g4iv,ge9cla0,ge959yk,ge8x2ax,ge92wg5,ge8dbyz,ge8ypio,ge8zlpr,ge8ctqe,ge8hgha,ge8yog2,ge8gd8r,ge8nhml,gea846b,ge8dmcw,ge8ebyv,ge9l7o8,ge8dv07,ge8jsx5,ge93jm1,ge8d75b,ge8d0wc,ge9hbp6,ge9lrxu,gea04hh,ge8e5m5,ge8e6do,ge8fij5,ge8gn6r,ge8qbcy,ge8t4j6,ge8d981,ge8d95j,ge8v5vh,ge8fngh,ge90pv4,ge9rsbj,ge8d6qk,geaq1d5,ge8m0g1,ge8q9ju,ge948qx,ge8rhbi,ge8w6hf,ge8zg5h,ge8cl31,ge8rlp9,ge8qa9v,ge8mj02,ge92fd0,ge8h9ur,ge8d3cg,ge99c2y,ge98dse,ge8p549,ge8ndkq,ge8qs04,ge8ufj6,ge928sq,ge8q2j7,ge8u58v,ge90035,ge8ogb7,ge95sr1,ge8npxe,ge8e5vy,ge8d88g,ge8n6xl,ge8dil8,ge8rgu3,ge8z4ff,ge9adgc,ge970wr,ge8hhxr,ge9kuii,ge8psgp,ge8d4fv,ge8xree,ge8gwlv,ge8uwqi,ge8nkcd,ge90ffa,ge9i0tt,ge8e32r,ge93bhe,ge9kr1i,ge8v5uh
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '51855'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      set-cookie:
      - loid=000000001ksigbn6ry.2.1741475193754.Z0FBQUFBQm56TTE2N3d3UXlTOVNCNXY4eFIxdDM1bUxXZnlqS25wcVlkNjNvWU1BZU5SMU9nWXhHeEZ4UlZoRTh0b1RGSnBpZlFZeDBxR1dWT0c3Zm9LR1ZwajRDTnF0TnZPRDVjaTB4akljT0MwZVpwS0ptVW95TllIcjZkMUczMGVqLWQ1UUZKWTI;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Mon, 08-Mar-2027 23:06:34
        GMT; secure, session_tracker=hbpmnhbochlkkbadgj.0.1741475193769.Z0FBQUFBQm56TTE2aUtiZW5nNEU3WkJnTEdTaEp5aTQ0aURzTkxNUGVPeG1PN1Y1U25USk5nenNDczJRSFhqa0NGQlY3aEZrTTYxLVdibkdWaWx4R0hFRG9VQTdWNkRLTENiTkRFLTJoZ05rcEgtLVBHMkdGTGhQbFFtQ1dZS1JJRUNHa3RDYVN1NVE;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 01:06:34
        GMT; secure, edgebucket=hseXwDGrhCYwEH1kO0; Domain=reddit.com; Max-Age=63071999;
        Path=/;  secure
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '16'
      x-ratelimit-remaining:
      - '84.0'
      x-ratelimit-reset:
      - '206'
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:34 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"jquery": [[0, 1, "call", ["body"]], [1, 2, "attr", "find"], [2, 3,
        "call", [".status"]], [3, 4, "attr", "hide"], [4, 5, "call", []], [5, 6, "attr",
        "html"], [6, 7, "call", [""]], [7, 8, "attr", "end"], [8, 9, "call", []],
        [0, 10, "attr", "insert_things"], [10, 11, "call", [[{"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 82, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8rwqc",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "lukaswendt",
        "can_mod_post": false, "created_utc": 1606812975.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 82, "author_fullname": "t2_1k3j8p6d", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Day 1 part 1 in intcode:\n\n&gt;109,241,21101,0,0,0,21101,19,0,1,21101,3,0,2,109,3,1105,1,22,209,-1,99,21101,200,0,0,21101,1,0,201,21202,201,-1,201,21201,201,0,202,21201,201,1,201,21201,201,0,202,21201,0,0,203,22207,202,203,202,1206,202,74,203,202,21201,201,0,203,1201,203,1,70,21201,202,0,1,1106,0,34,21101,1,0,202,21202,202,-1,202,21201,202,0,201,21201,201,0,202,21201,201,1,201,21201,201,0,202,21201,0,0,203,22207,202,203,202,1206,202,230,21101,1,0,202,21202,202,-1,202,21201,202,0,203,21201,202,1,202,21201,202,0,203,21201,0,0,204,22207,203,204,203,1206,203,227,21201,201,0,203,1201,203,1,149,21201,1,0,203,21201,202,0,204,1201,204,1,161,21201,1,0,204,22201,203,204,203,21101,2020,0,204,22208,203,204,203,1206,203,224,21201,201,0,203,1201,203,1,188,21201,1,0,203,21201,202,0,204,1201,204,1,200,21201,1,0,204,22202,203,204,203,204,203,21101,0,0,203,21201,203,0,-3,22102,-1,-1,-1,2105,1,-2,1106,0,117,1106,0,86,21201,203,0,-3,22102,-1,-1,-1,2105,1,-2",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Day 1 part 1 in intcode:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;109,241,21101,0,0,0,21101,19,0,1,21101,3,0,2,109,3,1105,1,22,209,-1,99,21101,200,0,0,21101,1,0,201,21202,201,-1,201,21201,201,0,202,21201,201,1,201,21201,201,0,202,21201,0,0,203,22207,202,203,202,1206,202,74,203,202,21201,201,0,203,1201,203,1,70,21201,202,0,1,1106,0,34,21101,1,0,202,21202,202,-1,202,21201,202,0,201,21201,201,0,202,21201,201,1,201,21201,201,0,202,21201,0,0,203,22207,202,203,202,1206,202,230,21101,1,0,202,21202,202,-1,202,21201,202,0,203,21201,202,1,202,21201,202,0,203,21201,0,0,204,22207,203,204,203,1206,203,227,21201,201,0,203,1201,203,1,149,21201,1,0,203,21201,202,0,204,1201,204,1,161,21201,1,0,204,22201,203,204,203,21101,2020,0,204,22208,203,204,203,1206,203,224,21201,201,0,203,1201,203,1,188,21201,1,0,203,21201,202,0,204,1201,204,1,200,21201,1,0,204,22202,203,204,203,204,203,21101,0,0,203,21201,203,0,-3,22102,-1,-1,-1,2105,1,-2,1106,0,117,1106,0,86,21201,203,0,-3,22102,-1,-1,-1,2105,1,-2&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8rwqc/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8rwqc", "created":
        1606812975.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 17, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8sdy7",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606813472.0, "send_replies": true,
        "parent_id": "t1_ge8rwqc", "score": 17, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "welp.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": true, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;welp.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8sdy7/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8sdy7", "created":
        1606813472.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 15, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8s3p5", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "EAJakobsen",
        "can_mod_post": false, "created_utc": 1606813179.0, "send_replies": true,
        "parent_id": "t1_ge8rwqc", "score": 15, "author_fullname": "t2_5mwd5ka8",
        "report_reasons": null, "approved_by": null, "all_awardings": [], "collapsed":
        false, "body": "Good lord.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Good
        lord.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8s3p5/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8s3p5", "created":
        1606813179.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 21, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8u0i1",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "irrelevantPseudonym",
        "can_mod_post": false, "created_utc": 1606815228.0, "send_replies": true,
        "parent_id": "t1_ge8s3p5", "score": 21, "author_fullname": "t2_53f31", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "The good lord wants nothing to do with this atrocity", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;The good lord wants nothing to do with this atrocity&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8u0i1/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8u0i1", "created":
        1606815228.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 11, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8vhbf",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "musifter",
        "can_mod_post": false, "created_utc": 1606816852.0, "send_replies": true,
        "parent_id": "t1_ge8rwqc", "score": 11, "author_fullname": "t2_cwt0kc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Well, I suppose someone had to do it.  Nice to know my intcode machine still
        works.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well,
        I suppose someone had to do it.  Nice to know my intcode machine still works.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8vhbf/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8vhbf", "created":
        1606816852.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 4, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8u938",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "raevnos",
        "can_mod_post": false, "created_utc": 1606815485.0, "send_replies": true,
        "parent_id": "t1_ge8rwqc", "score": 4, "author_fullname": "t2_3995k", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "You win.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You
        win.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8u938/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8u938", "created":
        1606815485.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_geb4952", "id": "geb4952", "parent_id":
        "t1_ge8rwqc", "depth": 1, "children": ["geb4952", "geb31vs"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 40, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8nctl",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "Smylers",
        "can_mod_post": false, "created_utc": 1606808493.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 40, "author_fullname": "t2_13cudg", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Vim** solution \u2014 not Vim''s scripting language, but the editing keystrokes
        needed to turn the input file into the answer:\n\n    :%norm yiwA*2020\u27e8Ctrl+V\u27e9\u27e8Esc\u27e9@0\u27e8Ctrl+X\u27e9\u27e8Enter\u27e9\n    /\\v^(\\d+)\\*\\_.+\\*\\1$\u27e8Enter\u27e9\n    yEcip\u27e8Ctrl+R\u27e9=\u27e8Ctrl+R\u27e90\u27e8Enter\u27e9\u27e8Esc\u27e9\n\nLoad
        your input into Vim, type the above, and your answer for part\u00a01 should
        appear. Try it!\n\nExplanation:\n\nFirst each number has appended to it the
        other number that sums to 2020, separated by a star. So if an input line was
        \u201c1348\u201d, it becomes \u201c1348\\*672\u201d:\n\n* `yiw` yanks the
        number, which vim saves in register `\"0`.\n* `A*2020\u27e8Esc\u27e9` appends
        \u201c\\*2020\u201d.\n* `@0\u27e8Ctrl+X\u27e9` reduces the 2020 by the number
        stored in `\"0`. If 1348 was yanked earlier, then it''s like typing `1348\u27e8Ctrl+X\u27e9`.\n*
        The `:%norm` is our loop: it runs that sequence of keystrokes on each line
        in the file. The `\u27e8Esc\u27e9` is escaped with `\u27e8Ctrl+V\u27e9`, so
        that it becomes a keystroke passed to `:norm` rather than being interpreted
        as an instruction to abort editing the `:` command we''re in the middle of
        typing.\n\nThen of the numbers we''ve just appended, we just need to find
        the one that was already there to start with:\n\n* `/\\v` starts a search
        in \u2018very magic\u2019 syntax, which avoids needing to escape parens and
        things.\n* `^(\\d+)\\*` matches a number at the start of a line, followed
        by a star. The number is captured in group\u00a01.\n* `\\_.+` matches as many
        characters as needed, including line-breaks.\n* `\\*\\1$` matches a star followed
        by the number that was captured, at the end of a line.\n\nThat then leaves
        us on a line with our two numbers that sum to 2020. The final keystrokes above
        replace everything with their product:\n\n* `yE` yanks the numbers: after
        the find command, the cursor will be at the beginning of a line, and because
        there aren''t any spaces in the numbers, `E` will be the end of the second
        one.\n* `cip` deletes everything and puts us in insert mode. `ip` is the inner
        paragraph, but because there aren''t any blank lines in the input, the entire
        file counts as a single paragraph.\n* `\u27e8Ctrl+R\u27e9=` says to insert
        an expression.\n* At the expression prompt, `\u27e8Ctrl+R\u27e90` inserts
        the contents of `\"0`, the pair of numbers we yanked a moment ago.\n* `\u27e8Enter\u27e9`
        evaluates the expression. And because, right at the beginning, we put a star
        between the numbers, it multiples them together, inserting your part\u00a01
        answer into the buffer.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Vim&lt;/strong&gt;
        solution \u2014 not Vim&amp;#39;s scripting language, but the editing keystrokes
        needed to turn the input file into the answer:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;:%norm
        yiwA*2020\u27e8Ctrl+V\u27e9\u27e8Esc\u27e9@0\u27e8Ctrl+X\u27e9\u27e8Enter\u27e9\n/\\v^(\\d+)\\*\\_.+\\*\\1$\u27e8Enter\u27e9\nyEcip\u27e8Ctrl+R\u27e9=\u27e8Ctrl+R\u27e90\u27e8Enter\u27e9\u27e8Esc\u27e9\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Load
        your input into Vim, type the above, and your answer for part\u00a01 should
        appear. Try it!&lt;/p&gt;\n\n&lt;p&gt;Explanation:&lt;/p&gt;\n\n&lt;p&gt;First
        each number has appended to it the other number that sums to 2020, separated
        by a star. So if an input line was \u201c1348\u201d, it becomes \u201c1348*672\u201d:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;yiw&lt;/code&gt;
        yanks the number, which vim saves in register &lt;code&gt;&amp;quot;0&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;A*2020\u27e8Esc\u27e9&lt;/code&gt;
        appends \u201c*2020\u201d.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;@0\u27e8Ctrl+X\u27e9&lt;/code&gt;
        reduces the 2020 by the number stored in &lt;code&gt;&amp;quot;0&lt;/code&gt;.
        If 1348 was yanked earlier, then it&amp;#39;s like typing &lt;code&gt;1348\u27e8Ctrl+X\u27e9&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;The
        &lt;code&gt;:%norm&lt;/code&gt; is our loop: it runs that sequence of keystrokes
        on each line in the file. The &lt;code&gt;\u27e8Esc\u27e9&lt;/code&gt; is
        escaped with &lt;code&gt;\u27e8Ctrl+V\u27e9&lt;/code&gt;, so that it becomes
        a keystroke passed to &lt;code&gt;:norm&lt;/code&gt; rather than being interpreted
        as an instruction to abort editing the &lt;code&gt;:&lt;/code&gt; command
        we&amp;#39;re in the middle of typing.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Then
        of the numbers we&amp;#39;ve just appended, we just need to find the one that
        was already there to start with:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;/\\v&lt;/code&gt;
        starts a search in \u2018very magic\u2019 syntax, which avoids needing to
        escape parens and things.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;^(\\d+)\\*&lt;/code&gt;
        matches a number at the start of a line, followed by a star. The number is
        captured in group\u00a01.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;\\_.+&lt;/code&gt;
        matches as many characters as needed, including line-breaks.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;\\*\\1$&lt;/code&gt;
        matches a star followed by the number that was captured, at the end of a line.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;That
        then leaves us on a line with our two numbers that sum to 2020. The final
        keystrokes above replace everything with their product:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;yE&lt;/code&gt;
        yanks the numbers: after the find command, the cursor will be at the beginning
        of a line, and because there aren&amp;#39;t any spaces in the numbers, &lt;code&gt;E&lt;/code&gt;
        will be the end of the second one.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;cip&lt;/code&gt;
        deletes everything and puts us in insert mode. &lt;code&gt;ip&lt;/code&gt;
        is the inner paragraph, but because there aren&amp;#39;t any blank lines in
        the input, the entire file counts as a single paragraph.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;\u27e8Ctrl+R\u27e9=&lt;/code&gt;
        says to insert an expression.&lt;/li&gt;\n&lt;li&gt;At the expression prompt,
        &lt;code&gt;\u27e8Ctrl+R\u27e90&lt;/code&gt; inserts the contents of &lt;code&gt;&amp;quot;0&lt;/code&gt;,
        the pair of numbers we yanked a moment ago.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;\u27e8Enter\u27e9&lt;/code&gt;
        evaluates the expression. And because, right at the beginning, we put a star
        between the numbers, it multiples them together, inserting your part\u00a01
        answer into the buffer.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8nctl/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8nctl", "created": 1606808493.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 3, "name":
        "t1_ge8wmj0", "id": "ge8wmj0", "parent_id": "t1_ge8nctl", "depth": 1, "children":
        ["ge8wmj0", "gkead79"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": 1606816731.0, "mod_reason_by": null, "banned_by": null, "ups": 32,
        "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8uwqi",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "Rick-T",
        "can_mod_post": false, "created_utc": 1606816219.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 32, "author_fullname": "t2_j78hn", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# [ROCKSTAR](https://github.com/Rick-T/Advent-of-Rock-2020-Remaster)\n\nSince
        the puzzle is not too hard, I wanted to try out the [Rockstar](https://codewithrockstar.com/).
        Apparently the solution to Day 1 is a RaTM song.\n\nHere''s part 1. For part
        2 check out the GitHub repository.\n\n    The goal is to extinguish my desparation\n    Knock
        the goal down\n    \n    The enemy are accountants\n    Knock the enemy down\n    \n    The
        system is the enemy\n    The machine is the enemy\n    \n    Listen to the
        money\n    Until the money is gone\n    Cast the money into the fire\n    Let
        the rage at the enemy be the fire\n    Build the enemy up\n    Listen to the
        money\n    \n    While the enemy is higher than the system\n    Let chaos
        be the rage at the system\n    Let destruction be the rage at the machine\n    If
        the goal is chaos with destruction\n    Break it down\n    \n    Build the
        machine up\n    If the enemy is higher than the machine\n    Take it to the
        top\n    \n    Build the system up\n    The machine is the system\n    \n    Shout
        chaos of destruction\n\n(Please don''t expect me to do future puzzle with
        rockstar. I might give them a shot but I certainly won''t do the more complex
        ones).", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a
        href=\"https://github.com/Rick-T/Advent-of-Rock-2020-Remaster\"&gt;ROCKSTAR&lt;/a&gt;&lt;/h1&gt;\n\n&lt;p&gt;Since
        the puzzle is not too hard, I wanted to try out the &lt;a href=\"https://codewithrockstar.com/\"&gt;Rockstar&lt;/a&gt;.
        Apparently the solution to Day 1 is a RaTM song.&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s
        part 1. For part 2 check out the GitHub repository.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;The
        goal is to extinguish my desparation\nKnock the goal down\n\nThe enemy are
        accountants\nKnock the enemy down\n\nThe system is the enemy\nThe machine
        is the enemy\n\nListen to the money\nUntil the money is gone\nCast the money
        into the fire\nLet the rage at the enemy be the fire\nBuild the enemy up\nListen
        to the money\n\nWhile the enemy is higher than the system\nLet chaos be the
        rage at the system\nLet destruction be the rage at the machine\nIf the goal
        is chaos with destruction\nBreak it down\n\nBuild the machine up\nIf the enemy
        is higher than the machine\nTake it to the top\n\nBuild the system up\nThe
        machine is the system\n\nShout chaos of destruction\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(Please
        don&amp;#39;t expect me to do future puzzle with rockstar. I might give them
        a shot but I certainly won&amp;#39;t do the more complex ones).&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8uwqi/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8uwqi", "created":
        1606816219.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 5, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge90hfk",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "irrelevantPseudonym",
        "can_mod_post": false, "created_utc": 1606822256.0, "send_replies": true,
        "parent_id": "t1_ge8uwqi", "score": 5, "author_fullname": "t2_53f31", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "This is the angry equivalent to the Shakespeare language someone used last
        year.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This
        is the angry equivalent to the Shakespeare language someone used last year.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge90hfk/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge90hfk", "created":
        1606822256.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_gea39ko", "id": "gea39ko", "parent_id":
        "t1_ge90hfk", "depth": 2, "children": ["gea39ko"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 5, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge99wz3",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "Anjir",
        "can_mod_post": false, "created_utc": 1606830115.0, "send_replies": true,
        "parent_id": "t1_ge8uwqi", "score": 5, "author_fullname": "t2_hvjlz", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Damn, this is a more eloquent song than my rockstar solution! Really fun
        writing it, eh?", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Damn,
        this is a more eloquent song than my rockstar solution! Really fun writing
        it, eh?&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge99wz3/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge99wz3", "created":
        1606830115.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge9akll", "id": "ge9akll", "parent_id":
        "t1_ge99wz3", "depth": 2, "children": ["ge9akll"]}}, {"kind": "more", "data":
        {"count": 2, "name": "t1_ge8vi1g", "id": "ge8vi1g", "parent_id": "t1_ge8uwqi",
        "depth": 1, "children": ["ge8vi1g"]}}, {"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "edited": 1606876837.0, "mod_reason_by": null, "banned_by": null, "ups":
        22, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geash89",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "Arknave",
        "can_mod_post": false, "created_utc": 1606857042.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 22, "author_fullname": "t2_6k63x", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "First try using C for advent of Code. I''ve been pretty inspired by all this
        ASCII art, so I thought it would be cool making my code into a calendar tile.\n\n    #include   &lt;stdio.h&gt;\n    #include  &lt;stdlib.h&gt;\n    \n    //
        AOC DAY NUMBER //\n    const int M=2020,D=9\n    ;char b[D],h[M];main\n    (int
        c,char **v){int\n    x,i,j,a=0;  ;;;;FILE\n    *f=fopen    (\"day01\"\n    ,\"r\");      ;;while(\n    fgets(b,D   ,f)){;x=\n    atoi(b);;   if(x&lt;M){\n    h[x]=1;}}   for(i=0;\n    i&lt;M;++i){   for(j=i;\n    j&lt;M;++j){   if
        (h[i]\n    &amp;&amp;h[j] &amp;&amp;   i+j&lt;=M){\n    if(c==1){   if(i+j==\n    M)a=i*j;}   else
        if(\n    h[M-             i-j\n    ])a=             i*j\n    *(M-i-j);}}}fclose(f\n    );printf(\"%d\\n\",a);}\n\nRequires
        the input file to be in the same directory as the executable as \"day01\".
        Run as-is for part 1, pass any argument for part 2. Feedback appreciated!\n\n&amp;#x200B;\n\nEDIT:
        Reworked this to read from standard in, and I think the shape looks a bit
        nicer.\n\n    #include   &lt;stdio.h&gt;\n    #include  &lt;stdlib.h&gt;\n    \n    //
        AOC DAY NUMBER //\n    /**/const int M=2020\n    ;char h[M];int main(\n    int
        c,char  **v){int\n    x,i,j,a=    0;while(\n    scanf       (\" %d\",&amp;\n    x)&gt;0)if(    x&lt;M){h[x\n    ]=1;}for    (i=0;i&lt;M\n    ;
        ++i) {    for(j=i;\n    j&lt;M;++j)    {if(h[i]\n    &amp;&amp;h[j]&amp;&amp;    i+j&lt;=M){\n    if(c==1)    {if
        (i+j\n    ==M)a=i     *j;}else\n    if(h            [M-i\n    -j])a=i*j*(M-i-j);}}\n    }printf(\"%d\\n\",a);;}",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;First try using C for
        advent of Code. I&amp;#39;ve been pretty inspired by all this ASCII art, so
        I thought it would be cool making my code into a calendar tile.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include   &amp;lt;stdio.h&amp;gt;\n#include  &amp;lt;stdlib.h&amp;gt;\n\n//
        AOC DAY NUMBER //\nconst int M=2020,D=9\n;char b[D],h[M];main\n(int c,char
        **v){int\nx,i,j,a=0;  ;;;;FILE\n*f=fopen    (&amp;quot;day01&amp;quot;\n,&amp;quot;r&amp;quot;);      ;;while(\nfgets(b,D   ,f)){;x=\natoi(b);;   if(x&amp;lt;M){\nh[x]=1;}}   for(i=0;\ni&amp;lt;M;++i){   for(j=i;\nj&amp;lt;M;++j){   if
        (h[i]\n&amp;amp;&amp;amp;h[j] &amp;amp;&amp;amp;   i+j&amp;lt;=M){\nif(c==1){   if(i+j==\nM)a=i*j;}   else
        if(\nh[M-             i-j\n])a=             i*j\n*(M-i-j);}}}fclose(f\n);printf(&amp;quot;%d\\n&amp;quot;,a);}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Requires
        the input file to be in the same directory as the executable as &amp;quot;day01&amp;quot;.
        Run as-is for part 1, pass any argument for part 2. Feedback appreciated!&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;EDIT:
        Reworked this to read from standard in, and I think the shape looks a bit
        nicer.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include   &amp;lt;stdio.h&amp;gt;\n#include  &amp;lt;stdlib.h&amp;gt;\n\n//
        AOC DAY NUMBER //\n/**/const int M=2020\n;char h[M];int main(\nint c,char  **v){int\nx,i,j,a=    0;while(\nscanf       (&amp;quot;
        %d&amp;quot;,&amp;amp;\nx)&amp;gt;0)if(    x&amp;lt;M){h[x\n]=1;}for    (i=0;i&amp;lt;M\n;
        ++i) {    for(j=i;\nj&amp;lt;M;++j)    {if(h[i]\n&amp;amp;&amp;amp;h[j]&amp;amp;&amp;amp;    i+j&amp;lt;=M){\nif(c==1)    {if
        (i+j\n==M)a=i     *j;}else\nif(h            [M-i\n-j])a=i*j*(M-i-j);}}\n}printf(&amp;quot;%d\\n&amp;quot;,a);;}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geash89/",
        "subreddit_type": "public", "locked": false, "name": "t1_geash89", "created":
        1606857042.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 6, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geatetq",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606857498.0, "send_replies": true,
        "parent_id": "t1_geash89", "score": 6, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "&gt; I''ve been pretty inspired by all this ASCII art, so I thought it would
        be cool making my code into a calendar tile.\n\nNow that''s what I call gettin''
        crafty with it!", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": true, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I&amp;#39;ve
        been pretty inspired by all this ASCII art, so I thought it would be cool
        making my code into a calendar tile.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Now
        that&amp;#39;s what I call gettin&amp;#39; crafty with it!&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geatetq/",
        "subreddit_type": "public", "locked": false, "name": "t1_geatetq", "created":
        1606857498.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "more", "data": {"count": 1, "name": "t1_geay466", "id": "geay466",
        "parent_id": "t1_geash89", "depth": 1, "children": ["geay466"]}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606800130.0, "mod_reason_by": null,
        "banned_by": null, "ups": 19, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8co7i", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "jonathan_paulson",
        "can_mod_post": false, "created_utc": 1606799616.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 19, "author_fullname": "t2_k7ou5", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python. 282/37. I think this day shouldn''t count towards the overall leaderboard
        because the site went down. Video of me solving at [https://youtu.be/86a\\_DSKf8vw](https://youtu.be/86a_DSKf8vw)\n\n    import
        sys\n    import fileinput\n    \n    X = [int(line) for line in fileinput.input()]\n    n
        = len(X)\n    for i in range(n):\n        for j in range(i+1, n):\n            if
        X[i]+X[j]==2020:\n                print(''Part 1:'', X[i]*X[j])\n            for
        k in range(j+1, n):\n                if X[i]+X[j]+X[k]==2020:\n                    print(''Part
        2:'', X[i]*X[j]*X[k])", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python.
        282/37. I think this day shouldn&amp;#39;t count towards the overall leaderboard
        because the site went down. Video of me solving at &lt;a href=\"https://youtu.be/86a_DSKf8vw\"&gt;https://youtu.be/86a_DSKf8vw&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        sys\nimport fileinput\n\nX = [int(line) for line in fileinput.input()]\nn
        = len(X)\nfor i in range(n):\n    for j in range(i+1, n):\n        if X[i]+X[j]==2020:\n            print(&amp;#39;Part
        1:&amp;#39;, X[i]*X[j])\n        for k in range(j+1, n):\n            if X[i]+X[j]+X[k]==2020:\n                print(&amp;#39;Part
        2:&amp;#39;, X[i]*X[j]*X[k])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8co7i/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8co7i", "created": 1606799616.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 5, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "ge8fn2l", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "Deathranger999", "can_mod_post": false,
        "created_utc": 1606801888.0, "send_replies": true, "parent_id": "t1_ge8co7i",
        "score": 5, "author_fullname": "t2_g8rb4", "report_reasons": null, "approved_by":
        null, "all_awardings": [], "collapsed": false, "body": "Your video gave me
        the idea to create a bash command to get my input, so thank you for that!
        And congrats on the nice placement for part 2. \n\nJust wondering, does Advent
        of Code use the same user-specific authentication headers for each day, or
        do they change in some predictable way? I''d like to be sure that my command
        works on later days, and you clearly know what you''re doing. :)", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Your video gave me the idea to create a
        bash command to get my input, so thank you for that! And congrats on the nice
        placement for part 2. &lt;/p&gt;\n\n&lt;p&gt;Just wondering, does Advent of
        Code use the same user-specific authentication headers for each day, or do
        they change in some predictable way? I&amp;#39;d like to be sure that my command
        works on later days, and you clearly know what you&amp;#39;re doing. :)&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8fn2l/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8fn2l", "created":
        1606801888.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 4, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8frkl",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "jonathan_paulson",
        "can_mod_post": false, "created_utc": 1606801988.0, "send_replies": true,
        "parent_id": "t1_ge8fn2l", "score": 4, "author_fullname": "t2_k7ou5", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I believe it\u2019s the same token for the whole month.", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;I believe it\u2019s the same token for the
        whole month.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8frkl/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8frkl", "created":
        1606801988.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge8h1a9", "id": "ge8h1a9", "parent_id":
        "t1_ge8frkl", "depth": 3, "children": ["ge8h1a9"]}}, {"kind": "more", "data":
        {"count": 6, "name": "t1_geba7nl", "id": "geba7nl", "parent_id": "t1_ge8fn2l",
        "depth": 2, "children": ["geba7nl"]}}, {"kind": "more", "data": {"count":
        9, "name": "t1_ge8dhnm", "id": "ge8dhnm", "parent_id": "t1_ge8co7i", "depth":
        1, "children": ["ge8dhnm", "ge8fuev", "geb7nbi", "ge9ux0m", "ge8d7ik", "ge8d8fs"]}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 17, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8d95j", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "Aehmlo",
        "can_mod_post": false, "created_utc": 1606800041.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 17, "author_fullname": "t2_8tlr8", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "[Rust](https://gist.github.com/Aehmlo/466451ff4c56eb05dbcd929f8072aa48)\n\n`itertools`
        continues to be an invaluable crate for AoC.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://gist.github.com/Aehmlo/466451ff4c56eb05dbcd929f8072aa48\"&gt;Rust&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;itertools&lt;/code&gt;
        continues to be an invaluable crate for AoC.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8d95j/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8d95j", "created": 1606800041.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 12, "name":
        "t1_ge8u7ue", "id": "ge8u7ue", "parent_id": "t1_ge8d95j", "depth": 1, "children":
        ["ge8u7ue", "gf1exqu", "ge984zt"]}}, {"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "edited": 1606852144.0, "mod_reason_by": null, "banned_by": null, "ups":
        15, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9r2st",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "oymamyo",
        "can_mod_post": false, "created_utc": 1606839471.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 15, "author_fullname": "t2_3g1me2gi", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "For the lulz (C++)\n\n    std::string Day_01::part_two()\n    {\n        while
        (true) {\n            int entry1 = input[rand() % input.size()];\n            int
        entry2 = input[rand() % input.size()];\n            int entry3 = input[rand()
        % input.size()];\n            if (entry1 + entry2 + entry3 == 2020) {\n                return
        std::to_string(entry1 * entry2 * entry3);\n            }\n        }\n        return
        \"No result\";\n    }", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;For
        the lulz (C++)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;std::string Day_01::part_two()\n{\n    while
        (true) {\n        int entry1 = input[rand() % input.size()];\n        int
        entry2 = input[rand() % input.size()];\n        int entry3 = input[rand()
        % input.size()];\n        if (entry1 + entry2 + entry3 == 2020) {\n            return
        std::to_string(entry1 * entry2 * entry3);\n        }\n    }\n    return &amp;quot;No
        result&amp;quot;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9r2st/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge9r2st", "created": 1606839471.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 4, "name":
        "t1_geaeyz4", "id": "geaeyz4", "parent_id": "t1_ge9r2st", "depth": 1, "children":
        ["geaeyz4", "gea1z9d", "gea35wk"]}}, {"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "edited": 1606848082.0, "mod_reason_by": null, "banned_by": null, "ups":
        14, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gea8skb",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "-l-a-m-b-d-a-",
        "can_mod_post": false, "created_utc": 1606847901.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 14, "author_fullname": "t2_91znx3ho", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# Bash\n\nI sure hope you guys like ridiculous bash pipelines\n\n    eval
        \"echo {`cat input \n        | sed \"s/.*/&amp;+/g\" \n        | tr ''\\n''
        '',''`}\n        {`cat input \n        | tr ''\\n'' '',''`}\" \n    | tr ''
        '' ''\\n'' \n    | grep ''[0-9]+[0-9]'' \n    | tee additions \n    | bc |
        nl | tr ''\\t'' '' '' \n    | grep \"2020$\" \n    | cut -d'' '' -f2 \n    |
        head -n 1 \n    | xargs head additions -n \n    | tail -1 | sed ''s/+/*/g''
        | bc", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Bash&lt;/h1&gt;\n\n&lt;p&gt;I
        sure hope you guys like ridiculous bash pipelines&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;eval
        &amp;quot;echo {`cat input \n    | sed &amp;quot;s/.*/&amp;amp;+/g&amp;quot;
        \n    | tr &amp;#39;\\n&amp;#39; &amp;#39;,&amp;#39;`}\n    {`cat input \n    |
        tr &amp;#39;\\n&amp;#39; &amp;#39;,&amp;#39;`}&amp;quot; \n| tr &amp;#39;
        &amp;#39; &amp;#39;\\n&amp;#39; \n| grep &amp;#39;[0-9]+[0-9]&amp;#39; \n|
        tee additions \n| bc | nl | tr &amp;#39;\\t&amp;#39; &amp;#39; &amp;#39; \n|
        grep &amp;quot;2020$&amp;quot; \n| cut -d&amp;#39; &amp;#39; -f2 \n| head
        -n 1 \n| xargs head additions -n \n| tail -1 | sed &amp;#39;s/+/*/g&amp;#39;
        | bc\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea8skb/",
        "subreddit_type": "public", "locked": false, "name": "t1_gea8skb", "created":
        1606847901.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_hi4j5oh", "id": "hi4j5oh", "parent_id":
        "t1_gea8skb", "depth": 1, "children": ["hi4j5oh"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 14, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8dg41",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "Sharparam",
        "can_mod_post": false, "created_utc": 1606800183.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 14, "author_fullname": "t2_ayk53", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "## [Ruby (428/369)](https://github.com/Sharparam/advent-of-code/blob/master/2020/day1/solution.rb)\n\n    input
        = ARGF.readlines.map(&amp;:to_i)\n\n    puts input.combination(2).find { |p|
        p.sum == 2020 }.reduce(&amp;:*)\n    puts input.combination(3).find { |t|
        t.sum == 2020 }.reduce(&amp;:*)", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;h2&gt;&lt;a href=\"https://github.com/Sharparam/advent-of-code/blob/master/2020/day1/solution.rb\"&gt;Ruby
        (428/369)&lt;/a&gt;&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;input = ARGF.readlines.map(&amp;amp;:to_i)\n\nputs
        input.combination(2).find { |p| p.sum == 2020 }.reduce(&amp;amp;:*)\nputs
        input.combination(3).find { |t| t.sum == 2020 }.reduce(&amp;amp;:*)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8dg41/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8dg41", "created":
        1606800183.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_ge8nz8m", "id": "ge8nz8m", "parent_id":
        "t1_ge8dg41", "depth": 1, "children": ["ge8nz8m"]}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8s76t", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        10, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[Rust](https://gitlab.com/KonradBorowski/advent-of-code-2020/-/blob/master/src/day1/mod.rs)\n\nIn
        this problem, I had to find two numbers that add up to 2020. While I could
        have put two loops, it''s possible to reorder the terms in `a + b = 2020`
        to `2020 - a = b`. This allows retrieving `b` by merely knowing what `a` is,
        and this number could be checked for existence in a list in constant time
        with hash sets.\n\nI also used this fact in second part of a puzzle which
        allowed to reduce the complexity from O(N^3\u200b) to O(N^2\u200b).", "awarders":
        [], "downs": 0, "author_flair_css_class": null, "name": "t1_ge8s76t", "collapsed":
        false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a
        href=\"https://gitlab.com/KonradBorowski/advent-of-code-2020/-/blob/master/src/day1/mod.rs\"&gt;Rust&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;In
        this problem, I had to find two numbers that add up to 2020. While I could
        have put two loops, it&amp;#39;s possible to reorder the terms in &lt;code&gt;a
        + b = 2020&lt;/code&gt; to &lt;code&gt;2020 - a = b&lt;/code&gt;. This allows
        retrieving &lt;code&gt;b&lt;/code&gt; by merely knowing what &lt;code&gt;a&lt;/code&gt;
        is, and this number could be checked for existence in a list in constant time
        with hash sets.&lt;/p&gt;\n\n&lt;p&gt;I also used this fact in second part
        of a puzzle which allowed to reduce the complexity from O(N&lt;sup&gt;3\u200b)&lt;/sup&gt;
        to O(N&lt;sup&gt;2\u200b).&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8s76t/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606813276.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606813276.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 10}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606803278.0, "mod_reason_by": null,
        "banned_by": null, "ups": 9, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8cu21", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "pred",
        "can_mod_post": false, "created_utc": 1606799733.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 9, "author_fullname": "t2_3zds9", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Heh, site went down. Looks like some people managed to make it through the
        502s and 503s and 504s, but then 70 people submitted their answers within
        5 seconds. I kind of hope the score will count (or at least just for part
        2 -- looks like that one had a level playing field), though -- unlike that
        one case where some people had buggy inputs, at least for this one everybody
        was playing the same RNG -- but also because even with the server issues,
        this must have been the fastest I''ve ever personally solved an AoC challenge,
        so I''d be a bit sad if that didn''t at least count for something. :/ :)\n\nAnyway,
        easy start; part 1, Python:\n\n\n    for n in itertools.product(ns, ns):\n        if
        sum(n) == 2020:\n            print(np.product(n))\n\nPart 2:\n\n    for n
        in itertools.product(ns, ns, ns):\n        if sum(n) == 2020:\n            print(np.product(n))",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Heh, site went down.
        Looks like some people managed to make it through the 502s and 503s and 504s,
        but then 70 people submitted their answers within 5 seconds. I kind of hope
        the score will count (or at least just for part 2 -- looks like that one had
        a level playing field), though -- unlike that one case where some people had
        buggy inputs, at least for this one everybody was playing the same RNG --
        but also because even with the server issues, this must have been the fastest
        I&amp;#39;ve ever personally solved an AoC challenge, so I&amp;#39;d be a
        bit sad if that didn&amp;#39;t at least count for something. :/ :)&lt;/p&gt;\n\n&lt;p&gt;Anyway,
        easy start; part 1, Python:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for n in itertools.product(ns,
        ns):\n    if sum(n) == 2020:\n        print(np.product(n))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for n in itertools.product(ns, ns,
        ns):\n    if sum(n) == 2020:\n        print(np.product(n))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8cu21/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8cu21", "created":
        1606799733.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 15, "name": "t1_ge8dd8g", "id": "ge8dd8g", "parent_id":
        "t1_ge8cu21", "depth": 1, "children": ["ge8dd8g", "ge8cupy", "ge8gcq6", "geb16hh"]}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": 1606881749.0,
        "mod_reason_by": null, "banned_by": null, "ups": 8, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8fr91", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "hutsboR",
        "can_mod_post": false, "created_utc": 1606801981.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 8, "author_fullname": "t2_dgxr0", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Too lazy to open a text editor. Open up the input page, open your browser
        dev tools, drop this in the console.\n\n    document.body.innerText\n        .split(''\\n'')\n        .map((n)
        =&gt; parseInt(n))\n        .reduce((c, n, i, a) =&gt; {\n            if((!!c)
        &amp;&amp; (c.constructor === Object)) return c;\n            for(let x =
        i; x &lt; a.length; x++) {\n                for(let y = i; y &lt; a.length;
        y++) {\n                    if(c &amp;&amp; a[x] + a[y] + c === 2020) {\n                        return
        {solution: a[x] * a[y] * c};\n                    }\n                }\n            }\n            return
        a[i + 1];\n        });", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Too
        lazy to open a text editor. Open up the input page, open your browser dev
        tools, drop this in the console.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;document.body.innerText\n    .split(&amp;#39;\\n&amp;#39;)\n    .map((n)
        =&amp;gt; parseInt(n))\n    .reduce((c, n, i, a) =&amp;gt; {\n        if((!!c)
        &amp;amp;&amp;amp; (c.constructor === Object)) return c;\n        for(let
        x = i; x &amp;lt; a.length; x++) {\n            for(let y = i; y &amp;lt;
        a.length; y++) {\n                if(c &amp;amp;&amp;amp; a[x] + a[y] + c
        === 2020) {\n                    return {solution: a[x] * a[y] * c};\n                }\n            }\n        }\n        return
        a[i + 1];\n    });\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8fr91/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8fr91", "created": 1606801981.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 5, "name":
        "t1_ge8tj0f", "id": "ge8tj0f", "parent_id": "t1_ge8fr91", "depth": 1, "children":
        ["ge8tj0f", "ge9n80e", "ge8poew", "gebvx1n"]}}, {"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "edited": 1606803567.0, "mod_reason_by": null, "banned_by": null, "ups":
        8, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8gwlv",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "artemisdev21",
        "can_mod_post": false, "created_utc": 1606802909.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 8, "author_fullname": "t2_51ccjzoq", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "SQL :)\n\n    CREATE TABLE entries (value INTEGER);\n    INSERT INTO entries
        VALUES (?); -- execute once for each input\n    SELECT a.value * b.value\n        FROM
        (entries as a, entries as b)\n        WHERE a.value + b.value = 2020 LIMIT
        1; -- part 1\n    SELECT a.value * b.value * c.value\n        FROM (entries
        as a, entries as b, entries as c)\n        WHERE a.value + b.value + c.value
        = 2020 LIMIT 1; -- part 2\n\n[Full code](https://paste.artemisdev.xyz/tepun.py)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;SQL :)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;CREATE
        TABLE entries (value INTEGER);\nINSERT INTO entries VALUES (?); -- execute
        once for each input\nSELECT a.value * b.value\n    FROM (entries as a, entries
        as b)\n    WHERE a.value + b.value = 2020 LIMIT 1; -- part 1\nSELECT a.value
        * b.value * c.value\n    FROM (entries as a, entries as b, entries as c)\n    WHERE
        a.value + b.value + c.value = 2020 LIMIT 1; -- part 2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://paste.artemisdev.xyz/tepun.py\"&gt;Full code&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8gwlv/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8gwlv", "created":
        1606802909.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 5, "name": "t1_ge8gx8p", "id": "ge8gx8p", "parent_id":
        "t1_ge8gwlv", "depth": 1, "children": ["ge8gx8p"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606901132.0, "mod_reason_by": null,
        "banned_by": null, "ups": 9, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8qeua", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "jayfoad",
        "can_mod_post": false, "created_utc": 1606811422.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 9, "author_fullname": "t2_2vxcy8d", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "[**Dyalog APL**](https://github.com/jayfoad/aoc2020apl/blob/main/p1.dyalog)
        1127/475\n\n    p\u2190\u234e\u00a8\u2283\u2395NGET''p1.txt''1\n    f\u2190{\u222a(,2020=\u2283\u2218.+/\u2375)/,\u2283\u2218.\u00d7/\u2375}\n    f
        2/\u2282p \u235d part 1\n    f 3/\u2282p \u235d part 2", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/jayfoad/aoc2020apl/blob/main/p1.dyalog\"&gt;&lt;strong&gt;Dyalog
        APL&lt;/strong&gt;&lt;/a&gt; 1127/475&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;p\u2190\u234e\u00a8\u2283\u2395NGET&amp;#39;p1.txt&amp;#39;1\nf\u2190{\u222a(,2020=\u2283\u2218.+/\u2375)/,\u2283\u2218.\u00d7/\u2375}\nf
        2/\u2282p \u235d part 1\nf 3/\u2282p \u235d part 2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8qeua/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8qeua", "created":
        1606811422.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_ge8wax6", "id": "ge8wax6", "parent_id":
        "t1_ge8qeua", "depth": 1, "children": ["ge8wax6"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 9, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geb0hzp",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "AharonSambol",
        "can_mod_post": false, "created_utc": 1606860859.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 9, "author_fullname": "t2_323tfwqe", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "bad solution but its in LOLCODE  ;p\n\n[https://github.com/AharonSambol/AdventOfCode/blob/master/2020/day1.lol](https://github.com/AharonSambol/AdventOfCode/blob/master/2020/day1.lol)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;bad solution but its
        in LOLCODE  ;p&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/AharonSambol/AdventOfCode/blob/master/2020/day1.lol\"&gt;https://github.com/AharonSambol/AdventOfCode/blob/master/2020/day1.lol&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb0hzp/",
        "subreddit_type": "public", "locked": false, "name": "t1_geb0hzp", "created":
        1606860859.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_geb3gyu", "id": "geb3gyu", "parent_id":
        "t1_geb0hzp", "depth": 1, "children": ["geb3gyu"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 8, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geas9jr",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "aarroyoc",
        "can_mod_post": false, "created_utc": 1606856940.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 8, "author_fullname": "t2_ye9mf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Advent of Prolog here. It''s not super fast but it''s very clean and Prologish.\n\n```\n:-
        use_module(library(pure_input)).\n:- use_module(library(dcg/basics)).\n\ninput([X|Data])
        --&gt;\n    integer(X),\n    \"\\n\",\n    input(Data).\n\ninput([]) --&gt;
        eos.\n\nload_data(Data) :-\n    open(''input.dat'', read, Stream),\n    phrase_from_stream(input(Data),
        Stream).\n\nstar(1, X) :-\n    load_data(Numbers),\n    member(A, Numbers),\n    member(B,
        Numbers),\n    A + B =:= 2020,\n    X is A * B.\n\nstar(2, X) :-\n    load_data(Numbers),\n    member(A,
        Numbers),\n    member(B, Numbers),\n    member(C, Numbers),\n    A + B + C
        =:= 2020,\n    X is A * B * C.\n```", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Advent of Prolog here. It&amp;#39;s not super fast
        but it&amp;#39;s very clean and Prologish.&lt;/p&gt;\n\n&lt;p&gt;```\n:- use_module(library(pure_input)).\n:-
        use_module(library(dcg/basics)).&lt;/p&gt;\n\n&lt;p&gt;input([X|Data]) --&amp;gt;\n    integer(X),\n    &amp;quot;\\n&amp;quot;,\n    input(Data).&lt;/p&gt;\n\n&lt;p&gt;input([])
        --&amp;gt; eos.&lt;/p&gt;\n\n&lt;p&gt;load_data(Data) :-\n    open(&amp;#39;input.dat&amp;#39;,
        read, Stream),\n    phrase_from_stream(input(Data), Stream).&lt;/p&gt;\n\n&lt;p&gt;star(1,
        X) :-\n    load_data(Numbers),\n    member(A, Numbers),\n    member(B, Numbers),\n    A
        + B =:= 2020,\n    X is A * B.&lt;/p&gt;\n\n&lt;p&gt;star(2, X) :-\n    load_data(Numbers),\n    member(A,
        Numbers),\n    member(B, Numbers),\n    member(C, Numbers),\n    A + B + C
        =:= 2020,\n    X is A * B * C.\n```&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geas9jr/", "subreddit_type":
        "public", "locked": false, "name": "t1_geas9jr", "created": 1606856940.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 1, "name":
        "t1_geasaob", "id": "geasaob", "parent_id": "t1_geas9jr", "depth": 1, "children":
        ["geasaob"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": 1606854473.0,
        "mod_reason_by": null, "banned_by": null, "ups": 7, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8cqa5", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "jitwit",
        "can_mod_post": false, "created_utc": 1606799657.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 7, "author_fullname": "t2_3widzzz1", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**J Programming Language:**\n\n    in =: \". ;._2 aoc 2020 1 NB. aoc is a
        verb to download/cache input\n    */ {. in {~ 4 $. $. 2020 = +/~ in\n    */
        {. in {~ 4 $. $. 2020 = in +/+/~ in\n\n* read input as numbers: `\".;._2`\n*
        table sums (reflex `~` for table with self) : `+/`\n* find 2020: `2020 =`\n*
        sparse array: `$.`\n* gets nonzero indices in sparse array: `4 $.`\n* index
        back into input: `in {~`\n* only need first group: `{.`\n* get products: `*/`",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;J Programming
        Language:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;in =: &amp;quot;.
        ;._2 aoc 2020 1 NB. aoc is a verb to download/cache input\n*/ {. in {~ 4 $.
        $. 2020 = +/~ in\n*/ {. in {~ 4 $. $. 2020 = in +/+/~ in\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;read
        input as numbers: &lt;code&gt;&amp;quot;.;._2&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;table
        sums (reflex &lt;code&gt;~&lt;/code&gt; for table with self) : &lt;code&gt;+/&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;find
        2020: &lt;code&gt;2020 =&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;sparse array:
        &lt;code&gt;$.&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;gets nonzero indices in
        sparse array: &lt;code&gt;4 $.&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;index back
        into input: &lt;code&gt;in {~&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;only need
        first group: &lt;code&gt;{.&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;get products:
        &lt;code&gt;*/&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8cqa5/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8cqa5", "created": 1606799657.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": 1606804487.0, "mod_reason_by": null, "banned_by": null, "ups": 5,
        "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8hnjr",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "rnafiz",
        "can_mod_post": false, "created_utc": 1606803520.0, "send_replies": true,
        "parent_id": "t1_ge8cqa5", "score": 5, "author_fullname": "t2_y8p7s7b", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "A bit more brutish :\n\n`*/(+./2020=d1n +/ d1n)#d1n`\n\n`*/(+./ +./ 2020=d1n
        +/ d1n +/ d1n)#d1n`", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;A
        bit more brutish :&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;*/(+./2020=d1n +/ d1n)#d1n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;*/(+./
        +./ 2020=d1n +/ d1n +/ d1n)#d1n&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8hnjr/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8hnjr", "created": 1606803520.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 3, "name":
        "t1_geiu46o", "id": "geiu46o", "parent_id": "t1_ge8hnjr", "depth": 2, "children":
        ["geiu46o", "ge8hxt7", "ge8lv9y"]}}, {"kind": "more", "data": {"count": 8,
        "name": "t1_ge8dh8r", "id": "ge8dh8r", "parent_id": "t1_ge8cqa5", "depth":
        1, "children": ["ge8dh8r", "ge8d5ko", "ge8dhzo"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606848953.0, "mod_reason_by": null,
        "banned_by": null, "ups": 7, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8cuek", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "rtbrsp",
        "can_mod_post": false, "created_utc": 1606799740.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 7, "author_fullname": "t2_jyw3n", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "#AWK (244/703)\n\nPart 1:\n\n    awk ''{a[$0]++}END{for(i in a)for(j in a)if(i+j==2020){print
        i*j;exit}}'' input\n\nPart 2:\n\n    awk ''{a[$0]++}END{for(i in a)for(j in
        a)for(k in a)if(i+j+k==2020){print i*j*k;exit}}'' input", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;h1&gt;AWK (244/703)&lt;/h1&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;awk &amp;#39;{a[$0]++}END{for(i in
        a)for(j in a)if(i+j==2020){print i*j;exit}}&amp;#39; input\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;awk &amp;#39;{a[$0]++}END{for(i in
        a)for(j in a)for(k in a)if(i+j+k==2020){print i*j*k;exit}}&amp;#39; input\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8cuek/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8cuek", "created":
        1606799740.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 7, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8fciw",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "askalski",
        "can_mod_post": false, "created_utc": 1606801656.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 7, "author_fullname": "t2_so7w7", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python.  Part 2 is an instance of a [hard problem with a funny name](https://en.wikipedia.org/wiki/3SUM).\n\n    import
        fileinput, numpy\n    \n    p = numpy.polynomial.Polynomial([0] * 2020)\n    for
        i in [ int(line) for line in fileinput.input() ]:\n        p.coef[i] = i\n    \n    print(''Part
        1:'', int((p**2).coef[2020] / 2))\n    print(''Part 2:'', int((p**3).coef[2020]
        / 6))", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python.  Part
        2 is an instance of a &lt;a href=\"https://en.wikipedia.org/wiki/3SUM\"&gt;hard
        problem with a funny name&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        fileinput, numpy\n\np = numpy.polynomial.Polynomial([0] * 2020)\nfor i in
        [ int(line) for line in fileinput.input() ]:\n    p.coef[i] = i\n\nprint(&amp;#39;Part
        1:&amp;#39;, int((p**2).coef[2020] / 2))\nprint(&amp;#39;Part 2:&amp;#39;,
        int((p**3).coef[2020] / 6))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8fciw/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8fciw", "created": 1606801656.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 7, "name":
        "t1_ge8t9j2", "id": "ge8t9j2", "parent_id": "t1_ge8fciw", "depth": 1, "children":
        ["ge8t9j2", "ge8fdej", "ge914yu", "gebwv33"]}}, {"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "edited": 1606862239.0, "mod_reason_by": null, "banned_by": null, "ups":
        7, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8gkoa",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "DFreiberg",
        "can_mod_post": false, "created_utc": 1606802642.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 7, "author_fullname": "t2_87ozx", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**[Mathematica](https://github.com/HiggstonRainbird/AoC-2020), 1028 / 380**\n----\n\nNot
        proud of my lack of refreshing skills, but decently proud of my one-liner.\n\n    Times
        @@ SelectFirst[Subsets[input, {2}], Total[#] == 2020 &amp;]\n\nI know the
        megathread doesn''t even open for another five days, but I''ve been waiting
        all year for an excuse for some poetry.\n\n**[POEM]: A Hero''s Rest**\n----\n\nStep
        softly, to the sandy shore  \nAnd let another save the day.  \nYou''ve worked
        enough, five years or more,   \nTo earn a bit of play.  \n\nOh, you have learned
        to prod and poke    \nAt tortured puzzles from the Pole.  \nYou know what
        word [the rover spoke](https://adventofcode.com/2019/day/8).  \nYou fixed
        it when [the printer broke](https://adventofcode.com/2017/day/1).  \nAnd now
        it''s time to take a soak  \nAnd lounge at this atoll.\n\nThese five long
        years have left their mark,  \nAnd R&amp;R will hit the spot.  \nPut down
        the Scala and the Spark,  \nPut `Lisp`y `car`s all into park,  \nAnd watch
        a dolphin (or a shark),  \nFrom deck chairs, on a yacht.\n\nNo goals, this
        time, to work toward  \nNo [consoles going ''beep''](https://adventofcode.com/2018/day/25).  \nNo
        [goblins swinging mace and sword](https://adventofcode.com/2018/day/15),  \nJust
        beaches, and a king''s reward.  \n(I''ll gladly get the leaderboard  \nWhile
        you can get some sleep!)", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h2&gt;&lt;strong&gt;&lt;a
        href=\"https://github.com/HiggstonRainbird/AoC-2020\"&gt;Mathematica&lt;/a&gt;,
        1028 / 380&lt;/strong&gt;&lt;/h2&gt;\n\n&lt;p&gt;Not proud of my lack of refreshing
        skills, but decently proud of my one-liner.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Times
        @@ SelectFirst[Subsets[input, {2}], Total[#] == 2020 &amp;amp;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I
        know the megathread doesn&amp;#39;t even open for another five days, but I&amp;#39;ve
        been waiting all year for an excuse for some poetry.&lt;/p&gt;\n\n&lt;h2&gt;&lt;strong&gt;[POEM]:
        A Hero&amp;#39;s Rest&lt;/strong&gt;&lt;/h2&gt;\n\n&lt;p&gt;Step softly, to
        the sandy shore&lt;br/&gt;\nAnd let another save the day.&lt;br/&gt;\nYou&amp;#39;ve
        worked enough, five years or more,&lt;br/&gt;\nTo earn a bit of play.  &lt;/p&gt;\n\n&lt;p&gt;Oh,
        you have learned to prod and poke&lt;br/&gt;\nAt tortured puzzles from the
        Pole.&lt;br/&gt;\nYou know what word &lt;a href=\"https://adventofcode.com/2019/day/8\"&gt;the
        rover spoke&lt;/a&gt;.&lt;br/&gt;\nYou fixed it when &lt;a href=\"https://adventofcode.com/2017/day/1\"&gt;the
        printer broke&lt;/a&gt;.&lt;br/&gt;\nAnd now it&amp;#39;s time to take a soak&lt;br/&gt;\nAnd
        lounge at this atoll.&lt;/p&gt;\n\n&lt;p&gt;These five long years have left
        their mark,&lt;br/&gt;\nAnd R&amp;amp;R will hit the spot.&lt;br/&gt;\nPut
        down the Scala and the Spark,&lt;br/&gt;\nPut &lt;code&gt;Lisp&lt;/code&gt;y
        &lt;code&gt;car&lt;/code&gt;s all into park,&lt;br/&gt;\nAnd watch a dolphin
        (or a shark),&lt;br/&gt;\nFrom deck chairs, on a yacht.&lt;/p&gt;\n\n&lt;p&gt;No
        goals, this time, to work toward&lt;br/&gt;\nNo &lt;a href=\"https://adventofcode.com/2018/day/25\"&gt;consoles
        going &amp;#39;beep&amp;#39;&lt;/a&gt;.&lt;br/&gt;\nNo &lt;a href=\"https://adventofcode.com/2018/day/15\"&gt;goblins
        swinging mace and sword&lt;/a&gt;,&lt;br/&gt;\nJust beaches, and a king&amp;#39;s
        reward.&lt;br/&gt;\n(I&amp;#39;ll gladly get the leaderboard&lt;br/&gt;\nWhile
        you can get some sleep!)&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8gkoa/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8gkoa", "created":
        1606802642.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge8lem6", "id": "ge8lem6", "parent_id":
        "t1_ge8gkoa", "depth": 1, "children": ["ge8lem6"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606810650.0, "mod_reason_by": null,
        "banned_by": null, "ups": 6, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8ndkq", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "Anjir",
        "can_mod_post": false, "created_utc": 1606808512.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 6, "author_fullname": "t2_hvjlz", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# **Rockstar!** \n\nOnly first part because I can''t make lyrics\n\n---\n\nYour
        heart is \"1721,979,366,299,675,1456\"  \nYour lies is \",\"  \nShatter your
        heart into my heart with your lies  \n\nMy world is diabolical  \nA dream
        is blackhearted, lovestruck; exterminated heartbreak  \nMy life''s an asymptotic
        apocalypse  \nKnock my life down  \nThe goal''s an attractive submission  \nKnock
        the goal down  \n\nWhile my life is higher than nothing,  \nYour life''s abstinence  \nWhile
        your life is lower than the goal,  \nPut my heart at your life into meaningless  \nPut
        my heart at my life into sadness  \nIf sadness is meaningless,  \nBuild your
        life up  \nTake it to the top   \n\nCast meaningless into anguish  \nCast
        sadness into anger  \nPut anguish with anger into my world  \nBuild your life
        up   \nIf my world is a dream   \nShout anger of anguish   \nBreak it down   \n\n\n\nKnock
        my life down!\n\n---\nRaw:\n\n    Your heart is \"1721,979,366,299,675,1456\"
        (input delimited by comma)\n    Your lies is \",\"\n    Shatter your heart
        into my heart with your lies\n    \n    My world is diabolical\n    A dream
        is blackhearted, lovestruck; exterminated heartbreak\n    My life''s an asymptotic
        apocalypse\n    Knock my life down\n    The goal''s an attractive submission\n    Knock
        the goal down\n    \n    While my life is higher than nothing,\n    Your life''s
        abstinence\n    While your life is lower than the goal,\n    Put my heart
        at your life into meaningless\n    Put my heart at my life into sadness\n    If
        sadness is meaningless,\n    Build your life up\n    Take it to the top \n    \n    Cast
        meaningless into anguish\n    Cast sadness into anger\n    Put anguish with
        anger into my world\n    Build your life up \n    If my world is a dream \n    Shout
        anger of anguish \n    Break it down \n    \u2800\n    \u2800\u200e\u200e\n\n    Knock
        my life down!", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;strong&gt;Rockstar!&lt;/strong&gt;&lt;/h1&gt;\n\n&lt;p&gt;Only
        first part because I can&amp;#39;t make lyrics&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;Your
        heart is &amp;quot;1721,979,366,299,675,1456&amp;quot;&lt;br/&gt;\nYour lies
        is &amp;quot;,&amp;quot;&lt;br/&gt;\nShatter your heart into my heart with
        your lies  &lt;/p&gt;\n\n&lt;p&gt;My world is diabolical&lt;br/&gt;\nA dream
        is blackhearted, lovestruck; exterminated heartbreak&lt;br/&gt;\nMy life&amp;#39;s
        an asymptotic apocalypse&lt;br/&gt;\nKnock my life down&lt;br/&gt;\nThe goal&amp;#39;s
        an attractive submission&lt;br/&gt;\nKnock the goal down  &lt;/p&gt;\n\n&lt;p&gt;While
        my life is higher than nothing,&lt;br/&gt;\nYour life&amp;#39;s abstinence&lt;br/&gt;\nWhile
        your life is lower than the goal,&lt;br/&gt;\nPut my heart at your life into
        meaningless&lt;br/&gt;\nPut my heart at my life into sadness&lt;br/&gt;\nIf
        sadness is meaningless,&lt;br/&gt;\nBuild your life up&lt;br/&gt;\nTake it
        to the top   &lt;/p&gt;\n\n&lt;p&gt;Cast meaningless into anguish&lt;br/&gt;\nCast
        sadness into anger&lt;br/&gt;\nPut anguish with anger into my world&lt;br/&gt;\nBuild
        your life up&lt;br/&gt;\nIf my world is a dream&lt;br/&gt;\nShout anger of
        anguish&lt;br/&gt;\nBreak it down   &lt;/p&gt;\n\n&lt;p&gt;Knock my life down!&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;Raw:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Your
        heart is &amp;quot;1721,979,366,299,675,1456&amp;quot; (input delimited by
        comma)\nYour lies is &amp;quot;,&amp;quot;\nShatter your heart into my heart
        with your lies\n\nMy world is diabolical\nA dream is blackhearted, lovestruck;
        exterminated heartbreak\nMy life&amp;#39;s an asymptotic apocalypse\nKnock
        my life down\nThe goal&amp;#39;s an attractive submission\nKnock the goal
        down\n\nWhile my life is higher than nothing,\nYour life&amp;#39;s abstinence\nWhile
        your life is lower than the goal,\nPut my heart at your life into meaningless\nPut
        my heart at my life into sadness\nIf sadness is meaningless,\nBuild your life
        up\nTake it to the top \n\nCast meaningless into anguish\nCast sadness into
        anger\nPut anguish with anger into my world\nBuild your life up \nIf my world
        is a dream \nShout anger of anguish \nBreak it down \n\u2800\n\u2800\u200e\u200e\n\nKnock
        my life down!\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8ndkq/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8ndkq", "created": 1606808512.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 2, "name":
        "t1_ge8nfad", "id": "ge8nfad", "parent_id": "t1_ge8ndkq", "depth": 1, "children":
        ["ge8nfad", "ge8p1rm"]}}, {"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": 1623349046.0, "mod_reason_by": null, "banned_by": null, "removal_reason":
        null, "link_id": "t3_k4e4lm", "author_flair_template_id": null, "likes": null,
        "replies": "", "user_reports": [], "saved": false, "id": "ge9tvkg", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        "DELETED", "no_follow": false, "author": "[deleted]", "can_mod_post": false,
        "send_replies": true, "parent_id": "t3_k4e4lm", "score": 7, "approved_by":
        null, "mod_note": null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body":
        "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class": null, "name":
        "t1_ge9tvkg", "collapsed": false, "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9tvkg/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606840810.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606840810.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_gec2t0r", "id": "gec2t0r", "parent_id":
        "t1_ge9tvkg", "depth": 1, "children": ["gec2t0r"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 7, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geamgj3",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "pwmosquito",
        "can_mod_post": false, "created_utc": 1606854235.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 7, "author_fullname": "t2_5bsnc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Haskell\n\n    solve01A :: [Int] -&gt; [Int]\n    solve01A = solve 2\n\n    solve01B
        :: [Int] -&gt; [Int]\n    solve01B = solve 3\n\n    solve :: Int -&gt; [Int]
        -&gt; [Int]\n    solve n = fmap product . filter ((2020 ==) . sum) . choose
        n\n\n    choose :: Int -&gt; [a] -&gt; [[a]]\n    choose _ [] = []\n    choose
        0 _ = [[]]\n    choose k (x : xs) = fmap (x :) (choose (k - 1) xs) &lt;&gt;
        choose k xs", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Haskell&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;solve01A
        :: [Int] -&amp;gt; [Int]\nsolve01A = solve 2\n\nsolve01B :: [Int] -&amp;gt;
        [Int]\nsolve01B = solve 3\n\nsolve :: Int -&amp;gt; [Int] -&amp;gt; [Int]\nsolve
        n = fmap product . filter ((2020 ==) . sum) . choose n\n\nchoose :: Int -&amp;gt;
        [a] -&amp;gt; [[a]]\nchoose _ [] = []\nchoose 0 _ = [[]]\nchoose k (x : xs)
        = fmap (x :) (choose (k - 1) xs) &amp;lt;&amp;gt; choose k xs\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geamgj3/",
        "subreddit_type": "public", "locked": false, "name": "t1_geamgj3", "created":
        1606854235.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 6, "name": "t1_gebpg9q", "id": "gebpg9q", "parent_id":
        "t1_geamgj3", "depth": 1, "children": ["gebpg9q"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 13, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge98dse",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "Scarygami",
        "can_mod_post": false, "created_utc": 1606829071.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 13, "author_fullname": "t2_zgsk8", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Probably not the first to do that (I haven''t checked this thread yet), but
        here''s part 1 hand-coded (no compiler used) in IntCode:\n\n1105 1 6 -1 -1
        0 109 68 101 1 3 3 101 0 3 25 101 0 3 51 101 0 3 62 1206 0 67 101 0 3 4 101
        1 4 4 101 0 4 48 101 0 4 52 101 0 4 63 1206 0 8 2201 0 0 5 108 2020 5 5 1006
        5 31 2202 0 0 5 4 5 99 1721 979 366 299 675 1456\n\nAdd your own input after
        the \"99\" near the end.\n\nI will upload a commented version to [my github
        repo](https://github.com/Scarygami/aoc2020) later", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Probably not the first to do that (I haven&amp;#39;t
        checked this thread yet), but here&amp;#39;s part 1 hand-coded (no compiler
        used) in IntCode:&lt;/p&gt;\n\n&lt;p&gt;1105 1 6 -1 -1 0 109 68 101 1 3 3
        101 0 3 25 101 0 3 51 101 0 3 62 1206 0 67 101 0 3 4 101 1 4 4 101 0 4 48
        101 0 4 52 101 0 4 63 1206 0 8 2201 0 0 5 108 2020 5 5 1006 5 31 2202 0 0
        5 4 5 99 1721 979 366 299 675 1456&lt;/p&gt;\n\n&lt;p&gt;Add your own input
        after the &amp;quot;99&amp;quot; near the end.&lt;/p&gt;\n\n&lt;p&gt;I will
        upload a commented version to &lt;a href=\"https://github.com/Scarygami/aoc2020\"&gt;my
        github repo&lt;/a&gt; later&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge98dse/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge98dse", "created":
        1606829071.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge9ypr6", "id": "ge9ypr6", "parent_id":
        "t1_ge98dse", "depth": 1, "children": ["ge9ypr6"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 6, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8enay",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "voidhawk42",
        "can_mod_post": false, "created_utc": 1606801105.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 6, "author_fullname": "t2_u464p", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Dyalog APL:\n\n    p\u2190\u234e\u00a8\u2283\u2395nget''in\\1.txt''1\n    f\u2190{\u00d7/p[\u2283\u23782020=\u2375]}\n    f
        t\u2190\u2218.+\u2368p\n    f p+\u23640 2\u22a2t", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Dyalog APL:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;p\u2190\u234e\u00a8\u2283\u2395nget&amp;#39;in\\1.txt&amp;#39;1\nf\u2190{\u00d7/p[\u2283\u23782020=\u2375]}\nf
        t\u2190\u2218.+\u2368p\nf p+\u23640 2\u22a2t\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8enay/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8enay", "created":
        1606801105.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_ge96u24", "id": "ge96u24", "parent_id":
        "t1_ge8enay", "depth": 1, "children": ["ge96u24", "ge8i6rs"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606873223.0, "mod_reason_by": null,
        "banned_by": null, "ups": 6, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geb7ept", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "zurtex",
        "can_mod_post": false, "created_utc": 1606864332.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 6, "author_fullname": "t2_ajq6m", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I''m surprised to see none of the Python solutions here use `itertools.combinations_with_replacement`
        which is more efficient than `itertools.product` for this use case and allows
        for the valid possibility of an element repeating itself unlike `itertools.combinations`.
        \n\nE.g.\n\n    from itertools import combinations_with_replacement\n\n    with
        open(''day_1_input.txt'') as f:\n        inputs = f.readlines()\n\n    expenses
        = set(int(i) for i in inputs)\n\n    for x, y in combinations_with_replacement(expenses,
        2):\n        if (z := 2020 - x - y) in expenses:\n            print(x * y
        * z)\n\n\nI think this challenge explicitly didn''t let an element repeating
        itself be the solution, but it''s probably going to be handy to have this
        function going forward.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m
        surprised to see none of the Python solutions here use &lt;code&gt;itertools.combinations_with_replacement&lt;/code&gt;
        which is more efficient than &lt;code&gt;itertools.product&lt;/code&gt; for
        this use case and allows for the valid possibility of an element repeating
        itself unlike &lt;code&gt;itertools.combinations&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;E.g.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from
        itertools import combinations_with_replacement\n\nwith open(&amp;#39;day_1_input.txt&amp;#39;)
        as f:\n    inputs = f.readlines()\n\nexpenses = set(int(i) for i in inputs)\n\nfor
        x, y in combinations_with_replacement(expenses, 2):\n    if (z := 2020 - x
        - y) in expenses:\n        print(x * y * z)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I
        think this challenge explicitly didn&amp;#39;t let an element repeating itself
        be the solution, but it&amp;#39;s probably going to be handy to have this
        function going forward.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb7ept/",
        "subreddit_type": "public", "locked": false, "name": "t1_geb7ept", "created":
        1606864332.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 5, "name": "t1_gebw5el", "id": "gebw5el", "parent_id":
        "t1_geb7ept", "depth": 1, "children": ["gebw5el"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 7, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gecjm46",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "segfaultvicta",
        "can_mod_post": false, "created_utc": 1606894284.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 7, "author_fullname": "t2_52257", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Raku**\n\nTrying to teach myself Raku this year - Perl was my first-ever
        programming language and on some gut level it''s always felt like home, but
        I haven''t actually \\*used\\* it in forever, and then a friend of mine has
        been being a big fan of Raku at me for a good long while now and, well, I
        decided to see how things went!\n\n\"How things went\" is a nearly one-liner
        that is.... I THINK n log n, at the very least it''s definitely not using
        a triply nested for loop, which is what I immediately thought of and then
        went \"No, seg, that''ll bite you in the ass if this were day 20, and what''s
        an advent of code solution without a little overengineering\". A few hours
        of wrestling with unfamiliar syntax later and:\n\n    my @lines\u00a0=\u00a0''input''.IO.lines.map({$_.Int}).sort;\n    my
        $n\u00a0=\u00a0@lines.combinations(2).map({\u00a0($_[0]\u00a0+\u00a0$_[1],\u00a0$_[0]\u00a0*\u00a0$_[1])\u00a0}).first({\u00a0(2020\u00a0-\u00a0$_[0])\u00a0\u2208\u00a0u/lines\u00a0});\n    say
        $n[1]\u00a0*\u00a0(2020\u00a0-\u00a0$n[0]);\n\nBasically, I realised that
        I just needed to test set membership of the 2020s-complement of each number
        (for part A), and then I extended that idea to generate a (sum, product) of
        all combinations of the input lines and checked the 2020s-complement of \\*those\\*
        against the initial list, which neatly avoids the process of checking everything
        against everything else. I don''t actually have any idea how fast this runs
        or how fast it runs compared to yo dawg i heard you liked for loops, but my
        intuition is that this solution would take a significantly bigger set of inputs
        to have degenerate runtime funtime. was this necessary? probably not. did
        i feel cool writing my first raku ever? heck yeah :D", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Raku&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Trying
        to teach myself Raku this year - Perl was my first-ever programming language
        and on some gut level it&amp;#39;s always felt like home, but I haven&amp;#39;t
        actually *used* it in forever, and then a friend of mine has been being a
        big fan of Raku at me for a good long while now and, well, I decided to see
        how things went!&lt;/p&gt;\n\n&lt;p&gt;&amp;quot;How things went&amp;quot;
        is a nearly one-liner that is.... I THINK n log n, at the very least it&amp;#39;s
        definitely not using a triply nested for loop, which is what I immediately
        thought of and then went &amp;quot;No, seg, that&amp;#39;ll bite you in the
        ass if this were day 20, and what&amp;#39;s an advent of code solution without
        a little overengineering&amp;quot;. A few hours of wrestling with unfamiliar
        syntax later and:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;my @lines\u00a0=\u00a0&amp;#39;input&amp;#39;.IO.lines.map({$_.Int}).sort;\nmy
        $n\u00a0=\u00a0@lines.combinations(2).map({\u00a0($_[0]\u00a0+\u00a0$_[1],\u00a0$_[0]\u00a0*\u00a0$_[1])\u00a0}).first({\u00a0(2020\u00a0-\u00a0$_[0])\u00a0\u2208\u00a0u/lines\u00a0});\nsay
        $n[1]\u00a0*\u00a0(2020\u00a0-\u00a0$n[0]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Basically,
        I realised that I just needed to test set membership of the 2020s-complement
        of each number (for part A), and then I extended that idea to generate a (sum,
        product) of all combinations of the input lines and checked the 2020s-complement
        of *those* against the initial list, which neatly avoids the process of checking
        everything against everything else. I don&amp;#39;t actually have any idea
        how fast this runs or how fast it runs compared to yo dawg i heard you liked
        for loops, but my intuition is that this solution would take a significantly
        bigger set of inputs to have degenerate runtime funtime. was this necessary?
        probably not. did i feel cool writing my first raku ever? heck yeah :D&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gecjm46/",
        "subreddit_type": "public", "locked": false, "name": "t1_gecjm46", "created":
        1606894284.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 7, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geeg9py",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "volatilebit",
        "can_mod_post": false, "created_utc": 1606935248.0, "send_replies": true,
        "parent_id": "t1_gecjm46", "score": 7, "author_fullname": "t2_44keq", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Glad to see another Raku solution.  I''ve been dabbling with Raku for a few
        years for AoC, codegolfing and some internal projects at work.\n\nHere''s
        my day 1:\n\n    use v6;\n    \n    my @input = lines\u00bb.Int;\n    \n    #
        Part 1\n    say [*] @input.combinations(2).first(*.sum==2020);\n    \n    #
        Part 2\n    say [*] @input.combinations(3).first(*.sum==2020);\n\nSome tricks
        I used that are not in yours:\n\n* Using \u00bb. to run a function against
        each element of an array instead of having to use map\n* Using the meta reduce
        operator with \\* to multiple the 2 elements of the list together instead
        of $\\_\\[0\\] \\* $\\_\\[1\\].\n* Using the magic \\* operator to reference
        to the list element when calling a function that operates on a list.", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Glad to see another Raku solution.  I&amp;#39;ve
        been dabbling with Raku for a few years for AoC, codegolfing and some internal
        projects at work.&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s my day 1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use
        v6;\n\nmy @input = lines\u00bb.Int;\n\n# Part 1\nsay [*] @input.combinations(2).first(*.sum==2020);\n\n#
        Part 2\nsay [*] @input.combinations(3).first(*.sum==2020);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Some
        tricks I used that are not in yours:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Using
        \u00bb. to run a function against each element of an array instead of having
        to use map&lt;/li&gt;\n&lt;li&gt;Using the meta reduce operator with * to
        multiple the 2 elements of the list together instead of $_[0] * $_[1].&lt;/li&gt;\n&lt;li&gt;Using
        the magic * operator to reference to the list element when calling a function
        that operates on a list.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geeg9py/", "subreddit_type":
        "public", "locked": false, "name": "t1_geeg9py", "created": 1606935248.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 2, "name":
        "t1_gef0i7n", "id": "gef0i7n", "parent_id": "t1_geeg9py", "depth": 2, "children":
        ["gef0i7n"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": 1606854969.0,
        "mod_reason_by": null, "banned_by": null, "ups": 13, "num_reports": null,
        "author_flair_type": "text", "total_awards_received": 0, "subreddit": "adventofcode",
        "author_flair_template_id": null, "likes": null, "replies": "", "user_reports":
        [], "saved": false, "id": "geall6i", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        false, "author": "p88h", "can_mod_post": false, "created_utc": 1606853833.0,
        "send_replies": true, "parent_id": "t3_k4e4lm", "score": 13, "author_fullname":
        "t2_w7wi5", "report_reasons": null, "approved_by": null, "all_awardings":
        [], "collapsed": false, "body": "IntCode:\n```\n109,1498,1101,0,0,1491,1101,0,0,1497,1101,0,0,1487,1101,1,0,1493,1006,1493,448,3,1493,1001,1493,0,1492,21001,1492,0,0,109,1,1101,0,0,1493,109,-1,1201,0,0,1490,7,1490,1493,1496,8,1490,1493,1493,1005,1496,61,1001,1493,0,1493,1106,0,65,1001,1496,0,1493,1006,1493,71,1106,0,448,1101,0,0,1485,21001,1485,0,0,109,1,1001,1491,0,1493,109,-1,1201,0,0,1490,7,1490,1493,1493,1006,1493,393,1001,1485,0,1493,101,461,1493,1493,1001,1493,0,111,1001,0,0,1493,1001,1493,0,1495,21001,1492,0,0,109,1,1001,1495,0,1493,109,-1,1201,0,0,1490,1,1490,1493,1493,1001,1493,0,1488,21001,1488,0,0,109,1,1101,2020,0,1493,109,-1,1201,0,0,1490,8,1490,1493,1493,1006,1493,189,21001,1492,0,0,109,1,1001,1495,0,1493,109,-1,1201,0,0,1490,2,1490,1493,1493,1001,1493,0,1497,1101,0,0,1489,21001,1489,0,0,109,1,1001,1485,0,1493,109,-1,1201,0,0,1490,7,1490,1493,1493,1006,1493,366,1001,1489,0,1493,101,461,1493,1493,1001,1493,0,229,1001,0,0,1493,1001,1493,0,1486,21001,1492,0,0,109,1,21001,1495,0,0,109,1,1001,1486,0,1493,109,-1,1201,0,0,1490,1,1490,1493,1493,109,-1,1201,0,0,1490,1,1490,1493,1493,1001,1493,0,1494,21001,1494,0,0,109,1,1101,2020,0,1493,109,-1,1201,0,0,1490,8,1490,1493,1493,1006,1493,339,21001,1492,0,0,109,1,21001,1495,0,0,109,1,1001,1486,0,1493,109,-1,1201,0,0,1490,2,1490,1493,1493,109,-1,1201,0,0,1490,2,1490,1493,1493,1001,1493,0,1487,21001,1489,0,0,109,1,1101,1,0,1493,109,-1,1201,0,0,1490,1,1490,1493,1493,1001,1493,0,1489,1106,0,193,21001,1485,0,0,109,1,1101,1,0,1493,109,-1,1201,0,0,1490,1,1490,1493,1493,1001,1493,0,1485,1106,0,75,21001,1492,0,0,109,1,1001,1491,0,1493,109,-1,1201,0,0,1490,101,461,1493,1493,1001,1493,0,420,1001,1490,0,0,21001,1491,0,0,109,1,1101,1,0,1493,109,-1,1201,0,0,1490,1,1490,1493,1493,1001,1493,0,1491,1106,0,14,1001,1497,0,1493,4,1493,1001,1487,0,1493,4,1493,99\n```",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;IntCode:\n&lt;code&gt;\n109,1498,1101,0,0,1491,1101,0,0,1497,1101,0,0,1487,1101,1,0,1493,1006,1493,448,3,1493,1001,1493,0,1492,21001,1492,0,0,109,1,1101,0,0,1493,109,-1,1201,0,0,1490,7,1490,1493,1496,8,1490,1493,1493,1005,1496,61,1001,1493,0,1493,1106,0,65,1001,1496,0,1493,1006,1493,71,1106,0,448,1101,0,0,1485,21001,1485,0,0,109,1,1001,1491,0,1493,109,-1,1201,0,0,1490,7,1490,1493,1493,1006,1493,393,1001,1485,0,1493,101,461,1493,1493,1001,1493,0,111,1001,0,0,1493,1001,1493,0,1495,21001,1492,0,0,109,1,1001,1495,0,1493,109,-1,1201,0,0,1490,1,1490,1493,1493,1001,1493,0,1488,21001,1488,0,0,109,1,1101,2020,0,1493,109,-1,1201,0,0,1490,8,1490,1493,1493,1006,1493,189,21001,1492,0,0,109,1,1001,1495,0,1493,109,-1,1201,0,0,1490,2,1490,1493,1493,1001,1493,0,1497,1101,0,0,1489,21001,1489,0,0,109,1,1001,1485,0,1493,109,-1,1201,0,0,1490,7,1490,1493,1493,1006,1493,366,1001,1489,0,1493,101,461,1493,1493,1001,1493,0,229,1001,0,0,1493,1001,1493,0,1486,21001,1492,0,0,109,1,21001,1495,0,0,109,1,1001,1486,0,1493,109,-1,1201,0,0,1490,1,1490,1493,1493,109,-1,1201,0,0,1490,1,1490,1493,1493,1001,1493,0,1494,21001,1494,0,0,109,1,1101,2020,0,1493,109,-1,1201,0,0,1490,8,1490,1493,1493,1006,1493,339,21001,1492,0,0,109,1,21001,1495,0,0,109,1,1001,1486,0,1493,109,-1,1201,0,0,1490,2,1490,1493,1493,109,-1,1201,0,0,1490,2,1490,1493,1493,1001,1493,0,1487,21001,1489,0,0,109,1,1101,1,0,1493,109,-1,1201,0,0,1490,1,1490,1493,1493,1001,1493,0,1489,1106,0,193,21001,1485,0,0,109,1,1101,1,0,1493,109,-1,1201,0,0,1490,1,1490,1493,1493,1001,1493,0,1485,1106,0,75,21001,1492,0,0,109,1,1001,1491,0,1493,109,-1,1201,0,0,1490,101,461,1493,1493,1001,1493,0,420,1001,1490,0,0,21001,1491,0,0,109,1,1101,1,0,1493,109,-1,1201,0,0,1490,1,1490,1493,1493,1001,1493,0,1491,1106,0,14,1001,1497,0,1493,4,1493,1001,1487,0,1493,4,1493,99\n&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": true, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geall6i/",
        "subreddit_type": "public", "locked": false, "name": "t1_geall6i", "created":
        1606853833.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 7, "name": "t1_geatdeu", "id": "geatdeu", "parent_id":
        "t1_geall6i", "depth": 1, "children": ["geatdeu", "geayjxk", "geao4tp", "gebwryf"]}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 9, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8psgp", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "wjholden",
        "can_mod_post": false, "created_utc": 1606810804.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 9, "author_fullname": "t2_pbiewcp", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Feeling really cool about a MySQL solution! I had intended to do all of this
        year''s problems in Python, but it is so easily solved with declarative programming
        that I just had to.\n\n    CREATE TABLE Day1 (x INTEGER PRIMARY KEY);\n    INSERT
        INTO Day1 VALUES (/* values from input */);\n\nHere is how I solved part 2
        initially:\n\n    SELECT X.x, Y.x, Z.x, X.x + Y.x + Z.x, X.x * Y.x + Z.x\n    FROM
        Day1 as X, Day1 as Y, Day1 as Z\n    WHERE X.x + Y.x + Z.x = 2020;\n\nRuns
        OK, completes in about 1.4 seconds on my machine. We can do better:\n\n    SELECT
        X.x, Y.x, Z.x, X.x + Y.x + Z.x, X.x * Y.x + Z.x\n    FROM Day1 as X, Day1
        as Y, Day1 as Z\n    WHERE X.x + Y.x + Z.x = 2020\n    AND X.x + Y.x &lt;
        2020;\n\nThe longer query completes in only about 0.02 seconds on my machine!
        Don''t really know what the join processor is doing, but I assume the additional
        constraint significantly reduces the size of the intermediate solution `X
        \\times Y` before taking `(X \\times Y) \\times Z`.\n\nI got the idea from
        a class I took on NP problems. The lecturer mentioned that adding additional
        constraints for a SAT solver may improve performance.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Feeling really cool about a MySQL solution! I had
        intended to do all of this year&amp;#39;s problems in Python, but it is so
        easily solved with declarative programming that I just had to.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;CREATE
        TABLE Day1 (x INTEGER PRIMARY KEY);\nINSERT INTO Day1 VALUES (/* values from
        input */);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here is how I solved part
        2 initially:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;SELECT X.x, Y.x, Z.x, X.x
        + Y.x + Z.x, X.x * Y.x + Z.x\nFROM Day1 as X, Day1 as Y, Day1 as Z\nWHERE
        X.x + Y.x + Z.x = 2020;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Runs OK, completes
        in about 1.4 seconds on my machine. We can do better:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;SELECT
        X.x, Y.x, Z.x, X.x + Y.x + Z.x, X.x * Y.x + Z.x\nFROM Day1 as X, Day1 as Y,
        Day1 as Z\nWHERE X.x + Y.x + Z.x = 2020\nAND X.x + Y.x &amp;lt; 2020;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The
        longer query completes in only about 0.02 seconds on my machine! Don&amp;#39;t
        really know what the join processor is doing, but I assume the additional
        constraint significantly reduces the size of the intermediate solution &lt;code&gt;X
        \\times Y&lt;/code&gt; before taking &lt;code&gt;(X \\times Y) \\times Z&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;I
        got the idea from a class I took on NP problems. The lecturer mentioned that
        adding additional constraints for a SAT solver may improve performance.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8psgp/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8psgp", "created":
        1606810804.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 6, "name": "t1_ge9tgb2", "id": "ge9tgb2", "parent_id":
        "t1_ge8psgp", "depth": 1, "children": ["ge9tgb2", "geed0je", "ge90ytr"]}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": 1606802359.0,
        "mod_reason_by": null, "banned_by": null, "ups": 5, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8cp9i", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "heyitsmattwade",
        "can_mod_post": false, "created_utc": 1606799637.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 5, "author_fullname": "t2_985du", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# JavaScript, 251/38\n\nMaking those [npm modules](https://www.npmjs.com/package/generatorics)
        do the hard work... fun start!\n\n## Part 1\n\n    const { input } = require(''./input'');\n    const
        G = require(''generatorics'');\n    \n    for (let [a, b] of G.combination(input,
        2)) {\n        if (a + b === 2020) {\n            return console.log(a * b);\n        }\n    }\n\n##
        Part 2\n\n    const { input } = require(''./input'');\n    const G = require(''generatorics'');\n    \n    for
        (let [a, b, c] of G.combination(input, 3)) {\n        if (a + b + c === 2020)
        {\n            return console.log(a * b * c);\n        }\n    }\n\n## Improved
        Solution\n\nA faster solution, most notably for part two:\n\n    const { input
        } = require(''./input'');\n    \n    input.sort((a, b) =&gt; a - b);\n    const
        num_map = input.reduce((obj, v) =&gt; ((obj[v] = true), obj), {});\n    \n    const
        SUM = 2020;\n    \n    /**\n     * Part One.\n     *\n     * Loop our list
        and algebraicially determine if\n     * a 2nd number that sums to 2020 exisits\n     */\n    \n    for
        (let a of input) {\n        let b = SUM - a;\n        if (num_map[b]) {\n            console.log({
        a, b });\n            console.log(''a * b = '', a * b);\n            break;\n        }\n    }\n    \n    /**\n     *
        Part Two.\n     *\n     * Loop our list again, but this time, first find the
        _remaining_\n     * sum. Then, loop our list again. Skip the numbers we have
        already checked,\n     * and bail if we arrive at a number that already sums
        greater than 2020\n     * (we can do this because the list is sorted). Then,
        check if a third number\n     * exists that sums up to 2020 with those two
        previously picked numbers.\n     *\n     * Put another way, pick a number
        `a`. Find all the numbers for `b` such that\n     * they are less than `2020
        - a` and greater than `a`. Then, check if a number\n     * `c = 2020 - (a
        + b)` exists. If so, exit the full loop. Otherwise,\n     * continue searching
        for `b` values. If we reach the end of `b`, continue\n     * from the start
        with the next `a`.\n     */\n    \n    outer: for (let i = 0; i &lt; input.length;
        i++) {\n        let a = input[i];\n        let b_c = SUM - a;\n    \n        for
        (let j = i + 1; j &lt; input.length; j++) {\n            let b = input[j];\n            if
        (b &gt;= b_c) {\n                break;\n            }\n    \n            let
        c = SUM - (a + b);\n            if (num_map[c]) {\n                console.log({
        a, b, c });\n                console.log(''a * b * c = '', a * b * c);\n                break
        outer;\n            }\n        }\n    }", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;h1&gt;JavaScript, 251/38&lt;/h1&gt;\n\n&lt;p&gt;Making
        those &lt;a href=\"https://www.npmjs.com/package/generatorics\"&gt;npm modules&lt;/a&gt;
        do the hard work... fun start!&lt;/p&gt;\n\n&lt;h2&gt;Part 1&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;const
        { input } = require(&amp;#39;./input&amp;#39;);\nconst G = require(&amp;#39;generatorics&amp;#39;);\n\nfor
        (let [a, b] of G.combination(input, 2)) {\n    if (a + b === 2020) {\n        return
        console.log(a * b);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Part
        2&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;const { input } = require(&amp;#39;./input&amp;#39;);\nconst
        G = require(&amp;#39;generatorics&amp;#39;);\n\nfor (let [a, b, c] of G.combination(input,
        3)) {\n    if (a + b + c === 2020) {\n        return console.log(a * b * c);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Improved
        Solution&lt;/h2&gt;\n\n&lt;p&gt;A faster solution, most notably for part two:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const
        { input } = require(&amp;#39;./input&amp;#39;);\n\ninput.sort((a, b) =&amp;gt;
        a - b);\nconst num_map = input.reduce((obj, v) =&amp;gt; ((obj[v] = true),
        obj), {});\n\nconst SUM = 2020;\n\n/**\n * Part One.\n *\n * Loop our list
        and algebraicially determine if\n * a 2nd number that sums to 2020 exisits\n
        */\n\nfor (let a of input) {\n    let b = SUM - a;\n    if (num_map[b]) {\n        console.log({
        a, b });\n        console.log(&amp;#39;a * b = &amp;#39;, a * b);\n        break;\n    }\n}\n\n/**\n
        * Part Two.\n *\n * Loop our list again, but this time, first find the _remaining_\n
        * sum. Then, loop our list again. Skip the numbers we have already checked,\n
        * and bail if we arrive at a number that already sums greater than 2020\n
        * (we can do this because the list is sorted). Then, check if a third number\n
        * exists that sums up to 2020 with those two previously picked numbers.\n
        *\n * Put another way, pick a number `a`. Find all the numbers for `b` such
        that\n * they are less than `2020 - a` and greater than `a`. Then, check if
        a number\n * `c = 2020 - (a + b)` exists. If so, exit the full loop. Otherwise,\n
        * continue searching for `b` values. If we reach the end of `b`, continue\n
        * from the start with the next `a`.\n */\n\nouter: for (let i = 0; i &amp;lt;
        input.length; i++) {\n    let a = input[i];\n    let b_c = SUM - a;\n\n    for
        (let j = i + 1; j &amp;lt; input.length; j++) {\n        let b = input[j];\n        if
        (b &amp;gt;= b_c) {\n            break;\n        }\n\n        let c = SUM
        - (a + b);\n        if (num_map[c]) {\n            console.log({ a, b, c });\n            console.log(&amp;#39;a
        * b * c = &amp;#39;, a * b * c);\n            break outer;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8cp9i/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8cp9i", "created":
        1606799637.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 6, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8h9ur",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "chappar",
        "can_mod_post": false, "created_utc": 1606803209.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 6, "author_fullname": "t2_3ce0u", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "python\n\n    import sys\n    import itertools\n    nums = [int(x) for x
        in sys.stdin]\n    print (\"part one = \",  [a* b for (a, b) in  itertools.combinations(nums,
        2) if a + b == 2020][0] )\n    print (\"part two = \",  [a* b * c for (a,
        b, c) in  itertools.combinations(nums, 3) if a + b + c == 2020][0] )", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;python&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        sys\nimport itertools\nnums = [int(x) for x in sys.stdin]\nprint (&amp;quot;part
        one = &amp;quot;,  [a* b for (a, b) in  itertools.combinations(nums, 2) if
        a + b == 2020][0] )\nprint (&amp;quot;part two = &amp;quot;,  [a* b * c for
        (a, b, c) in  itertools.combinations(nums, 3) if a + b + c == 2020][0] )\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8h9ur/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8h9ur", "created":
        1606803209.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 5, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8py6d",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "infinityGroupoid",
        "can_mod_post": false, "created_utc": 1606810961.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 5, "author_fullname": "t2_gc9n0", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Simple if Inefficient Haskell/My CPU can Churn faster than I can Type**\n\n    main
        = do\n        ls &lt;- fmap read . lines &lt;$&gt; readFile \"./input1.txt\"
        :: IO [Int]\n        putStr \"Part 1:\"\n        print . head $ [ x * y |
        x &lt;- ls, y &lt;- ls, x + y == 2020]\n        putStr \"Part 2:\"\n        print
        . head $ [ x * y * z | x &lt;- ls, y &lt;- ls, z &lt;- ls, x + y + z == 2020]",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Simple
        if Inefficient Haskell/My CPU can Churn faster than I can Type&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;main
        = do\n    ls &amp;lt;- fmap read . lines &amp;lt;$&amp;gt; readFile &amp;quot;./input1.txt&amp;quot;
        :: IO [Int]\n    putStr &amp;quot;Part 1:&amp;quot;\n    print . head $ [
        x * y | x &amp;lt;- ls, y &amp;lt;- ls, x + y == 2020]\n    putStr &amp;quot;Part
        2:&amp;quot;\n    print . head $ [ x * y * z | x &amp;lt;- ls, y &amp;lt;-
        ls, z &amp;lt;- ls, x + y + z == 2020]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8py6d/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8py6d", "created":
        1606810961.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 5, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8qd3m",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "omnster",
        "can_mod_post": false, "created_utc": 1606811373.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 5, "author_fullname": "t2_mp2qp", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Mathematica\n\n    input01 /. { ___, x_, ___, y_, ___, z_, ___ } :&gt;   Times[
        x , y , z] /; x + y + z == 2020 \n\nThis is the regex for part two, the one
        for part one is similar.  Surprisingly, it solves part two in about 1 second,
        way faster than I''d expect.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Mathematica&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;input01
        /. { ___, x_, ___, y_, ___, z_, ___ } :&amp;gt;   Times[ x , y , z] /; x +
        y + z == 2020 \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is the regex for
        part two, the one for part one is similar.  Surprisingly, it solves part two
        in about 1 second, way faster than I&amp;#39;d expect.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8qd3m/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8qd3m", "created":
        1606811373.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge9m2lh", "id": "ge9m2lh", "parent_id":
        "t1_ge8qd3m", "depth": 1, "children": ["ge9m2lh"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 5, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8s7r4",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "domm_plix",
        "can_mod_post": false, "created_utc": 1606813292.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 5, "author_fullname": "t2_saqx78", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Stupid brute-force Perl solution:\n\n`my @d = ( &lt;STDIN&gt; ); for my $a
        (@d) { for my $b (@d) { for my $c (@d) { die \"$a $b $c -&gt; \".$a*$b*$c
        if $a+$b+$c == 2020 } } }`", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Stupid
        brute-force Perl solution:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;my @d = ( &amp;lt;STDIN&amp;gt;
        ); for my $a (@d) { for my $b (@d) { for my $c (@d) { die &amp;quot;$a $b
        $c -&amp;gt; &amp;quot;.$a*$b*$c if $a+$b+$c == 2020 } } }&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8s7r4/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8s7r4", "created":
        1606813292.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8y4ey", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        3, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "# Golfed (05AB1E) 13 char\n\n    |2.\u00c6\u0292O2020Q}P\n\n
        [Try it online!](https://tio.run/##HZO7kRZBDIT9DYYaPUaPKIAQjiqMs87ABZcASAmPpH70yVHNjrStVrfm48fbt/fvr9dP/fT3978/n/Xo@frry@slJ@sROf1IHn1E2x65Lo@4zmfkJKqFMHV@L9kzdWdOnZO4NXViU@e2JTlQSvbMqZLsAe@ATPb2hJAGwAeq8tGmmc@9O1dDoGidMX@emHuB55VpLQS1QRMVGFPXwafzByQiaE0WFAPTazjpZVruZJo5XdUmWW5MzJzLK5zZBeBJGMqkka0BDoLcYVEnKOaEZG20dTTSucvtw7@mhoKg@ISm2HrrJkjcJ2UOpajohXa0QPcuYeTJptCbUQwFimaCDVeQvOeuIZWg6w1kQOicYNhQ@BOGmIybMUF1TWc0G6iAbWsyi4GHLetNkIhttKwcHYPR0BYJfPhdyoqgid2CaQAfdGyoNFqoz683D/SQP1Z5tmRUZg0Eo1pWO2UFlA1iebT4LH6ipJfrefo2YAObc9JzkIOmqWve1CquGq0uLsyCkLgAIy@@5cUoRvc1XrYYPnXY3p2JEpj1RQnsKnao8TJ1NWEt2Jde2RYAPWJF5TUktnrBrzBdVhke2921P2wtd714he6MYOw@p0LL4ikGsijUDq8r2AHZlzkj/Ac
        \"05AB1E \u2013 Try It Online\")\n\n## Explanation\n    -- implicit input
        --\n    | -&gt; pushes the whole input as an array\n    2 -&gt; push 2 on
        stack\n    .\u00c6 -&gt; a, b - b-element combinations of a\n    \u0292 -&gt;
        filter\n        O -&gt; sum\n        2020 -&gt; push 2020 on stack\n        Q
        -&gt; a,b - a equals b\n    } -&gt; end filter\n    P -&gt; Product\n    --
        implicit output --\n\nAnd then for part 2 just exchange the first 2 with a
        3", "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_ge8y4ey",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Golfed
        (05AB1E) 13 char&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;|2.\u00c6\u0292O2020Q}P\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://tio.run/##HZO7kRZBDIT9DYYaPUaPKIAQjiqMs87ABZcASAmPpH70yVHNjrStVrfm48fbt/fvr9dP/fT3978/n/Xo@frry@slJ@sROf1IHn1E2x65Lo@4zmfkJKqFMHV@L9kzdWdOnZO4NXViU@e2JTlQSvbMqZLsAe@ATPb2hJAGwAeq8tGmmc@9O1dDoGidMX@emHuB55VpLQS1QRMVGFPXwafzByQiaE0WFAPTazjpZVruZJo5XdUmWW5MzJzLK5zZBeBJGMqkka0BDoLcYVEnKOaEZG20dTTSucvtw7@mhoKg@ISm2HrrJkjcJ2UOpajohXa0QPcuYeTJptCbUQwFimaCDVeQvOeuIZWg6w1kQOicYNhQ@BOGmIybMUF1TWc0G6iAbWsyi4GHLetNkIhttKwcHYPR0BYJfPhdyoqgid2CaQAfdGyoNFqoz683D/SQP1Z5tmRUZg0Eo1pWO2UFlA1iebT4LH6ipJfrefo2YAObc9JzkIOmqWve1CquGq0uLsyCkLgAIy@@5cUoRvc1XrYYPnXY3p2JEpj1RQnsKnao8TJ1NWEt2Jde2RYAPWJF5TUktnrBrzBdVhke2921P2wtd714he6MYOw@p0LL4ikGsijUDq8r2AHZlzkj/Ac\"
        title=\"05AB1E \u2013 Try It Online\"&gt;Try it online!&lt;/a&gt;&lt;/p&gt;\n\n&lt;h2&gt;Explanation&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;--
        implicit input --\n| -&amp;gt; pushes the whole input as an array\n2 -&amp;gt;
        push 2 on stack\n.\u00c6 -&amp;gt; a, b - b-element combinations of a\n\u0292
        -&amp;gt; filter\n    O -&amp;gt; sum\n    2020 -&amp;gt; push 2020 on stack\n    Q
        -&amp;gt; a,b - a equals b\n} -&amp;gt; end filter\nP -&amp;gt; Product\n--
        implicit output --\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And then for part
        2 just exchange the first 2 with a 3&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8y4ey/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606819757.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606819757.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606824567.0, "mod_reason_by": null,
        "banned_by": null, "ups": 6, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge92fd0", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "wzkx",
        "can_mod_post": false, "created_utc": 1606824185.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 6, "author_fullname": "t2_t1qbo", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Python**, set\n\n    s = set(int(e) for e in open(\"1.dat\",\"rt\").read().strip().split())\n    \n    def
        p1(s):\n      for e in s:\n        if 2020-e in s:\n          return e*(2020-e)\n    \n    def
        p2(s):\n      for i in s:\n        for j in s:\n          if 2020-i-j in s:\n            return
        i*j*(2020-i-j)\n    \n    print(p1(s))\n    print(p2(s))", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;, set&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;s
        = set(int(e) for e in open(&amp;quot;1.dat&amp;quot;,&amp;quot;rt&amp;quot;).read().strip().split())\n\ndef
        p1(s):\n  for e in s:\n    if 2020-e in s:\n      return e*(2020-e)\n\ndef
        p2(s):\n  for i in s:\n    for j in s:\n      if 2020-i-j in s:\n        return
        i*j*(2020-i-j)\n\nprint(p1(s))\nprint(p2(s))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge92fd0/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge92fd0", "created":
        1606824185.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_geb8sa7", "id": "geb8sa7", "parent_id":
        "t1_ge92fd0", "depth": 1, "children": ["geb8sa7"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 5, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge92otc",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "tymscar",
        "can_mod_post": false, "created_utc": 1606824436.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 5, "author_fullname": "t2_5gebp", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I wanted to make this work on any amount of numbers that you ask for, not
        only 2 and 3. I explained this in a [post here](https://www.reddit.com/r/adventofcode/comments/k4jkc8/2020_day_1_part_3_find_n_numbers_the_sum_up_to/).\n\n&amp;#x200B;\n\n&amp;#x200B;\n\nMy
        solution in Python 3:\n\n    def product_of_two_numbers_that_sum_to(list_of_numbers,
        value_they_have_to_sum_to, how_many_numbers_to_sum):\n        if how_many_numbers_to_sum
        == 0:\n            return 1\n        if how_many_numbers_to_sum == 1:\n            if
        value_they_have_to_sum_to in list_of_numbers:\n                return value_they_have_to_sum_to\n            else:\n                return
        0\n    \n    \n        for number in list_of_numbers:\n            complement
        = value_they_have_to_sum_to - number\n            product = product_of_two_numbers_that_sum_to(list_of_numbers,
        complement, how_many_numbers_to_sum - 1)\n            if product &gt; 0:\n                return
        number * product\n        return 0\n    \n    \n    def day_01():\n        file
        = open(''input.txt'', ''r'')\n    \n        expenses = {}\n    \n        for
        line in file:\n            expenses[int(line)] = True\n        \n        #Part
        1\n        print(product_of_two_numbers_that_sum_to(expenses, 2020, 2))\n        #Part
        2\n        print(product_of_two_numbers_that_sum_to(expenses, 2020, 3))\n    \n    \n    day_01()",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I wanted to make this
        work on any amount of numbers that you ask for, not only 2 and 3. I explained
        this in a &lt;a href=\"https://www.reddit.com/r/adventofcode/comments/k4jkc8/2020_day_1_part_3_find_n_numbers_the_sum_up_to/\"&gt;post
        here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;My
        solution in Python 3:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def product_of_two_numbers_that_sum_to(list_of_numbers,
        value_they_have_to_sum_to, how_many_numbers_to_sum):\n    if how_many_numbers_to_sum
        == 0:\n        return 1\n    if how_many_numbers_to_sum == 1:\n        if
        value_they_have_to_sum_to in list_of_numbers:\n            return value_they_have_to_sum_to\n        else:\n            return
        0\n\n\n    for number in list_of_numbers:\n        complement = value_they_have_to_sum_to
        - number\n        product = product_of_two_numbers_that_sum_to(list_of_numbers,
        complement, how_many_numbers_to_sum - 1)\n        if product &amp;gt; 0:\n            return
        number * product\n    return 0\n\n\ndef day_01():\n    file = open(&amp;#39;input.txt&amp;#39;,
        &amp;#39;r&amp;#39;)\n\n    expenses = {}\n\n    for line in file:\n        expenses[int(line)]
        = True\n\n    #Part 1\n    print(product_of_two_numbers_that_sum_to(expenses,
        2020, 2))\n    #Part 2\n    print(product_of_two_numbers_that_sum_to(expenses,
        2020, 3))\n\n\nday_01()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge92otc/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge92otc", "created": 1606824436.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 3, "name":
        "t1_gebp6iu", "id": "gebp6iu", "parent_id": "t1_ge92otc", "depth": 1, "children":
        ["gebp6iu", "gecni1a"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 5, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "ge95t56", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "natrys", "can_mod_post": false, "created_utc":
        1606827145.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 5,
        "author_fullname": "t2_gr41fzt", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "Raku, one-liner:\n\n    raku
        -e ''lines&gt;&gt;.Int.combinations(3).grep(*.sum == 2020).[0].reduce(&amp;[*]).say''
        input", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Raku,
        one-liner:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;raku -e &amp;#39;lines&amp;gt;&amp;gt;.Int.combinations(3).grep(*.sum
        == 2020).[0].reduce(&amp;amp;[*]).say&amp;#39; input\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge95t56/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge95t56", "created":
        1606827145.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_gea9f6r", "id": "gea9f6r", "parent_id":
        "t1_ge95t56", "depth": 1, "children": ["gea9f6r"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 4, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9adgc",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "sefujuki",
        "can_mod_post": false, "created_utc": 1606830410.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_9gisthi", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Forth (using Gforth''s \"next-arg\")\n\n[paste](https://topaz.github.io/paste/#XQAAAQBOBwAAAAAAAAAuCAQmhD4/ciRIjfCnMANs4zDWPPLnga2DJFZPtUr1JiUMMjXpKFj5ExPf1m25mVhI4ckTsUctotqY3HXOaoD6HRjR21ag6bcEpNI47TiBppG2jFbPoSjKdc9km6wp48oN6puBcQRRTtmrl6FI3/2S6CqwkMMfFV7wAb/6XW4OFeE4rhvDWeH97PLASfdnjmhVdTnzuUfWqKXOVzM1u5blbleGOMHH2IpNYZTLHhqa6P4QlXjBvr/e3tY6vJX9+l7+dppTicjutukBceigImkDZ+HNDuAAGzB52hSfePLaUXk5tfXMdY1SgIZ5DlUexJbJut4uAZ4UgX5SAHXCMXp+SvfPpGoLz236gfgF5UTv1ZPjYlfpb23ntjS0Simho8yx0RzI4WRi9X8W78IGCo2FRcHETInXLkJDUkqf5TLq5/VFy6nvOyW0pSNKYtax/J/QgfT8Aif3QnLna13Vk17f1LXH5EOvRHkyOxTPu0N30OXgZqSViY+LgoX1Uq3qMWDGlI5DgFmhVPDnSVxLOeJChGg6CtagHiLN2J2EO2CX0kqwHwzgVXJw4IIsTbXyd5AbWj+Ltrt/rqhGyUezbavNY254GBayEvNriLKYDmlkOPP1/2goqQpvJVz3H3bcGcsZc0E3dOxJxQi/Rp3573MnEnEDq6B7jzmc8/9lkBZthQyJVMQDpbXs7fKhtvy+kzwyjO04GXpceD4klZJNoEb9m7n9hIfRwP6b1cN6uEFACeTb3eF1yB52YGCOJpkA3NYKemwxgof/xqlwC9XYab/KsmkjPk794g/hp4pbM8NvG77kC3T1XRv9DZCqi0NzC00u/12IHPP24zhc7Z7vpI5wRKYxzXeLICVhjq7/QZ8Y5yisGnsQiwnGjSd83MHO+TPmdHNNG5L7fHeDHKS/NO9mdvV9/uJ29adYE00gzkZ9HZTsi2WhdHrqAZ1dL2Z8odNe3FyA2KY1PdtnzLIvwQcn5GCc/mEvDrihvBoQKSKYJHH3lDUad1oBey12qq4ggl2y5EbQIqCRXEKl9YU3QNERqnXHfBJpHyWmT/AEz2gFGixHC/ZbOL/fO8qiFn9D7ElwHebpY9fnQ4XeySvwIEuNEQk+CuEfXBWc4Gvev9hzBq4cBw+W/JeNEDoIZfwmqSx+ov+bwPgO)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Forth (using Gforth&amp;#39;s
        &amp;quot;next-arg&amp;quot;)&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://topaz.github.io/paste/#XQAAAQBOBwAAAAAAAAAuCAQmhD4/ciRIjfCnMANs4zDWPPLnga2DJFZPtUr1JiUMMjXpKFj5ExPf1m25mVhI4ckTsUctotqY3HXOaoD6HRjR21ag6bcEpNI47TiBppG2jFbPoSjKdc9km6wp48oN6puBcQRRTtmrl6FI3/2S6CqwkMMfFV7wAb/6XW4OFeE4rhvDWeH97PLASfdnjmhVdTnzuUfWqKXOVzM1u5blbleGOMHH2IpNYZTLHhqa6P4QlXjBvr/e3tY6vJX9+l7+dppTicjutukBceigImkDZ+HNDuAAGzB52hSfePLaUXk5tfXMdY1SgIZ5DlUexJbJut4uAZ4UgX5SAHXCMXp+SvfPpGoLz236gfgF5UTv1ZPjYlfpb23ntjS0Simho8yx0RzI4WRi9X8W78IGCo2FRcHETInXLkJDUkqf5TLq5/VFy6nvOyW0pSNKYtax/J/QgfT8Aif3QnLna13Vk17f1LXH5EOvRHkyOxTPu0N30OXgZqSViY+LgoX1Uq3qMWDGlI5DgFmhVPDnSVxLOeJChGg6CtagHiLN2J2EO2CX0kqwHwzgVXJw4IIsTbXyd5AbWj+Ltrt/rqhGyUezbavNY254GBayEvNriLKYDmlkOPP1/2goqQpvJVz3H3bcGcsZc0E3dOxJxQi/Rp3573MnEnEDq6B7jzmc8/9lkBZthQyJVMQDpbXs7fKhtvy+kzwyjO04GXpceD4klZJNoEb9m7n9hIfRwP6b1cN6uEFACeTb3eF1yB52YGCOJpkA3NYKemwxgof/xqlwC9XYab/KsmkjPk794g/hp4pbM8NvG77kC3T1XRv9DZCqi0NzC00u/12IHPP24zhc7Z7vpI5wRKYxzXeLICVhjq7/QZ8Y5yisGnsQiwnGjSd83MHO+TPmdHNNG5L7fHeDHKS/NO9mdvV9/uJ29adYE00gzkZ9HZTsi2WhdHrqAZ1dL2Z8odNe3FyA2KY1PdtnzLIvwQcn5GCc/mEvDrihvBoQKSKYJHH3lDUad1oBey12qq4ggl2y5EbQIqCRXEKl9YU3QNERqnXHfBJpHyWmT/AEz2gFGixHC/ZbOL/fO8qiFn9D7ElwHebpY9fnQ4XeySvwIEuNEQk+CuEfXBWc4Gvev9hzBq4cBw+W/JeNEDoIZfwmqSx+ov+bwPgO\"&gt;paste&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9adgc/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9adgc", "created":
        1606830410.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_gea2ibu", "id": "gea2ibu", "parent_id":
        "t1_ge9adgc", "depth": 1, "children": ["gea2ibu", "ge9iw84"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606833255.0, "mod_reason_by": null,
        "banned_by": null, "ups": 4, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9dk0d", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "ZoDalek",
        "can_mod_post": false, "created_utc": 1606832393.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_12jkz0", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Shell** with [cmb](https://github.com/ibara/cmb) and awk:\n\n    cmb -fk2-3
        -Xa -F2020 input | awk ''{print $1*$2*($3||1)}'' FS=+\n___\n\n`-f`: Read from
        file  \n`-k`: Combination size (2 to 3, for part 1 and 2)  \n`-X`: Operation,
        *a* for *add*  \n`-F`: Find combinations where operation (add) yields 2020\n\ncmb
        outputs something like:\n\n    1124 + 896 = 2020\n    1457 + 539 + 24 = 2020\n\nWhich
        is then parsed and multiplied by awk.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Shell&lt;/strong&gt; with &lt;a href=\"https://github.com/ibara/cmb\"&gt;cmb&lt;/a&gt;
        and awk:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;cmb -fk2-3 -Xa -F2020 input |
        awk &amp;#39;{print $1*$2*($3||1)}&amp;#39; FS=+\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;&lt;code&gt;-f&lt;/code&gt;:
        Read from file&lt;br/&gt;\n&lt;code&gt;-k&lt;/code&gt;: Combination size (2
        to 3, for part 1 and 2)&lt;br/&gt;\n&lt;code&gt;-X&lt;/code&gt;: Operation,
        &lt;em&gt;a&lt;/em&gt; for &lt;em&gt;add&lt;/em&gt;&lt;br/&gt;\n&lt;code&gt;-F&lt;/code&gt;:
        Find combinations where operation (add) yields 2020&lt;/p&gt;\n\n&lt;p&gt;cmb
        outputs something like:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;1124 + 896 = 2020\n1457
        + 539 + 24 = 2020\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which is then parsed
        and multiplied by awk.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9dk0d/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9dk0d", "created":
        1606832393.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_gfmprn4", "id": "gfmprn4", "parent_id":
        "t1_ge9dk0d", "depth": 1, "children": ["gfmprn4"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 4, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9fr4e",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "H_SG",
        "can_mod_post": false, "created_utc": 1606833679.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_gio2z", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Always good to create something impenetrable and brutish in Excel.\n\nPart1:\n\n1.
        Data in col A (A1:A200)\n2. Col B is =IF(ISNUMBER(INDEX($A$1:$A$200, MATCH(2020-A1,
        $A$1:$A$200,0))), A1,\"\")\n3. Solution for part 1 is product of col B, =PRODUCT(B1:B200)\n\nI
        think I could simplify this after getting part 2 done:\n\n1. Data in col A
        (A1:A200)\n2. Col B is =IF(OR(ISNUMBER(MATCH((2020-A1)-$A$1:$A$200, $A$1:$A$200,
        0))), A1, \"\")\n3. Solution for part 2 is product of col B, =PRODUCT(B1:B200)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Always good to create
        something impenetrable and brutish in Excel.&lt;/p&gt;\n\n&lt;p&gt;Part1:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Data
        in col A (A1:A200)&lt;/li&gt;\n&lt;li&gt;Col B is =IF(ISNUMBER(INDEX($A$1:$A$200,
        MATCH(2020-A1, $A$1:$A$200,0))), A1,&amp;quot;&amp;quot;)&lt;/li&gt;\n&lt;li&gt;Solution
        for part 1 is product of col B, =PRODUCT(B1:B200)&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;I
        think I could simplify this after getting part 2 done:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Data
        in col A (A1:A200)&lt;/li&gt;\n&lt;li&gt;Col B is =IF(OR(ISNUMBER(MATCH((2020-A1)-$A$1:$A$200,
        $A$1:$A$200, 0))), A1, &amp;quot;&amp;quot;)&lt;/li&gt;\n&lt;li&gt;Solution
        for part 2 is product of col B, =PRODUCT(B1:B200)&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9fr4e/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9fr4e", "created":
        1606833679.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_geafo7w", "id": "geafo7w", "parent_id":
        "t1_ge9fr4e", "depth": 1, "children": ["geafo7w"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606841118.0, "mod_reason_by": null,
        "banned_by": null, "ups": 4, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9rsbj", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "nutki2",
        "can_mod_post": false, "created_utc": 1606839810.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_n2utn", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Perl 5 extended regexp for part1 and part 2\n\n    #!perl -ln0\n    /\\b\\d++(?=.*\\n\\b(?{$&amp;+$''-2020||print$''*$&amp;})X)/s;\n    /\\b\\d++(?=.*\\b(\\d++)(?=.*\\n\\b(?{$&amp;+$1+$''-2020||print$&amp;*$1*$''})X))/s\n\nTaking
        around a second for both parts.\n\n    $ time perl 1.pl 1.input.txt \n    xxxxx\n    xxxxxxxxxx\n    \n    real    0m1.011s",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Perl 5 extended regexp
        for part1 and part 2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!perl -ln0\n/\\b\\d++(?=.*\\n\\b(?{$&amp;amp;+$&amp;#39;-2020||print$&amp;#39;*$&amp;amp;})X)/s;\n/\\b\\d++(?=.*\\b(\\d++)(?=.*\\n\\b(?{$&amp;amp;+$1+$&amp;#39;-2020||print$&amp;amp;*$1*$&amp;#39;})X))/s\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Taking
        around a second for both parts.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$ time
        perl 1.pl 1.input.txt \nxxxxx\nxxxxxxxxxx\n\nreal    0m1.011s\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9rsbj/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9rsbj", "created":
        1606839810.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606851714.0, "mod_reason_by": null,
        "banned_by": null, "ups": 5, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geagj02", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "psqueak",
        "can_mod_post": false, "created_utc": 1606851486.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 5, "author_fullname": "t2_fmtobf6", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "A more or less naive solution in Common Lisp\n\n    (uiop:define-package
        :advent/src/day-1\n    (:use #:cl #:iterate)\n    (:local-nicknames (#:alx
        #:alexandria))\n    (:export\n     #:solve-1a\n     #:solve-1b))\n\n    (in-package
        :advent/src/day-1)\n\n    (defun get-numlist ()\n      (let* ((input-file-contents
        (alx:read-file-into-string \"../inputs/1.txt\"))\n             (numstr-list
        (split-sequence:split-sequence #\\newline input-file-contents)))\n        (iter
        (for numstr in numstr-list)\n          (until (zerop (length numstr)))\n          (collect
        (parse-integer numstr)))))\n\n    (defun nums-in-list-summing-to (num-list
        sum)\n      (let ((num-set (make-hash-table :test #''equalp)))\n        (iter
        (for num in num-list)\n              (for complement = (- sum num))\n              (if
        (gethash complement num-set)\n                  (return-from nums-in-list-summing-to
        (cons num complement))\n                  (setf (gethash num num-set) t)))))\n  \n    (defun
        solve-1a ()\n      (destructuring-bind (n1 . n2) (nums-in-list-summing-to
        (get-numlist) 2020)\n        (* n1 n2)))\n  \n    (defun solve-1b ()\n      (iter
        (for list on (get-numlist))\n        (for (head t1 t2) = list)\n        (while
        t2)\n        (for result = (nums-in-list-summing-to (cdr list) (- 2020 head)))\n        (if
        result\n            (destructuring-bind (n1 . n2) result\n              (return-from
        solve-1b (* head n1 n2))))))", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;A
        more or less naive solution in Common Lisp&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(uiop:define-package
        :advent/src/day-1\n(:use #:cl #:iterate)\n(:local-nicknames (#:alx #:alexandria))\n(:export\n
        #:solve-1a\n #:solve-1b))\n\n(in-package :advent/src/day-1)\n\n(defun get-numlist
        ()\n  (let* ((input-file-contents (alx:read-file-into-string &amp;quot;../inputs/1.txt&amp;quot;))\n         (numstr-list
        (split-sequence:split-sequence #\\newline input-file-contents)))\n    (iter
        (for numstr in numstr-list)\n      (until (zerop (length numstr)))\n      (collect
        (parse-integer numstr)))))\n\n(defun nums-in-list-summing-to (num-list sum)\n  (let
        ((num-set (make-hash-table :test #&amp;#39;equalp)))\n    (iter (for num in
        num-list)\n          (for complement = (- sum num))\n          (if (gethash
        complement num-set)\n              (return-from nums-in-list-summing-to (cons
        num complement))\n              (setf (gethash num num-set) t)))))\n\n(defun
        solve-1a ()\n  (destructuring-bind (n1 . n2) (nums-in-list-summing-to (get-numlist)
        2020)\n    (* n1 n2)))\n\n(defun solve-1b ()\n  (iter (for list on (get-numlist))\n    (for
        (head t1 t2) = list)\n    (while t2)\n    (for result = (nums-in-list-summing-to
        (cdr list) (- 2020 head)))\n    (if result\n        (destructuring-bind (n1
        . n2) result\n          (return-from solve-1b (* head n1 n2))))))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geagj02/",
        "subreddit_type": "public", "locked": false, "name": "t1_geagj02", "created":
        1606851486.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_gear8n8", "id": "gear8n8", "parent_id":
        "t1_geagj02", "depth": 1, "children": ["gear8n8"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606853067.0, "mod_reason_by": null,
        "banned_by": null, "ups": 4, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geaj57s", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "landimatte",
        "can_mod_post": false, "created_utc": 1606852683.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_p7dpyti", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Common Lisp!\n\nPart 1: iterate the list of numbers, and for each, see if
        in the remainder of the list there is one element such that the sum of both
        is 2020\n\nPart 2: iterate the list of numbers, and for each, see if in the
        remainder of the list there are two elements such that their sum is \"2020
        minus the currently selected element\"\n\n    (defun find-pair-that-adds-up-to
        (target integers)\n      (loop for (n . rest) on integers\n            for
        m = (find target rest :key (partial-1 #''+ n))\n            when m return
        (list n m)))\n    \n    (define-problem (2020 1) (integers parse-integers)\n      (values
        (reduce #''* (find-pair-that-adds-up-to 2020 integers))\n              (loop
        for (n . rest) on integers\n                    for (m o) = (find-pair-that-adds-up-to
        (- 2020 n) rest)\n                    when m return (* n m o))))", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Common Lisp!&lt;/p&gt;\n\n&lt;p&gt;Part
        1: iterate the list of numbers, and for each, see if in the remainder of the
        list there is one element such that the sum of both is 2020&lt;/p&gt;\n\n&lt;p&gt;Part
        2: iterate the list of numbers, and for each, see if in the remainder of the
        list there are two elements such that their sum is &amp;quot;2020 minus the
        currently selected element&amp;quot;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(defun
        find-pair-that-adds-up-to (target integers)\n  (loop for (n . rest) on integers\n        for
        m = (find target rest :key (partial-1 #&amp;#39;+ n))\n        when m return
        (list n m)))\n\n(define-problem (2020 1) (integers parse-integers)\n  (values
        (reduce #&amp;#39;* (find-pair-that-adds-up-to 2020 integers))\n          (loop
        for (n . rest) on integers\n                for (m o) = (find-pair-that-adds-up-to
        (- 2020 n) rest)\n                when m return (* n m o))))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geaj57s/",
        "subreddit_type": "public", "locked": false, "name": "t1_geaj57s", "created":
        1606852683.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 4, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geakexd",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "-WorstWizard-",
        "can_mod_post": false, "created_utc": 1606853278.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_8hnk3zf7", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "C++ solution that is optimized for solving both part 1 and 2 in one go. Shaves
        off some time this way by not iterating n\u00b2 on part 2, but somewhat less.\n\n[Paste
        Link](https://topaz.github.io/paste/#XQAAAQCQBgAAAAAAAAAX4HymbzRtMxCVVHoNVFAKCSjW/FgRmGqRaPHkb6b6EPcRB0X1wQjwF/HJOXAyuNZn6YV4wfyanVPh6WzdgQJdHFZtno99weMMVpzupbZ9mtxvEu+V1SIwPCVQ3MIojx/jjLl9vyblNurBqLWa4o0+e1esdTo1m0R/Gmh+lt+9d3ujDG8OLUBRUAHhxeT8+m8/pVzlnPBnXNmCYs6DHnz0b4wlGCfr0UEUYS9ie9C6om1IxGGaChWqAf7v55T3qQI24OsZluvBRsndimzc6S5Tskq2vi1RMGMsCNn2V5LC3BsVqrh5U+wm2n02isXhkGgjSmuufeisTvWldWF5TqM0XLFBaKt3+jcocYRLLNDnSrUnm8N98wApkrcYFppPqIHyVgR2+fjIch5YaWj7HLcaYQUOVnR1qe1ENUfH32i/k8Mr1b3hFaqAa4y1m8vGf/prOGMtL7NayhIsyqjPH/fw0URJ3C1eYmw4M15CjwrUf2wqUcAATzU7JvnO3172QdeeBOQB+E1rjNaY/IX3bEMO0Itf8/AKXpRH9zu0klvzj78jo96IcXnAeTiYiF3ZkNpOHpeA0+hgwZEumwq53A3Ad/YkU/NLCbj040eGydpHiMp1kyvykx7QFfUV1/jG2gRMHO9oICTEGxLsWn5Afqwg2d/6YjRI6YEVNVMQp0v1DJusykBT3AzR42OVZMPE/ipiawR7kn9nKUFTdodNTqCAG41lPeQWnXJp/tCvg+RLC4ca4X9J47OwjrMkvqrIQrA3eNhhbwWje+M0wJ2XG8MU3P4EVj1kSsY0COgUYp0/4Ww8ggZDMSl2zeex/4sBpwTd0egMUij1gzKAzRP+v23++mjokwlbHHOVtWLR3jQ0t6t8yP/5QUrc)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C++ solution that is
        optimized for solving both part 1 and 2 in one go. Shaves off some time this
        way by not iterating n\u00b2 on part 2, but somewhat less.&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://topaz.github.io/paste/#XQAAAQCQBgAAAAAAAAAX4HymbzRtMxCVVHoNVFAKCSjW/FgRmGqRaPHkb6b6EPcRB0X1wQjwF/HJOXAyuNZn6YV4wfyanVPh6WzdgQJdHFZtno99weMMVpzupbZ9mtxvEu+V1SIwPCVQ3MIojx/jjLl9vyblNurBqLWa4o0+e1esdTo1m0R/Gmh+lt+9d3ujDG8OLUBRUAHhxeT8+m8/pVzlnPBnXNmCYs6DHnz0b4wlGCfr0UEUYS9ie9C6om1IxGGaChWqAf7v55T3qQI24OsZluvBRsndimzc6S5Tskq2vi1RMGMsCNn2V5LC3BsVqrh5U+wm2n02isXhkGgjSmuufeisTvWldWF5TqM0XLFBaKt3+jcocYRLLNDnSrUnm8N98wApkrcYFppPqIHyVgR2+fjIch5YaWj7HLcaYQUOVnR1qe1ENUfH32i/k8Mr1b3hFaqAa4y1m8vGf/prOGMtL7NayhIsyqjPH/fw0URJ3C1eYmw4M15CjwrUf2wqUcAATzU7JvnO3172QdeeBOQB+E1rjNaY/IX3bEMO0Itf8/AKXpRH9zu0klvzj78jo96IcXnAeTiYiF3ZkNpOHpeA0+hgwZEumwq53A3Ad/YkU/NLCbj040eGydpHiMp1kyvykx7QFfUV1/jG2gRMHO9oICTEGxLsWn5Afqwg2d/6YjRI6YEVNVMQp0v1DJusykBT3AzR42OVZMPE/ipiawR7kn9nKUFTdodNTqCAG41lPeQWnXJp/tCvg+RLC4ca4X9J47OwjrMkvqrIQrA3eNhhbwWje+M0wJ2XG8MU3P4EVj1kSsY0COgUYp0/4Ww8ggZDMSl2zeex/4sBpwTd0egMUij1gzKAzRP+v23++mjokwlbHHOVtWLR3jQ0t6t8yP/5QUrc\"&gt;Paste
        Link&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geakexd/",
        "subreddit_type": "public", "locked": false, "name": "t1_geakexd", "created":
        1606853278.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_geapfb0", "id": "geapfb0", "parent_id":
        "t1_geakexd", "depth": 1, "children": ["geapfb0"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 5, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geaskv9",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "willkill07",
        "can_mod_post": false, "created_utc": 1606857091.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 5, "author_fullname": "t2_7j0ca", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "## OCaml\n\nI''m teaching a Programming Languages course this semester that
        emphasizes functional programming. We cover a few labs in OCaml, so I figured
        I should at least get some more practice with the language. *No third party
        libraries*\n\n**Note** something that is pretty cool about this solution is
        that it''s very easy to change the number of values required and the target
        value.\n\n    let read_file_rev name =\n      let ic = open_in name\n      in
        let try_read () =\n        try Some (input_line ic) with End_of_file -&gt;
        None\n      in let rec loop acc =\n        match try_read () with Some s -&gt;
        loop (s::acc) | None -&gt; close_in ic; acc\n      in loop []\n\n    let day01
        (filename:string) (part:int) =\n      let input = List.rev_map int_of_string
        (read_file_rev filename) in\n      let rec solve (out, nums, level, target)
        =\n        match target with\n        | 0 -&gt; (match level with 0 -&gt;
        Some out | _ -&gt; None)\n        | _ when target &lt; 0 -&gt; None\n        |
        _ -&gt;\n          let rec loop = function\n          | []   -&gt; None\n          |
        x::n -&gt; \n            (match solve (x * out, n, level - 1, target - x)  with\n            |
        Some answer -&gt; Some answer\n            | None -&gt; loop n)\n          in
        loop nums\n      in let answer = solve (1, input, (if part = 1 then 2 else
        3), 2020)\n      in match answer with Some x -&gt; string_of_int x | None
        -&gt; \"\"\n\n    let _ =\n      print_endline (day01 \"day01.txt\" 1);\n      print_endline
        (day01 \"day01.txt\" 2)", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h2&gt;OCaml&lt;/h2&gt;\n\n&lt;p&gt;I&amp;#39;m
        teaching a Programming Languages course this semester that emphasizes functional
        programming. We cover a few labs in OCaml, so I figured I should at least
        get some more practice with the language. &lt;em&gt;No third party libraries&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;
        something that is pretty cool about this solution is that it&amp;#39;s very
        easy to change the number of values required and the target value.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let
        read_file_rev name =\n  let ic = open_in name\n  in let try_read () =\n    try
        Some (input_line ic) with End_of_file -&amp;gt; None\n  in let rec loop acc
        =\n    match try_read () with Some s -&amp;gt; loop (s::acc) | None -&amp;gt;
        close_in ic; acc\n  in loop []\n\nlet day01 (filename:string) (part:int) =\n  let
        input = List.rev_map int_of_string (read_file_rev filename) in\n  let rec
        solve (out, nums, level, target) =\n    match target with\n    | 0 -&amp;gt;
        (match level with 0 -&amp;gt; Some out | _ -&amp;gt; None)\n    | _ when target
        &amp;lt; 0 -&amp;gt; None\n    | _ -&amp;gt;\n      let rec loop = function\n      |
        []   -&amp;gt; None\n      | x::n -&amp;gt; \n        (match solve (x * out,
        n, level - 1, target - x)  with\n        | Some answer -&amp;gt; Some answer\n        |
        None -&amp;gt; loop n)\n      in loop nums\n  in let answer = solve (1, input,
        (if part = 1 then 2 else 3), 2020)\n  in match answer with Some x -&amp;gt;
        string_of_int x | None -&amp;gt; &amp;quot;&amp;quot;\n\nlet _ =\n  print_endline
        (day01 &amp;quot;day01.txt&amp;quot; 1);\n  print_endline (day01 &amp;quot;day01.txt&amp;quot;
        2)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geaskv9/",
        "subreddit_type": "public", "locked": false, "name": "t1_geaskv9", "created":
        1606857091.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606901760.0, "mod_reason_by": null,
        "banned_by": null, "ups": 4, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geax0kn", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "Piggelinmannen",
        "can_mod_post": false, "created_utc": 1606859195.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_jqfnq", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Hi!First time posting! :) Solution in ruby:\n\n    input = File.readlines(''./input.txt'')\n    \n    result
        = input\n             .map(&amp;:to_i)\n             .combination(2)\n             .find
        { |combination| combination.sum == 2020 }\n             .reduce(:*)\n    puts
        \"Day1 first part: #{result}\"\n    \n    result = input\n             .map(&amp;:to_i)\n             .combination(3)\n             .find
        { |combination| combination.sum == 2020 }\n             .reduce(:*)\n    puts
        \"Day1 second part: #{result}\"\n\nCould obviously be replaced with a method,
        since only the number provided to combination differs. Kind of like to keep
        solutions separate though.\n\nEDIT: reddit code blocks...", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Hi!First time posting! :) Solution in ruby:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;input
        = File.readlines(&amp;#39;./input.txt&amp;#39;)\n\nresult = input\n         .map(&amp;amp;:to_i)\n         .combination(2)\n         .find
        { |combination| combination.sum == 2020 }\n         .reduce(:*)\nputs &amp;quot;Day1
        first part: #{result}&amp;quot;\n\nresult = input\n         .map(&amp;amp;:to_i)\n         .combination(3)\n         .find
        { |combination| combination.sum == 2020 }\n         .reduce(:*)\nputs &amp;quot;Day1
        second part: #{result}&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Could
        obviously be replaced with a method, since only the number provided to combination
        differs. Kind of like to keep solutions separate though.&lt;/p&gt;\n\n&lt;p&gt;EDIT:
        reddit code blocks...&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geax0kn/",
        "subreddit_type": "public", "locked": false, "name": "t1_geax0kn", "created":
        1606859195.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_geb3aye", "id": "geb3aye", "parent_id":
        "t1_geax0kn", "depth": 1, "children": ["geb3aye"]}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1610718065.0, "mod_reason_by": null,
        "banned_by": null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geb7njk", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": false, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        6, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_geb7njk", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb7njk/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606864461.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606864461.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 6}}, {"kind":
        "more", "data": {"count": 5, "name": "t1_gejqnur", "id": "gejqnur", "parent_id":
        "t1_geb7njk", "depth": 1, "children": ["gejqnur", "gec4cmi"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606873105.0, "mod_reason_by": null,
        "banned_by": null, "ups": 5, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gebn00e", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "ka-splam",
        "can_mod_post": false, "created_utc": 1606872900.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 5, "author_fullname": "t2_furr1", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "##APL (Dyalog)\n\nNo APL yet? I must be missing it.\n\n    N\u2190\u234e\u00a8
        \u2395NGET ''c:\\aoc\\input.txt'' 1    \u235d read lines, eval() them into
        a number array.\n    \u00d7/N[\u2283\u2378 2020= \u2218.+\u2368 N]        \u235d
        Part 1\n    \u00d7/N[\u2283\u2378 2020= (\u2218.+\u23632)\u2368 N]    \u235d
        Part 2\n\n`\u2218.+` is an outer-product sum, so all combinations of numbers
        added to each other. `\u2368` means use N for both inputs, so array N items
        summed with array N items. `2020=` makes a bitmask of places in the sums array,
        1 where they summed to 2020, 0 where they didn''t. `\u2378` gets the indices
        of the 1s in a bitmask, a pair of indices because outer product makes a 2D
        array. `\u2283` gets the first pair. `N[]` gets the numbers at those indices.
        `\u00d7/` inserts multiply between the items of an array and gets the product.\n\nIn
        part 2, `\u23632` applies the outer-product twice, which makes a 3D array,
        so `\u2378` gets three indices.\n\nThis is a naieve brute-force, I have seen
        a faster and shorter code using 2020-item / sets, but I didn''t write it so
        probably not good for me to post in my answer.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;h2&gt;APL (Dyalog)&lt;/h2&gt;\n\n&lt;p&gt;No APL yet?
        I must be missing it.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;N\u2190\u234e\u00a8
        \u2395NGET &amp;#39;c:\\aoc\\input.txt&amp;#39; 1    \u235d read lines, eval()
        them into a number array.\n\u00d7/N[\u2283\u2378 2020= \u2218.+\u2368 N]        \u235d
        Part 1\n\u00d7/N[\u2283\u2378 2020= (\u2218.+\u23632)\u2368 N]    \u235d Part
        2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;\u2218.+&lt;/code&gt;
        is an outer-product sum, so all combinations of numbers added to each other.
        &lt;code&gt;\u2368&lt;/code&gt; means use N for both inputs, so array N items
        summed with array N items. &lt;code&gt;2020=&lt;/code&gt; makes a bitmask
        of places in the sums array, 1 where they summed to 2020, 0 where they didn&amp;#39;t.
        &lt;code&gt;\u2378&lt;/code&gt; gets the indices of the 1s in a bitmask, a
        pair of indices because outer product makes a 2D array. &lt;code&gt;\u2283&lt;/code&gt;
        gets the first pair. &lt;code&gt;N[]&lt;/code&gt; gets the numbers at those
        indices. &lt;code&gt;\u00d7/&lt;/code&gt; inserts multiply between the items
        of an array and gets the product.&lt;/p&gt;\n\n&lt;p&gt;In part 2, &lt;code&gt;\u23632&lt;/code&gt;
        applies the outer-product twice, which makes a 3D array, so &lt;code&gt;\u2378&lt;/code&gt;
        gets three indices.&lt;/p&gt;\n\n&lt;p&gt;This is a naieve brute-force, I
        have seen a faster and shorter code using 2020-item / sets, but I didn&amp;#39;t
        write it so probably not good for me to post in my answer.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebn00e/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebn00e", "created":
        1606872900.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_geboga3", "id": "geboga3", "parent_id":
        "t1_gebn00e", "depth": 1, "children": ["geboga3", "gebq30y"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 6, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gec3n80",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "zeJaeger",
        "can_mod_post": false, "created_utc": 1606882350.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 6, "author_fullname": "t2_pg4y4", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I just did it straight from the console in Javascript!\n\n    let expenses
        = document.querySelector(\"pre\").innerText.split(\"\\n\");\n    expenses.forEach((e)
        =&gt; {\n        expenses.forEach((e2) =&gt; {\n            expenses.forEach((e3)
        =&gt; {\n                if (parseInt(e)+parseInt(e2)+parseInt(e3) == 2020)
        {\n                    console.log(e + \" + \" + e2 + \" + \" + e3);\n                }\n            });\n        });\n    });",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I just did it straight
        from the console in Javascript!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let expenses
        = document.querySelector(&amp;quot;pre&amp;quot;).innerText.split(&amp;quot;\\n&amp;quot;);\nexpenses.forEach((e)
        =&amp;gt; {\n    expenses.forEach((e2) =&amp;gt; {\n        expenses.forEach((e3)
        =&amp;gt; {\n            if (parseInt(e)+parseInt(e2)+parseInt(e3) == 2020)
        {\n                console.log(e + &amp;quot; + &amp;quot; + e2 + &amp;quot;
        + &amp;quot; + e3);\n            }\n        });\n    });\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gec3n80/",
        "subreddit_type": "public", "locked": false, "name": "t1_gec3n80", "created":
        1606882350.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8d3d4", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        3, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Swift using Apple\u2019s algorithms package:\n\n[github.up/paste](https://topaz.github.io/paste/#XQAAAQDhAQAAAAAAAAA0m0pnuFI8c4GDemuKS6NnNxbsI/rkrE5J4hKmTX6TioKscoUIR42zkbXbQYbNWRWYn6uYP544Cd6UobjENiQo3AsDU17Ue2Iui5qA98YeHDa4U8ikAI/vCqNi2sThLVq2NIFkzlghWh5DDJFLoGb+X3YSq42ZAtCzIYtBalqVcdGf0/KFdvo2loEbnfZshFIgQrE9x+nb3QQU1jAyZNBSapgY5B5Ab/HR+9vLOXHC1fMLHYp+KtE+E+IEFQExbHhSTatNxCjBDxzz38T9xe/S6AiomF4UkV/juI1AJW1McOSgs74R/N2DORtcCr/NCFLQFDmeehjZg7ZDsCRFZwwTHlvQlf9C6TcA)",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_ge8d3d4",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Swift
        using Apple\u2019s algorithms package:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://topaz.github.io/paste/#XQAAAQDhAQAAAAAAAAA0m0pnuFI8c4GDemuKS6NnNxbsI/rkrE5J4hKmTX6TioKscoUIR42zkbXbQYbNWRWYn6uYP544Cd6UobjENiQo3AsDU17Ue2Iui5qA98YeHDa4U8ikAI/vCqNi2sThLVq2NIFkzlghWh5DDJFLoGb+X3YSq42ZAtCzIYtBalqVcdGf0/KFdvo2loEbnfZshFIgQrE9x+nb3QQU1jAyZNBSapgY5B5Ab/HR+9vLOXHC1fMLHYp+KtE+E+IEFQExbHhSTatNxCjBDxzz38T9xe/S6AiomF4UkV/juI1AJW1McOSgs74R/N2DORtcCr/NCFLQFDmeehjZg7ZDsCRFZwwTHlvQlf9C6TcA\"&gt;github.up/paste&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8d3d4/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606799923.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606799923.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_geavchu", "id": "geavchu", "parent_id":
        "t1_ge8d3d4", "depth": 1, "children": ["geavchu"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606806538.0, "mod_reason_by": null,
        "banned_by": null, "ups": 5, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8fa12", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "musifter",
        "can_mod_post": false, "created_utc": 1606801601.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 5, "author_fullname": "t2_cwt0kc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**dc**\n\nJust part 1 for now:\n\n    dc -finput -e''[q]SX[d2020r-*pq]SP[z0=Xd1r:vd2020r-;v1=Ps.lLx]SLlLx''\n\nEDIT:
        And part 2:\n\n    dc -finput -e''[q]sX[z0=X1r:vlLx]sLlLx[2020lilj+-li*lj*pq]sP[;v1=P]sC[2020lilj+-d0&lt;C]sK[li1+sj[lj;v1=Klj1+dsj2020&lt;XlLx]sLlLx]sJ0si[li;v1=Jli1+dsi2020&lt;XlIx]sIlIx''",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;dc&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Just
        part 1 for now:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;dc -finput -e&amp;#39;[q]SX[d2020r-*pq]SP[z0=Xd1r:vd2020r-;v1=Ps.lLx]SLlLx&amp;#39;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;EDIT:
        And part 2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;dc -finput -e&amp;#39;[q]sX[z0=X1r:vlLx]sLlLx[2020lilj+-li*lj*pq]sP[;v1=P]sC[2020lilj+-d0&amp;lt;C]sK[li1+sj[lj;v1=Klj1+dsj2020&amp;lt;XlLx]sLlLx]sJ0si[li;v1=Jli1+dsi2020&amp;lt;XlIx]sIlIx&amp;#39;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8fa12/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8fa12", "created":
        1606801601.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_gea5a0b", "id": "gea5a0b", "parent_id":
        "t1_ge8fa12", "depth": 1, "children": ["gea5a0b", "ge8gdnr"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 4, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8mj02",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "iraneg",
        "can_mod_post": false, "created_utc": 1606807726.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_466nj167", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Golang.\n    \n    package main\n    \n    import (\n    \t\"bufio\"\n    \t\"fmt\"\n    \t\"os\"\n    \t\"strconv\"\n    )\n    \n    func
        main() {\n    \tfile, _ := os.Open(\"input\")\n    \n    \tvar numbers []int\n    \n    \tdefer
        file.Close()\n    \n    \tscanner := bufio.NewScanner(file)\n    \n    \tfor
        scanner.Scan() {\n    \t\ti, _ := strconv.Atoi(scanner.Text())\n    \t\tnumbers
        = append(numbers, i)\n    \t}\n    \n    \tfor i, v := range numbers {\n    \t\tfor
        j, w := range numbers[i+1:] {\n    \t\t\tfor _, x := range numbers[j+1:] {\n    \t\t\t\tif
        v+w+x == 2020 {\n    \t\t\t\t\tfmt.Println(\"=============Found \", v, \"+\",
        w, \"+\", x, \"=\", v+w+x, \"==========\")\n    \t\t\t\t\tfmt.Println(v, \"*\",
        w, \"*\", x, \"=\", v*w*x)\n    \t\t\t\t\treturn\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t}\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Golang.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package
        main\n\nimport (\n    &amp;quot;bufio&amp;quot;\n    &amp;quot;fmt&amp;quot;\n    &amp;quot;os&amp;quot;\n    &amp;quot;strconv&amp;quot;\n)\n\nfunc
        main() {\n    file, _ := os.Open(&amp;quot;input&amp;quot;)\n\n    var numbers
        []int\n\n    defer file.Close()\n\n    scanner := bufio.NewScanner(file)\n\n    for
        scanner.Scan() {\n        i, _ := strconv.Atoi(scanner.Text())\n        numbers
        = append(numbers, i)\n    }\n\n    for i, v := range numbers {\n        for
        j, w := range numbers[i+1:] {\n            for _, x := range numbers[j+1:]
        {\n                if v+w+x == 2020 {\n                    fmt.Println(&amp;quot;=============Found
        &amp;quot;, v, &amp;quot;+&amp;quot;, w, &amp;quot;+&amp;quot;, x, &amp;quot;=&amp;quot;,
        v+w+x, &amp;quot;==========&amp;quot;)\n                    fmt.Println(v,
        &amp;quot;*&amp;quot;, w, &amp;quot;*&amp;quot;, x, &amp;quot;=&amp;quot;,
        v*w*x)\n                    return\n                }\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8mj02/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8mj02", "created":
        1606807726.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 5, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8nhml",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "Akari_Takai",
        "can_mod_post": false, "created_utc": 1606808616.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 5, "author_fullname": "t2_gaolu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Java (217/105)**\n\nAt least it *was* (217/105) before the scores were
        wiped...\n\n[Link to my solution.](https://github.com/akaritakai/AdventOfCode2020/blob/main/src/main/java/net/akaritakai/aoc2020/Puzzle01.java)\n\nPart
        1 can be done in O(n) by constructing a frequency map of the numbers, and
        then iterating over all the numbers (i) to see if 2020-i is in the map. If
        i == 2020-i, the frequency must be at least 2.\n\nPart 2 is also known as
        the [3SUM problem] (https://en.wikipedia.org/wiki/3SUM), and it can be solved
        in at least O(n^2 ) either by using the method above; or, by eating an O(n
        lg n) sort, iterating over all the number (i, j=i+1, k=n-1) and moving j up
        if i+j+k is less than 2020, or moving k down if i+j+k is more than 2020.",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Java (217/105)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;At
        least it &lt;em&gt;was&lt;/em&gt; (217/105) before the scores were wiped...&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/akaritakai/AdventOfCode2020/blob/main/src/main/java/net/akaritakai/aoc2020/Puzzle01.java\"&gt;Link
        to my solution.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Part 1 can be done in O(n)
        by constructing a frequency map of the numbers, and then iterating over all
        the numbers (i) to see if 2020-i is in the map. If i == 2020-i, the frequency
        must be at least 2.&lt;/p&gt;\n\n&lt;p&gt;Part 2 is also known as the &lt;a
        href=\"https://en.wikipedia.org/wiki/3SUM\"&gt;3SUM problem&lt;/a&gt;, and
        it can be solved in at least O(n&lt;sup&gt;2&lt;/sup&gt; ) either by using
        the method above; or, by eating an O(n lg n) sort, iterating over all the
        number (i, j=i+1, k=n-1) and moving j up if i+j+k is less than 2020, or moving
        k down if i+j+k is more than 2020.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8nhml/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8nhml", "created": 1606808616.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 4, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "ge8pbbi", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "azzal07", "can_mod_post": false, "created_utc":
        1606810337.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 4,
        "author_fullname": "t2_3v7c4gll", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "**Awk** solution:\n\n    {
        remaining = 2020 - $0 }\n    \n    remaining in numbers { part1 = $0 * remaining
        }\n    remaining in two_sum { part2 = $0 * two_sum[remaining] }\n    \n    part1
        &amp;&amp; part2 {\n    \tprint part1\n    \tprint part2\n    \texit\n    }\n    \n    {\n    \tfor
        (k in numbers) two_sum[$0 + k] = $0 * k\n    \tnumbers[$0]\n    }", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Awk&lt;/strong&gt; solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{
        remaining = 2020 - $0 }\n\nremaining in numbers { part1 = $0 * remaining }\nremaining
        in two_sum { part2 = $0 * two_sum[remaining] }\n\npart1 &amp;amp;&amp;amp;
        part2 {\n    print part1\n    print part2\n    exit\n}\n\n{\n    for (k in
        numbers) two_sum[$0 + k] = $0 * k\n    numbers[$0]\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8pbbi/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8pbbi", "created":
        1606810337.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 4, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8sr2j",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "raevnos",
        "can_mod_post": false, "created_utc": 1606813870.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_3995k", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Chicken5 scheme, using generators to lazily calculate the combinations of
        numbers on demand. Reads numbers from stdin.\n\n    #!/usr/local/bin/csi -s\n    (require-extension
        (srfi 1)\n                       (srfi 158)\n                       (chicken
        io)\n                       (chicken format))\n    \n    ; Generate all combinations
        of length len\n    (define (generate-combinations len data)\n      (make-coroutine-generator\n       (lambda
        (yield)\n         (if (= 1 len)\n             (for-each (lambda (item) (yield
        (list item))) data)\n             (let loop ((data data))\n               (if
        (not (null? data))\n                   (let ((head (car data)))\n                     (generator-for-each\n                      yield\n                      (gmap
        (cut cons head &lt;&gt;)\n                            (generate-combinations
        (- len 1) (cdr data))))\n                     (loop (cdr data)))))))))\n    \n    (define
        (find-totals numbers goal len)\n      (generator-find (lambda (sublist) (=
        goal (apply + sublist)))\n            (generate-combinations len numbers)))\n    \n    (define
        (solve input len)\n      (let ((nums (find-totals input 2020 len)))\n        (if
        nums\n            (printf \"~A~%\" (apply * nums))\n            (printf \"No
        solution found!~%\"))))\n    \n    (define input (read-list))\n    \n    (solve
        input 2)\n    (solve input 3)", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Chicken5 scheme, using generators to lazily calculate
        the combinations of numbers on demand. Reads numbers from stdin.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/usr/local/bin/csi
        -s\n(require-extension (srfi 1)\n                   (srfi 158)\n                   (chicken
        io)\n                   (chicken format))\n\n; Generate all combinations of
        length len\n(define (generate-combinations len data)\n  (make-coroutine-generator\n   (lambda
        (yield)\n     (if (= 1 len)\n         (for-each (lambda (item) (yield (list
        item))) data)\n         (let loop ((data data))\n           (if (not (null?
        data))\n               (let ((head (car data)))\n                 (generator-for-each\n                  yield\n                  (gmap
        (cut cons head &amp;lt;&amp;gt;)\n                        (generate-combinations
        (- len 1) (cdr data))))\n                 (loop (cdr data)))))))))\n\n(define
        (find-totals numbers goal len)\n  (generator-find (lambda (sublist) (= goal
        (apply + sublist)))\n        (generate-combinations len numbers)))\n\n(define
        (solve input len)\n  (let ((nums (find-totals input 2020 len)))\n    (if nums\n        (printf
        &amp;quot;~A~%&amp;quot; (apply * nums))\n        (printf &amp;quot;No solution
        found!~%&amp;quot;))))\n\n(define input (read-list))\n\n(solve input 2)\n(solve
        input 3)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8sr2j/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8sr2j", "created":
        1606813870.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge8toqp", "id": "ge8toqp", "parent_id":
        "t1_ge8sr2j", "depth": 1, "children": ["ge8toqp"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8sub1",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ukietie",
        "can_mod_post": false, "created_utc": 1606813967.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_7a8wom4d", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Interactive solution in **Javascript**.\n\nYou can edit and run it in your
        browser - with your input.\n\n[https://starboard.gg/nb/n3Bor8N](https://starboard.gg/nb/n3Bor8N)\n\nIt''s
        a naive O(2\\^N) and O(3\\^N) solution, the input is small enough that it''s
        good enough.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Interactive
        solution in &lt;strong&gt;Javascript&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;You
        can edit and run it in your browser - with your input.&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://starboard.gg/nb/n3Bor8N\"&gt;https://starboard.gg/nb/n3Bor8N&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s
        a naive O(2^N) and O(3^N) solution, the input is small enough that it&amp;#39;s
        good enough.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8sub1/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8sub1", "created":
        1606813967.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606823520.0, "mod_reason_by": null,
        "banned_by": null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8v5vh", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": false, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        5, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_ge8v5vh", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8v5vh/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606816502.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606816502.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_ge9kaso", "id": "ge9kaso", "parent_id":
        "t1_ge8v5vh", "depth": 1, "children": ["ge9kaso"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606819796.0, "mod_reason_by": null,
        "banned_by": null, "ups": 4, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8wxzs", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "Mienaikage",
        "can_mod_post": false, "created_utc": 1606818486.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_5asq4", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# Raku\n\n    unit sub MAIN (\n      Int :$n = 2, #= Number of entries\n      --&gt;
        Nil\n    );\n    \n    ''input''.IO.slurp\n      .lines\n      .combinations($n)\n      .first(*.sum
        == 2020)\n      .reduce(* \u00d7 *)\n      .say\n    ;", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;h1&gt;Raku&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;unit sub
        MAIN (\n  Int :$n = 2, #= Number of entries\n  --&amp;gt; Nil\n);\n\n&amp;#39;input&amp;#39;.IO.slurp\n  .lines\n  .combinations($n)\n  .first(*.sum
        == 2020)\n  .reduce(* \u00d7 *)\n  .say\n;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8wxzs/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8wxzs", "created":
        1606818486.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge928sq",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "Fyver42",
        "can_mod_post": false, "created_utc": 1606824010.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_13g61von", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Common Lisp:\n\n    (defpackage :day01\n      (:use :cl :aoc-misc :trivia)\n      (:export
        main))\n    \n    (in-package :day01)\n    \n    (defun find-solution (entries
        needed &amp;optional candidates)\n      (if (zerop needed)\n        (when
        (= 2020 (reduce #''+ candidates))\n          (reduce #''* candidates))\n        (when
        entries\n            (match (find-solution (rest entries) (1- needed) (cons
        (first entries) candidates))\n              (nil (find-solution (rest entries)
        needed candidates))\n              (solution solution)))))\n    \n    (defun
        main ()\n      (let\n        ((entries (read-input-as-list 1 #''parse-integer)))\n        (dolist
        (n ''(2 3)) (print (find-solution entries n)))))", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Common Lisp:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(defpackage
        :day01\n  (:use :cl :aoc-misc :trivia)\n  (:export main))\n\n(in-package :day01)\n\n(defun
        find-solution (entries needed &amp;amp;optional candidates)\n  (if (zerop
        needed)\n    (when (= 2020 (reduce #&amp;#39;+ candidates))\n      (reduce
        #&amp;#39;* candidates))\n    (when entries\n        (match (find-solution
        (rest entries) (1- needed) (cons (first entries) candidates))\n          (nil
        (find-solution (rest entries) needed candidates))\n          (solution solution)))))\n\n(defun
        main ()\n  (let\n    ((entries (read-input-as-list 1 #&amp;#39;parse-integer)))\n    (dolist
        (n &amp;#39;(2 3)) (print (find-solution entries n)))))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge928sq/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge928sq", "created":
        1606824010.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606902251.0, "mod_reason_by": null,
        "banned_by": null, "ups": 4, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge92wg5", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "schnappischnap",
        "can_mod_post": false, "created_utc": 1606824634.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_7r0vm", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Python** ([full code](https://github.com/schnappischnap/advent_of_code_2020/blob/master/day_01_report_repair.py))\n\n    def
        part_1(data):\n        for i, j in itertools.combinations(map(int, data),
        2):\n            if i + j == 2020:\n                return i * j\n    \n    def
        part_2(data):\n        for i, j, k in itertools.combinations(map(int, data),
        3):\n            if i + j + k == 2020:\n                return i * j * k",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;
        (&lt;a href=\"https://github.com/schnappischnap/advent_of_code_2020/blob/master/day_01_report_repair.py\"&gt;full
        code&lt;/a&gt;)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def part_1(data):\n    for
        i, j in itertools.combinations(map(int, data), 2):\n        if i + j == 2020:\n            return
        i * j\n\ndef part_2(data):\n    for i, j, k in itertools.combinations(map(int,
        data), 3):\n        if i + j + k == 2020:\n            return i * j * k\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge92wg5/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge92wg5", "created":
        1606824634.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge95uga", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": false, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        3, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_ge95uga", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge95uga/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606827174.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606827174.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_gebj72t", "id": "gebj72t", "parent_id":
        "t1_ge95uga", "depth": 1, "children": ["gebj72t"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge970wr",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "Nierot",
        "can_mod_post": false, "created_utc": 1606828089.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_3u6g3cv0", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Inspired by another comment, I tried part one using Rockstar:\n\n \n\n`Let\u00a0Tommy\u00a0be\u00a0199`  \n`Let\u00a0Gina\u00a0be\u00a0199`  \n`Let\u00a0Guns\u00a0be\u00a0mysterious`  \n`Roses
        is\u00a0-1`  \n`Bon\u00a0Jovi takes your\u00a0heart and the\u00a0whole (Multiply\u00a0both\u00a0numbers)`  \n`Put\u00a0the\u00a0whole
        of your\u00a0heart\u00a0into\u00a0my\u00a0hands`  \n`Give\u00a0back\u00a0my\u00a0hands`  \n\n\n`Skid\u00a0Row
        takes Kickstart and My\u00a0heart (Sum\u00a0of\u00a0two\u00a0numbers\u00a0and\u00a0check\u00a0if\u00a0equals\u00a02020)`  \n`Let
        my\u00a0dreams\u00a0be\u00a0Kickstart with My\u00a0heart`  \n`Give\u00a0back\u00a0Mister\u00a0Crowley
        taking\u00a0My\u00a0Dreams`  \n\n\n`Mister\u00a0Crowley takes the\u00a0devil
        (Check\u00a0if\u00a02020)`  \n`Give\u00a0back\u00a0the\u00a0devil is\u00a02020`  \n\n\n`Livin
        takes your\u00a0heart (Main\u00a0function)`  \n`Until\u00a0Tommy is Roses
        (Iterator)`  \n`Let my\u00a0heart\u00a0be\u00a0the\u00a0Union\u00a0at\u00a0Tommy
        (Take\u00a0element\u00a0from\u00a0array)`  \n`Put\u00a0Docter\u00a0Feelgood
        taking my\u00a0heart\u00a0into\u00a0Live\u00a0Wire (Check\u00a0if\u00a0this\u00a0variable\u00a0is\u00a0equal\u00a0to\u00a02020)`  \n`If
        Live\u00a0Wire ain''t\u00a04\u00a0(If\u00a0not\u00a04,\u00a0for\u00a0some\u00a0reason\u00a0it\u00a0always\u00a0is\u00a04)`  \n`Give\u00a0back\u00a0Bon\u00a0Jovi
        taking Live\u00a0Wire,\u00a0and my\u00a0heart`  \n`Knock\u00a0Tommy\u00a0down
        (Tommy--)`  \n`Give\u00a0back\u00a0Guns`  \n\n\n`Docter\u00a0Feelgood takes
        your\u00a0heart (Second\u00a0iterator)`  \n`the\u00a0top were Guns (Instanciate\u00a0Home\u00a0with\u00a0mysterious)`  \n`Until\u00a0Gina
        is Roses (Iterate\u00a0over\u00a0the\u00a0puzzle\u00a0input)`  \n`Let\u00a0Devil\u00a0be\u00a0the\u00a0Union\u00a0at\u00a0Gina`  \n`If
        Skid\u00a0Row taking your\u00a0heart,\u00a0and Devil (If\u00a0sum\u00a0of\u00a0your\u00a0heart\u00a0and\u00a0iterator\u00a0equals\u00a02020)`  \n`put\u00a0Devil\u00a0into\u00a0the\u00a0top
        (Number\u00a0Found!)`  \n`Knock\u00a0Gina\u00a0down (Gina--)`  \n`Let\u00a0Gina\u00a0be\u00a0199`  \n`Give\u00a0back\u00a0the\u00a0top
        (Returns\u00a0mysterious\u00a0if\u00a0sum\u00a0is\u00a0not\u00a02020,\u00a0returns\u00a0number\u00a0if\u00a0sum\u00a0is\u00a02020)`\n\n&amp;#x200B;\n\n&amp;#x200B;\n\n`Give\u00a0back\u00a0Livin
        taking Guns`", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Inspired
        by another comment, I tried part one using Rockstar:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Let\u00a0Tommy\u00a0be\u00a0199&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;Let\u00a0Gina\u00a0be\u00a0199&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;Let\u00a0Guns\u00a0be\u00a0mysterious&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;Roses
        is\u00a0-1&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;Bon\u00a0Jovi takes your\u00a0heart
        and the\u00a0whole (Multiply\u00a0both\u00a0numbers)&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;Put\u00a0the\u00a0whole
        of your\u00a0heart\u00a0into\u00a0my\u00a0hands&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;Give\u00a0back\u00a0my\u00a0hands&lt;/code&gt;  &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Skid\u00a0Row
        takes Kickstart and My\u00a0heart (Sum\u00a0of\u00a0two\u00a0numbers\u00a0and\u00a0check\u00a0if\u00a0equals\u00a02020)&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;Let
        my\u00a0dreams\u00a0be\u00a0Kickstart with My\u00a0heart&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;Give\u00a0back\u00a0Mister\u00a0Crowley
        taking\u00a0My\u00a0Dreams&lt;/code&gt;  &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Mister\u00a0Crowley
        takes the\u00a0devil (Check\u00a0if\u00a02020)&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;Give\u00a0back\u00a0the\u00a0devil
        is\u00a02020&lt;/code&gt;  &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Livin takes
        your\u00a0heart (Main\u00a0function)&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;Until\u00a0Tommy
        is Roses (Iterator)&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;Let my\u00a0heart\u00a0be\u00a0the\u00a0Union\u00a0at\u00a0Tommy
        (Take\u00a0element\u00a0from\u00a0array)&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;Put\u00a0Docter\u00a0Feelgood
        taking my\u00a0heart\u00a0into\u00a0Live\u00a0Wire (Check\u00a0if\u00a0this\u00a0variable\u00a0is\u00a0equal\u00a0to\u00a02020)&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;If
        Live\u00a0Wire ain&amp;#39;t\u00a04\u00a0(If\u00a0not\u00a04,\u00a0for\u00a0some\u00a0reason\u00a0it\u00a0always\u00a0is\u00a04)&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;Give\u00a0back\u00a0Bon\u00a0Jovi
        taking Live\u00a0Wire,\u00a0and my\u00a0heart&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;Knock\u00a0Tommy\u00a0down
        (Tommy--)&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;Give\u00a0back\u00a0Guns&lt;/code&gt;  &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Docter\u00a0Feelgood
        takes your\u00a0heart (Second\u00a0iterator)&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;the\u00a0top
        were Guns (Instanciate\u00a0Home\u00a0with\u00a0mysterious)&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;Until\u00a0Gina
        is Roses (Iterate\u00a0over\u00a0the\u00a0puzzle\u00a0input)&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;Let\u00a0Devil\u00a0be\u00a0the\u00a0Union\u00a0at\u00a0Gina&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;If
        Skid\u00a0Row taking your\u00a0heart,\u00a0and Devil (If\u00a0sum\u00a0of\u00a0your\u00a0heart\u00a0and\u00a0iterator\u00a0equals\u00a02020)&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;put\u00a0Devil\u00a0into\u00a0the\u00a0top
        (Number\u00a0Found!)&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;Knock\u00a0Gina\u00a0down
        (Gina--)&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;Let\u00a0Gina\u00a0be\u00a0199&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;Give\u00a0back\u00a0the\u00a0top
        (Returns\u00a0mysterious\u00a0if\u00a0sum\u00a0is\u00a0not\u00a02020,\u00a0returns\u00a0number\u00a0if\u00a0sum\u00a0is\u00a02020)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Give\u00a0back\u00a0Livin
        taking Guns&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge970wr/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge970wr", "created":
        1606828089.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_gea4nqf", "id": "gea4nqf", "parent_id":
        "t1_ge970wr", "depth": 1, "children": ["gea4nqf"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606840395.0, "mod_reason_by": null,
        "banned_by": null, "ups": 5, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge98us1", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "IlliterateJedi",
        "can_mod_post": false, "created_utc": 1606829399.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 5, "author_fullname": "t2_2keby", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I''m looking forward to seeing the solution done on the IntcodeComputer.  That
        person won''t be me, but I believe someone can figure it out.\n\nPython solution:\n\n\n\n    def
        part_a(data):\n        data_set = set(data)\n        for val in data:\n            if
        2020 - val in data_set:\n                print(val * (2020 - val))\n                return\n    \n    \n    def
        part_b(data):\n        data = sorted(data)\n        dataset = set(data)\n        for
        i in data:\n            for j in data[1:]:\n                if (2020 - (i
        + j)) in dataset:\n                    print(i * j * (2020 - (i + j)))\n                    return\n    \n    \n    if
        __name__ == ''__main__'':\n        with open(r\"data\\day1.txt\", \"r\") as
        f:\n            data = [int(line.strip()) for line in f]\n        part_a(data=data)\n        part_b(data=data)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m looking
        forward to seeing the solution done on the IntcodeComputer.  That person won&amp;#39;t
        be me, but I believe someone can figure it out.&lt;/p&gt;\n\n&lt;p&gt;Python
        solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def part_a(data):\n    data_set
        = set(data)\n    for val in data:\n        if 2020 - val in data_set:\n            print(val
        * (2020 - val))\n            return\n\n\ndef part_b(data):\n    data = sorted(data)\n    dataset
        = set(data)\n    for i in data:\n        for j in data[1:]:\n            if
        (2020 - (i + j)) in dataset:\n                print(i * j * (2020 - (i + j)))\n                return\n\n\nif
        __name__ == &amp;#39;__main__&amp;#39;:\n    with open(r&amp;quot;data\\day1.txt&amp;quot;,
        &amp;quot;r&amp;quot;) as f:\n        data = [int(line.strip()) for line in
        f]\n    part_a(data=data)\n    part_b(data=data)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge98us1/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge98us1", "created":
        1606829399.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_geah14d", "id": "geah14d", "parent_id":
        "t1_ge98us1", "depth": 1, "children": ["geah14d"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 4, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9dal7",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "NicolaVV",
        "can_mod_post": false, "created_utc": 1606832237.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_3iqj6ulc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "python3\n\n    from itertools import combinations\n    from math import prod\n    \n    with
        open(''input'', ''r'') as f:\n        entries = [int(i) for i in f.read().strip().splitlines()]\n    \n    solution
        = lambda k: next( prod(comb) for comb in combinations(entries, k) if sum(comb)
        == 2020 )\n    print (solution(2), solution(3))", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;python3&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from
        itertools import combinations\nfrom math import prod\n\nwith open(&amp;#39;input&amp;#39;,
        &amp;#39;r&amp;#39;) as f:\n    entries = [int(i) for i in f.read().strip().splitlines()]\n\nsolution
        = lambda k: next( prod(comb) for comb in combinations(entries, k) if sum(comb)
        == 2020 )\nprint (solution(2), solution(3))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9dal7/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9dal7", "created":
        1606832237.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 5, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9s0ou",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "AvshalomHeironymous",
        "can_mod_post": false, "created_utc": 1606839920.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 5, "author_fullname": "t2_yiz5m", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "In Prolog.\n\nThe bang-it-out version to pass: \n\n    :- use_module(library(dcg/basics)).\n    :-
        use_module(library(lists)).\n    :- use_module(library(pio)).\n    :- use_module(library(clpfd)).\n    \n    expense([])
        --&gt; eos.\n    expense([E|EL]) --&gt; integer(E),\"\\n\", expense(EL).\n    \n    onestar
        :-\n    \tphrase_from_file(expense(Expenses),''input''),\n    \tmember(A,Expenses),\n    \tmember(B,Expenses),\n    \t2020
        #= A+B,\n    \tC #= A*B,\n    \twriteln(C).\n    \t\n    twostar :-\n    \tphrase_from_file(expense(Expenses),''input''),\n    \tmember(A,Expenses),\n    \tmember(B,Expenses),\n    \tmember(C,Expenses),\n    \t2020
        #= A+B+C,\n    \tD #= A*B*C,\n    \twriteln(D).\n\nThe slightly-uglier-and-longer-but-a-bit-more-re-usable
        version:\n\n    :- use_module(library(dcg/basics)).\n    :- use_module(library(lists)).\n    :-
        use_module(library(pio)).\n      \n    expense([]) --&gt; eos.\n    expense([E|El])
        --&gt; integer(E),\"\\n\", expense(El).\n      \n    member_(List,Elem) :-
        member(Elem,List).\n    n_sum_to(N,Sum,Superset,Items) :- \n      \tlength(Items,N),\n      \tmaplist(member_(Superset),Items),\n      \tsum_list(Items,Sum).\n    \n    mul(R,L,P)
        :- P is R*L.\n      \t\n    init :-\n     \tphrase_from_file(expense(Expenses),''input''),\n     \t\n    \tn_sum_to(2,2020,Expenses,Onestar),\n    \tfoldl(mul,Onestar,1,P1),\n    \twrite(''N
        = 2: ''),writeln(P1),\t\n    \t\n    \tn_sum_to(3,2020,Expenses,Twostar),\n    \tfoldl(mul,Twostar,1,P2),\n    \twrite(''N
        = 3: ''),writeln(P2).", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In
        Prolog.&lt;/p&gt;\n\n&lt;p&gt;The bang-it-out version to pass: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;:-
        use_module(library(dcg/basics)).\n:- use_module(library(lists)).\n:- use_module(library(pio)).\n:-
        use_module(library(clpfd)).\n\nexpense([]) --&amp;gt; eos.\nexpense([E|EL])
        --&amp;gt; integer(E),&amp;quot;\\n&amp;quot;, expense(EL).\n\nonestar :-\n    phrase_from_file(expense(Expenses),&amp;#39;input&amp;#39;),\n    member(A,Expenses),\n    member(B,Expenses),\n    2020
        #= A+B,\n    C #= A*B,\n    writeln(C).\n\ntwostar :-\n    phrase_from_file(expense(Expenses),&amp;#39;input&amp;#39;),\n    member(A,Expenses),\n    member(B,Expenses),\n    member(C,Expenses),\n    2020
        #= A+B+C,\n    D #= A*B*C,\n    writeln(D).\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The
        slightly-uglier-and-longer-but-a-bit-more-re-usable version:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;:-
        use_module(library(dcg/basics)).\n:- use_module(library(lists)).\n:- use_module(library(pio)).\n\nexpense([])
        --&amp;gt; eos.\nexpense([E|El]) --&amp;gt; integer(E),&amp;quot;\\n&amp;quot;,
        expense(El).\n\nmember_(List,Elem) :- member(Elem,List).\nn_sum_to(N,Sum,Superset,Items)
        :- \n    length(Items,N),\n    maplist(member_(Superset),Items),\n    sum_list(Items,Sum).\n\nmul(R,L,P)
        :- P is R*L.\n\ninit :-\n    phrase_from_file(expense(Expenses),&amp;#39;input&amp;#39;),\n\n    n_sum_to(2,2020,Expenses,Onestar),\n    foldl(mul,Onestar,1,P1),\n    write(&amp;#39;N
        = 2: &amp;#39;),writeln(P1),   \n\n    n_sum_to(3,2020,Expenses,Twostar),\n    foldl(mul,Twostar,1,P2),\n    write(&amp;#39;N
        = 3: &amp;#39;),writeln(P2).\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9s0ou/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge9s0ou", "created": 1606839920.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 3, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "ge9x8om", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "tftio", "can_mod_post": false, "created_utc":
        1606842421.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 3,
        "author_fullname": "t2_b2y3x", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "    -- In Postgres-dialect
        SQL:\n    \n    DROP TABLE day_01;\n    \n    BEGIN;\n    \n    CREATE TABLE
        day_01 (v INT NOT NULL UNIQUE);\n    COPY day_01 FROM ''AOC/2020/data/Day01.txt'';\n    \n    SELECT
        a.v * b.v AS day_01_part_01\n      FROM day_01 a CROSS JOIN day_01 b \n     WHERE
        a.v &lt;&gt; b.v AND a.v + b.v = 2020\n     LIMIT 1;\n    \n    SELECT a.v
        *  b.v * (2020 - a.v - b.v) AS day_01_part_02\n      FROM day_01 a CROSS JOIN
        day_01 b CROSS JOIN day_01 c\n     WHERE a.v &lt;&gt; b.v\n       AND 2020
        - a.v - b.v &gt; 0\n       AND EXISTS (SELECT 1 FROM day_01 WHERE v = 2020
        - a.v - b.v)\n    LIMIT 1;\n    \n    ROLLBACK;", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;-- In Postgres-dialect SQL:\n\nDROP
        TABLE day_01;\n\nBEGIN;\n\nCREATE TABLE day_01 (v INT NOT NULL UNIQUE);\nCOPY
        day_01 FROM &amp;#39;AOC/2020/data/Day01.txt&amp;#39;;\n\nSELECT a.v * b.v
        AS day_01_part_01\n  FROM day_01 a CROSS JOIN day_01 b \n WHERE a.v &amp;lt;&amp;gt;
        b.v AND a.v + b.v = 2020\n LIMIT 1;\n\nSELECT a.v *  b.v * (2020 - a.v - b.v)
        AS day_01_part_02\n  FROM day_01 a CROSS JOIN day_01 b CROSS JOIN day_01 c\n
        WHERE a.v &amp;lt;&amp;gt; b.v\n   AND 2020 - a.v - b.v &amp;gt; 0\n   AND
        EXISTS (SELECT 1 FROM day_01 WHERE v = 2020 - a.v - b.v)\nLIMIT 1;\n\nROLLBACK;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9x8om/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9x8om", "created":
        1606842421.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 4, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geaegmq",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "thekokirikid",
        "can_mod_post": false, "created_utc": 1606850540.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_6soa8", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My javascript solution-- would love feedback!\n\n    import { getInput, formatAnswer
        } from ''./utils.js'';\n    const TARGET_NUMBER = 2020;\n    const input =
        getInput(1);\n    \n    function part1(expenses = input, target = TARGET_NUMBER)
        {\n        const workingSet = new Set();\n        let product;\n        for
        (let expense of expenses){\n            const complement = target - expense;\n            if
        (workingSet.has(complement)) {\n                product = expense * complement;\n                break;\n            }\n            workingSet.add(expense);\n        }\n        return
        product;\n    }\n    \n    function part2(expenses = input) {\n        let
        product;\n        for (let expense of expenses){\n            const complement
        = TARGET_NUMBER - expense;\n            const result = part1(expenses, complement);\n            if
        (result) {\n                product = result * expense;\n                break;\n            }\n        }\n        return
        product;\n    }\n    \n    formatAnswer(part1(), part2());\n    \n    export
        {\n        part1,\n        part2\n    }", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;My javascript solution-- would love feedback!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        { getInput, formatAnswer } from &amp;#39;./utils.js&amp;#39;;\nconst TARGET_NUMBER
        = 2020;\nconst input = getInput(1);\n\nfunction part1(expenses = input, target
        = TARGET_NUMBER) {\n    const workingSet = new Set();\n    let product;\n    for
        (let expense of expenses){\n        const complement = target - expense;\n        if
        (workingSet.has(complement)) {\n            product = expense * complement;\n            break;\n        }\n        workingSet.add(expense);\n    }\n    return
        product;\n}\n\nfunction part2(expenses = input) {\n    let product;\n    for
        (let expense of expenses){\n        const complement = TARGET_NUMBER - expense;\n        const
        result = part1(expenses, complement);\n        if (result) {\n            product
        = result * expense;\n            break;\n        }\n    }\n    return product;\n}\n\nformatAnswer(part1(),
        part2());\n\nexport {\n    part1,\n    part2\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geaegmq/",
        "subreddit_type": "public", "locked": false, "name": "t1_geaegmq", "created":
        1606850540.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_gear6qk", "id": "gear6qk", "parent_id":
        "t1_geaegmq", "depth": 1, "children": ["gear6qk"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geafdj9",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "shandley256",
        "can_mod_post": false, "created_utc": 1606850959.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_sdubg", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Ruby Part 1\n\n&gt;input.split.map(&amp;:to\\_i).combination(2).detect {
        |tuple| tuple.sum == 2020 }.reduce(:\\*)\n\nRuby Part 2\n\n&gt;input.split.map(&amp;:to\\_i).combination(3).detect
        { |tuple| tuple.sum == 2020 }.reduce(:\\*)", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Ruby Part 1&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;input.split.map(&amp;amp;:to_i).combination(2).detect
        { |tuple| tuple.sum == 2020 }.reduce(:*)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Ruby
        Part 2&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;input.split.map(&amp;amp;:to_i).combination(3).detect
        { |tuple| tuple.sum == 2020 }.reduce(:*)&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geafdj9/",
        "subreddit_type": "public", "locked": false, "name": "t1_geafdj9", "created":
        1606850959.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606853844.0, "mod_reason_by": null,
        "banned_by": null, "ups": 4, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geaj285", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "activeXray",
        "can_mod_post": false, "created_utc": 1606852644.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_5zhp5", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "O(n) and O(n\\^2) Julia solutions. Trying to get good perf this year.\n\n\\~500ns
        on part 1, \\~6us on part 2\n\n    function solution_1(v, s)\n    \tset =
        BitSet()\n    \t@inbounds for i \u2208 1:length(v)\n    \t\trem = s - v[i]\n    \t\tif
        rem \u2208 set\n    \t\t\treturn v[i] * rem\n    \t\tend\n    \t\tpush!(set,v[i])\n    \tend\n    end\n    \n    function
        solution_2(v,s)\n    \tset = BitSet()\n    \t@inbounds for i \u2208 1:length(v)\n    \t\tfor
        j \u2208 1:i\n    \t\t\trem = s - v[i] - v[j]\n    \t\t\tif rem \u2208 set\n    \t\t\t\treturn
        v[i]*v[j]*rem\n    \t\t\tend\n    \t\tend\n    \t\tpush!(set,v[i])\n    \tend\n    end",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;O(n) and O(n^2) Julia
        solutions. Trying to get good perf this year.&lt;/p&gt;\n\n&lt;p&gt;~500ns
        on part 1, ~6us on part 2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function solution_1(v,
        s)\n    set = BitSet()\n    @inbounds for i \u2208 1:length(v)\n        rem
        = s - v[i]\n        if rem \u2208 set\n            return v[i] * rem\n        end\n        push!(set,v[i])\n    end\nend\n\nfunction
        solution_2(v,s)\n    set = BitSet()\n    @inbounds for i \u2208 1:length(v)\n        for
        j \u2208 1:i\n            rem = s - v[i] - v[j]\n            if rem \u2208
        set\n                return v[i]*v[j]*rem\n            end\n        end\n        push!(set,v[i])\n    end\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": true, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geaj285/",
        "subreddit_type": "public", "locked": false, "name": "t1_geaj285", "created":
        1606852644.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_geakuvh", "id": "geakuvh", "parent_id":
        "t1_geaj285", "depth": 1, "children": ["geakuvh"]}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geajrnx", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": false, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        4, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_geajrnx", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geajrnx/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606852973.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606852973.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 4}}, {"kind":
        "more", "data": {"count": 4, "name": "t1_ged2u5j", "id": "ged2u5j", "parent_id":
        "t1_geajrnx", "depth": 1, "children": ["ged2u5j", "geajszh"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 4, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gealkby",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "skbharman",
        "can_mod_post": false, "created_utc": 1606853823.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_381hv", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**bash**\n\nPart 1:\n\n`num=( $(cat input) ); for (( i=0; i&lt;${#num[@]};
        i++ )); do for n in ${num[@]}; do [[ $n ]] || continue; [[ $((${num[$i]} +
        ${n})) == 2020 ]] &amp;&amp; { echo \"$((${num[$i]} * ${n}))\"; break 2; };
        done; done`", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;bash&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;num=( $(cat input) ); for (( i=0; i&amp;lt;${#num[@]};
        i++ )); do for n in ${num[@]}; do [[ $n ]] || continue; [[ $((${num[$i]} +
        ${n})) == 2020 ]] &amp;amp;&amp;amp; { echo &amp;quot;$((${num[$i]} * ${n}))&amp;quot;;
        break 2; }; done; done&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gealkby/", "subreddit_type":
        "public", "locked": false, "name": "t1_gealkby", "created": 1606853823.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 3, "name":
        "t1_geareuk", "id": "geareuk", "parent_id": "t1_gealkby", "depth": 1, "children":
        ["geareuk"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 4, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geaptro", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "sweettuse",
        "can_mod_post": false, "created_utc": 1606855799.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_5gzbs", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "python 3.8, takes around 350 microseconds\n\n    data = frozenset(map(int,
        read_file(1, 2020)))\n\n\n    def part1(target=2020):\n        for n in data:\n            if
        (other := target - n) in data:\n                return n * other\n\n\n    def
        part2():\n        for n in data:\n            if (other := part1(2020 - n))
        is not None:\n                return n * other", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;python 3.8, takes around 350 microseconds&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;data
        = frozenset(map(int, read_file(1, 2020)))\n\n\ndef part1(target=2020):\n    for
        n in data:\n        if (other := target - n) in data:\n            return
        n * other\n\n\ndef part2():\n    for n in data:\n        if (other := part1(2020
        - n)) is not None:\n            return n * other\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geaptro/",
        "subreddit_type": "public", "locked": false, "name": "t1_geaptro", "created":
        1606855799.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 11, "name": "t1_geaqaa7", "id": "geaqaa7", "parent_id":
        "t1_geaptro", "depth": 1, "children": ["geaqaa7", "gebcqy4", "geatxuk"]}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geaqlo1", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "chemicalwill",
        "can_mod_post": false, "created_utc": 1606856158.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_ba54x", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Relatively new to Python and coding in general but I''m pretty happy with
        this one.\n\n    #! python3\n    \n    \n    def part_one(y, data):\n        for
        i in data:\n            d = y - i\n            if d in data:\n                return
        i * d\n    \n    \n    def part_two(y, data):\n        for i, j in enumerate(data):\n            r1
        = y - j\n            sub1 = data[i+1:]\n            for idx, k in enumerate(sub1):\n                l
        = r1 - k\n                sub2 = sub1[idx+1:]\n                if l in sub2:\n                    return
        j * k * l\n\n\n    with open(''input.txt'') as infile:\n        expense_lst
        = [int(line.strip()) for line in infile.readlines()]\n\n    print(part_one(2020,
        expense_lst))\n    print(part_two(2020, expense_lst))", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Relatively new to Python and coding in general but
        I&amp;#39;m pretty happy with this one.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!
        python3\n\n\ndef part_one(y, data):\n    for i in data:\n        d = y - i\n        if
        d in data:\n            return i * d\n\n\ndef part_two(y, data):\n    for
        i, j in enumerate(data):\n        r1 = y - j\n        sub1 = data[i+1:]\n        for
        idx, k in enumerate(sub1):\n            l = r1 - k\n            sub2 = sub1[idx+1:]\n            if
        l in sub2:\n                return j * k * l\n\n\nwith open(&amp;#39;input.txt&amp;#39;)
        as infile:\n    expense_lst = [int(line.strip()) for line in infile.readlines()]\n\nprint(part_one(2020,
        expense_lst))\nprint(part_two(2020, expense_lst))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geaqlo1/",
        "subreddit_type": "public", "locked": false, "name": "t1_geaqlo1", "created":
        1606856158.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606859588.0, "mod_reason_by": null,
        "banned_by": null, "ups": 4, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geat0j3", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "LiquidProgrammer",
        "can_mod_post": false, "created_utc": 1606857305.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_rqb3w", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python codegolfed 3.8 solution including input (no imports) for part 1\n\n```python\ni=[*map(int,iter(input,''''))];print(*(a*b
        for a in i if(b:=2020-a)in{*i}))\n```\n\nSuggestions for shortening welcome",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python codegolfed 3.8
        solution including input (no imports) for part 1&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;python\ni=[*map(int,iter(input,&amp;#39;&amp;#39;))];print(*(a*b
        for a in i if(b:=2020-a)in{*i}))\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Suggestions
        for shortening welcome&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geat0j3/",
        "subreddit_type": "public", "locked": false, "name": "t1_geat0j3", "created":
        1606857305.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geavhwk", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        5, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "In Crystal:\n\n    puts File.read_lines(\"input.txt\")\n      .map(&amp;.to_i)\n      .each_permutation(2)\n      .find
        { |array| array.sum == 2020 }\n      .not_nil!\n      .product\n\nFor part
        2 replace the `2` with a `3`.", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_geavhwk", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;In Crystal:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;puts
        File.read_lines(&amp;quot;input.txt&amp;quot;)\n  .map(&amp;amp;.to_i)\n  .each_permutation(2)\n  .find
        { |array| array.sum == 2020 }\n  .not_nil!\n  .product\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For
        part 2 replace the &lt;code&gt;2&lt;/code&gt; with a &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geavhwk/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606858494.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606858494.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 5}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606865651.0, "mod_reason_by": null,
        "banned_by": null, "ups": 4, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geb9e3q", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "mdervin",
        "can_mod_post": false, "created_utc": 1606865376.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_oxdb0", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**POWERSHELL** \n\nOn an 8 year old workstation, this runs in under 370 Milliseconds
        (measure-command) \nI usually like to break the various operations unto their
        own variable, it just looks cleaner and easier to follow for me, but I saw
        somebody post their times and I focused on that. \n\n\n        Remove-Variable
        * -ErrorAction SilentlyContinue\n        measure-command {   \n    $MyData
        = (Import-csv C:\\PowerShell\\AventOfCode\\Day1.csv -Header \"expense\").expense
        #| Sort -Descending \n    $MyData = ([int[]]$MyData | Sort -Descending)\n         $mindata
        = (2020 - ($MyData[-1]+$MyData[-2]) ) \n         $newdata = ($MyData | Where-Object
        {$_ -le $mindata} ) \n    \n    foreach ( $i in $newdata) { \n          $firstValue
        = (2020 - $i)\n          $moredata = ($newdata | Where-Object {$_ -le $firstvalue}
        ) \n             foreach ($q in $moredata) { \n                  $tripValue
        = (2020 - ($i + $q)) \n                     if ($mydata.Contains(2020 - ($i
        + $q))) {WRite-host ($tripvalue*$i*$q)\n                                    return}
        } \n            } \n            }", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;POWERSHELL&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;On
        an 8 year old workstation, this runs in under 370 Milliseconds (measure-command)
        \nI usually like to break the various operations unto their own variable,
        it just looks cleaner and easier to follow for me, but I saw somebody post
        their times and I focused on that. &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    Remove-Variable
        * -ErrorAction SilentlyContinue\n    measure-command {   \n$MyData = (Import-csv
        C:\\PowerShell\\AventOfCode\\Day1.csv -Header &amp;quot;expense&amp;quot;).expense
        #| Sort -Descending \n$MyData = ([int[]]$MyData | Sort -Descending)\n     $mindata
        = (2020 - ($MyData[-1]+$MyData[-2]) ) \n     $newdata = ($MyData | Where-Object
        {$_ -le $mindata} ) \n\nforeach ( $i in $newdata) { \n      $firstValue =
        (2020 - $i)\n      $moredata = ($newdata | Where-Object {$_ -le $firstvalue}
        ) \n         foreach ($q in $moredata) { \n              $tripValue = (2020
        - ($i + $q)) \n                 if ($mydata.Contains(2020 - ($i + $q))) {WRite-host
        ($tripvalue*$i*$q)\n                                return} } \n        }
        \n        }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb9e3q/",
        "subreddit_type": "public", "locked": false, "name": "t1_geb9e3q", "created":
        1606865376.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 4, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geb9x0t",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "trebuszek",
        "can_mod_post": false, "created_utc": 1606865657.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_413mr", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "quick and dirty python 3 solution:\n\n    for i, numA in enumerate(nums):\n        for
        j, numB in enumerate(nums[i:]):\n            for k, numC in enumerate(nums[j:]):\n                if
        numA + numB + numC == 2020:\n                    print(numA * numB * numC)\n                    break",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;quick and dirty python
        3 solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for i, numA in enumerate(nums):\n    for
        j, numB in enumerate(nums[i:]):\n        for k, numC in enumerate(nums[j:]):\n            if
        numA + numB + numC == 2020:\n                print(numA * numB * numC)\n                break\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb9x0t/",
        "subreddit_type": "public", "locked": false, "name": "t1_geb9x0t", "created":
        1606865657.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 5, "name": "t1_gebccf6", "id": "gebccf6", "parent_id":
        "t1_geb9x0t", "depth": 1, "children": ["gebccf6", "gebw1lx", "gebfjg1"]}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": 1606870672.0,
        "mod_reason_by": null, "banned_by": null, "ups": 4, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gebhkq4", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "andrewlapp",
        "can_mod_post": false, "created_utc": 1606869885.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_q8oqoi9", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Here is my overly complicated O(N log(N*M)) solution to problem 2. Really
        proud I got it below quadratic though.\n\nPlease excuse the code quality,
        lots of this can definitely be improved, just wanted to get this working.\n\n    \"\"\"\n    ANALYSIS:\n    For
        M=48 or b(1, 1, 0, 0, 0, 0), we know\n    - one of the values must 17 or higher
        (this isn''t super useful for large M values)\n    - either 0 or 2 rightmost
        bits must be 1\n      - if 2 of the rightmost bits are odd (1), it carries
        over, therefore 1 or 3 of the 2nd sig bit must be 1\n      - else, return
        to parent condition\n\n    Therefore, we need an algorithm and data structure
        which can efficiently discover compatible \"bit memberships\"\n\n    Further,
        we need to consider the inefficient case where N is very close to M, because
        this means we will have to perform many \"carry over\" operations\n    \"\"\"\n\n    LOOKING_FOR
        = 1280000\n    FILE_NAME = f''2020_12_01_{LOOKING_FOR}.txt''\n    \"\"\"\n    solutions\n    8000:
        606 * 1000  * 6394\n    16000: 4081 * 11219 * 700\n    1280000: 55294 * 225281
        * 999425\n    \"\"\"\n\n    import itertools\n    import collections\n    import
        math\n\n    import time\n    start = time.time()\n\n\n    SequenceAddition
        = collections.namedtuple(''SequenceAddition'', [''seq'', ''carry_over''])\n\n\n    class
        LookupTable:\n        def __init__(self, count=0, child=None, parent=None):\n            self.count
        = count\n            self.child = child\n            self.parent = parent\n\n        def
        __getitem__(self, item):\n            return self.child[item]\n\n        def
        __setitem__(self, item, value):\n            self.child[item] = value\n\n        def
        __repr__(self):\n            return f''{self.count}, {self.child}''\n\n\n    def
        bitfield(n, num_bits=int(math.log(LOOKING_FOR, 2)) + 2):\n        out = [0]
        * num_bits\n        x = [int(digit) for digit in bin(n)[2:]]  # [2:] to chop
        off the \"0b\" part\n        out[-len(x):] = x\n        return out\n\n\n    def
        update_lookup_table(table, keys, value):\n        curr_table = table\n        parent_table
        = None\n        for k in keys:\n            curr_table.count += 1\n\n            if
        curr_table.child is None:\n                curr_table.child = {}\n\n            if
        k not in curr_table.child:\n                curr_table.child[k] = LookupTable(parent=parent_table)\n\n            parent_table
        = curr_table\n            curr_table = curr_table.child[k]\n\n        parent_table.child[k]
        = value\n\n        return table\n\n\n    # populate lookup table O(N log M)\n    reverse_bits_lookup_table
        = LookupTable(0, {}, None)\n    lines = list(sorted(map(int, open(FILE_NAME).readlines())))\n    for
        line in lines:\n        update_lookup_table(reverse_bits_lookup_table, reversed(bitfield(line)),
        line)\n\n\n    def is_valid_sequence(sequence):\n        # transpose\n        sequences
        = zip(*sequence)\n        for sequence, count in collections.Counter(sequences).items():\n            subtable
        = reverse_bits_lookup_table\n            for key in sequence:\n                try:\n                    subtable
        = subtable.child[key]\n                except KeyError:\n                    return
        False\n            if isinstance(subtable, int):\n                continue\n            if
        subtable.count &lt; count:\n                return False\n        return True\n\n\n    def
        get_valid_bit_sequences(possible_sequences, bits, carry_over, bit_idx=0):\n        \"\"\"\n        sequence
        validation looks at the bitfield of all possible bit sequences in reverse
        order (least sig bit first)\n        and eliminates impossible bit sequences
        along the way\n\n        simple sequence spec: [ [1, 1, 0], [1, 0, 0] ] indicates
        we must check the viability of the following permutations\n        - option
        0: [(x0=1, x1=1, x2=0), (x0=1, x1=0, x2=0)]\n        - option 1: [(x0=1, x1=1,
        x2=0), (x1=0, x2=1, x3=0)]\n        - option 2: [(x0=1, x1=1, x2=0), (x1=0,
        x2=0, x3=1)]\n        - option 3: [(x0=0, x1=1, x2=1), (x1=1, x2=0, x3=0)]\n        -
        option 4: [(x0=0, x1=1, x2=1), (x1=0, x2=1, x3=0)]\n        - option 5: [(x0=0,
        x1=1, x2=1), (x1=0, x2=0, x3=1)]\n        - option 6: [(x0=1, x1=0, x2=1),
        (x1=1, x2=0, x3=0)]\n        - option 7: [(x0=1, x1=0, x2=1), (x1=0, x2=1,
        x3=0)]\n        - option 8: [(x0=1, x1=0, x2=1), (x1=0, x2=0, x3=1)]\n\n        when
        a new SequenceAddition is applied, a depth first search is applied to seek
        valid matching sequences\n        \"\"\"\n        if bit_idx &gt;= len(bits):\n            return
        possible_sequences\n        bit = bits[bit_idx]\n\n        # add new possible
        bit sequences\n        # this if block could be a lot simpler and more idiomatic....\n        if
        bit == 0:\n            if carry_over == 0:\n                seq_append = [\n                    SequenceAddition(seq=[1,
        1, 0], carry_over=1),\n                    SequenceAddition(seq=[0, 0, 0],
        carry_over=0),\n                ]\n            elif carry_over == 1:\n                seq_append
        = [\n                    SequenceAddition(seq=[1, 0, 0], carry_over=1),\n                    SequenceAddition(seq=[1,
        1, 1], carry_over=2),\n                ]\n            elif carry_over == 2:\n                seq_append
        = [\n                    SequenceAddition(seq=[0, 0, 0], carry_over=1),\n                    SequenceAddition(seq=[1,
        1, 0], carry_over=2),\n                ]\n            else:\n                raise
        ValueError()\n\n        elif bit == 1:\n            if carry_over == 0:\n                seq_append
        = [\n                    SequenceAddition(seq=[1, 0, 0], carry_over=0),\n                    SequenceAddition(seq=[1,
        1, 1], carry_over=1),\n                ]\n            elif carry_over == 1:\n                seq_append
        = [\n                    SequenceAddition(seq=[0, 0, 0], carry_over=0),\n                    SequenceAddition(seq=[1,
        1, 0], carry_over=1),\n                ]\n            elif carry_over == 2:\n                seq_append
        = [\n                    SequenceAddition(seq=[1, 0, 0], carry_over=1),\n                    SequenceAddition(seq=[1,
        1, 1], carry_over=2),\n                ]\n            else:\n                raise
        ValueError()\n\n        else:\n            raise ValueError()\n\n        #
        eliminate invalid bit sequences, append valid bit sequences\n        for seq_group
        in seq_append:\n            seq_permutations = set([SequenceAddition(seq=x,
        carry_over=seq_group.carry_over) for x in itertools.permutations(seq_group.seq)])\n            for
        new_sequence_atom in seq_permutations:\n\n                # add to new_possible_sequences
        in cases where any old possible sequence + the added new_sequence_atom is
        valid\n                new_sequence = possible_sequences + [new_sequence_atom.seq]\n\n                #
        hack\n                if new_sequence[0] == []:\n                    new_sequence
        = new_sequence[1:]\n\n                if is_valid_sequence(new_sequence):\n                    found_valid_sequences
        = get_valid_bit_sequences(new_sequence, bits, new_sequence_atom.carry_over,
        bit_idx + 1)\n                    if found_valid_sequences:\n                        return
        found_valid_sequences\n\n\n    sequences = get_valid_bit_sequences(\n        [[]],  #
        root of search tree is empty sequence\n        list(reversed(bitfield(LOOKING_FOR))),  #
        iterate backwards over bitfield\n        0  # no carry over for first bit\n    )\n\n    #
        convert binary to integer\n    x0, x1, x2 = 0, 0, 0\n    for i, (bit0, bit1,
        bit2) in enumerate(sequences):\n        x0 += bit0 * 2**i\n        x1 += bit1
        * 2**i\n        x2 += bit2 * 2**i\n\n\n    print((x0, x1, x2), x0 * x1 * x2)\n    print(time.time()
        - start)", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here
        is my overly complicated O(N log(N*M)) solution to problem 2. Really proud
        I got it below quadratic though.&lt;/p&gt;\n\n&lt;p&gt;Please excuse the code
        quality, lots of this can definitely be improved, just wanted to get this
        working.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;\nANALYSIS:\nFor
        M=48 or b(1, 1, 0, 0, 0, 0), we know\n- one of the values must 17 or higher
        (this isn&amp;#39;t super useful for large M values)\n- either 0 or 2 rightmost
        bits must be 1\n  - if 2 of the rightmost bits are odd (1), it carries over,
        therefore 1 or 3 of the 2nd sig bit must be 1\n  - else, return to parent
        condition\n\nTherefore, we need an algorithm and data structure which can
        efficiently discover compatible &amp;quot;bit memberships&amp;quot;\n\nFurther,
        we need to consider the inefficient case where N is very close to M, because
        this means we will have to perform many &amp;quot;carry over&amp;quot; operations\n&amp;quot;&amp;quot;&amp;quot;\n\nLOOKING_FOR
        = 1280000\nFILE_NAME = f&amp;#39;2020_12_01_{LOOKING_FOR}.txt&amp;#39;\n&amp;quot;&amp;quot;&amp;quot;\nsolutions\n8000:
        606 * 1000  * 6394\n16000: 4081 * 11219 * 700\n1280000: 55294 * 225281 * 999425\n&amp;quot;&amp;quot;&amp;quot;\n\nimport
        itertools\nimport collections\nimport math\n\nimport time\nstart = time.time()\n\n\nSequenceAddition
        = collections.namedtuple(&amp;#39;SequenceAddition&amp;#39;, [&amp;#39;seq&amp;#39;,
        &amp;#39;carry_over&amp;#39;])\n\n\nclass LookupTable:\n    def __init__(self,
        count=0, child=None, parent=None):\n        self.count = count\n        self.child
        = child\n        self.parent = parent\n\n    def __getitem__(self, item):\n        return
        self.child[item]\n\n    def __setitem__(self, item, value):\n        self.child[item]
        = value\n\n    def __repr__(self):\n        return f&amp;#39;{self.count},
        {self.child}&amp;#39;\n\n\ndef bitfield(n, num_bits=int(math.log(LOOKING_FOR,
        2)) + 2):\n    out = [0] * num_bits\n    x = [int(digit) for digit in bin(n)[2:]]  #
        [2:] to chop off the &amp;quot;0b&amp;quot; part\n    out[-len(x):] = x\n    return
        out\n\n\ndef update_lookup_table(table, keys, value):\n    curr_table = table\n    parent_table
        = None\n    for k in keys:\n        curr_table.count += 1\n\n        if curr_table.child
        is None:\n            curr_table.child = {}\n\n        if k not in curr_table.child:\n            curr_table.child[k]
        = LookupTable(parent=parent_table)\n\n        parent_table = curr_table\n        curr_table
        = curr_table.child[k]\n\n    parent_table.child[k] = value\n\n    return table\n\n\n#
        populate lookup table O(N log M)\nreverse_bits_lookup_table = LookupTable(0,
        {}, None)\nlines = list(sorted(map(int, open(FILE_NAME).readlines())))\nfor
        line in lines:\n    update_lookup_table(reverse_bits_lookup_table, reversed(bitfield(line)),
        line)\n\n\ndef is_valid_sequence(sequence):\n    # transpose\n    sequences
        = zip(*sequence)\n    for sequence, count in collections.Counter(sequences).items():\n        subtable
        = reverse_bits_lookup_table\n        for key in sequence:\n            try:\n                subtable
        = subtable.child[key]\n            except KeyError:\n                return
        False\n        if isinstance(subtable, int):\n            continue\n        if
        subtable.count &amp;lt; count:\n            return False\n    return True\n\n\ndef
        get_valid_bit_sequences(possible_sequences, bits, carry_over, bit_idx=0):\n    &amp;quot;&amp;quot;&amp;quot;\n    sequence
        validation looks at the bitfield of all possible bit sequences in reverse
        order (least sig bit first)\n    and eliminates impossible bit sequences along
        the way\n\n    simple sequence spec: [ [1, 1, 0], [1, 0, 0] ] indicates we
        must check the viability of the following permutations\n    - option 0: [(x0=1,
        x1=1, x2=0), (x0=1, x1=0, x2=0)]\n    - option 1: [(x0=1, x1=1, x2=0), (x1=0,
        x2=1, x3=0)]\n    - option 2: [(x0=1, x1=1, x2=0), (x1=0, x2=0, x3=1)]\n    -
        option 3: [(x0=0, x1=1, x2=1), (x1=1, x2=0, x3=0)]\n    - option 4: [(x0=0,
        x1=1, x2=1), (x1=0, x2=1, x3=0)]\n    - option 5: [(x0=0, x1=1, x2=1), (x1=0,
        x2=0, x3=1)]\n    - option 6: [(x0=1, x1=0, x2=1), (x1=1, x2=0, x3=0)]\n    -
        option 7: [(x0=1, x1=0, x2=1), (x1=0, x2=1, x3=0)]\n    - option 8: [(x0=1,
        x1=0, x2=1), (x1=0, x2=0, x3=1)]\n\n    when a new SequenceAddition is applied,
        a depth first search is applied to seek valid matching sequences\n    &amp;quot;&amp;quot;&amp;quot;\n    if
        bit_idx &amp;gt;= len(bits):\n        return possible_sequences\n    bit =
        bits[bit_idx]\n\n    # add new possible bit sequences\n    # this if block
        could be a lot simpler and more idiomatic....\n    if bit == 0:\n        if
        carry_over == 0:\n            seq_append = [\n                SequenceAddition(seq=[1,
        1, 0], carry_over=1),\n                SequenceAddition(seq=[0, 0, 0], carry_over=0),\n            ]\n        elif
        carry_over == 1:\n            seq_append = [\n                SequenceAddition(seq=[1,
        0, 0], carry_over=1),\n                SequenceAddition(seq=[1, 1, 1], carry_over=2),\n            ]\n        elif
        carry_over == 2:\n            seq_append = [\n                SequenceAddition(seq=[0,
        0, 0], carry_over=1),\n                SequenceAddition(seq=[1, 1, 0], carry_over=2),\n            ]\n        else:\n            raise
        ValueError()\n\n    elif bit == 1:\n        if carry_over == 0:\n            seq_append
        = [\n                SequenceAddition(seq=[1, 0, 0], carry_over=0),\n                SequenceAddition(seq=[1,
        1, 1], carry_over=1),\n            ]\n        elif carry_over == 1:\n            seq_append
        = [\n                SequenceAddition(seq=[0, 0, 0], carry_over=0),\n                SequenceAddition(seq=[1,
        1, 0], carry_over=1),\n            ]\n        elif carry_over == 2:\n            seq_append
        = [\n                SequenceAddition(seq=[1, 0, 0], carry_over=1),\n                SequenceAddition(seq=[1,
        1, 1], carry_over=2),\n            ]\n        else:\n            raise ValueError()\n\n    else:\n        raise
        ValueError()\n\n    # eliminate invalid bit sequences, append valid bit sequences\n    for
        seq_group in seq_append:\n        seq_permutations = set([SequenceAddition(seq=x,
        carry_over=seq_group.carry_over) for x in itertools.permutations(seq_group.seq)])\n        for
        new_sequence_atom in seq_permutations:\n\n            # add to new_possible_sequences
        in cases where any old possible sequence + the added new_sequence_atom is
        valid\n            new_sequence = possible_sequences + [new_sequence_atom.seq]\n\n            #
        hack\n            if new_sequence[0] == []:\n                new_sequence
        = new_sequence[1:]\n\n            if is_valid_sequence(new_sequence):\n                found_valid_sequences
        = get_valid_bit_sequences(new_sequence, bits, new_sequence_atom.carry_over,
        bit_idx + 1)\n                if found_valid_sequences:\n                    return
        found_valid_sequences\n\n\nsequences = get_valid_bit_sequences(\n    [[]],  #
        root of search tree is empty sequence\n    list(reversed(bitfield(LOOKING_FOR))),  #
        iterate backwards over bitfield\n    0  # no carry over for first bit\n)\n\n#
        convert binary to integer\nx0, x1, x2 = 0, 0, 0\nfor i, (bit0, bit1, bit2)
        in enumerate(sequences):\n    x0 += bit0 * 2**i\n    x1 += bit1 * 2**i\n    x2
        += bit2 * 2**i\n\n\nprint((x0, x1, x2), x0 * x1 * x2)\nprint(time.time() -
        start)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebhkq4/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebhkq4", "created":
        1606869885.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_gebhlq5", "id": "gebhlq5", "parent_id":
        "t1_gebhkq4", "depth": 1, "children": ["gebhlq5"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606872526.0, "mod_reason_by": null,
        "banned_by": null, "ups": 5, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gebkcl1", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "glaso95",
        "can_mod_post": false, "created_utc": 1606871420.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 5, "author_fullname": "t2_u51zivv", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "[AdventOfCode/Day1 at main \u00b7 glaso95/AdventOfCode (github.com)](https://github.com/glaso95/AdventOfCode/tree/main/Day1)\n\nHi
        all... here''s my solution.\n\nWritten in FORTRAN 77", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/glaso95/AdventOfCode/tree/main/Day1\"&gt;AdventOfCode/Day1
        at main \u00b7 glaso95/AdventOfCode (github.com)&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Hi
        all... here&amp;#39;s my solution.&lt;/p&gt;\n\n&lt;p&gt;Written in FORTRAN
        77&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason": null,
        "associated_award": null, "stickied": false, "author_premium": false, "can_gild":
        false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebkcl1/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebkcl1", "created":
        1606871420.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_gebm7nn", "id": "gebm7nn", "parent_id":
        "t1_gebkcl1", "depth": 1, "children": ["gebm7nn"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 4, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gec66m6",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "rtndeep9",
        "can_mod_post": false, "created_utc": 1606883943.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_t3alf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Python**\n\nMy first time competing in this event!\n\nPart 1\n\n    f\u00a0=\u00a0open(\"input.txt\",\"r\")\n    nums\u00a0=\u00a0[int(i)\u00a0for\u00a0i\u00a0in\u00a0f.readlines()]\n    target\u00a0=\u00a02020\n    for\u00a0num\u00a0in\u00a0nums:\n        if\u00a0target\u00a0-\u00a0num\u00a0in\u00a0nums:\n            print(num\u00a0*\u00a0(target\u00a0-\u00a0num))\n            break\n\nPart
        2\n\n    f = open(\"input.txt\",\"r\")\n    nums = [int(i) for i in f.readlines()]\n    nums.sort()\n    i
        = 0\n    while i &lt; len(nums) - 2:\n        j = i + 1\n        k = len(nums)
        - 1\n        while j &lt; k:\n            sum = nums[i] + nums[j] + nums[k]\n            if
        sum == 2020:\n                print(nums[i],nums[j],nums[k])\n                print(nums[i]
        * nums[j] * nums[k])\n                break\n            elif sum &gt; 2020:\n                k
        -= 1\n            else:\n                j += 1\n        i += 1", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;My
        first time competing in this event!&lt;/p&gt;\n\n&lt;p&gt;Part 1&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;f\u00a0=\u00a0open(&amp;quot;input.txt&amp;quot;,&amp;quot;r&amp;quot;)\nnums\u00a0=\u00a0[int(i)\u00a0for\u00a0i\u00a0in\u00a0f.readlines()]\ntarget\u00a0=\u00a02020\nfor\u00a0num\u00a0in\u00a0nums:\n    if\u00a0target\u00a0-\u00a0num\u00a0in\u00a0nums:\n        print(num\u00a0*\u00a0(target\u00a0-\u00a0num))\n        break\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;f = open(&amp;quot;input.txt&amp;quot;,&amp;quot;r&amp;quot;)\nnums
        = [int(i) for i in f.readlines()]\nnums.sort()\ni = 0\nwhile i &amp;lt; len(nums)
        - 2:\n    j = i + 1\n    k = len(nums) - 1\n    while j &amp;lt; k:\n        sum
        = nums[i] + nums[j] + nums[k]\n        if sum == 2020:\n            print(nums[i],nums[j],nums[k])\n            print(nums[i]
        * nums[j] * nums[k])\n            break\n        elif sum &amp;gt; 2020:\n            k
        -= 1\n        else:\n            j += 1\n    i += 1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gec66m6/",
        "subreddit_type": "public", "locked": false, "name": "t1_gec66m6", "created":
        1606883943.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 4, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gec6ysm",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "aafw",
        "can_mod_post": false, "created_utc": 1606884449.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_26d1q4cd", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Simple awk solution\n\n    #!/bin/awk -f\n    {\n            for (i = 1;
        i &lt;= NF; i++) {\n                    array[$i] = $i\n            }\n    \n    }\n    END
        {\n            for (x in array) {\n                    for (y in array) {\n                            for
        (z in array) {\n                                    if (x +y + z == 2020)
        {\n                                            print x*y*z\n                                            }\n                                    }\n    \n                            }\n                    }\n    }\n    \n    ~                                                                                                                       ~                                                                                                                       ~                                                                                                                       ~                                                                                                                       ~",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Simple awk solution&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/bin/awk
        -f\n{\n        for (i = 1; i &amp;lt;= NF; i++) {\n                array[$i]
        = $i\n        }\n\n}\nEND {\n        for (x in array) {\n                for
        (y in array) {\n                        for (z in array) {\n                                if
        (x +y + z == 2020) {\n                                        print x*y*z\n                                        }\n                                }\n\n                        }\n                }\n}\n\n~                                                                                                                       ~                                                                                                                       ~                                                                                                                       ~                                                                                                                       ~\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gec6ysm/",
        "subreddit_type": "public", "locked": false, "name": "t1_gec6ysm", "created":
        1606884449.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606921302.0, "mod_reason_by": null,
        "banned_by": null, "ups": 4, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gec7khr", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "rosso412",
        "can_mod_post": false, "created_utc": 1606884851.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_15oqmyqz", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Part 2:\n\nThis took almost 2 hours to find the right answer, ... \n\n &amp;#x200B;\n\n&amp;#x200B;\n\n    .data\n\n\tList:
        .asciiz \"/home/user/Assembly/AdventOfCode/AdventOfCodeInput-1.12.20.txt\"\n\n\tListspacein:
        .space 1300\n\n\tListspacewo: .space 1300\n\n    .text\n\n    \\#select file\n\n    select:\n\n\tli
        $v0, 13\n\n\tla $a0, List\n\n\tli $a1, 0\n\n\tsyscall\n\n\tmove $s0, $v0\n\n    \\#read
        file + save to space\n\n    read:\n\n\tli $v0, 14\n\n\tmove $a0, $s0\n\n\tla
        $a1, Listspacein\n\n\tla $a2, 4096\n\n\tsyscall\n\n    \\#close file \n\n    close:\n\n\tli
        $v0, 16\n\n\tmove $a0, $s0\n\n\tsyscall\n\n    \\#remove \\\\n &amp; \\\\r\n\n\tla
        $t0, Listspacein \n\n\tla $t9, Listspacewo\n\n\tli $t2, 0\n\n    startfilter:\n\n\tlb
        $t1, ($t0)\n\n\tbeq $t1, 10, sas\n\n\tbeq $t1, 13, sas\n\n\tbeq $t0, 268502264,
        sas\n\n\tadd $t2, $t2, 1\n\n\tadd $t0, $t0, 1\n\n\tbgtu $t0, 268502266, ffilter\n\n\tj
        startfilter\n\n    sas:\n\n\tbne $t2, 3, sasloop\n\n\tli $t4,0\n\n\tsb $t4,
        ($t9)\n\n\tadd $t9, $t9, 1\n\n    sasloop:\n\n\tli $t4, 0\n\n\tsub $t3, $t0,
        $t2\n\n\tlb $t4, ($t3)\n\n\tsub $t4, $t4, 48\n\n\tsb $t4, ($t9)\n\n\tadd $t9,
        $t9, 1\n\n\tsub $t2, $t2, 1\n\n\tbeq $t2, 0, sasloopend\n\n\tj sasloop\n\n    sasloopend:\n\n\tadd
        $t0, $t0, 2\n\n\tbeq $t0, 268502266, ffilter\n\n\tj startfilter\n\n    ffilter:\n\n    \\#makesingle
        numbers\n\n\tla $t0, Listspacein\n\n\tli $t1, 0\n\n    emptyListspacein:\n\n\tsw
        $zero, ($t0)\n\n\tadd $t0, $t0, 4\n\n\tadd $t1, $t1, 4\n\n\tbeq $t1, 1300,
        Listspaceinempty\n\n\tj emptyListspacein\n\n    Listspaceinempty:\n\n\tla
        $t0, Listspacein\n\n\tsub $t9, $t9, 1\n\n\tli $t1,0\n\n\tli $t2,0\n\n\tli
        $t3,0\n\n\tli $t4,0\n\n    startmsnloop:\n\n\tlb $t1, ($t9)\n\n\tlb $t2, -1($t9)\n\n\tmul
        $t2, $t2, 10\n\n\tlb $t3, -2($t9)\n\n\tmul $t3, $t3, 100\n\n\tlb $t4, -3($t9)\n\n\tmul
        $t4, $t4, 1000\n\n\tadd $t1, $t1, $t2\n\n\tadd $t1, $t1, $t3\n\n\tadd $t1,
        $t1, $t4\n\n\tsw $t1, ($t0)\n\n\tsub $t9, $t9, 4\n\n\tadd $t0, $t0, 4\n\n\tla
        $t1, Listspacewo\n\n\tbgt $t1, $t9, msnloopend\n\n\tj startmsnloop\n\n    msnloopend:\n\n    \\#(find
        x+y+z=2020) &amp; (mul x &amp; y &amp; z)\n\n\tla $t0, Listspacein\n\n\tmove
        $t7, $t0\n\n    wtt0:\n\n\tlw $t1, ($t0)\n\n\tadd $t9, $t7, $zero\n\n    wtt9:\n\n\tlw
        $t2, ($t9)\n\n\tadd $t8, $t7, $zero\n\n    wtt8:\n\n\tlw $t3, ($t8)\n\n\tadd
        $t4, $t3, $t2\n\n\tadd $t4, $t4, $t1\n\n\tbeq $t4, 2020, eq2020\n\n\tadd $t8,
        $t8, 4\n\n\tbeq $t3, 0, inct9\n\n\tj wtt8\n\n    inct9:\n\n\tadd $t9, $t9,
        4\n\n\tbeq $t2, 0, inct0\n\n\tj wtt9\n\n    inct0:\n\n\tadd $t0, $t0, 4\n\n\tbeq
        $t1, 0, end\n\n\tj wtt0\n\n    eq2020:\n\n\tmul $t4, $t3, $t2\n\n\tmul $t4,
        $t4, $t1\n\n    \\#print\n\n    print:\n\n\tmove $a0, $t4\n\n\tli $v0, 1\n\n\tsyscall\n\n    \\#end\n\n    end:\n\n\tli
        $v0, 10\n\n\tsyscall\\`", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;p&gt;This took almost 2 hours to find the right answer,
        ... &lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;.data\n\nList:
        .asciiz &amp;quot;/home/user/Assembly/AdventOfCode/AdventOfCodeInput-1.12.20.txt&amp;quot;\n\nListspacein:
        .space 1300\n\nListspacewo: .space 1300\n\n.text\n\n\\#select file\n\nselect:\n\nli
        $v0, 13\n\nla $a0, List\n\nli $a1, 0\n\nsyscall\n\nmove $s0, $v0\n\n\\#read
        file + save to space\n\nread:\n\nli $v0, 14\n\nmove $a0, $s0\n\nla $a1, Listspacein\n\nla
        $a2, 4096\n\nsyscall\n\n\\#close file \n\nclose:\n\nli $v0, 16\n\nmove $a0,
        $s0\n\nsyscall\n\n\\#remove \\\\n &amp;amp; \\\\r\n\nla $t0, Listspacein \n\nla
        $t9, Listspacewo\n\nli $t2, 0\n\nstartfilter:\n\nlb $t1, ($t0)\n\nbeq $t1,
        10, sas\n\nbeq $t1, 13, sas\n\nbeq $t0, 268502264, sas\n\nadd $t2, $t2, 1\n\nadd
        $t0, $t0, 1\n\nbgtu $t0, 268502266, ffilter\n\nj startfilter\n\nsas:\n\nbne
        $t2, 3, sasloop\n\nli $t4,0\n\nsb $t4, ($t9)\n\nadd $t9, $t9, 1\n\nsasloop:\n\nli
        $t4, 0\n\nsub $t3, $t0, $t2\n\nlb $t4, ($t3)\n\nsub $t4, $t4, 48\n\nsb $t4,
        ($t9)\n\nadd $t9, $t9, 1\n\nsub $t2, $t2, 1\n\nbeq $t2, 0, sasloopend\n\nj
        sasloop\n\nsasloopend:\n\nadd $t0, $t0, 2\n\nbeq $t0, 268502266, ffilter\n\nj
        startfilter\n\nffilter:\n\n\\#makesingle numbers\n\nla $t0, Listspacein\n\nli
        $t1, 0\n\nemptyListspacein:\n\nsw $zero, ($t0)\n\nadd $t0, $t0, 4\n\nadd $t1,
        $t1, 4\n\nbeq $t1, 1300, Listspaceinempty\n\nj emptyListspacein\n\nListspaceinempty:\n\nla
        $t0, Listspacein\n\nsub $t9, $t9, 1\n\nli $t1,0\n\nli $t2,0\n\nli $t3,0\n\nli
        $t4,0\n\nstartmsnloop:\n\nlb $t1, ($t9)\n\nlb $t2, -1($t9)\n\nmul $t2, $t2,
        10\n\nlb $t3, -2($t9)\n\nmul $t3, $t3, 100\n\nlb $t4, -3($t9)\n\nmul $t4,
        $t4, 1000\n\nadd $t1, $t1, $t2\n\nadd $t1, $t1, $t3\n\nadd $t1, $t1, $t4\n\nsw
        $t1, ($t0)\n\nsub $t9, $t9, 4\n\nadd $t0, $t0, 4\n\nla $t1, Listspacewo\n\nbgt
        $t1, $t9, msnloopend\n\nj startmsnloop\n\nmsnloopend:\n\n\\#(find x+y+z=2020)
        &amp;amp; (mul x &amp;amp; y &amp;amp; z)\n\nla $t0, Listspacein\n\nmove $t7,
        $t0\n\nwtt0:\n\nlw $t1, ($t0)\n\nadd $t9, $t7, $zero\n\nwtt9:\n\nlw $t2, ($t9)\n\nadd
        $t8, $t7, $zero\n\nwtt8:\n\nlw $t3, ($t8)\n\nadd $t4, $t3, $t2\n\nadd $t4,
        $t4, $t1\n\nbeq $t4, 2020, eq2020\n\nadd $t8, $t8, 4\n\nbeq $t3, 0, inct9\n\nj
        wtt8\n\ninct9:\n\nadd $t9, $t9, 4\n\nbeq $t2, 0, inct0\n\nj wtt9\n\ninct0:\n\nadd
        $t0, $t0, 4\n\nbeq $t1, 0, end\n\nj wtt0\n\neq2020:\n\nmul $t4, $t3, $t2\n\nmul
        $t4, $t4, $t1\n\n\\#print\n\nprint:\n\nmove $a0, $t4\n\nli $v0, 1\n\nsyscall\n\n\\#end\n\nend:\n\nli
        $v0, 10\n\nsyscall\\`\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gec7khr/", "subreddit_type":
        "public", "locked": false, "name": "t1_gec7khr", "created": 1606884851.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 1, "name":
        "t1_gecdyom", "id": "gecdyom", "parent_id": "t1_gec7khr", "depth": 1, "children":
        ["gecdyom"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 4, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ged6aaq", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "UbiquitinatedKarma",
        "can_mod_post": false, "created_utc": 1606915925.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_3icrv", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "A quick and dirty solution in *R*:\n\n    library(here)\n    library(readr)\n    library(tidyr)\n    library(dplyr)\n    \n    d
        &lt;- read_tsv(here(\"data\", \"day_1_input.txt\"),\n                  col_names
        = FALSE) %&gt;%\n      rename(\"expenses\" = X1)\n    \n    # Find the ones
        that sum to 2020\n    res1 &lt;- combn(d$expenses, 2)[, \n    which(colSums(combn(d$expenses
        ,2)) == 2020)]\n    answer1 &lt;- prod(res1)\n    answer1\n    \n    # To
        do the same thing for 3 numbers, we just use that in `combn`\n    res2 &lt;-
        combn(d$expenses, 3)[, \n    which(colSums(combn(d$expenses ,3)) == 2020)]\n    answer2
        &lt;- prod(res2)\n    answer2", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;A quick and dirty solution in &lt;em&gt;R&lt;/em&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;library(here)\nlibrary(readr)\nlibrary(tidyr)\nlibrary(dplyr)\n\nd
        &amp;lt;- read_tsv(here(&amp;quot;data&amp;quot;, &amp;quot;day_1_input.txt&amp;quot;),\n              col_names
        = FALSE) %&amp;gt;%\n  rename(&amp;quot;expenses&amp;quot; = X1)\n\n# Find
        the ones that sum to 2020\nres1 &amp;lt;- combn(d$expenses, 2)[, \nwhich(colSums(combn(d$expenses
        ,2)) == 2020)]\nanswer1 &amp;lt;- prod(res1)\nanswer1\n\n# To do the same
        thing for 3 numbers, we just use that in `combn`\nres2 &amp;lt;- combn(d$expenses,
        3)[, \nwhich(colSums(combn(d$expenses ,3)) == 2020)]\nanswer2 &amp;lt;- prod(res2)\nanswer2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ged6aaq/",
        "subreddit_type": "public", "locked": false, "name": "t1_ged6aaq", "created":
        1606915925.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 4, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ged8jld",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "zollli",
        "can_mod_post": false, "created_utc": 1606917075.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 4, "author_fullname": "t2_962ftrp", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# That''s Big Data so I used Spark\n\n    df = spark.read.text(''input.txt'')\n    df1
        = df.selectExpr(''value as v1'')\n    df2 = df.selectExpr(''value as v2'')\n    df1.crossJoin(df2).filter(\"v1+v2=2020\").selectExpr(\"v1*v2\").show()",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;That&amp;#39;s Big
        Data so I used Spark&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;df = spark.read.text(&amp;#39;input.txt&amp;#39;)\ndf1
        = df.selectExpr(&amp;#39;value as v1&amp;#39;)\ndf2 = df.selectExpr(&amp;#39;value
        as v2&amp;#39;)\ndf1.crossJoin(df2).filter(&amp;quot;v1+v2=2020&amp;quot;).selectExpr(&amp;quot;v1*v2&amp;quot;).show()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ged8jld/",
        "subreddit_type": "public", "locked": false, "name": "t1_ged8jld", "created":
        1606917075.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1091, "name": "t1_ge8dbyz", "id": "ge8dbyz", "parent_id":
        "t3_k4e4lm", "depth": 0, "children": ["ge8dbyz", "ge8dyk7", "ge8dxxi", "ge8dljn",
        "ge8m0g1", "ge8gy21", "ge8rqxk", "ge8sd2z", "ge8rsst", "ge8n6xl", "ge8pc39",
        "ge8nkcd", "ge8temf", "ge8e6do", "ge8q2j7", "ge8lr2b", "geasoby", "geaj1v1",
        "ge9ntyq", "ge8x995", "gebrkuf", "ge8tuo5", "geb5xuz", "ge8npxe", "ge8p2li",
        "gebecfl", "ge8sucw", "ge8zqyt", "ge8t51y", "ge8w3bh", "ge9d0ld", "ge8gb0m",
        "gea0ovw", "geb9tkh", "gebt73a", "ge9yjts", "geafecs", "ge8vp59", "gebk1zj",
        "geapdes", "gecoa0z", "ge8qxnh", "geblstp", "gebiwyv", "ge96qlc", "gec4rjz",
        "gec8bw1", "ge8gj8r", "ge9ddtn", "ge8gr6w", "gecca7r", "ge8d0wc", "ge8e2ut",
        "ge946ho", "geatz0f", "geblftt", "ge8lqi6", "ge9osbn", "ge8z0r0", "ge952tt",
        "geaek04", "ge8ggww", "gebk3nj", "geawos1", "ge93rku", "gea8mt6", "ge9h6ew",
        "ge9x8du", "geajnim", "geb2ead", "ge8nz5v", "gebkzju", "ge8pjw2", "geat8vy",
        "ge8fzl7", "geakqc4", "ge9sd18", "geaxi7b", "ge8fngh", "geapk7s", "gedn6ai",
        "geb2800", "ge8ttxd", "ge8d3cg", "gedl7y0", "gec7jgm", "ge8w6hf", "ge8de7e",
        "ge8japz", "ge8cxl7", "ge9sgsy", "ge8t4j6", "ge8dmcw", "ge8sdvm", "ge8crvi",
        "ge8g5rw", "gecq4io", "ge8niic", "ge988ei", "ge8f3us", "ge8pcbs", "ge8hrji",
        "geck8u2", "ge8d6bv", "ge9m01l", "ge9qqq4", "ge8rgu3", "ge8dte7", "ge8hogv",
        "gebx1yf", "gebpra6", "ge8g56f", "geb7p6r", "ge9d2dm", "ge8rhbi", "gea2gdy",
        "gecfir8", "ge8d8xr", "ge8tfea", "ge8ctqe", "gedle57", "ge9qhcj", "ge96u2q",
        "ge8lrki", "ge90c7v", "gebkewe", "gebn1q2", "ge8e32r", "gebykhw", "gebdy00",
        "ge9xr0x", "gecelbl", "gearve7", "gecoya2", "geazt0h", "geaz3ql", "gea6u2s",
        "geanteq", "ge8fohw", "gebkezv", "gea9o1a", "ge95sr1", "ge8d6qk", "ge9w3sf",
        "ge8xree", "gebi4f8", "ge9m14j", "geaonwr", "geb1ywi", "ge8u58v", "geaiot5",
        "ge8t5hs", "geb1ylq", "ge8hgha", "ge9euu1", "geaqgdt", "gec65da", "ge8ufj6",
        "gec1vl4", "gebpih7", "geajrji", "ge93efl", "ge93jm1", "gecbbcr", "ge8dgjc",
        "ge8v27u", "ge8hblp", "gea4g6s", "ge8jjoi", "ge8q9ju", "ge8xkyv", "geamp0x",
        "geaeazy", "ge8cl31", "ge8w08q", "ge8jcbw", "geb5m5w", "ge9k3gq", "ge8mph5",
        "geb62j1", "ge9adsg", "ge8dglu", "ge8fij5", "ge9vh7d", "gebhpca", "geasy2d",
        "ge8ndxc", "geap7rl", "gea7tzx", "gebt57q", "gednq6d", "ge8et2j", "ge9i0tt",
        "ge9225u", "ge8ogb7", "gebftfl", "ge8ebyv", "ge8iw3m", "gebmnz0", "gecsn65",
        "ge8ugt2", "ge8g3mb", "ge93z7e", "ge92kna", "gebjbwq", "ge92sk0", "geafk7o",
        "geakvfh", "ge8gn6r", "ge8xp9f", "ge8p549", "ge8qk88", "ge9lt7o", "gebs83z",
        "ge99dmt", "ge8zlpr", "geaez7c", "geak8vy", "ge8ymhn", "ge8hjs0", "ge8dc2t",
        "ge8y8a7", "ge9nvip", "ge8qa9v", "gecjat6", "ge8xlj2", "ge9hyrm", "ge95r6o",
        "ge8xpoi", "geagd2g", "ge8e72m", "gea9tbw", "ge9r1t7", "geco79q", "geb8tua",
        "gea6vh1", "ge9kr1i", "ge97rgx", "geaq1d5", "ge9k6ig", "geb9b3s", "gec5osj",
        "ge8wj14", "ge8lxy8", "ge8d575", "ge8dw1k", "ge8dnbn", "ge8dil8", "ge8eiq2",
        "ge9060g", "ge8vk39", "gearyyf", "gebjdgw", "geaanxo", "geak8fk", "gec2gg5",
        "geb8t7f", "ge8debh", "ge9i56x", "ge8d4fv", "geal0ma", "ge99xa3", "ge8nxeg",
        "ge8d3oo", "gea1x61", "ge9idwm", "gebmpyg", "ge90pv4", "ge9quzr", "geakrug",
        "gec7b6w", "ge8qbcy", "ge99296", "gectazu", "ge9v0oa", "geab8yv", "ge9963b",
        "ge8ft9b", "ge90t2q", "ge9p67o", "gebclbc", "ge8d8ht", "ge8x2ax", "geacp52",
        "ge90snh", "ge9lb2t", "ge8djkf", "geb73sk", "ge8ub8c", "ge9809q", "gea55cz",
        "ge8wy22", "ge8ff2d", "geb34hs", "geaqgwd", "ge8zg5h", "ge91y87", "ge9fs08",
        "geator7", "gea91jq", "ge9k6sa", "gebmrn5", "ge9px27", "ge9m65s", "gebx4pn",
        "ge8hczq", "geahpdb", "ge8dewk", "geadna4", "ge933cq", "geajhnt", "gea0reu",
        "ge9u529", "ge8yk7u", "ge8e2mm", "geabg9r", "gebuoyc", "ge9qj85", "gebcdzv",
        "gea846b", "ge8uxge", "geby48b", "ge8jsx5", "ge8hasg", "ge8w7ap", "ge8zfpr",
        "ge8egd7", "ge8vu5a", "ge8oces", "ge9p8jh", "geby132", "gebkep2", "ge9oow8",
        "ge8z4ff", "gec124u", "ge8hhxr", "ge95f68", "gec1oxq", "ge8h6cs", "ge8edqs",
        "gebv38e", "ge8dckb", "ge9066a", "geb72uc", "ge8kak3", "ge8dqnf", "ge8eek9",
        "ge8umgx", "ge93wxk", "ge8drnn", "ged616q", "ge8eiis", "ge99hmm", "gea37gf",
        "ge8e5vy", "ge8r3ie", "ge94tnj", "ge8ucg7", "ge9cwwc", "ge8qd7s", "ge8d75b",
        "ge9vs5f", "ge9wtc6", "ge9gln9", "ge95uhg", "gedjo2d", "ge8gvxc", "ge8qs04",
        "ged4e5g", "ge9kuii", "ge8ypio", "ge959yk", "gea8ouf", "geaeq43", "ge9fh10",
        "geayab9", "ge9ic0a", "ge9qgy9", "ge8yvut", "ge9c2ap", "ge8cl3c", "gea6m9x",
        "ge8jglc", "ge8iorh", "ge8zxsv", "ge93bhe", "ge8xx75", "ge8v2we", "ge8dhow",
        "gea5sgr", "gea17ge", "gecd75d", "gec24rm", "ge9hgu2", "gea69ik", "gec5h0g",
        "ge8g4iv", "ge93z8h", "gea1c82", "gebpzhl", "ge8iotj", "ge8d88g", "ge9c3l6",
        "ge8cv0w", "ge90035", "geboier", "ge96iwo", "ge8zyte", "ge8dq4x", "ge8q1ox",
        "ge94liw", "ge95a1e", "ge948qx", "ge9l7o8", "ge998wb", "ge9p7h9", "geb22xg",
        "geae2je", "ge9wiwj", "ge985ep", "ge8jf9z", "ge99c2y", "ged2syd", "gedmx6c",
        "ge9hbp6", "ge98ysx", "ge8feyg", "ge8eqo4", "ged4hhm", "gead5e6", "gea6p3j",
        "gea04hh", "ge8rlp9", "gebidqz", "ge9nnl1", "ge9f357", "ge8vf78", "geaqabf",
        "ge92lj3", "ge94kss", "ge8l8lb", "ge9lf9j", "ge9e7k1", "ge8hj6a", "gea3dle",
        "ge8s8wl", "ge8yqmy", "geayy5d", "ge8gwg3", "ge9kgch", "ge9aay1", "ge8xday",
        "ge8d3xk", "gebvdck", "gebx9gq", "ge9bnyc", "ge98q2x", "ge8gd8r", "ge8e9e9",
        "ge99kma", "ge90ffa", "ge8hf6j", "gea97s3", "geac8gr", "ge9autn", "ge8xemy",
        "gea5os4", "ge9n0k8", "ge8v5uh", "ge9c2p4", "geaja8q", "geaxx0l", "ge8grtd",
        "gec2cvf", "ge8gx4l", "gebbsdv", "ge8fo5f", "geamavo", "ge8vrzv", "ge8vnir",
        "ge8j4w1", "geaxt4t", "gecibnq", "ge8cm9v", "geaco7m", "ge8d981", "gec5y4z",
        "gea2ml2", "gec0e6f", "ge8f6p3", "gebdwoh", "geascdo", "geady27", "geb434g",
        "ge9cla0", "gecyms2", "gebgpfi", "gebuvuw", "ge989na", "gebka8s", "ge8pk2k",
        "gea60ob", "ge8em6p", "ge98qck", "gead2hx", "ge9l4ak", "ge9ysx3", "ge8isow",
        "ged959m", "ge8yog2", "ge9pptc", "ge8e5m5", "ge9lrxu", "geb2kzp", "gea7lc6",
        "ge96tiq"]}}], true]], [0, 12, "attr", "things"], [12, 13, "call", ["t1_ge8rwqc"]],
        [13, 14, "attr", "focus"], [14, 15, "call", []], [0, 16, "attr", "things"],
        [16, 17, "call", ["None"]], [17, 18, "attr", "filter"], [18, 19, "call", [".morechildren"]],
        [19, 20, "attr", "remove"], [20, 21, "call", []]], "success": true}'
  recorded_at: Sat, 08 Mar 2025 23:06:34 GMT
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:34 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=fc7CZ7lHyL1OuaAElS; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sat, 08 Mar 2025 23:06:34 GMT
- request:
    method: post
    uri: https://oauth.reddit.com/api/morechildren.json
    body:
      encoding: UTF-8
      string: link_id=t3_k4e4lm&children=ge8dbyz,ge8dyk7,ge8dxxi,ge8dljn,ge8m0g1,ge8gy21,ge8rqxk,ge8sd2z,ge8rsst,ge8n6xl,ge8pc39,ge8nkcd,ge8temf,ge8e6do,ge8q2j7,ge8lr2b,geasoby,geaj1v1,ge9ntyq,ge8x995,gebrkuf,ge8tuo5,geb5xuz,ge8npxe,ge8p2li,gebecfl,ge8sucw,ge8zqyt,ge8t51y,ge8w3bh,ge9d0ld,ge8gb0m,gea0ovw,geb9tkh,gebt73a,ge9yjts,geafecs,ge8vp59,gebk1zj,geapdes,gecoa0z,ge8qxnh,geblstp,gebiwyv,ge96qlc,gec4rjz,gec8bw1,ge8gj8r,ge9ddtn,ge8gr6w,gecca7r,ge8d0wc,ge8e2ut,ge946ho,geatz0f,geblftt,ge8lqi6,ge9osbn,ge8z0r0,ge952tt,geaek04,ge8ggww,gebk3nj,geawos1,ge93rku,gea8mt6,ge9h6ew,ge9x8du,geajnim,geb2ead,ge8nz5v,gebkzju,ge8pjw2,geat8vy,ge8fzl7,geakqc4,ge9sd18,geaxi7b,ge8fngh,geapk7s,gedn6ai,geb2800,ge8ttxd,ge8d3cg,gedl7y0,gec7jgm,ge8w6hf,ge8de7e,ge8japz,ge8cxl7,ge9sgsy,ge8t4j6,ge8dmcw,ge8sdvm,ge8crvi,ge8g5rw,gecq4io,ge8niic,ge988ei,ge8f3us,ge8pcbs,ge8hrji,geck8u2,ge8d6bv,ge9m01l,ge9qqq4,ge8rgu3,ge8dte7,ge8hogv,gebx1yf,gebpra6,ge8g56f,geb7p6r,ge9d2dm,ge8rhbi,gea2gdy,gecfir8,ge8d8xr,ge8tfea,ge8ctqe,gedle57,ge9qhcj,ge96u2q,ge8lrki,ge90c7v,gebkewe,gebn1q2,ge8e32r,gebykhw,gebdy00,ge9xr0x,gecelbl,gearve7,gecoya2,geazt0h,geaz3ql,gea6u2s,geanteq,ge8fohw,gebkezv,gea9o1a,ge95sr1,ge8d6qk,ge9w3sf,ge8xree,gebi4f8,ge9m14j,geaonwr,geb1ywi,ge8u58v,geaiot5,ge8t5hs,geb1ylq,ge8hgha,ge9euu1,geaqgdt,gec65da,ge8ufj6,gec1vl4,gebpih7,geajrji,ge93efl,ge93jm1,gecbbcr,ge8dgjc,ge8v27u,ge8hblp,gea4g6s,ge8jjoi,ge8q9ju,ge8xkyv,geamp0x,geaeazy,ge8cl31,ge8w08q,ge8jcbw,geb5m5w,ge9k3gq,ge8mph5,geb62j1,ge9adsg,ge8dglu,ge8fij5,ge9vh7d,gebhpca,geasy2d,ge8ndxc,geap7rl,gea7tzx,gebt57q,gednq6d,ge8et2j,ge9i0tt,ge9225u,ge8ogb7,gebftfl,ge8ebyv,ge8iw3m,gebmnz0,gecsn65,ge8ugt2,ge8g3mb,ge93z7e,ge92kna,gebjbwq,ge92sk0,geafk7o,geakvfh,ge8gn6r,ge8xp9f,ge8p549,ge8qk88,ge9lt7o,gebs83z,ge99dmt,ge8zlpr,geaez7c,geak8vy,ge8ymhn,ge8hjs0,ge8dc2t,ge8y8a7,ge9nvip,ge8qa9v,gecjat6,ge8xlj2,ge9hyrm,ge95r6o,ge8xpoi,geagd2g,ge8e72m,gea9tbw,ge9r1t7,geco79q,geb8tua,gea6vh1,ge9kr1i,ge97rgx,geaq1d5,ge9k6ig,geb9b3s,gec5osj,ge8wj14,ge8lxy8,ge8d575,ge8dw1k,ge8dnbn,ge8dil8,ge8eiq2,ge9060g,ge8vk39,gearyyf,gebjdgw,geaanxo,geak8fk,gec2gg5,geb8t7f,ge8debh,ge9i56x,ge8d4fv,geal0ma,ge99xa3,ge8nxeg,ge8d3oo,gea1x61,ge9idwm,gebmpyg,ge90pv4,ge9quzr,geakrug,gec7b6w,ge8qbcy,ge99296,gectazu,ge9v0oa,geab8yv,ge9963b,ge8ft9b,ge90t2q,ge9p67o,gebclbc,ge8d8ht,ge8x2ax,geacp52,ge90snh,ge9lb2t,ge8djkf,geb73sk,ge8ub8c,ge9809q,gea55cz,ge8wy22,ge8ff2d,geb34hs,geaqgwd,ge8zg5h,ge91y87,ge9fs08,geator7,gea91jq,ge9k6sa,gebmrn5,ge9px27,ge9m65s,gebx4pn,ge8hczq,geahpdb,ge8dewk,geadna4,ge933cq,geajhnt,gea0reu,ge9u529,ge8yk7u,ge8e2mm,geabg9r,gebuoyc,ge9qj85,gebcdzv,gea846b,ge8uxge,geby48b,ge8jsx5,ge8hasg,ge8w7ap,ge8zfpr,ge8egd7,ge8vu5a,ge8oces,ge9p8jh,geby132,gebkep2,ge9oow8,ge8z4ff,gec124u,ge8hhxr,ge95f68,gec1oxq,ge8h6cs,ge8edqs,gebv38e,ge8dckb,ge9066a,geb72uc,ge8kak3,ge8dqnf,ge8eek9,ge8umgx,ge93wxk,ge8drnn,ged616q,ge8eiis,ge99hmm,gea37gf,ge8e5vy,ge8r3ie,ge94tnj,ge8ucg7,ge9cwwc,ge8qd7s,ge8d75b,ge9vs5f,ge9wtc6,ge9gln9,ge95uhg,gedjo2d,ge8gvxc,ge8qs04,ged4e5g,ge9kuii,ge8ypio,ge959yk,gea8ouf,geaeq43,ge9fh10,geayab9,ge9ic0a,ge9qgy9,ge8yvut,ge9c2ap,ge8cl3c,gea6m9x,ge8jglc,ge8iorh,ge8zxsv,ge93bhe,ge8xx75,ge8v2we,ge8dhow,gea5sgr,gea17ge,gecd75d,gec24rm,ge9hgu2,gea69ik,gec5h0g,ge8g4iv,ge93z8h,gea1c82,gebpzhl,ge8iotj,ge8d88g,ge9c3l6,ge8cv0w,ge90035,geboier,ge96iwo,ge8zyte,ge8dq4x,ge8q1ox,ge94liw,ge95a1e,ge948qx,ge9l7o8,ge998wb,ge9p7h9,geb22xg,geae2je,ge9wiwj,ge985ep,ge8jf9z,ge99c2y,ged2syd,gedmx6c,ge9hbp6,ge98ysx,ge8feyg,ge8eqo4,ged4hhm,gead5e6,gea6p3j,gea04hh,ge8rlp9,gebidqz,ge9nnl1,ge9f357,ge8vf78,geaqabf,ge92lj3,ge94kss,ge8l8lb,ge9lf9j,ge9e7k1,ge8hj6a,gea3dle,ge8s8wl,ge8yqmy,geayy5d,ge8gwg3,ge9kgch,ge9aay1,ge8xday,ge8d3xk,gebvdck,gebx9gq,ge9bnyc,ge98q2x,ge8gd8r,ge8e9e9,ge99kma,ge90ffa,ge8hf6j,gea97s3,geac8gr,ge9autn,ge8xemy,gea5os4,ge9n0k8,ge8v5uh,ge9c2p4,geaja8q,geaxx0l,ge8grtd,gec2cvf,ge8gx4l,gebbsdv,ge8fo5f,geamavo,ge8vrzv,ge8vnir,ge8j4w1,geaxt4t,gecibnq,ge8cm9v,geaco7m,ge8d981,gec5y4z,gea2ml2,gec0e6f,ge8f6p3,gebdwoh,geascdo,geady27,geb434g,ge9cla0,gecyms2,gebgpfi,gebuvuw,ge989na,gebka8s,ge8pk2k,gea60ob,ge8em6p,ge98qck,gead2hx,ge9l4ak,ge9ysx3,ge8isow,ged959m,ge8yog2,ge9pptc,ge8e5m5,ge9lrxu,geb2kzp,gea7lc6,ge96tiq
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '48567'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      set-cookie:
      - loid=000000001ksigbu58l.2.1741475194721.Z0FBQUFBQm56TTE3NTVCWXRBM21vYjU0T0Z2WGRUR1Zva29mSUtlbWNSTmZFR0FIbG9wT2JWd3BhX2RYYTdZRDZlcXJJSlRpeWZEYUp0MnFuLXhzdDVFQktrUVliTnZreFZZWmp4TlB5NS1CRXl4dzJlZ3RXNE42RmVrclRFdHZ3V2k3ZXVTUEdSLUY;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Mon, 08-Mar-2027 23:06:35
        GMT; secure, session_tracker=cfgmebncogphgibdqq.0.1741475194736.Z0FBQUFBQm56TTE3THNtOE9tS2FMQzd0d0NQNnJWamdEM2xMVFpJbnJ3amxwOG5pYnUwSEUya3ZzdTRsRmRjZ09XeVNCMUp0VWs0Z3cyZGpKamdsNXlMQVh3dHd3M1pwS1p0ci1wbE9CNVlsRnI1cUJ0bjZybHRPdGVRSFpSZE9XaWpVVi1lOVRXMW8;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 01:06:35
        GMT; secure, edgebucket=yrsRkmULskuqGBS8Mn; Domain=reddit.com; Max-Age=63071999;
        Path=/;  secure
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '17'
      x-ratelimit-remaining:
      - '83.0'
      x-ratelimit-reset:
      - '205'
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:35 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"jquery": [[0, 1, "call", ["body"]], [1, 2, "attr", "find"], [2, 3,
        "call", [".status"]], [3, 4, "attr", "hide"], [4, 5, "call", []], [5, 6, "attr",
        "html"], [6, 7, "call", [""]], [7, 8, "attr", "end"], [8, 9, "call", []],
        [0, 10, "attr", "insert_things"], [10, 11, "call", [[{"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606800821.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8dbyz", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "mgoblu3",
        "can_mod_post": false, "created_utc": 1606800098.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_c5x0a", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My python one-liner-ish:\n\n    print(math.prod(next(i for i in itertools.combinations(list(map(int,
        open(''input.txt'', ''r'').read().splitlines())), 3) if sum(i) == 2020)))",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My python one-liner-ish:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;print(math.prod(next(i
        for i in itertools.combinations(list(map(int, open(&amp;#39;input.txt&amp;#39;,
        &amp;#39;r&amp;#39;).read().splitlines())), 3) if sum(i) == 2020)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8dbyz/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8dbyz", "created":
        1606800098.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8dljn",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "hltk",
        "can_mod_post": false, "created_utc": 1606800300.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_2jgtnaoy", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python. 82/54\n\n    from itertools import combinations\n    from functools
        import reduce\n    import operator\n\n    data = open(\"01.in\").read().strip()\n\n    nums
        = [int(x) for x in data.split(\"\\n\")]\n\n    def solve(k):\n        for
        s in combinations(nums, k):\n            if sum(s) == 2020:\n                return
        reduce(operator.mul, s)\n\n    # part 1\n    print(solve(2))\n\n    # part
        2\n    print(solve(3))", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python.
        82/54&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from itertools import combinations\nfrom
        functools import reduce\nimport operator\n\ndata = open(&amp;quot;01.in&amp;quot;).read().strip()\n\nnums
        = [int(x) for x in data.split(&amp;quot;\\n&amp;quot;)]\n\ndef solve(k):\n    for
        s in combinations(nums, k):\n        if sum(s) == 2020:\n            return
        reduce(operator.mul, s)\n\n# part 1\nprint(solve(2))\n\n# part 2\nprint(solve(3))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8dljn/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8dljn", "created":
        1606800300.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1607883033.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8dxxi", "banned_at_utc": null, "mod_reason_title": null, "gilded": 1, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "asgardian28",
        "can_mod_post": false, "created_utc": 1606800559.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_8mb6chw", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python 999/591\n\nMaking a generator and calling next on it makes the program
        stop after finding the answer\n\n    f=open(''input.txt'')\n    lines = [int(line)
        for line in f.readlines()]\n    next(x*y for x in lines for y in lines if
        x+y==2020)\n    next(x*y*z for x in lines for y in lines for z in lines if
        x+y+z==2020)", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python
        999/591&lt;/p&gt;\n\n&lt;p&gt;Making a generator and calling next on it makes
        the program stop after finding the answer&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;f=open(&amp;#39;input.txt&amp;#39;)\nlines
        = [int(line) for line in f.readlines()]\nnext(x*y for x in lines for y in
        lines if x+y==2020)\nnext(x*y*z for x in lines for y in lines for z in lines
        if x+y+z==2020)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8dxxi/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8dxxi", "created": 1606800559.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 1, "name":
        "t1_ge8i8tr", "id": "ge8i8tr", "parent_id": "t1_ge8dxxi", "depth": 1, "children":
        ["ge8i8tr"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": 1606805660.0,
        "mod_reason_by": null, "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8dyk7", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "mstksg",
        "can_mod_post": false, "created_utc": 1606800572.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_5cbmr", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "\\[Haskell\\] I might have gotten better if I didn''t just go away and get
        a cup of tea while waiting for the server to go back up D:\n\nAs always, my
        reflections are up here :) [https://github.com/mstksg/advent-of-code-2020/blob/master/reflections.md#day-1](https://github.com/mstksg/advent-of-code-2020/blob/master/reflections.md#day-1)\n\nBTW
        rip to my free space :''( [https://www.reddit.com/r/adventofcode/comments/k3q7tr/my\\_advent\\_of\\_code\\_2020\\_bingo\\_card\\_fun\\_little\\_side/](https://www.reddit.com/r/adventofcode/comments/k3q7tr/my_advent_of_code_2020_bingo_card_fun_little_side/)
        but maybe nice that we don''t have to save Christmas this year, it''s a more
        leisurely tone :)\n\nEDIT: i''ve found a nicer way than my previous method!
        So there''s a simple-ish Haskell solution for these problems,\n\n`tails` lets
        you separate out each item in a list with the list of items after it:\n\n    ghci&gt;
        tails [1,2,3,4]\n    [1:[2,3,4], 2:[3,4], 3:[4], 4:[]]\n    findPair :: [Int]
        -&gt; Maybe Int\n    findPair xs = listToMaybe $ do\n        x:ys &lt;- tails
        xs\n        y    &lt;- ys\n        guard (x + y == 2020)\n        pure (x*y)\n    \n    findTriple
        :: [Int] -&gt; Maybe Int\n    findTriple xs = listToMaybe $ do\n        x:ys
        &lt;- tails xs\n        y:zs &lt;- tails ys\n        z    &lt;- zs\n        guard
        (x + y + z == 2020)\n        pure (x*y*z)\n\nBut this method is a little bit
        \"extra\", since we actually don''t need to search all of `ys` for the proper
        sum...if we pick `x` as `500`, then we really only need to check if `1520`
        is a part of `ys`.\n\nSo we really only need to check for set inclusion:\n\n    import
        qualified Data.Set as S\n    \n    findPair :: Int -&gt; Set Int -&gt; Maybe
        Int\n    findPair goal xs = listToMaybe $ do\n        x &lt;- S.toList xs\n        let
        y = goal - x\n        guard (y `S.member` xs)\n        pure (x * y)\n\nAnd
        our first part will be `findPair 2020`!\n\nYou could even implement `findTriple`
        in terms of `findPair`, using `S.split` to partition a set into all items
        smaller than and larger than a number. Splitting is a very efficient operation
        on a binary search tree like `Set`:\n\n    findTriple :: Int -&gt; Set Int
        -&gt; Maybe Int\n    findTriple goal xs = listToMaybe $ do\n        x &lt;-
        S.toList xs\n        let (_, ys) = S.split x xs\n            goal'' = goal
        - x\n        case findPair goal'' ys of\n          Nothing -&gt; empty\n          Just
        yz -&gt; pure (x*yz)\n\nBut hey...this recursive descent is kind of neat.  We
        could write a general function to find any goal in any number of items!\n\n    --
        | Given a number n of items and a goal sum and a set of numbers to\n    --
        pick from, finds the n numbers in the set that add to the goal sum.\n    knapsack\n        ::
        Int              -- ^ number of items n to pick\n        -&gt; Int              --
        ^ goal sum\n        -&gt; Set Int          -- ^ set of options\n        -&gt;
        Maybe [Int]      -- ^ resulting n items that sum to the goal\n    knapsack
        0 _    _  = Nothing\n    knapsack 1 goal xs\n        | goal `S.member` xs
        = Just [goal]\n        | otherwise          = Nothing\n    knapsack n goal
        xs = listToMaybe $ do\n        x &lt;- S.toList xs\n        let goal''   =
        goal - x\n            (_, ys) = S.split x xs\n        case knapsack (n - 1)
        goal'' ys of\n          Nothing -&gt; empty\n          Just rs -&gt; pure
        (x:rs)\n\nAnd so we have:\n\n    part1 :: [Int] -&gt; Maybe Int\n    part1
        = knapsack 2 2020 . S.fromList\n    \n    part2 :: [Int] -&gt; Maybe Int\n    part2
        = knapsack 3 2020 . S.fromList\n\nAnd we could go on, and on, and on! :)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[Haskell] I might have
        gotten better if I didn&amp;#39;t just go away and get a cup of tea while
        waiting for the server to go back up D:&lt;/p&gt;\n\n&lt;p&gt;As always, my
        reflections are up here :) &lt;a href=\"https://github.com/mstksg/advent-of-code-2020/blob/master/reflections.md#day-1\"&gt;https://github.com/mstksg/advent-of-code-2020/blob/master/reflections.md#day-1&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;BTW
        rip to my free space :&amp;#39;( &lt;a href=\"https://www.reddit.com/r/adventofcode/comments/k3q7tr/my_advent_of_code_2020_bingo_card_fun_little_side/\"&gt;https://www.reddit.com/r/adventofcode/comments/k3q7tr/my_advent_of_code_2020_bingo_card_fun_little_side/&lt;/a&gt;
        but maybe nice that we don&amp;#39;t have to save Christmas this year, it&amp;#39;s
        a more leisurely tone :)&lt;/p&gt;\n\n&lt;p&gt;EDIT: i&amp;#39;ve found a
        nicer way than my previous method! So there&amp;#39;s a simple-ish Haskell
        solution for these problems,&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;tails&lt;/code&gt;
        lets you separate out each item in a list with the list of items after it:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;ghci&amp;gt;
        tails [1,2,3,4]\n[1:[2,3,4], 2:[3,4], 3:[4], 4:[]]\nfindPair :: [Int] -&amp;gt;
        Maybe Int\nfindPair xs = listToMaybe $ do\n    x:ys &amp;lt;- tails xs\n    y    &amp;lt;-
        ys\n    guard (x + y == 2020)\n    pure (x*y)\n\nfindTriple :: [Int] -&amp;gt;
        Maybe Int\nfindTriple xs = listToMaybe $ do\n    x:ys &amp;lt;- tails xs\n    y:zs
        &amp;lt;- tails ys\n    z    &amp;lt;- zs\n    guard (x + y + z == 2020)\n    pure
        (x*y*z)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But this method is a little
        bit &amp;quot;extra&amp;quot;, since we actually don&amp;#39;t need to search
        all of &lt;code&gt;ys&lt;/code&gt; for the proper sum...if we pick &lt;code&gt;x&lt;/code&gt;
        as &lt;code&gt;500&lt;/code&gt;, then we really only need to check if &lt;code&gt;1520&lt;/code&gt;
        is a part of &lt;code&gt;ys&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;So we really
        only need to check for set inclusion:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        qualified Data.Set as S\n\nfindPair :: Int -&amp;gt; Set Int -&amp;gt; Maybe
        Int\nfindPair goal xs = listToMaybe $ do\n    x &amp;lt;- S.toList xs\n    let
        y = goal - x\n    guard (y `S.member` xs)\n    pure (x * y)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And
        our first part will be &lt;code&gt;findPair 2020&lt;/code&gt;!&lt;/p&gt;\n\n&lt;p&gt;You
        could even implement &lt;code&gt;findTriple&lt;/code&gt; in terms of &lt;code&gt;findPair&lt;/code&gt;,
        using &lt;code&gt;S.split&lt;/code&gt; to partition a set into all items smaller
        than and larger than a number. Splitting is a very efficient operation on
        a binary search tree like &lt;code&gt;Set&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;findTriple
        :: Int -&amp;gt; Set Int -&amp;gt; Maybe Int\nfindTriple goal xs = listToMaybe
        $ do\n    x &amp;lt;- S.toList xs\n    let (_, ys) = S.split x xs\n        goal&amp;#39;
        = goal - x\n    case findPair goal&amp;#39; ys of\n      Nothing -&amp;gt;
        empty\n      Just yz -&amp;gt; pure (x*yz)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But
        hey...this recursive descent is kind of neat.  We could write a general function
        to find any goal in any number of items!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;--
        | Given a number n of items and a goal sum and a set of numbers to\n-- pick
        from, finds the n numbers in the set that add to the goal sum.\nknapsack\n    ::
        Int              -- ^ number of items n to pick\n    -&amp;gt; Int              --
        ^ goal sum\n    -&amp;gt; Set Int          -- ^ set of options\n    -&amp;gt;
        Maybe [Int]      -- ^ resulting n items that sum to the goal\nknapsack 0 _    _  =
        Nothing\nknapsack 1 goal xs\n    | goal `S.member` xs = Just [goal]\n    |
        otherwise          = Nothing\nknapsack n goal xs = listToMaybe $ do\n    x
        &amp;lt;- S.toList xs\n    let goal&amp;#39;   = goal - x\n        (_, ys)
        = S.split x xs\n    case knapsack (n - 1) goal&amp;#39; ys of\n      Nothing
        -&amp;gt; empty\n      Just rs -&amp;gt; pure (x:rs)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And
        so we have:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;part1 :: [Int] -&amp;gt; Maybe
        Int\npart1 = knapsack 2 2020 . S.fromList\n\npart2 :: [Int] -&amp;gt; Maybe
        Int\npart2 = knapsack 3 2020 . S.fromList\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And
        we could go on, and on, and on! :)&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8dyk7/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8dyk7", "created": 1606800572.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 4, "name":
        "t1_ge8guh5", "id": "ge8guh5", "parent_id": "t1_ge8dyk7", "depth": 1, "children":
        ["ge8guh5", "gewkow1"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 3, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "ge8e6do", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "burtoch", "can_mod_post": false, "created_utc":
        1606800740.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 3,
        "author_fullname": "t2_2xhumww1", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "**Python 373/1008**\n\nUsing
        set lookup\n\n    file = open(''inputs/1.txt'')\n    data_set = {int(element)
        for element in file.readlines()}\n    \n    # Part A\n    print([a * (2020
        - a) for a in data_set if 2020 - a in data_set][0])\n    \n    # Part B\n    print([a
        * b * (2020 - a - b) for a in data_set for b in data_set\n           if 2020
        - a - b in data_set][0])", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python
        373/1008&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Using set lookup&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;file
        = open(&amp;#39;inputs/1.txt&amp;#39;)\ndata_set = {int(element) for element
        in file.readlines()}\n\n# Part A\nprint([a * (2020 - a) for a in data_set
        if 2020 - a in data_set][0])\n\n# Part B\nprint([a * b * (2020 - a - b) for
        a in data_set for b in data_set\n       if 2020 - a - b in data_set][0])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8e6do/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8e6do", "created":
        1606800740.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606803215.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8gb0m", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "codesections",
        "can_mod_post": false, "created_utc": 1606802426.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_1qohraix", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "## Raku\n\n    unit sub MAIN( #=  Solve the 2020 Day 01 Advent of Code puzzle\n        Bool
        :$p2  #={ Solve Part 2 instead of Part 1 (the default) } );\n    my @in =
        lines;\n    when !$p2 { for @in X @in -&gt; ($a, $b) { when $a + $b      ==
        2020 { say $a \u00d7 $b }} }\n    for   @in X @in X @in -&gt; ($a, $b, $c)
        { when $a + $b + $c == 2020 { say $a \u00d7 $b \u00d7 $c } }\n\nThis was a
        fun way to start, because it gave me a good reason to play with Raku''s [cross
        product operator](https://docs.raku.org/language/operators#index-entry-cross_product_operator)
        (`X`) \u2013 I''ve always thought it was a powerful tool, but don''t have
        occasion to use it all that often.", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;h2&gt;Raku&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;unit sub
        MAIN( #=  Solve the 2020 Day 01 Advent of Code puzzle\n    Bool :$p2  #={
        Solve Part 2 instead of Part 1 (the default) } );\nmy @in = lines;\nwhen !$p2
        { for @in X @in -&amp;gt; ($a, $b) { when $a + $b      == 2020 { say $a \u00d7
        $b }} }\nfor   @in X @in X @in -&amp;gt; ($a, $b, $c) { when $a + $b + $c
        == 2020 { say $a \u00d7 $b \u00d7 $c } }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This
        was a fun way to start, because it gave me a good reason to play with Raku&amp;#39;s
        &lt;a href=\"https://docs.raku.org/language/operators#index-entry-cross_product_operator\"&gt;cross
        product operator&lt;/a&gt; (&lt;code&gt;X&lt;/code&gt;) \u2013 I&amp;#39;ve
        always thought it was a powerful tool, but don&amp;#39;t have occasion to
        use it all that often.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8gb0m/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8gb0m", "created":
        1606802426.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606803186.0, "mod_reason_by": null,
        "banned_by": null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8gy21", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        3, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Lazarus / Free Pascal 5805/638 \n\n    program advent01;\n    var\n      src
        : text;\n      s : string;\n      data : array[1..1000] of integer;\n      i,j,k
        : integer;\n      x : integer;\n      sum, prod : integer;\n      count :
        integer;\n    \n    begin\n      assign(src,''input01.txt'');\n      reset(src);\n      count
        := 0;\n      while not eof(src) do\n      begin\n        inc(count);\n        readln(src,x);\n        writeln(x);\n        data[count]
        := x;\n      end;\n      close(src);\n      writeln(Count,'' entries read'');\n      for
        i := 1 to count-1 do\n        for j := i+1 to count do\n          if (data[i]+data[j])
        = 2020 then\n            writeln(data[i],'','',data[j],'','',data[i]*data[j]);\n    end.",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_ge8gy21",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Lazarus
        / Free Pascal 5805/638 &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;program advent01;\nvar\n  src
        : text;\n  s : string;\n  data : array[1..1000] of integer;\n  i,j,k : integer;\n  x
        : integer;\n  sum, prod : integer;\n  count : integer;\n\nbegin\n  assign(src,&amp;#39;input01.txt&amp;#39;);\n  reset(src);\n  count
        := 0;\n  while not eof(src) do\n  begin\n    inc(count);\n    readln(src,x);\n    writeln(x);\n    data[count]
        := x;\n  end;\n  close(src);\n  writeln(Count,&amp;#39; entries read&amp;#39;);\n  for
        i := 1 to count-1 do\n    for j := i+1 to count do\n      if (data[i]+data[j])
        = 2020 then\n        writeln(data[i],&amp;#39;,&amp;#39;,data[j],&amp;#39;,&amp;#39;,data[i]*data[j]);\nend.\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8gy21/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606802942.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606802942.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_ge9m8to", "id": "ge9m8to", "parent_id":
        "t1_ge8gy21", "depth": 1, "children": ["ge9m8to"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8lr2b",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Arkoniak",
        "can_mod_post": false, "created_utc": 1606807021.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_naercj1", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Julia solution here: https://github.com/Arkoniak/advent_of_code/blob/master/2020/01/day01.jl\n\nIt
        includes some tricks to accelerate more obvious solutions.", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Julia solution here: &lt;a href=\"https://github.com/Arkoniak/advent_of_code/blob/master/2020/01/day01.jl\"&gt;https://github.com/Arkoniak/advent_of_code/blob/master/2020/01/day01.jl&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It
        includes some tricks to accelerate more obvious solutions.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8lr2b/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8lr2b", "created":
        1606807021.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8m0g1",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "MissMormie",
        "can_mod_post": false, "created_utc": 1606807257.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_ilvy2", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Simple java lamba solution on [github](https://github.com/MissMormie/adventOfCode2020/blob/main/src/main/java/days/Day1.java)\n\n    public
        static int runA(String input) {\n        List&lt;Integer&gt; numbers = StringHelper.getNumbersFromStringOnePerLine(input);\n        return
        numbers.stream()\n    \t.filter(num -&gt; numbers.contains(2020-num))\n    \t.reduce(1,
        (a, b) -&gt; a * b);\n    }\n    \n    public static int runB(String input)
        {\n        List&lt;Integer&gt; numbers = StringHelper.getNumbersFromStringOnePerLine(input);\n        return
        numbers.stream()\n    \t.filter(num1 -&gt; numbers.stream().anyMatch(num2
        -&gt; numbers.contains(2020 - num1 - num2 )))\n    \t.reduce(1, (a, b) -&gt;
        a * b);\n    }", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Simple
        java lamba solution on &lt;a href=\"https://github.com/MissMormie/adventOfCode2020/blob/main/src/main/java/days/Day1.java\"&gt;github&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public
        static int runA(String input) {\n    List&amp;lt;Integer&amp;gt; numbers =
        StringHelper.getNumbersFromStringOnePerLine(input);\n    return numbers.stream()\n    .filter(num
        -&amp;gt; numbers.contains(2020-num))\n    .reduce(1, (a, b) -&amp;gt; a *
        b);\n}\n\npublic static int runB(String input) {\n    List&amp;lt;Integer&amp;gt;
        numbers = StringHelper.getNumbersFromStringOnePerLine(input);\n    return
        numbers.stream()\n    .filter(num1 -&amp;gt; numbers.stream().anyMatch(num2
        -&amp;gt; numbers.contains(2020 - num1 - num2 )))\n    .reduce(1, (a, b) -&amp;gt;
        a * b);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8m0g1/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8m0g1", "created":
        1606807257.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8n6xl",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Zv0n",
        "can_mod_post": false, "created_utc": 1606808341.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_hxm56", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**C++**\n\nWould be easy to create nested loops for 2 and 3 numbers, I tried
        to make it somewhat generic and created this:\n\n    std::vector&lt;int&gt;
        findSum( const std::vector&lt;int&gt; &amp;nums, int sum, int depth,\n                              int
        start = 0 ) {\n        if ( depth == 1 ) {\n            // we''re at the bottom,
        no more recursion\n            for ( size_t i = start; i &lt; nums.size();
        i++ ) {\n                if ( nums[i] == sum )\n                    return
        { nums[i] };\n            }\n        } else {\n            for ( size_t i
        = start; i &lt; nums.size(); i++ ) {\n                int nextsum = sum -
        nums[i];\n                if(nextsum &lt;= 0)\n                    continue;\n                auto
        res = findSum( nums, nextsum, depth - 1, i + 1 );\n                if ( !res.empty()
        ) {\n                    res.push_back( nums[i] );\n                    return
        res;\n                }\n            }\n        }\n        return {};\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;C++&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Would
        be easy to create nested loops for 2 and 3 numbers, I tried to make it somewhat
        generic and created this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;std::vector&amp;lt;int&amp;gt;
        findSum( const std::vector&amp;lt;int&amp;gt; &amp;amp;nums, int sum, int
        depth,\n                          int start = 0 ) {\n    if ( depth == 1 )
        {\n        // we&amp;#39;re at the bottom, no more recursion\n        for
        ( size_t i = start; i &amp;lt; nums.size(); i++ ) {\n            if ( nums[i]
        == sum )\n                return { nums[i] };\n        }\n    } else {\n        for
        ( size_t i = start; i &amp;lt; nums.size(); i++ ) {\n            int nextsum
        = sum - nums[i];\n            if(nextsum &amp;lt;= 0)\n                continue;\n            auto
        res = findSum( nums, nextsum, depth - 1, i + 1 );\n            if ( !res.empty()
        ) {\n                res.push_back( nums[i] );\n                return res;\n            }\n        }\n    }\n    return
        {};\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8n6xl/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8n6xl", "created":
        1606808341.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8nkcd", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        3, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Decided to learn **PHP** this year, so my super naive
        day one solution:\n\n    &lt;?php\n    $input_file = ''../inputs/day1.txt'';\n    if
        (file_exists($input_file)) {\n    \t$input = file_get_contents($input_file);\n    \tif
        ($input != null &amp;&amp; $input) {\n    \t\t$nums = array_map(''to_int'',\n    \t\t\tarray_filter(explode(\"\\n\",
        $input),\n    \t\t\t\t''is_numeric''));\n    \t\tsolve_part_one($nums);\n    \t\tsolve_part_two($nums);\n    \t}\n    }\n    \n    function
        to_int($str)\n    {\n    \treturn (int)$str;\n    }\n    \n    function solve_part_one($nums)\n    {\n    \tfor
        ($i = 0; $i &lt; sizeof($nums); $i++) {\n    \t\tfor ($j = 0; $j &lt; sizeof($nums);
        $j++) {\n    \t\t\tif ($nums[$i] + $nums[$j] == 2020) {\n    \t\t\t\t$answer
        = $nums[$i] * $nums[$j];\n    \t\t\t\tprint \"Number 1 is $nums[$i],\n    \t\t\t\t\t   number
        2 is $nums[$j],\n    \t\t\t\t\t   answer is $answer\\n\";\n    \t\t\t\treturn;\n    \t\t\t}\n    \t\t}\n    \t}\n    }\n    \n    function
        solve_part_two($nums)\n    {\n    \tfor ($i = 0; $i &lt; sizeof($nums); $i++)
        {\n    \t\tfor ($j = 0; $j &lt; sizeof($nums); $j++) {\n    \t\t\tfor ($k
        = 0; $k &lt; sizeof($nums); $k++) {\n    \t\t\t\tif ($nums[$i] + $nums[$j]
        + $nums[$k] == 2020) {\n    \t\t\t\t\t$answer = $nums[$i] * $nums[$j] * $nums[$k];\n    \t\t\t\t\tprint
        \"Number 1 is $nums[$i],\n    \t\t\t\t\t\t   number 2 is $nums[$j],\n    \t\t\t\t\t\t   number
        3 is $nums[$k],\n    \t\t\t\t\t\t   answer is $answer\\n\";\n    \t\t\t\t\treturn;\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t}\n    }",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_ge8nkcd",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Decided
        to learn &lt;strong&gt;PHP&lt;/strong&gt; this year, so my super naive day
        one solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;?php\n$input_file
        = &amp;#39;../inputs/day1.txt&amp;#39;;\nif (file_exists($input_file)) {\n    $input
        = file_get_contents($input_file);\n    if ($input != null &amp;amp;&amp;amp;
        $input) {\n        $nums = array_map(&amp;#39;to_int&amp;#39;,\n            array_filter(explode(&amp;quot;\\n&amp;quot;,
        $input),\n                &amp;#39;is_numeric&amp;#39;));\n        solve_part_one($nums);\n        solve_part_two($nums);\n    }\n}\n\nfunction
        to_int($str)\n{\n    return (int)$str;\n}\n\nfunction solve_part_one($nums)\n{\n    for
        ($i = 0; $i &amp;lt; sizeof($nums); $i++) {\n        for ($j = 0; $j &amp;lt;
        sizeof($nums); $j++) {\n            if ($nums[$i] + $nums[$j] == 2020) {\n                $answer
        = $nums[$i] * $nums[$j];\n                print &amp;quot;Number 1 is $nums[$i],\n                       number
        2 is $nums[$j],\n                       answer is $answer\\n&amp;quot;;\n                return;\n            }\n        }\n    }\n}\n\nfunction
        solve_part_two($nums)\n{\n    for ($i = 0; $i &amp;lt; sizeof($nums); $i++)
        {\n        for ($j = 0; $j &amp;lt; sizeof($nums); $j++) {\n            for
        ($k = 0; $k &amp;lt; sizeof($nums); $k++) {\n                if ($nums[$i]
        + $nums[$j] + $nums[$k] == 2020) {\n                    $answer = $nums[$i]
        * $nums[$j] * $nums[$k];\n                    print &amp;quot;Number 1 is
        $nums[$i],\n                           number 2 is $nums[$j],\n                           number
        3 is $nums[$k],\n                           answer is $answer\\n&amp;quot;;\n                    return;\n                }\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8nkcd/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606808686.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606808686.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606809303.0, "mod_reason_by": null,
        "banned_by": null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8npxe", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        3, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "# Python\n\n## Part 1 O(n log(n))\n    with open(''day1.txt'')
        as file:\n      s = list(sorted(map(int,file)))\n    \n    low = (x for x
        in reversed(s) if x &lt;= 1010)\n    high = (x for x in s if x &gt; 1010)\n    \n    l
        = next(low)\n    h = next(high)\n    \n    while True:\n      if l + h &gt;
        2020:\n        l = next(low)\n      elif l + h &lt; 2020:\n        h = next(high)\n      else:\n        print(l,h,l+h,l*h)\n        break\n\n##
        Part 2 O(n\\^2)\n\n    with open(''day1.txt'') as file:\n      s = list(sorted(map(int,file)))\n    \n    for
        y in s:\n      low = (x for x in reversed(s))\n      high = (x for x in s)\n    \n      l
        = next(low)\n      h = next(high)\n      try:\n        while True:\n          if
        y + l + h &gt; 2020:\n            l = next(low)\n          elif y + l + h
        &lt; 2020:\n            h = next(high)\n          else:\n            print(y,l,h,y+l+h,y*l*h)\n            break\n      except
        StopIteration:\n        continue", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_ge8npxe", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;h1&gt;Python&lt;/h1&gt;\n\n&lt;h2&gt;Part 1 O(n
        log(n))&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;with open(&amp;#39;day1.txt&amp;#39;)
        as file:\n  s = list(sorted(map(int,file)))\n\nlow = (x for x in reversed(s)
        if x &amp;lt;= 1010)\nhigh = (x for x in s if x &amp;gt; 1010)\n\nl = next(low)\nh
        = next(high)\n\nwhile True:\n  if l + h &amp;gt; 2020:\n    l = next(low)\n  elif
        l + h &amp;lt; 2020:\n    h = next(high)\n  else:\n    print(l,h,l+h,l*h)\n    break\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Part
        2 O(n^2)&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;with open(&amp;#39;day1.txt&amp;#39;)
        as file:\n  s = list(sorted(map(int,file)))\n\nfor y in s:\n  low = (x for
        x in reversed(s))\n  high = (x for x in s)\n\n  l = next(low)\n  h = next(high)\n  try:\n    while
        True:\n      if y + l + h &amp;gt; 2020:\n        l = next(low)\n      elif
        y + l + h &amp;lt; 2020:\n        h = next(high)\n      else:\n        print(y,l,h,y+l+h,y*l*h)\n        break\n  except
        StopIteration:\n    continue\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8npxe/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606808829.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606808829.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge8nqf4", "id": "ge8nqf4", "parent_id":
        "t1_ge8npxe", "depth": 1, "children": ["ge8nqf4"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606821160.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8p2li", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "chrispsn_ok",
        "can_mod_post": false, "created_utc": 1606810102.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_7tpvnvx", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**k9**\n\n    i:`i$0:`1.txt\n    t:i@+!2##i\n    */t@*&amp;~d:2020-+/+t\n    */(t,''d)@*&amp;i''d        /
        assumes 2020-sum is not one of the two numbers...\n\n**k7** (has a `cmb` primitive):\n\n    i:`i$0:`1.txt\n    {*/*(2020=+/)#i@cmb[x;#i]}''2
        3", "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;k9&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;i:`i$0:`1.txt\nt:i@+!2##i\n*/t@*&amp;amp;~d:2020-+/+t\n*/(t,&amp;#39;d)@*&amp;amp;i&amp;#39;d        /
        assumes 2020-sum is not one of the two numbers...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;k7&lt;/strong&gt;
        (has a &lt;code&gt;cmb&lt;/code&gt; primitive):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;i:`i$0:`1.txt\n{*/*(2020=+/)#i@cmb[x;#i]}&amp;#39;2
        3\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8p2li/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8p2li", "created":
        1606810102.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606811975.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8pc39", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ZoDalek",
        "can_mod_post": false, "created_utc": 1606810358.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_12jkz0", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**C**\n\n[Brute force](https://github.com/sjmulder/aoc/blob/master/2020/day01/solve2.c)\n\n[Pre-sort](https://github.com/sjmulder/aoc/blob/master/2020/day01/solve2-sort.c)
        (less iteration at cost of a quicksort)\n\n**C#**\n\n[Even bruter force LINQ](https://github.com/sjmulder/aoc/blob/master/2020/day01-cs/Program.cs)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/sjmulder/aoc/blob/master/2020/day01/solve2.c\"&gt;Brute
        force&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/sjmulder/aoc/blob/master/2020/day01/solve2-sort.c\"&gt;Pre-sort&lt;/a&gt;
        (less iteration at cost of a quicksort)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;C#&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/sjmulder/aoc/blob/master/2020/day01-cs/Program.cs\"&gt;Even
        bruter force LINQ&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8pc39/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8pc39", "created":
        1606810358.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_ge97whf", "id": "ge97whf", "parent_id":
        "t1_ge8pc39", "depth": 1, "children": ["ge97whf"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606811706.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8q2j7", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "GalacticDessert",
        "can_mod_post": false, "created_utc": 1606811079.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_f8lvtou", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Easy dict comprehension, Python\n\n    with open(\"01.txt\") as f:\n        inputs
        = [int(x.strip()) for x in f.readlines()]\n    \n    print({a + b: a * b for
        i, a in enumerate(inputs) for b in inputs[i + 1 : -1]}[2020])\n    \n    print(\n        {\n            a
        + b + c: a * b * c\n            for i, a in enumerate(inputs)\n            for
        j, b in enumerate(inputs)\n            for k, c in enumerate(inputs)\n            if
        i &lt; j and j &lt; k\n        }[2020]\n    )", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Easy dict comprehension, Python&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with
        open(&amp;quot;01.txt&amp;quot;) as f:\n    inputs = [int(x.strip()) for x
        in f.readlines()]\n\nprint({a + b: a * b for i, a in enumerate(inputs) for
        b in inputs[i + 1 : -1]}[2020])\n\nprint(\n    {\n        a + b + c: a * b
        * c\n        for i, a in enumerate(inputs)\n        for j, b in enumerate(inputs)\n        for
        k, c in enumerate(inputs)\n        if i &amp;lt; j and j &amp;lt; k\n    }[2020]\n)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8q2j7/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8q2j7", "created":
        1606811079.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_ge8q304", "id": "ge8q304", "parent_id":
        "t1_ge8q2j7", "depth": 1, "children": ["ge8q304"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8rqxk",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "EAJakobsen",
        "can_mod_post": false, "created_utc": 1606812807.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_5mwd5ka8", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Na\u00efve Python solution for part 1 and 2, using nested for-loops.\n\n    with
        open(\"01.in\") as f:\n        numbers = [int(x) for x in f.read().split(\"\\n\")]\n    \n    n
        = len(numbers)\n    \n    for i in range(n):\n        for j in range(i + 1,
        n):\n            x, y = numbers[i], numbers[j]\n            if x + y == 2020:\n                print(\"Part
        1:\")\n                print(x * y)\n                print(\"-\" * 10)\n            for
        k in range(j + 1, n):\n                z = numbers[k]\n                if
        x + y + z == 2020:\n                    print(\"Part 2:\")\n                    print(x
        * y * z)", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Na\u00efve
        Python solution for part 1 and 2, using nested for-loops.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with
        open(&amp;quot;01.in&amp;quot;) as f:\n    numbers = [int(x) for x in f.read().split(&amp;quot;\\n&amp;quot;)]\n\nn
        = len(numbers)\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        x,
        y = numbers[i], numbers[j]\n        if x + y == 2020:\n            print(&amp;quot;Part
        1:&amp;quot;)\n            print(x * y)\n            print(&amp;quot;-&amp;quot;
        * 10)\n        for k in range(j + 1, n):\n            z = numbers[k]\n            if
        x + y + z == 2020:\n                print(&amp;quot;Part 2:&amp;quot;)\n                print(x
        * y * z)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8rqxk/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8rqxk", "created":
        1606812807.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8rsst",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "MuumiJumala",
        "can_mod_post": false, "created_utc": 1606812860.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_9hygu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Code golf (Ruby)\n\n    i=$&lt;.map &amp;:to_i\n    puts [2,3].map{|n|i.combination(n).find{|x|x.sum==2020}.reduce:*}",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Code golf (Ruby)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;i=$&amp;lt;.map
        &amp;amp;:to_i\nputs [2,3].map{|n|i.combination(n).find{|x|x.sum==2020}.reduce:*}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8rsst/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8rsst", "created":
        1606812860.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge908p9", "id": "ge908p9", "parent_id":
        "t1_ge8rsst", "depth": 1, "children": ["ge908p9"]}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8sd2z", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        3, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_ge8sd2z", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8sd2z/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606813444.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606813444.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind":
        "more", "data": {"count": 5, "name": "t1_ge8v43t", "id": "ge8v43t", "parent_id":
        "t1_ge8sd2z", "depth": 1, "children": ["ge8v43t"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606814245.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8sucw", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "naim42",
        "can_mod_post": false, "created_utc": 1606813969.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_lp3fbks", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# [Haskell](https://github.com/ncfavier/aoc/blob/master/src/2020/Day01.hs)\n\n    solve
        :: Int -&gt; [Int] -&gt; Int\n    solve n nums = product . head $ go n nums
        [] where\n        go 0 _ xs = xs &lt;$ guard (sum xs == 2020)\n        go
        n nums xs = do\n            x:tail &lt;- tails nums\n            go (pred
        n) tail (x:xs)\n    \n    main = do\n        nums &lt;- parseInputLines number\n        print
        (solve 2 nums)\n        print (solve 3 nums)", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"https://github.com/ncfavier/aoc/blob/master/src/2020/Day01.hs\"&gt;Haskell&lt;/a&gt;&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;solve
        :: Int -&amp;gt; [Int] -&amp;gt; Int\nsolve n nums = product . head $ go n
        nums [] where\n    go 0 _ xs = xs &amp;lt;$ guard (sum xs == 2020)\n    go
        n nums xs = do\n        x:tail &amp;lt;- tails nums\n        go (pred n) tail
        (x:xs)\n\nmain = do\n    nums &amp;lt;- parseInputLines number\n    print
        (solve 2 nums)\n    print (solve 3 nums)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8sucw/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8sucw", "created":
        1606813969.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge8sus7", "id": "ge8sus7", "parent_id":
        "t1_ge8sucw", "depth": 1, "children": ["ge8sus7"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8t51y",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "gyorokpeter",
        "can_mod_post": false, "created_utc": 1606814286.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_spppp", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Q**: having some fun with iterators. There are ways to write the same more
        simply (e.g. using the cross function) but are slower.\n\n    d1p1:{a:\"J\"$\"\\n\"vs
        x;ind:til[count a];s:a+/:a;prd a first raze ind,/:''where each s=2020};\n    d1p2:{a:\"J\"$\"\\n\"vs
        x;ind:til[count a];s:a+/:\\:a+/:a;prd a first raze raze ind,/:''''((ind,/:'')'')where
        each/:s=2020};", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;:
        having some fun with iterators. There are ways to write the same more simply
        (e.g. using the cross function) but are slower.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;d1p1:{a:&amp;quot;J&amp;quot;$&amp;quot;\\n&amp;quot;vs
        x;ind:til[count a];s:a+/:a;prd a first raze ind,/:&amp;#39;where each s=2020};\nd1p2:{a:&amp;quot;J&amp;quot;$&amp;quot;\\n&amp;quot;vs
        x;ind:til[count a];s:a+/:\\:a+/:a;prd a first raze raze ind,/:&amp;#39;&amp;#39;((ind,/:&amp;#39;)&amp;#39;)where
        each/:s=2020};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8t51y/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8t51y", "created": 1606814286.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 2, "name":
        "t1_ge93gki", "id": "ge93gki", "parent_id": "t1_ge8t51y", "depth": 1, "children":
        ["ge93gki", "ge8zqvm"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": 1606816611.0, "mod_reason_by": null, "banned_by": null, "ups": 3,
        "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8temf",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Siraja",
        "can_mod_post": false, "created_utc": 1606814574.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_b64zz", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Python3**\n\nNothing fancy, used libraries to make my life easy.\n\n    from
        itertools import combinations\n    from math import prod\n    \n    def productofsum(s,
        n, t = 2020):\n        for c in combinations([int(r) for r in s.split(\"\\n\")],
        n):\n            if sum(c) == t:\n                return prod(c)", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python3&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Nothing
        fancy, used libraries to make my life easy.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from
        itertools import combinations\nfrom math import prod\n\ndef productofsum(s,
        n, t = 2020):\n    for c in combinations([int(r) for r in s.split(&amp;quot;\\n&amp;quot;)],
        n):\n        if sum(c) == t:\n            return prod(c)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8temf/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8temf", "created":
        1606814574.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_ge8u479", "id": "ge8u479", "parent_id":
        "t1_ge8temf", "depth": 1, "children": ["ge8u479"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8tuo5",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "mb0x40",
        "can_mod_post": false, "created_utc": 1606815052.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_147sgjun", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Part 1 in ATS.  A glorious 200 lines of mostly memory-safety proofs. https://github.com/mb64/aoc-2020/blob/main/01/a.dats\n\nI
        wanted to do some fancier algorithms, like sort + binary search, but it was
        already enough of a trial to get the proofs right for the naive 2-loops solution
        that I didn''t bother.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Part
        1 in ATS.  A glorious 200 lines of mostly memory-safety proofs. &lt;a href=\"https://github.com/mb64/aoc-2020/blob/main/01/a.dats\"&gt;https://github.com/mb64/aoc-2020/blob/main/01/a.dats&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I
        wanted to do some fancier algorithms, like sort + binary search, but it was
        already enough of a trial to get the proofs right for the naive 2-loops solution
        that I didn&amp;#39;t bother.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8tuo5/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8tuo5", "created": 1606815052.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 1, "name":
        "t1_ge8u4zr", "id": "ge8u4zr", "parent_id": "t1_ge8tuo5", "depth": 1, "children":
        ["ge8u4zr"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8w3bh", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "djankowski",
        "can_mod_post": false, "created_utc": 1606817533.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_4xuo5", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Are there poems this year?\n\n    Combinations,\n    Feeds remuneration,\n    For
        my Christmas vacation.\n\nJulia\n\n    using Combinatorics\n    \n    function
        dec01(x::Array{Int}, n::Int)\n        combs = combinations(x, n)\n        for
        i in combs\n            if sum(i) == 2020\n                return prod(i)\n            end\n        end\n    end\n    \n    part1(x)
        = dec01(x, 2)\n    part2(x) = dec01(x, 3)", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Are there poems this year?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Combinations,\nFeeds
        remuneration,\nFor my Christmas vacation.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Julia&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;using
        Combinatorics\n\nfunction dec01(x::Array{Int}, n::Int)\n    combs = combinations(x,
        n)\n    for i in combs\n        if sum(i) == 2020\n            return prod(i)\n        end\n    end\nend\n\npart1(x)
        = dec01(x, 2)\npart2(x) = dec01(x, 3)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8w3bh/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8w3bh", "created":
        1606817533.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606823360.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8x995", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "danprince",
        "can_mod_post": false, "created_utc": 1606818827.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_69fm3", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Irresponsible Javascript solution.\n\n    a=b=0;xs=(require(\"fs\").readFileSync(\"input.txt\")+\"\").split(\"\\n\")\n    \n    for(x
        of xs)for(y of xs)for(z of xs)\n      2020-x-y-a||(a=x*y),2020-x-y-z-b||(b=x*y*z)\n    \n    console.log(a,b)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Irresponsible Javascript
        solution.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;a=b=0;xs=(require(&amp;quot;fs&amp;quot;).readFileSync(&amp;quot;input.txt&amp;quot;)+&amp;quot;&amp;quot;).split(&amp;quot;\\n&amp;quot;)\n\nfor(x
        of xs)for(y of xs)for(z of xs)\n  2020-x-y-a||(a=x*y),2020-x-y-z-b||(b=x*y*z)\n\nconsole.log(a,b)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8x995/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8x995", "created":
        1606818827.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge90gu2", "id": "ge90gu2", "parent_id":
        "t1_ge8x995", "depth": 1, "children": ["ge90gu2"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8z0r0",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "death",
        "can_mod_post": false, "created_utc": 1606820719.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_4fr2", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "[Day 1 solution in Common Lisp](https://gist.github.com/death/58bb55df8848430e590e40d3619cc2fd).\n\nScreaming
        on your first day always makes a good impression.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://gist.github.com/death/58bb55df8848430e590e40d3619cc2fd\"&gt;Day
        1 solution in Common Lisp&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Screaming on your
        first day always makes a good impression.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8z0r0/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8z0r0", "created": 1606820719.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 3, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "ge8zqyt", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "amarsuperstar", "can_mod_post": false,
        "created_utc": 1606821492.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 3, "author_fullname": "t2_3z2kw", "report_reasons": null, "approved_by":
        null, "all_awardings": [], "collapsed": false, "body": "Elixir part 1 and
        2\n\n    defmodule Day01 do\n      defp parse(input) do\n        input\n        |&gt;
        String.split()\n        |&gt; Enum.map(&amp;String.to_integer/1)\n      end\n\n      def
        part1(input) do\n        input = parse(input)\n        [{x, y} | _] = for
        x &lt;- input, y &lt;- input, x + y == 2020, do: {x, y}\n        x * y\n      end\n\n      def
        part2(input) do\n        input = parse(input)\n        [{x, y, z} | _] = for
        x &lt;- input, y &lt;- input, z &lt;- input, x + y + z == 2020, do: {x, y,
        z}\n        x * y * z\n      end\n    end", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Elixir part 1 and 2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;defmodule
        Day01 do\n  defp parse(input) do\n    input\n    |&amp;gt; String.split()\n    |&amp;gt;
        Enum.map(&amp;amp;String.to_integer/1)\n  end\n\n  def part1(input) do\n    input
        = parse(input)\n    [{x, y} | _] = for x &amp;lt;- input, y &amp;lt;- input,
        x + y == 2020, do: {x, y}\n    x * y\n  end\n\n  def part2(input) do\n    input
        = parse(input)\n    [{x, y, z} | _] = for x &amp;lt;- input, y &amp;lt;- input,
        z &amp;lt;- input, x + y + z == 2020, do: {x, y, z}\n    x * y * z\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8zqyt/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8zqyt", "created":
        1606821492.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 5, "name": "t1_ge90rtn", "id": "ge90rtn", "parent_id":
        "t1_ge8zqyt", "depth": 1, "children": ["ge90rtn", "ge92441"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606826269.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge946ho", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "shepherd2442",
        "can_mod_post": false, "created_utc": 1606825788.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_3dpdbtix", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# Python Generic Solution:\n\nWith this solution you can get the result for
        any number of number.\n\nGithub repo: [https://github.com/Shepherd2442/AoC2k20](https://github.com/Shepherd2442/AoC2k20)\n\n[main.py](https://main.py):\n\n    from
        utils import FileUtils\n    import itertools\n    import numpy as np\n    \n    def
        get_multi(input, quantity):\n        for item in itertools.combinations(input,
        quantity):\n            if sum(item) == 2020:\n                return np.prod(item)\n    \n    def
        part_1():\n        return get_multi(FileUtils.input(), 2)\n    \n    def part_2():\n        return
        get_multi(FileUtils.input(), 3)\n    \n    if __name__ == \"__main__\":\n        print(
        part_1() )\n        print( part_2() )\n\n[utils.py](https://utils.py):\n\n    import
        sys\n    \n    class FileUtils:\n        @staticmethod\n        def input():\n            with
        open(sys.argv[1], ''r'') as file:\n                lines = [int(line.rstrip())
        for line in file]\n            return lines", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;h1&gt;Python Generic Solution:&lt;/h1&gt;\n\n&lt;p&gt;With
        this solution you can get the result for any number of number.&lt;/p&gt;\n\n&lt;p&gt;Github
        repo: &lt;a href=\"https://github.com/Shepherd2442/AoC2k20\"&gt;https://github.com/Shepherd2442/AoC2k20&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://main.py\"&gt;main.py&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from
        utils import FileUtils\nimport itertools\nimport numpy as np\n\ndef get_multi(input,
        quantity):\n    for item in itertools.combinations(input, quantity):\n        if
        sum(item) == 2020:\n            return np.prod(item)\n\ndef part_1():\n    return
        get_multi(FileUtils.input(), 2)\n\ndef part_2():\n    return get_multi(FileUtils.input(),
        3)\n\nif __name__ == &amp;quot;__main__&amp;quot;:\n    print( part_1() )\n    print(
        part_2() )\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=\"https://utils.py\"&gt;utils.py&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        sys\n\nclass FileUtils:\n    @staticmethod\n    def input():\n        with
        open(sys.argv[1], &amp;#39;r&amp;#39;) as file:\n            lines = [int(line.rstrip())
        for line in file]\n        return lines\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge946ho/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge946ho", "created":
        1606825788.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_geb21mx", "id": "geb21mx", "parent_id":
        "t1_ge946ho", "depth": 1, "children": ["geb21mx"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606834247.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge952tt", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "bcap84",
        "can_mod_post": false, "created_utc": 1606826556.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_plwsr", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Py3 solution\n\nPart 1 is O(n) in both time and space complexity. \nPart
        2 is O(n\\^2) in time and O(n) in space complexity.\n\nFWIW `set` is O(1)
        for insertion and lookup\n\n    def part1(numbers: List[int]) -&gt; Optional[int]:\n        visited:
        Set[int] = set()\n        for num in numbers:\n            other_num = 2020
        - num\n            if other_num in visited:\n                return num *
        other_num\n            else:\n                visited.add(num)\n        return
        None\n\n\n    def part2(numbers: List[int]) -&gt; Optional[int]:\n        visited:
        Set[int] = set()\n        for idx1, num1 in enumerate(numbers):\n            idx2
        = idx1 + 1\n            while idx2 &lt; len(numbers):\n                num2
        = numbers[idx2]\n                num3 = 2020 - num2 - num1\n                if
        num3 in visited:\n                    return num1 * num2 * num3\n                visited.add(num2)\n                idx2
        += 1\n            visited.add(num1)\n        return None\n\nOn part2 there
        are calls to `visited.add` with repeated values, which can be avoided. Nevertheless
        an add call for a value that is already present is idempotent and O(1) complexity,
        so less concerning. Anyway, the part2 version which avoids the repeated calls:\n\n    def
        part2(numbers: List[int]) -&gt; Optional[int]:\n        visited: Set[int]
        = set()\n        for idx1, num1 in enumerate(numbers):\n            idx2 =
        idx1 + 1\n            while idx2 &lt; len(numbers):\n                num2
        = numbers[idx2]\n                num3 = 2020 - num2 - num1\n                if
        num3 in visited:\n                    return num1 * num2 * num3\n                if
        idx1 == 0:\n                    visited.add(num2)\n                idx2 +=
        1\n            if idx1 == 0:\n                visited.add(num1)\n        return
        None", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Py3
        solution&lt;/p&gt;\n\n&lt;p&gt;Part 1 is O(n) in both time and space complexity.
        \nPart 2 is O(n^2) in time and O(n) in space complexity.&lt;/p&gt;\n\n&lt;p&gt;FWIW
        &lt;code&gt;set&lt;/code&gt; is O(1) for insertion and lookup&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        part1(numbers: List[int]) -&amp;gt; Optional[int]:\n    visited: Set[int]
        = set()\n    for num in numbers:\n        other_num = 2020 - num\n        if
        other_num in visited:\n            return num * other_num\n        else:\n            visited.add(num)\n    return
        None\n\n\ndef part2(numbers: List[int]) -&amp;gt; Optional[int]:\n    visited:
        Set[int] = set()\n    for idx1, num1 in enumerate(numbers):\n        idx2
        = idx1 + 1\n        while idx2 &amp;lt; len(numbers):\n            num2 =
        numbers[idx2]\n            num3 = 2020 - num2 - num1\n            if num3
        in visited:\n                return num1 * num2 * num3\n            visited.add(num2)\n            idx2
        += 1\n        visited.add(num1)\n    return None\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;On
        part2 there are calls to &lt;code&gt;visited.add&lt;/code&gt; with repeated
        values, which can be avoided. Nevertheless an add call for a value that is
        already present is idempotent and O(1) complexity, so less concerning. Anyway,
        the part2 version which avoids the repeated calls:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        part2(numbers: List[int]) -&amp;gt; Optional[int]:\n    visited: Set[int]
        = set()\n    for idx1, num1 in enumerate(numbers):\n        idx2 = idx1 +
        1\n        while idx2 &amp;lt; len(numbers):\n            num2 = numbers[idx2]\n            num3
        = 2020 - num2 - num1\n            if num3 in visited:\n                return
        num1 * num2 * num3\n            if idx1 == 0:\n                visited.add(num2)\n            idx2
        += 1\n        if idx1 == 0:\n            visited.add(num1)\n    return None\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge952tt/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge952tt", "created":
        1606826556.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge953f7", "id": "ge953f7", "parent_id":
        "t1_ge952tt", "depth": 1, "children": ["ge953f7"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge96qlc",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Kadda42",
        "can_mod_post": false, "created_utc": 1606827869.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_1ajyntgj", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My Python solution with nested loops.\n\nPart 1:\n\n    def advent_riddle_1_1(exp):\n        my_expenses
        = exp[:]\n        for i in range(0, len(my_expenses)):\n            for j
        in range(i+1, len(my_expenses)):\n                if (my_expenses[i] + my_expenses[j])
        == 2020:\n                    return(my_expenses[i] * my_expenses[j])\n\nPart
        2:\n\n    def advent_riddle_1_2(exp):\n        my_expenses = exp[:]\n        for
        i in range(0, len(my_expenses)):\n            for j in range(i+1, len(my_expenses)):\n                if
        (my_expenses[i] + my_expenses[j]) &lt; 2020:\n                    for k in
        range(j+1, len(my_expenses)):\n                        if (my_expenses[i]
        + my_expenses[j] + my_expenses[k]) == 2020:\n                            return(my_expenses[i]
        * my_expenses[j] * my_expenses[k])", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;My Python solution with nested loops.&lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def advent_riddle_1_1(exp):\n    my_expenses
        = exp[:]\n    for i in range(0, len(my_expenses)):\n        for j in range(i+1,
        len(my_expenses)):\n            if (my_expenses[i] + my_expenses[j]) == 2020:\n                return(my_expenses[i]
        * my_expenses[j])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part 2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        advent_riddle_1_2(exp):\n    my_expenses = exp[:]\n    for i in range(0, len(my_expenses)):\n        for
        j in range(i+1, len(my_expenses)):\n            if (my_expenses[i] + my_expenses[j])
        &amp;lt; 2020:\n                for k in range(j+1, len(my_expenses)):\n                    if
        (my_expenses[i] + my_expenses[j] + my_expenses[k]) == 2020:\n                        return(my_expenses[i]
        * my_expenses[j] * my_expenses[k])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge96qlc/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge96qlc", "created":
        1606827869.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_ge9bupw", "id": "ge9bupw", "parent_id":
        "t1_ge96qlc", "depth": 1, "children": ["ge9bupw"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9d0ld",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "carrdinal-dnb",
        "can_mod_post": false, "created_utc": 1606832070.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_2bqagjk7", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Here''s my Kotlin solution:\n\n    import java.io.File\n    \n    fun main()
        {\n        day1()\n    }\n    \n    fun day1(input: List&lt;String&gt; = File(\"src/main/resources/input/1.txt\").readLines())
        {\n        val ints = input.map { Integer.valueOf(it) }\n    \n        val
        solution1 = pairs(ints)\n            .filter { (a, b) -&gt; a + b == 2020
        }\n            .map { (a, b) -&gt; a * b }\n            .first()\n    \n        println(\"Solution
        1: $solution1\")\n    \n        val solution2 = triples(ints)\n            .filter
        { (a, b, c) -&gt; a + b + c == 2020 }\n            .map { (a, b, c) -&gt;
        a * b * c }\n            .first()\n    \n        println(\"Solution 2: $solution2\")\n    }\n    \n    fun
        &lt;T&gt; pairs(list: List&lt;T&gt;): Sequence&lt;Pair&lt;T, T&gt;&gt; = sequence
        {\n        for (i in 0 until list.size - 1)\n            for (j in i + 1 until
        list.size)\n                yield(list[i] to list[j])\n    }\n    \n    fun
        &lt;T&gt; triples(list: List&lt;T&gt;): Sequence&lt;Triple&lt;T, T, T&gt;&gt;
        = sequence {\n        for (i in 0 until list.size - 2)\n            for (j
        in i + 1 until list.size - 1)\n                for (k in j + 1 until list.size)\n                    yield(Triple(list[i],
        list[j], list[k]))\n    }", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s
        my Kotlin solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import java.io.File\n\nfun
        main() {\n    day1()\n}\n\nfun day1(input: List&amp;lt;String&amp;gt; = File(&amp;quot;src/main/resources/input/1.txt&amp;quot;).readLines())
        {\n    val ints = input.map { Integer.valueOf(it) }\n\n    val solution1 =
        pairs(ints)\n        .filter { (a, b) -&amp;gt; a + b == 2020 }\n        .map
        { (a, b) -&amp;gt; a * b }\n        .first()\n\n    println(&amp;quot;Solution
        1: $solution1&amp;quot;)\n\n    val solution2 = triples(ints)\n        .filter
        { (a, b, c) -&amp;gt; a + b + c == 2020 }\n        .map { (a, b, c) -&amp;gt;
        a * b * c }\n        .first()\n\n    println(&amp;quot;Solution 2: $solution2&amp;quot;)\n}\n\nfun
        &amp;lt;T&amp;gt; pairs(list: List&amp;lt;T&amp;gt;): Sequence&amp;lt;Pair&amp;lt;T,
        T&amp;gt;&amp;gt; = sequence {\n    for (i in 0 until list.size - 1)\n        for
        (j in i + 1 until list.size)\n            yield(list[i] to list[j])\n}\n\nfun
        &amp;lt;T&amp;gt; triples(list: List&amp;lt;T&amp;gt;): Sequence&amp;lt;Triple&amp;lt;T,
        T, T&amp;gt;&amp;gt; = sequence {\n    for (i in 0 until list.size - 2)\n        for
        (j in i + 1 until list.size - 1)\n            for (k in j + 1 until list.size)\n                yield(Triple(list[i],
        list[j], list[k]))\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9d0ld/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge9d0ld", "created": 1606832070.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 1, "name":
        "t1_geackmq", "id": "geackmq", "parent_id": "t1_ge9d0ld", "depth": 1, "children":
        ["geackmq"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9ddtn", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Nummerblatt",
        "can_mod_post": false, "created_utc": 1606832291.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_17hl4c", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Python**\n\n    import itertools\n    combinatorials = itertools.combinations(set(input),
        2)\n    for i in combinatorials:\n        if sum(i) == 2020:\n            return(i[0]
        * i[1] * i[2])", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        itertools\ncombinatorials = itertools.combinations(set(input), 2)\nfor i in
        combinatorials:\n    if sum(i) == 2020:\n        return(i[0] * i[1] * i[2])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9ddtn/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9ddtn", "created":
        1606832291.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge9f64i", "id": "ge9f64i", "parent_id":
        "t1_ge9ddtn", "depth": 1, "children": ["ge9f64i"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9h6ew",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "iruoy",
        "can_mod_post": false, "created_utc": 1606834473.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_exo25r2", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python 3\n\n    from itertools import combinations\n    from math import
        prod\n    \n    \n    def find_combination(amount_of_entries):\n        for
        combination in combinations(entries, amount_of_entries):\n            if sum(combination)
        == 2020:\n                return prod(combination)\n    \n    \n    print(find_combination(2))\n    print(find_combination(3))",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python 3&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from
        itertools import combinations\nfrom math import prod\n\n\ndef find_combination(amount_of_entries):\n    for
        combination in combinations(entries, amount_of_entries):\n        if sum(combination)
        == 2020:\n            return prod(combination)\n\n\nprint(find_combination(2))\nprint(find_combination(3))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9h6ew/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9h6ew", "created":
        1606834473.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606848573.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9ntyq", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "engageant",
        "can_mod_post": false, "created_utc": 1606837894.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_5qeij", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**PowerShell**\n\n    #Part 1\n    [int[]]$in1 = Get-Content \".\\in.txt\"
        | Sort-Object -Descending\n    \n    foreach ($num in $in1) {\n         $testVal
        = 2020 - $num\n         if ($in1 -contains $testVal) {\n              Write-Host
        \"Part 1: $num * $testVal = \" ($num * $testVal)\n              break   \n         }          \n    }\n    \n    #Part
        2\n    #I''m sure there''s a more elegant way to do this, but I was playing
        around with the magic .Where() and .ForEach() \n    ($in1 | Sort-Object -Descending).ForEach{
        \n         $num1 = $_\n         $in2 = $in1.Where{ $_ -ne $num1 }\n         $in2.ForEach{\n              $num2
        = $_\n              $in3 = $in2.Where{ $_ -ne $num2 }\n              $in3.ForEach{               \n                   if
        ($num1 + $num2 + $_ -eq 2020) {                    \n                        Write-Host
        \"Part 2: $num1 * $num2 * $_ =\" ($num1 * $num2 * $_)                    \n                        break                                                                             \n                   }\n              }      \n         }     \n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;PowerShell&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#Part
        1\n[int[]]$in1 = Get-Content &amp;quot;.\\in.txt&amp;quot; | Sort-Object -Descending\n\nforeach
        ($num in $in1) {\n     $testVal = 2020 - $num\n     if ($in1 -contains $testVal)
        {\n          Write-Host &amp;quot;Part 1: $num * $testVal = &amp;quot; ($num
        * $testVal)\n          break   \n     }          \n}\n\n#Part 2\n#I&amp;#39;m
        sure there&amp;#39;s a more elegant way to do this, but I was playing around
        with the magic .Where() and .ForEach() \n($in1 | Sort-Object -Descending).ForEach{
        \n     $num1 = $_\n     $in2 = $in1.Where{ $_ -ne $num1 }\n     $in2.ForEach{\n          $num2
        = $_\n          $in3 = $in2.Where{ $_ -ne $num2 }\n          $in3.ForEach{               \n               if
        ($num1 + $num2 + $_ -eq 2020) {                    \n                    Write-Host
        &amp;quot;Part 2: $num1 * $num2 * $_ =&amp;quot; ($num1 * $num2 * $_)                    \n                    break                                                                             \n               }\n          }      \n     }     \n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9ntyq/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9ntyq", "created":
        1606837894.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 7, "name": "t1_geb16kv", "id": "geb16kv", "parent_id":
        "t1_ge9ntyq", "depth": 1, "children": ["geb16kv", "geabu09", "gea94lo"]}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9osbn", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "JamieMansfield",
        "can_mod_post": false, "created_utc": 1606838356.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_nugii", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My C# Solution: https://gist.github.com/jamierocks/8539dee20467952f92b8965e209d672d",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My C# Solution: &lt;a
        href=\"https://gist.github.com/jamierocks/8539dee20467952f92b8965e209d672d\"&gt;https://gist.github.com/jamierocks/8539dee20467952f92b8965e209d672d&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9osbn/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9osbn", "created":
        1606838356.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9sgsy",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "netneoblog",
        "can_mod_post": false, "created_utc": 1606840130.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_qr7z7", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "quick and dirty python 3:\n\n    numbers = [1933, 1963, ......removed to
        keep short....]\n    for x in numbers:\n        for y in numbers:\n            if
        x + y == 2020:\n                    print(f''x= {x} y= {y} answer is {x*y}'')\n    for
        x in numbers:\n        for y in numbers:\n            for z in numbers:\n                if
        x + y + z == 2020:\n                    print(f''x= {x} y= {y} z= {z} answer
        is {x*y*z}'')\n                    break", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;quick and dirty python 3:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;numbers
        = [1933, 1963, ......removed to keep short....]\nfor x in numbers:\n    for
        y in numbers:\n        if x + y == 2020:\n                print(f&amp;#39;x=
        {x} y= {y} answer is {x*y}&amp;#39;)\nfor x in numbers:\n    for y in numbers:\n        for
        z in numbers:\n            if x + y + z == 2020:\n                print(f&amp;#39;x=
        {x} y= {y} z= {z} answer is {x*y*z}&amp;#39;)\n                break\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9sgsy/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9sgsy", "created":
        1606840130.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_ge9wcnm", "id": "ge9wcnm", "parent_id":
        "t1_ge9sgsy", "depth": 1, "children": ["ge9wcnm"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606845115.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9x8du", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "alexthelyon",
        "can_mod_post": false, "created_utc": 1606842417.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_c8q8u", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Rust implementation (excluding the code to parse and sort the input):\n\n    pub
        fn find_two(series: &amp;[u32], target: u32) -&gt; Option&lt;[u32; 2]&gt;
        {\n        let mut start = series.iter().peekable();\n        let mut end
        = series.iter().rev().peekable();\n        while let (Some(&amp;&amp;low),
        Some(&amp;&amp;high)) = (start.peek(), end.peek()) {\n            match (low
        + high).cmp(&amp;target) {\n                std::cmp::Ordering::Less =&gt;
        start.next(),\n                std::cmp::Ordering::Equal =&gt; {\n                    return
        Some([low, high]);\n                }\n                std::cmp::Ordering::Greater
        =&gt; end.next(),\n            };\n        }\n        None\n    }\n\n    pub
        fn find_three(series: &amp;[u32], target: u32) -&gt; Option&lt;[u32; 3]&gt;
        {\n        series\n            .iter()\n            .filter_map(|&amp;i| find_two(series,
        target - i).map(|[a, b]| [a, b, i]))\n            .next()\n    }\n\nResults
        are pretty good, but obviously sorting is going to be expensive:\n\n    find_two      time:   [263.47
        ns 264.81 ns 266.64 ns]\n    find_three    time:   [857.03 ns 860.76 ns 865.82
        ns]", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Rust
        implementation (excluding the code to parse and sort the input):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;pub
        fn find_two(series: &amp;amp;[u32], target: u32) -&amp;gt; Option&amp;lt;[u32;
        2]&amp;gt; {\n    let mut start = series.iter().peekable();\n    let mut end
        = series.iter().rev().peekable();\n    while let (Some(&amp;amp;&amp;amp;low),
        Some(&amp;amp;&amp;amp;high)) = (start.peek(), end.peek()) {\n        match
        (low + high).cmp(&amp;amp;target) {\n            std::cmp::Ordering::Less
        =&amp;gt; start.next(),\n            std::cmp::Ordering::Equal =&amp;gt; {\n                return
        Some([low, high]);\n            }\n            std::cmp::Ordering::Greater
        =&amp;gt; end.next(),\n        };\n    }\n    None\n}\n\npub fn find_three(series:
        &amp;amp;[u32], target: u32) -&amp;gt; Option&amp;lt;[u32; 3]&amp;gt; {\n    series\n        .iter()\n        .filter_map(|&amp;amp;i|
        find_two(series, target - i).map(|[a, b]| [a, b, i]))\n        .next()\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Results
        are pretty good, but obviously sorting is going to be expensive:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;find_two      time:   [263.47
        ns 264.81 ns 266.64 ns]\nfind_three    time:   [857.03 ns 860.76 ns 865.82
        ns]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9x8du/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9x8du", "created":
        1606842417.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_geammhe", "id": "geammhe", "parent_id":
        "t1_ge9x8du", "depth": 1, "children": ["geammhe"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606889014.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9yjts", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "PapaDionisis",
        "can_mod_post": false, "created_utc": 1606843050.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_3pybqci9", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python \ud83d\ude01\n\n    from itertools import combinations\n    from math
        import prod\n    \n    for i in combinations(sums, 3):\n        if sum(i)
        == 2020:\n            print(prod(i))", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Python \ud83d\ude01&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from
        itertools import combinations\nfrom math import prod\n\nfor i in combinations(sums,
        3):\n    if sum(i) == 2020:\n        print(prod(i))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9yjts/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9yjts", "created":
        1606843050.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_ge9ztw4", "id": "ge9ztw4", "parent_id":
        "t1_ge9yjts", "depth": 1, "children": ["ge9ztw4"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gea0ovw",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Nevoic",
        "can_mod_post": false, "created_utc": 1606844070.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_qk9vy", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Here is my Haskell solution (where the data is in a `data.txt` file):\n\n\n    import
        Control.Monad\n\n    findProduct n = product . head . filter ((== 2020) .
        sum) . replicateM n\n\n    main = do\n        nums &lt;- map read . lines
        &lt;$&gt; readFile \"data.txt\"\n        forM_ [2,3] (print . (`findProduct`
        nums))\n\nThe problem is solved by the one line `findProduct`. The first line
        in `main` reads the lines of text as numbers, and the second line prints the
        solution for 2 and 3 (part 1 and 2 respectively).", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Here is my Haskell solution (where the data is in
        a &lt;code&gt;data.txt&lt;/code&gt; file):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        Control.Monad\n\nfindProduct n = product . head . filter ((== 2020) . sum)
        . replicateM n\n\nmain = do\n    nums &amp;lt;- map read . lines &amp;lt;$&amp;gt;
        readFile &amp;quot;data.txt&amp;quot;\n    forM_ [2,3] (print . (`findProduct`
        nums))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The problem is solved by the
        one line &lt;code&gt;findProduct&lt;/code&gt;. The first line in &lt;code&gt;main&lt;/code&gt;
        reads the lines of text as numbers, and the second line prints the solution
        for 2 and 3 (part 1 and 2 respectively).&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea0ovw/", "subreddit_type":
        "public", "locked": false, "name": "t1_gea0ovw", "created": 1606844070.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 2, "name":
        "t1_gea0q73", "id": "gea0q73", "parent_id": "t1_gea0ovw", "depth": 1, "children":
        ["gea0q73"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gea2gdy", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "gil0mendes",
        "can_mod_post": false, "created_utc": 1606844902.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_lfzrz", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Learning rust... now the best solution but it works \ud83d\ude05  \n[https://github.com/gil0mendes/advent-of-code/blob/master/2020/day01/src/main.rs](https://github.com/gil0mendes/advent-of-code/blob/master/2020/day01/src/main.rs)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Learning rust... now
        the best solution but it works \ud83d\ude05&lt;br/&gt;\n&lt;a href=\"https://github.com/gil0mendes/advent-of-code/blob/master/2020/day01/src/main.rs\"&gt;https://github.com/gil0mendes/advent-of-code/blob/master/2020/day01/src/main.rs&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea2gdy/",
        "subreddit_type": "public", "locked": false, "name": "t1_gea2gdy", "created":
        1606844902.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gea8mt6",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "wzkx",
        "can_mod_post": false, "created_utc": 1606847823.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_t1qbo", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**J**. Very straightforward and simple :) Well, internally it finds all the
        solutions, but it''s ok for this small data.\n\n    m=: \".&amp;&gt; cutLF
        CR-.~fread''01.dat''\n    echo {. (,m*/m) #~ ,2020=m+/m\n    echo {. (,m*/m*/m)
        #~ ,2020=m+/m+/m\n    exit 0", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;J&lt;/strong&gt;.
        Very straightforward and simple :) Well, internally it finds all the solutions,
        but it&amp;#39;s ok for this small data.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;m=:
        &amp;quot;.&amp;amp;&amp;gt; cutLF CR-.~fread&amp;#39;01.dat&amp;#39;\necho
        {. (,m*/m) #~ ,2020=m+/m\necho {. (,m*/m*/m) #~ ,2020=m+/m+/m\nexit 0\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea8mt6/",
        "subreddit_type": "public", "locked": false, "name": "t1_gea8mt6", "created":
        1606847823.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_gebbflo", "id": "gebbflo", "parent_id":
        "t1_gea8mt6", "depth": 1, "children": ["gebbflo"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geaek04",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "havetedjupt",
        "can_mod_post": false, "created_utc": 1606850584.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_bdbbi", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python\n\nPart 1\n\n    def find_sums1(nums):\n    \tfor num in nums:\n    \t\tif
        2020-num in nums:\n    \t\t\treturn ((2020-num)*num)\n    print(find_sums1(nums))\n    \n\nPart
        2\n\n    def find_sums2(nums):\n    \tfor num in nums:\n    \t\tfor n in nums:\n    \t\t\tif
        2020-num-n in nums:\n    \t\t\t\treturn ((2020-num-n)*num*n)\n    print(find_sums2(nums))",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python&lt;/p&gt;\n\n&lt;p&gt;Part
        1&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def find_sums1(nums):\n    for num in
        nums:\n        if 2020-num in nums:\n            return ((2020-num)*num)\nprint(find_sums1(nums))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def find_sums2(nums):\n    for num in
        nums:\n        for n in nums:\n            if 2020-num-n in nums:\n                return
        ((2020-num-n)*num*n)\nprint(find_sums2(nums))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geaek04/",
        "subreddit_type": "public", "locked": false, "name": "t1_geaek04", "created":
        1606850584.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geafecs",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "A_Travelling_Man",
        "can_mod_post": false, "created_utc": 1606850970.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_bd7uz", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Straight forward Rust solution, input stored in a file.\n\n    use std::fs::File;\n    use
        std::io::{BufReader, BufRead};\n    \n    fn main() {\n        let fname =
        \"../data/input.txt\";\n        let f: File;\n        match File::open(fname)
        {\n            Ok(v) =&gt; f = v,\n            Err(_e) =&gt; panic!(\"Unable
        to open data file\")\n        }\n        let reader = BufReader::new(f);\n        let
        mut vec: Vec&lt;i32&gt; = vec![];\n    \n        for l in reader.lines() {\n            match
        l {\n                Ok(v) =&gt; {\n                    match v.trim().parse::&lt;i32&gt;()
        {\n                        Ok(n) =&gt; vec.push(n),\n                        Err(_e)
        =&gt; panic!(\"Invalid number format\")\n                    }\n                },\n                Err(e)
        =&gt; panic!(\"{}\", e)\n            }\n        }\n\n       //Part1\n        for
        i in 0..vec.len()-1 {\n            for j in i+1..vec.len() {\n                if
        vec[i] + vec[j] == 2020 {\n                    println!(\"Entries: {}, {}\",
        vec[i], vec[j]);\n                    println!(\"Answer: {}\", vec[i] * vec[j]);\n                }\n            }\n        }\n        //Part
        2\n        for i in 0..vec.len()-2 {\n            for j in i+1..vec.len()-1
        {\n                for k in j+1..vec.len() {\n                    if vec[i]
        + vec[j] + vec[k] == 2020 {\n                        println!(\"Entries: {},
        {}, {}\", vec[i], vec[j], vec[k]);\n                        println!(\"Answer:
        {}\", vec[i] * vec[j] * vec[k]);\n                    }\n                }\n            }\n        }\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Straight forward Rust
        solution, input stored in a file.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use
        std::fs::File;\nuse std::io::{BufReader, BufRead};\n\nfn main() {\n    let
        fname = &amp;quot;../data/input.txt&amp;quot;;\n    let f: File;\n    match
        File::open(fname) {\n        Ok(v) =&amp;gt; f = v,\n        Err(_e) =&amp;gt;
        panic!(&amp;quot;Unable to open data file&amp;quot;)\n    }\n    let reader
        = BufReader::new(f);\n    let mut vec: Vec&amp;lt;i32&amp;gt; = vec![];\n\n    for
        l in reader.lines() {\n        match l {\n            Ok(v) =&amp;gt; {\n                match
        v.trim().parse::&amp;lt;i32&amp;gt;() {\n                    Ok(n) =&amp;gt;
        vec.push(n),\n                    Err(_e) =&amp;gt; panic!(&amp;quot;Invalid
        number format&amp;quot;)\n                }\n            },\n            Err(e)
        =&amp;gt; panic!(&amp;quot;{}&amp;quot;, e)\n        }\n    }\n\n   //Part1\n    for
        i in 0..vec.len()-1 {\n        for j in i+1..vec.len() {\n            if vec[i]
        + vec[j] == 2020 {\n                println!(&amp;quot;Entries: {}, {}&amp;quot;,
        vec[i], vec[j]);\n                println!(&amp;quot;Answer: {}&amp;quot;,
        vec[i] * vec[j]);\n            }\n        }\n    }\n    //Part 2\n    for
        i in 0..vec.len()-2 {\n        for j in i+1..vec.len()-1 {\n            for
        k in j+1..vec.len() {\n                if vec[i] + vec[j] + vec[k] == 2020
        {\n                    println!(&amp;quot;Entries: {}, {}, {}&amp;quot;, vec[i],
        vec[j], vec[k]);\n                    println!(&amp;quot;Answer: {}&amp;quot;,
        vec[i] * vec[j] * vec[k]);\n                }\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geafecs/",
        "subreddit_type": "public", "locked": false, "name": "t1_geafecs", "created":
        1606850970.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_geap52z", "id": "geap52z", "parent_id":
        "t1_geafecs", "depth": 1, "children": ["geap52z"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geaj1v1",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "justAnotherNerd254",
        "can_mod_post": false, "created_utc": 1606852639.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_2rjwz8yj", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python solution using a dictionary\n\nPart 1 in O(n) time\n\nPart 2 in O(n^(2))
        time\n\n    f = open(\"input.txt\", \"r\")\n    values = f.read().split()\n    values
        = [int(i) for i in values]\n    \n    sum = 2020\n    \n    # Note: Finds
        first such pair\n    def find_2_sum(values):\n      dict = {}\n      for val
        in values:\n        if val in dict:\n          dict[val] = dict[val] + 1\n        else:\n          dict[val]
        = 1\n    \n      for val in values:\n        if (sum - val) in dict:\n          return
        val * (sum - val)\n    \n    # Note: Finds first such group of 3\n    def
        find_3_sum(values):\n      dict = {}\n      for val in values:\n        if
        val in dict:\n          dict[val] = dict[val] + 1\n        else:\n          dict[val]
        = 1\n    \n      for val1 in values:\n        for val2 in values:\n          if
        (sum - val1 - val2) in dict:\n            return val1 * val2 * (sum - val1
        - val2)\n    \n    print(find_2_sum(values))\n    print(find_3_sum(values))",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python solution using
        a dictionary&lt;/p&gt;\n\n&lt;p&gt;Part 1 in O(n) time&lt;/p&gt;\n\n&lt;p&gt;Part
        2 in O(n&lt;sup&gt;2&lt;/sup&gt;) time&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;f
        = open(&amp;quot;input.txt&amp;quot;, &amp;quot;r&amp;quot;)\nvalues = f.read().split()\nvalues
        = [int(i) for i in values]\n\nsum = 2020\n\n# Note: Finds first such pair\ndef
        find_2_sum(values):\n  dict = {}\n  for val in values:\n    if val in dict:\n      dict[val]
        = dict[val] + 1\n    else:\n      dict[val] = 1\n\n  for val in values:\n    if
        (sum - val) in dict:\n      return val * (sum - val)\n\n# Note: Finds first
        such group of 3\ndef find_3_sum(values):\n  dict = {}\n  for val in values:\n    if
        val in dict:\n      dict[val] = dict[val] + 1\n    else:\n      dict[val]
        = 1\n\n  for val1 in values:\n    for val2 in values:\n      if (sum - val1
        - val2) in dict:\n        return val1 * val2 * (sum - val1 - val2)\n\nprint(find_2_sum(values))\nprint(find_3_sum(values))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geaj1v1/",
        "subreddit_type": "public", "locked": false, "name": "t1_geaj1v1", "created":
        1606852639.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_geald8z", "id": "geald8z", "parent_id":
        "t1_geaj1v1", "depth": 1, "children": ["geald8z"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geajnim",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "bysse",
        "can_mod_post": false, "created_utc": 1606852920.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_3sr5e", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "64 bit assembly without libc brute force\n\n[https://gist.github.com/bysse/28f2d99f789b9b1e483ff57517a29175](https://gist.github.com/bysse/28f2d99f789b9b1e483ff57517a29175)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;64 bit assembly without
        libc brute force&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://gist.github.com/bysse/28f2d99f789b9b1e483ff57517a29175\"&gt;https://gist.github.com/bysse/28f2d99f789b9b1e483ff57517a29175&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geajnim/",
        "subreddit_type": "public", "locked": false, "name": "t1_geajnim", "created":
        1606852920.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_geaohsz", "id": "geaohsz", "parent_id":
        "t1_geajnim", "depth": 1, "children": ["geaohsz"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606857080.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geanteq", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ramrunner0xff",
        "can_mod_post": false, "created_utc": 1606854861.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_n66l8ma", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "C using indexes of static arrays.\n\npart1\n\n    #include &lt;stdio.h&gt;\n    #include
        &lt;assert.h&gt;\n    \n    #define MAXELEMS (200)\n    #define TARGET 2020\n    \n    int         elems      [MAXELEMS]
        = {0};    /* each of the numbers */\n    int         diffelem   [TARGET] =
        {0};      /* index + value = target ,\n                                                 *
        or val = 0 */\n    \n    int\n    readfile(char *fname)\n    {\n        FILE           *fp;\n        int             i
        = 0,  num = 0;\n        fp = fopen(fname, \"r\");\n        assert(fp != NULL);\n    \n        while
        (fscanf(fp, \"%d\", &amp;num) != EOF) {\n                elems[i++] = num;\n                diffelem[TARGET
        - num] = num;\n        }\n        fclose(fp);\n        return i;\n    }\n    \n    int\n    main(int
        argc, char *argv[])\n    {\n        int             nelems    , i, c1, c2;\n        nelems
        = readfile(argv[1]);\n        printf(\"i read %d elems\\n\", nelems);\n        for
        (i = 0; i &lt; nelems; i++) {\n                if (diffelem[elems[i]] != 0)
        {\n                        c1 = elems[i];\n                        c2 = diffelem[c1];\n                        printf(\"pair:
        %d and %d with product:%d\\n\", c1, c2, c1 * c2);\n                        break;\n                }\n        }\n    \n        return
        0;\n    }\n\npart 2\n\n    #include &lt;stdio.h&gt;\n    #include &lt;assert.h&gt;\n    #define
        MAXELEMS (200)\n    #define TARGET 2020\n    \n    struct pair {\n        int             a;\n        int             b;\n    };\n    \n    int         elems      [MAXELEMS]
        = {0};    /* each of the numbers */\n    struct pair diffelem[TARGET] = {{0,
        0}};    /* index is the diff of \n                                                 *
        the sum of pair from target and\n                                                 *
        val is the pair of nums */\n    \n    int\n    readfile(char *fname)\n    {\n        FILE           *fp;\n        int             i
        = 0,  num = 0;\n        fp = fopen(fname, \"r\");\n        assert(fp != NULL);\n    \n        while
        (fscanf(fp, \"%d\", &amp;num) != EOF) {\n                elems[i++] = num;\n        }\n        fclose(fp);\n        return
        i;\n    }\n    \n    int\n    main(int argc, char *argv[])\n    {\n        int             nelems    ,
        i, j, c1, c2, c3;\n        nelems = readfile(argv[1]);\n        printf(\"i
        read %d elems\\n\", nelems);\n        for (i = 0; i &lt; nelems; i++) {\n                c1
        = elems[i];\n                for (j = 0; j &lt; nelems; j++) {\n                        c2
        = elems[j];\n                        if ((c1 + c2) &lt;= TARGET) {\n                                diffelem[TARGET
        - c1 - c2].a = c1;\n                                diffelem[TARGET - c1 -
        c2].b = c2;\n                        }\n                }\n        }\n    \n        for
        (i = 0; i &lt; nelems; i++) {\n                c1 = elems[i];\n                if
        (diffelem[c1].a != 0 &amp;&amp; diffelem[c1].b != 0) {\n                        c2
        = diffelem[c1].a;\n                        c3 = diffelem[c1].b;\n                        printf(\"triple:
        %d %d %d with product:%d\\n\", c1, c2, c3, c1 * c2 * c3);\n                        break;\n                }\n        }\n    \n        return
        0;\n    }", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C
        using indexes of static arrays.&lt;/p&gt;\n\n&lt;p&gt;part1&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include
        &amp;lt;stdio.h&amp;gt;\n#include &amp;lt;assert.h&amp;gt;\n\n#define MAXELEMS
        (200)\n#define TARGET 2020\n\nint         elems      [MAXELEMS] = {0};    /*
        each of the numbers */\nint         diffelem   [TARGET] = {0};      /* index
        + value = target ,\n                                             * or val
        = 0 */\n\nint\nreadfile(char *fname)\n{\n    FILE           *fp;\n    int             i
        = 0,  num = 0;\n    fp = fopen(fname, &amp;quot;r&amp;quot;);\n    assert(fp
        != NULL);\n\n    while (fscanf(fp, &amp;quot;%d&amp;quot;, &amp;amp;num) !=
        EOF) {\n            elems[i++] = num;\n            diffelem[TARGET - num]
        = num;\n    }\n    fclose(fp);\n    return i;\n}\n\nint\nmain(int argc, char
        *argv[])\n{\n    int             nelems    , i, c1, c2;\n    nelems = readfile(argv[1]);\n    printf(&amp;quot;i
        read %d elems\\n&amp;quot;, nelems);\n    for (i = 0; i &amp;lt; nelems; i++)
        {\n            if (diffelem[elems[i]] != 0) {\n                    c1 = elems[i];\n                    c2
        = diffelem[c1];\n                    printf(&amp;quot;pair: %d and %d with
        product:%d\\n&amp;quot;, c1, c2, c1 * c2);\n                    break;\n            }\n    }\n\n    return
        0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;part 2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include
        &amp;lt;stdio.h&amp;gt;\n#include &amp;lt;assert.h&amp;gt;\n#define MAXELEMS
        (200)\n#define TARGET 2020\n\nstruct pair {\n    int             a;\n    int             b;\n};\n\nint         elems      [MAXELEMS]
        = {0};    /* each of the numbers */\nstruct pair diffelem[TARGET] = {{0, 0}};    /*
        index is the diff of \n                                             * the
        sum of pair from target and\n                                             *
        val is the pair of nums */\n\nint\nreadfile(char *fname)\n{\n    FILE           *fp;\n    int             i
        = 0,  num = 0;\n    fp = fopen(fname, &amp;quot;r&amp;quot;);\n    assert(fp
        != NULL);\n\n    while (fscanf(fp, &amp;quot;%d&amp;quot;, &amp;amp;num) !=
        EOF) {\n            elems[i++] = num;\n    }\n    fclose(fp);\n    return
        i;\n}\n\nint\nmain(int argc, char *argv[])\n{\n    int             nelems    ,
        i, j, c1, c2, c3;\n    nelems = readfile(argv[1]);\n    printf(&amp;quot;i
        read %d elems\\n&amp;quot;, nelems);\n    for (i = 0; i &amp;lt; nelems; i++)
        {\n            c1 = elems[i];\n            for (j = 0; j &amp;lt; nelems;
        j++) {\n                    c2 = elems[j];\n                    if ((c1 +
        c2) &amp;lt;= TARGET) {\n                            diffelem[TARGET - c1
        - c2].a = c1;\n                            diffelem[TARGET - c1 - c2].b =
        c2;\n                    }\n            }\n    }\n\n    for (i = 0; i &amp;lt;
        nelems; i++) {\n            c1 = elems[i];\n            if (diffelem[c1].a
        != 0 &amp;amp;&amp;amp; diffelem[c1].b != 0) {\n                    c2 = diffelem[c1].a;\n                    c3
        = diffelem[c1].b;\n                    printf(&amp;quot;triple: %d %d %d with
        product:%d\\n&amp;quot;, c1, c2, c3, c1 * c2 * c3);\n                    break;\n            }\n    }\n\n    return
        0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geanteq/",
        "subreddit_type": "public", "locked": false, "name": "t1_geanteq", "created":
        1606854861.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geapdes",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "omnomberry",
        "can_mod_post": false, "created_utc": 1606855591.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_8zqe7", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Rust solution using [aoc-runner](https://crates.io/crates/aoc-runner) and
        [cargo-aoc](https://crates.io/crates/cargo-aoc)\n\n    use std::{cmp::Ordering,
        collections::BTreeSet};\n    \n    const TARGET: i32 = 2020;\n    \n    #[aoc_generator(day1)]\n    pub
        fn day1_generator(input: &amp;str) -&gt; Vec&lt;i32&gt; {\n        input.lines().map(|l|
        l.parse().unwrap()).collect()\n    }\n    \n    #[aoc(day1, part1, BTreeSet)]\n    pub
        fn part1(inputs: &amp;[i32]) -&gt; i32 {\n        let mut seen = BTreeSet::new();\n    \n        for
        input in inputs {\n            let remainder = TARGET - *input;\n            if
        seen.contains(&amp;remainder) {\n                return remainder * input;\n            }\n    \n            seen.insert(*input);\n        }\n    \n        unreachable!()\n    }\n    \n    #[aoc(day1,
        part2)]\n    pub fn part2(inputs: &amp;[i32]) -&gt; i32 {\n        let mut
        inputs = inputs.to_vec();\n        inputs.sort_unstable();\n        let len
        = inputs.len();\n    \n        for (i, a) in inputs[0..(len - 2)].iter().enumerate()
        {\n            let mut left = i + 1;\n            let mut right = len - 1;\n            while
        left &lt; right {\n                let b = inputs[left];\n                let
        c = inputs[right];\n                let sum = a + b + c;\n    \n                match
        sum.cmp(&amp;TARGET) {\n                    Ordering::Less =&gt; left += 1,\n                    Ordering::Equal
        =&gt; return a * b * c,\n                    Ordering::Greater =&gt; right
        -= 1,\n                }\n            }\n        }\n    \n        unreachable!()\n    }\n    \n    #[cfg(test)]\n    mod
        tests {\n        use super::*;\n    \n        const SAMPLE: [i32; 6] = [1721,
        979, 366, 299, 675, 1456];\n    \n        #[test]\n        pub fn test1()
        {\n            assert_eq!(part1(&amp;SAMPLE), 1721 * 299)\n        }\n    \n        #[test]\n        pub
        fn test2() {\n            assert_eq!(part2(&amp;SAMPLE), 979 * 366 * 675)\n        }\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Rust solution using
        &lt;a href=\"https://crates.io/crates/aoc-runner\"&gt;aoc-runner&lt;/a&gt;
        and &lt;a href=\"https://crates.io/crates/cargo-aoc\"&gt;cargo-aoc&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use
        std::{cmp::Ordering, collections::BTreeSet};\n\nconst TARGET: i32 = 2020;\n\n#[aoc_generator(day1)]\npub
        fn day1_generator(input: &amp;amp;str) -&amp;gt; Vec&amp;lt;i32&amp;gt; {\n    input.lines().map(|l|
        l.parse().unwrap()).collect()\n}\n\n#[aoc(day1, part1, BTreeSet)]\npub fn
        part1(inputs: &amp;amp;[i32]) -&amp;gt; i32 {\n    let mut seen = BTreeSet::new();\n\n    for
        input in inputs {\n        let remainder = TARGET - *input;\n        if seen.contains(&amp;amp;remainder)
        {\n            return remainder * input;\n        }\n\n        seen.insert(*input);\n    }\n\n    unreachable!()\n}\n\n#[aoc(day1,
        part2)]\npub fn part2(inputs: &amp;amp;[i32]) -&amp;gt; i32 {\n    let mut
        inputs = inputs.to_vec();\n    inputs.sort_unstable();\n    let len = inputs.len();\n\n    for
        (i, a) in inputs[0..(len - 2)].iter().enumerate() {\n        let mut left
        = i + 1;\n        let mut right = len - 1;\n        while left &amp;lt; right
        {\n            let b = inputs[left];\n            let c = inputs[right];\n            let
        sum = a + b + c;\n\n            match sum.cmp(&amp;amp;TARGET) {\n                Ordering::Less
        =&amp;gt; left += 1,\n                Ordering::Equal =&amp;gt; return a *
        b * c,\n                Ordering::Greater =&amp;gt; right -= 1,\n            }\n        }\n    }\n\n    unreachable!()\n}\n\n#[cfg(test)]\nmod
        tests {\n    use super::*;\n\n    const SAMPLE: [i32; 6] = [1721, 979, 366,
        299, 675, 1456];\n\n    #[test]\n    pub fn test1() {\n        assert_eq!(part1(&amp;amp;SAMPLE),
        1721 * 299)\n    }\n\n    #[test]\n    pub fn test2() {\n        assert_eq!(part2(&amp;amp;SAMPLE),
        979 * 366 * 675)\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geapdes/", "subreddit_type":
        "public", "locked": false, "name": "t1_geapdes", "created": 1606855591.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 3, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gearve7", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "TrySimplifying", "can_mod_post": false,
        "created_utc": 1606856753.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 3, "author_fullname": "t2_37eisoh6", "report_reasons": null, "approved_by":
        null, "all_awardings": [], "collapsed": false, "body": "C# 9.0 solution running
        on .NET 5 - didn''t bother trying to optimize, runtime was about 5 milliseconds
        after reading the data in from the input file.\n\n    using System;\n    using
        System.Collections.Generic;\n    using System.Diagnostics;\n    using System.IO;\n    using
        System.Linq;\n    \n    // https://adventofcode.com/2020/day/1\n    string
        inputFile = args[0];\n    \n    HashSet&lt;int&gt; expenses = new();\n    using
        StreamReader sr = new(inputFile);\n    \n    string line;\n    \n    while
        ((line = sr.ReadLine()) != null)\n    {\n        expenses.Add(int.Parse(line));\n    }\n    \n    var
        sw = Stopwatch.StartNew();\n    \n    foreach (int val in expenses)\n    {\n        int
        match = 2020 - val;\n        if (expenses.Contains(match))\n        {\n            int
        answer = val * match;\n            Console.WriteLine($\"{val} * {match} ==
        {answer}\");\n            break;\n        }\n    }\n    \n    int[] expenseArray
        = expenses.ToArray();\n    bool found = false;\n    \n    for (int i = 0;
        i &lt; expenseArray.Length; i++)\n    {\n        if (found)\n        {\n            break;\n        }\n    \n        for
        (int j = i + 1; j &lt; expenseArray.Length; j++)\n        {\n            int
        a = expenseArray[i];\n            int b = expenseArray[j];\n    \n            int
        match = 2020 - (a + b);\n    \n            if (expenses.Contains(match))\n            {\n                int
        answer = a * b * match;\n                Console.WriteLine($\"{a} * {b} *
        {match} == {answer}\");\n                found = true;\n                break;\n            }\n        }\n    }\n    \n    Console.WriteLine(sw.ElapsedMilliseconds);",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C# 9.0 solution running
        on .NET 5 - didn&amp;#39;t bother trying to optimize, runtime was about 5
        milliseconds after reading the data in from the input file.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;using
        System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing
        System.IO;\nusing System.Linq;\n\n// https://adventofcode.com/2020/day/1\nstring
        inputFile = args[0];\n\nHashSet&amp;lt;int&amp;gt; expenses = new();\nusing
        StreamReader sr = new(inputFile);\n\nstring line;\n\nwhile ((line = sr.ReadLine())
        != null)\n{\n    expenses.Add(int.Parse(line));\n}\n\nvar sw = Stopwatch.StartNew();\n\nforeach
        (int val in expenses)\n{\n    int match = 2020 - val;\n    if (expenses.Contains(match))\n    {\n        int
        answer = val * match;\n        Console.WriteLine($&amp;quot;{val} * {match}
        == {answer}&amp;quot;);\n        break;\n    }\n}\n\nint[] expenseArray =
        expenses.ToArray();\nbool found = false;\n\nfor (int i = 0; i &amp;lt; expenseArray.Length;
        i++)\n{\n    if (found)\n    {\n        break;\n    }\n\n    for (int j =
        i + 1; j &amp;lt; expenseArray.Length; j++)\n    {\n        int a = expenseArray[i];\n        int
        b = expenseArray[j];\n\n        int match = 2020 - (a + b);\n\n        if
        (expenses.Contains(match))\n        {\n            int answer = a * b * match;\n            Console.WriteLine($&amp;quot;{a}
        * {b} * {match} == {answer}&amp;quot;);\n            found = true;\n            break;\n        }\n    }\n}\n\nConsole.WriteLine(sw.ElapsedMilliseconds);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gearve7/",
        "subreddit_type": "public", "locked": false, "name": "t1_gearve7", "created":
        1606856753.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geasoby", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        3, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "2020 Day\\_01 \n\nPython 3.8 Solution (With debug information
        and comments)\n\n[https://github.com/Marterich/AoC2020/tree/main/Day\\_01](https://github.com/Marterich/AoC2020/tree/main/Day_01)",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_geasoby",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;2020
        Day_01 &lt;/p&gt;\n\n&lt;p&gt;Python 3.8 Solution (With debug information
        and comments)&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/Marterich/AoC2020/tree/main/Day_01\"&gt;https://github.com/Marterich/AoC2020/tree/main/Day_01&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geasoby/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606857139.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606857139.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606887630.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geatz0f", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "d12Trooper",
        "can_mod_post": false, "created_utc": 1606857768.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_1tr1tm1", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# PureBasic (PART 1):\n\n    Define tempString.s\n    Define curNr.i\n    NewList
        nr()\n    \n    If ReadFile(0, \"input.txt\")\n        While Not Eof(0)\n            tempString
        = ReadString(0)\n    \tAddElement(nr())\n    \tnr() = Val(tempString)\n        Wend\n        CloseFile(0)\n    EndIf\n    \n    Repeat\n        FirstElement(nr())\n        curNr
        = nr()\n        DeleteElement(nr())\n        ForEach nr()\n    \tIf curNr+nr()
        = 2020\n                Debug curNr\\*nr()\n                Break 2\n    \tEndIf\n        Next\n    ForEver\n\n&amp;#x200B;\n\n**(PART
        2) -- not very proud of this one, pretty lazy execution, mainLoop takes 14
        Millisecs, I''m sure there''s a better solution --**\n\n    Define tempString.s\n    NewList
        i()\n    NewList j()\n    NewList k()\n    \n    If ReadFile(0, \"input.txt\")\n        While
        Not Eof(0)\n            tempString = ReadString(0)\n    \tAddElement(i())\n    \ti()
        = Val(tempString)\n        Wend\n        CloseFile(0)\n    EndIf\n    \n    CopyList(i(),
        j())\n    CopyList(i(), k())\n    \n    Repeat\n        ForEach i()\n            ForEach
        j()\n                ForEach k()\n                    If ListIndex(i()) &lt;&gt;
        ListIndex(j()) And ListIndex(i()) &lt;&gt; ListIndex(k()) And ListIndex(j())
        &lt;&gt; ListIndex(k())\n                        If i() + j() + k() = 2020\n                            Debug
        i() * j() * k()\n                            Break 4\n                        EndIf\n                    EndIf\n                Next\n            Next\n        Next\n    ForEver",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;PureBasic (PART 1):&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;Define
        tempString.s\nDefine curNr.i\nNewList nr()\n\nIf ReadFile(0, &amp;quot;input.txt&amp;quot;)\n    While
        Not Eof(0)\n        tempString = ReadString(0)\n    AddElement(nr())\n    nr()
        = Val(tempString)\n    Wend\n    CloseFile(0)\nEndIf\n\nRepeat\n    FirstElement(nr())\n    curNr
        = nr()\n    DeleteElement(nr())\n    ForEach nr()\n    If curNr+nr() = 2020\n            Debug
        curNr\\*nr()\n            Break 2\n    EndIf\n    Next\nForEver\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;(PART
        2) -- not very proud of this one, pretty lazy execution, mainLoop takes 14
        Millisecs, I&amp;#39;m sure there&amp;#39;s a better solution --&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Define
        tempString.s\nNewList i()\nNewList j()\nNewList k()\n\nIf ReadFile(0, &amp;quot;input.txt&amp;quot;)\n    While
        Not Eof(0)\n        tempString = ReadString(0)\n    AddElement(i())\n    i()
        = Val(tempString)\n    Wend\n    CloseFile(0)\nEndIf\n\nCopyList(i(), j())\nCopyList(i(),
        k())\n\nRepeat\n    ForEach i()\n        ForEach j()\n            ForEach
        k()\n                If ListIndex(i()) &amp;lt;&amp;gt; ListIndex(j()) And
        ListIndex(i()) &amp;lt;&amp;gt; ListIndex(k()) And ListIndex(j()) &amp;lt;&amp;gt;
        ListIndex(k())\n                    If i() + j() + k() = 2020\n                        Debug
        i() * j() * k()\n                        Break 4\n                    EndIf\n                EndIf\n            Next\n        Next\n    Next\nForEver\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geatz0f/",
        "subreddit_type": "public", "locked": false, "name": "t1_geatz0f", "created":
        1606857768.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606859259.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geawos1", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "scrillagoon",
        "can_mod_post": false, "created_utc": 1606859045.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_7y44hfno", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# JAVA\n\nUsing the stream api.\n\n        public static void main(final
        String[] args) throws IOException {\n            final Set&lt;Integer&gt;
        numbers = readInput(\"/day1/input\");\n    \n            final var result1
        = result1(numbers, 2020);\n            final var result2 = result2(numbers,
        2020);\n    \n            result1.ifPresentOrElse(System.out::println, ()
        -&gt; System.out.println(\"No result\"));\n            result2.ifPresentOrElse(System.out::println,
        () -&gt; System.out.println(\"No result\"));\n        }\n    \n        public
        static Optional&lt;Integer&gt; result1(final Set&lt;Integer&gt; numbers,\n                                                final
        int target) {\n            return numbers.stream()\n                    .filter(n
        -&gt; numbers.contains(target - n))\n                    .map(n -&gt; n *
        (target - n))\n                    .max(Integer::compareTo);\n        }\n    \n        public
        static Optional&lt;Integer&gt; result2(final Set&lt;Integer&gt; numbers,\n                                                final
        int target) {\n            return numbers.stream()\n                    .map(n
        -&gt; n * result1(numbers, target - n).orElse(0))\n                    .max(Integer::compareTo);\n        }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;JAVA&lt;/h1&gt;\n\n&lt;p&gt;Using
        the stream api.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    public static void
        main(final String[] args) throws IOException {\n        final Set&amp;lt;Integer&amp;gt;
        numbers = readInput(&amp;quot;/day1/input&amp;quot;);\n\n        final var
        result1 = result1(numbers, 2020);\n        final var result2 = result2(numbers,
        2020);\n\n        result1.ifPresentOrElse(System.out::println, () -&amp;gt;
        System.out.println(&amp;quot;No result&amp;quot;));\n        result2.ifPresentOrElse(System.out::println,
        () -&amp;gt; System.out.println(&amp;quot;No result&amp;quot;));\n    }\n\n    public
        static Optional&amp;lt;Integer&amp;gt; result1(final Set&amp;lt;Integer&amp;gt;
        numbers,\n                                            final int target) {\n        return
        numbers.stream()\n                .filter(n -&amp;gt; numbers.contains(target
        - n))\n                .map(n -&amp;gt; n * (target - n))\n                .max(Integer::compareTo);\n    }\n\n    public
        static Optional&amp;lt;Integer&amp;gt; result2(final Set&amp;lt;Integer&amp;gt;
        numbers,\n                                            final int target) {\n        return
        numbers.stream()\n                .map(n -&amp;gt; n * result1(numbers, target
        - n).orElse(0))\n                .max(Integer::compareTo);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geawos1/",
        "subreddit_type": "public", "locked": false, "name": "t1_geawos1", "created":
        1606859045.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 4, "name": "t1_geawpxi", "id": "geawpxi", "parent_id":
        "t1_geawos1", "depth": 1, "children": ["geawpxi", "geb7f7t"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606860520.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geaz3ql", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "TommiHPunkt",
        "can_mod_post": false, "created_utc": 1606860176.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_7p3el", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "brute force solution in matlab (50ms runtime if you exclude reading the input)\n\n    expenses
        = readmatrix(''input.txt'');\n    combinations2 = nchoosek(expenses,2);\n    part1
        = prod(combinations2(sum(combinations2,2)==2020,:))\n    combinations3 = nchoosek(expenses,3);\n    part2
        = prod(combinations3(sum(combinations3,2)==2020,:))", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;brute force solution in matlab (50ms runtime if you
        exclude reading the input)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;expenses =
        readmatrix(&amp;#39;input.txt&amp;#39;);\ncombinations2 = nchoosek(expenses,2);\npart1
        = prod(combinations2(sum(combinations2,2)==2020,:))\ncombinations3 = nchoosek(expenses,3);\npart2
        = prod(combinations3(sum(combinations3,2)==2020,:))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geaz3ql/",
        "subreddit_type": "public", "locked": false, "name": "t1_geaz3ql", "created":
        1606860176.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606906689.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geazt0h", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "CrazyA99",
        "can_mod_post": false, "created_utc": 1606860518.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_16pl3w", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "After trying my luck with python I had to go back to work.\n\nSo [here](https://imgur.com/a/CCy9IXb)
        is the main bit of **ladder logic** for part one in an **Allen-Bradley 1756-L61
        PLC**. I''ve also made part two. I''ve generated 200 lines of structured text
        to fill an array with the puzzle input.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;After trying my luck with python I had to go back
        to work.&lt;/p&gt;\n\n&lt;p&gt;So &lt;a href=\"https://imgur.com/a/CCy9IXb\"&gt;here&lt;/a&gt;
        is the main bit of &lt;strong&gt;ladder logic&lt;/strong&gt; for part one
        in an &lt;strong&gt;Allen-Bradley 1756-L61 PLC&lt;/strong&gt;. I&amp;#39;ve
        also made part two. I&amp;#39;ve generated 200 lines of structured text to
        fill an array with the puzzle input.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geazt0h/", "subreddit_type":
        "public", "locked": false, "name": "t1_geazt0h", "created": 1606860518.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 3, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "geb2800", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Zexion01", "can_mod_post": false, "created_utc":
        1606861704.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 3,
        "author_fullname": "t2_95qm0", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "Python 3:\nhttps://github.com/AlinMH/advent-of-code/tree/master/2020/day1",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python 3:\n&lt;a href=\"https://github.com/AlinMH/advent-of-code/tree/master/2020/day1\"&gt;https://github.com/AlinMH/advent-of-code/tree/master/2020/day1&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb2800/",
        "subreddit_type": "public", "locked": false, "name": "t1_geb2800", "created":
        1606861704.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geb2ead",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "msqrt",
        "can_mod_post": false, "created_utc": 1606861789.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_452jqlw3", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I tried lisp for the first time, I''ve been feeling like I should know it
        for quite a few years already. Definitely different to the C++/Python stuff
        I normally do, let''s see how many days can I keep this up for :)\n\n    (setq
        numbers (list 1348 ...))\n    (defun solve (in)\n    \t(loop for x in (cdr
        in)\n    \t\tdo (if (= 2020 (+ (car in) x))\n    \t\t\t(print (* x (car in))))\n    \t)\n    \t(if
        (cdr in)\n    \t\t(solve (cdr in)))\n    )\n    (defun helper (y in)\n    \t(loop
        for x in (cdr in)\n    \t\tdo (if (= 2020 (+ y x (car in)))\n    \t\t\t(print
        (* y x (car in))))\n    \t)\n    \t(if (cdr in)\n    \t\t(helper y (cdr in)))\n    )\n    (defun
        solve2 (in)\n    \t(helper (car in) (cdr in))\n    \t(if (cdr in)\n    \t\t(solve2
        (cdr in)))\n    )\n    (solve numbers)\n    (solve2 numbers)", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;I tried lisp for the first time, I&amp;#39;ve
        been feeling like I should know it for quite a few years already. Definitely
        different to the C++/Python stuff I normally do, let&amp;#39;s see how many
        days can I keep this up for :)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(setq numbers
        (list 1348 ...))\n(defun solve (in)\n    (loop for x in (cdr in)\n        do
        (if (= 2020 (+ (car in) x))\n            (print (* x (car in))))\n    )\n    (if
        (cdr in)\n        (solve (cdr in)))\n)\n(defun helper (y in)\n    (loop for
        x in (cdr in)\n        do (if (= 2020 (+ y x (car in)))\n            (print
        (* y x (car in))))\n    )\n    (if (cdr in)\n        (helper y (cdr in)))\n)\n(defun
        solve2 (in)\n    (helper (car in) (cdr in))\n    (if (cdr in)\n        (solve2
        (cdr in)))\n)\n(solve numbers)\n(solve2 numbers)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb2ead/",
        "subreddit_type": "public", "locked": false, "name": "t1_geb2ead", "created":
        1606861789.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_geb6d8n", "id": "geb6d8n", "parent_id":
        "t1_geb2ead", "depth": 1, "children": ["geb6d8n"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geb5xuz",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "spin81",
        "can_mod_post": false, "created_utc": 1606863570.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_dqdec", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My very first Go program ever! I am open to suggestions for improvement.
        I have programming experience but am very much a Go noob.\n\nLet''s see if
        I will stick with Go going forward. I did the last couple of years in Rust,
        and I see what the big deal about Rust is - not so much with Go yet.\n\n    package
        main\n    \n    import (\n    \t\"errors\"\n    \t\"fmt\"\n    )\n    \n    func
        part1(input []int) (int, error) {\n    \tfor j, a := range input {\n    \t\tfor
        i, b := range input {\n    \t\t\tif i == j {\n    \t\t\t\tbreak\n    \t\t\t}\n    \t\t\tif
        a+b == 2020 {\n    \t\t\t\treturn a * b, nil\n    \t\t\t}\n    \t\t}\n    \t}\n    \treturn
        0, errors.New(\"No two entries sum to 2020\")\n    }\n    \n    func part2(input
        []int) (int, error) {\n    \tfor k, a := range input {\n    \t\tfor j, b :=
        range input {\n    \t\t\tif j == k {\n    \t\t\t\tbreak\n    \t\t\t}\n    \t\t\tfor
        i, c := range input {\n    \t\t\t\tif i == j {\n    \t\t\t\t\tbreak\n    \t\t\t\t}\n    \t\t\t\tif
        a+b+c == 2020 {\n    \t\t\t\t\treturn a * b * c, nil\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t}\n    \treturn
        0, errors.New(\"No three entries sum to 2020\")\n    }\n    \n    func main()
        {\n    \tvar input []int\n    \tfor {\n    \t\tvar entry int\n    \t\tif _,
        err := fmt.Scanf(\"%d\\n\", &amp;entry); err == nil {\n    \t\t\tinput = append(input,
        entry)\n    \t\t} else {\n    \t\t\tbreak\n    \t\t}\n    \t}\n    \n    \tpart1,
        _ := part1(input)\n    \tpart2, _ := part2(input)\n    \n    \tfmt.Println(\"The
        product of the two values:\", part1)\n    \tfmt.Println(\"The product of the
        three values:\", part2)\n    }", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;My very first Go program ever! I am open to suggestions
        for improvement. I have programming experience but am very much a Go noob.&lt;/p&gt;\n\n&lt;p&gt;Let&amp;#39;s
        see if I will stick with Go going forward. I did the last couple of years
        in Rust, and I see what the big deal about Rust is - not so much with Go yet.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package
        main\n\nimport (\n    &amp;quot;errors&amp;quot;\n    &amp;quot;fmt&amp;quot;\n)\n\nfunc
        part1(input []int) (int, error) {\n    for j, a := range input {\n        for
        i, b := range input {\n            if i == j {\n                break\n            }\n            if
        a+b == 2020 {\n                return a * b, nil\n            }\n        }\n    }\n    return
        0, errors.New(&amp;quot;No two entries sum to 2020&amp;quot;)\n}\n\nfunc part2(input
        []int) (int, error) {\n    for k, a := range input {\n        for j, b :=
        range input {\n            if j == k {\n                break\n            }\n            for
        i, c := range input {\n                if i == j {\n                    break\n                }\n                if
        a+b+c == 2020 {\n                    return a * b * c, nil\n                }\n            }\n        }\n    }\n    return
        0, errors.New(&amp;quot;No three entries sum to 2020&amp;quot;)\n}\n\nfunc
        main() {\n    var input []int\n    for {\n        var entry int\n        if
        _, err := fmt.Scanf(&amp;quot;%d\\n&amp;quot;, &amp;amp;entry); err == nil
        {\n            input = append(input, entry)\n        } else {\n            break\n        }\n    }\n\n    part1,
        _ := part1(input)\n    part2, _ := part2(input)\n\n    fmt.Println(&amp;quot;The
        product of the two values:&amp;quot;, part1)\n    fmt.Println(&amp;quot;The
        product of the three values:&amp;quot;, part2)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb5xuz/",
        "subreddit_type": "public", "locked": false, "name": "t1_geb5xuz", "created":
        1606863570.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606865514.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geb8t7f", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "sillyshrimp",
        "can_mod_post": false, "created_utc": 1606865068.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_3eseilue", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "C solution:\nedit: fixing code block style\n\n    #include &lt;stdio.h&gt;\n    \n    void
        find_two_2020(int *expenses, int num_entries) {\n    \tfor (unsigned int i
        = 0; i &lt; num_entries - 1; i++) {\n    \t\tfor (unsigned int j = i + 1 ;
        j &lt; num_entries; j++) {\n    \t\t\tint sum = expenses[i] + expenses[j];\n    \t\t\tif
        (sum == 2020) {\n    \t\t\t\tprintf(\"%d x %d = %d\\n\", expenses[i], expenses[j],
        expenses[i] * expenses[j]);\n    \t\t\t\treturn;\n    \t\t\t}\n    \t\t}\n    \t}\n    }\n    \n    void
        find_three_2020(int *expenses, int num_entries) {\n    \tfor (unsigned int
        i = 0; i &lt; num_entries - 2; i++) {\n    \t\tfor (unsigned int j = i + 1
        ; j &lt; num_entries - 1; j++) {\n    \t\t\tfor (unsigned int k = j + 1 ;
        k &lt; num_entries; k++) {\n    \t\t\t\tint sum = expenses[i] + expenses[j]
        + expenses[k];\n    \t\t\t\tif (sum == 2020) {\n    \t\t\t\t\tprintf(\"%d
        x %d x %d = %d\\n\",\n    \t\t\t\t\t\t\texpenses[i], expenses[j], expenses[k],\n    \t\t\t\t\t\t\texpenses[i]
        * expenses[j] * expenses[k]);\n    \t\t\t\t\treturn;\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t}\n    }\n    \n    int\n    main(int
        argc, char *argv[])\n    {\n    \tif (argc &lt; 2) {\n    \t\tfprintf(stderr,
        \"usage: %s [file]\\n\", argv[0]);\n    \t\treturn 1;\n    \t}\n    \n    \tFILE
        *fin;\n    \tif (argv[1][0] == ''-'') {\n    \t\tfin = stdin;\n    \t} else
        {\n    \t\tfin = fopen(argv[1], \"r\");\n    \t}\n    \n    \tif (fin == NULL)
        {\n    \t\tfprintf(stderr, \"Can''t read file: %s\\n\", argv[1]);\n    \t\treturn
        1;\n    \t}\n    \n    \tint num_entries = 0;\n    \tint expenses[250];\n    \twhile(fscanf(fin,
        \"%d\", &amp;expenses[num_entries]) &gt; 0) {\n    \t\tnum_entries++;\n    \t}\n    \n    \tfclose(fin);\n    \n    \tprintf(\"Read
        %d entries.\\n\", num_entries);\n    \n    \tfind_two_2020(expenses, num_entries);\n        find_three_2020(expenses,
        num_entries);\n    \n    \treturn 0;\n    }", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;C solution:\nedit: fixing code block style&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include
        &amp;lt;stdio.h&amp;gt;\n\nvoid find_two_2020(int *expenses, int num_entries)
        {\n    for (unsigned int i = 0; i &amp;lt; num_entries - 1; i++) {\n        for
        (unsigned int j = i + 1 ; j &amp;lt; num_entries; j++) {\n            int
        sum = expenses[i] + expenses[j];\n            if (sum == 2020) {\n                printf(&amp;quot;%d
        x %d = %d\\n&amp;quot;, expenses[i], expenses[j], expenses[i] * expenses[j]);\n                return;\n            }\n        }\n    }\n}\n\nvoid
        find_three_2020(int *expenses, int num_entries) {\n    for (unsigned int i
        = 0; i &amp;lt; num_entries - 2; i++) {\n        for (unsigned int j = i +
        1 ; j &amp;lt; num_entries - 1; j++) {\n            for (unsigned int k =
        j + 1 ; k &amp;lt; num_entries; k++) {\n                int sum = expenses[i]
        + expenses[j] + expenses[k];\n                if (sum == 2020) {\n                    printf(&amp;quot;%d
        x %d x %d = %d\\n&amp;quot;,\n                            expenses[i], expenses[j],
        expenses[k],\n                            expenses[i] * expenses[j] * expenses[k]);\n                    return;\n                }\n            }\n        }\n    }\n}\n\nint\nmain(int
        argc, char *argv[])\n{\n    if (argc &amp;lt; 2) {\n        fprintf(stderr,
        &amp;quot;usage: %s [file]\\n&amp;quot;, argv[0]);\n        return 1;\n    }\n\n    FILE
        *fin;\n    if (argv[1][0] == &amp;#39;-&amp;#39;) {\n        fin = stdin;\n    }
        else {\n        fin = fopen(argv[1], &amp;quot;r&amp;quot;);\n    }\n\n    if
        (fin == NULL) {\n        fprintf(stderr, &amp;quot;Can&amp;#39;t read file:
        %s\\n&amp;quot;, argv[1]);\n        return 1;\n    }\n\n    int num_entries
        = 0;\n    int expenses[250];\n    while(fscanf(fin, &amp;quot;%d&amp;quot;,
        &amp;amp;expenses[num_entries]) &amp;gt; 0) {\n        num_entries++;\n    }\n\n    fclose(fin);\n\n    printf(&amp;quot;Read
        %d entries.\\n&amp;quot;, num_entries);\n\n    find_two_2020(expenses, num_entries);\n    find_three_2020(expenses,
        num_entries);\n\n    return 0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb8t7f/",
        "subreddit_type": "public", "locked": false, "name": "t1_geb8t7f", "created":
        1606865068.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_geb8uaq", "id": "geb8uaq", "parent_id":
        "t1_geb8t7f", "depth": 1, "children": ["geb8uaq"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geb9tkh",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "johnsandall",
        "can_mod_post": false, "created_utc": 1606865606.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_3sgan26", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Python/pandas with type hinting**\n\n\n    from pathlib import Path\n    from
        typing import List, Union\n\n    import pandas as pd\n\n\n    def load_data(input_filepath:
        Union[str, Path]) -&gt; List[int]:\n        \"\"\"Load expenses from file
        and return as Python list.\n\n        Args:\n            input_filepath: Location
        of input file (can be str or pathlib.Path)\n\n        Returns:\n            List
        of integer expense values.\n        \"\"\"\n        return pd.read_csv(input_filepath,
        header=None)[0].to_list()\n\n\n    def part_1(expenses: List[int]) -&gt; int:\n        \"\"\"Find
        the two entries in expenses that sum to 2020 and return their product.\n\n        Args:
        expenses: List of integer expense values.\n\n        Returns: Integer product
        of two entries that sum to 2020.\n        \"\"\"\n        return [a * b for
        a in expenses for b in expenses[expenses.index(a) :] if a + b == 2020][0]\n\n\n    def
        part_2(expenses: List[int]) -&gt; int:\n        \"\"\"Find the three entries
        in expenses that sum to 2020 and return their product.\n\n        Args:\n            expenses:
        List of integer expense values.\n\n        Returns:\n            Integer product
        of three entries that sum to 2020.\n        \"\"\"\n        return {\n            a
        * b * c for a in expenses for b in expenses for c in expenses if a + b + c
        == 2020\n        }.pop()\n\n\n    if __name__ == \"__main__\":\n        expenses
        = load_data(input_filepath=\"input.txt\")\n        print(part_1(expenses))\n        print(part_2(expenses))",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python/pandas
        with type hinting&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from
        pathlib import Path\nfrom typing import List, Union\n\nimport pandas as pd\n\n\ndef
        load_data(input_filepath: Union[str, Path]) -&amp;gt; List[int]:\n    &amp;quot;&amp;quot;&amp;quot;Load
        expenses from file and return as Python list.\n\n    Args:\n        input_filepath:
        Location of input file (can be str or pathlib.Path)\n\n    Returns:\n        List
        of integer expense values.\n    &amp;quot;&amp;quot;&amp;quot;\n    return
        pd.read_csv(input_filepath, header=None)[0].to_list()\n\n\ndef part_1(expenses:
        List[int]) -&amp;gt; int:\n    &amp;quot;&amp;quot;&amp;quot;Find the two
        entries in expenses that sum to 2020 and return their product.\n\n    Args:
        expenses: List of integer expense values.\n\n    Returns: Integer product
        of two entries that sum to 2020.\n    &amp;quot;&amp;quot;&amp;quot;\n    return
        [a * b for a in expenses for b in expenses[expenses.index(a) :] if a + b ==
        2020][0]\n\n\ndef part_2(expenses: List[int]) -&amp;gt; int:\n    &amp;quot;&amp;quot;&amp;quot;Find
        the three entries in expenses that sum to 2020 and return their product.\n\n    Args:\n        expenses:
        List of integer expense values.\n\n    Returns:\n        Integer product of
        three entries that sum to 2020.\n    &amp;quot;&amp;quot;&amp;quot;\n    return
        {\n        a * b * c for a in expenses for b in expenses for c in expenses
        if a + b + c == 2020\n    }.pop()\n\n\nif __name__ == &amp;quot;__main__&amp;quot;:\n    expenses
        = load_data(input_filepath=&amp;quot;input.txt&amp;quot;)\n    print(part_1(expenses))\n    print(part_2(expenses))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb9tkh/",
        "subreddit_type": "public", "locked": false, "name": "t1_geb9tkh", "created":
        1606865606.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_geb9ul2", "id": "geb9ul2", "parent_id":
        "t1_geb9tkh", "depth": 1, "children": ["geb9ul2"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606871196.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gebecfl", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "BlendeLabor",
        "can_mod_post": false, "created_utc": 1606868084.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_c54h4", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# AHK\n\nI don''t see one yet, and I figured I''d do it just so I can use
        it for not its purpose:\n\n\n    #SingleInstance, Force\n    \n    answer
        := 2020\n    vals := [insert value set as comma delimited data (I could write
        some stuff to read it from a file, but obviously I''m not putting that much
        effort into it)]\n    \n    #SingleInstance, Force\n    \n    answer := 2020\n    vals
        := [comma delimited puzzle data]\n    p1 := False\n    p2 := False\n    Loop
        {\n    \tRandom, a, vals.MinIndex(), vals.MaxIndex()\n    \tRandom, b, vals.MinIndex(),
        vals.MaxIndex()\n    \tRandom, c, vals.MinIndex(), vals.MaxIndex()\n    \t;
        Part 1:\n    \tx := vals[a]+vals[b]\n    \t; Part 2:\n    \ty := vals[a]+vals[b]+vals[c]\n    \tIf
        (InStr(x, answer) and p1 = False){\n    \t\tMsgBox,, Part 1, % vals[a] \"+\"
        vals[b] \"=\" x \"`n\" vals[a] \"x\" vals[b] \"=\" vals[a]*vals[b]\n    \t\tp1
        := True\n    \t}\n    \tIf (InStr(y, answer) and p2 = False){\n    \t\tMsgBox,,
        Part 2, % vals[a] \"+\" vals[b] \"+\" vals[c] \"=\" y \"`n\" vals[a] \"x\"
        vals[b] \"x\" vals[c] \"=\" vals[a]*vals[b]*vals[c]\n    \t\tp2 := True\n    \t}\n    \tIf
        (p1 and p2){\n    \t\tBreak\n    \t}\n    }\n\nRuntime: ~2 secs for part 1,
        ~13 for part 2", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;AHK&lt;/h1&gt;\n\n&lt;p&gt;I
        don&amp;#39;t see one yet, and I figured I&amp;#39;d do it just so I can use
        it for not its purpose:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#SingleInstance,
        Force\n\nanswer := 2020\nvals := [insert value set as comma delimited data
        (I could write some stuff to read it from a file, but obviously I&amp;#39;m
        not putting that much effort into it)]\n\n#SingleInstance, Force\n\nanswer
        := 2020\nvals := [comma delimited puzzle data]\np1 := False\np2 := False\nLoop
        {\n    Random, a, vals.MinIndex(), vals.MaxIndex()\n    Random, b, vals.MinIndex(),
        vals.MaxIndex()\n    Random, c, vals.MinIndex(), vals.MaxIndex()\n    ; Part
        1:\n    x := vals[a]+vals[b]\n    ; Part 2:\n    y := vals[a]+vals[b]+vals[c]\n    If
        (InStr(x, answer) and p1 = False){\n        MsgBox,, Part 1, % vals[a] &amp;quot;+&amp;quot;
        vals[b] &amp;quot;=&amp;quot; x &amp;quot;`n&amp;quot; vals[a] &amp;quot;x&amp;quot;
        vals[b] &amp;quot;=&amp;quot; vals[a]*vals[b]\n        p1 := True\n    }\n    If
        (InStr(y, answer) and p2 = False){\n        MsgBox,, Part 2, % vals[a] &amp;quot;+&amp;quot;
        vals[b] &amp;quot;+&amp;quot; vals[c] &amp;quot;=&amp;quot; y &amp;quot;`n&amp;quot;
        vals[a] &amp;quot;x&amp;quot; vals[b] &amp;quot;x&amp;quot; vals[c] &amp;quot;=&amp;quot;
        vals[a]*vals[b]*vals[c]\n        p2 := True\n    }\n    If (p1 and p2){\n        Break\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Runtime:
        ~2 secs for part 1, ~13 for part 2&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebecfl/", "subreddit_type":
        "public", "locked": false, "name": "t1_gebecfl", "created": 1606868084.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 3, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gebiwyv", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "denvercoder1", "can_mod_post": false,
        "created_utc": 1606870627.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 3, "author_fullname": "t2_4szh7ng7", "report_reasons": null, "approved_by":
        null, "all_awardings": [], "collapsed": false, "body": "### JavaScript solution
        using hashmaps\n\n#### Part 1\n    \n    map = {};\n    \n    for (const num
        of nums) {\n      if (map[2020 - num]) {\n        console.log(num, 2020 -
        num);\n        console.log(num * (2020 - num));\n      }\n      map[num] =
        1;\n    }\n    \n#### Part 2\n    \n    let remaining1 = {};\n    let remaining2
        = {};\n    \n    for (var i = 0; i &lt; nums.length; i++) {\n      remaining1[i]
        = 2020 - nums[i];\n      for (var j = i + 1; j &lt; nums.length; j++) {\n        remaining2[j]
        = remaining1[i] - nums[j];\n        for (var k = j + 1; k &lt; nums.length;
        k++) {\n          if (nums[k] == remaining2[j]) {\n            console.log(nums[i],
        nums[j], nums[k]);\n            console.log(nums[i] * nums[j] * nums[k]);\n          }\n        }\n      }\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h3&gt;JavaScript solution
        using hashmaps&lt;/h3&gt;\n\n&lt;h4&gt;Part 1&lt;/h4&gt;\n\n&lt;pre&gt;&lt;code&gt;map
        = {};\n\nfor (const num of nums) {\n  if (map[2020 - num]) {\n    console.log(num,
        2020 - num);\n    console.log(num * (2020 - num));\n  }\n  map[num] = 1;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h4&gt;Part
        2&lt;/h4&gt;\n\n&lt;pre&gt;&lt;code&gt;let remaining1 = {};\nlet remaining2
        = {};\n\nfor (var i = 0; i &amp;lt; nums.length; i++) {\n  remaining1[i] =
        2020 - nums[i];\n  for (var j = i + 1; j &amp;lt; nums.length; j++) {\n    remaining2[j]
        = remaining1[i] - nums[j];\n    for (var k = j + 1; k &amp;lt; nums.length;
        k++) {\n      if (nums[k] == remaining2[j]) {\n        console.log(nums[i],
        nums[j], nums[k]);\n        console.log(nums[i] * nums[j] * nums[k]);\n      }\n    }\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebiwyv/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebiwyv", "created":
        1606870627.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gebk1zj", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        3, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Being fully aware that these are merely good enough solution
        as they are neither beautiful nor good practices; I solved the first day with
        python oneliners as I challanged myself to keep it as short as possible to
        keep things interesting:\n\nTask 1:  \n`python3 -c \"with open(''input.txt'')
        as infile: l = [int(i) for i in` [`infile.read`](https://infile.read)`().split()];
        [print(x * y) for x in l for y in l if x + y == 2020]\"`\n\nTask 2:  \n`python3
        -c \"with open(''input.txt'') as infile: l = [int(i) for i in` [`infile.read`](https://infile.read)`().split()];
        [print(x * y *z) for x in l for y in l for z in l if x + y + z == 2020]\"`",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_gebk1zj",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Being
        fully aware that these are merely good enough solution as they are neither
        beautiful nor good practices; I solved the first day with python oneliners
        as I challanged myself to keep it as short as possible to keep things interesting:&lt;/p&gt;\n\n&lt;p&gt;Task
        1:&lt;br/&gt;\n&lt;code&gt;python3 -c &amp;quot;with open(&amp;#39;input.txt&amp;#39;)
        as infile: l = [int(i) for i in&lt;/code&gt; &lt;a href=\"https://infile.read\"&gt;&lt;code&gt;infile.read&lt;/code&gt;&lt;/a&gt;&lt;code&gt;().split()];
        [print(x * y) for x in l for y in l if x + y == 2020]&amp;quot;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Task
        2:&lt;br/&gt;\n&lt;code&gt;python3 -c &amp;quot;with open(&amp;#39;input.txt&amp;#39;)
        as infile: l = [int(i) for i in&lt;/code&gt; &lt;a href=\"https://infile.read\"&gt;&lt;code&gt;infile.read&lt;/code&gt;&lt;/a&gt;&lt;code&gt;().split()];
        [print(x * y *z) for x in l for y in l for z in l if x + y + z == 2020]&amp;quot;&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebk1zj/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606871255.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606871255.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_gebnh8k", "id": "gebnh8k", "parent_id":
        "t1_gebk1zj", "depth": 1, "children": ["gebnh8k"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gebk3nj",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "idontknowwhattouse33",
        "can_mod_post": false, "created_utc": 1606871280.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_1654ip", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "PowerShell submission.\n\nHaven''t been here before, nOOb-me posted in the
        wrong place earlier.\n\n    [int[]]$numbers = Get-Content ''C:\\Users\\username\\scripts\\AdventofCode\\2020\\Day1input.txt''
        \n    $numbersht = $numbers | group -AsHashTable\n    \n    # Part 1\n    foreach
        ($number in $numbers) {\n        [int]$remainder = 2020 - $number\n        if
        ($null -ne $numbersht[$remainder]) {\n            $number * $remainder\n            break\n        }\n    }\n    \n    #
        Part 2\n    $numberslist = [System.Collections.ArrayList]::new()\n    $numbers
        | sort | foreach {[void]$numberslist.Add($_)}\n    :firstloop foreach ($one
        in $numbers) {\n        $remainder = 2020 - $one\n        if ($remainder -gt
        0) {\n            $index = $numberslist.BinarySearch($remainder) \n            switch
        ($index) {\n                {$_ -ge 0} {$2ndloop = ($_-1)..0}\n                {$_
        -lt 0} {$2ndloop = ($numberslist.count+$index)..0 }\n            }\n    \n            $2ndloop
        | foreach {\n                $2ndRemainder = $remainder - $numberslist[$_]\n                if
        ($null -ne $numbersht[$2ndRemainder] ) {\n                    $one * $numberslist[$_]
        * $2ndRemainder\n                    break firstloop\n                }\n            }\n        }\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;PowerShell submission.&lt;/p&gt;\n\n&lt;p&gt;Haven&amp;#39;t
        been here before, nOOb-me posted in the wrong place earlier.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[int[]]$numbers
        = Get-Content &amp;#39;C:\\Users\\username\\scripts\\AdventofCode\\2020\\Day1input.txt&amp;#39;
        \n$numbersht = $numbers | group -AsHashTable\n\n# Part 1\nforeach ($number
        in $numbers) {\n    [int]$remainder = 2020 - $number\n    if ($null -ne $numbersht[$remainder])
        {\n        $number * $remainder\n        break\n    }\n}\n\n# Part 2\n$numberslist
        = [System.Collections.ArrayList]::new()\n$numbers | sort | foreach {[void]$numberslist.Add($_)}\n:firstloop
        foreach ($one in $numbers) {\n    $remainder = 2020 - $one\n    if ($remainder
        -gt 0) {\n        $index = $numberslist.BinarySearch($remainder) \n        switch
        ($index) {\n            {$_ -ge 0} {$2ndloop = ($_-1)..0}\n            {$_
        -lt 0} {$2ndloop = ($numberslist.count+$index)..0 }\n        }\n\n        $2ndloop
        | foreach {\n            $2ndRemainder = $remainder - $numberslist[$_]\n            if
        ($null -ne $numbersht[$2ndRemainder] ) {\n                $one * $numberslist[$_]
        * $2ndRemainder\n                break firstloop\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebk3nj/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebk3nj", "created":
        1606871280.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_gebvlut", "id": "gebvlut", "parent_id":
        "t1_gebk3nj", "depth": 1, "children": ["gebvlut"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606876749.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gebkewe", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "meiko42",
        "can_mod_post": false, "created_utc": 1606871456.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_pgwsp5q", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python\n\nPretty happy with it for a first pass  \n\n\nEDIT: Just to put
        runtime info:\n\n    \n$ time python3 day1.py \n    Part 1: Found 1477, 543\n    Part
        1: Answer is 802011\n    Part 2: Found 422, 577, 1021\n    Part 2: Answer
        is 248607374\n    real    0m 0.02s\n    user    0m 0.01s\n\n&amp;#x200B;\n\n    \n\n    def
        partOne(inputDict):\n        for key, value in inputDict.items():\n            if
        value in inputDict.keys():\n                print(f\"Part 1: Found {key},
        {value}\")\n                answer = key * value\n                print(f\"Part
        1: Answer is {answer}\")\n                return\n    \n    def partTwo(inputDict):\n        for
        value1 in inputDict.values():\n            for value2 in inputDict.values():\n                compliment
        = value1 + value2\n                if compliment in inputDict.keys():\n                    value3
        = inputDict.get(compliment)\n                    print(f\"Part 2: Found {value1},
        {value2}, {value3}\")\n                    answer = value1 * value2 * value3\n                    print(f\"Part
        2: Answer is {answer}\")\n                    return\n    \n    def main():\n    \n        inputDict
        = {}\n        inputDictFlip = {}\n    \n        with open(\"Input.txt\") as
        inputFile:\n            for line in inputFile:\n                compliment
        = 2020 - int(line)\n                inputDict[int(line.rstrip())] = compliment\n                inputDictFlip[compliment]
        = int(line.rstrip())\n    \n        partOne(inputDict)\n    \n        partTwo(inputDictFlip)\n    \n    \n    if
        __name__ == \"__main__\":\n        main()", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Python&lt;/p&gt;\n\n&lt;p&gt;Pretty happy with it
        for a first pass  &lt;/p&gt;\n\n&lt;p&gt;EDIT: Just to put runtime info:&lt;/p&gt;\n\n&lt;p&gt;$
        time python3 day1.py \n    Part 1: Found 1477, 543\n    Part 1: Answer is
        802011\n    Part 2: Found 422, 577, 1021\n    Part 2: Answer is 248607374\n    real    0m
        0.02s\n    user    0m 0.01s&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        partOne(inputDict):\n    for key, value in inputDict.items():\n        if
        value in inputDict.keys():\n            print(f&amp;quot;Part 1: Found {key},
        {value}&amp;quot;)\n            answer = key * value\n            print(f&amp;quot;Part
        1: Answer is {answer}&amp;quot;)\n            return\n\ndef partTwo(inputDict):\n    for
        value1 in inputDict.values():\n        for value2 in inputDict.values():\n            compliment
        = value1 + value2\n            if compliment in inputDict.keys():\n                value3
        = inputDict.get(compliment)\n                print(f&amp;quot;Part 2: Found
        {value1}, {value2}, {value3}&amp;quot;)\n                answer = value1 *
        value2 * value3\n                print(f&amp;quot;Part 2: Answer is {answer}&amp;quot;)\n                return\n\ndef
        main():\n\n    inputDict = {}\n    inputDictFlip = {}\n\n    with open(&amp;quot;Input.txt&amp;quot;)
        as inputFile:\n        for line in inputFile:\n            compliment = 2020
        - int(line)\n            inputDict[int(line.rstrip())] = compliment\n            inputDictFlip[compliment]
        = int(line.rstrip())\n\n    partOne(inputDict)\n\n    partTwo(inputDictFlip)\n\n\nif
        __name__ == &amp;quot;__main__&amp;quot;:\n    main()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebkewe/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebkewe", "created":
        1606871456.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_gebntsg", "id": "gebntsg", "parent_id":
        "t1_gebkewe", "depth": 1, "children": ["gebntsg", "gebtvfn"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gebkzju",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "StONE_ROdGEr",
        "can_mod_post": false, "created_utc": 1606871772.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_qvh4d", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "JavaScript amateur:\n\n&amp;#x200B;\n\n    let result = function detect(a)
        {\n        for (i=0; i&lt;a.length; i++) {\n            for (j=1; j&lt;a.length;
        j++){\n                for (k=2; k&lt;a.length; k++) {\n                    if
        (a[i] + a[j] + a[k] === 2020) {\n                        result = a[i] * a[j]
        * a[k];\n                        break;\n                    }\n                }\n            }\n        }\n    return
        result;\n    }", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;JavaScript
        amateur:&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let
        result = function detect(a) {\n    for (i=0; i&amp;lt;a.length; i++) {\n        for
        (j=1; j&amp;lt;a.length; j++){\n            for (k=2; k&amp;lt;a.length; k++)
        {\n                if (a[i] + a[j] + a[k] === 2020) {\n                    result
        = a[i] * a[j] * a[k];\n                    break;\n                }\n            }\n        }\n    }\nreturn
        result;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebkzju/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebkzju", "created":
        1606871772.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_gecxhgr", "id": "gecxhgr", "parent_id":
        "t1_gebkzju", "depth": 1, "children": ["gecxhgr", "gebsarl"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606872255.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geblftt", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "21JG",
        "can_mod_post": false, "created_utc": 1606872025.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_qdk15", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "[https://github.com/ManDeJan/advent-of-code](https://github.com/ManDeJan/advent-of-code)\n\nSolutions
        in Zig, tried my best to make it very performant, whole algorithm runs in
        \\~3 \u03bcs\n\n1.5 \u03bcs for parsing\n\n0.3 \u03bcs for part 1\n\n1.6 \u03bcs
        for part 2", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a
        href=\"https://github.com/ManDeJan/advent-of-code\"&gt;https://github.com/ManDeJan/advent-of-code&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Solutions
        in Zig, tried my best to make it very performant, whole algorithm runs in
        ~3 \u03bcs&lt;/p&gt;\n\n&lt;p&gt;1.5 \u03bcs for parsing&lt;/p&gt;\n\n&lt;p&gt;0.3
        \u03bcs for part 1&lt;/p&gt;\n\n&lt;p&gt;1.6 \u03bcs for part 2&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geblftt/",
        "subreddit_type": "public", "locked": false, "name": "t1_geblftt", "created":
        1606872025.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geblstp",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "BlurbleBarry",
        "can_mod_post": false, "created_utc": 1606872227.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_fpm6n", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python sets:\n\n    def part_one(expenses, target_sum):\n        \"\"\"If
        a+b=2020, then a=2020-b. Calculate each possible 2020-b then find the matching
        value.\"\"\"\n        complement = [target_sum - expense for expense in expenses]\n        x
        = list(set(expenses) &amp; set(complement))[0]\n        return x * (target_sum
        - x)\n\n\n    def part_two(expenses, target_sum):\n        \"\"\"If a+b+c=2020,
        then c=2020-(a+b). Calculate each possible 2020-(a+b) then find the matching
        value.\"\"\"\n        complement = {\n            2020-(a+b): [a, b]\n            for
        a in expenses\n            for b in expenses\n            if a != b\n        }\n        c
        = list(set(complement.keys()) &amp; set(expenses))[0]\n        a, b = complement[c]\n        return
        a * b * c", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python
        sets:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def part_one(expenses, target_sum):\n    &amp;quot;&amp;quot;&amp;quot;If
        a+b=2020, then a=2020-b. Calculate each possible 2020-b then find the matching
        value.&amp;quot;&amp;quot;&amp;quot;\n    complement = [target_sum - expense
        for expense in expenses]\n    x = list(set(expenses) &amp;amp; set(complement))[0]\n    return
        x * (target_sum - x)\n\n\ndef part_two(expenses, target_sum):\n    &amp;quot;&amp;quot;&amp;quot;If
        a+b+c=2020, then c=2020-(a+b). Calculate each possible 2020-(a+b) then find
        the matching value.&amp;quot;&amp;quot;&amp;quot;\n    complement = {\n        2020-(a+b):
        [a, b]\n        for a in expenses\n        for b in expenses\n        if a
        != b\n    }\n    c = list(set(complement.keys()) &amp;amp; set(expenses))[0]\n    a,
        b = complement[c]\n    return a * b * c\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geblstp/",
        "subreddit_type": "public", "locked": false, "name": "t1_geblstp", "created":
        1606872227.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_gebltre", "id": "gebltre", "parent_id":
        "t1_geblstp", "depth": 1, "children": ["gebltre"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gebpra6",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "darthminimall",
        "can_mod_post": false, "created_utc": 1606874424.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_kyjzi", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# Haskell\n\n    import System.IO(openFile, IOMode(..), hGetContents)\n    import
        Data.Maybe(isNothing, fromJust)\n    \n    findPairProduct _ [_] = Nothing\n    findPairProduct
        n (x:xs) = if x &gt; n then findPairProduct n xs else\n        let y=n-x\n        in
        if elem y xs then Just $ x * y else findPairProduct n xs\n    \n    findTripleProduct
        _ [_, _] = Nothing\n    findTripleProduct n (x:xs) = if x &gt; n then findTripleProduct
        n xs else\n        let m=n-x\n            r=findPairProduct m xs\n        in
        if isNothing r then findTripleProduct n xs else Just $ x*(fromJust r)\n    \n    part1
        = do f &lt;- openFile \"input.txt\" ReadMode\n               c &lt;- hGetContents
        f\n               let r = findPairProduct 2020 $ map read $ lines c\n               if
        isNothing r\n                   then putStrLn \"No pair of numbers adds to
        2020.\"\n                   else putStrLn $ show $ fromJust r\n    \n    part2
        = do f &lt;- openFile \"input.txt\" ReadMode\n               c &lt;- hGetContents
        f\n               let r = findTripleProduct 2020 $ map read $ lines c\n               if
        isNothing r\n                   then putStrLn \"No triple of numbers adds
        to 2020.\"\n                   else putStrLn $ show $ fromJust r\n    \n    main
        = do putStr \"Part 1:\\n\\t\"\n              part1\n              putStr \"Part
        2:\\n\\t\"\n              part2", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;h1&gt;Haskell&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        System.IO(openFile, IOMode(..), hGetContents)\nimport Data.Maybe(isNothing,
        fromJust)\n\nfindPairProduct _ [_] = Nothing\nfindPairProduct n (x:xs) = if
        x &amp;gt; n then findPairProduct n xs else\n    let y=n-x\n    in if elem
        y xs then Just $ x * y else findPairProduct n xs\n\nfindTripleProduct _ [_,
        _] = Nothing\nfindTripleProduct n (x:xs) = if x &amp;gt; n then findTripleProduct
        n xs else\n    let m=n-x\n        r=findPairProduct m xs\n    in if isNothing
        r then findTripleProduct n xs else Just $ x*(fromJust r)\n\npart1 = do f &amp;lt;-
        openFile &amp;quot;input.txt&amp;quot; ReadMode\n           c &amp;lt;- hGetContents
        f\n           let r = findPairProduct 2020 $ map read $ lines c\n           if
        isNothing r\n               then putStrLn &amp;quot;No pair of numbers adds
        to 2020.&amp;quot;\n               else putStrLn $ show $ fromJust r\n\npart2
        = do f &amp;lt;- openFile &amp;quot;input.txt&amp;quot; ReadMode\n           c
        &amp;lt;- hGetContents f\n           let r = findTripleProduct 2020 $ map
        read $ lines c\n           if isNothing r\n               then putStrLn &amp;quot;No
        triple of numbers adds to 2020.&amp;quot;\n               else putStrLn $
        show $ fromJust r\n\nmain = do putStr &amp;quot;Part 1:\\n\\t&amp;quot;\n          part1\n          putStr
        &amp;quot;Part 2:\\n\\t&amp;quot;\n          part2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebpra6/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebpra6", "created":
        1606874424.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606876404.0, "mod_reason_by": null,
        "banned_by": null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gebrkuf", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        3, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "# Rust\n\nO(n) for finding a pair, and O(n\\^2) for finding
        3 numbers that sum to 2020\n\n    use itertools::Itertools;\n    use std::collections::HashSet;\n    \n    fn
        main() {\n        let input = [...];\n    \n        let set: HashSet&lt;_&gt;
        = input.iter().collect();\n        let ans = input.iter().find(|&amp;i| set.contains(&amp;(2020
        - i))).unwrap();\n    \n        println!(\"{}\", ans * (2020 - ans));\n    \n        let
        (a, b) = input\n            .iter()\n            .tuple_combinations()\n            .find(|&amp;(a,
        b)| set.contains(&amp;(2020 - a - b)))\n            .unwrap();\n    \n        println!(\"{}\",
        a * b * (2020 - a - b));\n    }", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_gebrkuf", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;h1&gt;Rust&lt;/h1&gt;\n\n&lt;p&gt;O(n) for finding
        a pair, and O(n^2) for finding 3 numbers that sum to 2020&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use
        itertools::Itertools;\nuse std::collections::HashSet;\n\nfn main() {\n    let
        input = [...];\n\n    let set: HashSet&amp;lt;_&amp;gt; = input.iter().collect();\n    let
        ans = input.iter().find(|&amp;amp;i| set.contains(&amp;amp;(2020 - i))).unwrap();\n\n    println!(&amp;quot;{}&amp;quot;,
        ans * (2020 - ans));\n\n    let (a, b) = input\n        .iter()\n        .tuple_combinations()\n        .find(|&amp;amp;(a,
        b)| set.contains(&amp;amp;(2020 - a - b)))\n        .unwrap();\n\n    println!(&amp;quot;{}&amp;quot;,
        a * b * (2020 - a - b));\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebrkuf/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606875448.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606875448.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_gebrlq1", "id": "gebrlq1", "parent_id":
        "t1_gebrkuf", "depth": 1, "children": ["gebrlq1", "gecnxkq"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gebt73a",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Deoangel",
        "can_mod_post": false, "created_utc": 1606876346.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_3u1vn84k", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Prolog**\n\nNote that i fromated the input File (eingabePL.txt) so that
        every number is followed by a point and in its own line.\n\n    lsgPartOne(N)
        :-\n        read_input_txt(L),\n        member(Y, L),\n        member(X, L),\n        2020
        is X + Y,\n        N is X * Y.\n\n    lsgPartTwo(N) :-\n        read_input_txt(L),\n        member(Y,
        L),\n        member(X, L),\n        member(Z, L),\n        2020 is X + Y +
        Z,\n        N is X * Y * Z.\n\n    read_input_txt(L) :-\n        open(''eingabePL.txt'',
        read, Str),\n        read_into_list(Str, L),\n        close(Str).\n\n    read_into_list(Stream,
        []) :-\n        at_end_of_stream(Stream).\n\n    read_into_list(Stream, [X|L])
        :-\n        \\+ at_end_of_stream(Stream),\n        read(Stream, X),\n        read_into_list(Stream,
        L).", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Prolog&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Note
        that i fromated the input File (eingabePL.txt) so that every number is followed
        by a point and in its own line.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;lsgPartOne(N)
        :-\n    read_input_txt(L),\n    member(Y, L),\n    member(X, L),\n    2020
        is X + Y,\n    N is X * Y.\n\nlsgPartTwo(N) :-\n    read_input_txt(L),\n    member(Y,
        L),\n    member(X, L),\n    member(Z, L),\n    2020 is X + Y + Z,\n    N is
        X * Y * Z.\n\nread_input_txt(L) :-\n    open(&amp;#39;eingabePL.txt&amp;#39;,
        read, Str),\n    read_into_list(Str, L),\n    close(Str).\n\nread_into_list(Stream,
        []) :-\n    at_end_of_stream(Stream).\n\nread_into_list(Stream, [X|L]) :-\n    \\+
        at_end_of_stream(Stream),\n    read(Stream, X),\n    read_into_list(Stream,
        L).\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebt73a/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebt73a", "created":
        1606876346.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gebx1yf",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "TheRealCaptainDanger",
        "can_mod_post": false, "created_utc": 1606878445.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_94mio9w5", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "#Python\n\n    #! /usr/bin/env python3\n\n    def part_one(year):\n        for
        idx, num in enumerate(nums):\n            for num2 in nums[idx+1:]:\n                if
        year == num + num2:\n                    print(num, num2)\n                    print(num
        * num2)\n                    return\n\n\n    def part_two(year):\n        for
        idx, num in enumerate(nums):\n            for num2 in nums[idx+1:]:\n                for
        num3 in nums[idx+2:]:\n                    if year == num + num2 + num3:\n                        print(num,
        num2, num3)\n                        print(num * num2 * num3)\n                        return\n\n\n    if
        __name__ == \"__main__\":\n\n        with open(\"2020-01.in\") as f:\n            nums
        = [int(line.strip()) for line in f]\n\n        part_one(2020)\n        part_two(2020)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Python&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;#!
        /usr/bin/env python3\n\ndef part_one(year):\n    for idx, num in enumerate(nums):\n        for
        num2 in nums[idx+1:]:\n            if year == num + num2:\n                print(num,
        num2)\n                print(num * num2)\n                return\n\n\ndef
        part_two(year):\n    for idx, num in enumerate(nums):\n        for num2 in
        nums[idx+1:]:\n            for num3 in nums[idx+2:]:\n                if year
        == num + num2 + num3:\n                    print(num, num2, num3)\n                    print(num
        * num2 * num3)\n                    return\n\n\nif __name__ == &amp;quot;__main__&amp;quot;:\n\n    with
        open(&amp;quot;2020-01.in&amp;quot;) as f:\n        nums = [int(line.strip())
        for line in f]\n\n    part_one(2020)\n    part_two(2020)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebx1yf/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebx1yf", "created":
        1606878445.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gec4rjz",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "jnetterf",
        "can_mod_post": false, "created_utc": 1606883044.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_byn48", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**SQLite**\n\n**d1.csv** is the input, with the line \"**expense**\" prepended.\n\n    .mode
        csv\n    .import d1.csv data\n    \n    CREATE INDEX expense_lookup ON data(expense);\n    \n    SELECT
        data.expense * data2.expense * data3.expense AS part_b\n    FROM data\n    JOIN
        data AS data2 ON data2.rowid &gt; data.rowid\n    JOIN data AS data3 ON data3.rowid
        &gt; data2.rowid AND data3.expense = 2020 - data2.expense - data.expense;",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;SQLite&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;d1.csv&lt;/strong&gt;
        is the input, with the line &amp;quot;&lt;strong&gt;expense&lt;/strong&gt;&amp;quot;
        prepended.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;.mode csv\n.import d1.csv data\n\nCREATE
        INDEX expense_lookup ON data(expense);\n\nSELECT data.expense * data2.expense
        * data3.expense AS part_b\nFROM data\nJOIN data AS data2 ON data2.rowid &amp;gt;
        data.rowid\nJOIN data AS data3 ON data3.rowid &amp;gt; data2.rowid AND data3.expense
        = 2020 - data2.expense - data.expense;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gec4rjz/",
        "subreddit_type": "public", "locked": false, "name": "t1_gec4rjz", "created":
        1606883044.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gec8bw1",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Bizzle_worldwide",
        "can_mod_post": false, "created_utc": 1606885359.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_11onq0", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Python**\n\nPart 1, I iterate the list once, using a dictionary to store
        the keys of the items I''ve checked. If at any point 2020 minus the current
        item is a key in my dictionary, I return.\n\nPart 2, I filter any items in
        the list larger than 2020 minus the two smallest items in the list, as those
        won''t be possible. Then I work my way down from the largest items in the
        array, looking for j in all remaining items in list which are smaller than
        2020-i, and checking to see if there''s a corresponding k in the subset of
        list smaller than j.\n\n    def part_one(list):\n      list.sort()\n      data
        = {}\n      for i in list:\n        j = 2020 - i\n        if j in data:\n          return
        i*j\n        data[i]=True\n    \n    def part_two(list):\n      list.sort()\n      list
        = [i for i in list if 2020-i &gt;= list[0]+list[1]]\n      while list:\n        i
        = list.pop()\n        for j in [j for j in list if j &lt; 2020-i]:\n          k
        = 2020-i-j\n          if k in [k for k in list if k &lt; j]:\n            return
        i*j*k\n    \n    list = [int(i) for i in input.split(\"\\n\")]", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Part
        1, I iterate the list once, using a dictionary to store the keys of the items
        I&amp;#39;ve checked. If at any point 2020 minus the current item is a key
        in my dictionary, I return.&lt;/p&gt;\n\n&lt;p&gt;Part 2, I filter any items
        in the list larger than 2020 minus the two smallest items in the list, as
        those won&amp;#39;t be possible. Then I work my way down from the largest
        items in the array, looking for j in all remaining items in list which are
        smaller than 2020-i, and checking to see if there&amp;#39;s a corresponding
        k in the subset of list smaller than j.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        part_one(list):\n  list.sort()\n  data = {}\n  for i in list:\n    j = 2020
        - i\n    if j in data:\n      return i*j\n    data[i]=True\n\ndef part_two(list):\n  list.sort()\n  list
        = [i for i in list if 2020-i &amp;gt;= list[0]+list[1]]\n  while list:\n    i
        = list.pop()\n    for j in [j for j in list if j &amp;lt; 2020-i]:\n      k
        = 2020-i-j\n      if k in [k for k in list if k &amp;lt; j]:\n        return
        i*j*k\n\nlist = [int(i) for i in input.split(&amp;quot;\\n&amp;quot;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gec8bw1/",
        "subreddit_type": "public", "locked": false, "name": "t1_gec8bw1", "created":
        1606885359.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gecca7r",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "nxrblJugger",
        "can_mod_post": false, "created_utc": 1606888186.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_2s6i6nk3", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Julia**\n\nI kind of chose the lazy(read practical) way out and just let
        the randomness of the universe do the work for me! ''list'' is an array of
        the numbers I just copied into my script. ''counter'' for counting the number
        of iteration just to see what the number would be for fun.\n\nPart 1:\n\n    let
        a = 0, b = 0, counter = 0\n    \n        while a+b != 2020\n            a
        = list[rand(1:length(list))]\n            b = list[rand(1:length(list))]\n            counter
        += 1\n        end\n    \n    ans = a*b\n    \n    println(counter)\n    println(\"$a
        $b\")\n    println(ans)\n    end\n\nPart 2: similar to part 1 but adjusted
        for third variable\n\n    let a = 0, b = 0, counter = 0, c = 0\n    \n        while
        a+b+c != 2020\n            a = list[rand(1:length(list))]\n            b =
        list[rand(1:length(list))]\n            c = list[rand(1:length(list))]\n            counter
        += 1\n        end\n    \n    ans = a*b*c\n    \n    println(counter)\n    println(\"$a
        $b $c\")\n    println(ans)\n    end", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Julia&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I
        kind of chose the lazy(read practical) way out and just let the randomness
        of the universe do the work for me! &amp;#39;list&amp;#39; is an array of
        the numbers I just copied into my script. &amp;#39;counter&amp;#39; for counting
        the number of iteration just to see what the number would be for fun.&lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let a = 0, b = 0, counter = 0\n\n    while
        a+b != 2020\n        a = list[rand(1:length(list))]\n        b = list[rand(1:length(list))]\n        counter
        += 1\n    end\n\nans = a*b\n\nprintln(counter)\nprintln(&amp;quot;$a $b&amp;quot;)\nprintln(ans)\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2: similar to part 1 but adjusted for third variable&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let
        a = 0, b = 0, counter = 0, c = 0\n\n    while a+b+c != 2020\n        a = list[rand(1:length(list))]\n        b
        = list[rand(1:length(list))]\n        c = list[rand(1:length(list))]\n        counter
        += 1\n    end\n\nans = a*b*c\n\nprintln(counter)\nprintln(&amp;quot;$a $b
        $c&amp;quot;)\nprintln(ans)\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gecca7r/",
        "subreddit_type": "public", "locked": false, "name": "t1_gecca7r", "created":
        1606888186.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606890325.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gecelbl", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "pdbogen",
        "can_mod_post": false, "created_utc": 1606889991.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_6hj21", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**sbcl / lisp**\n\n    (require \"asdf\")\n    (require \"split-sequence\")\n    \n    (defun
        seek (target depth input)\n      (if (not input) \n        (return-from seek
        ''nil))\n      (if (= depth 0)\n        (let ((found (find target input)))\n          (if
        found (list found) ''nil))\n        (let ((result (seek (- target (first input))
        (- depth 1) (rest input))))\n          (if result\n            (concatenate
        ''list (list (first input)) result)\n            (seek target depth (rest
        input))))))\n    \n    \n    (defvar depth \n      (if (= (length sb-ext:*posix-argv*)
        2) \n        (parse-integer (elt sb-ext:*posix-argv* 1)) \n        1))\n    \n    (defvar
        input (uiop:read-file-string \"input\"))\n    (setq input (string-trim ''(#\\newline)
        input))\n    (setq input (SPLIT-SEQUENCE:split-sequence #\\newline input))\n    (setq
        input (map ''list (lambda (x) (parse-integer x)) input))\n    (defvar result
        (seek 2020 depth input))\n    (format t \"~a ~%\" result)\n    (format t \"~a
        ~%\" (reduce #''* result))\n\nFirst time writing lisp, any suggestions/advice/critique?",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;sbcl /
        lisp&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(require &amp;quot;asdf&amp;quot;)\n(require
        &amp;quot;split-sequence&amp;quot;)\n\n(defun seek (target depth input)\n  (if
        (not input) \n    (return-from seek &amp;#39;nil))\n  (if (= depth 0)\n    (let
        ((found (find target input)))\n      (if found (list found) &amp;#39;nil))\n    (let
        ((result (seek (- target (first input)) (- depth 1) (rest input))))\n      (if
        result\n        (concatenate &amp;#39;list (list (first input)) result)\n        (seek
        target depth (rest input))))))\n\n\n(defvar depth \n  (if (= (length sb-ext:*posix-argv*)
        2) \n    (parse-integer (elt sb-ext:*posix-argv* 1)) \n    1))\n\n(defvar
        input (uiop:read-file-string &amp;quot;input&amp;quot;))\n(setq input (string-trim
        &amp;#39;(#\\newline) input))\n(setq input (SPLIT-SEQUENCE:split-sequence
        #\\newline input))\n(setq input (map &amp;#39;list (lambda (x) (parse-integer
        x)) input))\n(defvar result (seek 2020 depth input))\n(format t &amp;quot;~a
        ~%&amp;quot; result)\n(format t &amp;quot;~a ~%&amp;quot; (reduce #&amp;#39;*
        result))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;First time writing lisp, any
        suggestions/advice/critique?&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gecelbl/",
        "subreddit_type": "public", "locked": false, "name": "t1_gecelbl", "created":
        1606889991.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_gecelwa", "id": "gecelwa", "parent_id":
        "t1_gecelbl", "depth": 1, "children": ["gecelwa"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gecfir8",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Darkrai469",
        "can_mod_post": false, "created_utc": 1606890763.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_6c7zs1av", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Python3 162/72**\n\n    l=[] \n    for s in open(\"day1.txt\"):\n        s=int(s.strip())\n        l.append(s)\n    part1
        = 0\n    part2 = 0\n    for a in l:\n        for b in l:\n            if a+b==2020:\n                part1=a*b\n            for
        c in l:\n                if a+b+c==2020:\n                    part2=a*b*c\n    print(part1)\n    print(part2)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python3
        162/72&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;l=[] \nfor s in
        open(&amp;quot;day1.txt&amp;quot;):\n    s=int(s.strip())\n    l.append(s)\npart1
        = 0\npart2 = 0\nfor a in l:\n    for b in l:\n        if a+b==2020:\n            part1=a*b\n        for
        c in l:\n            if a+b+c==2020:\n                part2=a*b*c\nprint(part1)\nprint(part2)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gecfir8/",
        "subreddit_type": "public", "locked": false, "name": "t1_gecfir8", "created":
        1606890763.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606895125.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geck8u2", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "dkgreen24",
        "can_mod_post": false, "created_utc": 1606894859.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_12sugk", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# R Programming\n\nAoC Day 1 [Link](https://adventofcode.com/2020/day/1)\n\n##
        Part I\n\n[Code](https://github.com/datasci-iopsy/advent_of_code/blob/main/2020/day1.R)\n\n##
        Part II\n\n**TBD**", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;R
        Programming&lt;/h1&gt;\n\n&lt;p&gt;AoC Day 1 &lt;a href=\"https://adventofcode.com/2020/day/1\"&gt;Link&lt;/a&gt;&lt;/p&gt;\n\n&lt;h2&gt;Part
        I&lt;/h2&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/datasci-iopsy/advent_of_code/blob/main/2020/day1.R\"&gt;Code&lt;/a&gt;&lt;/p&gt;\n\n&lt;h2&gt;Part
        II&lt;/h2&gt;\n\n&lt;p&gt;&lt;strong&gt;TBD&lt;/strong&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geck8u2/",
        "subreddit_type": "public", "locked": false, "name": "t1_geck8u2", "created":
        1606894859.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606898914.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gecoa0z", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Ferelderin",
        "can_mod_post": false, "created_utc": 1606898712.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_okq5m", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**R, RStudio**\n\nPart 1\n\n    # Load libraries\n    library(gtools)\n\n    #
        Read in data\n    expense &lt;- read.delim(\"expense.txt\", header = FALSE)\n\n    #
        Calculate all combinations and put them in a data frame\n    combins &lt;-
        as.data.frame(combinations(length(expense$V1), 2, expense$V1))\n\n    # Add
        all combinations, add them to the data frame\n    combins$added &lt;- combins[,
        1] + combins[, 2]\n\n    # Multiply rows where added matches 2020\n    combins[match(2020,
        combins$added), 1] * combins[match(2020, combins$added), 2]\n\nPart 2\n\n    #
        Calculate all combinations of three and put them in a data frame\n    combins2
        &lt;- as.data.frame(combinations(length(expense$V1), 3, expense$V1))\n\n    #
        Add all combinations, add them to the data frame\n    combins2$added &lt;-
        combins2[, 1] + combins2[, 2] + combins2[, 3]\n\n    # Multiply rows where
        added matches 2020\n    combins2[match(2020, combins2$added), 1] * combins2[match(2020,
        combins2$added), 2] * \n    combins2[match(2020, combins2$added), 3]", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;R, RStudio&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Part
        1&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# Load libraries\nlibrary(gtools)\n\n#
        Read in data\nexpense &amp;lt;- read.delim(&amp;quot;expense.txt&amp;quot;,
        header = FALSE)\n\n# Calculate all combinations and put them in a data frame\ncombins
        &amp;lt;- as.data.frame(combinations(length(expense$V1), 2, expense$V1))\n\n#
        Add all combinations, add them to the data frame\ncombins$added &amp;lt;-
        combins[, 1] + combins[, 2]\n\n# Multiply rows where added matches 2020\ncombins[match(2020,
        combins$added), 1] * combins[match(2020, combins$added), 2]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# Calculate all combinations of three
        and put them in a data frame\ncombins2 &amp;lt;- as.data.frame(combinations(length(expense$V1),
        3, expense$V1))\n\n# Add all combinations, add them to the data frame\ncombins2$added
        &amp;lt;- combins2[, 1] + combins2[, 2] + combins2[, 3]\n\n# Multiply rows
        where added matches 2020\ncombins2[match(2020, combins2$added), 1] * combins2[match(2020,
        combins2$added), 2] * \ncombins2[match(2020, combins2$added), 3]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gecoa0z/",
        "subreddit_type": "public", "locked": false, "name": "t1_gecoa0z", "created":
        1606898712.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gecoya2",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "moullas",
        "can_mod_post": false, "created_utc": 1606899395.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_2w3s0sw8", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# Powershell\n\nJust something I whipped up in Powershell. Added flags to
        break upon finding a match to stop iterating through the array.\n\n[https://github.com/moullas/adventofcode/blob/main/2020/day1.ps1](https://github.com/moullas/adventofcode/blob/main/2020/day1.ps1)\n\n    $aocYear
        = \"2020\"\n    $aocDay = 1\n    Set-Location $PSScriptRoot\n    Write-Host
        \"********************************************\" -ForegroundColor Green\n    Write-Host
        \"* Advent of Code $aocYear - Solution for Day $aocDay *\" -ForegroundColor
        Yellow\n    Write-Host \"********************************************\" -ForegroundColor
        Green\n    # https://adventofcode.com/2020/day/1/input\n    [int[]]$inputData
        = Get-Content day1input.txt\n    \n    Write-Host \"Part 1\" -ForegroundColor
        Yellow\n    $breakPart = $false\n    foreach ($i in $inputData){\n        if
        ($breakPart){Break}\n        foreach ($x in $inputData){\n            if (($i+$x)
        -eq 2020){\n                Write-Host \"Factors are $i and $x\"\n                $Sum
        = $i * $x\n                Write-Host \"Multiplied Sum is $Sum\"    \n                $breakPart=
        $true\n            }\n        }\n    }\n    Write-Host \"********************************************\"
        -ForegroundColor Green\n    #Part 2\n    Write-Host \"Part 2\" -ForegroundColor
        Yellow\n    $breakPart = $false\n    foreach ($i in $inputData){\n        if
        ($breakPart){Break}\n        foreach ($x in $inputData){\n            if ($breakPart){Break}\n            foreach
        ($y in $inputData){\n                if (($i+$x+$y) -eq 2020){\n                    Write-Host
        \"Factors are $i , $x and $y\"\n                    $Sum = $i * $x * $y\n                    Write-Host
        \"Multiplied Sum is $Sum\"    \n                    $breakPart= $true\n                }\n            }\n            \n        }\n    }\n    Write-Host
        \"********************************************\" -ForegroundColor Green",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Powershell&lt;/h1&gt;\n\n&lt;p&gt;Just
        something I whipped up in Powershell. Added flags to break upon finding a
        match to stop iterating through the array.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/moullas/adventofcode/blob/main/2020/day1.ps1\"&gt;https://github.com/moullas/adventofcode/blob/main/2020/day1.ps1&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$aocYear
        = &amp;quot;2020&amp;quot;\n$aocDay = 1\nSet-Location $PSScriptRoot\nWrite-Host
        &amp;quot;********************************************&amp;quot; -ForegroundColor
        Green\nWrite-Host &amp;quot;* Advent of Code $aocYear - Solution for Day $aocDay
        *&amp;quot; -ForegroundColor Yellow\nWrite-Host &amp;quot;********************************************&amp;quot;
        -ForegroundColor Green\n# https://adventofcode.com/2020/day/1/input\n[int[]]$inputData
        = Get-Content day1input.txt\n\nWrite-Host &amp;quot;Part 1&amp;quot; -ForegroundColor
        Yellow\n$breakPart = $false\nforeach ($i in $inputData){\n    if ($breakPart){Break}\n    foreach
        ($x in $inputData){\n        if (($i+$x) -eq 2020){\n            Write-Host
        &amp;quot;Factors are $i and $x&amp;quot;\n            $Sum = $i * $x\n            Write-Host
        &amp;quot;Multiplied Sum is $Sum&amp;quot;    \n            $breakPart= $true\n        }\n    }\n}\nWrite-Host
        &amp;quot;********************************************&amp;quot; -ForegroundColor
        Green\n#Part 2\nWrite-Host &amp;quot;Part 2&amp;quot; -ForegroundColor Yellow\n$breakPart
        = $false\nforeach ($i in $inputData){\n    if ($breakPart){Break}\n    foreach
        ($x in $inputData){\n        if ($breakPart){Break}\n        foreach ($y in
        $inputData){\n            if (($i+$x+$y) -eq 2020){\n                Write-Host
        &amp;quot;Factors are $i , $x and $y&amp;quot;\n                $Sum = $i
        * $x * $y\n                Write-Host &amp;quot;Multiplied Sum is $Sum&amp;quot;    \n                $breakPart=
        $true\n            }\n        }\n\n    }\n}\nWrite-Host &amp;quot;********************************************&amp;quot;
        -ForegroundColor Green\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gecoya2/", "subreddit_type":
        "public", "locked": false, "name": "t1_gecoya2", "created": 1606899395.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 3, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gedn6ai", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "ilanpillemer", "can_mod_post": false,
        "created_utc": 1606923656.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 3, "author_fullname": "t2_64f29zm", "report_reasons": null, "approved_by":
        null, "all_awardings": [], "collapsed": false, "body": "Julia\n\n    xs =
        readdlm(\"input.txt\", ''\\t'', Int, ''\\n'')\n    [x*y*z for x \u2208 xs,
        y \u2208 xs, z \u2208 xs if x + y + z == 2020][1]", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Julia&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;xs = readdlm(&amp;quot;input.txt&amp;quot;,
        &amp;#39;\\t&amp;#39;, Int, &amp;#39;\\n&amp;#39;)\n[x*y*z for x \u2208 xs,
        y \u2208 xs, z \u2208 xs if x + y + z == 2020][1]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gedn6ai/",
        "subreddit_type": "public", "locked": false, "name": "t1_gedn6ai", "created":
        1606923656.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_geduye2", "id": "geduye2", "parent_id":
        "t1_gedn6ai", "depth": 1, "children": ["geduye2"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 5, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8d3cg",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "cjester",
        "can_mod_post": false, "created_utc": 1606799922.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 5, "author_fullname": "t2_3ad0c", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python 3\n\n    from itertools import combinations\n\n    with open(''2020_01.txt'')
        as f:\n        data = f.readlines()\n\n    data = [row.rstrip() for row in
        data]\n\n    def part1(data):\n        for x,y in combinations(data, 2):\n            if
        int(x) + int(y) == 2020:\n                answer = int(x)*int(y)\n                return
        answer\n\n    def part2(data):\n        for x,y,z in combinations(data, 3):\n            if
        int(x) + int(y) + int(z) == 2020:\n                answer = int(x)*int(y)*int(z)\n                return
        answer\n\n    print(part1(data))\n    print(part2(data))", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Python 3&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from
        itertools import combinations\n\nwith open(&amp;#39;2020_01.txt&amp;#39;)
        as f:\n    data = f.readlines()\n\ndata = [row.rstrip() for row in data]\n\ndef
        part1(data):\n    for x,y in combinations(data, 2):\n        if int(x) + int(y)
        == 2020:\n            answer = int(x)*int(y)\n            return answer\n\ndef
        part2(data):\n    for x,y,z in combinations(data, 3):\n        if int(x) +
        int(y) + int(z) == 2020:\n            answer = int(x)*int(y)*int(z)\n            return
        answer\n\nprint(part1(data))\nprint(part2(data))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8d3cg/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8d3cg", "created":
        1606799922.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8ettl", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": false, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_ge8d3cg", "score":
        7, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_ge8ettl", "collapsed": true, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8ettl/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606801245.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606801245.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge8g05p", "id": "ge8g05p", "parent_id":
        "t1_ge8ettl", "depth": 2, "children": ["ge8g05p"]}}, {"kind": "more", "data":
        {"count": 2, "name": "t1_ge8j5qa", "id": "ge8j5qa", "parent_id": "t1_ge8d3cg",
        "depth": 1, "children": ["ge8j5qa"]}}, {"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 3,
        "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8japz",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "muckenhoupt",
        "can_mod_post": false, "created_utc": 1606804896.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_429bo7vb", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "This year, I have decided to attempt Advent in Prolog. It''s not a language
        I''m very familiar with, despite having toyed with it a bit back in college.
        But I''m motivated to learn it better because I''m involved in a project that
        uses it on the back end, and although I''m not responsible for that portion
        of the project, I''d like to understand it better.\n\nHere''s my code for
        day 1. Bear in mind that I don''t really know what I''m doing and it took
        me about an hour just to figure out how to read an input stream to a list.
        If we have any Prolog experts here, critique would be welcome.\n\n[https://www.wurb.com/owncloud/index.php/s/iEKuL0IqxGrBrdl/download?path=%2F&amp;files=01.pl](https://www.wurb.com/owncloud/index.php/s/iEKuL0IqxGrBrdl/download?path=%2F&amp;files=01.pl)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This year, I have decided
        to attempt Advent in Prolog. It&amp;#39;s not a language I&amp;#39;m very
        familiar with, despite having toyed with it a bit back in college. But I&amp;#39;m
        motivated to learn it better because I&amp;#39;m involved in a project that
        uses it on the back end, and although I&amp;#39;m not responsible for that
        portion of the project, I&amp;#39;d like to understand it better.&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s
        my code for day 1. Bear in mind that I don&amp;#39;t really know what I&amp;#39;m
        doing and it took me about an hour just to figure out how to read an input
        stream to a list. If we have any Prolog experts here, critique would be welcome.&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://www.wurb.com/owncloud/index.php/s/iEKuL0IqxGrBrdl/download?path=%2F&amp;amp;files=01.pl\"&gt;https://www.wurb.com/owncloud/index.php/s/iEKuL0IqxGrBrdl/download?path=%2F&amp;amp;files=01.pl&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8japz/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8japz", "created":
        1606804896.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 8, "name": "t1_gearswe", "id": "gearswe", "parent_id":
        "t1_ge8japz", "depth": 1, "children": ["gearswe", "geaohm1", "gebhwmi"]}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8crvi", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "MarcusTL12",
        "can_mod_post": false, "created_utc": 1606799690.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_32ynqnu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Julia 940/502 which was as fast as the internet let me...\n\n    using Base.Iterators\n    \n    \n    function
        part1()\n        numbers = open(\"inputfiles/day1/input.txt\") do io\n            [parse(Int,
        l) for l in eachline(io)]\n        end\n        #\n        for (a, b) in product(numbers,
        numbers)\n            if a + b == 2020\n                return a * b\n            end\n        end\n    end\n    \n    \n    function
        part2()\n        numbers = open(\"inputfiles/day1/input.txt\") do io\n            [parse(Int,
        l) for l in eachline(io)]\n        end\n        #\n        for (a, b, c) in
        product(numbers, numbers, numbers)\n            if a + b + c == 2020\n                return
        a * b * c\n            end\n        end\n    end", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Julia 940/502 which was as fast as the internet let
        me...&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;using Base.Iterators\n\n\nfunction
        part1()\n    numbers = open(&amp;quot;inputfiles/day1/input.txt&amp;quot;)
        do io\n        [parse(Int, l) for l in eachline(io)]\n    end\n    #\n    for
        (a, b) in product(numbers, numbers)\n        if a + b == 2020\n            return
        a * b\n        end\n    end\nend\n\n\nfunction part2()\n    numbers = open(&amp;quot;inputfiles/day1/input.txt&amp;quot;)
        do io\n        [parse(Int, l) for l in eachline(io)]\n    end\n    #\n    for
        (a, b, c) in product(numbers, numbers, numbers)\n        if a + b + c == 2020\n            return
        a * b * c\n        end\n    end\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8crvi/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8crvi", "created":
        1606799690.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8ctqe",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "itsnotxhad",
        "can_mod_post": false, "created_utc": 1606799727.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_tyj1v", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Dumbest possible C# solution...\n\nhttps://nopaste.ml/?l=csh#XQAAAQCgBQAAAAAAAAA6nMlWi076alCx9N1TtsVNiXecUoGeYT6aP6mR8mlULJpnBWljCQ+4ntCrTFBKTdMY8wlGgidmWJe+M88d4PZQAwyiqghMZ3Z8tAcuyrgZGk3Np171IlZDuFCc4ZP1+N7ECQ4wNQgZIzwkMEqdsSwT4GuejU2CMEdYl4jqSrOAzfCiyc8EOA8m5J/P1mfuZjPAwfF8AKsPhRNfjJmqzYWqMGbOJMqq0x0A89SGxXKklMdrw9V2ShfN8hBLn+bc5B6RMH0nrSljKSPvgCNqUYvGfqLrk4K/dzh7pQLvo2INHbMDr9rsf0qj3/9qepeJxlObs9ArkZrZcPAzKXkraz+RjDoqt+04jFhsWpUf//GoUHBesRXO5WbjqLehOv8nQ6dqZyj60lpxi7QWuaL++7YIV2R0RaJOERPKMf/qO9q1OGYuAdMr6BxyksTdjbS3loCmfmbJx8t2/Gzv/ta8XggrQKHRwrUWLzfsnn2Gh7FmHcLdWJ8HotD/2t0NtQ==",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Dumbest possible C#
        solution...&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://nopaste.ml/?l=csh#XQAAAQCgBQAAAAAAAAA6nMlWi076alCx9N1TtsVNiXecUoGeYT6aP6mR8mlULJpnBWljCQ+4ntCrTFBKTdMY8wlGgidmWJe+M88d4PZQAwyiqghMZ3Z8tAcuyrgZGk3Np171IlZDuFCc4ZP1+N7ECQ4wNQgZIzwkMEqdsSwT4GuejU2CMEdYl4jqSrOAzfCiyc8EOA8m5J/P1mfuZjPAwfF8AKsPhRNfjJmqzYWqMGbOJMqq0x0A89SGxXKklMdrw9V2ShfN8hBLn+bc5B6RMH0nrSljKSPvgCNqUYvGfqLrk4K/dzh7pQLvo2INHbMDr9rsf0qj3/9qepeJxlObs9ArkZrZcPAzKXkraz+RjDoqt+04jFhsWpUf//GoUHBesRXO5WbjqLehOv8nQ6dqZyj60lpxi7QWuaL++7YIV2R0RaJOERPKMf/qO9q1OGYuAdMr6BxyksTdjbS3loCmfmbJx8t2/Gzv/ta8XggrQKHRwrUWLzfsnn2Gh7FmHcLdWJ8HotD/2t0NtQ==\"&gt;https://nopaste.ml/?l=csh#XQAAAQCgBQAAAAAAAAA6nMlWi076alCx9N1TtsVNiXecUoGeYT6aP6mR8mlULJpnBWljCQ+4ntCrTFBKTdMY8wlGgidmWJe+M88d4PZQAwyiqghMZ3Z8tAcuyrgZGk3Np171IlZDuFCc4ZP1+N7ECQ4wNQgZIzwkMEqdsSwT4GuejU2CMEdYl4jqSrOAzfCiyc8EOA8m5J/P1mfuZjPAwfF8AKsPhRNfjJmqzYWqMGbOJMqq0x0A89SGxXKklMdrw9V2ShfN8hBLn+bc5B6RMH0nrSljKSPvgCNqUYvGfqLrk4K/dzh7pQLvo2INHbMDr9rsf0qj3/9qepeJxlObs9ArkZrZcPAzKXkraz+RjDoqt+04jFhsWpUf//GoUHBesRXO5WbjqLehOv8nQ6dqZyj60lpxi7QWuaL++7YIV2R0RaJOERPKMf/qO9q1OGYuAdMr6BxyksTdjbS3loCmfmbJx8t2/Gzv/ta8XggrQKHRwrUWLzfsnn2Gh7FmHcLdWJ8HotD/2t0NtQ==&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8ctqe/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8ctqe", "created":
        1606799727.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8cxl7",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "rabuf",
        "can_mod_post": false, "created_utc": 1606799804.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_38xc9", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Well, setting aside the gateway issues that was a straightforward one. I
        coded up a solution using the example and waited until I could download my
        input itself.\n\nI feel a bit cheap in how I did the second one, but it worked.
        I solved this with Common Lisp.\n\n[Full solution](https://github.com/rabuf/advent-of-code/blob/master/2020/2020.01.org)\n\nHere''s
        the relevant code that solved each part:\n\n    (defun solve-a (input)\n      (loop
        for i from 0 below (length input)\n         do (let ((rest (subseq input (1+
        i)))\n                  (value (nth i input)))\n              (loop for other
        in rest\n                 do (when (= 2020 (+ other value))\n                      (return-from
        solve-a (* other value)))))))\n\nAnd an added loop for the second part.\n\n    (defun
        solve-b (input)\n      (loop for i from 0 below (length input)\n         do
        (let ((rest-01 (subseq input (1+ i)))\n                  (a (nth i input)))\n              (loop
        for j from 0 below (length rest-01)\n                 do (let ((rest-02 (subseq
        input (1+ j)))\n                          (b (nth j rest-01)))\n                      (loop
        for c in rest-02\n                           do (when (= 2020 (+ a b c))\n                                (return-from
        solve-b (* a b c)))))))))", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well,
        setting aside the gateway issues that was a straightforward one. I coded up
        a solution using the example and waited until I could download my input itself.&lt;/p&gt;\n\n&lt;p&gt;I
        feel a bit cheap in how I did the second one, but it worked. I solved this
        with Common Lisp.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/rabuf/advent-of-code/blob/master/2020/2020.01.org\"&gt;Full
        solution&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s the relevant code
        that solved each part:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(defun solve-a
        (input)\n  (loop for i from 0 below (length input)\n     do (let ((rest (subseq
        input (1+ i)))\n              (value (nth i input)))\n          (loop for
        other in rest\n             do (when (= 2020 (+ other value))\n                  (return-from
        solve-a (* other value)))))))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And an
        added loop for the second part.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(defun
        solve-b (input)\n  (loop for i from 0 below (length input)\n     do (let ((rest-01
        (subseq input (1+ i)))\n              (a (nth i input)))\n          (loop
        for j from 0 below (length rest-01)\n             do (let ((rest-02 (subseq
        input (1+ j)))\n                      (b (nth j rest-01)))\n                  (loop
        for c in rest-02\n                       do (when (= 2020 (+ a b c))\n                            (return-from
        solve-b (* a b c)))))))))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8cxl7/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8cxl7", "created": 1606799804.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": 1606822685.0, "mod_reason_by": null, "banned_by": null, "removal_reason":
        null, "link_id": "t3_k4e4lm", "author_flair_template_id": null, "likes": null,
        "replies": "", "user_reports": [], "saved": false, "id": "ge8d0wc", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        "DELETED", "no_follow": true, "author": "[deleted]", "can_mod_post": false,
        "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2, "approved_by":
        null, "mod_note": null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body":
        "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class": null, "name":
        "t1_ge8d0wc", "collapsed": false, "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8d0wc/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606799872.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606799872.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_ge8lzu2", "id": "ge8lzu2", "parent_id":
        "t1_ge8d0wc", "depth": 1, "children": ["ge8lzu2", "ge8eo59"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8d6bv",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "allergic2Luxembourg",
        "can_mod_post": false, "created_utc": 1606799983.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_2sppxijp", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python. Came here to post about the site being down and didn''t get on the
        leaderboard. Who knows if I would have otherwise.\n\n    import itertools\n    \n    import
        advent_tools\n    \n    def run_part_1():\n        data = [row[0] for row
        in advent_tools.read_all_integers()]\n        for a, b in itertools.combinations(data,
        2):\n            if a + b == 2020:\n                return a * b\n    \n    def
        run_part_2():\n        data = [row[0] for row in advent_tools.read_all_integers()]\n        for
        a, b, c in itertools.combinations(data, 3):\n            if a + b + c == 2020:
        return a * b * c\n    \n    if __name__ == ''__main__'':\n        print(run_part_1())\n        print(run_part_2())\n\nThe
        little library advent\\_tools that I wrote to myself that includes reading
        the input files is here: [https://github.com/moink/Advent2020/blob/master/advent\\_tools.py](https://github.com/moink/Advent2020/blob/master/advent_tools.py)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python. Came here to
        post about the site being down and didn&amp;#39;t get on the leaderboard.
        Who knows if I would have otherwise.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        itertools\n\nimport advent_tools\n\ndef run_part_1():\n    data = [row[0]
        for row in advent_tools.read_all_integers()]\n    for a, b in itertools.combinations(data,
        2):\n        if a + b == 2020:\n            return a * b\n\ndef run_part_2():\n    data
        = [row[0] for row in advent_tools.read_all_integers()]\n    for a, b, c in
        itertools.combinations(data, 3):\n        if a + b + c == 2020: return a *
        b * c\n\nif __name__ == &amp;#39;__main__&amp;#39;:\n    print(run_part_1())\n    print(run_part_2())\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The
        little library advent_tools that I wrote to myself that includes reading the
        input files is here: &lt;a href=\"https://github.com/moink/Advent2020/blob/master/advent_tools.py\"&gt;https://github.com/moink/Advent2020/blob/master/advent_tools.py&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8d6bv/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8d6bv", "created":
        1606799983.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8d8xr",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "vesche",
        "can_mod_post": false, "created_utc": 1606800037.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_gw4em", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Slow on the refresh I suppose :P 552/644\n\n    with open(''input1.txt'')
        as f:\n        data = list(map(int, f.read().splitlines()))\n\n    def part1():\n        for
        a in data:\n            for b in data:\n                if a + b == 2020:\n                    return
        f''part 1: {a * b}''\n\n    def part2():\n        for a in data:\n            for
        b in data:\n                for c in data:\n                    if a + b +
        c == 2020:\n                        return f''part 2: {a * b * c}''\n\n    print(part1())\n    print(part2())",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Slow on the refresh
        I suppose :P 552/644&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with open(&amp;#39;input1.txt&amp;#39;)
        as f:\n    data = list(map(int, f.read().splitlines()))\n\ndef part1():\n    for
        a in data:\n        for b in data:\n            if a + b == 2020:\n                return
        f&amp;#39;part 1: {a * b}&amp;#39;\n\ndef part2():\n    for a in data:\n        for
        b in data:\n            for c in data:\n                if a + b + c == 2020:\n                    return
        f&amp;#39;part 2: {a * b * c}&amp;#39;\n\nprint(part1())\nprint(part2())\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8d8xr/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8d8xr", "created":
        1606800037.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606800894.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8de7e", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "fmynarski",
        "can_mod_post": false, "created_utc": 1606800143.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_4k3nh8kk", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python 567/255. Unlucky refreshing i guess :) [github](https://github.com/filipmlynarski/Advent-of-Code)\n\n    puzzle
        = list(map(int, open(''puzzle/01.in'').readlines()))\n    print(next(num_1
        * num_2 for idx_1, num_1 in enumerate(puzzle)\n               for num_2 in
        puzzle[idx_1 + 1:] if num_1 + num_2 == 2020))\n    print(next(\n        num_1
        * num_2 * num_3\n        for idx_1, num_1 in enumerate(puzzle)\n        for
        idx_2, num_2 in enumerate(puzzle[idx_1 + 1:])\n        for num_3 in puzzle[idx_2
        + 1:]\n        if num_1 + num_2 + num_3 == 2020\n    ))", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Python 567/255. Unlucky refreshing i guess
        :) &lt;a href=\"https://github.com/filipmlynarski/Advent-of-Code\"&gt;github&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;puzzle
        = list(map(int, open(&amp;#39;puzzle/01.in&amp;#39;).readlines()))\nprint(next(num_1
        * num_2 for idx_1, num_1 in enumerate(puzzle)\n           for num_2 in puzzle[idx_1
        + 1:] if num_1 + num_2 == 2020))\nprint(next(\n    num_1 * num_2 * num_3\n    for
        idx_1, num_1 in enumerate(puzzle)\n    for idx_2, num_2 in enumerate(puzzle[idx_1
        + 1:])\n    for num_3 in puzzle[idx_2 + 1:]\n    if num_1 + num_2 + num_3
        == 2020\n))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8de7e/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8de7e", "created":
        1606800143.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8debh",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "lhrad",
        "can_mod_post": false, "created_utc": 1606800146.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_jap5eqp", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "[Python3](https://nopaste.ml/?l=py#XQAAAQD4AAAAAAAAAAA0m0pnuFI8c914retSmoIG37eNUhEzYlrRx8M7hgmZV+zvFFvMNVlQeqqqYP8F5IUEvrAYQ8O8UCKiN1ioQTvkFrZ8i6z3FTsBJJDFMl+WDNJSR+2VmYNd1xKNKI5s9ZcydM/XO5g+aTICxwptiEGdGPa/3e0kaJH6QDOD6b5qzX3gimMtvHyCgsQelhxUPeySKjHKE8xImPMEhdmNkhv0lyPlek0fMb+TYM+HFF3AZyTfOpOmRvpHd1qc/Lt3oA==)
        183 / 85\n\nI got lucky enough to get my input before the crash but could
        submit afterwards only. I really hope scores won''t get deleted from personal
        stats at least, I''ve been fighting for my first aoc scores for years (and
        in my country it starts at 6 am local time).\n\nEDIT: As code is short, I
        paste directly too.\n\n    import itertools\n    \n    INPUT_FILE = \"1.in\"\n    \n    with
        open(INPUT_FILE, ''r'') as f:\n        inp = f.read().splitlines()\n    \n    inp
        = list(map(int, inp))\n    \n    for each in itertools.combinations(inp, r
        = 3):\n        if sum(each) == 2020:\n            print(each[0] * each[1]
        * each[2])", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a
        href=\"https://nopaste.ml/?l=py#XQAAAQD4AAAAAAAAAAA0m0pnuFI8c914retSmoIG37eNUhEzYlrRx8M7hgmZV+zvFFvMNVlQeqqqYP8F5IUEvrAYQ8O8UCKiN1ioQTvkFrZ8i6z3FTsBJJDFMl+WDNJSR+2VmYNd1xKNKI5s9ZcydM/XO5g+aTICxwptiEGdGPa/3e0kaJH6QDOD6b5qzX3gimMtvHyCgsQelhxUPeySKjHKE8xImPMEhdmNkhv0lyPlek0fMb+TYM+HFF3AZyTfOpOmRvpHd1qc/Lt3oA==\"&gt;Python3&lt;/a&gt;
        183 / 85&lt;/p&gt;\n\n&lt;p&gt;I got lucky enough to get my input before the
        crash but could submit afterwards only. I really hope scores won&amp;#39;t
        get deleted from personal stats at least, I&amp;#39;ve been fighting for my
        first aoc scores for years (and in my country it starts at 6 am local time).&lt;/p&gt;\n\n&lt;p&gt;EDIT:
        As code is short, I paste directly too.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        itertools\n\nINPUT_FILE = &amp;quot;1.in&amp;quot;\n\nwith open(INPUT_FILE,
        &amp;#39;r&amp;#39;) as f:\n    inp = f.read().splitlines()\n\ninp = list(map(int,
        inp))\n\nfor each in itertools.combinations(inp, r = 3):\n    if sum(each)
        == 2020:\n        print(each[0] * each[1] * each[2])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8debh/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8debh", "created":
        1606800146.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8fnse",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "keramitas",
        "can_mod_post": false, "created_utc": 1606801904.0, "send_replies": true,
        "parent_id": "t1_ge8debh", "score": 3, "author_fullname": "t2_xzhypjk", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "6AM - ah yes, EU West hellclub :D", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;6AM - ah yes, EU West hellclub :D&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8fnse/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8fnse", "created":
        1606801904.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8dmcw",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "mebeim",
        "can_mod_post": false, "created_utc": 1606800317.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_121hf2", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python 3 - I think I''m the only one that did the monstrosity of building
        a set because I did not want to bother checking if three variables were different
        from each other:\n\n    for i, x in enumerate(ints):\n        for j, y in
        enumerate(ints):\n            for k, z in enumerate(ints):\n                if
        len(set([i, j, k])) == 3:\n                    if x + y + z == 2020:\n                        ans
        = x * y * z\n    print(ans)", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python
        3 - I think I&amp;#39;m the only one that did the monstrosity of building
        a set because I did not want to bother checking if three variables were different
        from each other:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for i, x in enumerate(ints):\n    for
        j, y in enumerate(ints):\n        for k, z in enumerate(ints):\n            if
        len(set([i, j, k])) == 3:\n                if x + y + z == 2020:\n                    ans
        = x * y * z\nprint(ans)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8dmcw/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8dmcw", "created": 1606800317.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 4, "name":
        "t1_ge8e9h1", "id": "ge8e9h1", "parent_id": "t1_ge8dmcw", "depth": 1, "children":
        ["ge8e9h1"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8dte7", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "pirateofitaly",
        "can_mod_post": false, "created_utc": 1606800463.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_578s2", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "extremely dumb clojure:\n\n    (ns aoc-2020.01\n    (:require [clojure.java.io
        :as io]\n                [clojure.string :as s]))\n\n    (def input\n    (map
        #(Integer. %) (s/split-lines (slurp \"/home/${USER}/Dropbox/aoc/resources/01.txt\"))))\n\n    (defn
        str-to-list\n    [str]\n    (into [] (map #(Character/digit % 10) str)))\n\n    (defn
        part-one\n    [inp]\n    (for [x inp\n            y (rest inp)]\n        (if
        (= (+ x y) 2020)\n        (* x y))))\n\n    (filter identity (part-one input))\n\n    (defn
        part-two\n    [inp]\n    (for [x inp\n            y (rest inp)\n            z
        (rest (rest inp))]\n        (if (= (+ x y z) 2020)\n        (* x y z))))\n\n    (filter
        identity (part-two input))", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;extremely
        dumb clojure:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(ns aoc-2020.01\n(:require
        [clojure.java.io :as io]\n            [clojure.string :as s]))\n\n(def input\n(map
        #(Integer. %) (s/split-lines (slurp &amp;quot;/home/${USER}/Dropbox/aoc/resources/01.txt&amp;quot;))))\n\n(defn
        str-to-list\n[str]\n(into [] (map #(Character/digit % 10) str)))\n\n(defn
        part-one\n[inp]\n(for [x inp\n        y (rest inp)]\n    (if (= (+ x y) 2020)\n    (*
        x y))))\n\n(filter identity (part-one input))\n\n(defn part-two\n[inp]\n(for
        [x inp\n        y (rest inp)\n        z (rest (rest inp))]\n    (if (= (+
        x y z) 2020)\n    (* x y z))))\n\n(filter identity (part-two input))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8dte7/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8dte7", "created":
        1606800463.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8e2ut",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "phil_g",
        "can_mod_post": false, "created_utc": 1606800665.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_51wg", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "[Solution in Common Lisp](https://gitlab.com/asciiphil/advent-of-code/-/blob/fe48214c43cce1a48826920d84b5bf771a9c2fcf/2020/01.lisp).\n\nPretty
        simple.  I happen to have just written a `list-subsets` function for a previous
        day (the infamous [2016 day 11](https://adventofcode.com/2016/day/11)), so
        I copied and pasted into today''s source file.  From there, it was just \"find
        the subset that matches the parameters\", which is made easy with `iter`''s
        `finding ... such-that ...` clause.\n\n`list-subsets` will probably go into
        my standard AoC library eventually.  This year I intend to make use of [FSet](https://common-lisp.net/project/fset/),
        but I''m not sure how that''s fully going to fit into things yet.  I''m holding
        off on library additions (and APIs that I have to maintain) until I have more
        of a feel for it.\n\nFWIW, [the initial version of today''s code](https://gitlab.com/asciiphil/advent-of-code/-/blob/0e0282500d7e3505a8c21047d3f45474257df5fd/2020/01.lisp)
        was a bit rougher.  Lots of cut-and paste, with running more things explicitly
        in the REPL.  That got me to #625 on the leaderboard for part 2, which is
        a new record for me.  (My previous lowest place was #1213 for [2018 day 17](https://adventofcode.com/2018/day/17).)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://gitlab.com/asciiphil/advent-of-code/-/blob/fe48214c43cce1a48826920d84b5bf771a9c2fcf/2020/01.lisp\"&gt;Solution
        in Common Lisp&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Pretty simple.  I happen to
        have just written a &lt;code&gt;list-subsets&lt;/code&gt; function for a previous
        day (the infamous &lt;a href=\"https://adventofcode.com/2016/day/11\"&gt;2016
        day 11&lt;/a&gt;), so I copied and pasted into today&amp;#39;s source file.  From
        there, it was just &amp;quot;find the subset that matches the parameters&amp;quot;,
        which is made easy with &lt;code&gt;iter&lt;/code&gt;&amp;#39;s &lt;code&gt;finding
        ... such-that ...&lt;/code&gt; clause.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;list-subsets&lt;/code&gt;
        will probably go into my standard AoC library eventually.  This year I intend
        to make use of &lt;a href=\"https://common-lisp.net/project/fset/\"&gt;FSet&lt;/a&gt;,
        but I&amp;#39;m not sure how that&amp;#39;s fully going to fit into things
        yet.  I&amp;#39;m holding off on library additions (and APIs that I have to
        maintain) until I have more of a feel for it.&lt;/p&gt;\n\n&lt;p&gt;FWIW,
        &lt;a href=\"https://gitlab.com/asciiphil/advent-of-code/-/blob/0e0282500d7e3505a8c21047d3f45474257df5fd/2020/01.lisp\"&gt;the
        initial version of today&amp;#39;s code&lt;/a&gt; was a bit rougher.  Lots
        of cut-and paste, with running more things explicitly in the REPL.  That got
        me to #625 on the leaderboard for part 2, which is a new record for me.  (My
        previous lowest place was #1213 for &lt;a href=\"https://adventofcode.com/2018/day/17\"&gt;2018
        day 17&lt;/a&gt;.)&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8e2ut/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8e2ut", "created":
        1606800665.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8e32r",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "wace001",
        "can_mod_post": false, "created_utc": 1606800669.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_1j9tc3ax", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Kotlin. 1293/1888. Technical issues suck. Hope the servers have had their
        morning coffee tomorrow.\n\n    fun main() {\n        val nums = getInput(2020,
        1).lines().map { it.toInt() }\n        for (a in nums) for (b in nums) if
        (a + b == 2020) println(\"Part 1: ${a * b}\")\n        for (a in nums) for
        (b in nums) for (c in nums) if (a + b + c == 2020) println(\"Part 2: ${a *
        b * c}\")\n    }", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Kotlin.
        1293/1888. Technical issues suck. Hope the servers have had their morning
        coffee tomorrow.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fun main() {\n    val
        nums = getInput(2020, 1).lines().map { it.toInt() }\n    for (a in nums) for
        (b in nums) if (a + b == 2020) println(&amp;quot;Part 1: ${a * b}&amp;quot;)\n    for
        (a in nums) for (b in nums) for (c in nums) if (a + b + c == 2020) println(&amp;quot;Part
        2: ${a * b * c}&amp;quot;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8e32r/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8e32r", "created": 1606800669.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 3, "name":
        "t1_ge8p74b", "id": "ge8p74b", "parent_id": "t1_ge8e32r", "depth": 1, "children":
        ["ge8p74b", "ge8k15b", "ge8mo20"]}}, {"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 2,
        "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8ebyv",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "aoc_in_k",
        "can_mod_post": false, "created_utc": 1606800858.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_945k32xc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "using K language:-\n\n    twos:{,/x,''''1_({1_x}\\)x}\n    threes:{,/x,''''twos@''1_({1_x}\\)x}\n    p1:-\n    */*l@&amp;2020=+/''l:twos
        i:\"I\"$0:`i1.txt\n    p2:-\n    */*l@&amp;2020=+/''l:threes i:\"I\"$0:`i1.txt",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;using K language:-&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;twos:{,/x,&amp;#39;&amp;#39;1_({1_x}\\)x}\nthrees:{,/x,&amp;#39;&amp;#39;twos@&amp;#39;1_({1_x}\\)x}\np1:-\n*/*l@&amp;amp;2020=+/&amp;#39;l:twos
        i:&amp;quot;I&amp;quot;$0:`i1.txt\np2:-\n*/*l@&amp;amp;2020=+/&amp;#39;l:threes
        i:&amp;quot;I&amp;quot;$0:`i1.txt\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8ebyv/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8ebyv", "created":
        1606800858.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_ge8o2si", "id": "ge8o2si", "parent_id":
        "t1_ge8ebyv", "depth": 1, "children": ["ge8o2si"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606802119.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8f3us", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "jaybosamiya",
        "can_mod_post": false, "created_utc": 1606801467.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_12wctb", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "APL.\n\nSolved in Rust to solve quickly for leaderboard (but site went down,
        so it doesn''t count), but for fun, solved in APL too (task 1 on first line,
        task 2 on second):\n\n     \u222a{\u2375[1]\u00d72020=\u2283\u2375}\u00a8{,\u2375\u2218.(+,\u00d7)\u2375}\n     \u222a{\u2375[1]\u00d72020=\u2283\u2375}\u00a8{,\u2375\u2218.({\u237a+\u2375[0]},{\u237a\u00d7\u2375[1]})\u2375\u2218.(+,\u00d7)\u2375}\n\nTest
        it out on https://n9n.gitlab.io/apl/web/ by adding space separated numbers
        at the end of the above code.\n\nI''m still learning APL (and also wrote this
        in a hurry) so this is not the most optimal way to write it, but it works.\n\nYou
        should read APL from right to left. The 2nd task is just a slightly updated
        version of the first, so I''ll only describe the first task. You start with
        taking the outer join `\u2218.` (essentially a table computation, kinda like
        multiplication tables, but with an arbitrary function instead of multiplication
        -- in our case `(+,\u00d7)`) of the input `\u2375` with itself using the function
        `+,\u00d7` which itself is a fork, that computes the sum `+` and product `\u00d7`
        and then concatenates `,` the results. This gives us a matrix of all the sums
        and products, which we flatten `,` once (to convert it into an array of pairs).
        On each `\u00a8` element of this we apply the function `{\u2375[1]\u00d72020=\u2283\u2375}`
        (thus the `\u2375` refers to each pair in the new input in this function).
        We check the first element `\u2283` for equality `=` against 2020. This gives
        us an array of 1s and 0s, which we then multiply with the second element `\u2375[1]`
        (which if you remember from before, due to the fork, was the multiplication).
        Thus, this overall gives us an array that consists of 0s wherever the sum
        was not 2020, and the product wherever the sum was 2020. Finally, we take
        all the `\u222a` unique elements in this array. This will thus just make it
        easier to see the product that was hidden away amongst all those 0s. The 0
        will still remain up front. If you like, you can run it through a `1\u2337`
        (index by 1) to take the non-zero value, but we can skip that and just manually
        copy the result over :)\n\nIf any other APL aficionados can suggest ways I
        could''ve written this cleaner, I''d love to hear from you!", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;APL.&lt;/p&gt;\n\n&lt;p&gt;Solved in Rust
        to solve quickly for leaderboard (but site went down, so it doesn&amp;#39;t
        count), but for fun, solved in APL too (task 1 on first line, task 2 on second):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;
        \u222a{\u2375[1]\u00d72020=\u2283\u2375}\u00a8{,\u2375\u2218.(+,\u00d7)\u2375}\n
        \u222a{\u2375[1]\u00d72020=\u2283\u2375}\u00a8{,\u2375\u2218.({\u237a+\u2375[0]},{\u237a\u00d7\u2375[1]})\u2375\u2218.(+,\u00d7)\u2375}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Test
        it out on &lt;a href=\"https://n9n.gitlab.io/apl/web/\"&gt;https://n9n.gitlab.io/apl/web/&lt;/a&gt;
        by adding space separated numbers at the end of the above code.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m
        still learning APL (and also wrote this in a hurry) so this is not the most
        optimal way to write it, but it works.&lt;/p&gt;\n\n&lt;p&gt;You should read
        APL from right to left. The 2nd task is just a slightly updated version of
        the first, so I&amp;#39;ll only describe the first task. You start with taking
        the outer join &lt;code&gt;\u2218.&lt;/code&gt; (essentially a table computation,
        kinda like multiplication tables, but with an arbitrary function instead of
        multiplication -- in our case &lt;code&gt;(+,\u00d7)&lt;/code&gt;) of the
        input &lt;code&gt;\u2375&lt;/code&gt; with itself using the function &lt;code&gt;+,\u00d7&lt;/code&gt;
        which itself is a fork, that computes the sum &lt;code&gt;+&lt;/code&gt; and
        product &lt;code&gt;\u00d7&lt;/code&gt; and then concatenates &lt;code&gt;,&lt;/code&gt;
        the results. This gives us a matrix of all the sums and products, which we
        flatten &lt;code&gt;,&lt;/code&gt; once (to convert it into an array of pairs).
        On each &lt;code&gt;\u00a8&lt;/code&gt; element of this we apply the function
        &lt;code&gt;{\u2375[1]\u00d72020=\u2283\u2375}&lt;/code&gt; (thus the &lt;code&gt;\u2375&lt;/code&gt;
        refers to each pair in the new input in this function). We check the first
        element &lt;code&gt;\u2283&lt;/code&gt; for equality &lt;code&gt;=&lt;/code&gt;
        against 2020. This gives us an array of 1s and 0s, which we then multiply
        with the second element &lt;code&gt;\u2375[1]&lt;/code&gt; (which if you remember
        from before, due to the fork, was the multiplication). Thus, this overall
        gives us an array that consists of 0s wherever the sum was not 2020, and the
        product wherever the sum was 2020. Finally, we take all the &lt;code&gt;\u222a&lt;/code&gt;
        unique elements in this array. This will thus just make it easier to see the
        product that was hidden away amongst all those 0s. The 0 will still remain
        up front. If you like, you can run it through a &lt;code&gt;1\u2337&lt;/code&gt;
        (index by 1) to take the non-zero value, but we can skip that and just manually
        copy the result over :)&lt;/p&gt;\n\n&lt;p&gt;If any other APL aficionados
        can suggest ways I could&amp;#39;ve written this cleaner, I&amp;#39;d love
        to hear from you!&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8f3us/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8f3us", "created":
        1606801467.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_ge8h4wv", "id": "ge8h4wv", "parent_id":
        "t1_ge8f3us", "depth": 1, "children": ["ge8h4wv"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606837916.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8fngh", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "kepevem",
        "can_mod_post": false, "created_utc": 1606801897.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_cimuf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python. classic loops.\n\npart 1\n\n    import pandas as pd\n    df = pd.read_csv(''path'')\n    elem_list
        = df.iloc[:, 0].tolist()\n    for elem in elem_list:\n        result = 2020
        - elem\n        if result in elem_list:\n            print(result * elem)\n        else:\n            continue\n\npart2\n\n    for
        elem1 in elem_list:\n        for elem2 in elem_list:\n            for elem3
        in elem_list:\n                if elem1 + elem2 + elem3 == 2020:\n                    r_product
        = elem1 * elem2 * elem3\n                    print(elem1, elem2, elem3, r_product)\n                else:\n                    continue",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python. classic loops.&lt;/p&gt;\n\n&lt;p&gt;part
        1&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import pandas as pd\ndf = pd.read_csv(&amp;#39;path&amp;#39;)\nelem_list
        = df.iloc[:, 0].tolist()\nfor elem in elem_list:\n    result = 2020 - elem\n    if
        result in elem_list:\n        print(result * elem)\n    else:\n        continue\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;part2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for
        elem1 in elem_list:\n    for elem2 in elem_list:\n        for elem3 in elem_list:\n            if
        elem1 + elem2 + elem3 == 2020:\n                r_product = elem1 * elem2
        * elem3\n                print(elem1, elem2, elem3, r_product)\n            else:\n                continue\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8fngh/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8fngh", "created":
        1606801897.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 4, "name": "t1_ge8mz1b", "id": "ge8mz1b", "parent_id":
        "t1_ge8fngh", "depth": 1, "children": ["ge8mz1b", "ge8x60o"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8fzl7",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Senoy05",
        "can_mod_post": false, "created_utc": 1606802168.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_k1ltf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Another C# solution:  \n[https://nopaste.ml/?l=csh#XQAAAQCFAgAAAAAAAAA4HIlXMqhGNWCJFckLRQcDyoxbWtJa8jf/UXA+Ug4WVLDwBtM80jyN/yzhKOqpqWyQ3+vQMVvmNwY57jatAuodOehhlXl5Zs5RB0TTI6dIyNb7Mal8SuoOBqsvzNPh0bABrn/pAXX+B49QTDfhihEts1xoX+1xNurcUvTsE85PnTEW6wYNZbRYKzd5+NQrwAXsC56mJzqTrhWkZCR6WM1hK3UDG8ox6XOcykImQ2SSBv5us3y0oP23kuV8aZlU460BqL1B6DgLkaRQ05u39v//t1bsG7cWdR4vaOkGsTedKov9Kt90Iler8Z2drv9z8I0A](https://nopaste.ml/?l=csh#XQAAAQCFAgAAAAAAAAA4HIlXMqhGNWCJFckLRQcDyoxbWtJa8jf/UXA+Ug4WVLDwBtM80jyN/yzhKOqpqWyQ3+vQMVvmNwY57jatAuodOehhlXl5Zs5RB0TTI6dIyNb7Mal8SuoOBqsvzNPh0bABrn/pAXX+B49QTDfhihEts1xoX+1xNurcUvTsE85PnTEW6wYNZbRYKzd5+NQrwAXsC56mJzqTrhWkZCR6WM1hK3UDG8ox6XOcykImQ2SSBv5us3y0oP23kuV8aZlU460BqL1B6DgLkaRQ05u39v//t1bsG7cWdR4vaOkGsTedKov9Kt90Iler8Z2drv9z8I0A)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Another C# solution:&lt;br/&gt;\n&lt;a
        href=\"https://nopaste.ml/?l=csh#XQAAAQCFAgAAAAAAAAA4HIlXMqhGNWCJFckLRQcDyoxbWtJa8jf/UXA+Ug4WVLDwBtM80jyN/yzhKOqpqWyQ3+vQMVvmNwY57jatAuodOehhlXl5Zs5RB0TTI6dIyNb7Mal8SuoOBqsvzNPh0bABrn/pAXX+B49QTDfhihEts1xoX+1xNurcUvTsE85PnTEW6wYNZbRYKzd5+NQrwAXsC56mJzqTrhWkZCR6WM1hK3UDG8ox6XOcykImQ2SSBv5us3y0oP23kuV8aZlU460BqL1B6DgLkaRQ05u39v//t1bsG7cWdR4vaOkGsTedKov9Kt90Iler8Z2drv9z8I0A\"&gt;https://nopaste.ml/?l=csh#XQAAAQCFAgAAAAAAAAA4HIlXMqhGNWCJFckLRQcDyoxbWtJa8jf/UXA+Ug4WVLDwBtM80jyN/yzhKOqpqWyQ3+vQMVvmNwY57jatAuodOehhlXl5Zs5RB0TTI6dIyNb7Mal8SuoOBqsvzNPh0bABrn/pAXX+B49QTDfhihEts1xoX+1xNurcUvTsE85PnTEW6wYNZbRYKzd5+NQrwAXsC56mJzqTrhWkZCR6WM1hK3UDG8ox6XOcykImQ2SSBv5us3y0oP23kuV8aZlU460BqL1B6DgLkaRQ05u39v//t1bsG7cWdR4vaOkGsTedKov9Kt90Iler8Z2drv9z8I0A&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8fzl7/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8fzl7", "created":
        1606802168.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 879, "name": "t1_ge8g56f", "id": "ge8g56f", "parent_id":
        "t3_k4e4lm", "depth": 0, "children": ["ge8g56f", "ge8g5rw", "ge8ggww", "ge8hrji",
        "ge8gj8r", "ge8hogv", "ge8lrki", "ge8nxeg", "ge8qxnh", "ge8jcbw", "ge8gr6w",
        "ge8p549", "ge8lqi6", "ge8lxy8", "ge8vk39", "ge8nz5v", "ge8pjw2", "ge8rhbi",
        "ge8ttxd", "ge8v27u", "ge8jjoi", "ge8mph5", "ge8pcbs", "ge92sk0", "ge8q9ju",
        "ge8y8a7", "ge8ogb7", "ge90c7v", "ge93rku", "ge9060g", "ge8w6hf", "ge99xa3",
        "ge8qbcy", "ge8t4j6", "ge8pk2k", "geaonwr", "ge8vp59", "geajrji", "ge8ufj6",
        "ge9lt7o", "gec124u", "ge9ic0a", "ge8sdvm", "ge8niic", "ge8w08q", "ge8xpoi",
        "ge9c2ap", "gebjdgw", "ge9m01l", "ge8xp9f", "ge9r1t7", "ge8ymhn", "geaiot5",
        "ge8tfea", "gebvdck", "ge96u2q", "ge9k6ig", "gebn1q2", "gebykhw", "geaanxo",
        "ge9k3gq", "ge8wj14", "gea2ml2", "gea9o1a", "geakrug", "geak8vy", "ged2syd",
        "ge95sr1", "geat8vy", "ge9xr0x", "ge8qk88", "geb34hs", "geapk7s", "ge9sd18",
        "geahpdb", "gebmrn5", "geak8fk", "gec1vl4", "gea4g6s", "geaco7m", "gec5y4z",
        "gec7jgm", "geb72uc", "gebkep2", "ge8xkyv", "ge9adsg", "gecq4io", "geasy2d",
        "ge988ei", "gea7tzx", "ge9i0tt", "gebhpca", "geb1ylq", "gebmnz0", "gecsn65",
        "gec2cvf", "ge9nvip", "ge9qqq4", "geakvfh", "gebmpyg", "geboier", "geb7p6r",
        "ge9d2dm", "geb22xg", "ge8dc2t", "gedmx6c", "ge8qa9v", "ge8rlp9", "ge9hyrm",
        "gea1x61", "gea6vh1", "ge9kr1i", "geaq1d5", "ge8e9e9", "geb9b3s", "gec5osj",
        "ge8dil8", "gearyyf", "geaez7c", "gec2gg5", "gea69ik", "ge9i56x", "gea6u2s",
        "gebdwoh", "gebkezv", "ged959m", "geaqgdt", "geaxt4t", "geb2kzp", "geb8tua",
        "ge8f6p3", "gea8ouf", "ge9m14j", "ge8dewk", "gectazu", "geakqc4", "ge8ft9b",
        "ge8ub8c", "geaxi7b", "gebclbc", "ge8x2ax", "ge8xree", "geb1ywi", "ge9euu1",
        "ge8d4fv", "geaqgwd", "gec65da", "ge933cq", "gea0reu", "gebpih7", "ge8e2mm",
        "ge9qj85", "ge9225u", "ge8uxge", "ge8vnir", "gedl7y0", "ge8oces", "ge8hblp",
        "ge8vrzv", "gecbbcr", "ge8hhxr", "ge8zfpr", "gebv38e", "ge8dckb", "geamp0x",
        "gec1oxq", "ge8drnn", "geb62j1", "ge8e5vy", "ge8dglu", "ge8fij5", "geb5m5w",
        "ge93wxk", "ge9wtc6", "geap7rl", "geaeazy", "ge8r3ie", "ge8hgha", "ge8ypio",
        "ge9fh10", "ge95uhg", "gebftfl", "gebt57q", "ge8et2j", "ge8zxsv", "ge8v2we",
        "ge8g3mb", "gednq6d", "ge8rgu3", "geascdo", "gebjbwq", "geafk7o", "gea5sgr",
        "gec24rm", "gea97s3", "ge8ndxc", "gebpzhl", "ge8g4iv", "geagd2g", "ge8d3oo",
        "gebs83z", "ge8dq4x", "ge8q1ox", "ge95a1e", "ge9hbp6", "ge8eqo4", "ge98ysx",
        "gea6p3j", "ge8xlj2", "ge8feyg", "ge8vf78", "gea9tbw", "ge8l8lb", "ge8e72m",
        "geco79q", "ge8dqnf", "ge8em6p", "ge9qhcj", "gebx9gq", "ge93jm1", "ge8gd8r",
        "ge8j4w1", "ge8hf6j", "ge9autn", "ge8d575", "ge8gx4l", "ge99kma", "ge8cv0w",
        "gebbsdv", "geamavo", "gecibnq", "ge8cm9v", "geal0ma", "gebdy00", "gebgpfi",
        "gecyms2", "ge9m65s", "ge9pptc", "ge90pv4", "ge96tiq", "ge8isow", "ge8fo5f",
        "ge97rgx", "ge9quzr", "ge8hczq", "ge8hasg", "gea7lc6", "ge8yog2", "geb434g",
        "geab8yv", "gec7b6w", "ge9w3sf", "ge94liw", "ge9vh7d", "ge8d8ht", "ge8djkf",
        "geacp52", "ge90snh", "ge989na", "ge9lb2t", "ge8u58v", "ge95r6o", "ge9809q",
        "gea55cz", "gebi4f8", "gea5os4", "ge8wy22", "ge8zg5h", "ge91y87", "ge9fs08",
        "geator7", "ge8grtd", "geb73sk", "gec0e6f", "ge9px27", "ge9c2p4", "ge99296",
        "ge8t5hs", "ge8ff2d", "ge9p67o", "ge94tnj", "gea91jq", "ge93z8h", "ge8xemy",
        "ge93efl", "gebx4pn", "gebuoyc", "gebcdzv", "gead2hx", "geadna4", "geby48b",
        "ge8w7ap", "geajhnt", "ge8dgjc", "ge8yk7u", "ge9gln9", "geabg9r", "geby132",
        "ge9oow8", "ge9kuii", "ge98q2x", "ge8umgx", "gea846b", "ge95f68", "ge8edqs",
        "ge8e5m5", "ge9p8jh", "ge8egd7", "ge8vu5a", "ge8jsx5", "ge8d3xk", "ge8z4ff",
        "ge8gwg3", "ge8eiis", "ge90t2q", "ge8cl31", "ge8h6cs", "ge9lrxu", "ge9nnl1",
        "ge8eek9", "ge8kak3", "ge8qd7s", "ge8qs04", "ge8d75b", "geady27", "ged616q",
        "ge99hmm", "gedjo2d", "gebuvuw", "ge8gvxc", "ged4e5g", "gea6m9x", "ge8ucg7",
        "ge9cwwc", "ge9idwm", "geaeq43", "ge8eiq2", "ge9vs5f", "ge8yvut", "ge8cl3c",
        "ge8jf9z", "ge8d981", "ge8iorh", "ge9963b", "ge93bhe", "ge959yk", "ge8xx75",
        "geayab9", "ge93z7e", "ge9qgy9", "gea17ge", "ge92kna", "ge8jglc", "ge8ugt2",
        "ge8dhow", "ge9u529", "gea1c82", "ge90035", "ge8iotj", "ge9hgu2", "ge9v0oa",
        "gecd75d", "ge8gn6r", "ge9c3l6", "ge96iwo", "gec5h0g", "ge99dmt", "ge985ep",
        "ge948qx", "ge8zlpr", "ge998wb", "ge8d88g", "ge98qck", "ge8iw3m", "geae2je",
        "ge8hjs0", "ge99c2y", "ge9l7o8", "ge9p7h9", "gebka8s", "ge9wiwj", "ged4hhm",
        "gead5e6", "ge9cla0", "ge9ysx3", "gebidqz", "ge9f357", "gecjat6", "ge92lj3",
        "ge94kss", "ge9l4ak", "gea60ob", "ge9e7k1", "ge8hj6a", "gea04hh", "ge8yqmy",
        "geaqabf", "ge9066a", "geayy5d", "ge9aay1", "gea37gf", "ge9lf9j", "ge9bnyc",
        "ge8d6qk", "gea3dle", "ge8s8wl", "ge8xday", "ge90ffa", "ge9kgch", "ge8zyte",
        "geac8gr", "ge9k6sa", "ge8dw1k", "ge9n0k8", "ge8dnbn", "geaja8q", "ge8v5uh",
        "geaxx0l"]}}], true]], [0, 12, "attr", "things"], [12, 13, "call", ["t1_ge8dbyz"]],
        [13, 14, "attr", "focus"], [14, 15, "call", []], [0, 16, "attr", "things"],
        [16, 17, "call", ["None"]], [17, 18, "attr", "filter"], [18, 19, "call", [".morechildren"]],
        [19, 20, "attr", "remove"], [20, 21, "call", []]], "success": true}'
  recorded_at: Sat, 08 Mar 2025 23:06:35 GMT
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:35 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=2VP0jVjlu6RC57177M; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sat, 08 Mar 2025 23:06:35 GMT
- request:
    method: post
    uri: https://oauth.reddit.com/api/morechildren.json
    body:
      encoding: UTF-8
      string: link_id=t3_k4e4lm&children=ge8g56f,ge8g5rw,ge8ggww,ge8hrji,ge8gj8r,ge8hogv,ge8lrki,ge8nxeg,ge8qxnh,ge8jcbw,ge8gr6w,ge8p549,ge8lqi6,ge8lxy8,ge8vk39,ge8nz5v,ge8pjw2,ge8rhbi,ge8ttxd,ge8v27u,ge8jjoi,ge8mph5,ge8pcbs,ge92sk0,ge8q9ju,ge8y8a7,ge8ogb7,ge90c7v,ge93rku,ge9060g,ge8w6hf,ge99xa3,ge8qbcy,ge8t4j6,ge8pk2k,geaonwr,ge8vp59,geajrji,ge8ufj6,ge9lt7o,gec124u,ge9ic0a,ge8sdvm,ge8niic,ge8w08q,ge8xpoi,ge9c2ap,gebjdgw,ge9m01l,ge8xp9f,ge9r1t7,ge8ymhn,geaiot5,ge8tfea,gebvdck,ge96u2q,ge9k6ig,gebn1q2,gebykhw,geaanxo,ge9k3gq,ge8wj14,gea2ml2,gea9o1a,geakrug,geak8vy,ged2syd,ge95sr1,geat8vy,ge9xr0x,ge8qk88,geb34hs,geapk7s,ge9sd18,geahpdb,gebmrn5,geak8fk,gec1vl4,gea4g6s,geaco7m,gec5y4z,gec7jgm,geb72uc,gebkep2,ge8xkyv,ge9adsg,gecq4io,geasy2d,ge988ei,gea7tzx,ge9i0tt,gebhpca,geb1ylq,gebmnz0,gecsn65,gec2cvf,ge9nvip,ge9qqq4,geakvfh,gebmpyg,geboier,geb7p6r,ge9d2dm,geb22xg,ge8dc2t,gedmx6c,ge8qa9v,ge8rlp9,ge9hyrm,gea1x61,gea6vh1,ge9kr1i,geaq1d5,ge8e9e9,geb9b3s,gec5osj,ge8dil8,gearyyf,geaez7c,gec2gg5,gea69ik,ge9i56x,gea6u2s,gebdwoh,gebkezv,ged959m,geaqgdt,geaxt4t,geb2kzp,geb8tua,ge8f6p3,gea8ouf,ge9m14j,ge8dewk,gectazu,geakqc4,ge8ft9b,ge8ub8c,geaxi7b,gebclbc,ge8x2ax,ge8xree,geb1ywi,ge9euu1,ge8d4fv,geaqgwd,gec65da,ge933cq,gea0reu,gebpih7,ge8e2mm,ge9qj85,ge9225u,ge8uxge,ge8vnir,gedl7y0,ge8oces,ge8hblp,ge8vrzv,gecbbcr,ge8hhxr,ge8zfpr,gebv38e,ge8dckb,geamp0x,gec1oxq,ge8drnn,geb62j1,ge8e5vy,ge8dglu,ge8fij5,geb5m5w,ge93wxk,ge9wtc6,geap7rl,geaeazy,ge8r3ie,ge8hgha,ge8ypio,ge9fh10,ge95uhg,gebftfl,gebt57q,ge8et2j,ge8zxsv,ge8v2we,ge8g3mb,gednq6d,ge8rgu3,geascdo,gebjbwq,geafk7o,gea5sgr,gec24rm,gea97s3,ge8ndxc,gebpzhl,ge8g4iv,geagd2g,ge8d3oo,gebs83z,ge8dq4x,ge8q1ox,ge95a1e,ge9hbp6,ge8eqo4,ge98ysx,gea6p3j,ge8xlj2,ge8feyg,ge8vf78,gea9tbw,ge8l8lb,ge8e72m,geco79q,ge8dqnf,ge8em6p,ge9qhcj,gebx9gq,ge93jm1,ge8gd8r,ge8j4w1,ge8hf6j,ge9autn,ge8d575,ge8gx4l,ge99kma,ge8cv0w,gebbsdv,geamavo,gecibnq,ge8cm9v,geal0ma,gebdy00,gebgpfi,gecyms2,ge9m65s,ge9pptc,ge90pv4,ge96tiq,ge8isow,ge8fo5f,ge97rgx,ge9quzr,ge8hczq,ge8hasg,gea7lc6,ge8yog2,geb434g,geab8yv,gec7b6w,ge9w3sf,ge94liw,ge9vh7d,ge8d8ht,ge8djkf,geacp52,ge90snh,ge989na,ge9lb2t,ge8u58v,ge95r6o,ge9809q,gea55cz,gebi4f8,gea5os4,ge8wy22,ge8zg5h,ge91y87,ge9fs08,geator7,ge8grtd,geb73sk,gec0e6f,ge9px27,ge9c2p4,ge99296,ge8t5hs,ge8ff2d,ge9p67o,ge94tnj,gea91jq,ge93z8h,ge8xemy,ge93efl,gebx4pn,gebuoyc,gebcdzv,gead2hx,geadna4,geby48b,ge8w7ap,geajhnt,ge8dgjc,ge8yk7u,ge9gln9,geabg9r,geby132,ge9oow8,ge9kuii,ge98q2x,ge8umgx,gea846b,ge95f68,ge8edqs,ge8e5m5,ge9p8jh,ge8egd7,ge8vu5a,ge8jsx5,ge8d3xk,ge8z4ff,ge8gwg3,ge8eiis,ge90t2q,ge8cl31,ge8h6cs,ge9lrxu,ge9nnl1,ge8eek9,ge8kak3,ge8qd7s,ge8qs04,ge8d75b,geady27,ged616q,ge99hmm,gedjo2d,gebuvuw,ge8gvxc,ged4e5g,gea6m9x,ge8ucg7,ge9cwwc,ge9idwm,geaeq43,ge8eiq2,ge9vs5f,ge8yvut,ge8cl3c,ge8jf9z,ge8d981,ge8iorh,ge9963b,ge93bhe,ge959yk,ge8xx75,geayab9,ge93z7e,ge9qgy9,gea17ge,ge92kna,ge8jglc,ge8ugt2,ge8dhow,ge9u529,gea1c82,ge90035,ge8iotj,ge9hgu2,ge9v0oa,gecd75d,ge8gn6r,ge9c3l6,ge96iwo,gec5h0g,ge99dmt,ge985ep,ge948qx,ge8zlpr,ge998wb,ge8d88g,ge98qck,ge8iw3m,geae2je,ge8hjs0,ge99c2y,ge9l7o8,ge9p7h9,gebka8s,ge9wiwj,ged4hhm,gead5e6,ge9cla0,ge9ysx3,gebidqz,ge9f357,gecjat6,ge92lj3,ge94kss,ge9l4ak,gea60ob,ge9e7k1,ge8hj6a,gea04hh,ge8yqmy,geaqabf,ge9066a,geayy5d,ge9aay1,gea37gf,ge9lf9j,ge9bnyc,ge8d6qk,gea3dle,ge8s8wl,ge8xday,ge90ffa,ge9kgch,ge8zyte,geac8gr,ge9k6sa,ge8dw1k,ge9n0k8,ge8dnbn,geaja8q,ge8v5uh,geaxx0l
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '44631'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      set-cookie:
      - loid=000000001ksigc1a1a.2.1741475195566.Z0FBQUFBQm56TTE3UHRXU3dHVXEwamVCbXZWa01mS09nUDg3cnF2YXZ4UkllUmxQQjdybkZTZXBFU3RpcHIyWE1pNF9iaklZQldSbXZQRmNJR2tXWExiT1dtbUNkcVJrTF9pUjF3aFh0UWJLejNYNUJCSGRkWTUtM1llWkxaRUVDam1aNjFRNnJsaVo;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Mon, 08-Mar-2027 23:06:35
        GMT; secure, session_tracker=npgobbclaiholejffe.0.1741475195582.Z0FBQUFBQm56TTE3Nm1PQUYzdTVaa0d1SE5PVEx4YnBVSDNibzZRc2UteG1lZ1RQSDdWOHZOUHNhLXR1dnluWXZhbG9rR3VMekV5dkFueldVSkg5TTF0WHNJQUJBYm9ndHZ5am9DTklxT1p3RWtLaGRqdkJzYk1FaDdiV1NKbWplRmV1OHk5MGdyTnc;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 01:06:35
        GMT; secure, edgebucket=0WmjYBqVXhpcVPKuDv; Domain=reddit.com; Max-Age=63071999;
        Path=/;  secure
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '18'
      x-ratelimit-remaining:
      - '82.0'
      x-ratelimit-reset:
      - '204'
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:36 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"jquery": [[0, 1, "call", ["body"]], [1, 2, "attr", "find"], [2, 3,
        "call", [".status"]], [3, 4, "attr", "hide"], [4, 5, "call", []], [5, 6, "attr",
        "html"], [6, 7, "call", [""]], [7, 8, "attr", "end"], [8, 9, "call", []],
        [0, 10, "attr", "insert_things"], [10, 11, "call", [[{"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8g56f",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "_sandw1ch",
        "can_mod_post": false, "created_utc": 1606802295.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_3e8gznha", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "First year giving this a real attempt, did it in `nim`! (longer solutions
        will be linked on my GitHub)\n\nI''m using AoC to learn `nim`, so this should
        be fun. Nothing special here, just the standard triple for loop. Still learning
        the language so hopefully I can look back at the end of AoC and see my mistakes
        or ways that I could optimize my code.\n\n```\n# Day01 Advent of Code 2020\nimport
        strutils, sequtils\n\n# Parse part one\nproc partOne(file: seq[int]): int
        =\n    for i in file:\n        for j in file:\n            if i+j == 2020:\n                return
        i*j\n\n# Parse part two\nproc partTwo(file: seq[int]): int =\n    for i in
        file:\n        for j in file:\n            for k in file:\n                if
        i+j+k == 2020:\n                    return i*j*k\n    \n# Read in input file
        and converts everything to numbers\nlet input = readFile(\"input.txt\").strip().splitLines().map(parseInt)\necho
        input.partOne\necho input.partTwo```", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;First year giving this a real attempt, did it in
        &lt;code&gt;nim&lt;/code&gt;! (longer solutions will be linked on my GitHub)&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m
        using AoC to learn &lt;code&gt;nim&lt;/code&gt;, so this should be fun. Nothing
        special here, just the standard triple for loop. Still learning the language
        so hopefully I can look back at the end of AoC and see my mistakes or ways
        that I could optimize my code.&lt;/p&gt;\n\n&lt;p&gt;```&lt;/p&gt;\n\n&lt;h1&gt;Day01
        Advent of Code 2020&lt;/h1&gt;\n\n&lt;p&gt;import strutils, sequtils&lt;/p&gt;\n\n&lt;h1&gt;Parse
        part one&lt;/h1&gt;\n\n&lt;p&gt;proc partOne(file: seq[int]): int =\n    for
        i in file:\n        for j in file:\n            if i+j == 2020:\n                return
        i*j&lt;/p&gt;\n\n&lt;h1&gt;Parse part two&lt;/h1&gt;\n\n&lt;p&gt;proc partTwo(file:
        seq[int]): int =\n    for i in file:\n        for j in file:\n            for
        k in file:\n                if i+j+k == 2020:\n                    return
        i&lt;em&gt;j&lt;/em&gt;k&lt;/p&gt;\n\n&lt;h1&gt;Read in input file and converts
        everything to numbers&lt;/h1&gt;\n\n&lt;p&gt;let input = readFile(&amp;quot;input.txt&amp;quot;).strip().splitLines().map(parseInt)\necho
        input.partOne\necho input.partTwo```&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8g56f/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8g56f", "created": 1606802295.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 1, "name":
        "t1_ge8l4y1", "id": "ge8l4y1", "parent_id": "t1_ge8g56f", "depth": 1, "children":
        ["ge8l4y1"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": 1606802809.0,
        "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8g5rw", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "rabuf",
        "can_mod_post": false, "created_utc": 1606802309.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_38xc9", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Second submission here, this time in Ada. [Full source at the bottom](https://github.com/rabuf/advent-of-code/blob/master/2020/2020.01.org#Ada).
        Here are the primary functions, the vector `Input` is visible to both and
        used directly rather than passing it in as a parameter.\n\n    function Solve_01
        return Integer is\n       Result : Integer := -1;\n    begin\n       for I
        in Input.First_Index .. Input.Last_Index loop\n          for J in I .. Input.Last_Index
        loop\n             if Input (I) + Input (J) = 2020\n             then\n                return
        Input (I) * Input (J);\n             end if;\n          end loop;\n       end
        loop;\n       return Result;\n    end Solve_01;\n    \n    function Solve_02
        return Integer is\n       Result : Integer := -1;\n    begin\n       for I
        in Input.First_Index .. Input.Last_Index loop\n          for J in I .. Input.Last_Index
        loop\n             for K in J .. Input.Last_Index loop\n                if
        Input (I) + Input (J) + Input (K) = 2020\n                then\n                   return
        Input (I) * Input (J) * Input (K);\n                end if;\n             end
        loop;\n          end loop;\n       end loop;\n       return Result;\n    end
        Solve_02;", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Second
        submission here, this time in Ada. &lt;a href=\"https://github.com/rabuf/advent-of-code/blob/master/2020/2020.01.org#Ada\"&gt;Full
        source at the bottom&lt;/a&gt;. Here are the primary functions, the vector
        &lt;code&gt;Input&lt;/code&gt; is visible to both and used directly rather
        than passing it in as a parameter.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function
        Solve_01 return Integer is\n   Result : Integer := -1;\nbegin\n   for I in
        Input.First_Index .. Input.Last_Index loop\n      for J in I .. Input.Last_Index
        loop\n         if Input (I) + Input (J) = 2020\n         then\n            return
        Input (I) * Input (J);\n         end if;\n      end loop;\n   end loop;\n   return
        Result;\nend Solve_01;\n\nfunction Solve_02 return Integer is\n   Result :
        Integer := -1;\nbegin\n   for I in Input.First_Index .. Input.Last_Index loop\n      for
        J in I .. Input.Last_Index loop\n         for K in J .. Input.Last_Index loop\n            if
        Input (I) + Input (J) + Input (K) = 2020\n            then\n               return
        Input (I) * Input (J) * Input (K);\n            end if;\n         end loop;\n      end
        loop;\n   end loop;\n   return Result;\nend Solve_02;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8g5rw/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8g5rw", "created":
        1606802309.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1607233507.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8ggww", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "williewillus",
        "can_mod_post": false, "created_utc": 1606802555.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_9rr54", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Pure C18. Things mostly worked the first time around, surprisingly. This
        is my first time using C for any extensive user-level programming in about
        3 years.\nNo leaderboard since I got sidetracked by something else halfway
        through.\n\nhttps://git.sr.ht/~williewillus/aoc_2020/tree/master/src/day1.c",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Pure C18. Things mostly
        worked the first time around, surprisingly. This is my first time using C
        for any extensive user-level programming in about 3 years.\nNo leaderboard
        since I got sidetracked by something else halfway through.&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://git.sr.ht/%7Ewilliewillus/aoc_2020/tree/master/src/day1.c\"&gt;https://git.sr.ht/~williewillus/aoc_2020/tree/master/src/day1.c&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8ggww/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8ggww", "created":
        1606802555.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge8nfuw", "id": "ge8nfuw", "parent_id":
        "t1_ge8ggww", "depth": 1, "children": ["ge8nfuw"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8gj8r",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "dpkcodes",
        "can_mod_post": false, "created_utc": 1606802609.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_55x99kci", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Solution in C: [https://github.com/dpkeesling/Advent-of-code-2020/tree/master/day1](https://github.com/dpkeesling/Advent-of-code-2020/tree/master/day1)  \n\n\nI
        know there is a more efficient way to do this, but I am relatively new to
        C, so I went with the quick and dirty solution of nested loops", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Solution in C: &lt;a href=\"https://github.com/dpkeesling/Advent-of-code-2020/tree/master/day1\"&gt;https://github.com/dpkeesling/Advent-of-code-2020/tree/master/day1&lt;/a&gt;  &lt;/p&gt;\n\n&lt;p&gt;I
        know there is a more efficient way to do this, but I am relatively new to
        C, so I went with the quick and dirty solution of nested loops&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8gj8r/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8gj8r", "created":
        1606802609.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_ge8iutv", "id": "ge8iutv", "parent_id":
        "t1_ge8gj8r", "depth": 1, "children": ["ge8iutv"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8gr6w",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "baktix",
        "can_mod_post": false, "created_utc": 1606802788.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_9yxt3", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Haskell. As with all things in Haskell, there''s probably a better/fancier
        way of doing it, but the first thing that came to mind was list comprehensions.
        Nice and simple.\n\n[paste](https://topaz.github.io/paste/#XQAAAQCvAgAAAAAAAAAW4HygYTdUxLMR6uCYSrWZfy97Oj/nObcYiCMyUWahaMBoTsqnKnPXldcsu+0bdSKNOEV1BXwuHt8IvE5mlYBw7RwlhHGh/YxJfxlvlFp62q5yV85heUaBQOipSM1vESB+9DxTn4/alaJM4jHtyu73Vao2JTe0etNZry+27y/eAeU0cr25u8etrqghRtNvKk3p5EBhQaz/wiQy36py1ThQooXPNNUjXUl9anDpqpuB4hepNkU6WJoB8L1Ag/duDDUNdN3yg83d7jyAEWkrr2xWbCIuzh09Yti9O9Olvbx9C1pXRxN3cBuxmfKqDtj4NtxRojAt5YrpPAxXgOkC6UiP/+sqMXw=)\n\nEdit:
        apparently reddit doesn''t like paste''s Markdown links, so I fixed that",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Haskell. As with all
        things in Haskell, there&amp;#39;s probably a better/fancier way of doing
        it, but the first thing that came to mind was list comprehensions. Nice and
        simple.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://topaz.github.io/paste/#XQAAAQCvAgAAAAAAAAAW4HygYTdUxLMR6uCYSrWZfy97Oj/nObcYiCMyUWahaMBoTsqnKnPXldcsu+0bdSKNOEV1BXwuHt8IvE5mlYBw7RwlhHGh/YxJfxlvlFp62q5yV85heUaBQOipSM1vESB+9DxTn4/alaJM4jHtyu73Vao2JTe0etNZry+27y/eAeU0cr25u8etrqghRtNvKk3p5EBhQaz/wiQy36py1ThQooXPNNUjXUl9anDpqpuB4hepNkU6WJoB8L1Ag/duDDUNdN3yg83d7jyAEWkrr2xWbCIuzh09Yti9O9Olvbx9C1pXRxN3cBuxmfKqDtj4NtxRojAt5YrpPAxXgOkC6UiP/+sqMXw=\"&gt;paste&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Edit:
        apparently reddit doesn&amp;#39;t like paste&amp;#39;s Markdown links, so
        I fixed that&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8gr6w/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8gr6w", "created":
        1606802788.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_ge8nmmr", "id": "ge8nmmr", "parent_id":
        "t1_ge8gr6w", "depth": 1, "children": ["ge8nmmr"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8hogv",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "variance_explained",
        "can_mod_post": false, "created_utc": 1606803542.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_ka9pe", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "rstats solution:\n\n    input &lt;- as.integer(readLines(\"input.txt\"))\n\n    #
        Part 1\n    prod(input[input %in% (2020 - input)])\n\n    # Part 2\n    prod(input[input
        %in% (2020 - outer(input, input, \"+\"))])", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;rstats solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;input
        &amp;lt;- as.integer(readLines(&amp;quot;input.txt&amp;quot;))\n\n# Part 1\nprod(input[input
        %in% (2020 - input)])\n\n# Part 2\nprod(input[input %in% (2020 - outer(input,
        input, &amp;quot;+&amp;quot;))])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8hogv/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8hogv", "created":
        1606803542.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8hrji",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "zdu863",
        "can_mod_post": false, "created_utc": 1606803612.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_3oezt79", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python\n\npart1:\n\n```\nd=set()\nwith open(''1.txt'',''r'') as f:\n    for
        line in f:\n        a=int(line)\n        if 2020-a in d:\n            print(a*(2020-a))\n            break\n        d.add(a)\n```\npart2:\n```\narr=[]\nd={}\nwith
        open(''1.txt'',''r'') as f:\n    for line in f:\n        a=int(line)\n        if
        2020-a in d:\n            b=d[2020-a]\n            print(a*b*(2020-a-b))\n            break\n        for
        i in arr:\n            d[a+i]=a\n        arr.append(a)\n```", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Python&lt;/p&gt;\n\n&lt;p&gt;part1:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\nd=set()\nwith
        open(&amp;#39;1.txt&amp;#39;,&amp;#39;r&amp;#39;) as f:\n    for line in f:\n        a=int(line)\n        if
        2020-a in d:\n            print(a*(2020-a))\n            break\n        d.add(a)\n&lt;/code&gt;\npart2:\n&lt;code&gt;\narr=[]\nd={}\nwith
        open(&amp;#39;1.txt&amp;#39;,&amp;#39;r&amp;#39;) as f:\n    for line in f:\n        a=int(line)\n        if
        2020-a in d:\n            b=d[2020-a]\n            print(a*b*(2020-a-b))\n            break\n        for
        i in arr:\n            d[a+i]=a\n        arr.append(a)\n&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8hrji/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8hrji", "created":
        1606803612.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge8kqwg", "id": "ge8kqwg", "parent_id":
        "t1_ge8hrji", "depth": 1, "children": ["ge8kqwg"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8jcbw",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "brskbk",
        "can_mod_post": false, "created_utc": 1606804933.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_fl28y", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "[Dumb  JavaScript](https://nopaste.ml/?l=js#XQAAAQCZAwAAAAAAAAAXin1KR4VVQayM1aKtS5aWizOAfuC2YtVJgJqxEs4OQ4fvJl9MgLNVb8QHvkseqa3Dd42wTWrpUi61FWKvn7WV9asNaK0932MqzsIYDTGJdHo3RVsvnfmGvuSSo72OP3WNkjIFEg8awlVpuYWqHDT3eNmaZCXmiLFKqM4R93ONZACHiVPtpeJxmapDL1zSD9NzlTtPUEvSnok+oY0csDDGohM1QMa1VvEs3ig9Yyg3+GHBW6F72BKmiKXajPUqP0/6aEzzzeskPi61HdhCisDT1dmT+itbozQsPN3dnMTiakhlO3N6SA1I4dIXXCv+CFzEeA+xHKQTm1e5gOOKvAsROdEafvURInRStiSYpV9NPBHbB/sQjIpgH3qsIiaApWUejbUeA5Bs6bNIbzki9B+vNgzyl2+woDMlhx4XdId47mgiRdPBbNNBPhDMrwC86B3rVdjPAoERfBmX0mehRItatMT+9tFMlA==)
        solution, designed to be run directly in the browser from the puzzle input
        page\n\nAlso, thanks for featuring [NoPaste](https://nopaste.ml/) !", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://nopaste.ml/?l=js#XQAAAQCZAwAAAAAAAAAXin1KR4VVQayM1aKtS5aWizOAfuC2YtVJgJqxEs4OQ4fvJl9MgLNVb8QHvkseqa3Dd42wTWrpUi61FWKvn7WV9asNaK0932MqzsIYDTGJdHo3RVsvnfmGvuSSo72OP3WNkjIFEg8awlVpuYWqHDT3eNmaZCXmiLFKqM4R93ONZACHiVPtpeJxmapDL1zSD9NzlTtPUEvSnok+oY0csDDGohM1QMa1VvEs3ig9Yyg3+GHBW6F72BKmiKXajPUqP0/6aEzzzeskPi61HdhCisDT1dmT+itbozQsPN3dnMTiakhlO3N6SA1I4dIXXCv+CFzEeA+xHKQTm1e5gOOKvAsROdEafvURInRStiSYpV9NPBHbB/sQjIpgH3qsIiaApWUejbUeA5Bs6bNIbzki9B+vNgzyl2+woDMlhx4XdId47mgiRdPBbNNBPhDMrwC86B3rVdjPAoERfBmX0mehRItatMT+9tFMlA==\"&gt;Dumb  JavaScript&lt;/a&gt;
        solution, designed to be run directly in the browser from the puzzle input
        page&lt;/p&gt;\n\n&lt;p&gt;Also, thanks for featuring &lt;a href=\"https://nopaste.ml/\"&gt;NoPaste&lt;/a&gt;
        !&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason": null,
        "associated_award": null, "stickied": false, "author_premium": false, "can_gild":
        false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8jcbw/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8jcbw", "created":
        1606804933.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_ge8nzvq", "id": "ge8nzvq", "parent_id":
        "t1_ge8jcbw", "depth": 1, "children": ["ge8nzvq", "ge8y3qb"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606809687.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8jjoi", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "red2awn",
        "can_mod_post": false, "created_utc": 1606805105.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_1zm28yg9", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "OCaml naive solution\n\n    let product_of_2020_triple nums =\n      CCList.find_map\n        (fun
        num1 -&gt;\n          CCList.find_map\n            (fun num2 -&gt;\n              CCList.find_map\n                (fun
        num3 -&gt;\n                  if num1 + num2 + num3 = 2020 then Some (num1
        * num2 * num3) else None)\n                nums)\n            nums)\n        nums\n\n    let
        () =\n      open_in \"inputs/day1.txt\"\n      |&gt; CCIO.read_lines_l\n      |&gt;
        List.map int_of_string\n      |&gt; product_of_2020_triple\n      |&gt; CCOpt.pp
        CCFormat.int Format.std_formatter", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;OCaml naive solution&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let
        product_of_2020_triple nums =\n  CCList.find_map\n    (fun num1 -&amp;gt;\n      CCList.find_map\n        (fun
        num2 -&amp;gt;\n          CCList.find_map\n            (fun num3 -&amp;gt;\n              if
        num1 + num2 + num3 = 2020 then Some (num1 * num2 * num3) else None)\n            nums)\n        nums)\n    nums\n\nlet
        () =\n  open_in &amp;quot;inputs/day1.txt&amp;quot;\n  |&amp;gt; CCIO.read_lines_l\n  |&amp;gt;
        List.map int_of_string\n  |&amp;gt; product_of_2020_triple\n  |&amp;gt; CCOpt.pp
        CCFormat.int Format.std_formatter\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8jjoi/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8jjoi", "created":
        1606805105.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_ge8o1hh", "id": "ge8o1hh", "parent_id":
        "t1_ge8jjoi", "depth": 1, "children": ["ge8o1hh"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8lrki",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "pietroppeter",
        "can_mod_post": false, "created_utc": 1606807033.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_2bv71fdp", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Nim** \ud83d\udc51\n\ntoday solved from the comfort of my bed using the
        excellent play.nim-lang.org service: https://play.nim-lang.org/#ix=2G7t",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Nim&lt;/strong&gt;
        \ud83d\udc51&lt;/p&gt;\n\n&lt;p&gt;today solved from the comfort of my bed
        using the excellent play.nim-lang.org service: &lt;a href=\"https://play.nim-lang.org/#ix=2G7t\"&gt;https://play.nim-lang.org/#ix=2G7t&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8lrki/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8lrki", "created":
        1606807033.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606832407.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8lxy8", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "jwoLondon",
        "can_mod_post": false, "created_utc": 1606807194.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_13a83f", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Elm**\n\nNot that it was really necessary for this one, but I trimmed the
        largest values from the input list before finding the combinations. Saves
        a bit of computation, especially for the second part.\n\n[Solution in literate
        Elm](https://github.com/jwoLondon/adventOfCode/blob/master/2020/d01_2020.md)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Elm&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Not
        that it was really necessary for this one, but I trimmed the largest values
        from the input list before finding the combinations. Saves a bit of computation,
        especially for the second part.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/jwoLondon/adventOfCode/blob/master/2020/d01_2020.md\"&gt;Solution
        in literate Elm&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8lxy8/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8lxy8", "created":
        1606807194.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606809005.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8niic", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "oddrationale",
        "can_mod_post": false, "created_utc": 1606808638.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_6lo0s", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My solution in C# using [.NET Interactive and Jupyter Notebook](https://github.com/oddrationale/AdventOfCode2020CSharp/blob/main/Day01.ipynb).\n\nYou
        can also try it interactively [on Binder!](https://mybinder.org/v2/gh/oddrationale/AdventOfCode2020CSharp/main?urlpath=lab%2Ftree%2FDay01.ipynb)\n\nOne
        cool trick if you''re looping through the array indices is to initial the
        index of the inner loop with the index of the outer loop + 1. This will make
        sure there are no repeats (i.e., a possibility that doubling a number results
        in a solution) and also make your inner loops smaller.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;My solution in C# using &lt;a href=\"https://github.com/oddrationale/AdventOfCode2020CSharp/blob/main/Day01.ipynb\"&gt;.NET
        Interactive and Jupyter Notebook&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;You can
        also try it interactively &lt;a href=\"https://mybinder.org/v2/gh/oddrationale/AdventOfCode2020CSharp/main?urlpath=lab%2Ftree%2FDay01.ipynb\"&gt;on
        Binder!&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;One cool trick if you&amp;#39;re looping
        through the array indices is to initial the index of the inner loop with the
        index of the outer loop + 1. This will make sure there are no repeats (i.e.,
        a possibility that doubling a number results in a solution) and also make
        your inner loops smaller.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8niic/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8niic", "created":
        1606808638.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606809354.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8nxeg", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "SurplusSix",
        "can_mod_post": false, "created_utc": 1606809021.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_7453u", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Crystal\n\n    class Day1\n        @input : Array(Int64)\n        def initialize(f
        : String)\n            @input = File.read_lines(f).map { |i| i.to_i64() }\n        end\n        def
        part1()\n            @input.combinations(2).select { |i| i.sum == 2020 }.[0].product\n        end\n        def
        part2()\n            @input.combinations(3).select { |i| i.sum == 2020 }.[0].product\n        end\n    end\n    d
        = Day1.new(\"day1.txt\")\n    pp d.part1()\n    pp d.part2()", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Crystal&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class
        Day1\n    @input : Array(Int64)\n    def initialize(f : String)\n        @input
        = File.read_lines(f).map { |i| i.to_i64() }\n    end\n    def part1()\n        @input.combinations(2).select
        { |i| i.sum == 2020 }.[0].product\n    end\n    def part2()\n        @input.combinations(3).select
        { |i| i.sum == 2020 }.[0].product\n    end\nend\nd = Day1.new(&amp;quot;day1.txt&amp;quot;)\npp
        d.part1()\npp d.part2()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8nxeg/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8nxeg", "created": 1606809021.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 1, "name":
        "t1_ge8nxxo", "id": "ge8nxxo", "parent_id": "t1_ge8nxeg", "depth": 1, "children":
        ["ge8nxxo"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8nz5v", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "blacai",
        "can_mod_post": false, "created_utc": 1606809065.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_gnlzn", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Cool to be here again this year. Trying with F# as usual.\n\n&amp;#x200B;\n\n    open
        System.IO\n    \n    //let path = \"test_input.txt\"\n    let path = \"day01_input.txt\"\n    \n    let
        inputLines = File.ReadLines(__SOURCE_DIRECTORY__ + @\"../../\" + path) |&gt;
        Seq.map int |&gt; Seq.toList\n    \n    let rec combination num list = \n        match
        num, list with\n        | 0, _ -&gt; [[]]\n        | _, [] -&gt; []\n        |
        k, (x::xs) -&gt; List.map ((@) [x]) (combination (k-1) xs) @ combination k
        xs\n    \n    let pairs = combination 3 inputLines\n    \n    let pair2020
        =  pairs |&gt; List.find (fun ele -&gt; List.sum ele = 2020)\n    let result
        = pair2020 |&gt; List.fold (*) 1", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Cool to be here again this year. Trying with F# as
        usual.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;open
        System.IO\n\n//let path = &amp;quot;test_input.txt&amp;quot;\nlet path = &amp;quot;day01_input.txt&amp;quot;\n\nlet
        inputLines = File.ReadLines(__SOURCE_DIRECTORY__ + @&amp;quot;../../&amp;quot;
        + path) |&amp;gt; Seq.map int |&amp;gt; Seq.toList\n\nlet rec combination
        num list = \n    match num, list with\n    | 0, _ -&amp;gt; [[]]\n    | _,
        [] -&amp;gt; []\n    | k, (x::xs) -&amp;gt; List.map ((@) [x]) (combination
        (k-1) xs) @ combination k xs\n\nlet pairs = combination 3 inputLines\n\nlet
        pair2020 =  pairs |&amp;gt; List.find (fun ele -&amp;gt; List.sum ele = 2020)\nlet
        result = pair2020 |&amp;gt; List.fold (*) 1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8nz5v/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8nz5v", "created":
        1606809065.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 4, "name": "t1_ge8ovy7", "id": "ge8ovy7", "parent_id":
        "t1_ge8nz5v", "depth": 1, "children": ["ge8ovy7", "ge8tw3t", "ge8yt4q"]}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": 1606811052.0,
        "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8ogb7", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "milo6464",
        "can_mod_post": false, "created_utc": 1606809516.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_n27rk", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Part 1\n\n        def expenses1(numbers):\n            file1 = open(numbers,
        ''r'')\n            lines = file1.readlines()\n    \n            for a in
        lines:\n                for b in lines:\n                    if int(a) + int(b)
        == 2020:\n                        return int(a) * int(b)\n    \nPart 2  \n  \n        def
        expenses2(numbers):\n            file1 = open(numbers, ''r'')\n            lines
        = file1.readlines()\n    \n            for a in lines:\n                for
        b in lines:\n                    for c in lines:\n                        if
        int(a) + int(b) + int(c) == 2020:\n                            return int(a)
        * int(b) * int(c)\n\nI''m actually a little bit angry since this task was
        waaaay too easy. I hope the next ones are harder lol.\nEdit: The language
        is Python 3, my personal favourite ^^", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Part 1&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    def
        expenses1(numbers):\n        file1 = open(numbers, &amp;#39;r&amp;#39;)\n        lines
        = file1.readlines()\n\n        for a in lines:\n            for b in lines:\n                if
        int(a) + int(b) == 2020:\n                    return int(a) * int(b)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    def expenses2(numbers):\n        file1
        = open(numbers, &amp;#39;r&amp;#39;)\n        lines = file1.readlines()\n\n        for
        a in lines:\n            for b in lines:\n                for c in lines:\n                    if
        int(a) + int(b) + int(c) == 2020:\n                        return int(a) *
        int(b) * int(c)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&amp;#39;m actually
        a little bit angry since this task was waaaay too easy. I hope the next ones
        are harder lol.\nEdit: The language is Python 3, my personal favourite &lt;sup&gt;^&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8ogb7/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8ogb7", "created":
        1606809516.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 9, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8ov4z",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606809897.0, "send_replies": true,
        "parent_id": "t1_ge8ogb7", "score": 9, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Welcome to Advent of Code!  What language are you using?\n\n&gt; I''m actually
        a little bit angry since this task was waaaay too easy. I hope the next ones
        are harder lol.\n\nJust you wait.  *Just you wait.*", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": true, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Welcome to Advent of Code!  What language are you
        using?&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;I&amp;#39;m actually a little
        bit angry since this task was waaaay too easy. I hope the next ones are harder
        lol.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Just you wait.  &lt;em&gt;Just
        you wait.&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8ov4z/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8ov4z", "created":
        1606809897.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "more", "data": {"count": 1, "name": "t1_ge90a30", "id": "ge90a30",
        "parent_id": "t1_ge8ov4z", "depth": 2, "children": ["ge90a30"]}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge8rwqy", "id": "ge8rwqy", "parent_id":
        "t1_ge8ogb7", "depth": 1, "children": ["ge8rwqy"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606810378.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8p549", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "frflaie",
        "can_mod_post": false, "created_utc": 1606810171.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_11xdki", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Java with Vavr**\n\n    var prices = List.of(input.split(\"\\n\"))\n            .map(Integer::valueOf);\n\n    List.of(2,
        3).forEach(i -&gt; \n            prices.combinations(i)\n                .filter(e
        -&gt; e.reduce(Integer::sum) == 2020)\n                .map(e -&gt; e.reduce(Math::multiplyExact))\n                .stdout());",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Java with
        Vavr&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var prices = List.of(input.split(&amp;quot;\\n&amp;quot;))\n        .map(Integer::valueOf);\n\nList.of(2,
        3).forEach(i -&amp;gt; \n        prices.combinations(i)\n            .filter(e
        -&amp;gt; e.reduce(Integer::sum) == 2020)\n            .map(e -&amp;gt; e.reduce(Math::multiplyExact))\n            .stdout());\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8p549/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8p549", "created":
        1606810171.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8pcbs",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "kolcon",
        "can_mod_post": false, "created_utc": 1606810365.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_phihwsy", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python solution including tests: https://github.com/LubosKolouch/AdventOfCode_2020/blob/main/day_1.py",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python solution including
        tests: &lt;a href=\"https://github.com/LubosKolouch/AdventOfCode_2020/blob/main/day_1.py\"&gt;https://github.com/LubosKolouch/AdventOfCode_2020/blob/main/day_1.py&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8pcbs/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8pcbs", "created":
        1606810365.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606931376.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8pjw2", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "chkas",
        "can_mod_post": false, "created_utc": 1606810572.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_41wmaij", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "*easylang.online*\n\n[Solution](https://easylang.online/aoc20/?day=1)", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;em&gt;easylang.online&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://easylang.online/aoc20/?day=1\"&gt;Solution&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8pjw2/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8pjw2", "created":
        1606810572.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606812150.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8pk2k", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "SuperSmurfen",
        "can_mod_post": false, "created_utc": 1606810576.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_5nvuo", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Rust**\n\n[Link to solution](https://github.com/AxlLind/AdventOfCode2020/blob/master/src/bin/01.rs)\n\nSo
        glad to be back! Did all [50 stars last year](https://github.com/AxlLind/AdventOfCode2019/)
        and it was amazing, learnt a lot.\n\nThis problem was obviously quite easy,
        but it''s day 1. The itertools rust crate is so damn useful for AoC. Made
        my solution really clean and fast (1 ms on my machine) with \"tuple_combinations\".\n\n    let
        (a,b) = INPUT.iter()\n      .tuple_combinations()\n      .find(|&amp;(a,b)|
        a + b == 2020)\n      .unwrap();\n    a * b\n\nGot lucky and managed to get
        54th on the leaderboard this time! Unfortunately, it got wiped which makes
        sense. Would have been fun to have a screenshot of it though but I didn''t
        think of it.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/AxlLind/AdventOfCode2020/blob/master/src/bin/01.rs\"&gt;Link
        to solution&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;So glad to be back! Did all &lt;a
        href=\"https://github.com/AxlLind/AdventOfCode2019/\"&gt;50 stars last year&lt;/a&gt;
        and it was amazing, learnt a lot.&lt;/p&gt;\n\n&lt;p&gt;This problem was obviously
        quite easy, but it&amp;#39;s day 1. The itertools rust crate is so damn useful
        for AoC. Made my solution really clean and fast (1 ms on my machine) with
        &amp;quot;tuple_combinations&amp;quot;.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let
        (a,b) = INPUT.iter()\n  .tuple_combinations()\n  .find(|&amp;amp;(a,b)| a
        + b == 2020)\n  .unwrap();\na * b\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Got
        lucky and managed to get 54th on the leaderboard this time! Unfortunately,
        it got wiped which makes sense. Would have been fun to have a screenshot of
        it though but I didn&amp;#39;t think of it.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8pk2k/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8pk2k", "created": 1606810576.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 3, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "ge8qpyd", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "daggerdragon", "can_mod_post": false,
        "created_utc": 1606811743.0, "send_replies": true, "parent_id": "t1_ge8pk2k",
        "score": 3, "author_fullname": "t2_60niu", "report_reasons": null, "approved_by":
        null, "all_awardings": [], "collapsed": false, "body": "&gt; So glad to be
        back! Did all 50 stars last year and it was amazing, learnt a lot.\n\nWelcome
        back, and good job on the 50 stars!", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": true, "body_html": "&lt;div
        class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;So glad to be back! Did all 50
        stars last year and it was amazing, learnt a lot.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Welcome
        back, and good job on the 50 stars!&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8qpyd/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8qpyd", "created": 1606811743.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": "moderator"}}, {"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 2,
        "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8qbcy",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "MystPurple",
        "can_mod_post": false, "created_utc": 1606811325.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_6i0x8fou", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "[Rust](https://github.com/PurpleMyst/aoc2020/blob/master/day1/src/main.rs)
        solution.\n\nLike the other Rust poster I''ve seen, itertools makes this problem''s
        solution nice, concise and expressive.\n\nExcited for what''s coming, the
        new non-\"saving christmas\" setting sounds fun :)", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/PurpleMyst/aoc2020/blob/master/day1/src/main.rs\"&gt;Rust&lt;/a&gt;
        solution.&lt;/p&gt;\n\n&lt;p&gt;Like the other Rust poster I&amp;#39;ve seen,
        itertools makes this problem&amp;#39;s solution nice, concise and expressive.&lt;/p&gt;\n\n&lt;p&gt;Excited
        for what&amp;#39;s coming, the new non-&amp;quot;saving christmas&amp;quot;
        setting sounds fun :)&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8qbcy/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8qbcy", "created":
        1606811325.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606816654.0, "mod_reason_by": null,
        "banned_by": null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8qk88", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        2, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Elixir  \nedit: improved by stopping execution when found
        solution.\n\n    defmodule DayOne do\n    \n      def a() do\n        list
        = Read_File_Utils.read_file(\"one.txt\")\n               |&gt; Read_File_Utils.map_list_to_int()\n        try
        do\n          for x &lt;- list, y &lt;- list, x + y == 2020, do: throw(x *
        y)\n        catch\n          solution -&gt; IO.puts(\"Solution: #{solution}\")\n        end\n      end\n    \n      def
        b() do\n        list = Read_File_Utils.read_file(\"one.txt\")\n               |&gt;
        Read_File_Utils.map_list_to_int()\n        try do\n          for x &lt;- list,
        y &lt;- list, z &lt;- list, x + y + z == 2020, do: throw(x * y * z)\n        catch\n          solution
        -&gt; IO.puts(\"Solution: #{solution}\")\n        end\n      end\n    end\n    \n    \n    defmodule
        Read_File_Utils do\n      @moduledoc false\n    \n      def read_file(file)
        do\n        file\n        |&gt; File.read!()\n        |&gt; String.split(~r{(\\n)+})\n      end\n    \n      def
        map_list_to_int(list), do: Enum.map(list, &amp;String.to_integer/1)\n    \n    end",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_ge8qk88",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Elixir&lt;br/&gt;\nedit:
        improved by stopping execution when found solution.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;defmodule
        DayOne do\n\n  def a() do\n    list = Read_File_Utils.read_file(&amp;quot;one.txt&amp;quot;)\n           |&amp;gt;
        Read_File_Utils.map_list_to_int()\n    try do\n      for x &amp;lt;- list,
        y &amp;lt;- list, x + y == 2020, do: throw(x * y)\n    catch\n      solution
        -&amp;gt; IO.puts(&amp;quot;Solution: #{solution}&amp;quot;)\n    end\n  end\n\n  def
        b() do\n    list = Read_File_Utils.read_file(&amp;quot;one.txt&amp;quot;)\n           |&amp;gt;
        Read_File_Utils.map_list_to_int()\n    try do\n      for x &amp;lt;- list,
        y &amp;lt;- list, z &amp;lt;- list, x + y + z == 2020, do: throw(x * y * z)\n    catch\n      solution
        -&amp;gt; IO.puts(&amp;quot;Solution: #{solution}&amp;quot;)\n    end\n  end\nend\n\n\ndefmodule
        Read_File_Utils do\n  @moduledoc false\n\n  def read_file(file) do\n    file\n    |&amp;gt;
        File.read!()\n    |&amp;gt; String.split(~r{(\\n)+})\n  end\n\n  def map_list_to_int(list),
        do: Enum.map(list, &amp;amp;String.to_integer/1)\n\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8qk88/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606811575.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606811575.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8qxnh", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        2, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_ge8qxnh", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8qxnh/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606811964.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606811964.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_ge8sknm", "id": "ge8sknm", "parent_id":
        "t1_ge8qxnh", "depth": 1, "children": ["ge8sknm"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606813029.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8rhbi", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "trl10254",
        "can_mod_post": false, "created_utc": 1606812528.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_1auzx1aa", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Java\n\nIt''s really good to be back I learned a lot from last years this
        years this year I want to continue learning and try to out new things. Main
        goal for this year''s event is for me to get better at time and space complexity
        recognition, and get better at recursion and dynamic programming. Hopefully
        I can achieve that by the end of this. \n\n&amp;#x200B;\n\nSo this is my solution
        for both part 1 and part 2. Initially for part 1 I had done a hashset to store
        the values and calculate the difference from the target value with the current
        value and see if the difference was in the hashset. Once part 2 came up I
        thought I could reuse that implementation and just add in another for loop
        and check the hashset if the difference exists in it, but I wanted to practice
        something new in regards to recursion so I rewrote the algorithm to make it
        more flexible for both situations. I''ll be honest I''m a little bad at time
        and space complexity so if you can correct me explain to me how to do it properly
        for this type of problem I would greatly appreciate it.\n\nTime complexity:
        O(2\\^N)\n\nSpace complexity: O(2\\^N)\n\n    public class Day1 {\n        private
        List&lt;Integer&gt; expense;\n    \n        Day1(String file){\n            expense
        = new ArrayList&lt;&gt;();\n    \n            try{\n                File dataImport
        = new File(file);\n                Scanner dataReader = new Scanner(dataImport);\n    \n                while(dataReader.hasNext()){\n                    String
        line = dataReader.nextLine();\n                    expense.add(Integer.parseInt(line));\n                }\n            }\n            catch(Exception
        e){\n                System.out.println(e.toString());\n            }\n        }\n    \n        public
        List&lt;Integer&gt; sum2020Multiple(int total, int input){\n            List&lt;Integer&gt;
        sum2020 = new ArrayList&lt;&gt;();\n    \n            find2020Sum(sum2020,
        total, input, 0);\n    \n            System.out.print(\"Multiple of 2020 -
        Day 1 Part 1: \");\n            int sum = 1;\n            for(int i = 0; i
        &lt; sum2020.size(); i++){\n                sum *= sum2020.get(i);\n            }\n            System.out.println(sum);\n    \n            return
        sum2020;\n        }\n    \n        private boolean find2020Sum(List&lt;Integer&gt;
        res, int total, int inputs, int index){\n            if(expense.size() ==
        0 || expense == null)\n                return false;\n    \n            if(index
        &gt;= expense.size() || total &lt; 0 || (inputs == 0 &amp;&amp; total != 0))\n                return
        false;\n    \n            if(total == 0 &amp;&amp; inputs == 0)\n                return
        true;\n    \n            for(int i = index; i &lt; expense.size(); i++){\n                res.add(expense.get(i));\n    \n                if(find2020Sum(res,
        total - expense.get(i), inputs-1, i+1)) {\n                    return true;\n                }\n                res.remove(res.size()
        - 1);\n            }\n    \n            return false;\n        }\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Java&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s
        really good to be back I learned a lot from last years this years this year
        I want to continue learning and try to out new things. Main goal for this
        year&amp;#39;s event is for me to get better at time and space complexity
        recognition, and get better at recursion and dynamic programming. Hopefully
        I can achieve that by the end of this. &lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;So
        this is my solution for both part 1 and part 2. Initially for part 1 I had
        done a hashset to store the values and calculate the difference from the target
        value with the current value and see if the difference was in the hashset.
        Once part 2 came up I thought I could reuse that implementation and just add
        in another for loop and check the hashset if the difference exists in it,
        but I wanted to practice something new in regards to recursion so I rewrote
        the algorithm to make it more flexible for both situations. I&amp;#39;ll be
        honest I&amp;#39;m a little bad at time and space complexity so if you can
        correct me explain to me how to do it properly for this type of problem I
        would greatly appreciate it.&lt;/p&gt;\n\n&lt;p&gt;Time complexity: O(2^N)&lt;/p&gt;\n\n&lt;p&gt;Space
        complexity: O(2^N)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public class Day1 {\n    private
        List&amp;lt;Integer&amp;gt; expense;\n\n    Day1(String file){\n        expense
        = new ArrayList&amp;lt;&amp;gt;();\n\n        try{\n            File dataImport
        = new File(file);\n            Scanner dataReader = new Scanner(dataImport);\n\n            while(dataReader.hasNext()){\n                String
        line = dataReader.nextLine();\n                expense.add(Integer.parseInt(line));\n            }\n        }\n        catch(Exception
        e){\n            System.out.println(e.toString());\n        }\n    }\n\n    public
        List&amp;lt;Integer&amp;gt; sum2020Multiple(int total, int input){\n        List&amp;lt;Integer&amp;gt;
        sum2020 = new ArrayList&amp;lt;&amp;gt;();\n\n        find2020Sum(sum2020,
        total, input, 0);\n\n        System.out.print(&amp;quot;Multiple of 2020 -
        Day 1 Part 1: &amp;quot;);\n        int sum = 1;\n        for(int i = 0; i
        &amp;lt; sum2020.size(); i++){\n            sum *= sum2020.get(i);\n        }\n        System.out.println(sum);\n\n        return
        sum2020;\n    }\n\n    private boolean find2020Sum(List&amp;lt;Integer&amp;gt;
        res, int total, int inputs, int index){\n        if(expense.size() == 0 ||
        expense == null)\n            return false;\n\n        if(index &amp;gt;=
        expense.size() || total &amp;lt; 0 || (inputs == 0 &amp;amp;&amp;amp; total
        != 0))\n            return false;\n\n        if(total == 0 &amp;amp;&amp;amp;
        inputs == 0)\n            return true;\n\n        for(int i = index; i &amp;lt;
        expense.size(); i++){\n            res.add(expense.get(i));\n\n            if(find2020Sum(res,
        total - expense.get(i), inputs-1, i+1)) {\n                return true;\n            }\n            res.remove(res.size()
        - 1);\n        }\n\n        return false;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8rhbi/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8rhbi", "created":
        1606812528.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8sdvm",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "jenneh03",
        "can_mod_post": false, "created_utc": 1606813469.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_3150lqjg", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Here''s my solution in C#:\n\n    string filename = \"../../../../input.txt\";\n    StreamReader
        sr = new StreamReader(filename);\n    List&lt;int&gt; input = new List&lt;int&gt;();\n    \n    string
        line;\n    while ((line = sr.ReadLine()) != null)\n    {\n        input.Add(Convert.ToInt32(line));\n    }\n    \n    input.Sort();\n    \n    for
        (int i = 0; i &lt; input.Count - 2; i++)\n    {\n        for (int j = i +
        1; j &lt; input.Count - 1; j++)\n        {\n            int sum = input[i]
        + input[j];\n            if (sum &gt; 2020)\n            {\n                break;\n            }\n            for
        (int k = j; k &lt; input.Count; k++)\n            {\n                sum =
        input[i] + input[j] + input[k];\n                if (sum == 2020)\n                {\n                    Console.WriteLine(input[i]
        * input[j] * input[k]);\n                }\n                else if (sum &gt;
        2020)\n                {\n                    break;\n                }\n            }\n        }\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s my solution
        in C#:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;string filename = &amp;quot;../../../../input.txt&amp;quot;;\nStreamReader
        sr = new StreamReader(filename);\nList&amp;lt;int&amp;gt; input = new List&amp;lt;int&amp;gt;();\n\nstring
        line;\nwhile ((line = sr.ReadLine()) != null)\n{\n    input.Add(Convert.ToInt32(line));\n}\n\ninput.Sort();\n\nfor
        (int i = 0; i &amp;lt; input.Count - 2; i++)\n{\n    for (int j = i + 1; j
        &amp;lt; input.Count - 1; j++)\n    {\n        int sum = input[i] + input[j];\n        if
        (sum &amp;gt; 2020)\n        {\n            break;\n        }\n        for
        (int k = j; k &amp;lt; input.Count; k++)\n        {\n            sum = input[i]
        + input[j] + input[k];\n            if (sum == 2020)\n            {\n                Console.WriteLine(input[i]
        * input[j] * input[k]);\n            }\n            else if (sum &amp;gt;
        2020)\n            {\n                break;\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8sdvm/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8sdvm", "created":
        1606813469.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8t4j6",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "IndieBret",
        "can_mod_post": false, "created_utc": 1606814270.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_j9b0n", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**\\[JavaScript/ES6\\]**\n\nTried a functional approach after brute forcing
        it initially. This runs 2/3 the time the brute force method does. This year,
        I''m trying to become more familiar with writing functional code, so I''m
        going to try to write as much of it side-effect free as possible.\n\nNote:
        I have a custom \\`combinations()\\` method I added to \\`Array.prototype\\`
        in a utils.js file.\n\n    const combinations = inputs.combinations(2).sort((a,
        b) =&gt; (a[0] + a[1]) - (b[0] + b[1]));\n    const validPairs = combinations.filter(([a,
        b]) =&gt; a + b &lt;= 2020);\n    result[0] = validPairs[validPairs.length
        - 1].reduce((acc, v) =&gt; acc * v, 1);\n    result[1] = inputs.reduce((acc,
        input) =&gt; {\n    \treturn acc || validPairs.find(([a, b]) =&gt; {\n    \t\treturn
        ((a !== input) &amp;&amp; (b !== input) &amp;&amp; (a + b + input) === 2020);\n    \t})?.reduce((acc,
        v) =&gt; acc * v, input);\n    }, null);", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;[JavaScript/ES6]&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Tried
        a functional approach after brute forcing it initially. This runs 2/3 the
        time the brute force method does. This year, I&amp;#39;m trying to become
        more familiar with writing functional code, so I&amp;#39;m going to try to
        write as much of it side-effect free as possible.&lt;/p&gt;\n\n&lt;p&gt;Note:
        I have a custom `combinations()` method I added to `Array.prototype` in a
        utils.js file.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const combinations = inputs.combinations(2).sort((a,
        b) =&amp;gt; (a[0] + a[1]) - (b[0] + b[1]));\nconst validPairs = combinations.filter(([a,
        b]) =&amp;gt; a + b &amp;lt;= 2020);\nresult[0] = validPairs[validPairs.length
        - 1].reduce((acc, v) =&amp;gt; acc * v, 1);\nresult[1] = inputs.reduce((acc,
        input) =&amp;gt; {\n    return acc || validPairs.find(([a, b]) =&amp;gt; {\n        return
        ((a !== input) &amp;amp;&amp;amp; (b !== input) &amp;amp;&amp;amp; (a + b
        + input) === 2020);\n    })?.reduce((acc, v) =&amp;gt; acc * v, input);\n},
        null);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8t4j6/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8t4j6", "created":
        1606814270.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8tfea",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "kresimirlukin",
        "can_mod_post": false, "created_utc": 1606814596.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_pbdnio7", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python3, optimized 2 pointer sum solution at [https://github.com/kresimir-lukin/AdventOfCode2020/blob/main/day01.py](https://github.com/kresimir-lukin/AdventOfCode2020/blob/main/day01.py)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python3, optimized 2
        pointer sum solution at &lt;a href=\"https://github.com/kresimir-lukin/AdventOfCode2020/blob/main/day01.py\"&gt;https://github.com/kresimir-lukin/AdventOfCode2020/blob/main/day01.py&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8tfea/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8tfea", "created":
        1606814596.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606815336.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8ttxd", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ddddavidee",
        "can_mod_post": false, "created_utc": 1606815029.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_f1mmu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python 3\n\n    import itertools\n    numbers = []\n    with open(\"input\",
        \"r\") as file_in:\n        while True:\n            num = file_in.readline().rstrip(''\\n'')\n            if
        not num:\n                break\n            numbers.append(int(num))\n    \n    for
        num in set(numbers):\n        if (other := 2020 - num) in set(numbers):\n            print(f\"Found
        numbers: {num} and {other}\")\n            print(f\"Their product: {num *
        other}\")\n    \n    for pair in itertools.combinations(numbers, 2):\n        if
        sum(pair) &gt;= 2020:\n            pass\n        if (other := 2020 - sum(pair))
        in set(numbers):\n            print(f\"Found numbers: {pair} and {other}\")\n            print(f\"Their
        product: {pair[0] * pair[1] * other}\")", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Python 3&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        itertools\nnumbers = []\nwith open(&amp;quot;input&amp;quot;, &amp;quot;r&amp;quot;)
        as file_in:\n    while True:\n        num = file_in.readline().rstrip(&amp;#39;\\n&amp;#39;)\n        if
        not num:\n            break\n        numbers.append(int(num))\n\nfor num in
        set(numbers):\n    if (other := 2020 - num) in set(numbers):\n        print(f&amp;quot;Found
        numbers: {num} and {other}&amp;quot;)\n        print(f&amp;quot;Their product:
        {num * other}&amp;quot;)\n\nfor pair in itertools.combinations(numbers, 2):\n    if
        sum(pair) &amp;gt;= 2020:\n        pass\n    if (other := 2020 - sum(pair))
        in set(numbers):\n        print(f&amp;quot;Found numbers: {pair} and {other}&amp;quot;)\n        print(f&amp;quot;Their
        product: {pair[0] * pair[1] * other}&amp;quot;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8ttxd/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8ttxd", "created":
        1606815029.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 6, "name": "t1_ge8tud8", "id": "ge8tud8", "parent_id":
        "t1_ge8ttxd", "depth": 1, "children": ["ge8tud8", "ge8udj8"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1713954845.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8ufj6", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ephemient",
        "can_mod_post": false, "created_utc": 1606815683.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_3y2dr", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "This space intentionally left blank.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;This space intentionally left blank.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8ufj6/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8ufj6", "created":
        1606815683.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge8zfve", "id": "ge8zfve", "parent_id":
        "t1_ge8ufj6", "depth": 1, "children": ["ge8zfve"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8v27u",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Lukasz1928",
        "can_mod_post": false, "created_utc": 1606816388.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_1n9hl7hg", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Python**\n\nLoops are boring so I decided to solve the task using Z3. It
        might be a tiny bit overkill but who cares?\n\n    import functools\n    import
        z3\n    \n    def read_input():\n        with open(''input'', ''r'') as f:\n            return
        {int(line) for line in f}\n    \n    def in_set(value, values):\n        return
        z3.Or([v == value for v in values])\n    \n    expenses_report = read_input()\n    entries_count
        = 3\n    \n    solver = z3.Solver()\n    entries = [z3.Int(f''e{i}'') for
        i in range(entries_count)]\n    solver.add(sum(entries) == 2020)\n    for
        e in entries:\n        solver.add(in_set(e, expenses_report))\n    \n    solver.check()\n    \n    entries_value
        = [solver.model()[e].as_long() for e in entries]\n    result = functools.reduce(lambda
        acc, val: acc * val, entries_value)\n    print(result)", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Loops
        are boring so I decided to solve the task using Z3. It might be a tiny bit
        overkill but who cares?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import functools\nimport
        z3\n\ndef read_input():\n    with open(&amp;#39;input&amp;#39;, &amp;#39;r&amp;#39;)
        as f:\n        return {int(line) for line in f}\n\ndef in_set(value, values):\n    return
        z3.Or([v == value for v in values])\n\nexpenses_report = read_input()\nentries_count
        = 3\n\nsolver = z3.Solver()\nentries = [z3.Int(f&amp;#39;e{i}&amp;#39;) for
        i in range(entries_count)]\nsolver.add(sum(entries) == 2020)\nfor e in entries:\n    solver.add(in_set(e,
        expenses_report))\n\nsolver.check()\n\nentries_value = [solver.model()[e].as_long()
        for e in entries]\nresult = functools.reduce(lambda acc, val: acc * val, entries_value)\nprint(result)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8v27u/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8v27u", "created":
        1606816388.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8vk39",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "mcbeelen",
        "can_mod_post": false, "created_utc": 1606816938.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_3439e7", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "\\[Kotlin\\]Part One: Recursive using a ArrayDeque with sorted expenses\n\n    fun
        findTwoExpensesThatSumTo2020(input: String): Pair&lt;Int, Int&gt; {\n        val
        expenses = parseInputToInts(input)\n                         .sorted()\n                         .toDeque()\n        return
        findTwoExpensesThatSumTo2020(expenses)\n    }\n    \n    \n    tailrec fun
        findTwoExpensesThatSumTo2020(expenses: ArrayDeque&lt;Int&gt;): Pair&lt;Int,
        Int&gt; {\n      val low = expenses.first();\n      val high = expenses.last();\n    \n      val
        sum = low + high\n      when {\n        sum == 2020 -&gt; return Pair(low,
        high)\n        sum &lt; 2020 -&gt; expenses.removeFirst()\n        sum &gt;=
        2020 -&gt; expenses.removeLast()\n      }\n    \n      return findTwoExpensesThatSumTo2020(expenses)\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[Kotlin]Part One: Recursive
        using a ArrayDeque with sorted expenses&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fun
        findTwoExpensesThatSumTo2020(input: String): Pair&amp;lt;Int, Int&amp;gt;
        {\n    val expenses = parseInputToInts(input)\n                     .sorted()\n                     .toDeque()\n    return
        findTwoExpensesThatSumTo2020(expenses)\n}\n\n\ntailrec fun findTwoExpensesThatSumTo2020(expenses:
        ArrayDeque&amp;lt;Int&amp;gt;): Pair&amp;lt;Int, Int&amp;gt; {\n  val low
        = expenses.first();\n  val high = expenses.last();\n\n  val sum = low + high\n  when
        {\n    sum == 2020 -&amp;gt; return Pair(low, high)\n    sum &amp;lt; 2020
        -&amp;gt; expenses.removeFirst()\n    sum &amp;gt;= 2020 -&amp;gt; expenses.removeLast()\n  }\n\n  return
        findTwoExpensesThatSumTo2020(expenses)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8vk39/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8vk39", "created":
        1606816938.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_ge8y36s", "id": "ge8y36s", "parent_id":
        "t1_ge8vk39", "depth": 1, "children": ["ge8y36s"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8vp59",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "odlp",
        "can_mod_post": false, "created_utc": 1606817094.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_hw58e", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Ruby**\n\n```\ncombination_size = ARGV.first.to_i\nexpenses_path = File.expand_path(\"expenses.txt\",
        __dir__)\nexpenses = File.readlines(expenses_path).map(&amp;:to_i)\n\nexpenses\n  .combination(combination_size)\n  .detect
        { |expenses| expenses.sum == 2020 }\n  .tap do |expenses|\n    break if expenses.nil?\n\n    combination
        = expenses.join(\" * \")\n    answer = expenses.inject(:*)\n    puts \"#{combination}
        = #{answer}\"\n  end\n```", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;```\ncombination&lt;em&gt;size
        = ARGV.first.to_i\nexpenses_path = File.expand_path(&amp;quot;expenses.txt&amp;quot;,
        __dir&lt;/em&gt;_)\nexpenses = File.readlines(expenses_path).map(&amp;amp;:to_i)&lt;/p&gt;\n\n&lt;p&gt;expenses\n  .combination(combination_size)\n  .detect
        { |expenses| expenses.sum == 2020 }\n  .tap do |expenses|\n    break if expenses.nil?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;combination
        = expenses.join(&amp;quot; * &amp;quot;)\nanswer = expenses.inject(:*)\nputs
        &amp;quot;#{combination} = #{answer}&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;end\n```&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8vp59/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8vp59", "created":
        1606817094.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge8vpls", "id": "ge8vpls", "parent_id":
        "t1_ge8vp59", "depth": 1, "children": ["ge8vpls"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8w08q",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "musifter",
        "can_mod_post": false, "created_utc": 1606817438.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_cwt0kc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**GNU Smalltalk**\n\nYeah, it''s been a good while since I''ve used Smalltalk,
        so it''s not the best code.  Probably should do at least a few more problems
        this year in it to shake off the rust.  At which point I''ll probably rewrite
        this.\n\nhttps://pastebin.com/xHe2snfP", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;GNU Smalltalk&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Yeah,
        it&amp;#39;s been a good while since I&amp;#39;ve used Smalltalk, so it&amp;#39;s
        not the best code.  Probably should do at least a few more problems this year
        in it to shake off the rust.  At which point I&amp;#39;ll probably rewrite
        this.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://pastebin.com/xHe2snfP\"&gt;https://pastebin.com/xHe2snfP&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8w08q/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8w08q", "created":
        1606817438.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8w6hf",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "__Abigail__",
        "can_mod_post": false, "created_utc": 1606817632.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_13exmr", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "#Perl\n\n~~~~\n#!/opt/perl/bin/perl\n\nuse 5.028;\n\nuse strict;\nuse warnings;\nno  warnings
        ''syntax'';\n\nuse experimental ''signatures'';  \nuse experimental ''lexical_subs'';\n        \n#\n#
        Challenge\n#\n#   Part 1\n# \n#     Given a list of numbers, find a pair which
        sums to 2020,\n#     and return their product.\n#    \n#   Part 2\n#   \n#     Using
        the same list, find a triple which sums to 2020,     \n#     and return their
        product.\n#    \n \nmy $input = shift // \"input\";\n  \nmy ($solution1, $solution2);\n        \nmy
        $YEAR = 2020;\n            \n#\n# Read in the data\n#\nmy %numbers = do {\n    open
        my $fh, \"&lt;\", $input or die \"Failed to open $input: $!\";\n    map {chomp;
        ($_ =&gt; 1)} &lt;$fh&gt;;\n};\n     \n#\n# Sort the keys\n#\nmy @numbers
        = sort {$a &lt;=&gt; $b} keys %numbers;\n \n#\n# Calculate the product of
        the pair:\n#\n#   Loop over the numbers, check whether there''s another number\n#   so
        both of them sum to 2020. This is a simple lookup.\n#   If found, calculate
        the product and exit.\n#\nforeach my $N (@numbers) {\n    if ($numbers {$YEAR
        - $N}) {\n        $solution1 = $N * ($YEAR - $N);\n        last;\n    }\n}\n
        \n#   \n# Calculate the product of the triple:\n#     \n#    Loop over the
        numbers. For each number, make a second loop,\n#    starting from the first
        number. Exit inner loop if the two\n#    numbers sum to something which exceeds
        two thirds of 2020\n#   (as there won''t be a triple with a third, larger,
        number).\n#    Then do a lookup to see whether there is a third number     \n#    so
        we have a triple summing to 2020. If so, calculate the\n#    product, and
        exit the outer loop.\n#\nOUTER:\n  for (my $i = 0; $i &lt; @numbers; $i ++)
        {\n    for (my $j = $i + 1; $j &lt; @numbers; $j ++) {\n        next OUTER
        if $numbers [$i] + $numbers [$j] &gt; $YEAR * 2 / 3;\n        if ($numbers
        {$YEAR - $numbers [$i] - $numbers [$j]}) {\n            $solution2 = $numbers
        [$i] *\n                         $numbers [$j] *\n                        ($YEAR
        - $numbers [$i] - $numbers [$j]);\n            last OUTER;\n        }\n    }\n}\n  \n     \nsay
        \"Solution 1: \",  $solution1;\nsay \"Solution 2: \",  $solution2;\n \n__END__\n~~~~",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Perl&lt;/h1&gt;\n\n&lt;p&gt;~~~~&lt;/p&gt;\n\n&lt;h1&gt;!/opt/perl/bin/perl&lt;/h1&gt;\n\n&lt;p&gt;use
        5.028;&lt;/p&gt;\n\n&lt;p&gt;use strict;\nuse warnings;\nno  warnings &amp;#39;syntax&amp;#39;;&lt;/p&gt;\n\n&lt;p&gt;use
        experimental &amp;#39;signatures&amp;#39;;&lt;br/&gt;\nuse experimental &amp;#39;lexical_subs&amp;#39;;&lt;/p&gt;\n\n&lt;h1&gt;Challenge&lt;/h1&gt;\n\n&lt;h1&gt;Part
        1&lt;/h1&gt;\n\n&lt;h1&gt;Given a list of numbers, find a pair which sums
        to 2020,&lt;/h1&gt;\n\n&lt;h1&gt;and return their product.&lt;/h1&gt;\n\n&lt;h1&gt;Part
        2&lt;/h1&gt;\n\n&lt;h1&gt;Using the same list, find a triple which sums to
        2020,&lt;/h1&gt;\n\n&lt;h1&gt;and return their product.&lt;/h1&gt;\n\n&lt;p&gt;my
        $input = shift // &amp;quot;input&amp;quot;;&lt;/p&gt;\n\n&lt;p&gt;my ($solution1,
        $solution2);&lt;/p&gt;\n\n&lt;p&gt;my $YEAR = 2020;&lt;/p&gt;\n\n&lt;h1&gt;Read
        in the data&lt;/h1&gt;\n\n&lt;p&gt;my %numbers = do {\n    open my $fh, &amp;quot;&amp;lt;&amp;quot;,
        $input or die &amp;quot;Failed to open $input: $!&amp;quot;;\n    map {chomp;
        ($_ =&amp;gt; 1)} &amp;lt;$fh&amp;gt;;\n};&lt;/p&gt;\n\n&lt;h1&gt;Sort the
        keys&lt;/h1&gt;\n\n&lt;p&gt;my @numbers = sort {$a &amp;lt;=&amp;gt; $b} keys
        %numbers;&lt;/p&gt;\n\n&lt;h1&gt;Calculate the product of the pair:&lt;/h1&gt;\n\n&lt;h1&gt;Loop
        over the numbers, check whether there&amp;#39;s another number&lt;/h1&gt;\n\n&lt;h1&gt;so
        both of them sum to 2020. This is a simple lookup.&lt;/h1&gt;\n\n&lt;h1&gt;If
        found, calculate the product and exit.&lt;/h1&gt;\n\n&lt;p&gt;foreach my $N
        (@numbers) {\n    if ($numbers {$YEAR - $N}) {\n        $solution1 = $N *
        ($YEAR - $N);\n        last;\n    }\n}&lt;/p&gt;\n\n&lt;h1&gt;Calculate the
        product of the triple:&lt;/h1&gt;\n\n&lt;h1&gt;Loop over the numbers. For
        each number, make a second loop,&lt;/h1&gt;\n\n&lt;h1&gt;starting from the
        first number. Exit inner loop if the two&lt;/h1&gt;\n\n&lt;h1&gt;numbers sum
        to something which exceeds two thirds of 2020&lt;/h1&gt;\n\n&lt;h1&gt;(as
        there won&amp;#39;t be a triple with a third, larger, number).&lt;/h1&gt;\n\n&lt;h1&gt;Then
        do a lookup to see whether there is a third number&lt;/h1&gt;\n\n&lt;h1&gt;so
        we have a triple summing to 2020. If so, calculate the&lt;/h1&gt;\n\n&lt;h1&gt;product,
        and exit the outer loop.&lt;/h1&gt;\n\n&lt;p&gt;OUTER:\n  for (my $i = 0;
        $i &amp;lt; @numbers; $i ++) {\n    for (my $j = $i + 1; $j &amp;lt; @numbers;
        $j ++) {\n        next OUTER if $numbers [$i] + $numbers [$j] &amp;gt; $YEAR
        * 2 / 3;\n        if ($numbers {$YEAR - $numbers [$i] - $numbers [$j]}) {\n            $solution2
        = $numbers [$i] *\n                         $numbers [$j] *\n                        ($YEAR
        - $numbers [$i] - $numbers [$j]);\n            last OUTER;\n        }\n    }\n}&lt;/p&gt;\n\n&lt;p&gt;say
        &amp;quot;Solution 1: &amp;quot;,  $solution1;\nsay &amp;quot;Solution 2:
        &amp;quot;,  $solution2;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;END&lt;/strong&gt;\n~~~~&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8w6hf/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8w6hf", "created":
        1606817632.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8xkyv",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "fiddle_n",
        "can_mod_post": false, "created_utc": 1606819177.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_7is2d", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python\n\n    import itertools\n    import math\n    \n    def read():\n        input_list
        = []\n        with open(''input.txt'') as f:\n            for line in f:\n                input_list.append(int(line))\n        return
        input_list\n    \n    \n    def process(input_list, combo_no):\n        for
        combo in itertools.combinations(input_list, combo_no):\n            if sum(combo)
        == 2020:\n                return math.prod(combo)\n    \n    \n    def main(combo_no):\n        input_list
        = read()\n        return process(input_list, combo_no)\n    \n    \n    if
        __name__ == ''__main__'':\n        print(f''Combo 2: {main(combo_no=2)}'')\n        print(f''Combo
        3: {main(combo_no=3)}'')", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        itertools\nimport math\n\ndef read():\n    input_list = []\n    with open(&amp;#39;input.txt&amp;#39;)
        as f:\n        for line in f:\n            input_list.append(int(line))\n    return
        input_list\n\n\ndef process(input_list, combo_no):\n    for combo in itertools.combinations(input_list,
        combo_no):\n        if sum(combo) == 2020:\n            return math.prod(combo)\n\n\ndef
        main(combo_no):\n    input_list = read()\n    return process(input_list, combo_no)\n\n\nif
        __name__ == &amp;#39;__main__&amp;#39;:\n    print(f&amp;#39;Combo 2: {main(combo_no=2)}&amp;#39;)\n    print(f&amp;#39;Combo
        3: {main(combo_no=3)}&amp;#39;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8xkyv/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8xkyv", "created":
        1606819177.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 6, "name": "t1_ge8ya6p", "id": "ge8ya6p", "parent_id":
        "t1_ge8xkyv", "depth": 1, "children": ["ge8ya6p"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8xp9f",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "krossmaskinen",
        "can_mod_post": false, "created_utc": 1606819305.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_nk227", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Javascript in Deno\n\n    const decoder = new TextDecoder(\"utf-8\");\n    let
        day1Input = Deno.readFileSync(\"input1-1.txt\");\n    \n    day1Input = decoder.decode(day1Input);\n    day1Input
        = getParsedInput(day1Input);\n    \n    const sumPair = find2020Sum(day1Input);\n    console.log(\"part1:
        \", sumPair.reduce((a, b) =&gt; a * b));\n    \n    const sumTriplet = find2020TripleSum(day1Input);\n    console.log(\"part2:
        \", sumTriplet.reduce((a, b) =&gt; a * b));\n    \n    function getParsedInput(input)
        {\n      return input\n        .split(''\\n'')\n        .filter(item =&gt;
        !!item)\n        .map(Number);\n    }\n    \n    function find2020Sum(input)
        {\n      for (let i = 0; i &lt; input.length - 1; ++i) {\n        for (let
        j = i + 1; j &lt; input.length; ++j) {\n          if (input[i] + input[j]
        === 2020) {\n            return [input[i], input[j]];\n          }\n        }\n      }\n    }\n    \n    function
        find2020TripleSum(input) {\n      for (let i = 0; i &lt; input.length - 2;
        ++i) {\n        for (let j = i + 1; j &lt; input.length - 1; ++j) {\n          for
        (let k = i + 1; k &lt; input.length; ++k) {\n    \n            if (input[i]
        + input[j]+ input[k] === 2020) {\n              return [input[i], input[j],
        input[k]];\n            }\n          }\n        }\n      }\n    }", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Javascript in Deno&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const
        decoder = new TextDecoder(&amp;quot;utf-8&amp;quot;);\nlet day1Input = Deno.readFileSync(&amp;quot;input1-1.txt&amp;quot;);\n\nday1Input
        = decoder.decode(day1Input);\nday1Input = getParsedInput(day1Input);\n\nconst
        sumPair = find2020Sum(day1Input);\nconsole.log(&amp;quot;part1: &amp;quot;,
        sumPair.reduce((a, b) =&amp;gt; a * b));\n\nconst sumTriplet = find2020TripleSum(day1Input);\nconsole.log(&amp;quot;part2:
        &amp;quot;, sumTriplet.reduce((a, b) =&amp;gt; a * b));\n\nfunction getParsedInput(input)
        {\n  return input\n    .split(&amp;#39;\\n&amp;#39;)\n    .filter(item =&amp;gt;
        !!item)\n    .map(Number);\n}\n\nfunction find2020Sum(input) {\n  for (let
        i = 0; i &amp;lt; input.length - 1; ++i) {\n    for (let j = i + 1; j &amp;lt;
        input.length; ++j) {\n      if (input[i] + input[j] === 2020) {\n        return
        [input[i], input[j]];\n      }\n    }\n  }\n}\n\nfunction find2020TripleSum(input)
        {\n  for (let i = 0; i &amp;lt; input.length - 2; ++i) {\n    for (let j =
        i + 1; j &amp;lt; input.length - 1; ++j) {\n      for (let k = i + 1; k &amp;lt;
        input.length; ++k) {\n\n        if (input[i] + input[j]+ input[k] === 2020)
        {\n          return [input[i], input[j], input[k]];\n        }\n      }\n    }\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8xp9f/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8xp9f", "created":
        1606819305.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_geajymr", "id": "geajymr", "parent_id":
        "t1_ge8xp9f", "depth": 1, "children": ["geajymr"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8xpoi",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "zopatista",
        "can_mod_post": false, "created_utc": 1606819318.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_7xrf5", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Python 3**\n\nUsing a set to find the ''other'' coin (the other coin must
        be `2020 - first`). Part 2 is then using the same set as a stack; pop off
        a coin, use part 1 with a variable target to find two coins that sum up to
        `2020 - selected`:\n\n    import aocd\n    coins = set(map(int, aocd.get_data(day=1,
        year=2020).splitlines()))\n    \n    from operator import mul\n    \n    def
        find_sum(coins, target=2020):\n        for first in coins:\n            second
        = target - first\n            if second in coins:\n                return
        first, second\n        \n        raise ValueError(\"Not solvable\")\n    \n    def
        sum_coins(coins):\n        return mul(*find_sum(coins))\n    \n    def sum_three(coins):\n        while
        coins:\n            selected = coins.pop()\n            remainder = 2020 -
        selected\n            try:\n                return selected * mul(*find_sum(coins,
        target=remainder))\n            except ValueError:\n                continue\n    \n    print(\"Part
        1:\", sum_coins(coins))\n    print(\"Part 2:\", sum_three(coins))\n    \nAs
        always, [solution as Jupyter notebook on Github](https://github.com/mjpieters/adventofcode/blob/master/2020/Day%2001.ipynb),
        and on [notebook viewer](https://nbviewer.jupyter.org/github/mjpieters/adventofcode/blob/master/2020/Day%2001.ipynb)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python
        3&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Using a set to find the &amp;#39;other&amp;#39;
        coin (the other coin must be &lt;code&gt;2020 - first&lt;/code&gt;). Part
        2 is then using the same set as a stack; pop off a coin, use part 1 with a
        variable target to find two coins that sum up to &lt;code&gt;2020 - selected&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        aocd\ncoins = set(map(int, aocd.get_data(day=1, year=2020).splitlines()))\n\nfrom
        operator import mul\n\ndef find_sum(coins, target=2020):\n    for first in
        coins:\n        second = target - first\n        if second in coins:\n            return
        first, second\n\n    raise ValueError(&amp;quot;Not solvable&amp;quot;)\n\ndef
        sum_coins(coins):\n    return mul(*find_sum(coins))\n\ndef sum_three(coins):\n    while
        coins:\n        selected = coins.pop()\n        remainder = 2020 - selected\n        try:\n            return
        selected * mul(*find_sum(coins, target=remainder))\n        except ValueError:\n            continue\n\nprint(&amp;quot;Part
        1:&amp;quot;, sum_coins(coins))\nprint(&amp;quot;Part 2:&amp;quot;, sum_three(coins))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As
        always, &lt;a href=\"https://github.com/mjpieters/adventofcode/blob/master/2020/Day%2001.ipynb\"&gt;solution
        as Jupyter notebook on Github&lt;/a&gt;, and on &lt;a href=\"https://nbviewer.jupyter.org/github/mjpieters/adventofcode/blob/master/2020/Day%2001.ipynb\"&gt;notebook
        viewer&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8xpoi/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8xpoi", "created":
        1606819318.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8y8a7",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "burcadoruciprian",
        "can_mod_post": false, "created_utc": 1606819872.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_po6e1", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "RUST:\n\n    use itertools::Itertools;\n    fn main() {\n        let input:
        String = std::fs::read_to_string(\"./src/input.txt\")\n            .expect(\"Something
        went wrong reading the INPUT file\");\n        let report: Vec&lt;i32&gt;
        = input\n            .split_ascii_whitespace()\n            .map(|x| x.parse().unwrap())\n            .sorted()\n            .collect();\n    \n        let
        found = report\n            .iter()\n            .combinations(2)\n            .find(|x|
        x[0] + x[1] == 2020)\n            .unwrap()\n            .iter()\n            .fold(1,
        |acc, x| acc * **x);\n        println!(\"Part1: {}\", found);\n        let
        found = report\n            .iter()\n            .combinations(3)\n            .find(|x|
        x[0] + x[1] + x[2] == 2020)\n            .unwrap()\n            .iter()\n            .fold(1,
        |acc, x| acc * **x);\n        println!(\"Part2: {}\", found);\n    }", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;RUST:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use
        itertools::Itertools;\nfn main() {\n    let input: String = std::fs::read_to_string(&amp;quot;./src/input.txt&amp;quot;)\n        .expect(&amp;quot;Something
        went wrong reading the INPUT file&amp;quot;);\n    let report: Vec&amp;lt;i32&amp;gt;
        = input\n        .split_ascii_whitespace()\n        .map(|x| x.parse().unwrap())\n        .sorted()\n        .collect();\n\n    let
        found = report\n        .iter()\n        .combinations(2)\n        .find(|x|
        x[0] + x[1] == 2020)\n        .unwrap()\n        .iter()\n        .fold(1,
        |acc, x| acc * **x);\n    println!(&amp;quot;Part1: {}&amp;quot;, found);\n    let
        found = report\n        .iter()\n        .combinations(3)\n        .find(|x|
        x[0] + x[1] + x[2] == 2020)\n        .unwrap()\n        .iter()\n        .fold(1,
        |acc, x| acc * **x);\n    println!(&amp;quot;Part2: {}&amp;quot;, found);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8y8a7/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8y8a7", "created":
        1606819872.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 5, "name": "t1_ge92a3v", "id": "ge92a3v", "parent_id":
        "t1_ge8y8a7", "depth": 1, "children": ["ge92a3v"]}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606827810.0, "mod_reason_by": null,
        "banned_by": null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8ymhn", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        2, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Part 1: O(n), Python, only looping over the numbers once:  \n\n    numbers
        = set()                                                                 \n    with
        open(''input.txt'', ''r'') as f:                                               \n        for
        line in f:                                                              \n            n
        = int(line)                                                           \n            if
        2020 - n in numbers:                                                 \n                print(n*(2020
        - n))                                                 \n                break                                                               \n            else:                                                                   \n                numbers
        |= {n}\n\n\nPart 2: O(n^2):\n\n    import sys                                                                      \n    with
        open(''input.txt'', ''r'') as f:                                               \n        numbers
        = {int(line) for line in f}                                         \n    for
        n in numbers:                                                               \n        for
        k in numbers:                                                           \n            if
        2020 - n - k in numbers:                                             \n                print(n
        * (2020 - n - k) * k)                                       \n                sys.exit()",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_ge8ymhn",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Part
        1: O(n), Python, only looping over the numbers once:  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;numbers
        = set()                                                                 \nwith
        open(&amp;#39;input.txt&amp;#39;, &amp;#39;r&amp;#39;) as f:                                               \n    for
        line in f:                                                              \n        n
        = int(line)                                                           \n        if
        2020 - n in numbers:                                                 \n            print(n*(2020
        - n))                                                 \n            break                                                               \n        else:                                                                   \n            numbers
        |= {n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part 2: O(n&lt;sup&gt;2):&lt;/sup&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        sys                                                                      \nwith
        open(&amp;#39;input.txt&amp;#39;, &amp;#39;r&amp;#39;) as f:                                               \n    numbers
        = {int(line) for line in f}                                         \nfor
        n in numbers:                                                               \n    for
        k in numbers:                                                           \n        if
        2020 - n - k in numbers:                                             \n            print(n
        * (2020 - n - k) * k)                                       \n            sys.exit()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8ymhn/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606820295.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606820295.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge90p64",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "itsm1kan",
        "can_mod_post": false, "created_utc": 1606822472.0, "send_replies": true,
        "parent_id": "t1_ge8ymhn", "score": 3, "author_fullname": "t2_2i5n7nn9", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "You\u2019re looping over the numbers twice, not once in part 1 and thrice
        in part 2! \u201eif _ in list\u201c is going through it as well", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;You\u2019re looping over the numbers twice,
        not once in part 1 and thrice in part 2! \u201eif _ in list\u201c is going
        through it as well&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge90p64/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge90p64", "created":
        1606822472.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge95zom", "id": "ge95zom", "parent_id":
        "t1_ge90p64", "depth": 2, "children": ["ge95zom"]}}, {"kind": "more", "data":
        {"count": 5, "name": "t1_ge91zr7", "id": "ge91zr7", "parent_id": "t1_ge8ymhn",
        "depth": 1, "children": ["ge91zr7", "ge8ymxf"]}}, {"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "edited": 1606823841.0, "mod_reason_by": null, "banned_by": null, "ups":
        2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9060g",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "rhowe212",
        "can_mod_post": false, "created_utc": 1606821932.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_hhchkrx", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Ansible. It is not fast.\n\n[https://gist.github.com/rhowe/1059f9da52850f942e7e120d7b11bf80](https://gist.github.com/rhowe/1059f9da52850f942e7e120d7b11bf80)\n\nEdit:
        With a suggestion from a colleague I got it down from 30mins to 35s. I can
        live with that.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ansible.
        It is not fast.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://gist.github.com/rhowe/1059f9da52850f942e7e120d7b11bf80\"&gt;https://gist.github.com/rhowe/1059f9da52850f942e7e120d7b11bf80&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Edit:
        With a suggestion from a colleague I got it down from 30mins to 35s. I can
        live with that.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9060g/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9060g", "created":
        1606821932.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge90c7v",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "risboo6909",
        "can_mod_post": false, "created_utc": 1606822111.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_cvyxl", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Rust solution for 2 parts of Day 1 puzzle:\n\n[View on GitHub](https://github.com/risboo6909/aoc2020/blob/master/problems/src/problem1/mod.rs)\n\nI
        think it''s pretty straight-forward any easy to understand solution. Takes
        O(n) to solve the first part of the problem and O(n\\^2) to solve the second
        one.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Rust
        solution for 2 parts of Day 1 puzzle:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/risboo6909/aoc2020/blob/master/problems/src/problem1/mod.rs\"&gt;View
        on GitHub&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I think it&amp;#39;s pretty straight-forward
        any easy to understand solution. Takes O(n) to solve the first part of the
        problem and O(n^2) to solve the second one.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge90c7v/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge90c7v", "created": 1606822111.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 2, "name":
        "t1_ge92rqh", "id": "ge92rqh", "parent_id": "t1_ge90c7v", "depth": 1, "children":
        ["ge92rqh"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge92sk0", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "krolik1337",
        "can_mod_post": false, "created_utc": 1606824533.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_olnx8", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My solution in Python, guess I''ll have to learn itertools\n\n    #%%\n    expenses
        = list(map(int,open(\"input.txt\", \"r\").read().split()))\n    #%%\n    #!===PART
        1===!#\n    for i in expenses:\n        for j in expenses:\n            if
        i+j==2020:\n                print(i*j)\n                raise SystemExit\n    #%%\n    #!===PART
        2===!#\n    for i in expenses:\n        for j in expenses:\n            for
        k in expenses:\n                if i+j+k==2020:\n                    print(i*j*k)\n                    raise
        SystemExit", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My
        solution in Python, guess I&amp;#39;ll have to learn itertools&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#%%\nexpenses
        = list(map(int,open(&amp;quot;input.txt&amp;quot;, &amp;quot;r&amp;quot;).read().split()))\n#%%\n#!===PART
        1===!#\nfor i in expenses:\n    for j in expenses:\n        if i+j==2020:\n            print(i*j)\n            raise
        SystemExit\n#%%\n#!===PART 2===!#\nfor i in expenses:\n    for j in expenses:\n        for
        k in expenses:\n            if i+j+k==2020:\n                print(i*j*k)\n                raise
        SystemExit\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge92sk0/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge92sk0", "created":
        1606824533.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_ge937ao", "id": "ge937ao", "parent_id":
        "t1_ge92sk0", "depth": 1, "children": ["ge937ao", "ge98v0z"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge93rku",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "huntekah",
        "can_mod_post": false, "created_utc": 1606825422.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_12xfd6", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Part1 in O(n):\n\n    def part_1(numbers):\n        numbers.sort()\n        a=0\n        b=len(numbers)
        -1\n        sum_=numbers[a] + numbers[b]\n       while (sum_ != 2020):\n            if
        sum_ &gt; 2020:\n                b-=1\n            else:\n                a+=1\n            sum_=numbers[a]
        + numbers[b]\n            if a&gt;b:\n                print(\"oops\")\n                break\n        print(numbers[a]
        * numbers[b])\n\nPart2 in O(n^2), not sure if it always finds the right solution,
        but for this dataset it does\n\n\n    def part_2(numbers):\n        numbers.sort()\n        a=0\n        b=len(numbers)
        -1\n        c=0\n        sum_=numbers[a] + numbers[b] + numbers[c]\n        while
        (sum_ != 2020):\n            for c in range(a,b):\n                sum_=numbers[a]
        + numbers[b] + numbers[c]\n                if sum_ == 2020:\n                    break\n    \n            if
        sum_ &gt; 2020:\n                b-=1\n            else:\n                a+=1\n            sum_=numbers[a]
        + numbers[b] + numbers[c]\n            if a&gt;b:\n                print(\"oops\")\n                break\n        print(numbers[a]
        * numbers[b] * numbers[c])", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Part1
        in O(n):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def part_1(numbers):\n    numbers.sort()\n    a=0\n    b=len(numbers)
        -1\n    sum_=numbers[a] + numbers[b]\n   while (sum_ != 2020):\n        if
        sum_ &amp;gt; 2020:\n            b-=1\n        else:\n            a+=1\n        sum_=numbers[a]
        + numbers[b]\n        if a&amp;gt;b:\n            print(&amp;quot;oops&amp;quot;)\n            break\n    print(numbers[a]
        * numbers[b])\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part2 in O(n&lt;sup&gt;2),&lt;/sup&gt;
        not sure if it always finds the right solution, but for this dataset it does&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        part_2(numbers):\n    numbers.sort()\n    a=0\n    b=len(numbers) -1\n    c=0\n    sum_=numbers[a]
        + numbers[b] + numbers[c]\n    while (sum_ != 2020):\n        for c in range(a,b):\n            sum_=numbers[a]
        + numbers[b] + numbers[c]\n            if sum_ == 2020:\n                break\n\n        if
        sum_ &amp;gt; 2020:\n            b-=1\n        else:\n            a+=1\n        sum_=numbers[a]
        + numbers[b] + numbers[c]\n        if a&amp;gt;b:\n            print(&amp;quot;oops&amp;quot;)\n            break\n    print(numbers[a]
        * numbers[b] * numbers[c])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge93rku/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge93rku", "created": 1606825422.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 5, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "ge9430a", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "risboo6909", "can_mod_post": false, "created_utc":
        1606825703.0, "send_replies": true, "parent_id": "t1_ge93rku", "score": 5,
        "author_fullname": "t2_cvyxl", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "Nice solution, but this
        is not O(n), because you are sorting at the beginning of your function.",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nice solution, but this
        is not O(n), because you are sorting at the beginning of your function.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9430a/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9430a", "created":
        1606825703.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_ge9er6u", "id": "ge9er6u", "parent_id":
        "t1_ge9430a", "depth": 2, "children": ["ge9er6u"]}}, {"kind": "more", "data":
        {"count": 1, "name": "t1_ge93s4o", "id": "ge93s4o", "parent_id": "t1_ge93rku",
        "depth": 1, "children": ["ge93s4o"]}}, {"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "removal_reason":
        null, "link_id": "t3_k4e4lm", "author_flair_template_id": null, "likes": null,
        "replies": "", "user_reports": [], "saved": false, "id": "ge95sr1", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "[deleted]", "can_mod_post": false, "send_replies":
        true, "parent_id": "t3_k4e4lm", "score": 2, "approved_by": null, "mod_note":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "PowerShell\n\nThough
        this works, I don''t think it''s the best way to solve this solution found
        it a little slow for part 2.\n\nPart1: \n        \n    $input = Get-Content(\".\\input.txt\")\n            \n    foreach
        ($one in $input)\n    {\n        foreach ($two in $input)\n        {\n            if
        ($two -ne $one)\n            {\n                $counted = [int]$two + [int]$one\n                if
        ($counted -eq \"2020\")\n                {\n                    $results =
        [int]$two * [int]$one\n                    Write-Host \"results: $results\"\n                }\n            }\n        }\n    }    \n\nPart
        2:\n\n    $input = Get-Content(\".\\input.txt\")\n    \n    foreach ($one
        in $input)\n    {\n        foreach ($two in $one)\n        {\n            foreach
        ($three in $one)\n            {\n                if ($two -ne $one -and $three
        -ne $input -and $three -ne $two)\n                {\n                    $q
        = [int]$two + [int]$one + [int]$three\n                    if ($q -eq \"2020\")\n                    {\n                        $results
        = [int]$two * [int]$one * [int]$three\n                        Write-Host
        \"results: $results\"\n                    }\n                }\n            }\n        }\n    }",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_ge95sr1",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;PowerShell&lt;/p&gt;\n\n&lt;p&gt;Though
        this works, I don&amp;#39;t think it&amp;#39;s the best way to solve this
        solution found it a little slow for part 2.&lt;/p&gt;\n\n&lt;p&gt;Part1: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$input
        = Get-Content(&amp;quot;.\\input.txt&amp;quot;)\n\nforeach ($one in $input)\n{\n    foreach
        ($two in $input)\n    {\n        if ($two -ne $one)\n        {\n            $counted
        = [int]$two + [int]$one\n            if ($counted -eq &amp;quot;2020&amp;quot;)\n            {\n                $results
        = [int]$two * [int]$one\n                Write-Host &amp;quot;results: $results&amp;quot;\n            }\n        }\n    }\n}    \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$input = Get-Content(&amp;quot;.\\input.txt&amp;quot;)\n\nforeach
        ($one in $input)\n{\n    foreach ($two in $one)\n    {\n        foreach ($three
        in $one)\n        {\n            if ($two -ne $one -and $three -ne $input
        -and $three -ne $two)\n            {\n                $q = [int]$two + [int]$one
        + [int]$three\n                if ($q -eq &amp;quot;2020&amp;quot;)\n                {\n                    $results
        = [int]$two * [int]$one * [int]$three\n                    Write-Host &amp;quot;results:
        $results&amp;quot;\n                }\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge95sr1/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606827137.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606827137.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind":
        "more", "data": {"count": 5, "name": "t1_ge9kvqp", "id": "ge9kvqp", "parent_id":
        "t1_ge95sr1", "depth": 1, "children": ["ge9kvqp", "ge9hqlv"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606828311.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge96u2q", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "dgJenkins",
        "can_mod_post": false, "created_utc": 1606827944.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_exlqy", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "[**F#**](https://github.com/alexchro93/AdventOfCode/blob/master/2020/F%23/AdventOfCode/AdventOfCode/DayOne.fs)\n\nTrying
        to switch from C# and write more F#.  Here''s today''s solutions.\n\n        let
        One (x: int list) : int =\n            let res = [ for i in x do\n                        for
        j in x do\n                        if i + j = 2020 then i * j]\n            res.Head\n\n&amp;#x200B;\n\n        let
        Two (x: int list) : int =\n            let res = [ for i in x do\n                        for
        j in x do\n                        for z in x do\n                        if
        i + j + z = 2020 then i * j * z ]\n            res.Head", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/alexchro93/AdventOfCode/blob/master/2020/F%23/AdventOfCode/AdventOfCode/DayOne.fs\"&gt;&lt;strong&gt;F#&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Trying
        to switch from C# and write more F#.  Here&amp;#39;s today&amp;#39;s solutions.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    let
        One (x: int list) : int =\n        let res = [ for i in x do\n                    for
        j in x do\n                    if i + j = 2020 then i * j]\n        res.Head\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    let
        Two (x: int list) : int =\n        let res = [ for i in x do\n                    for
        j in x do\n                    for z in x do\n                    if i + j
        + z = 2020 then i * j * z ]\n        res.Head\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge96u2q/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge96u2q", "created":
        1606827944.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_gea7ei9", "id": "gea7ei9", "parent_id":
        "t1_ge96u2q", "depth": 1, "children": ["gea7ei9", "ge9jgfk"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge988ei",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "erragoa",
        "can_mod_post": false, "created_utc": 1606828965.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_qrqfizk", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python:\n\n    def find2020(data,num_elements):\n        return functools.reduce(operator.mul,
        next(filter(lambda x: sum(x) == 2020, itertools.combinations(data,num_elements))),1)\n    \n    def
        part1(data):\n        return find2020(data,2)\n    \n    def part2(data):\n        return
        find2020(data,3)\n    \n    ex_path     = os.path.dirname(os.path.abspath(__file__))\n    with
        open(os.path.join(ex_path,\"day1.txt\")) as f:\n        data = [int(i) for
        i in f.read().splitlines()]   \n        print(f\"Part 1: {part1(data)}\")\n        print(f\"Part
        2: {part2(data)}\")", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        find2020(data,num_elements):\n    return functools.reduce(operator.mul, next(filter(lambda
        x: sum(x) == 2020, itertools.combinations(data,num_elements))),1)\n\ndef part1(data):\n    return
        find2020(data,2)\n\ndef part2(data):\n    return find2020(data,3)\n\nex_path     =
        os.path.dirname(os.path.abspath(__file__))\nwith open(os.path.join(ex_path,&amp;quot;day1.txt&amp;quot;))
        as f:\n    data = [int(i) for i in f.read().splitlines()]   \n    print(f&amp;quot;Part
        1: {part1(data)}&amp;quot;)\n    print(f&amp;quot;Part 2: {part2(data)}&amp;quot;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge988ei/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge988ei", "created":
        1606828965.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge99xa3",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "TryMark8",
        "can_mod_post": false, "created_utc": 1606830121.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_7xhdsec8", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "sqlite:\n\n&gt;.mode csv  \n&gt;  \n&gt;.import input input  \n&gt;  \n&gt;select
        a,b,c, a\\*b\\*c from (select a, b, c from (select i a from input), (select
        i b from input), (select i c from input)) where a+b+c\u00a0=2020;", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;sqlite:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;.mode
        csv  &lt;/p&gt;\n\n&lt;p&gt;.import input input  &lt;/p&gt;\n\n&lt;p&gt;select
        a,b,c, a*b*c from (select a, b, c from (select i a from input), (select i
        b from input), (select i c from input)) where a+b+c\u00a0=2020;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge99xa3/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge99xa3", "created":
        1606830121.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606830672.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9adsg", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ratz-732",
        "can_mod_post": false, "created_utc": 1606830416.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_rk1dd", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Python**\n\n```py\n# Part 1\ndef find_pair(data, sum=2020):\n    for datum
        in data:\n        key = sum - datum\n        if key in data:\n            return
        (datum, key)\n    return -1\n\n# Part 2\ndef find_triplet(data):\n    for
        datum in data:\n        remainder = 2020 - datum\n        pair = find_pair(data,
        remainder)\n        if pair != -1 and pair[0] != pair[1] and datum not in
        pair:\n            return (datum, pair[0], pair[1])\n    return -1\n```\n\nI
        removed the main function which just read the input from a text file and called
        the above functions. Overall, this solution is very simple and definitely
        not the most efficient.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;```py&lt;/p&gt;\n\n&lt;h1&gt;Part
        1&lt;/h1&gt;\n\n&lt;p&gt;def find_pair(data, sum=2020):\n    for datum in
        data:\n        key = sum - datum\n        if key in data:\n            return
        (datum, key)\n    return -1&lt;/p&gt;\n\n&lt;h1&gt;Part 2&lt;/h1&gt;\n\n&lt;p&gt;def
        find_triplet(data):\n    for datum in data:\n        remainder = 2020 - datum\n        pair
        = find_pair(data, remainder)\n        if pair != -1 and pair[0] != pair[1]
        and datum not in pair:\n            return (datum, pair[0], pair[1])\n    return
        -1\n```&lt;/p&gt;\n\n&lt;p&gt;I removed the main function which just read
        the input from a text file and called the above functions. Overall, this solution
        is very simple and definitely not the most efficient.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9adsg/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9adsg", "created":
        1606830416.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 4, "name": "t1_geag74j", "id": "geag74j", "parent_id":
        "t1_ge9adsg", "depth": 1, "children": ["geag74j", "ge9aegw", "ge9fsfu"]}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9c2ap", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "girafon",
        "can_mod_post": false, "created_utc": 1606831486.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_bc71r", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Elixir : I''m new to the language and trying to learn it, so don''t hesitate
        to comment !\n\n    defmodule Day01 do\n      @input File.read!(\"01.txt\")\n    \n      def
        parse(input) do\n        input\n        |&gt; String.split(\"\\n\", trim:
        true)\n        |&gt; Stream.map(&amp;String.to_integer(&amp;1))\n      end\n    \n      def
        two_sum([a|_], [c|_], target) when a + c == target do\n        a * c\n      end\n    \n      def
        two_sum([a|b], [c|_]=second, target) when a + c &lt; target do\n        two_sum(b,
        second, target)\n      end\n    \n      def two_sum([a|_]=first, [c|d], target)
        when a + c &gt; target do\n        two_sum(first, d, target)\n      end\n    \n      def
        two_sum([], _, _), do: nil\n      def two_sum(_, [], _), do: nil\n    \n      def
        two_sum(l, target) do\n        two_sum(l, Enum.reverse(l), target)\n      end\n    \n      def
        part1 do\n        @input\n        |&gt; parse\n        |&gt; Enum.sort\n        |&gt;
        two_sum(2020)\n        |&gt; IO.inspect\n      end\n    \n      def three_sum([head|tail],
        target) do\n        case two_sum(tail, Enum.reverse(tail), target - head)
        do\n          nil -&gt; three_sum(tail, target)\n          ab -&gt; ab * head\n        end\n      end\n    \n      def
        part2 do\n        @input\n        |&gt; parse\n        |&gt; Enum.sort\n        |&gt;
        three_sum(2020)\n        |&gt; IO.inspect\n      end\n    \n    end\n    \n    Day01.part1\n    Day01.part2",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Elixir : I&amp;#39;m
        new to the language and trying to learn it, so don&amp;#39;t hesitate to comment
        !&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;defmodule Day01 do\n  @input File.read!(&amp;quot;01.txt&amp;quot;)\n\n  def
        parse(input) do\n    input\n    |&amp;gt; String.split(&amp;quot;\\n&amp;quot;,
        trim: true)\n    |&amp;gt; Stream.map(&amp;amp;String.to_integer(&amp;amp;1))\n  end\n\n  def
        two_sum([a|_], [c|_], target) when a + c == target do\n    a * c\n  end\n\n  def
        two_sum([a|b], [c|_]=second, target) when a + c &amp;lt; target do\n    two_sum(b,
        second, target)\n  end\n\n  def two_sum([a|_]=first, [c|d], target) when a
        + c &amp;gt; target do\n    two_sum(first, d, target)\n  end\n\n  def two_sum([],
        _, _), do: nil\n  def two_sum(_, [], _), do: nil\n\n  def two_sum(l, target)
        do\n    two_sum(l, Enum.reverse(l), target)\n  end\n\n  def part1 do\n    @input\n    |&amp;gt;
        parse\n    |&amp;gt; Enum.sort\n    |&amp;gt; two_sum(2020)\n    |&amp;gt;
        IO.inspect\n  end\n\n  def three_sum([head|tail], target) do\n    case two_sum(tail,
        Enum.reverse(tail), target - head) do\n      nil -&amp;gt; three_sum(tail,
        target)\n      ab -&amp;gt; ab * head\n    end\n  end\n\n  def part2 do\n    @input\n    |&amp;gt;
        parse\n    |&amp;gt; Enum.sort\n    |&amp;gt; three_sum(2020)\n    |&amp;gt;
        IO.inspect\n  end\n\nend\n\nDay01.part1\nDay01.part2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9c2ap/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9c2ap", "created":
        1606831486.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_gea9vs3", "id": "gea9vs3", "parent_id":
        "t1_ge9c2ap", "depth": 1, "children": ["gea9vs3"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606837523.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9d2dm", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "oymamyo",
        "can_mod_post": false, "created_utc": 1606832101.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_3g1me2gi", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "C++\n\n    std::string Day_01::part_one()\n    {\n        for (size_t i =
        0; i &lt; input.size() - 1; i++) {\n            for (size_t j = i + 1; j &lt;
        input.size(); j++) {\n                if (input[i] + input[j] == 2020) {\n                    return
        std::to_string(input[i] * input[j]);\n                }\n            }\n        }\n        return
        \"No result\";\n    }\n    \n    std::string Day_01::part_two()\n    {\n        for
        (size_t i = 0; i &lt; input.size() - 2; i++) {\n            for (size_t j
        = i + 1; j &lt; input.size() - 1; j++) {\n                for (size_t k =
        j + 1; k &lt; input.size(); k++) {\n                    if (input[i] + input[j]
        + input[k] == 2020) {\n                        return std::to_string(input[i]
        * input[j] * input[k]);\n                    }\n                }\n            }\n        }\n        return
        \"No result\";\n    }", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C++&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;std::string
        Day_01::part_one()\n{\n    for (size_t i = 0; i &amp;lt; input.size() - 1;
        i++) {\n        for (size_t j = i + 1; j &amp;lt; input.size(); j++) {\n            if
        (input[i] + input[j] == 2020) {\n                return std::to_string(input[i]
        * input[j]);\n            }\n        }\n    }\n    return &amp;quot;No result&amp;quot;;\n}\n\nstd::string
        Day_01::part_two()\n{\n    for (size_t i = 0; i &amp;lt; input.size() - 2;
        i++) {\n        for (size_t j = i + 1; j &amp;lt; input.size() - 1; j++) {\n            for
        (size_t k = j + 1; k &amp;lt; input.size(); k++) {\n                if (input[i]
        + input[j] + input[k] == 2020) {\n                    return std::to_string(input[i]
        * input[j] * input[k]);\n                }\n            }\n        }\n    }\n    return
        &amp;quot;No result&amp;quot;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9d2dm/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9d2dm", "created":
        1606832101.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_ge9gyut", "id": "ge9gyut", "parent_id":
        "t1_ge9d2dm", "depth": 1, "children": ["ge9gyut"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606835557.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9i0tt", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "e_blake",
        "can_mod_post": false, "created_utc": 1606834927.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_4tezwlii", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**m4**\n\nSolved with a naive cubic loop, but skipping the inner loop when
        either of the first two numbers is 4 digits (yes, that''s not strictly correct
        unless you assume no puzzle inputs have a 1- or 2-digit line, because it won''t
        find 1001+1002+17).  m4 is annoying in that it is easier to write the inner
        loop from 1 to n than it is from i+1 to n, which means the loop makes 40,000
        comparisons instead of 19,900 for part 1.\n\nThe complexity of loop iteration
        matters: on my machine with GNU m4, ''m4 day1.m4'' takes 0.4s, while ''m4
        -G day1.m4'' takes 2.6s, because of the difference between O(n) and O(n\\^2)
        loop iteration on top of my O(n\\^3) looping.\n\nMy solution requires [common.m4](https://topaz.github.io/paste/#XQAAAQDECAAAAAAAAAAyGksy5FB9TGMxsNq5JQAuJRjP6PqEkC20GpAXwA97ruAshKbiUbgkbJMTg2qZdSBorb0CU52peNLruV4DEEJxF+HvxC/YF33OpDntnpU/PjnGXx7XU7ak4MsmWu8R7h7d5az2JXxElnsepG8yPyu+0WZ90BG9yXphbwOWA/m5AWEFSOL8TRZX4fyGNl6ZYbRxX0MwtzrmwTP3ZCwLSOKkvD2vMQFsbK0Pv9CzPhFNXMUbWnRV20jWLjL9qz2dDsFDBwhxgWIilEl91uswxrT4Czc+LRU3VuhNIo2S98VW0jArrVdv4HrsLhWkzx4z/UV3xnqJwPXcZRUiLtf3VRIzq62Pe+2jE3O+721Az9rfRa/fHtlANbmvslzMUCyU7cDoOKSMXBDF/06/PpMvs6vxaL5aJVYqJP4yz+R2M35hoNnGiZTNNMVEFTdnxnaE/KcJteBbiuVMpdfUswHQi4Kqsj3sInh7lyE+d50gGKtHOeWL5lMK7WXz4NElnzYWleBSN/HTOdsz0T2gnd25MADxNAVX8xQmagh2MymZ2sKDBw//WiNB0sWf5VYC5/TKKH3D6K/IOrIfWn6FZLKxlITFEp3VWKNuyF0xczNJufJdzSqd0hgdyryVzbn0so0U5NMN16jFF6IhqzGbAwwv7k8sts0OCgnCFBEhYVshIpsORjEJk4CnDgc9VUqvZtfIFPQ5Q2v7IR3sbPurex1IIUd2Nm1V7/GFN+r0im24aEOG6XpdqrPdF6pDZ4HwvNByqOEdpcObPXxlwfPFYIhwyDHGZCvxrFRgGEEFtfVQ7UVjfPJzWtrcZuGx8M3B1zw2xvgpHIWEHdqEF6Y6/6eFj2hLm8UXNeLNrJy1IC2sHlS8SRIifQvLkrOLLOOPtDK6DUPQrW3c0Rfmy9Td5gQw0+fZRZ5MBEG9+dTlinXtwExpHScKQk6ARk7Fb8fBYAnmh7/bq+471zAZGJ7dwNd5qE/63VhDz7mXLuXtGN7rSuRYIXvpkubLBZptSKZrkzSDJWHIZM8Fyrk0EZQFDujROjrpaYbzz2PtIRLGOe4K36woKouFQWf9d6tPXHKkvN/bAnv1uNw4BeN+uchkIcFiJ102aAL7Th6PxZSrvdKzOvDhTC1x2jO/s0aGkoHQhH6NOZZSV2mHheyA87MIcAYTPQ0ue8tdBI/Eul6ICEP0l3Wq6QniUygn604D0T1l8TA/Ip/rKtl7aRELRErMWKj1U2wIluzj1YKDlCv6EzqK2eC/tUw4cEWlT7E5BfukiU/VUQI35MQaxt5lA6mmn00K0UdG73PA3C/h7pCTmfVwQEVlkPIf5Wj/+/dJIg==)
        that I used unchanged from 2019, plus today''s solution [day1.m4](https://topaz.github.io/paste/#XQAAAQBnAgAAAAAAAAAyGksy5FB9TGMxsNq5JQAuJRjP6PqEkC20GpBbonDYuA0BTjRPXcVxlEXNtz1IwpMqcBadF5ZzZxsPbO0TjiFbV7OR7qIswfS/KNhx6uJ1GtnKtFJNIDGSZ69aquvSPkAlLO/rgpen1A/TibN9AA0R4U0Ws6gs2hZ3NqomPH/sNfZolv8ItqdbehDN9TwLsUlI1GS2l9FV5IY4GApj/KUXrhmf+pcR5wzdFRddx87f6G+yDBfjByRqyxxzbZu8mjnt5yqQk6xeDEfFAx7Q84npKz35EooMbllcVfAGjqObZX/n9HmaBg1d8yoCO9Pi7/KPXzvfN9rC0j/+FbnbzgnPldUSEI5VtL/Fkp/xcBjCwCSpQfj9hfqMW0Ht/rWUIc2tGaaZTVQGuO6Q6hMyh4Q6hJn5dxVYamYMO5Jyd9DDhC21BkyFw18KTvZw/ndHZg==),
        run as ''m4 \\[-Dfile=day1.input\\] day1.m4''. The core code is fairly short:\n\n    define(`list'',
        quote(translit(include(defn(`file'')), nl, `,'')2021))\n    define(`inner'',
        `ifelse($1, $3, `'', $2, $3, `'', eval($1 + $2 + $3), 2020,\n      `define(`part2'',
        eval($1 * $2 * $3))'')'')\n    define(`do'', `ifelse(eval($1 &gt;= $2), 1,
        `'', eval($1 + $2), 2020,\n      `define(`part1'', eval($1 * $2))'', len($2),
        3,\n      `_foreach(`inner($1, $2,'', `)'', list)'')'')\n    define(`outer'',
        `_foreach(`do($1,'', `)'', list)'')\n    foreach(`outer'', list)", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;m4&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Solved
        with a naive cubic loop, but skipping the inner loop when either of the first
        two numbers is 4 digits (yes, that&amp;#39;s not strictly correct unless you
        assume no puzzle inputs have a 1- or 2-digit line, because it won&amp;#39;t
        find 1001+1002+17).  m4 is annoying in that it is easier to write the inner
        loop from 1 to n than it is from i+1 to n, which means the loop makes 40,000
        comparisons instead of 19,900 for part 1.&lt;/p&gt;\n\n&lt;p&gt;The complexity
        of loop iteration matters: on my machine with GNU m4, &amp;#39;m4 day1.m4&amp;#39;
        takes 0.4s, while &amp;#39;m4 -G day1.m4&amp;#39; takes 2.6s, because of the
        difference between O(n) and O(n^2) loop iteration on top of my O(n^3) looping.&lt;/p&gt;\n\n&lt;p&gt;My
        solution requires &lt;a href=\"https://topaz.github.io/paste/#XQAAAQDECAAAAAAAAAAyGksy5FB9TGMxsNq5JQAuJRjP6PqEkC20GpAXwA97ruAshKbiUbgkbJMTg2qZdSBorb0CU52peNLruV4DEEJxF+HvxC/YF33OpDntnpU/PjnGXx7XU7ak4MsmWu8R7h7d5az2JXxElnsepG8yPyu+0WZ90BG9yXphbwOWA/m5AWEFSOL8TRZX4fyGNl6ZYbRxX0MwtzrmwTP3ZCwLSOKkvD2vMQFsbK0Pv9CzPhFNXMUbWnRV20jWLjL9qz2dDsFDBwhxgWIilEl91uswxrT4Czc+LRU3VuhNIo2S98VW0jArrVdv4HrsLhWkzx4z/UV3xnqJwPXcZRUiLtf3VRIzq62Pe+2jE3O+721Az9rfRa/fHtlANbmvslzMUCyU7cDoOKSMXBDF/06/PpMvs6vxaL5aJVYqJP4yz+R2M35hoNnGiZTNNMVEFTdnxnaE/KcJteBbiuVMpdfUswHQi4Kqsj3sInh7lyE+d50gGKtHOeWL5lMK7WXz4NElnzYWleBSN/HTOdsz0T2gnd25MADxNAVX8xQmagh2MymZ2sKDBw//WiNB0sWf5VYC5/TKKH3D6K/IOrIfWn6FZLKxlITFEp3VWKNuyF0xczNJufJdzSqd0hgdyryVzbn0so0U5NMN16jFF6IhqzGbAwwv7k8sts0OCgnCFBEhYVshIpsORjEJk4CnDgc9VUqvZtfIFPQ5Q2v7IR3sbPurex1IIUd2Nm1V7/GFN+r0im24aEOG6XpdqrPdF6pDZ4HwvNByqOEdpcObPXxlwfPFYIhwyDHGZCvxrFRgGEEFtfVQ7UVjfPJzWtrcZuGx8M3B1zw2xvgpHIWEHdqEF6Y6/6eFj2hLm8UXNeLNrJy1IC2sHlS8SRIifQvLkrOLLOOPtDK6DUPQrW3c0Rfmy9Td5gQw0+fZRZ5MBEG9+dTlinXtwExpHScKQk6ARk7Fb8fBYAnmh7/bq+471zAZGJ7dwNd5qE/63VhDz7mXLuXtGN7rSuRYIXvpkubLBZptSKZrkzSDJWHIZM8Fyrk0EZQFDujROjrpaYbzz2PtIRLGOe4K36woKouFQWf9d6tPXHKkvN/bAnv1uNw4BeN+uchkIcFiJ102aAL7Th6PxZSrvdKzOvDhTC1x2jO/s0aGkoHQhH6NOZZSV2mHheyA87MIcAYTPQ0ue8tdBI/Eul6ICEP0l3Wq6QniUygn604D0T1l8TA/Ip/rKtl7aRELRErMWKj1U2wIluzj1YKDlCv6EzqK2eC/tUw4cEWlT7E5BfukiU/VUQI35MQaxt5lA6mmn00K0UdG73PA3C/h7pCTmfVwQEVlkPIf5Wj/+/dJIg==\"&gt;common.m4&lt;/a&gt;
        that I used unchanged from 2019, plus today&amp;#39;s solution &lt;a href=\"https://topaz.github.io/paste/#XQAAAQBnAgAAAAAAAAAyGksy5FB9TGMxsNq5JQAuJRjP6PqEkC20GpBbonDYuA0BTjRPXcVxlEXNtz1IwpMqcBadF5ZzZxsPbO0TjiFbV7OR7qIswfS/KNhx6uJ1GtnKtFJNIDGSZ69aquvSPkAlLO/rgpen1A/TibN9AA0R4U0Ws6gs2hZ3NqomPH/sNfZolv8ItqdbehDN9TwLsUlI1GS2l9FV5IY4GApj/KUXrhmf+pcR5wzdFRddx87f6G+yDBfjByRqyxxzbZu8mjnt5yqQk6xeDEfFAx7Q84npKz35EooMbllcVfAGjqObZX/n9HmaBg1d8yoCO9Pi7/KPXzvfN9rC0j/+FbnbzgnPldUSEI5VtL/Fkp/xcBjCwCSpQfj9hfqMW0Ht/rWUIc2tGaaZTVQGuO6Q6hMyh4Q6hJn5dxVYamYMO5Jyd9DDhC21BkyFw18KTvZw/ndHZg==\"&gt;day1.m4&lt;/a&gt;,
        run as &amp;#39;m4 [-Dfile=day1.input] day1.m4&amp;#39;. The core code is
        fairly short:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;define(`list&amp;#39;, quote(translit(include(defn(`file&amp;#39;)),
        nl, `,&amp;#39;)2021))\ndefine(`inner&amp;#39;, `ifelse($1, $3, `&amp;#39;,
        $2, $3, `&amp;#39;, eval($1 + $2 + $3), 2020,\n  `define(`part2&amp;#39;,
        eval($1 * $2 * $3))&amp;#39;)&amp;#39;)\ndefine(`do&amp;#39;, `ifelse(eval($1
        &amp;gt;= $2), 1, `&amp;#39;, eval($1 + $2), 2020,\n  `define(`part1&amp;#39;,
        eval($1 * $2))&amp;#39;, len($2), 3,\n  `_foreach(`inner($1, $2,&amp;#39;,
        `)&amp;#39;, list)&amp;#39;)&amp;#39;)\ndefine(`outer&amp;#39;, `_foreach(`do($1,&amp;#39;,
        `)&amp;#39;, list)&amp;#39;)\nforeach(`outer&amp;#39;, list)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9i0tt/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9i0tt", "created":
        1606834927.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_gf0aoiw", "id": "gf0aoiw", "parent_id":
        "t1_ge9i0tt", "depth": 1, "children": ["gf0aoiw", "ge9re3i"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606835209.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9i56x", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "wilthenry",
        "can_mod_post": false, "created_utc": 1606834993.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_3ca6bgcv", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**C++** Code from a freshman in College\n\n    /*\n     * Part One for the
        day\n    */\n    int partOne() {\n        int ret;\n        for(int i = 0;
        i &lt; size; i++){\n            for(int j = i+1; j &lt; size; j++){\n                if(x[i]
        + x[j] == 2020){\n                    ret = x[i] * x[j];\n                }\n            }\n        }\n        return
        ret;\n    }\n    \n    /*\n     * Part Twp for the day\n    */\n    int partTwo()
        {\n        int ret;\n        for(int i = 0; i &lt;= size - 2; i++){\n            for(int
        j = i+1; j &lt;= size - 1; j++){\n                for(int k = j+1; k &lt;=
        size; k++){\n                    if(x[i] + x[j] + x[k] == 2020){\n                        ret
        = x[i] * x[j] * x[k];\n                    }\n                }\n            }\n        }\n        return
        ret;\n    }\n\nProbably could have been simpler\n\n[https://github.com/hwilt/AdventOfCode\\_2020/blob/main/day1.cpp](https://github.com/hwilt/AdventOfCode_2020/blob/main/day1.cpp)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;C++&lt;/strong&gt;
        Code from a freshman in College&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;/*\n *
        Part One for the day\n*/\nint partOne() {\n    int ret;\n    for(int i = 0;
        i &amp;lt; size; i++){\n        for(int j = i+1; j &amp;lt; size; j++){\n            if(x[i]
        + x[j] == 2020){\n                ret = x[i] * x[j];\n            }\n        }\n    }\n    return
        ret;\n}\n\n/*\n * Part Twp for the day\n*/\nint partTwo() {\n    int ret;\n    for(int
        i = 0; i &amp;lt;= size - 2; i++){\n        for(int j = i+1; j &amp;lt;= size
        - 1; j++){\n            for(int k = j+1; k &amp;lt;= size; k++){\n                if(x[i]
        + x[j] + x[k] == 2020){\n                    ret = x[i] * x[j] * x[k];\n                }\n            }\n        }\n    }\n    return
        ret;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Probably could have been simpler&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/hwilt/AdventOfCode_2020/blob/main/day1.cpp\"&gt;https://github.com/hwilt/AdventOfCode_2020/blob/main/day1.cpp&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9i56x/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9i56x", "created":
        1606834993.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_geaffwj", "id": "geaffwj", "parent_id":
        "t1_ge9i56x", "depth": 1, "children": ["geaffwj", "geafbkx"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606851900.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9ic0a", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "fortiZde1337",
        "can_mod_post": false, "created_utc": 1606835094.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_586a525a", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "    // My simple JavaScript (JS) version\n    // Get Inputs\n    import fs
        from ''fs'';\n    const buffer = fs.readFileSync(`${__dirname}/day1.txt`);\n    const
        inputString = buffer.toString().split(''\\n'');\n    const input = inputString.map((elem)
        =&gt; parseInt(elem));\n    \n    const findSumPair = (inputs, sumToFind =
        2020) =&gt; {\n      for (let i of input) {\n        let match = input.indexOf(sumToFind
        - Number(i));\n        if (match &gt; -1) {\n          return {\n            matches:
        [i, input[match]],\n            value: i * input[match],\n          };\n        }\n      }\n      return
        null;\n    };\n    \n    const findSumTripple = (inputs, sumToFind = 2020)
        =&gt; {\n      for (let i of input) {\n        const pair = findSumPair(inputs,
        sumToFind - Number(i));\n        if (pair &amp;&amp; pair.matches[0] != pair.matches[1]
        &amp;&amp; !pair.matches.includes(i)) {\n          return {\n            matches:
        [i, ...pair.matches],\n            value: pair.matches.reduce((acc, cur) =&gt;
        acc * cur, i),\n          };\n        }\n      }\n    };\n    \n    findSumPair(input);
        //?\n    findSumTripple(input); //?", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;// My simple JavaScript (JS) version\n//
        Get Inputs\nimport fs from &amp;#39;fs&amp;#39;;\nconst buffer = fs.readFileSync(`${__dirname}/day1.txt`);\nconst
        inputString = buffer.toString().split(&amp;#39;\\n&amp;#39;);\nconst input
        = inputString.map((elem) =&amp;gt; parseInt(elem));\n\nconst findSumPair =
        (inputs, sumToFind = 2020) =&amp;gt; {\n  for (let i of input) {\n    let
        match = input.indexOf(sumToFind - Number(i));\n    if (match &amp;gt; -1)
        {\n      return {\n        matches: [i, input[match]],\n        value: i *
        input[match],\n      };\n    }\n  }\n  return null;\n};\n\nconst findSumTripple
        = (inputs, sumToFind = 2020) =&amp;gt; {\n  for (let i of input) {\n    const
        pair = findSumPair(inputs, sumToFind - Number(i));\n    if (pair &amp;amp;&amp;amp;
        pair.matches[0] != pair.matches[1] &amp;amp;&amp;amp; !pair.matches.includes(i))
        {\n      return {\n        matches: [i, ...pair.matches],\n        value:
        pair.matches.reduce((acc, cur) =&amp;gt; acc * cur, i),\n      };\n    }\n  }\n};\n\nfindSumPair(input);
        //?\nfindSumTripple(input); //?\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9ic0a/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9ic0a", "created":
        1606835094.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_geafcvd", "id": "geafcvd", "parent_id":
        "t1_ge9ic0a", "depth": 1, "children": ["geafcvd"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9k3gq",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "KamcaHorvat",
        "can_mod_post": false, "created_utc": 1606836017.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_2shmlpce", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Even though dumb loops does job just fine, you can improve performance by
        adding limits to values in outer loops. If sum of two values is 2020, that
        means that one of them is lower or equal to 1010. If sum of three values is
        2020, one value must lower or equal to 2020/3.\n\n&amp;#x200B;\n\nHere is
        my superfast Kotlin solution\n\n&amp;#x200B;\n\n    fun main() {\n        val
        s = getInputLines(2020, 1).map { it.toInt() }.sorted()\n    \n        println(s.filter
        { a -&gt; a &lt;= 2020 / 2 }\n            .flatMapIndexed { ai, a -&gt; s.filterIndexed
        { bi, b -&gt; bi &gt; ai &amp;&amp; a + b == 2020 }.map { b -&gt; a * b }
        }.first())\n    \n        println(s.filter { a -&gt; a &lt;= 2020 / 3 }\n            .flatMapIndexed
        { ai, a -&gt;\n                s.filterIndexed { bi, b -&gt; bi &gt; ai &amp;&amp;
        b &lt;= 2020 / 2 }.flatMapIndexed { bi, b -&gt;\n                    s.filterIndexed
        { ci, c -&gt; ci &gt; bi &amp;&amp; a + b + c == 2020 }.map { c -&gt; a *
        b * c }\n                }\n            }.first())\n    }", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Even though dumb loops does job just fine,
        you can improve performance by adding limits to values in outer loops. If
        sum of two values is 2020, that means that one of them is lower or equal to
        1010. If sum of three values is 2020, one value must lower or equal to 2020/3.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Here
        is my superfast Kotlin solution&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fun
        main() {\n    val s = getInputLines(2020, 1).map { it.toInt() }.sorted()\n\n    println(s.filter
        { a -&amp;gt; a &amp;lt;= 2020 / 2 }\n        .flatMapIndexed { ai, a -&amp;gt;
        s.filterIndexed { bi, b -&amp;gt; bi &amp;gt; ai &amp;amp;&amp;amp; a + b
        == 2020 }.map { b -&amp;gt; a * b } }.first())\n\n    println(s.filter { a
        -&amp;gt; a &amp;lt;= 2020 / 3 }\n        .flatMapIndexed { ai, a -&amp;gt;\n            s.filterIndexed
        { bi, b -&amp;gt; bi &amp;gt; ai &amp;amp;&amp;amp; b &amp;lt;= 2020 / 2 }.flatMapIndexed
        { bi, b -&amp;gt;\n                s.filterIndexed { ci, c -&amp;gt; ci &amp;gt;
        bi &amp;amp;&amp;amp; a + b + c == 2020 }.map { c -&amp;gt; a * b * c }\n            }\n        }.first())\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9k3gq/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9k3gq", "created":
        1606836017.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606859925.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9k6ig", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "wizards_tower",
        "can_mod_post": false, "created_utc": 1606836060.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_10cpsj", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Here''s a **C** [solution.](https://github.com/breakthatbass/advent_of_code2020/blob/main/day01/main.c)\n\ntheses
        are the steps:\n\n1. open file\n2. count the lines (used to allocate space
        for an array)\n3. load the numbers in an array (and convert them to ints as
        they go in)\n4. loop through the array with 2 loops (3 for part two) and check
        if the two elements add to 2020, if yes, multiply the elements\n5. that''s
        your answer!", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s
        a &lt;strong&gt;C&lt;/strong&gt; &lt;a href=\"https://github.com/breakthatbass/advent_of_code2020/blob/main/day01/main.c\"&gt;solution.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;theses
        are the steps:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;open file&lt;/li&gt;\n&lt;li&gt;count
        the lines (used to allocate space for an array)&lt;/li&gt;\n&lt;li&gt;load
        the numbers in an array (and convert them to ints as they go in)&lt;/li&gt;\n&lt;li&gt;loop
        through the array with 2 loops (3 for part two) and check if the two elements
        add to 2020, if yes, multiply the elements&lt;/li&gt;\n&lt;li&gt;that&amp;#39;s
        your answer!&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9k6ig/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9k6ig", "created":
        1606836060.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_ge9y04x", "id": "ge9y04x", "parent_id":
        "t1_ge9k6ig", "depth": 1, "children": ["ge9y04x"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9kr1i",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "w0ntfix",
        "can_mod_post": false, "created_utc": 1606836353.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_19rrs330", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Clojure:\n\n    (require ''[clojure.math.combinatorics :as comb])\n    (let
        [numbers (read-string (format \"[%s]\" (slurp \"1.txt\")))]\n    (-&gt;&gt;
        (comb/combinations numbers 3)\n        (filter #(= 2020 (apply + %)))\n        first\n        (apply
        *)))", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Clojure:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(require
        &amp;#39;[clojure.math.combinatorics :as comb])\n(let [numbers (read-string
        (format &amp;quot;[%s]&amp;quot; (slurp &amp;quot;1.txt&amp;quot;)))]\n(-&amp;gt;&amp;gt;
        (comb/combinations numbers 3)\n    (filter #(= 2020 (apply + %)))\n    first\n    (apply
        *)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9kr1i/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9kr1i", "created":
        1606836353.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 4, "name": "t1_ge9p6vy", "id": "ge9p6vy", "parent_id":
        "t1_ge9kr1i", "depth": 1, "children": ["ge9p6vy"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9lt7o",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "toi80QC",
        "can_mod_post": false, "created_utc": 1606836896.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_p4xawrj", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My stupid **JavaScript** solution, coded during a boring meeting:\n \n    let
        a = document.querySelector(''pre'').textContent.split(''\\n'').map(Number),\n        res1,
        res2;\n    \n    a.map(a1 =&gt; a.map(a2 =&gt; {\n      if (!res1 &amp;&amp;
        a1 + a2 === 2020) res1 = a1 * a2;\n      a.map(a3 =&gt; {\n        if (!res2
        &amp;&amp; a1 + a2 + a3 === 2020) {\n          res2 = a1 * a2 * a3;\n          return;\n        }\n      })\n    }));\n    \n    console.log(''solution
        1: '' + res1, ''solution 2: '' + res2);", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;My stupid &lt;strong&gt;JavaScript&lt;/strong&gt;
        solution, coded during a boring meeting:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let
        a = document.querySelector(&amp;#39;pre&amp;#39;).textContent.split(&amp;#39;\\n&amp;#39;).map(Number),\n    res1,
        res2;\n\na.map(a1 =&amp;gt; a.map(a2 =&amp;gt; {\n  if (!res1 &amp;amp;&amp;amp;
        a1 + a2 === 2020) res1 = a1 * a2;\n  a.map(a3 =&amp;gt; {\n    if (!res2 &amp;amp;&amp;amp;
        a1 + a2 + a3 === 2020) {\n      res2 = a1 * a2 * a3;\n      return;\n    }\n  })\n}));\n\nconsole.log(&amp;#39;solution
        1: &amp;#39; + res1, &amp;#39;solution 2: &amp;#39; + res2);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9lt7o/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9lt7o", "created":
        1606836896.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9t3sq",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Pizza_Fox",
        "can_mod_post": false, "created_utc": 1606840436.0, "send_replies": true,
        "parent_id": "t1_ge9lt7o", "score": 3, "author_fullname": "t2_179h4i", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Instead of using `Array.prototype.map`, use `Array.prototype.forEach`. This
        will do the same thing, but avoids creating a new array which should help
        memory usage on larger input sets.", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Instead of using &lt;code&gt;Array.prototype.map&lt;/code&gt;,
        use &lt;code&gt;Array.prototype.forEach&lt;/code&gt;. This will do the same
        thing, but avoids creating a new array which should help memory usage on larger
        input sets.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9t3sq/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9t3sq", "created":
        1606840436.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_gecmenz", "id": "gecmenz", "parent_id":
        "t1_ge9t3sq", "depth": 2, "children": ["gecmenz"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9m01l",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "crazazy",
        "can_mod_post": false, "created_utc": 1606836991.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_o4qwf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**[Nix](https://nixos.org):**\n\n    { input ? import ./input.nix, elements
        ? 3}:\n    let\n      inherit (builtins) elem elemAt foldl'' filter head map;\n      quickElem
        = f: xs: let i = elemAt xs; in f i;\n      fix = f: let x = f x; in x;\n      flatten
        = foldl'' (a: b: a ++ b) [];\n      sum = foldl'' (a: b: a + b) 0;\n      product
        = foldl'' (a: b: a * b) 1;\n      potentials = fix (f: left: potential:\n        let\n          new
        = \n            if potential == [] \n            then map (x: [x]) input\n            else
        flatten (map (x: map (y: x ++ [y]) input) potential);\n          newPotential
        = filter (x: sum x &lt;= 2020) new;\n        in\n        if left &lt;= 0 then
        potential else f (left - 1) newPotential) elements [];\n      goals = filter
        (x: sum x == 2020) potentials;\n      output = product (head goals);\n    in\n      {
        inherit goals output potentials; }\n\nworks for any number of    elements    ,
        this uses 3 elements as decribed in part 2\n\n*input.nix* is basically your
        input but with square brackets on the first and last line, like this \n \n    [\n    1721\n    979\n    366\n    299\n    675\n    1456\n    ]",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;&lt;a
        href=\"https://nixos.org\"&gt;Nix&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{
        input ? import ./input.nix, elements ? 3}:\nlet\n  inherit (builtins) elem
        elemAt foldl&amp;#39; filter head map;\n  quickElem = f: xs: let i = elemAt
        xs; in f i;\n  fix = f: let x = f x; in x;\n  flatten = foldl&amp;#39; (a:
        b: a ++ b) [];\n  sum = foldl&amp;#39; (a: b: a + b) 0;\n  product = foldl&amp;#39;
        (a: b: a * b) 1;\n  potentials = fix (f: left: potential:\n    let\n      new
        = \n        if potential == [] \n        then map (x: [x]) input\n        else
        flatten (map (x: map (y: x ++ [y]) input) potential);\n      newPotential
        = filter (x: sum x &amp;lt;= 2020) new;\n    in\n    if left &amp;lt;= 0 then
        potential else f (left - 1) newPotential) elements [];\n  goals = filter (x:
        sum x == 2020) potentials;\n  output = product (head goals);\nin\n  { inherit
        goals output potentials; }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;works for
        any number of    elements    , this uses 3 elements as decribed in part 2&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;input.nix&lt;/em&gt;
        is basically your input but with square brackets on the first and last line,
        like this &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[\n1721\n979\n366\n299\n675\n1456\n]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9m01l/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9m01l", "created":
        1606836991.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9m14j", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        2, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_ge9m14j", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9m14j/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606837006.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606837006.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge9unyg", "id": "ge9unyg", "parent_id":
        "t1_ge9m14j", "depth": 1, "children": ["ge9unyg"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9nvip",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "tejasbubane",
        "can_mod_post": false, "created_utc": 1606837916.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_z2t7t", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Here''s my Rust solution: [https://github.com/tejasbubane/adventofcode-2020/blob/master/src/day1.rs](https://github.com/tejasbubane/adventofcode-2020/blob/master/src/day1.rs)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s my Rust
        solution: &lt;a href=\"https://github.com/tejasbubane/adventofcode-2020/blob/master/src/day1.rs\"&gt;https://github.com/tejasbubane/adventofcode-2020/blob/master/src/day1.rs&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9nvip/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9nvip", "created":
        1606837916.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge9qs8a", "id": "ge9qs8a", "parent_id":
        "t1_ge9nvip", "depth": 1, "children": ["ge9qs8a"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606844806.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9qhcj", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "marquess_de_narquois",
        "can_mod_post": false, "created_utc": 1606839182.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_79dae0it", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My Python solution:\n\n    from itertools import permutations\n    import
        numpy as np\n\n    def multiply_n_summing_nums(nums, n, k):\n        for tup
        in permutations(nums, n):\n            if np.sum(tup) == k:\n                return
        np.prod(tup) \n\n    # part 1\n    multiply_n_summing_nums(inp, 2, 2020)\n    #
        part 2\n    multiply_n_summing_nums(inp, 3, 2020)\n\nIt''s slower than I''d
        like, presumably because of the use of permutations. EDIT: actually I should
        have used combinations, that''s a slightly embarrassing mistake.", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;My Python solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from
        itertools import permutations\nimport numpy as np\n\ndef multiply_n_summing_nums(nums,
        n, k):\n    for tup in permutations(nums, n):\n        if np.sum(tup) == k:\n            return
        np.prod(tup) \n\n# part 1\nmultiply_n_summing_nums(inp, 2, 2020)\n# part 2\nmultiply_n_summing_nums(inp,
        3, 2020)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&amp;#39;s slower than I&amp;#39;d
        like, presumably because of the use of permutations. EDIT: actually I should
        have used combinations, that&amp;#39;s a slightly embarrassing mistake.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9qhcj/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9qhcj", "created":
        1606839182.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_ge9xi9y", "id": "ge9xi9y", "parent_id":
        "t1_ge9qhcj", "depth": 1, "children": ["ge9xi9y"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606846369.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9qqq4", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "purplepinapples",
        "can_mod_post": false, "created_utc": 1606839309.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_i359s", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Nothing special; using a set to decrease lookup time a bit - Python\n    \n    import
        sys\n    \n    with open(sys.argv[1]) as f:\n        data = sorted(map(int,
        f.read().splitlines()))\n    \n    sdata = set(data)\n    slen = len(data)\n    \n    #
        a\n    for x in data:\n        target = 2020 - x\n        if target in sdata:\n            print(x
        * target)\n            break\n    \n    # b\n    for i in range(slen):\n        y
        = 2020 - data[i]\n        for j in range(slen - 1, i, -1):\n            target
        = y - data[j]\n            if target in sdata:\n                print(data[i]
        * data[j] * target)\n                raise SystemExit(0)\n\nedit: optimized
        a bit by sorting so I could iterate backwards for part b. reduces time by
        about 4ms, to 30ms", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nothing
        special; using a set to decrease lookup time a bit - Python&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        sys\n\nwith open(sys.argv[1]) as f:\n    data = sorted(map(int, f.read().splitlines()))\n\nsdata
        = set(data)\nslen = len(data)\n\n# a\nfor x in data:\n    target = 2020 -
        x\n    if target in sdata:\n        print(x * target)\n        break\n\n#
        b\nfor i in range(slen):\n    y = 2020 - data[i]\n    for j in range(slen
        - 1, i, -1):\n        target = y - data[j]\n        if target in sdata:\n            print(data[i]
        * data[j] * target)\n            raise SystemExit(0)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;edit:
        optimized a bit by sorting so I could iterate backwards for part b. reduces
        time by about 4ms, to 30ms&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9qqq4/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9qqq4", "created":
        1606839309.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9r1t7",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "michaelgallagher",
        "can_mod_post": false, "created_utc": 1606839458.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_9hr7h", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python solution for part 2 that doesn''t use `itertools.combinations`\n\n\n    def
        part2(data):\n        data.sort()\n        n = len(data)\n        for i in
        range(n - 2):\n            l, r = i+1, n-1\n            while l &lt; r:\n                a,
        b, c = data[i], data[l], data[r]\n                cur = a+b+c\n                if
        cur == 2020:\n                    return a * b * c\n                if cur-2020
        &gt; 0:\n                    r -= 1\n                else:\n                    l
        += 1", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python
        solution for part 2 that doesn&amp;#39;t use &lt;code&gt;itertools.combinations&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        part2(data):\n    data.sort()\n    n = len(data)\n    for i in range(n - 2):\n        l,
        r = i+1, n-1\n        while l &amp;lt; r:\n            a, b, c = data[i],
        data[l], data[r]\n            cur = a+b+c\n            if cur == 2020:\n                return
        a * b * c\n            if cur-2020 &amp;gt; 0:\n                r -= 1\n            else:\n                l
        += 1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": true,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9r1t7/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9r1t7", "created":
        1606839458.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9sd18",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ramendik",
        "can_mod_post": false, "created_utc": 1606840081.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_dd4yp", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python 3. Optimized a bit - there is no real need to iterate when you are
        looking for just one number, that is what \"in\" is for. \n\n    f=open(\"input1\")\n    inputlines=f.readlines()\n    numbers=[int(s)
        for s in inputlines]\n\n    # part 1\n\n    for n in numbers:\n        if
        (2020-n) in numbers:\n            print(n*(2020-n))\n            break\n\n    #
        part 2\n    found=False\n    for i in range(len(numbers)):\n        n1=numbers[i]\n        remain=2020-n1\n        for
        j in range(i+1,len(numbers)):\n            n2=numbers[j]\n            if (remain-n2)
        in numbers:\n                print(n1*n2*(remain-n2))\n                found=True\n                break\n        if
        found: break", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python
        3. Optimized a bit - there is no real need to iterate when you are looking
        for just one number, that is what &amp;quot;in&amp;quot; is for. &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;f=open(&amp;quot;input1&amp;quot;)\ninputlines=f.readlines()\nnumbers=[int(s)
        for s in inputlines]\n\n# part 1\n\nfor n in numbers:\n    if (2020-n) in
        numbers:\n        print(n*(2020-n))\n        break\n\n# part 2\nfound=False\nfor
        i in range(len(numbers)):\n    n1=numbers[i]\n    remain=2020-n1\n    for
        j in range(i+1,len(numbers)):\n        n2=numbers[j]\n        if (remain-n2)
        in numbers:\n            print(n1*n2*(remain-n2))\n            found=True\n            break\n    if
        found: break\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9sd18/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge9sd18", "created": 1606840081.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 2, "name":
        "t1_ge9xxij", "id": "ge9xxij", "parent_id": "t1_ge9sd18", "depth": 1, "children":
        ["ge9xxij"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9xr0x", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "HiShinUnit",
        "can_mod_post": false, "created_utc": 1606842667.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_isgwa", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "C++ Trying to get better at the language so any feedback is appreciated\n\n    \n    void
        day_one() {\n        std::vector&lt;int&gt; input = read_file_int(get_file_path(2020,
        1));\n        int min = *std::min_element(input.begin(), input.end());\n    \n        bool
        part_1 = false;\n        bool part_2 = false;\n    \n        for(const auto
        &amp;i : input) {\n            for(const auto &amp;j : input) {\n                if(i
        + j == 2020 &amp;&amp; !part_1) {\n                    std::cout &lt;&lt;
        \"Part 1: \" + std::to_string(i*j) &lt;&lt; std::endl;\n                    part_1
        = true;\n                }\n    \n                if(i + j + min &lt;= 2020
        &amp;&amp; !part_2) {\n                    // Try to find the third value
        that adds to 2020\n                    for(const auto &amp;k : input) {\n                        if(i
        + j + k == 2020) {\n                            std::cout &lt;&lt; \"Part
        2: \" + std::to_string(i*j*k) &lt;&lt; std::endl;\n                            part_2
        = true;\n                        }\n                    }\n                }\n            }\n    \n            if(part_1
        &amp;&amp; part_2) {\n                break;\n            }\n        }\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C++ Trying to get better
        at the language so any feedback is appreciated&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;void
        day_one() {\n    std::vector&amp;lt;int&amp;gt; input = read_file_int(get_file_path(2020,
        1));\n    int min = *std::min_element(input.begin(), input.end());\n\n    bool
        part_1 = false;\n    bool part_2 = false;\n\n    for(const auto &amp;amp;i
        : input) {\n        for(const auto &amp;amp;j : input) {\n            if(i
        + j == 2020 &amp;amp;&amp;amp; !part_1) {\n                std::cout &amp;lt;&amp;lt;
        &amp;quot;Part 1: &amp;quot; + std::to_string(i*j) &amp;lt;&amp;lt; std::endl;\n                part_1
        = true;\n            }\n\n            if(i + j + min &amp;lt;= 2020 &amp;amp;&amp;amp;
        !part_2) {\n                // Try to find the third value that adds to 2020\n                for(const
        auto &amp;amp;k : input) {\n                    if(i + j + k == 2020) {\n                        std::cout
        &amp;lt;&amp;lt; &amp;quot;Part 2: &amp;quot; + std::to_string(i*j*k) &amp;lt;&amp;lt;
        std::endl;\n                        part_2 = true;\n                    }\n                }\n            }\n        }\n\n        if(part_1
        &amp;amp;&amp;amp; part_2) {\n            break;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9xr0x/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9xr0x", "created":
        1606842667.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_geaw58v", "id": "geaw58v", "parent_id":
        "t1_ge9xr0x", "depth": 1, "children": ["geaw58v"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606845229.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gea2ml2", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "wishiwascooler",
        "can_mod_post": false, "created_utc": 1606844982.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_65l6d", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My Javascript solution, can someone tell me the time complexity? I think
        its O(n) for part one and O(n\\^2) for part two?\n\nAlso i could def clean
        this up but whatever it worked lol\n\n    import fs from ''fs'';\n    \n    fs.readFile(''./data.txt'',
        ''utf8'', (err, data)=&gt;{\n        const arrData = data.split(''\\r\\n'').map(num
        =&gt; Number(num));\n        //solution 2\n        main2(arrData);\n        //solution
        1\n        //main(arrData) \n    })\n    \n    const findDif = (num, target=2020)
        =&gt; {\n        let dif = target - num;\n        return dif;\n    }\n    \n    const
        main = (data, target=2020) =&gt; {\n        let dif = [];\n        data.forEach(val
        =&gt; {\n            if(dif.includes(val)) {\n                console.log(2020-target,
        val, findDif(val, target), (2020-target) * val * findDif(val, target))\n            }\n            dif.push(findDif(val,
        target))\n        })\n    }\n    \n    const main2 = (data) =&gt;{\n        data.forEach(val
        =&gt; {\n            main(data, 2020-val)\n        })\n    }", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;My Javascript solution, can someone tell
        me the time complexity? I think its O(n) for part one and O(n^2) for part
        two?&lt;/p&gt;\n\n&lt;p&gt;Also i could def clean this up but whatever it
        worked lol&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import fs from &amp;#39;fs&amp;#39;;\n\nfs.readFile(&amp;#39;./data.txt&amp;#39;,
        &amp;#39;utf8&amp;#39;, (err, data)=&amp;gt;{\n    const arrData = data.split(&amp;#39;\\r\\n&amp;#39;).map(num
        =&amp;gt; Number(num));\n    //solution 2\n    main2(arrData);\n    //solution
        1\n    //main(arrData) \n})\n\nconst findDif = (num, target=2020) =&amp;gt;
        {\n    let dif = target - num;\n    return dif;\n}\n\nconst main = (data,
        target=2020) =&amp;gt; {\n    let dif = [];\n    data.forEach(val =&amp;gt;
        {\n        if(dif.includes(val)) {\n            console.log(2020-target, val,
        findDif(val, target), (2020-target) * val * findDif(val, target))\n        }\n        dif.push(findDif(val,
        target))\n    })\n}\n\nconst main2 = (data) =&amp;gt;{\n    data.forEach(val
        =&amp;gt; {\n        main(data, 2020-val)\n    })\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea2ml2/",
        "subreddit_type": "public", "locked": false, "name": "t1_gea2ml2", "created":
        1606844982.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 4, "name": "t1_gea8trh", "id": "gea8trh", "parent_id":
        "t1_gea2ml2", "depth": 1, "children": ["gea8trh"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gea4g6s",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "garciparedes",
        "can_mod_post": false, "created_utc": 1606845846.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_ml6ah", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Rust solutions:\n\n* Part 1: [https://github.com/garciparedes/advent-of-code/blob/master/2020/01\\_report\\_repair\\_part\\_1.rs](https://github.com/garciparedes/advent-of-code/blob/master/2020/01_report_repair_part_1.rs)\n*
        Part 2: [https://github.com/garciparedes/advent-of-code/blob/master/2020/01\\_report\\_repair\\_part\\_2.rs](https://github.com/garciparedes/advent-of-code/blob/master/2020/01_report_repair_part_1.rs)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Rust solutions:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Part
        1: &lt;a href=\"https://github.com/garciparedes/advent-of-code/blob/master/2020/01_report_repair_part_1.rs\"&gt;https://github.com/garciparedes/advent-of-code/blob/master/2020/01_report_repair_part_1.rs&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Part
        2: &lt;a href=\"https://github.com/garciparedes/advent-of-code/blob/master/2020/01_report_repair_part_1.rs\"&gt;https://github.com/garciparedes/advent-of-code/blob/master/2020/01_report_repair_part_2.rs&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea4g6s/",
        "subreddit_type": "public", "locked": false, "name": "t1_gea4g6s", "created":
        1606845846.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606904502.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gea6u2s", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "nahuak",
        "can_mod_post": false, "created_utc": 1606846975.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_36mcnk4", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Now comes my Rust solution. Again would appreciate any feedback!!! Thanks
        :)\n\n[https://github.com/nahuakang/advent-of-code-2020/blob/master/rust\\_day1/main.rs](https://github.com/nahuakang/advent-of-code-2020/blob/master/rust_day1/main.rs)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Now comes my Rust solution.
        Again would appreciate any feedback!!! Thanks :)&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/nahuakang/advent-of-code-2020/blob/master/rust_day1/main.rs\"&gt;https://github.com/nahuakang/advent-of-code-2020/blob/master/rust_day1/main.rs&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea6u2s/",
        "subreddit_type": "public", "locked": false, "name": "t1_gea6u2s", "created":
        1606846975.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gea6vh1",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "wzkx",
        "can_mod_post": false, "created_utc": 1606846993.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_t1qbo", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Python**, not sets. OK, if there can be the same items (which is not the
        case in the actual data, but in general it can be so), the set solution is
        not good. So, here''s the solution with the lists, \"optimized\" a bit :)\n\n    d
        = [int(e) for e in open(\"01.dat\",\"rt\").read().strip().split()]\n    N
        = 2020\n    E = enumerate\n\n    def p1(a):\n      for i,e in E(a):\n        for
        j,u in E(a):\n          if j&gt;i and e+u==N:\n            return e*u\n\n    def
        p2(a):\n      for i,e in E(a):\n        for j,u in E(a):\n          if i&lt;=j
        or u+e&gt;=N: continue # remove second cond if items can be &lt;=0\n          for
        k,v in E(a):\n            if k&gt;j and e+u+v==N:\n              return e*u*v\n\n    print(p1(d))\n    print(p2(d))",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;,
        not sets. OK, if there can be the same items (which is not the case in the
        actual data, but in general it can be so), the set solution is not good. So,
        here&amp;#39;s the solution with the lists, &amp;quot;optimized&amp;quot;
        a bit :)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;d = [int(e) for e in open(&amp;quot;01.dat&amp;quot;,&amp;quot;rt&amp;quot;).read().strip().split()]\nN
        = 2020\nE = enumerate\n\ndef p1(a):\n  for i,e in E(a):\n    for j,u in E(a):\n      if
        j&amp;gt;i and e+u==N:\n        return e*u\n\ndef p2(a):\n  for i,e in E(a):\n    for
        j,u in E(a):\n      if i&amp;lt;=j or u+e&amp;gt;=N: continue # remove second
        cond if items can be &amp;lt;=0\n      for k,v in E(a):\n        if k&amp;gt;j
        and e+u+v==N:\n          return e*u*v\n\nprint(p1(d))\nprint(p2(d))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea6vh1/",
        "subreddit_type": "public", "locked": false, "name": "t1_gea6vh1", "created":
        1606846993.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_gebb8qu", "id": "gebb8qu", "parent_id":
        "t1_gea6vh1", "depth": 1, "children": ["gebb8qu", "geb9wuo"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606861947.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gea7tzx", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "coccosoids",
        "can_mod_post": false, "created_utc": 1606847444.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_z9x15", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My python solution:\n\n    import sys\n    \n    with open(\"input_day01.txt\")
        as f:\n        text = [int(x) for x in f.readlines()]\n    \n    answer =
        []\n    \n    for i in text:\n    \tfor j in text:\n    \t\tfor k in text:\n    \t\t\tif
        i + j + k== 2020:\n    \t\t\t\tanswer = i * j * k\n    \t\t\t\tbreak\n    \n    \t\t\t\n    print
        answer\n\nCan someone tell me why the execution time is 8.4s and how can I
        optimize?\n\nPS: how do you paste code in reddit?", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;My python solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        sys\n\nwith open(&amp;quot;input_day01.txt&amp;quot;) as f:\n    text = [int(x)
        for x in f.readlines()]\n\nanswer = []\n\nfor i in text:\n    for j in text:\n        for
        k in text:\n            if i + j + k== 2020:\n                answer = i *
        j * k\n                break\n\n\nprint answer\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Can
        someone tell me why the execution time is 8.4s and how can I optimize?&lt;/p&gt;\n\n&lt;p&gt;PS:
        how do you paste code in reddit?&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea7tzx/", "subreddit_type":
        "public", "locked": false, "name": "t1_gea7tzx", "created": 1606847444.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 11, "name":
        "t1_geaeepa", "id": "geaeepa", "parent_id": "t1_gea7tzx", "depth": 1, "children":
        ["geaeepa", "geagbg0", "geapcum", "gea8kp2", "gea9dky", "gea9vdn", "geabkq2"]}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gea9o1a", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "paulaghergu",
        "can_mod_post": false, "created_utc": 1606848316.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_91907ruk", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# javascript &amp; jquery in console:\n\n    var lst=$(''pre'').innerText.replace(''\"'','''').split(/[\\r\\n]/g)\n    \n    //part
        1:\n    for (j=1; j&lt;lst.length; j++){\n        for (i= 2; i&lt;lst.length;
        i++){       \n            if (Number(lst[j]) + Number(lst[i])==2020){\n                console.log
        (Number(lst[j]) * Number(lst[i]), Number(lst[j]), Number(lst[i]))}}}\n    \n    //part
        2:\n    for (j=1; j&lt;lst.length; j++){\n        for (i= 2; i&lt;lst.length;
        i++){\n            for (k=3; k&lt;lst.length; k++){\n            if (Number(lst[j])
        + Number(lst[i])+Number(lst[k])==2020){\n                console.log (Number(lst[j])
        * Number(lst[i])*Number(lst[k]), Number(lst[j]), Number(lst[i]), Number(lst[k]))}}}}",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;javascript &amp;amp;
        jquery in console:&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;var lst=$(&amp;#39;pre&amp;#39;).innerText.replace(&amp;#39;&amp;quot;&amp;#39;,&amp;#39;&amp;#39;).split(/[\\r\\n]/g)\n\n//part
        1:\nfor (j=1; j&amp;lt;lst.length; j++){\n    for (i= 2; i&amp;lt;lst.length;
        i++){       \n        if (Number(lst[j]) + Number(lst[i])==2020){\n            console.log
        (Number(lst[j]) * Number(lst[i]), Number(lst[j]), Number(lst[i]))}}}\n\n//part
        2:\nfor (j=1; j&amp;lt;lst.length; j++){\n    for (i= 2; i&amp;lt;lst.length;
        i++){\n        for (k=3; k&amp;lt;lst.length; k++){\n        if (Number(lst[j])
        + Number(lst[i])+Number(lst[k])==2020){\n            console.log (Number(lst[j])
        * Number(lst[i])*Number(lst[k]), Number(lst[j]), Number(lst[i]), Number(lst[k]))}}}}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea9o1a/",
        "subreddit_type": "public", "locked": false, "name": "t1_gea9o1a", "created":
        1606848316.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_geary7o", "id": "geary7o", "parent_id":
        "t1_gea9o1a", "depth": 1, "children": ["geary7o"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geaanxo",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "redboundary",
        "can_mod_post": false, "created_utc": 1606848782.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_3mzzbdwx", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Simple C# Solution\n\n    using System;\n    using System.Collections.Generic;\n    using
        System.IO;\n    \n    \n    var lines = File.ReadAllLines(\"input.txt\");\n    var
        numbers = new List&lt;int&gt;();\n    foreach (var item in lines)\n    {\n        numbers.Add(Convert.ToInt32(item));\n    }\n    \n    for
        (int i =0; i &lt; numbers.Count; i++) {\n        for (int j=0; j&lt;numbers.Count;j++)
        {\n            if (numbers[i] + numbers[j] == 2020) {\n                Console.WriteLine(numbers[i]*numbers[j]);\n            }\n        }\n    }\n    \n    for
        (int i =0; i &lt; numbers.Count; i++) {\n        for (int j=0; j&lt;numbers.Count;j++)
        {\n            for (int k=0; k&lt;numbers.Count;k++) {\n                if
        (numbers[i] + numbers[j]+ numbers[k] == 2020) {\n                    Console.WriteLine(numbers[i]*numbers[j]
        * numbers[k]);\n                }\n            }\n        }\n    }", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Simple C# Solution&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;using
        System;\nusing System.Collections.Generic;\nusing System.IO;\n\n\nvar lines
        = File.ReadAllLines(&amp;quot;input.txt&amp;quot;);\nvar numbers = new List&amp;lt;int&amp;gt;();\nforeach
        (var item in lines)\n{\n    numbers.Add(Convert.ToInt32(item));\n}\n\nfor
        (int i =0; i &amp;lt; numbers.Count; i++) {\n    for (int j=0; j&amp;lt;numbers.Count;j++)
        {\n        if (numbers[i] + numbers[j] == 2020) {\n            Console.WriteLine(numbers[i]*numbers[j]);\n        }\n    }\n}\n\nfor
        (int i =0; i &amp;lt; numbers.Count; i++) {\n    for (int j=0; j&amp;lt;numbers.Count;j++)
        {\n        for (int k=0; k&amp;lt;numbers.Count;k++) {\n            if (numbers[i]
        + numbers[j]+ numbers[k] == 2020) {\n                Console.WriteLine(numbers[i]*numbers[j]
        * numbers[k]);\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geaanxo/",
        "subreddit_type": "public", "locked": false, "name": "t1_geaanxo", "created":
        1606848782.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geaeazy",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "pavel1269",
        "can_mod_post": false, "created_utc": 1606850466.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_u238p", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Rust**\n\n[https://github.com/pavel1269/advent-of-code-2020/blob/master/src/day01.rs](https://github.com/pavel1269/advent-of-code-2020/blob/master/src/day01.rs)\n\nI
        am just starting with Rust so \u2026 I am happy that it works. I believe that
        it could be improved in all aspects (code cleanliness, performance, organization).
        Feel free to comment, especially if you are experienced Rustaceans, I would
        like to know how its made.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/pavel1269/advent-of-code-2020/blob/master/src/day01.rs\"&gt;https://github.com/pavel1269/advent-of-code-2020/blob/master/src/day01.rs&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I
        am just starting with Rust so \u2026 I am happy that it works. I believe that
        it could be improved in all aspects (code cleanliness, performance, organization).
        Feel free to comment, especially if you are experienced Rustaceans, I would
        like to know how its made.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geaeazy/",
        "subreddit_type": "public", "locked": false, "name": "t1_geaeazy", "created":
        1606850466.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_gear1jx", "id": "gear1jx", "parent_id":
        "t1_geaeazy", "depth": 1, "children": ["gear1jx"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606852221.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geaez7c", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "beelau1",
        "can_mod_post": false, "created_utc": 1606850777.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_67tdjac7", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Java brute forced it with for-loops.\n\n    import java.io.File;\n    import
        java.io.FileNotFoundException;\n    import java.util.*;\n    \n    public
        class day1 {\n        public static void main(String[] args) throws FileNotFoundException
        {\n        Scanner input = new Scanner(System.in);\n        Scanner scanner
        = new Scanner(new File(\"numbers.txt\"));\n        int[] nums = new int[200];\n        int
        i = 0;\n       \n        while(scanner.hasNextInt())\n        {\n            nums[i++]
        = scanner.nextInt();\n        }\n        \n        for(int j = 0; j &lt; nums.length-
        2; j++) {\n        \tfor(int k = 1; k &lt; nums.length - 1; k++) {\n        \t\tfor(int
        l = 2; l &lt; nums.length; l++)\n        \t\tif(nums[j] + nums[k] + nums[l]
        == 2020) {\n        \t\t\tSystem.out.println(nums[j]);\n        \t\t\tSystem.out.println(nums[k]);\n        \t\t\tSystem.out.println(nums[l]);\n        \t\t\tSystem.exit(0);
        \n        \t\t}\n        \t}\n        }\n        }\n    }", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Java brute forced it with for-loops.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.*;\n\npublic
        class day1 {\n    public static void main(String[] args) throws FileNotFoundException
        {\n    Scanner input = new Scanner(System.in);\n    Scanner scanner = new
        Scanner(new File(&amp;quot;numbers.txt&amp;quot;));\n    int[] nums = new
        int[200];\n    int i = 0;\n\n    while(scanner.hasNextInt())\n    {\n        nums[i++]
        = scanner.nextInt();\n    }\n\n    for(int j = 0; j &amp;lt; nums.length-
        2; j++) {\n        for(int k = 1; k &amp;lt; nums.length - 1; k++) {\n            for(int
        l = 2; l &amp;lt; nums.length; l++)\n            if(nums[j] + nums[k] + nums[l]
        == 2020) {\n                System.out.println(nums[j]);\n                System.out.println(nums[k]);\n                System.out.println(nums[l]);\n                System.exit(0);
        \n            }\n        }\n    }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geaez7c/",
        "subreddit_type": "public", "locked": false, "name": "t1_geaez7c", "created":
        1606850777.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_geahpbi", "id": "geahpbi", "parent_id":
        "t1_geaez7c", "depth": 1, "children": ["geahpbi"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606853684.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geafk7o", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "dead_fish_bob",
        "can_mod_post": false, "created_utc": 1606851043.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_5exlh7r8", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "EDIT:  Sorry I did it in Python took 0.005983829498291016 seconds\n\n    import
        time\n    \n    start_time = time.time()\n    \n    expense_file = open(''expense_report.txt'')\n    expenses
        = expense_file.readlines()\n    \n    for i in range(len(expenses)):\n        expenses[i]
        = int(expenses[i].strip())\n    \n    expenses = sorted(expenses)\n    smallest_two
        = expenses[0] + expenses[1]\n    \n    largest_single = 2020 - smallest_two\n    \n    while
        expenses[-1] &gt; largest_single:\n        expenses.pop()       \n            \n    \n    for
        i in range(len(expenses)):\n        x = i+1\n        while x &lt; (len(expenses)-1):\n            y
        = x + 1\n            while y &lt; len(expenses):\n                if 2020
        !=(int(expenses[i]) + int(expenses[x]) + int(expenses[y])):\n                    y
        += 1\n                else:\n                    print(f''The values are {expenses[i]}
        and {expenses[x]} and {expenses[y]} and multipled together they equal { int(expenses[i])
        * int(expenses[x]) * int(expenses[y])}'')\n                    print(\"---
        %s seconds ---\" % (time.time() - start_time))\n                    break\n            x
        += 1", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;EDIT:  Sorry
        I did it in Python took 0.005983829498291016 seconds&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        time\n\nstart_time = time.time()\n\nexpense_file = open(&amp;#39;expense_report.txt&amp;#39;)\nexpenses
        = expense_file.readlines()\n\nfor i in range(len(expenses)):\n    expenses[i]
        = int(expenses[i].strip())\n\nexpenses = sorted(expenses)\nsmallest_two =
        expenses[0] + expenses[1]\n\nlargest_single = 2020 - smallest_two\n\nwhile
        expenses[-1] &amp;gt; largest_single:\n    expenses.pop()       \n\n\nfor
        i in range(len(expenses)):\n    x = i+1\n    while x &amp;lt; (len(expenses)-1):\n        y
        = x + 1\n        while y &amp;lt; len(expenses):\n            if 2020 !=(int(expenses[i])
        + int(expenses[x]) + int(expenses[y])):\n                y += 1\n            else:\n                print(f&amp;#39;The
        values are {expenses[i]} and {expenses[x]} and {expenses[y]} and multipled
        together they equal { int(expenses[i]) * int(expenses[x]) * int(expenses[y])}&amp;#39;)\n                print(&amp;quot;---
        %s seconds ---&amp;quot; % (time.time() - start_time))\n                break\n        x
        += 1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geafk7o/",
        "subreddit_type": "public", "locked": false, "name": "t1_geafk7o", "created":
        1606851043.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 13, "name": "t1_geahhej", "id": "geahhej", "parent_id":
        "t1_geafk7o", "depth": 1, "children": ["geahhej", "geal91a", "geaj83t"]}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geagd2g", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "AngNazgul",
        "can_mod_post": false, "created_utc": 1606851411.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_q5xlnpi", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "The solution in Python, path variable was created right before the code''s
        start.\n\n    day1_data = open(path,''r'')\n    nums = [int(x.rstrip(''\\n''))
        for x in day1_data]\n    \n    # Part 1\n    print(next(loop1 * loop2 for
        loop1 in nums for loop2 in nums if loop1 + loop2 == 2020))\n    \n    # Part
        2\n    print(next(loop1 * loop2 * loop3 for loop1 in nums for loop2 in nums
        for loop3 in nums if loop1 + loop2 + loop3 == 2020))\n    \n    day1_data.close()\n\nAn
        average of about 0.04\\~ seconds to complete.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;The solution in Python, path variable was created
        right before the code&amp;#39;s start.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;day1_data
        = open(path,&amp;#39;r&amp;#39;)\nnums = [int(x.rstrip(&amp;#39;\\n&amp;#39;))
        for x in day1_data]\n\n# Part 1\nprint(next(loop1 * loop2 for loop1 in nums
        for loop2 in nums if loop1 + loop2 == 2020))\n\n# Part 2\nprint(next(loop1
        * loop2 * loop3 for loop1 in nums for loop2 in nums for loop3 in nums if loop1
        + loop2 + loop3 == 2020))\n\nday1_data.close()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;An
        average of about 0.04~ seconds to complete.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geagd2g/", "subreddit_type":
        "public", "locked": false, "name": "t1_geagd2g", "created": 1606851411.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "geahpdb", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "ShroudedEUW", "can_mod_post": false, "created_utc":
        1606852030.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_9fdc4", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "Golang, my first ever Golang
        thing! Don''t be too harsh ;)\n  \n    package main\n    \n    import (\n\t    \"bufio\"\n\t    \"fmt\"\n\t    \"log\"\n\t    \"os\"\n\t    \"strconv\"\n    )\n    \n    func
        main() {\n\t    file, err := os.Open(\"input.txt\")\n\t    if err != nil {\n\t\t    log.Fatal(err)\n\t    }\n\t    defer
        file.Close()\n    \n\t    // read from file\n\t    numbers := []int{}\n\t    scanner
        := bufio.NewScanner(file)\n\t    for scanner.Scan() {\n\t\t    i, _ := strconv.Atoi(scanner.Text())\n\t\t    numbers
        = append(numbers, i)\n\t    }\n\t    // fmt.Println(numbers, len(numbers))\n    \n\t    //
        part 1\n\t    for _, num := range numbers {\n\t\t    off := 2020 - num\n\t\t    for
        _, num2 := range numbers {\n\t\t\t    if num2 == off {\n\t\t\t\t    fmt.Println(num
        * num2)\n\t\t\t\t    return\n\t\t\t    }\n\t\t    }\n\t    }\n    \n\t    //
        part 2\n\t    for _, num := range numbers {\n\t\t    for _, num2 := range
        numbers {\n\t\t\t    for _, num3 := range numbers {\n\t\t\t\t    if num+num2+num3
        == 2020 {\n\t\t\t\t\t    fmt.Println(num * num2 * num3)\n\t\t\t\t\t    return\n\t\t\t\t    }\n\t\t\t    }\n\t\t    }\n\t    }\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Golang, my first ever
        Golang thing! Don&amp;#39;t be too harsh ;)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package
        main\n\nimport (\n    &amp;quot;bufio&amp;quot;\n    &amp;quot;fmt&amp;quot;\n    &amp;quot;log&amp;quot;\n    &amp;quot;os&amp;quot;\n    &amp;quot;strconv&amp;quot;\n)\n\nfunc
        main() {\n    file, err := os.Open(&amp;quot;input.txt&amp;quot;)\n    if
        err != nil {\n        log.Fatal(err)\n    }\n    defer file.Close()\n\n    //
        read from file\n    numbers := []int{}\n    scanner := bufio.NewScanner(file)\n    for
        scanner.Scan() {\n        i, _ := strconv.Atoi(scanner.Text())\n        numbers
        = append(numbers, i)\n    }\n    // fmt.Println(numbers, len(numbers))\n\n    //
        part 1\n    for _, num := range numbers {\n        off := 2020 - num\n        for
        _, num2 := range numbers {\n            if num2 == off {\n                fmt.Println(num
        * num2)\n                return\n            }\n        }\n    }\n\n    //
        part 2\n    for _, num := range numbers {\n        for _, num2 := range numbers
        {\n            for _, num3 := range numbers {\n                if num+num2+num3
        == 2020 {\n                    fmt.Println(num * num2 * num3)\n                    return\n                }\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geahpdb/",
        "subreddit_type": "public", "locked": false, "name": "t1_geahpdb", "created":
        1606852030.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_gealgie", "id": "gealgie", "parent_id":
        "t1_geahpdb", "depth": 1, "children": ["gealgie", "geahqe5"]}}, {"kind": "t1",
        "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geaiot5", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        2, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_geaiot5", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geaiot5/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606852476.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606852476.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_geaojb1", "id": "geaojb1", "parent_id":
        "t1_geaiot5", "depth": 1, "children": ["geaojb1"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geajrji",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "gh5000",
        "can_mod_post": false, "created_utc": 1606852972.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_11m4d6", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Didn''t see a Google Apps Script answer but essentially just shitty loops
        in JS.\n\n    function myFunction() {\n      var data = SpreadsheetApp.openById(''1nOVfcY-szwbhSi0jjh7X7I8xUV3Sol_mvWWhOC9C0EI'').getSheetByName(''Sheet1'').getDataRange().getValues().map(r=&gt;r[0])\n      for
        (var i=0; i&lt;data.length; i++){\n        for (var j=0; j&lt;data.length;
        j++){\n          if (data[i]+data[j] == 2020){\n            console.log(data[i]*data[j])\n            return\n          }\n        }\n      }\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Didn&amp;#39;t see a
        Google Apps Script answer but essentially just shitty loops in JS.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function
        myFunction() {\n  var data = SpreadsheetApp.openById(&amp;#39;1nOVfcY-szwbhSi0jjh7X7I8xUV3Sol_mvWWhOC9C0EI&amp;#39;).getSheetByName(&amp;#39;Sheet1&amp;#39;).getDataRange().getValues().map(r=&amp;gt;r[0])\n  for
        (var i=0; i&amp;lt;data.length; i++){\n    for (var j=0; j&amp;lt;data.length;
        j++){\n      if (data[i]+data[j] == 2020){\n        console.log(data[i]*data[j])\n        return\n      }\n    }\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geajrji/",
        "subreddit_type": "public", "locked": false, "name": "t1_geajrji", "created":
        1606852972.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geakqc4",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "elek-eel",
        "can_mod_post": false, "created_utc": 1606853429.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_13mma73j", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My solution in Rust using itertools (should stop relying on \"unwrap\" and
        deal with Result properly)\n\n[paste](https://topaz.github.io/paste/#XQAAAQDAAgAAAAAAAAA6nMjJFHMADebh9lMSAXn5c0lZw0XzLjIVxATYoLgJ1yPoc5yRRM7N64ZlGoQTzZ89YUWw5WXslhgToeYMw9k5UynNZKmUaWFJjWCAyzQgmnOWF15fkJW8fIeI95Pr3YDIRWajZmusipANVslBRMPJYwlekq0vpEhxLj3PV4sKr0nYTMtgMLoTdlxgivV5RsEGY6iGf+oY+ADuRWNF0jDY5YQ0I9d58p2z1TJpLbapXysuSYcptm/F+DIC3iaM1rQHYWN0/jDI87oNmr2AO+35mnFXsf5Y/r6kI+9vntZEJZqx2V+pDi9qPaRRgslHBYWrtj10mbWVkXw2TvnJf6c+LoZ5Qn01lJV4InPOMROIK7Ma5A+QN+kmvl+iKr9OSmM3qU+VMNR/uc5CCTL/QlEx81KcRYofh7BMYBMhzeCr3/V6RFmI4LsXyU7EPgSSrbi4OJLQQsd6dZW4YZoYpSIRSCLDaVM49AeGcfvc1F8SdeuBTTwvqLKdwDWHW1Q6WBIOf9lpqqXcA58iw/9CR0QA)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My solution in Rust
        using itertools (should stop relying on &amp;quot;unwrap&amp;quot; and deal
        with Result properly)&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://topaz.github.io/paste/#XQAAAQDAAgAAAAAAAAA6nMjJFHMADebh9lMSAXn5c0lZw0XzLjIVxATYoLgJ1yPoc5yRRM7N64ZlGoQTzZ89YUWw5WXslhgToeYMw9k5UynNZKmUaWFJjWCAyzQgmnOWF15fkJW8fIeI95Pr3YDIRWajZmusipANVslBRMPJYwlekq0vpEhxLj3PV4sKr0nYTMtgMLoTdlxgivV5RsEGY6iGf+oY+ADuRWNF0jDY5YQ0I9d58p2z1TJpLbapXysuSYcptm/F+DIC3iaM1rQHYWN0/jDI87oNmr2AO+35mnFXsf5Y/r6kI+9vntZEJZqx2V+pDi9qPaRRgslHBYWrtj10mbWVkXw2TvnJf6c+LoZ5Qn01lJV4InPOMROIK7Ma5A+QN+kmvl+iKr9OSmM3qU+VMNR/uc5CCTL/QlEx81KcRYofh7BMYBMhzeCr3/V6RFmI4LsXyU7EPgSSrbi4OJLQQsd6dZW4YZoYpSIRSCLDaVM49AeGcfvc1F8SdeuBTTwvqLKdwDWHW1Q6WBIOf9lpqqXcA58iw/9CR0QA\"&gt;paste&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geakqc4/",
        "subreddit_type": "public", "locked": false, "name": "t1_geakqc4", "created":
        1606853429.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 4, "name": "t1_geaueeh", "id": "geaueeh", "parent_id":
        "t1_geakqc4", "depth": 1, "children": ["geaueeh", "geap2yf"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606855418.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geakrug", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "advent_coder",
        "can_mod_post": false, "created_utc": 1606853449.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_94gn29es", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Experimenting with itertools, map, filter and lambdas in Python\n\nTime taken:
        --- 0.007677793502807617 seconds ---\n\nPart two was very easy for me- all
        I had to do was change the combinations size to 3, and include the extra argument
        when unpacking the tuple.\n\n    import itertools\n    import time\n    \n    start_time
        = time.time()\n    \n    f = open(\"../advent_of_code_2020/input_data/day_one.txt\",
        \"r\")\n    data = [int(x) for x in f.read().splitlines()]\n    \n    def
        process_data(data):\n        (x, y) = data\n        return x * y if x + y
        == 2020 else None\n    \n    ans = list(filter(lambda x: x is not None, list(map(process_data,
        list(itertools.combinations(data, 2))))))[0]\n    \n    print(\"--- %s seconds
        ---\" % (time.time() - start_time))\n    print(ans)", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Experimenting with itertools, map, filter and lambdas
        in Python&lt;/p&gt;\n\n&lt;p&gt;Time taken: --- 0.007677793502807617 seconds
        ---&lt;/p&gt;\n\n&lt;p&gt;Part two was very easy for me- all I had to do was
        change the combinations size to 3, and include the extra argument when unpacking
        the tuple.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import itertools\nimport time\n\nstart_time
        = time.time()\n\nf = open(&amp;quot;../advent_of_code_2020/input_data/day_one.txt&amp;quot;,
        &amp;quot;r&amp;quot;)\ndata = [int(x) for x in f.read().splitlines()]\n\ndef
        process_data(data):\n    (x, y) = data\n    return x * y if x + y == 2020
        else None\n\nans = list(filter(lambda x: x is not None, list(map(process_data,
        list(itertools.combinations(data, 2))))))[0]\n\nprint(&amp;quot;--- %s seconds
        ---&amp;quot; % (time.time() - start_time))\nprint(ans)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geakrug/",
        "subreddit_type": "public", "locked": false, "name": "t1_geakrug", "created":
        1606853449.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606855214.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geakvfh", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "noble_wine",
        "can_mod_post": false, "created_utc": 1606853496.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_2xmofpgq", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "my noble first day solutions  \nedit: in python 3.8  \n\n\n    with open(\"day_1_input.txt\")
        as raw_data:\n        data = raw_data.read()\n    arr = [int(x) for x in data.split(''\\n'')
        if x]\n    \n    def day1_1():\n        for x in arr:\n            for y in
        arr:\n                if x + y == 2020:\n                    return x * y\n    \n    \n    def
        day1_2():\n        for x in arr:\n            for y in arr:\n                for
        z in arr:\n                    if x + y + z == 2020:\n                        return
        x * y * z\n    \n    print(f\"Day 1.1: {day1_1()}\")\n    print(f\"Day 1.2:
        {day1_2()}\")", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;my
        noble first day solutions&lt;br/&gt;\nedit: in python 3.8  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with
        open(&amp;quot;day_1_input.txt&amp;quot;) as raw_data:\n    data = raw_data.read()\narr
        = [int(x) for x in data.split(&amp;#39;\\n&amp;#39;) if x]\n\ndef day1_1():\n    for
        x in arr:\n        for y in arr:\n            if x + y == 2020:\n                return
        x * y\n\n\ndef day1_2():\n    for x in arr:\n        for y in arr:\n            for
        z in arr:\n                if x + y + z == 2020:\n                    return
        x * y * z\n\nprint(f&amp;quot;Day 1.1: {day1_1()}&amp;quot;)\nprint(f&amp;quot;Day
        1.2: {day1_2()}&amp;quot;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geakvfh/", "subreddit_type":
        "public", "locked": false, "name": "t1_geakvfh", "created": 1606853496.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 2, "name":
        "t1_gear0rp", "id": "gear0rp", "parent_id": "t1_geakvfh", "depth": 1, "children":
        ["gear0rp", "geao7hv"]}}, {"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": 1606854317.0, "mod_reason_by": null, "banned_by": null, "removal_reason":
        null, "link_id": "t3_k4e4lm", "author_flair_template_id": null, "likes": null,
        "replies": "", "user_reports": [], "saved": false, "id": "geal0ma", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "[deleted]", "can_mod_post": false, "send_replies":
        true, "parent_id": "t3_k4e4lm", "score": 2, "approved_by": null, "mod_note":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "Python 3 solution,
        had a blast\n\n    from itertools import combinations\n    from operator import
        mul\n    from functools import reduce\n    import time\n    \n    start =
        time.time()\n    with open(''day1/input.txt'', ''r'') as f:\n        r = [int(i.strip())
        for i in f.readlines()]\n    print(f\"p1: {next(i * r[l] for i in r for l
        in range(0, len(r)) if i + r[l] == 2020)} time: {time.time() - start}\")\n    print(f\"p2:
        {reduce(mul, next(i for i in combinations(r, 3) if sum(i) == 2020), 1)} time:
        {time.time() - start}\")\n\n&amp;#x200B;\n\n&amp;#x200B;\n\np1: time: 0.0039980411529541016\n\np2:
        time: 0.09799909591674805", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_geal0ma", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Python 3 solution, had a blast&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from
        itertools import combinations\nfrom operator import mul\nfrom functools import
        reduce\nimport time\n\nstart = time.time()\nwith open(&amp;#39;day1/input.txt&amp;#39;,
        &amp;#39;r&amp;#39;) as f:\n    r = [int(i.strip()) for i in f.readlines()]\nprint(f&amp;quot;p1:
        {next(i * r[l] for i in r for l in range(0, len(r)) if i + r[l] == 2020)}
        time: {time.time() - start}&amp;quot;)\nprint(f&amp;quot;p2: {reduce(mul,
        next(i for i in combinations(r, 3) if sum(i) == 2020), 1)} time: {time.time()
        - start}&amp;quot;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;p1:
        time: 0.0039980411529541016&lt;/p&gt;\n\n&lt;p&gt;p2: time: 0.09799909591674805&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geal0ma/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606853564.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606853564.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1713955151.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gean897", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ephemient",
        "can_mod_post": false, "created_utc": 1606854596.0, "send_replies": true,
        "parent_id": "t1_geal0ma", "score": 3, "author_fullname": "t2_3y2dr", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "This space intentionally left blank.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;This space intentionally left blank.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gean897/",
        "subreddit_type": "public", "locked": false, "name": "t1_gean897", "created":
        1606854596.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_geaq1l9", "id": "geaq1l9", "parent_id":
        "t1_gean897", "depth": 2, "children": ["geaq1l9"]}}, {"kind": "more", "data":
        {"count": 2, "name": "t1_geb6sh3", "id": "geb6sh3", "parent_id": "t1_geal0ma",
        "depth": 1, "children": ["geb6sh3"]}}, {"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 2,
        "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geaonwr",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "i4guar",
        "can_mod_post": false, "created_utc": 1606855260.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_54i2ng40", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Checkout my solution in swift, really simple in about 5 lines: [https://www.felixlarsen.com/blog/1st-december-solution-advent-of-code-2020-swift](https://www.felixlarsen.com/blog/1st-december-solution-advent-of-code-2020-swift)\n\n    for
        i in 0...data.count-1 {\n        for a in i...data.count-1 {\n            if(data[i]
        + data[a] == 2020) {\n                print(\"Result \\(data[i] * data[a])\")\n            }\n        }\n    }\n    \n\n&amp;#x200B;\n\n    for
        i in 0...data.count-1 {\n        for a in i...data.count-1 {\n            for
        b in a...data.count-1 {\n                if(data[i] + data[a] + data[b] ==
        2020) {\n                    print(\"Result \\(data[i] * data[a] * data[b])\")\n                }\n            }\n        }\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Checkout my solution
        in swift, really simple in about 5 lines: &lt;a href=\"https://www.felixlarsen.com/blog/1st-december-solution-advent-of-code-2020-swift\"&gt;https://www.felixlarsen.com/blog/1st-december-solution-advent-of-code-2020-swift&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for
        i in 0...data.count-1 {\n    for a in i...data.count-1 {\n        if(data[i]
        + data[a] == 2020) {\n            print(&amp;quot;Result \\(data[i] * data[a])&amp;quot;)\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for
        i in 0...data.count-1 {\n    for a in i...data.count-1 {\n        for b in
        a...data.count-1 {\n            if(data[i] + data[a] + data[b] == 2020) {\n                print(&amp;quot;Result
        \\(data[i] * data[a] * data[b])&amp;quot;)\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geaonwr/",
        "subreddit_type": "public", "locked": false, "name": "t1_geaonwr", "created":
        1606855260.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_gecqovz", "id": "gecqovz", "parent_id":
        "t1_geaonwr", "depth": 1, "children": ["gecqovz", "geb1vnl"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geap7rl",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "bcgroom",
        "can_mod_post": false, "created_utc": 1606855516.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_7zp95", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Elixir\n\nI\u2019m doing some unnecessary iterations and will probably change
        to use Stream after work. Also working on creating some macros to reduce boilerplate
        for each day as I had a lot of that when doing Rust last year. \n\nhttps://github.com/ericgroom/advent2020/blob/master/lib/days/day_1.ex",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Elixir&lt;/p&gt;\n\n&lt;p&gt;I\u2019m
        doing some unnecessary iterations and will probably change to use Stream after
        work. Also working on creating some macros to reduce boilerplate for each
        day as I had a lot of that when doing Rust last year. &lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/ericgroom/advent2020/blob/master/lib/days/day_1.ex\"&gt;https://github.com/ericgroom/advent2020/blob/master/lib/days/day_1.ex&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geap7rl/",
        "subreddit_type": "public", "locked": false, "name": "t1_geap7rl", "created":
        1606855516.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geapk7s",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "SeanMartin96",
        "can_mod_post": false, "created_utc": 1606855678.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_gship", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "JS solution using vanilla JS arrays. Please critique!\n\n    const input
        = require(''./input.json'');\n    \n    const total = 2020;\n    \n    function
        partOne() {\n        return input.every(item =&gt; {\n            const remainder
        = total - item;\n            const otherElement = input.find(item =&gt; item
        === remainder);\n            if (otherElement) {\n                console.log(item)\n                console.log(otherElement)\n                console.log(item
        * otherElement)\n                return false;\n            }\n            return
        true;\n        })\n    };\n    \n    function partTwo() {\n        const results
        = [];\n        return input.every(item =&gt; {\n            const remainder
        = total - item;\n            const otherElement = input.find(newItem =&gt;
        {\n                return input.find(newerItem =&gt; {\n                    const
        result = newItem + newerItem + item === total &amp;&amp; newerItem;\n                    if(result)
        {\n                        results.push(result);\n                        results.push(newItem)\n                    }\n                    return
        newItem + newerItem + item === total;\n                }\n                );\n            });\n            if
        (otherElement) {\n                console.log(''Item: '' + item);\n                console.log(''Other
        Item: '' + results[0]);\n                console.log(''Other other Item: ''
        + results[1]);\n                console.log(''Total: '' + (item + results[0]
        + results[1]));\n                console.log(''Solution: '' + (item * results[0]
        * results[1]));\n                return false;\n            }\n            return
        true;\n        })\n    };", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;JS
        solution using vanilla JS arrays. Please critique!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const
        input = require(&amp;#39;./input.json&amp;#39;);\n\nconst total = 2020;\n\nfunction
        partOne() {\n    return input.every(item =&amp;gt; {\n        const remainder
        = total - item;\n        const otherElement = input.find(item =&amp;gt; item
        === remainder);\n        if (otherElement) {\n            console.log(item)\n            console.log(otherElement)\n            console.log(item
        * otherElement)\n            return false;\n        }\n        return true;\n    })\n};\n\nfunction
        partTwo() {\n    const results = [];\n    return input.every(item =&amp;gt;
        {\n        const remainder = total - item;\n        const otherElement = input.find(newItem
        =&amp;gt; {\n            return input.find(newerItem =&amp;gt; {\n                const
        result = newItem + newerItem + item === total &amp;amp;&amp;amp; newerItem;\n                if(result)
        {\n                    results.push(result);\n                    results.push(newItem)\n                }\n                return
        newItem + newerItem + item === total;\n            }\n            );\n        });\n        if
        (otherElement) {\n            console.log(&amp;#39;Item: &amp;#39; + item);\n            console.log(&amp;#39;Other
        Item: &amp;#39; + results[0]);\n            console.log(&amp;#39;Other other
        Item: &amp;#39; + results[1]);\n            console.log(&amp;#39;Total: &amp;#39;
        + (item + results[0] + results[1]));\n            console.log(&amp;#39;Solution:
        &amp;#39; + (item * results[0] * results[1]));\n            return false;\n        }\n        return
        true;\n    })\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geapk7s/", "subreddit_type":
        "public", "locked": false, "name": "t1_geapk7s", "created": 1606855678.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 1, "name":
        "t1_gebc4jl", "id": "gebc4jl", "parent_id": "t1_geapk7s", "depth": 1, "children":
        ["gebc4jl"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geaq1d5", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "MarilenaFanboy",
        "can_mod_post": false, "created_utc": 1606855897.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_8i1c3uqe", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Hello! New to c and this is my code:\n\n \n\n\\#include &lt;stdio.h&gt;  \n\\#include
        &lt;stdlib.h&gt;  \nint main(){  \n FILE\\*\u00a0input;  \n int values\\[200\\];  \n
        int wantedNumber;  \n input\u00a0=\u00a0fopen(\"input.txt\",\u00a0\"r\");  \n
        int i\u00a0=\u00a00;  \n while(!feof\u00a0(input)){  \n //printf(\"values\u00a0are:\u00a0%d\\\\n\",\u00a0values);  \n
        fscanf(input\u00a0,\u00a0\"%d\",\u00a0&amp;values\\[i\\]);\u00a0  \n i++;  \n\u00a0\u00a0\u00a0\u00a0}  \n
        fclose(input);  \n   \n for(i\u00a0=\u00a00;\u00a0i&lt;\u00a0200;\u00a0i++\u00a0){  \n
        wantedNumber\u00a0=\u00a02020-values\\[i\\];  \n for(int j\u00a0=\u00a00;\u00a0j\u00a0&lt;\u00a0200;\u00a0j++){  \n
        if((values\\[j\\]\u00a0/\u00a01000)\u00a0==\u00a00){  \n if(values\\[j\\]\u00a0==\u00a0wantedNumber){  \n
        printf(\"%d\u00a0%d\\\\n\",\u00a0values\\[j\\],\u00a0values\\[i\\]);  \n printf(\"%d\",\u00a0values\\[j\\]\\*values\\[i\\]);  \n
        return 0;  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n\u00a0\u00a0\u00a0\u00a0}  \n}",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hello! New to c and
        this is my code:&lt;/p&gt;\n\n&lt;p&gt;#include &amp;lt;stdio.h&amp;gt;&lt;br/&gt;\n#include
        &amp;lt;stdlib.h&amp;gt;&lt;br/&gt;\nint main(){&lt;br/&gt;\n FILE*\u00a0input;&lt;br/&gt;\n
        int values[200];&lt;br/&gt;\n int wantedNumber;&lt;br/&gt;\n input\u00a0=\u00a0fopen(&amp;quot;input.txt&amp;quot;,\u00a0&amp;quot;r&amp;quot;);&lt;br/&gt;\n
        int i\u00a0=\u00a00;&lt;br/&gt;\n while(!feof\u00a0(input)){&lt;br/&gt;\n
        //printf(&amp;quot;values\u00a0are:\u00a0%d\\n&amp;quot;,\u00a0values);&lt;br/&gt;\n
        fscanf(input\u00a0,\u00a0&amp;quot;%d&amp;quot;,\u00a0&amp;amp;values[i]);\u00a0&lt;br/&gt;\n
        i++;&lt;br/&gt;\n\u00a0\u00a0\u00a0\u00a0}&lt;br/&gt;\n fclose(input);  &lt;/p&gt;\n\n&lt;p&gt;for(i\u00a0=\u00a00;\u00a0i&amp;lt;\u00a0200;\u00a0i++\u00a0){&lt;br/&gt;\n
        wantedNumber\u00a0=\u00a02020-values[i];&lt;br/&gt;\n for(int j\u00a0=\u00a00;\u00a0j\u00a0&amp;lt;\u00a0200;\u00a0j++){&lt;br/&gt;\n
        if((values[j]\u00a0/\u00a01000)\u00a0==\u00a00){&lt;br/&gt;\n if(values[j]\u00a0==\u00a0wantedNumber){&lt;br/&gt;\n
        printf(&amp;quot;%d\u00a0%d\\n&amp;quot;,\u00a0values[j],\u00a0values[i]);&lt;br/&gt;\n
        printf(&amp;quot;%d&amp;quot;,\u00a0values[j]*values[i]);&lt;br/&gt;\n return
        0;&lt;br/&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}&lt;br/&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}&lt;br/&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}&lt;br/&gt;\n\u00a0\u00a0\u00a0\u00a0}&lt;br/&gt;\n}&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geaq1d5/",
        "subreddit_type": "public", "locked": false, "name": "t1_geaq1d5", "created":
        1606855897.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 628, "name": "t1_geaqgdt", "id": "geaqgdt", "parent_id":
        "t3_k4e4lm", "depth": 0, "children": ["geaqgdt", "gearyyf", "geat8vy", "geascdo",
        "geb22xg", "geb8tua", "geaxi7b", "geb5m5w", "geasy2d", "geb7p6r", "gebn1q2",
        "gebbsdv", "gectazu", "geb1ywi", "gebmrn5", "gec124u", "geb62j1", "geb1ylq",
        "gebftfl", "gebjbwq", "gebs83z", "geco79q", "gec2cvf", "gebdwoh", "gebdy00",
        "ged2syd", "gebi4f8", "gec7b6w", "gec65da", "gebpih7", "gec7jgm", "gec5y4z",
        "geb72uc", "gecq4io", "gebhpca", "gebt57q", "gebmnz0", "gebjdgw", "gec24rm",
        "geboier", "gebvdck", "gedmx6c", "ge8qa9v", "gec5osj", "gebykhw", "gecibnq",
        "gebgpfi", "gebkezv", "ged959m", "ge9w3sf", "gebclbc", "geb34hs", "geaqgwd",
        "ge8dewk", "gec1vl4", "gecbbcr", "ge8zfpr", "gebkep2", "gedl7y0", "ge8d575",
        "gec1oxq", "gedjo2d", "ge95uhg", "gecsn65", "ge8cl3c", "ge8jglc", "ge8dhow",
        "gebpzhl", "ge8d88g", "ge8g3mb", "ge8hjs0", "ge8dc2t", "ge9hyrm", "ge8e72m",
        "gea9tbw", "ge8d6qk", "ge94liw", "ge8e9e9", "geaxt4t", "gec2gg5", "gecyms2",
        "gebmpyg", "gea8ouf", "ge8hasg", "ge8dckb", "ge9vh7d", "ge8djkf", "ge8cv0w",
        "ge8d8ht", "ge90snh", "ge95r6o", "ge8ub8c", "ge8x2ax", "ge8wy22", "ge8zg5h",
        "ge9cla0", "ge9euu1", "ge94tnj", "ge8hgha", "ge8d4fv", "ge933cq", "ge9u529",
        "ge8e2mm", "ge8oces", "ge9qj85", "ge8gwg3", "ge8w7ap", "ge8vnir", "geamp0x",
        "ge8egd7", "ge8fo5f", "ge8hhxr", "ge8edqs", "gebv38e", "ge8d3xk", "ge8cl31",
        "ge8drnn", "ge8e5vy", "geb2kzp", "ge93wxk", "ge8eek9", "ge8d75b", "geaco7m",
        "ge8dq4x", "ge8gvxc", "ge8d981", "ge8ypio", "ge9fh10", "gednq6d", "ge8et2j",
        "ge959yk", "ge8iorh", "ge8v2we", "ge8ugt2", "ge8rgu3", "ge90pv4", "ge8u58v",
        "ge9hgu2", "ge8g4iv", "ge8gn6r", "ge8iotj", "ge96tiq", "ge90035", "ge8iw3m",
        "ge99dmt", "ge8q1ox", "ge95a1e", "ge8xx75", "ge9lf9j", "ge985ep", "ge8xlj2",
        "ge98ysx", "ge8yog2", "ge8eqo4", "gea3dle", "ge8hj6a", "ge8vf78", "ge8l8lb",
        "ge8xday", "geayy5d", "geb9b3s", "gea97s3", "ge99kma", "ge9autn", "ge8fij5",
        "ge93jm1", "ge8hf6j", "ge8dw1k", "ge8dnbn", "ge8dil8", "ge8cm9v", "ge8isow",
        "gec0e6f", "geamavo", "ge8j4w1", "ge9lrxu", "ge8e5m5", "ge8d3oo", "gead2hx",
        "ge8hczq", "geady27", "ge8jf9z", "ge9quzr", "geab8yv", "geac8gr", "ge9p67o",
        "ge8ft9b", "geacp52", "gea5os4", "ge9lb2t", "ge8xree", "ge9809q", "gea55cz",
        "geb73sk", "ge91y87", "ge9fs08", "geator7", "ge8ff2d", "geaja8q", "ge9px27",
        "ge99296", "ge8t5hs", "gebx4pn", "ge9k6sa", "gea91jq", "geadna4", "gea0reu",
        "ge9m65s", "ge8yk7u", "ge93efl", "ge9225u", "geajhnt", "gebcdzv", "geabg9r",
        "ge8uxge", "geby48b", "ge98q2x", "gea846b", "gebuvuw", "ge8dgjc", "gebuoyc",
        "ge9kuii", "ge8hblp", "geby132", "ge9oow8", "ge8vu5a", "gea7lc6", "ge95f68",
        "ge8jsx5", "ge9p8jh", "gebx9gq", "ge8z4ff", "ge90t2q", "ge8umgx", "ge8h6cs",
        "ge8eiis", "ge8qs04", "ge8kak3", "ge8dglu", "ge97rgx", "ge8qd7s", "gea6m9x",
        "ge92lj3", "ge99hmm", "ge9wtc6", "ge8s8wl", "ge8r3ie", "ge8ucg7", "ged616q",
        "ged4e5g", "ge9cwwc", "ge9pptc", "ge9vs5f", "ge9l4ak", "geaeq43", "ge9nnl1",
        "ge8eiq2", "ge9066a", "ge8yvut", "ge9qgy9", "geayab9", "ge8zxsv", "gea5sgr",
        "ge93bhe", "ge93z7e", "gec5h0g", "gea17ge", "ge92kna", "ge9963b", "ge9c3l6",
        "ge93z8h", "gea1c82", "gecd75d", "ge9ysx3", "ge9v0oa", "ge98qck", "ge96iwo",
        "ge8ndxc", "ge8zlpr", "ge8feyg", "ge948qx", "ge989na", "gecjat6", "ge998wb",
        "ge9l7o8", "gebka8s", "geae2je", "gea60ob", "ge9p7h9", "ge9wiwj", "ge99c2y",
        "ge9idwm", "gea04hh", "ge9hbp6", "ge94kss", "ged4hhm", "gead5e6", "gea6p3j",
        "ge8rlp9", "gebidqz", "geaqabf", "ge9f357", "ge8yqmy", "ge9e7k1", "ge9kgch",
        "ge8f6p3", "ge8em6p", "ge9aay1", "gea37gf", "ge9bnyc", "ge9c2p4", "ge8gd8r",
        "ge9n0k8", "ge90ffa", "ge8zyte", "ge8xemy", "ge8gx4l", "ge8grtd", "ge8v5uh",
        "geaxx0l", "ge8dqnf", "ge8vrzv", "geb434g", "ge9gln9"]}}], true]], [0, 12,
        "attr", "things"], [12, 13, "call", ["t1_ge8g56f"]], [13, 14, "attr", "focus"],
        [14, 15, "call", []], [0, 16, "attr", "things"], [16, 17, "call", ["None"]],
        [17, 18, "attr", "filter"], [18, 19, "call", [".morechildren"]], [19, 20,
        "attr", "remove"], [20, 21, "call", []]], "success": true}'
  recorded_at: Sat, 08 Mar 2025 23:06:36 GMT
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:36 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=Urpc2ef56ol1ApCv1i; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sat, 08 Mar 2025 23:06:36 GMT
- request:
    method: post
    uri: https://oauth.reddit.com/api/morechildren.json
    body:
      encoding: UTF-8
      string: link_id=t3_k4e4lm&children=geaqgdt,gearyyf,geat8vy,geascdo,geb22xg,geb8tua,geaxi7b,geb5m5w,geasy2d,geb7p6r,gebn1q2,gebbsdv,gectazu,geb1ywi,gebmrn5,gec124u,geb62j1,geb1ylq,gebftfl,gebjbwq,gebs83z,geco79q,gec2cvf,gebdwoh,gebdy00,ged2syd,gebi4f8,gec7b6w,gec65da,gebpih7,gec7jgm,gec5y4z,geb72uc,gecq4io,gebhpca,gebt57q,gebmnz0,gebjdgw,gec24rm,geboier,gebvdck,gedmx6c,ge8qa9v,gec5osj,gebykhw,gecibnq,gebgpfi,gebkezv,ged959m,ge9w3sf,gebclbc,geb34hs,geaqgwd,ge8dewk,gec1vl4,gecbbcr,ge8zfpr,gebkep2,gedl7y0,ge8d575,gec1oxq,gedjo2d,ge95uhg,gecsn65,ge8cl3c,ge8jglc,ge8dhow,gebpzhl,ge8d88g,ge8g3mb,ge8hjs0,ge8dc2t,ge9hyrm,ge8e72m,gea9tbw,ge8d6qk,ge94liw,ge8e9e9,geaxt4t,gec2gg5,gecyms2,gebmpyg,gea8ouf,ge8hasg,ge8dckb,ge9vh7d,ge8djkf,ge8cv0w,ge8d8ht,ge90snh,ge95r6o,ge8ub8c,ge8x2ax,ge8wy22,ge8zg5h,ge9cla0,ge9euu1,ge94tnj,ge8hgha,ge8d4fv,ge933cq,ge9u529,ge8e2mm,ge8oces,ge9qj85,ge8gwg3,ge8w7ap,ge8vnir,geamp0x,ge8egd7,ge8fo5f,ge8hhxr,ge8edqs,gebv38e,ge8d3xk,ge8cl31,ge8drnn,ge8e5vy,geb2kzp,ge93wxk,ge8eek9,ge8d75b,geaco7m,ge8dq4x,ge8gvxc,ge8d981,ge8ypio,ge9fh10,gednq6d,ge8et2j,ge959yk,ge8iorh,ge8v2we,ge8ugt2,ge8rgu3,ge90pv4,ge8u58v,ge9hgu2,ge8g4iv,ge8gn6r,ge8iotj,ge96tiq,ge90035,ge8iw3m,ge99dmt,ge8q1ox,ge95a1e,ge8xx75,ge9lf9j,ge985ep,ge8xlj2,ge98ysx,ge8yog2,ge8eqo4,gea3dle,ge8hj6a,ge8vf78,ge8l8lb,ge8xday,geayy5d,geb9b3s,gea97s3,ge99kma,ge9autn,ge8fij5,ge93jm1,ge8hf6j,ge8dw1k,ge8dnbn,ge8dil8,ge8cm9v,ge8isow,gec0e6f,geamavo,ge8j4w1,ge9lrxu,ge8e5m5,ge8d3oo,gead2hx,ge8hczq,geady27,ge8jf9z,ge9quzr,geab8yv,geac8gr,ge9p67o,ge8ft9b,geacp52,gea5os4,ge9lb2t,ge8xree,ge9809q,gea55cz,geb73sk,ge91y87,ge9fs08,geator7,ge8ff2d,geaja8q,ge9px27,ge99296,ge8t5hs,gebx4pn,ge9k6sa,gea91jq,geadna4,gea0reu,ge9m65s,ge8yk7u,ge93efl,ge9225u,geajhnt,gebcdzv,geabg9r,ge8uxge,geby48b,ge98q2x,gea846b,gebuvuw,ge8dgjc,gebuoyc,ge9kuii,ge8hblp,geby132,ge9oow8,ge8vu5a,gea7lc6,ge95f68,ge8jsx5,ge9p8jh,gebx9gq,ge8z4ff,ge90t2q,ge8umgx,ge8h6cs,ge8eiis,ge8qs04,ge8kak3,ge8dglu,ge97rgx,ge8qd7s,gea6m9x,ge92lj3,ge99hmm,ge9wtc6,ge8s8wl,ge8r3ie,ge8ucg7,ged616q,ged4e5g,ge9cwwc,ge9pptc,ge9vs5f,ge9l4ak,geaeq43,ge9nnl1,ge8eiq2,ge9066a,ge8yvut,ge9qgy9,geayab9,ge8zxsv,gea5sgr,ge93bhe,ge93z7e,gec5h0g,gea17ge,ge92kna,ge9963b,ge9c3l6,ge93z8h,gea1c82,gecd75d,ge9ysx3,ge9v0oa,ge98qck,ge96iwo,ge8ndxc,ge8zlpr,ge8feyg,ge948qx,ge989na,gecjat6,ge998wb,ge9l7o8,gebka8s,geae2je,gea60ob,ge9p7h9,ge9wiwj,ge99c2y,ge9idwm,gea04hh,ge9hbp6,ge94kss,ged4hhm,gead5e6,gea6p3j,ge8rlp9,gebidqz,geaqabf,ge9f357,ge8yqmy,ge9e7k1,ge9kgch,ge8f6p3,ge8em6p,ge9aay1,gea37gf,ge9bnyc,ge9c2p4,ge8gd8r,ge9n0k8,ge90ffa,ge8zyte,ge8xemy,ge8gx4l,ge8grtd,ge8v5uh,geaxx0l,ge8dqnf,ge8vrzv,geb434g,ge9gln9
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '46181'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      set-cookie:
      - loid=000000001ksigc8d8l.2.1741475196431.Z0FBQUFBQm56TTE4d3BSMUZNQ0pjQzI1anJmS1JSSlVHMWVQQ0tBdHdyaEJ5UWI1SWJaSW1nczNEMUl4YmJfaEI5YVVMQ1NQcG9uMlB2SWZiem0zS1NIMGthVGdVczBSX2txNVREQWc1QW9UT1c4bThSal9XQlFjajk1MUVCcFNtVjhUeUEwYWt3bUg;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Mon, 08-Mar-2027 23:06:36
        GMT; secure, session_tracker=qklrjrmbrmfogljckr.0.1741475196443.Z0FBQUFBQm56TTE4NUc5MFdqYUk2d2dtTlhzZzZkTnh5VWRFVFJsT2xSRmpfUVhvMWFfNFdVM01PWGdNZzBpeUNseWluQUljUTNjdFVLUnB0aEs5b04tMXlzOXBlMGtPRHl4YVNhTHlvOVJBcDV6MWNQaDgzX3o4R1BkOEpfSWc3WUYwZGhQY1p3X3E;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 01:06:36
        GMT; secure, edgebucket=OAkizRkoLvoaDxkd0B; Domain=reddit.com; Max-Age=63071999;
        Path=/;  secure
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '19'
      x-ratelimit-remaining:
      - '81.0'
      x-ratelimit-reset:
      - '203'
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:36 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"jquery": [[0, 1, "call", ["body"]], [1, 2, "attr", "find"], [2, 3,
        "call", [".status"]], [3, 4, "attr", "hide"], [4, 5, "call", []], [5, 6, "attr",
        "html"], [6, 7, "call", [""]], [7, 8, "attr", "end"], [8, 9, "call", []],
        [0, 10, "attr", "insert_things"], [10, 11, "call", [[{"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606863542.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geaqgdt", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "DropkickFish",
        "can_mod_post": false, "created_utc": 1606856090.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_5ow33", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Ruby.\n\nWas pretty happy with cutting down the run time average until I
        saw the two one liners, although plus side is I''ve learnt about a couple
        of new methods which is nice, and after checking the others I''m not terribly
        far off with the time to run.\n\n    array = []\n    File.foreach(\"input1.txt\")
        { |line| array &lt;&lt; line.to_i }\n    pairs = array.combination(ARGV[0].to_i)\n    pairs.each
        do |pair|\n      if pair.sum == 2020\n        puts pair[0..-1].reduce(:*)\n      end\n    end",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ruby.&lt;/p&gt;\n\n&lt;p&gt;Was
        pretty happy with cutting down the run time average until I saw the two one
        liners, although plus side is I&amp;#39;ve learnt about a couple of new methods
        which is nice, and after checking the others I&amp;#39;m not terribly far
        off with the time to run.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;array = []\nFile.foreach(&amp;quot;input1.txt&amp;quot;)
        { |line| array &amp;lt;&amp;lt; line.to_i }\npairs = array.combination(ARGV[0].to_i)\npairs.each
        do |pair|\n  if pair.sum == 2020\n    puts pair[0..-1].reduce(:*)\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geaqgdt/",
        "subreddit_type": "public", "locked": false, "name": "t1_geaqgdt", "created":
        1606856090.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606858426.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gearyyf", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "yomanidkman",
        "can_mod_post": false, "created_utc": 1606856800.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_45bbifhf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "rust!\n\nfelt pretty happy wrt reaching goals of decent runtime complexity
        and readability. Also attempted with moderate success to allow for an n-length
        combination adding to 2020 (although I never tested it with n&gt;2 so who
        knows whether it works) \n\n&amp;#x200B;\n\nEDIT: added tests, turns out O(n\\^6)
        is slow when searching for sextuplets with adversarial test data (Shocker)\n\n[https://github.com/MarcusDunn/AoC-2020/blob/master/src/day01.rs](https://github.com/MarcusDunn/AoC-2020/blob/master/src/day01.rs)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;rust!&lt;/p&gt;\n\n&lt;p&gt;felt
        pretty happy wrt reaching goals of decent runtime complexity and readability.
        Also attempted with moderate success to allow for an n-length combination
        adding to 2020 (although I never tested it with n&amp;gt;2 so who knows whether
        it works) &lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;EDIT:
        added tests, turns out O(n^6) is slow when searching for sextuplets with adversarial
        test data (Shocker)&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/MarcusDunn/AoC-2020/blob/master/src/day01.rs\"&gt;https://github.com/MarcusDunn/AoC-2020/blob/master/src/day01.rs&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gearyyf/",
        "subreddit_type": "public", "locked": false, "name": "t1_gearyyf", "created":
        1606856800.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606861357.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geascdo", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "jcarlss",
        "can_mod_post": false, "created_utc": 1606856978.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_5g4y8rux", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "First post here, but here is my Java solution for the two parts. Could of
        gone the brute force way (double and triple nested for loops in the various
        parts) but it is very inefficient. So here is my complete solutions.\n\nPart
        1:\n\n    import java.io.*; \n    import java.util.*;\n    public class Day1
        {\n        public static void main(String[] args){\n            try {\n    \t    Scanner
        scanner = new Scanner(new File(\"input.txt\"));\n    \t    ArrayList&lt;Integer&gt;
        numArray = new ArrayList&lt;Integer&gt;();\n    \n    \t        while(scanner.hasNextInt()){\n    \t\t    numArray.add(scanner.nextInt());\t\n    \t\t}\n    \t\t\n    \t\tHashSet&lt;Integer&gt;
        numSet = new HashSet&lt;Integer&gt;();\n    \t\tint year = 2020;\n    \t\t\n    \t\tfor
        (int i = 0; i &lt; numArray.size(); i++){\n    \t\t    int temp = year - numArray.get(i);\n    \t\t    if(numSet.contains(temp)){\n    \t\t        System.out.println(numArray.get(i)
        * temp);\t\t\t\t\n    \t\t    }\n    \t\t\tnumSet.add(numArray.get(i));\n    \t\t}
        \n    \t\t\n            } catch (FileNotFoundException ex) {\n    \t    System.out.println(\"Error:
        File exception!\");\n    \t}\n        }\t\n    }\n\nPart 2:\n\n    import
        java.io.*;\n    import java.util.*;\n    public class Day1_part2 {\n        public
        static void main(String[] args){\n            try {\n    \t    Scanner scanner
        = new Scanner(new File(\"input.txt\"));\n    \t    ArrayList&lt;Integer&gt;
        numArray = new ArrayList&lt;Integer&gt;();\n    \n    \t    while(scanner.hasNextInt()){\n    \t\tnumArray.add(scanner.nextInt());\t\n    \t    }\n    \t\t\n    \t    HashSet&lt;Integer&gt;
        numSet = new HashSet&lt;Integer&gt;();\n    \t    int year = 2020;\n    \t    \n    \t    for
        (int i = 0; i &lt; numArray.size(); i++){\n    \t\tfor(int j = i + 1; j &lt;
        numArray.size(); j++) {\n    \t\t    int temp = year - numArray.get(i) - numArray.get(j);\n    \t\t        if(numSet.contains(temp)){\n    \t\t\t    System.out.println(numArray.get(i)
        * temp * numArray.get(j));\t\t\t\t\n    \t\t\t}\n    \t\t    numSet.add(numArray.get(i));\t\t\t\t\n    \t\t}\n                }
        \n            } catch (FileNotFoundException ex) {\n    \t    System.out.println(\"Error:
        File exception!\");\n    \t}\n        }\t\n    }", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;First post here, but here is my Java solution for
        the two parts. Could of gone the brute force way (double and triple nested
        for loops in the various parts) but it is very inefficient. So here is my
        complete solutions.&lt;/p&gt;\n\n&lt;p&gt;Part 1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        java.io.*; \nimport java.util.*;\npublic class Day1 {\n    public static void
        main(String[] args){\n        try {\n        Scanner scanner = new Scanner(new
        File(&amp;quot;input.txt&amp;quot;));\n        ArrayList&amp;lt;Integer&amp;gt;
        numArray = new ArrayList&amp;lt;Integer&amp;gt;();\n\n            while(scanner.hasNextInt()){\n            numArray.add(scanner.nextInt());    \n        }\n\n        HashSet&amp;lt;Integer&amp;gt;
        numSet = new HashSet&amp;lt;Integer&amp;gt;();\n        int year = 2020;\n\n        for
        (int i = 0; i &amp;lt; numArray.size(); i++){\n            int temp = year
        - numArray.get(i);\n            if(numSet.contains(temp)){\n                System.out.println(numArray.get(i)
        * temp);             \n            }\n            numSet.add(numArray.get(i));\n        }
        \n\n        } catch (FileNotFoundException ex) {\n        System.out.println(&amp;quot;Error:
        File exception!&amp;quot;);\n    }\n    }   \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import java.io.*;\nimport java.util.*;\npublic
        class Day1_part2 {\n    public static void main(String[] args){\n        try
        {\n        Scanner scanner = new Scanner(new File(&amp;quot;input.txt&amp;quot;));\n        ArrayList&amp;lt;Integer&amp;gt;
        numArray = new ArrayList&amp;lt;Integer&amp;gt;();\n\n        while(scanner.hasNextInt()){\n        numArray.add(scanner.nextInt());    \n        }\n\n        HashSet&amp;lt;Integer&amp;gt;
        numSet = new HashSet&amp;lt;Integer&amp;gt;();\n        int year = 2020;\n\n        for
        (int i = 0; i &amp;lt; numArray.size(); i++){\n        for(int j = i + 1;
        j &amp;lt; numArray.size(); j++) {\n            int temp = year - numArray.get(i)
        - numArray.get(j);\n                if(numSet.contains(temp)){\n                System.out.println(numArray.get(i)
        * temp * numArray.get(j));               \n            }\n            numSet.add(numArray.get(i));                \n        }\n            }
        \n        } catch (FileNotFoundException ex) {\n        System.out.println(&amp;quot;Error:
        File exception!&amp;quot;);\n    }\n    }   \n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geascdo/",
        "subreddit_type": "public", "locked": false, "name": "t1_geascdo", "created":
        1606856978.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_geb0tgf", "id": "geb0tgf", "parent_id":
        "t1_geascdo", "depth": 1, "children": ["geb0tgf"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geasy2d",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "RecDep",
        "can_mod_post": false, "created_utc": 1606857271.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_6bcd1", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Haskell. Is there a function that lifts a binary function to 3 inputs? I
        feel like there is, but I''m drawing a blank right now haha. Slow but the
        input size was small, a better time complexity solution for these problems
        can be done using \\`Data.Map\\`.module Day1 where\n\n`import Control.Monad`\n\n`import
        Control.Arrow`\n\n`twoSum :: Int -&gt; [Int] -&gt; [Int]`\n\n`twoSum n xs
        = [a * b | a &lt;- xs, b &lt;- xs, a + b == n]`\n\n`twoSum'' :: Int -&gt;
        [Int] -&gt; Int`\n\n`twoSum'' n = join (liftM2 (,)) &gt;&gt;&gt; filter ((==
        n) . uncurry (+)) &gt;&gt;&gt; head &gt;&gt;&gt; (uncurry (*))`\n\n`threeSum
        :: Int -&gt; [Int] -&gt; [Int]`\n\n`threeSum n xs = [(a * b * c) | a &lt;-
        xs, b &lt;- xs, c &lt;- xs, a + b + c == n]`\n\n`threeSum'' :: Int -&gt; [Int]
        -&gt; Int`\n\n`threeSum'' n = join (join (liftM3 (,,))) &gt;&gt;&gt; filter
        ((== n) . ap3 (+)) &gt;&gt;&gt; head &gt;&gt;&gt; (ap3 (*))`\n\n`where ap3
        f (a, b, c) = a \\``f\\` `\\``f\\` c\\`  \n\n\nI hate reddit formatting.",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Haskell. Is there a
        function that lifts a binary function to 3 inputs? I feel like there is, but
        I&amp;#39;m drawing a blank right now haha. Slow but the input size was small,
        a better time complexity solution for these problems can be done using `Data.Map`.module
        Day1 where&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;import Control.Monad&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;import
        Control.Arrow&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;twoSum :: Int
        -&amp;gt; [Int] -&amp;gt; [Int]&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;twoSum
        n xs = [a * b | a &amp;lt;- xs, b &amp;lt;- xs, a + b == n]&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;twoSum&amp;#39;
        :: Int -&amp;gt; [Int] -&amp;gt; Int&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;twoSum&amp;#39;
        n = join (liftM2 (,)) &amp;gt;&amp;gt;&amp;gt; filter ((== n) . uncurry (+))
        &amp;gt;&amp;gt;&amp;gt; head &amp;gt;&amp;gt;&amp;gt; (uncurry (*))&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;threeSum
        :: Int -&amp;gt; [Int] -&amp;gt; [Int]&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;threeSum
        n xs = [(a * b * c) | a &amp;lt;- xs, b &amp;lt;- xs, c &amp;lt;- xs, a +
        b + c == n]&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;threeSum&amp;#39;
        :: Int -&amp;gt; [Int] -&amp;gt; Int&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;threeSum&amp;#39;
        n = join (join (liftM3 (,,))) &amp;gt;&amp;gt;&amp;gt; filter ((== n) . ap3
        (+)) &amp;gt;&amp;gt;&amp;gt; head &amp;gt;&amp;gt;&amp;gt; (ap3 (*))&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;where
        ap3 f (a, b, c) = a \\&lt;/code&gt;&lt;code&gt;f\\&lt;/code&gt; &lt;code&gt;\\&lt;/code&gt;&lt;code&gt;f\\&lt;/code&gt;
        c`  &lt;/p&gt;\n\n&lt;p&gt;I hate reddit formatting.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geasy2d/",
        "subreddit_type": "public", "locked": false, "name": "t1_geasy2d", "created":
        1606857271.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_geavugr", "id": "geavugr", "parent_id":
        "t1_geasy2d", "depth": 1, "children": ["geavugr"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geat8vy",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "willkill07",
        "can_mod_post": false, "created_utc": 1606857418.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_7j0ca", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "## C++20 (with Ranges + some Concepts)\n\nNow that C++20 is actually finalized
        (and gcc''s libstdc++ has ranges and concepts), I can use fancy new features
        that don''t rely on third party libraries. Not the most efficient, but zero-copy
        with `ranges::subrange` and a nifty recursive backtracking algorithm make
        this easy to digest. Runs stupid fast.\n\n    #include &lt;algorithm&gt;\n    #include
        &lt;fstream&gt;\n    #include &lt;iostream&gt;\n    #include &lt;iterator&gt;\n    #include
        &lt;optional&gt;\n    #include &lt;ranges&gt;\n    #include &lt;vector&gt;\n\n    std::optional&lt;long
        long&gt;\n    find (std::ranges::contiguous_range auto nums, int level, int
        target = 2020, long long prod = 1ll) {\n      if (level == 0 &amp;&amp; target
        == 0) {\n        return {prod};\n      }\n      if (target &lt; 0) {\n        return
        std::nullopt;\n      }\n      auto iter = std::ranges::begin (nums);\n      auto
        const end = std::ranges::end (nums);\n      for (auto x : nums) {\n        if
        (auto r = find (std::ranges::subrange (++iter, end), level - 1, target - x,
        prod * x); r) {\n          return r;\n        }\n      }\n      return std::nullopt;\n    }\n\n    int
        main (int argc, char* argv[]) {\n      std::ifstream ifs{argv[1]};\n      std::vector&lt;int&gt;
        nums{std::istream_iterator&lt;int&gt;{ifs}, {}};\n      auto part1 = *find
        (nums, 2);\n      auto part2 = *find (nums, 3);\n      std::cout &lt;&lt;
        \"Day 01:\" &lt;&lt; ''\\n''\n                &lt;&lt; \"  Part 1: \" &lt;&lt;
        part1 &lt;&lt; ''\\n''\n                &lt;&lt; \"  Part 2: \" &lt;&lt; part2
        &lt;&lt; ''\\n'';\n    }", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h2&gt;C++20
        (with Ranges + some Concepts)&lt;/h2&gt;\n\n&lt;p&gt;Now that C++20 is actually
        finalized (and gcc&amp;#39;s libstdc++ has ranges and concepts), I can use
        fancy new features that don&amp;#39;t rely on third party libraries. Not the
        most efficient, but zero-copy with &lt;code&gt;ranges::subrange&lt;/code&gt;
        and a nifty recursive backtracking algorithm make this easy to digest. Runs
        stupid fast.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;algorithm&amp;gt;\n#include
        &amp;lt;fstream&amp;gt;\n#include &amp;lt;iostream&amp;gt;\n#include &amp;lt;iterator&amp;gt;\n#include
        &amp;lt;optional&amp;gt;\n#include &amp;lt;ranges&amp;gt;\n#include &amp;lt;vector&amp;gt;\n\nstd::optional&amp;lt;long
        long&amp;gt;\nfind (std::ranges::contiguous_range auto nums, int level, int
        target = 2020, long long prod = 1ll) {\n  if (level == 0 &amp;amp;&amp;amp;
        target == 0) {\n    return {prod};\n  }\n  if (target &amp;lt; 0) {\n    return
        std::nullopt;\n  }\n  auto iter = std::ranges::begin (nums);\n  auto const
        end = std::ranges::end (nums);\n  for (auto x : nums) {\n    if (auto r =
        find (std::ranges::subrange (++iter, end), level - 1, target - x, prod * x);
        r) {\n      return r;\n    }\n  }\n  return std::nullopt;\n}\n\nint main (int
        argc, char* argv[]) {\n  std::ifstream ifs{argv[1]};\n  std::vector&amp;lt;int&amp;gt;
        nums{std::istream_iterator&amp;lt;int&amp;gt;{ifs}, {}};\n  auto part1 = *find
        (nums, 2);\n  auto part2 = *find (nums, 3);\n  std::cout &amp;lt;&amp;lt;
        &amp;quot;Day 01:&amp;quot; &amp;lt;&amp;lt; &amp;#39;\\n&amp;#39;\n            &amp;lt;&amp;lt;
        &amp;quot;  Part 1: &amp;quot; &amp;lt;&amp;lt; part1 &amp;lt;&amp;lt; &amp;#39;\\n&amp;#39;\n            &amp;lt;&amp;lt;
        &amp;quot;  Part 2: &amp;quot; &amp;lt;&amp;lt; part2 &amp;lt;&amp;lt; &amp;#39;\\n&amp;#39;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geat8vy/",
        "subreddit_type": "public", "locked": false, "name": "t1_geat8vy", "created":
        1606857418.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606864203.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geaxi7b", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "mjgtwo",
        "can_mod_post": false, "created_utc": 1606859427.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_15marf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "[NoPaste snippet of TypeScript/TS](https://nopaste.ml/?l=ts#XQAAAQDZBgAAAAAAAAA0m0pnuFI8dAwoq5HhugW+h4lmh5RvdJH+W7FTEySJleR/ZkhKfFs8BlaEVRxTVAJhWKOwuGE7CPXqWT7iibzrlq6A9gd5BWptWES4V1YBUK5dhfwHgPP1IeehsjRggVHqlJZKEojUCTJ/dUwJNvJX37ufKAkCPhhunvplMt0hNs8OT/qUJ9gAJT8eNtGVP5yBsrf15x5fkyspsj0EX5Taj5irSSooRn4xuJA8RR1EeJunCYZbpWegsdhQdZMbMq30FBeYcBhoSprY7z8w0ugdCoI/Au9RJV+3WIr63aK72UyFZuNtxP/Xmf6exb2N7403zdHhASMc1eO0OakH+EneFEaTfcuZYIRCfHdt8e1GvZMR/nECx5Q4gAbScdjshxIOord0mgCpN2lYIvVheMpOXlOmALL+oWX4wecuBQUsJvmcP9iqsFcAwTYaW6QrODMBztny4+Pb3NiHqBQHcSG0K/aE9Dc4EiIAVXX/CLTIJqg9IUVgoDcjQH12VIH8mo7nxwBQM1ylJUjW56XqFXomCGjAfihS8IEW3QbeGYHeQq+TvoZunjLpg1kUa5TZz71RkCsX3Tn7Jc5xJrD4r0X6yMug2YxTcUrkBo+W7qNxIaKZrJnWq8Cr/eQYDUe0Xf2GzfAfS6Sop6sBF4L6nGo5mK3WwyIoRatrn6fyIg+bEDE8lf+0IA4EWZ6n39I2tPKkTHeRQEthkSZkgFYLDD93l1szAjv1gZtHYTetHyP+SKiWM1oVvbCW0ExlEM57N84BdN9AGFPyGXs5BPfrKDf/3uvUQWjavZJgBAWETNVTZKjfvjeXNTn1lOAFqb7nEnzpY2f4Ahc7O2TRpdiBGutmI3ZtMy6gt/hZz4NGRYZppq5uyroJreyF0UjJDa3jZ/+JVLBQ)\n\nBase
        logic is this, created a dictionary (`numbers`) to reduce the loops needed:\n\n    const
        twoNumSum = (values: number[], numbers: {}): number =&gt;\n      values.reduce(\n        (product,
        current) =&gt;\n          numbers[2020 - current] ? current * (2020 - current)
        : product,\n        -1\n      );\n\n    const threeNumSum = (values: number[],
        numbers: {}, answer: number[]) =&gt;\n      values.every((value) =&gt;\n        values.reduce((product:
        boolean, current: number): boolean =&gt; {\n          if (numbers[2020 - current
        - value]) {\n            answer.push(current * (2020 - current - value) *
        value);\n            return false;\n          } else {\n            return
        product;\n          }\n        }, true)\n      );", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://nopaste.ml/?l=ts#XQAAAQDZBgAAAAAAAAA0m0pnuFI8dAwoq5HhugW+h4lmh5RvdJH+W7FTEySJleR/ZkhKfFs8BlaEVRxTVAJhWKOwuGE7CPXqWT7iibzrlq6A9gd5BWptWES4V1YBUK5dhfwHgPP1IeehsjRggVHqlJZKEojUCTJ/dUwJNvJX37ufKAkCPhhunvplMt0hNs8OT/qUJ9gAJT8eNtGVP5yBsrf15x5fkyspsj0EX5Taj5irSSooRn4xuJA8RR1EeJunCYZbpWegsdhQdZMbMq30FBeYcBhoSprY7z8w0ugdCoI/Au9RJV+3WIr63aK72UyFZuNtxP/Xmf6exb2N7403zdHhASMc1eO0OakH+EneFEaTfcuZYIRCfHdt8e1GvZMR/nECx5Q4gAbScdjshxIOord0mgCpN2lYIvVheMpOXlOmALL+oWX4wecuBQUsJvmcP9iqsFcAwTYaW6QrODMBztny4+Pb3NiHqBQHcSG0K/aE9Dc4EiIAVXX/CLTIJqg9IUVgoDcjQH12VIH8mo7nxwBQM1ylJUjW56XqFXomCGjAfihS8IEW3QbeGYHeQq+TvoZunjLpg1kUa5TZz71RkCsX3Tn7Jc5xJrD4r0X6yMug2YxTcUrkBo+W7qNxIaKZrJnWq8Cr/eQYDUe0Xf2GzfAfS6Sop6sBF4L6nGo5mK3WwyIoRatrn6fyIg+bEDE8lf+0IA4EWZ6n39I2tPKkTHeRQEthkSZkgFYLDD93l1szAjv1gZtHYTetHyP+SKiWM1oVvbCW0ExlEM57N84BdN9AGFPyGXs5BPfrKDf/3uvUQWjavZJgBAWETNVTZKjfvjeXNTn1lOAFqb7nEnzpY2f4Ahc7O2TRpdiBGutmI3ZtMy6gt/hZz4NGRYZppq5uyroJreyF0UjJDa3jZ/+JVLBQ\"&gt;NoPaste
        snippet of TypeScript/TS&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Base logic is this,
        created a dictionary (&lt;code&gt;numbers&lt;/code&gt;) to reduce the loops
        needed:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const twoNumSum = (values: number[],
        numbers: {}): number =&amp;gt;\n  values.reduce(\n    (product, current) =&amp;gt;\n      numbers[2020
        - current] ? current * (2020 - current) : product,\n    -1\n  );\n\nconst
        threeNumSum = (values: number[], numbers: {}, answer: number[]) =&amp;gt;\n  values.every((value)
        =&amp;gt;\n    values.reduce((product: boolean, current: number): boolean
        =&amp;gt; {\n      if (numbers[2020 - current - value]) {\n        answer.push(current
        * (2020 - current - value) * value);\n        return false;\n      } else
        {\n        return product;\n      }\n    }, true)\n  );\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geaxi7b/",
        "subreddit_type": "public", "locked": false, "name": "t1_geaxi7b", "created":
        1606859427.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geb4zme",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Chaphasilor",
        "can_mod_post": false, "created_utc": 1606863090.0, "send_replies": true,
        "parent_id": "t1_geaxi7b", "score": 2, "author_fullname": "t2_obfkf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "How long did those two run?  \nHave much faster is using the dictionary?",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;How long did those two
        run?&lt;br/&gt;\nHave much faster is using the dictionary?&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb4zme/",
        "subreddit_type": "public", "locked": false, "name": "t1_geb4zme", "created":
        1606863090.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_geb7n2k", "id": "geb7n2k", "parent_id":
        "t1_geb4zme", "depth": 2, "children": ["geb7n2k"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geb38w8",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606862215.0, "send_replies": true,
        "parent_id": "t1_geaxi7b", "score": 1, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Please add the language to your post to make it easier for folks who Ctrl-F
        the megathreads looking for a specific language.  Thanks!", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": true, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Please add the language to your post to
        make it easier for folks who Ctrl-F the megathreads looking for a specific
        language.  Thanks!&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb38w8/",
        "subreddit_type": "public", "locked": false, "name": "t1_geb38w8", "created":
        1606862215.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geb74w7", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "mjgtwo",
        "can_mod_post": false, "created_utc": 1606864188.0, "send_replies": true,
        "parent_id": "t1_geb38w8", "score": 2, "author_fullname": "t2_15marf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "thanks mate, forgot to do that.", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;thanks mate, forgot to do that.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb74w7/",
        "subreddit_type": "public", "locked": false, "name": "t1_geb74w7", "created":
        1606864188.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606863680.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geb1ylq", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "SecureCone",
        "can_mod_post": false, "created_utc": 1606861573.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_90x8mz9g", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Rust**\n\n    use std::env;\n    use std::io::{self, prelude::*, BufReader};\n    use
        std::fs::File;\n    \n    extern crate itertools;\n    use itertools::Itertools;\n    \n    fn
        main() {\n        let args: Vec&lt;String&gt; = env::args().collect();\n        let
        filename = &amp;args[1];\n        day01(&amp;filename).unwrap();\n    }\n    \n    fn
        combo_sum(inputs: &amp;Vec&lt;i64&gt;, num: usize, sum: i64) -&gt; i64 {\n        for
        num in inputs.iter().combinations(num) {\n            if num.iter().map(|x|
        *x).sum::&lt;i64&gt;() == sum {\n                return num.iter().fold(1,
        |mut ans, &amp;x| {ans *= x; ans});\n            }\n        }\n        panic!(\"No
        answer for {} elements to sum to {}\", num, sum);\n    }\n    \n    fn day01(input:
        &amp;str) -&gt; io::Result&lt;()&gt; {\n        let file = File::open(input).expect(\"Input
        file not found.\");\n        let reader = BufReader::new(file);\n    \n        let
        input: Vec&lt;String&gt; = match reader.lines().collect() {\n            Err(err)
        =&gt; panic!(\"Unknown error reading input: {}\", err),\n            Ok(result)
        =&gt; result,\n        };\n        let input: Vec&lt;i64&gt; = input\n            .iter()\n            .map(|x|
        x.parse::&lt;i64&gt;().unwrap())\n            .collect();\n    \n        //
        Part 1\n        let part1 = combo_sum(&amp;input, 2, 2020);\n        println!(\"Part
        1: {}\", part1);\n    \n        // Part 2\n        let part2 = combo_sum(&amp;input,
        3, 2020);\n        println!(\"Part 2: {}\", part2);\n    \n        Ok(())\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use
        std::env;\nuse std::io::{self, prelude::*, BufReader};\nuse std::fs::File;\n\nextern
        crate itertools;\nuse itertools::Itertools;\n\nfn main() {\n    let args:
        Vec&amp;lt;String&amp;gt; = env::args().collect();\n    let filename = &amp;amp;args[1];\n    day01(&amp;amp;filename).unwrap();\n}\n\nfn
        combo_sum(inputs: &amp;amp;Vec&amp;lt;i64&amp;gt;, num: usize, sum: i64) -&amp;gt;
        i64 {\n    for num in inputs.iter().combinations(num) {\n        if num.iter().map(|x|
        *x).sum::&amp;lt;i64&amp;gt;() == sum {\n            return num.iter().fold(1,
        |mut ans, &amp;amp;x| {ans *= x; ans});\n        }\n    }\n    panic!(&amp;quot;No
        answer for {} elements to sum to {}&amp;quot;, num, sum);\n}\n\nfn day01(input:
        &amp;amp;str) -&amp;gt; io::Result&amp;lt;()&amp;gt; {\n    let file = File::open(input).expect(&amp;quot;Input
        file not found.&amp;quot;);\n    let reader = BufReader::new(file);\n\n    let
        input: Vec&amp;lt;String&amp;gt; = match reader.lines().collect() {\n        Err(err)
        =&amp;gt; panic!(&amp;quot;Unknown error reading input: {}&amp;quot;, err),\n        Ok(result)
        =&amp;gt; result,\n    };\n    let input: Vec&amp;lt;i64&amp;gt; = input\n        .iter()\n        .map(|x|
        x.parse::&amp;lt;i64&amp;gt;().unwrap())\n        .collect();\n\n    // Part
        1\n    let part1 = combo_sum(&amp;amp;input, 2, 2020);\n    println!(&amp;quot;Part
        1: {}&amp;quot;, part1);\n\n    // Part 2\n    let part2 = combo_sum(&amp;amp;input,
        3, 2020);\n    println!(&amp;quot;Part 2: {}&amp;quot;, part2);\n\n    Ok(())\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb1ylq/",
        "subreddit_type": "public", "locked": false, "name": "t1_geb1ylq", "created":
        1606861573.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geb1ywi",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Weemaan1994",
        "can_mod_post": false, "created_utc": 1606861577.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_2qf50r1h", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# R\n\nWorks for n&gt;1 :)\n\n    data &lt;- read.table(\"input.txt\") %&gt;%
        unlist() %&gt;% as.vector()\n    \n    product_of_n_sum &lt;- function(data,
        target = 2020, n = 2) {\n      if (n == 2) {\n        for (first_num in data)
        {\n          second_num &lt;- target - first_num\n          if (second_num
        %in% data) {\n            return(c(first_num, second_num))\n          }\n        }\n      }\n      \n      while
        (n &gt; 2) {\n        for (first_num in data) {\n          second_part &lt;-
        product_of_n_sum(data = data[data != first_num], \n                                          target
        = target-first_num, \n                                          n = n-1)\n          if
        (!is.null(second_part)) {\n            return(c(first_num, second_part))\n          }\n        }\n      }\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;R&lt;/h1&gt;\n\n&lt;p&gt;Works
        for n&amp;gt;1 :)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;data &amp;lt;- read.table(&amp;quot;input.txt&amp;quot;)
        %&amp;gt;% unlist() %&amp;gt;% as.vector()\n\nproduct_of_n_sum &amp;lt;- function(data,
        target = 2020, n = 2) {\n  if (n == 2) {\n    for (first_num in data) {\n      second_num
        &amp;lt;- target - first_num\n      if (second_num %in% data) {\n        return(c(first_num,
        second_num))\n      }\n    }\n  }\n\n  while (n &amp;gt; 2) {\n    for (first_num
        in data) {\n      second_part &amp;lt;- product_of_n_sum(data = data[data
        != first_num], \n                                      target = target-first_num,
        \n                                      n = n-1)\n      if (!is.null(second_part))
        {\n        return(c(first_num, second_part))\n      }\n    }\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb1ywi/",
        "subreddit_type": "public", "locked": false, "name": "t1_geb1ywi", "created":
        1606861577.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geb22xg",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "mszopa",
        "can_mod_post": false, "created_utc": 1606861633.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_4y98pwtb", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "For those of you interested in **Rust solution**: [https://github.com/szopqa/AOC\\_2020/blob/master/src/puzzles/day\\_1/mod.rs](https://github.com/szopqa/AOC_2020/blob/master/src/puzzles/day_1/mod.rs)\n\nWhat
        do you think about this approach? Any algorithms specialist here who can share
        some ideas of optimum way of solving it?", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;For those of you interested in &lt;strong&gt;Rust
        solution&lt;/strong&gt;: &lt;a href=\"https://github.com/szopqa/AOC_2020/blob/master/src/puzzles/day_1/mod.rs\"&gt;https://github.com/szopqa/AOC_2020/blob/master/src/puzzles/day_1/mod.rs&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;What
        do you think about this approach? Any algorithms specialist here who can share
        some ideas of optimum way of solving it?&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb22xg/", "subreddit_type":
        "public", "locked": false, "name": "t1_geb22xg", "created": 1606861633.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "geb5m5w", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "karabatov", "can_mod_post": false, "created_utc":
        1606863407.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_fjzqx", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "C++ solution, without reading
        in all of the numbers first.\n\n[Part 1](https://github.com/karabatov/adventofcode2020/commit/09c54869ee3bd33d4455fb44863d1904f4a6ee2c).
        (single `unordered_map`)\n\n[Part 2](https://github.com/karabatov/adventofcode2020/commit/47e7a174dca2192a45c4690f22c7562d801a064e).
        (`vector` and `unordered_map`, non-generalized)", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;C++ solution, without reading in all of the numbers
        first.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/karabatov/adventofcode2020/commit/09c54869ee3bd33d4455fb44863d1904f4a6ee2c\"&gt;Part
        1&lt;/a&gt;. (single &lt;code&gt;unordered_map&lt;/code&gt;)&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/karabatov/adventofcode2020/commit/47e7a174dca2192a45c4690f22c7562d801a064e\"&gt;Part
        2&lt;/a&gt;. (&lt;code&gt;vector&lt;/code&gt; and &lt;code&gt;unordered_map&lt;/code&gt;,
        non-generalized)&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb5m5w/",
        "subreddit_type": "public", "locked": false, "name": "t1_geb5m5w", "created":
        1606863407.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geb62j1",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "replicaJunction",
        "can_mod_post": false, "created_utc": 1606863635.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_9yq5v", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "[F# solution from a beginner.](https://topaz.github.io/paste/#XQAAAQCIBQAAAAAAAAA2GUrqJXAoTubTom4EdpdS996r1lmn54JxlDMJHFGJidWkrPclsBnCJL3RLcYevBeBtD4l4RmZvlTr4SRnZf/McB/jjEfRJqXPmxsiLz1PWAy6xRsQvl59s/2Ch6usneJbkfkvTFJcXJG4eN/7kNkKa7rs6h5MbVQdJ+uqSHB5df9DsSjPvu+sxV/gOo9MS/AU9Hq8/Eu0clwsTK8fhV+nCsblTGoJS4ssV2MOp4ExuoixQ5e0eXSI41lPeyWWbeseyyknm/s/SHI9e51dpNWeEq71AGitl4QATnNetzRfaMx56ZwiWfekxiP/L1Yfwxtm+XZ4hTdb2HaoiIOblULsCEd+6PqXP4gkjnvDcgk9lrx5IoYZyBoPtt9D/2LNr+RqfJvCUn0gsK8yO0mRpFzE99IDE7knDJfiR80RTro6sjvHbX5uy/Uccz+D8gBlCv11nBzQMRxsjBedhwt610kMPZOa+n6r8byYTm094pdHoPu4OYEc1jc7E7jzRFMG3KFn+JoHzEYjIu1swTkHZ9AFRQ53Nf9QstqEHFTwORf8ertyVkGoTG5iiu/l1tI+5yIq8bZCqeEgNqIsmK1PN/jhfpoSD2b7K8oKILED75ZbcFBgHoRaSoJESZcvxCLCl9zAEA5oKS8uGcfYPl3iB8NXTfOPEN0n8Xm+lpjCNF2J2IadXK31n7kVVDhJmkO3g5HNJEXGN9F+ytQDLpx9uBUbiv+SkQTHydvyCCh7dJJqb41JdP9PQ+uvf9kdtqp34alP87qmX1IlMYv+MfKitouxQsTvepeKxNqVUHWiQCwQ7wKK0NsGol6ab5bi28M2HCLTxFsEIMjgbugT+jFrb3O41WM+7cbY7DZ3NQ5+9tYT1ZXW/zk9fgA=)\n\nI
        needed a bit of help figuring out the \"combinations\" function, but the rest
        is my own. Feedback or criticism welcome.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://topaz.github.io/paste/#XQAAAQCIBQAAAAAAAAA2GUrqJXAoTubTom4EdpdS996r1lmn54JxlDMJHFGJidWkrPclsBnCJL3RLcYevBeBtD4l4RmZvlTr4SRnZf/McB/jjEfRJqXPmxsiLz1PWAy6xRsQvl59s/2Ch6usneJbkfkvTFJcXJG4eN/7kNkKa7rs6h5MbVQdJ+uqSHB5df9DsSjPvu+sxV/gOo9MS/AU9Hq8/Eu0clwsTK8fhV+nCsblTGoJS4ssV2MOp4ExuoixQ5e0eXSI41lPeyWWbeseyyknm/s/SHI9e51dpNWeEq71AGitl4QATnNetzRfaMx56ZwiWfekxiP/L1Yfwxtm+XZ4hTdb2HaoiIOblULsCEd+6PqXP4gkjnvDcgk9lrx5IoYZyBoPtt9D/2LNr+RqfJvCUn0gsK8yO0mRpFzE99IDE7knDJfiR80RTro6sjvHbX5uy/Uccz+D8gBlCv11nBzQMRxsjBedhwt610kMPZOa+n6r8byYTm094pdHoPu4OYEc1jc7E7jzRFMG3KFn+JoHzEYjIu1swTkHZ9AFRQ53Nf9QstqEHFTwORf8ertyVkGoTG5iiu/l1tI+5yIq8bZCqeEgNqIsmK1PN/jhfpoSD2b7K8oKILED75ZbcFBgHoRaSoJESZcvxCLCl9zAEA5oKS8uGcfYPl3iB8NXTfOPEN0n8Xm+lpjCNF2J2IadXK31n7kVVDhJmkO3g5HNJEXGN9F+ytQDLpx9uBUbiv+SkQTHydvyCCh7dJJqb41JdP9PQ+uvf9kdtqp34alP87qmX1IlMYv+MfKitouxQsTvepeKxNqVUHWiQCwQ7wKK0NsGol6ab5bi28M2HCLTxFsEIMjgbugT+jFrb3O41WM+7cbY7DZ3NQ5+9tYT1ZXW/zk9fgA=\"&gt;F#
        solution from a beginner.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I needed a bit of
        help figuring out the &amp;quot;combinations&amp;quot; function, but the rest
        is my own. Feedback or criticism welcome.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb62j1/", "subreddit_type":
        "public", "locked": false, "name": "t1_geb62j1", "created": 1606863635.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 2, "name":
        "t1_gebupux", "id": "gebupux", "parent_id": "t1_geb62j1", "depth": 1, "children":
        ["gebupux"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geb72uc", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ntwilli",
        "can_mod_post": false, "created_utc": 1606864158.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_1ugqq0ae", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# Julia\n\nNew to Julia, but here''s my solution.\n\n    using DelimitedFiles\n    using
        Printf\n    \n    expense = readdlm(\"day1\")\n    n = size(expense)[1, ]\n    \n    for
        i in 1:n\n        rmn = 2020 - expense[i]\n        if rmn in expense\n            @printf
        \"Answer 1 is %f \\n\" expense[i] * rmn\n            break\n        end\n    end\n    \n    for
        i in 1:n, j in 1:n\n        rmn1 = 2020 - expense[i]\n        rmn2 = rmn1
        - expense[j]\n        if rmn2 in expense\n            @printf \"Answer 2 is
        %f \\n\" expense[i] * expense[j] * rmn2\n            break\n        end\n    end",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Julia&lt;/h1&gt;\n\n&lt;p&gt;New
        to Julia, but here&amp;#39;s my solution.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;using
        DelimitedFiles\nusing Printf\n\nexpense = readdlm(&amp;quot;day1&amp;quot;)\nn
        = size(expense)[1, ]\n\nfor i in 1:n\n    rmn = 2020 - expense[i]\n    if
        rmn in expense\n        @printf &amp;quot;Answer 1 is %f \\n&amp;quot; expense[i]
        * rmn\n        break\n    end\nend\n\nfor i in 1:n, j in 1:n\n    rmn1 = 2020
        - expense[i]\n    rmn2 = rmn1 - expense[j]\n    if rmn2 in expense\n        @printf
        &amp;quot;Answer 2 is %f \\n&amp;quot; expense[i] * expense[j] * rmn2\n        break\n    end\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb72uc/",
        "subreddit_type": "public", "locked": false, "name": "t1_geb72uc", "created":
        1606864158.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geb7p6r", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        2, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_geb7p6r", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb7p6r/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606864485.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606864485.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_gebh9x8", "id": "gebh9x8", "parent_id":
        "t1_geb7p6r", "depth": 1, "children": ["gebh9x8"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606866625.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geb8tua", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Lakret",
        "can_mod_post": false, "created_utc": 1606865077.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_6rr3i", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# Rust\n\n    use std::collections::HashSet;\n\n    pub fn solve(input: &amp;str)
        -&gt; Option&lt;i64&gt; {\n      let numbers = parse(input);\n      if let
        Some((x, y)) = find_complement(&amp;numbers, 0) {\n        return Some(x *
        y);\n      }\n\n      None\n    }\n\n    pub fn solve2(input: &amp;str) -&gt;
        Option&lt;i64&gt; {\n      let numbers = parse(input);\n      for z in numbers.iter()
        {\n        if let Some((x, y)) = find_complement(&amp;numbers, *z) {\n          return
        Some(x * y * z);\n        }\n      }\n\n      None\n    }\n\n    fn parse(input:
        &amp;str) -&gt; HashSet&lt;i64&gt; {\n      input\n        .trim_end()\n        .split(\"\\n\")\n        .map(|number|
        number.parse::&lt;i64&gt;().unwrap())\n        .collect::&lt;HashSet&lt;_&gt;&gt;()\n    }\n\n\n    fn
        find_complement(numbers: &amp;HashSet&lt;i64&gt;, z: i64) -&gt; Option&lt;(i64,
        i64)&gt; {\n      for x in numbers.iter() {\n        let y = 2020 - z - x;\n        if
        numbers.contains(&amp;y) {\n          return Some((*x, y));\n        }\n      }\n\n      None\n    }\n\n[Full
        code with tests](https://github.com/Lakret/aoc2020/blob/master/src/d1.rs).
        I''m [live streaming](https://www.youtube.com/watch?v=-vOmV2X4hvU&amp;t=2121s)
        the solutions too.\n\nI went for a medium-lazy version: part 1 pre-calculates
        the expected complement number `2020 - x`, and uses `HashSet` for `O(1)` existence
        check. If the complement number exists, we''ve found the solution. Thus, the
        complexity of the solution is `O(n)`, which is optimal.\n\nThe second part
        is done by combining part 1 with brute force: go through all numbers, fix
        the current number as `z` in the sum, and then find `(x, y)` via the part
        1 solution, but with `2020` replaced by `2020 - z`. This makes it `O(n^2)`.",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Rust&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;use
        std::collections::HashSet;\n\npub fn solve(input: &amp;amp;str) -&amp;gt;
        Option&amp;lt;i64&amp;gt; {\n  let numbers = parse(input);\n  if let Some((x,
        y)) = find_complement(&amp;amp;numbers, 0) {\n    return Some(x * y);\n  }\n\n  None\n}\n\npub
        fn solve2(input: &amp;amp;str) -&amp;gt; Option&amp;lt;i64&amp;gt; {\n  let
        numbers = parse(input);\n  for z in numbers.iter() {\n    if let Some((x,
        y)) = find_complement(&amp;amp;numbers, *z) {\n      return Some(x * y * z);\n    }\n  }\n\n  None\n}\n\nfn
        parse(input: &amp;amp;str) -&amp;gt; HashSet&amp;lt;i64&amp;gt; {\n  input\n    .trim_end()\n    .split(&amp;quot;\\n&amp;quot;)\n    .map(|number|
        number.parse::&amp;lt;i64&amp;gt;().unwrap())\n    .collect::&amp;lt;HashSet&amp;lt;_&amp;gt;&amp;gt;()\n}\n\n\nfn
        find_complement(numbers: &amp;amp;HashSet&amp;lt;i64&amp;gt;, z: i64) -&amp;gt;
        Option&amp;lt;(i64, i64)&amp;gt; {\n  for x in numbers.iter() {\n    let y
        = 2020 - z - x;\n    if numbers.contains(&amp;amp;y) {\n      return Some((*x,
        y));\n    }\n  }\n\n  None\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/Lakret/aoc2020/blob/master/src/d1.rs\"&gt;Full code
        with tests&lt;/a&gt;. I&amp;#39;m &lt;a href=\"https://www.youtube.com/watch?v=-vOmV2X4hvU&amp;amp;t=2121s\"&gt;live
        streaming&lt;/a&gt; the solutions too.&lt;/p&gt;\n\n&lt;p&gt;I went for a
        medium-lazy version: part 1 pre-calculates the expected complement number
        &lt;code&gt;2020 - x&lt;/code&gt;, and uses &lt;code&gt;HashSet&lt;/code&gt;
        for &lt;code&gt;O(1)&lt;/code&gt; existence check. If the complement number
        exists, we&amp;#39;ve found the solution. Thus, the complexity of the solution
        is &lt;code&gt;O(n)&lt;/code&gt;, which is optimal.&lt;/p&gt;\n\n&lt;p&gt;The
        second part is done by combining part 1 with brute force: go through all numbers,
        fix the current number as &lt;code&gt;z&lt;/code&gt; in the sum, and then
        find &lt;code&gt;(x, y)&lt;/code&gt; via the part 1 solution, but with &lt;code&gt;2020&lt;/code&gt;
        replaced by &lt;code&gt;2020 - z&lt;/code&gt;. This makes it &lt;code&gt;O(n^2)&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb8tua/",
        "subreddit_type": "public", "locked": false, "name": "t1_geb8tua", "created":
        1606865077.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606925002.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gebbsdv", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "blacksqr",
        "can_mod_post": false, "created_utc": 1606866668.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_4nylf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Tcl:\n\npart 1:\n\n~~~\nproc aocD1P1 {expenseList} {\n\nforeach line $expenseList
        {\n\tset complement [expr {2020 - $line}]\n\tif {$complement in $expenseList}
        {\n\t\tif {$complement == $line} {\n\t\t\tif {[llength [lsearch -all $expenseList
        $line]] == 1} {continue}\n\t\t}\n\t\tbreak\n\t}\n}\n\nexpr {$line * $complement}\n}\n~~~\n\n(executes
        in about 160 microseconds)\n\npart 2:\n\n~~~\nproc aocD1P2 {expenseList} {\n\nset
        expenseLength [llength $expenseList]\n\nfor {set i 0} {$i &lt; $expenseLength}
        {incr i} {\n\tset first [lindex $expenseList $i]\n\t\n\tfor {set j $i ; incr
        j} {$j &lt; $expenseLength} {incr j} {\n\t\t\n\t\tset second [lindex $expenseList
        $j]\n\t\tset complement [expr {2020 - ($first + $second)}]\n\t\t\n\t\tif {\n\t\t\t[set
        k [lsearch $expenseList $complement]] &gt; -1 \n\t\t\t\t&amp;&amp; \n\t\t\t$k
        ni \"$i $j\"\n\t\t} {\n\t\t\treturn [expr {$first * $second * $complement}]\n\t\t}\n\t}\n}\n\n}\n~~~\n\n(executes
        in about 30 milliseconds)", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Tcl:&lt;/p&gt;\n\n&lt;p&gt;part
        1:&lt;/p&gt;\n\n&lt;p&gt;~~~\nproc aocD1P1 {expenseList} {&lt;/p&gt;\n\n&lt;p&gt;foreach
        line $expenseList {\n    set complement [expr {2020 - $line}]\n    if {$complement
        in $expenseList} {\n        if {$complement == $line} {\n            if {[llength
        [lsearch -all $expenseList $line]] == 1} {continue}\n        }\n        break\n    }\n}&lt;/p&gt;\n\n&lt;p&gt;expr
        {$line * $complement}\n}\n~~~&lt;/p&gt;\n\n&lt;p&gt;(executes in about 160
        microseconds)&lt;/p&gt;\n\n&lt;p&gt;part 2:&lt;/p&gt;\n\n&lt;p&gt;~~~\nproc
        aocD1P2 {expenseList} {&lt;/p&gt;\n\n&lt;p&gt;set expenseLength [llength $expenseList]&lt;/p&gt;\n\n&lt;p&gt;for
        {set i 0} {$i &amp;lt; $expenseLength} {incr i} {\n    set first [lindex $expenseList
        $i]&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for {set j $i ; incr j} {$j &amp;lt;
        $expenseLength} {incr j} {\n\n    set second [lindex $expenseList $j]\n    set
        complement [expr {2020 - ($first + $second)}]\n\n    if {\n        [set k
        [lsearch $expenseList $complement]] &amp;gt; -1 \n            &amp;amp;&amp;amp;
        \n        $k ni &amp;quot;$i $j&amp;quot;\n    } {\n        return [expr {$first
        * $second * $complement}]\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n\n&lt;p&gt;}\n~~~&lt;/p&gt;\n\n&lt;p&gt;(executes
        in about 30 milliseconds)&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebbsdv/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebbsdv", "created":
        1606866668.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gebe5ge",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606867977.0, "send_replies": true,
        "parent_id": "t1_gebbsdv", "score": 2, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "This code is really hard to read on old.reddit.  Could you please edit it
        using old.reddit''s four-spaces formatting instead of new.reddit''s triple
        backticks (or triple ~ in your case)?  Note that if you''re using the visual
        editor, you may have to \"Switch to Markdown\" to get Reddit to understand
        the formatting properly.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": true, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This
        code is really hard to read on old.reddit.  Could you please edit it using
        old.reddit&amp;#39;s four-spaces formatting instead of new.reddit&amp;#39;s
        triple backticks (or triple ~ in your case)?  Note that if you&amp;#39;re
        using the visual editor, you may have to &amp;quot;Switch to Markdown&amp;quot;
        to get Reddit to understand the formatting properly.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebe5ge/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebe5ge", "created":
        1606867977.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gebdwoh", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Surak42314",
        "can_mod_post": false, "created_utc": 1606867840.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_26vk1sjp", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "    \n    //I used scanner simply because I am not very fluent with file
        io in java\n    //arr is an ArrayList&lt;Integer&gt; object holding the prices.
        Used Scanner and try/catch with a parseint() to convert multiple input lines
        to the ArrayList\n        for (int i = 0; i &lt; arr.size(); i ++){\n          int
        a = arr.get(i);\n          for (int j = i+1; j &lt; arr.size(); j++){\n            int
        b = arr.get(j);\n            for (int k = j+1; k &lt; arr.size(); k++){\n              int
        c = arr.get(k);\n              if (a+b+c == 2020)\n              System.out.println(a*b*c);\n            }\n          }\n        }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;//I used
        scanner simply because I am not very fluent with file io in java\n//arr is
        an ArrayList&amp;lt;Integer&amp;gt; object holding the prices. Used Scanner
        and try/catch with a parseint() to convert multiple input lines to the ArrayList\n    for
        (int i = 0; i &amp;lt; arr.size(); i ++){\n      int a = arr.get(i);\n      for
        (int j = i+1; j &amp;lt; arr.size(); j++){\n        int b = arr.get(j);\n        for
        (int k = j+1; k &amp;lt; arr.size(); k++){\n          int c = arr.get(k);\n          if
        (a+b+c == 2020)\n          System.out.println(a*b*c);\n        }\n      }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebdwoh/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebdwoh", "created":
        1606867840.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gebgf3j",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "AtomicGreenBean",
        "can_mod_post": false, "created_utc": 1606869241.0, "send_replies": true,
        "parent_id": "t1_gebdwoh", "score": 2, "author_fullname": "t2_90e9a", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I did the same sort of thing with Javascript. It is naive, but with the small
        dataset I was ok with it.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        did the same sort of thing with Javascript. It is naive, but with the small
        dataset I was ok with it.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebgf3j/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebgf3j", "created":
        1606869241.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gebdy00", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        2, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_gebdy00", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebdy00/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606867860.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606867860.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind":
        "more", "data": {"count": 4, "name": "t1_gebfgb4", "id": "gebfgb4", "parent_id":
        "t1_gebdy00", "depth": 1, "children": ["gebfgb4"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gebftfl",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ZoDalek",
        "can_mod_post": false, "created_utc": 1606868905.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_12jkz0", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**C#**\n\nHad another naive Linq solution before, but here''s [a nicer one](https://github.com/sjmulder/aoc/blob/master/2020/day01-cs-combine/Program.cs)
        with more efficient combination generator.\n\nMain method is now very simple:\n\n    var
        nrs = File.ReadAllLines(\"input\").Select(int.Parse).ToArray();\n    Console.WriteLine(nrs.Combine(2).First(x
        =&gt; x.Sum() == 2020).Product());\n    Console.WriteLine(nrs.Combine(3).First(x
        =&gt; x.Sum() == 2020).Product());", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;C#&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Had
        another naive Linq solution before, but here&amp;#39;s &lt;a href=\"https://github.com/sjmulder/aoc/blob/master/2020/day01-cs-combine/Program.cs\"&gt;a
        nicer one&lt;/a&gt; with more efficient combination generator.&lt;/p&gt;\n\n&lt;p&gt;Main
        method is now very simple:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var nrs = File.ReadAllLines(&amp;quot;input&amp;quot;).Select(int.Parse).ToArray();\nConsole.WriteLine(nrs.Combine(2).First(x
        =&amp;gt; x.Sum() == 2020).Product());\nConsole.WriteLine(nrs.Combine(3).First(x
        =&amp;gt; x.Sum() == 2020).Product());\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebftfl/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebftfl", "created":
        1606868905.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_gebh9oy", "id": "gebh9oy", "parent_id":
        "t1_gebftfl", "depth": 1, "children": ["gebh9oy", "gebvcnx"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gebgpfi",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "rigglesbee",
        "can_mod_post": false, "created_utc": 1606869403.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_xac1d", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "#rust\n\nhttps://gitlab.com/ryanobeirne/adventofcode/-/blob/2020/src/day01.rs\n\nThis
        is a basic brute force method, trying every combination until we find a match.",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;rust&lt;/h1&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://gitlab.com/ryanobeirne/adventofcode/-/blob/2020/src/day01.rs\"&gt;https://gitlab.com/ryanobeirne/adventofcode/-/blob/2020/src/day01.rs&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This
        is a basic brute force method, trying every combination until we find a match.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebgpfi/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebgpfi", "created":
        1606869403.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gebhpca",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "_user_name_here_",
        "can_mod_post": false, "created_utc": 1606869955.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_15lk3m", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "## C#\n\n    public class Day1Solution\n    {\n        private IFileReader
        _fileReader;\n        private List&lt;int&gt; _expenses;\n    \n        public
        Day1Solution(IFileReader fileReader)\n        {\n            _fileReader =
        fileReader;\n            _expenses = InitExpenses();\n        }\n    \n        public
        void Solve()\n        {\n            var part1Answer = GetProductOfExpenses(2);\n            Console.WriteLine($\"Part
        1: {part1Answer}\");\n    \n            var part2Answer = GetProductOfExpenses(3);\n            Console.WriteLine($\"Part
        2: {part2Answer}\");\n        }\n    \n        public int GetProductOfExpenses(int
        numberOfExpenses)\n        {\n            var combos = CombinationsExtention.GetCombinations(_expenses,
        numberOfExpenses);\n            var foundExpenses = combos.Where(c =&gt; c.Sum()
        == 2020).FirstOrDefault();\n            var answer = foundExpenses.Aggregate(1,
        (a, b) =&gt; a * b); ;\n    \n            return answer;\n        }\n    \n        private
        List&lt;int&gt; InitExpenses()\n        {\n            return _fileReader.ReadFileToIntArray(\"Day1/data.json\");\n        }\n    }\n    \n    public
        static class CombinationsExtention\n    {\n        public static IEnumerable&lt;IEnumerable&lt;T&gt;&gt;
        GetCombinations&lt;T&gt;(IEnumerable&lt;T&gt; list, int length) where T :
        IComparable\n        {\n            if (length == 1) return list.Select(t
        =&gt; new T[] { t });\n            return GetCombinations(list, length - 1)\n                .SelectMany(t
        =&gt; list.Where(o =&gt; o.CompareTo(t.Last()) &gt; 0),\n                    (t1,
        t2) =&gt; t1.Concat(new T[] { t2 }));\n        }\n    }", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;h2&gt;C&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;public
        class Day1Solution\n{\n    private IFileReader _fileReader;\n    private List&amp;lt;int&amp;gt;
        _expenses;\n\n    public Day1Solution(IFileReader fileReader)\n    {\n        _fileReader
        = fileReader;\n        _expenses = InitExpenses();\n    }\n\n    public void
        Solve()\n    {\n        var part1Answer = GetProductOfExpenses(2);\n        Console.WriteLine($&amp;quot;Part
        1: {part1Answer}&amp;quot;);\n\n        var part2Answer = GetProductOfExpenses(3);\n        Console.WriteLine($&amp;quot;Part
        2: {part2Answer}&amp;quot;);\n    }\n\n    public int GetProductOfExpenses(int
        numberOfExpenses)\n    {\n        var combos = CombinationsExtention.GetCombinations(_expenses,
        numberOfExpenses);\n        var foundExpenses = combos.Where(c =&amp;gt; c.Sum()
        == 2020).FirstOrDefault();\n        var answer = foundExpenses.Aggregate(1,
        (a, b) =&amp;gt; a * b); ;\n\n        return answer;\n    }\n\n    private
        List&amp;lt;int&amp;gt; InitExpenses()\n    {\n        return _fileReader.ReadFileToIntArray(&amp;quot;Day1/data.json&amp;quot;);\n    }\n}\n\npublic
        static class CombinationsExtention\n{\n    public static IEnumerable&amp;lt;IEnumerable&amp;lt;T&amp;gt;&amp;gt;
        GetCombinations&amp;lt;T&amp;gt;(IEnumerable&amp;lt;T&amp;gt; list, int length)
        where T : IComparable\n    {\n        if (length == 1) return list.Select(t
        =&amp;gt; new T[] { t });\n        return GetCombinations(list, length - 1)\n            .SelectMany(t
        =&amp;gt; list.Where(o =&amp;gt; o.CompareTo(t.Last()) &amp;gt; 0),\n                (t1,
        t2) =&amp;gt; t1.Concat(new T[] { t2 }));\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebhpca/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebhpca", "created":
        1606869955.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gebi4f8", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        2, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "my pretty lazy python solution\n\n    import\u00a0requests,\u00a0browser_cookie3,\u00a0json,\u00a0functools\n    from\u00a0itertools\u00a0import\u00a0combinations\n    \n    cj\u00a0=\u00a0browser_cookie3.chrome(domain_name=''.adventofcode.com'')\n    resp\u00a0=\u00a0requests.get(\"https://adventofcode.com/2020/day/1/input\",\u00a0cookies=cj)\n    nums\u00a0=
        sorted([int(x)\u00a0for\u00a0x\u00a0in\u00a0resp.content.decode(''utf-8'').split(''\\n'')\u00a0if\u00a0x])\n    \n    #\u00a0part\u00a01\n    def
        sumofpairs(n:\u00a0list(int),\u00a0y:\u00a0int)\u00a0-&gt;\u00a0tuple(int):
        \u00a0\u00a0\u00a0\u00a0\n        diff\u00a0=\u00a0{y-x:x\u00a0for\u00a0x\u00a0in\u00a0n}
        \n        for\u00a0num\u00a0in\u00a0n: \n            if\u00a0num\u00a0in\u00a0diff:         \n                return\u00a0num,\u00a0diff[num]\n    \n    print(functools.reduce(lambda\u00a0x,\u00a0y:\u00a0x\u00a0*\u00a0y,\u00a0sumofpairs(nums,\u00a02020)))\n    \n    #\u00a0part\u00a02\n    def
        sumofthreenumbers(n:\u00a0list(int),\u00a0y:\u00a0int)\u00a0-&gt;\u00a0tuple(int):\n        #eliminate\u00a0numbers\u00a0whose\u00a0y\u00a0-\u00a0n\u00a0is\u00a0less\u00a0than\u00a0any\u00a0numbers\u00a0in\u00a0the\u00a0list\n    \u00a0\u00a0\u00a0\u00a0n\u00a0=\u00a0[x\u00a0for\u00a0x\u00a0in\u00a0n\u00a0if\u00a0y-x\u00a0&gt;=\u00a0n[0]]\n    \u00a0   #lazy\u00a0solution\u00a0using\u00a0combs\n    \u00a0\u00a0\u00a0\u00a0com\u00a0=
        set(combinations(n,\u00a03)) \n        for\u00a0x\u00a0in\u00a0com: \n            if
        sum(x)\u00a0==\u00a0y: \n                return(x)\n    \n    print(functools.reduce(lambda\u00a0x,\u00a0y:\u00a0x\u00a0*\u00a0y,\u00a0sumofthreenumbers(nums,\u00a02020)))",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_gebi4f8",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;my
        pretty lazy python solution&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import\u00a0requests,\u00a0browser_cookie3,\u00a0json,\u00a0functools\nfrom\u00a0itertools\u00a0import\u00a0combinations\n\ncj\u00a0=\u00a0browser_cookie3.chrome(domain_name=&amp;#39;.adventofcode.com&amp;#39;)\nresp\u00a0=\u00a0requests.get(&amp;quot;https://adventofcode.com/2020/day/1/input&amp;quot;,\u00a0cookies=cj)\nnums\u00a0=
        sorted([int(x)\u00a0for\u00a0x\u00a0in\u00a0resp.content.decode(&amp;#39;utf-8&amp;#39;).split(&amp;#39;\\n&amp;#39;)\u00a0if\u00a0x])\n\n#\u00a0part\u00a01\ndef
        sumofpairs(n:\u00a0list(int),\u00a0y:\u00a0int)\u00a0-&amp;gt;\u00a0tuple(int):
        \u00a0\u00a0\u00a0\u00a0\n    diff\u00a0=\u00a0{y-x:x\u00a0for\u00a0x\u00a0in\u00a0n}
        \n    for\u00a0num\u00a0in\u00a0n: \n        if\u00a0num\u00a0in\u00a0diff:         \n            return\u00a0num,\u00a0diff[num]\n\nprint(functools.reduce(lambda\u00a0x,\u00a0y:\u00a0x\u00a0*\u00a0y,\u00a0sumofpairs(nums,\u00a02020)))\n\n#\u00a0part\u00a02\ndef
        sumofthreenumbers(n:\u00a0list(int),\u00a0y:\u00a0int)\u00a0-&amp;gt;\u00a0tuple(int):\n    #eliminate\u00a0numbers\u00a0whose\u00a0y\u00a0-\u00a0n\u00a0is\u00a0less\u00a0than\u00a0any\u00a0numbers\u00a0in\u00a0the\u00a0list\n\u00a0\u00a0\u00a0\u00a0n\u00a0=\u00a0[x\u00a0for\u00a0x\u00a0in\u00a0n\u00a0if\u00a0y-x\u00a0&amp;gt;=\u00a0n[0]]\n\u00a0   #lazy\u00a0solution\u00a0using\u00a0combs\n\u00a0\u00a0\u00a0\u00a0com\u00a0=
        set(combinations(n,\u00a03)) \n    for\u00a0x\u00a0in\u00a0com: \n        if
        sum(x)\u00a0==\u00a0y: \n            return(x)\n\nprint(functools.reduce(lambda\u00a0x,\u00a0y:\u00a0x\u00a0*\u00a0y,\u00a0sumofthreenumbers(nums,\u00a02020)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebi4f8/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606870187.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606870187.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gebjbwq",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "KayCeez",
        "can_mod_post": false, "created_utc": 1606870856.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_kai7v", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "JavaScript:\n\n    let input = document.getElementsByTagName(\"pre\")[0].innerText.split(\"\\n\");\n    for
        (i = 0; i &lt; input.length; i++) {\n        input[i] = Number(input[i]);\n    }\n    loop1:\n        for
        (i = 0; i &lt; input.length; i++) {\n            for (x = i + 1; x &lt; input.length;
        x++) {\n                for (j = x + 1; j &lt; input.length; j++) {\n                    if
        (input[i] + input[x] + input[j] == 2020) {\n                        console.log(\"Correct
        Inputs: \" + input[i] + \" + \" + input[x] + \" + \" + input[j]);\n                        break
        loop1;\n                    }\n                }\n            }\n        }\n    console.log(\"input[i]
        * input[x] * input[j] == \" + (input[i] * input[x] * input[j]));\nJust checks
        each sum in order until it finds a match. Definitely new to this, so feel
        free to lmk if you have any critiques", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;JavaScript:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let
        input = document.getElementsByTagName(&amp;quot;pre&amp;quot;)[0].innerText.split(&amp;quot;\\n&amp;quot;);\nfor
        (i = 0; i &amp;lt; input.length; i++) {\n    input[i] = Number(input[i]);\n}\nloop1:\n    for
        (i = 0; i &amp;lt; input.length; i++) {\n        for (x = i + 1; x &amp;lt;
        input.length; x++) {\n            for (j = x + 1; j &amp;lt; input.length;
        j++) {\n                if (input[i] + input[x] + input[j] == 2020) {\n                    console.log(&amp;quot;Correct
        Inputs: &amp;quot; + input[i] + &amp;quot; + &amp;quot; + input[x] + &amp;quot;
        + &amp;quot; + input[j]);\n                    break loop1;\n                }\n            }\n        }\n    }\nconsole.log(&amp;quot;input[i]
        * input[x] * input[j] == &amp;quot; + (input[i] * input[x] * input[j]));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Just
        checks each sum in order until it finds a match. Definitely new to this, so
        feel free to lmk if you have any critiques&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebjbwq/", "subreddit_type":
        "public", "locked": false, "name": "t1_gebjbwq", "created": 1606870856.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gebjdgw", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "nomelettes", "can_mod_post": false, "created_utc":
        1606870880.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_c3nk7", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "Learning C#.\n\n[Github
        link](https://github.com/Jordanb1997/adventofcode2020/blob/master/advent1/Program.cs)\n\nNot
        the greatest but pretty readable. Im pretty out of practice after gradutating
        early this year so its a great time to learn.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Learning C#.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/Jordanb1997/adventofcode2020/blob/master/advent1/Program.cs\"&gt;Github
        link&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Not the greatest but pretty readable.
        Im pretty out of practice after gradutating early this year so its a great
        time to learn.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebjdgw/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebjdgw", "created":
        1606870880.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606874152.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gebkep2", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "curlymeatball38",
        "can_mod_post": false, "created_utc": 1606871453.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_4szgs", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Simple, quick and dirty, Python solution.\n\n[https://github.com/FractalBoy/advent-of-code-2020/blob/main/day1\\_part1.py](https://github.com/FractalBoy/advent-of-code-2020/blob/main/day1_part1.py)\n\n[https://github.com/FractalBoy/advent-of-code-2020/blob/main/day1\\_part2.py](https://github.com/FractalBoy/advent-of-code-2020/blob/main/day1_part2.py)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Simple, quick and dirty,
        Python solution.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/FractalBoy/advent-of-code-2020/blob/main/day1_part1.py\"&gt;https://github.com/FractalBoy/advent-of-code-2020/blob/main/day1_part1.py&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/FractalBoy/advent-of-code-2020/blob/main/day1_part2.py\"&gt;https://github.com/FractalBoy/advent-of-code-2020/blob/main/day1_part2.py&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebkep2/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebkep2", "created":
        1606871453.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gebkezv",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ceochronos",
        "can_mod_post": false, "created_utc": 1606871457.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_wt5v3", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "TypeScript + oclif\n\n[Part A and B](https://gitlab.com/az-dev/AoC/AoC-2020/-/blob/master/src/AoC-2020/aoc-day01.ts)\n\nRepo:
        [AoC-2020](https://gitlab.com/az-dev/AoC/AoC-2020)\n\nComments are welcome!
        :-)", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;TypeScript
        + oclif&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://gitlab.com/az-dev/AoC/AoC-2020/-/blob/master/src/AoC-2020/aoc-day01.ts\"&gt;Part
        A and B&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Repo: &lt;a href=\"https://gitlab.com/az-dev/AoC/AoC-2020\"&gt;AoC-2020&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Comments
        are welcome! :-)&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebkezv/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebkezv", "created":
        1606871457.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gebmnz0",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "rbarden",
        "can_mod_post": false, "created_utc": 1606872712.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_66848hnc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Here''s a PHP solution:    \n    \n    function day1a() {\n        $numbers
        = array_map(function ($i) {\n            return (int) $i;\n        }, explode(\"\\n\",
        file_get_contents(''input/day1.txt'')));\n\n        $lookup = array_fill_keys($numbers,
        true);\n\n        $target = 2020;\n\n        foreach ($numbers as $number)
        {\n            if ($lookup[$target - $number] ?? false) {\n                return
        $number * ($target - $number);\n            } \n        }\n    }\n\n    function
        day1b() {\n        $numbers = array_map(function ($i) {\n            return
        (int) $i;\n        }, explode(\"\\n\", file_get_contents(''input/day1.txt'')));\n\n        $lookup
        = array_fill_keys($numbers, true);\n\n        $target = 2020;\n\n        foreach
        ($numbers as $number) {\n            foreach ($numbers as $secondNumber) {\n                if
        (($twoSum = $number + $secondNumber) &gt; $target) continue;\n                if
        ($lookup[$target - $twoSum] ?? false) {\n                    return $number
        * $secondNumber * ($target - $twoSum);\n                }\n            }\n        }\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s a PHP
        solution:    &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function day1a() {\n    $numbers
        = array_map(function ($i) {\n        return (int) $i;\n    }, explode(&amp;quot;\\n&amp;quot;,
        file_get_contents(&amp;#39;input/day1.txt&amp;#39;)));\n\n    $lookup = array_fill_keys($numbers,
        true);\n\n    $target = 2020;\n\n    foreach ($numbers as $number) {\n        if
        ($lookup[$target - $number] ?? false) {\n            return $number * ($target
        - $number);\n        } \n    }\n}\n\nfunction day1b() {\n    $numbers = array_map(function
        ($i) {\n        return (int) $i;\n    }, explode(&amp;quot;\\n&amp;quot;,
        file_get_contents(&amp;#39;input/day1.txt&amp;#39;)));\n\n    $lookup = array_fill_keys($numbers,
        true);\n\n    $target = 2020;\n\n    foreach ($numbers as $number) {\n        foreach
        ($numbers as $secondNumber) {\n            if (($twoSum = $number + $secondNumber)
        &amp;gt; $target) continue;\n            if ($lookup[$target - $twoSum] ??
        false) {\n                return $number * $secondNumber * ($target - $twoSum);\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebmnz0/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebmnz0", "created":
        1606872712.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gebmpyg",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Mermoose",
        "can_mod_post": false, "created_utc": 1606872743.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_bppiq", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Ruby:\n\n    require ''set''\n    \n    NUMBERS = File.read(''p1-input.txt'').split(\"\\n\").map(&amp;:to_i)\n    \n    def
        product_of_entries_that_sum_to(sum, num_nums)\n      sum_to_2020 = NUMBERS.combination(num_nums).find
        { |nums| nums.reduce(&amp;:+) == sum }\n      sum_to_2020.reduce(&amp;:*)\n    end\n    \n    puts
        product_of_entries_that_sum_to(2020, 2)\n    puts product_of_entries_that_sum_to(2020,
        3)", "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ruby:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;require
        &amp;#39;set&amp;#39;\n\nNUMBERS = File.read(&amp;#39;p1-input.txt&amp;#39;).split(&amp;quot;\\n&amp;quot;).map(&amp;amp;:to_i)\n\ndef
        product_of_entries_that_sum_to(sum, num_nums)\n  sum_to_2020 = NUMBERS.combination(num_nums).find
        { |nums| nums.reduce(&amp;amp;:+) == sum }\n  sum_to_2020.reduce(&amp;amp;:*)\nend\n\nputs
        product_of_entries_that_sum_to(2020, 2)\nputs product_of_entries_that_sum_to(2020,
        3)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebmpyg/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebmpyg", "created":
        1606872743.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_gebmqvp", "id": "gebmqvp", "parent_id":
        "t1_gebmpyg", "depth": 1, "children": ["gebmqvp"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gebmrn5",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "homarlone26",
        "can_mod_post": false, "created_utc": 1606872769.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_2ji10vew", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "It''s this good for a **Go** newbie?\n\n&amp;#x200B;\n\n    package main\n    \n    import(\n    \t\"fmt\"\n    \t\"bufio\"\n    \t\"os\"\n    \t\"strconv\"\n    )\n    \n    var
        target = 2020\n    \n    func  main()  {\n    \tpart1()\n    \tpart2()\n    \n    }\n    \n    func
        part1()  {\n        var ids = make(map[int]int)\n        file, _ := os.Open(\"input.csv\")
        \n        scanner := bufio.NewScanner(file) \n        scanner.Split(bufio.ScanLines)
        \n    \n        for scanner.Scan() {\n    \t\tline, _ := strconv.Atoi(scanner.Text())
        \n    \t\tids[line] = line\n    \t\tif val, boo := ids[target - line]; boo
        {\n    \t\t\tfmt.Println(val * line)\n    \t\t\treturn\n    \t\t}\n    \t}
        \t\t\n        file.Close() \n    }\n    \n    func part2()  {\n        var
        ids = make(map[int]int)\n        file, _ := os.Open(\"input.csv\") \n        scanner
        := bufio.NewScanner(file) \n        scanner.Split(bufio.ScanLines) \n    \n        for
        scanner.Scan() {\n    \t\tline, _ := strconv.Atoi(scanner.Text()) \n    \t\tids[line]
        = line\n    \t\t\n    \t\tfor value := range ids {\n    \t\t\tif val, boo
        := ids[target - line - value]; boo {\n    \t\t\t\tfmt.Println(line * value
        * val)\n    \t\t\t\treturn\n    \t\t\t}\n    \t\t}\n    \t} \t\t\n        file.Close()
        \t\n    }", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s
        this good for a &lt;strong&gt;Go&lt;/strong&gt; newbie?&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package
        main\n\nimport(\n    &amp;quot;fmt&amp;quot;\n    &amp;quot;bufio&amp;quot;\n    &amp;quot;os&amp;quot;\n    &amp;quot;strconv&amp;quot;\n)\n\nvar
        target = 2020\n\nfunc  main()  {\n    part1()\n    part2()\n\n}\n\nfunc part1()  {\n    var
        ids = make(map[int]int)\n    file, _ := os.Open(&amp;quot;input.csv&amp;quot;)
        \n    scanner := bufio.NewScanner(file) \n    scanner.Split(bufio.ScanLines)
        \n\n    for scanner.Scan() {\n        line, _ := strconv.Atoi(scanner.Text())
        \n        ids[line] = line\n        if val, boo := ids[target - line]; boo
        {\n            fmt.Println(val * line)\n            return\n        }\n    }       \n    file.Close()
        \n}\n\nfunc part2()  {\n    var ids = make(map[int]int)\n    file, _ := os.Open(&amp;quot;input.csv&amp;quot;)
        \n    scanner := bufio.NewScanner(file) \n    scanner.Split(bufio.ScanLines)
        \n\n    for scanner.Scan() {\n        line, _ := strconv.Atoi(scanner.Text())
        \n        ids[line] = line\n\n        for value := range ids {\n            if
        val, boo := ids[target - line - value]; boo {\n                fmt.Println(line
        * value * val)\n                return\n            }\n        }\n    }       \n    file.Close()    \n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebmrn5/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebmrn5", "created":
        1606872769.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606884765.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gebn1q2", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "improviseallday",
        "can_mod_post": false, "created_utc": 1606872927.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_9s94l", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "[Python (Part One: O(nlogn)\\*, Part Two: O(n\\^2))](https://topaz.github.io/paste/#XQAAAQDLAwAAAAAAAAAzHIoib6pXbueH4X9F244lVRDcOZab5q1+VXY/ex42qR7D+Ra6iWKOi50xAS1kdGJY4D6ZZhuQJ0+DdGMdStyVupHMZboVD7hf1AVQkg5hksGoKwAc3hfvRTi2P5fXIVG3arRP4Kvq39oLBJfn8cTyZn75qDByIxBLZoyJkOlWRS6Idnb70PdqWxrbUwic7iLicJN2Gr/egbnIoecau2zcGFUokVTkvx0xOyyncIaBHYM3WcggNyK3oOIP7b+2di1Rm2laBke6qGmxdLuzuOF3RzvwSLuAm8BF1BqxvfoC1cKX3+ewBXBe56SVLBV2PKv0Td7yd6DJKiGARAwLTQBtKhkY4TBQFQyEDL0hNtfI6nRbr8UpgeRKgj55+bLfsaxd/S77CHMDP6fbD8vDeBuGHcpiH741m/8S/yJQAmwVyjukFqOQn535i4BWPaR9ZFuwfIf3OX+DFxdLjcBqzea6aL1EtfauKdMgGS3GyDj6Mh0vLx0Ji9OuaMbVHN8QRA0QkIq8/DW0TK1B6s9bJtAsCWRmrR1lUKxp4f3/xgYTAdxOUK260LrxZ0x/MdRIsBodqNZO2DfBd1au96pP753U7PTPNNsnsRJzkE59qeE6ZhJe61p+feiBv0MTtY/nIuHkfi06UYeJ5tnLwe7j3RUH/MX/khNILw2P41Rkzh06utz+Hux4)\n\n    from
        collections import defaultdict\n    \n    def p2(ns, target):\n      li =
        sorted(ns)\n      l = 0\n      r = len(li) - 1\n      while l &lt; r:\n        s
        = li[l] + li[r]\n        if s == target:\n          return li[l] * li[r]\n        elif
        s &gt; target:\n          r -= 1\n        else:\n          l += 1\n    \n    def
        p3(ns, target):\n      # dict\n      # Key: sum\n      # Value: list&lt;tuple&lt;set_indices,
        tuple_numbers&gt;&gt;\n      nij = defaultdict(list)\n      for i, ni in enumerate(ns):\n        for
        j, nj in enumerate(ns):\n          if i &gt;= j:\n            continue\n          nij[ni+nj].append((set([i,
        j]), (ni, nj)))\n    \n      # For each third number, see if there exists
        a pair where the third number is unused\n      # If so, return the product\n      for
        k, nk in enumerate(ns):\n        diff = target - nk\n        for sum_tuple
        in nij[diff]:\n          already_used = sum_tuple[0]\n          if k in already_used:\n            continue\n          ni
        = sum_tuple[1][0]\n          nj = sum_tuple[1][1]\n          return ni*nj*nk\n    \n    with
        open(''1.txt'') as f:\n      l = [int(n) for n in f.readlines()]\n      print(p2(l,
        2020))\n      print(p3(l, 2020))", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://topaz.github.io/paste/#XQAAAQDLAwAAAAAAAAAzHIoib6pXbueH4X9F244lVRDcOZab5q1+VXY/ex42qR7D+Ra6iWKOi50xAS1kdGJY4D6ZZhuQJ0+DdGMdStyVupHMZboVD7hf1AVQkg5hksGoKwAc3hfvRTi2P5fXIVG3arRP4Kvq39oLBJfn8cTyZn75qDByIxBLZoyJkOlWRS6Idnb70PdqWxrbUwic7iLicJN2Gr/egbnIoecau2zcGFUokVTkvx0xOyyncIaBHYM3WcggNyK3oOIP7b+2di1Rm2laBke6qGmxdLuzuOF3RzvwSLuAm8BF1BqxvfoC1cKX3+ewBXBe56SVLBV2PKv0Td7yd6DJKiGARAwLTQBtKhkY4TBQFQyEDL0hNtfI6nRbr8UpgeRKgj55+bLfsaxd/S77CHMDP6fbD8vDeBuGHcpiH741m/8S/yJQAmwVyjukFqOQn535i4BWPaR9ZFuwfIf3OX+DFxdLjcBqzea6aL1EtfauKdMgGS3GyDj6Mh0vLx0Ji9OuaMbVHN8QRA0QkIq8/DW0TK1B6s9bJtAsCWRmrR1lUKxp4f3/xgYTAdxOUK260LrxZ0x/MdRIsBodqNZO2DfBd1au96pP753U7PTPNNsnsRJzkE59qeE6ZhJe61p+feiBv0MTtY/nIuHkfi06UYeJ5tnLwe7j3RUH/MX/khNILw2P41Rkzh06utz+Hux4\"&gt;Python
        (Part One: O(nlogn)*, Part Two: O(n^2))&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from
        collections import defaultdict\n\ndef p2(ns, target):\n  li = sorted(ns)\n  l
        = 0\n  r = len(li) - 1\n  while l &amp;lt; r:\n    s = li[l] + li[r]\n    if
        s == target:\n      return li[l] * li[r]\n    elif s &amp;gt; target:\n      r
        -= 1\n    else:\n      l += 1\n\ndef p3(ns, target):\n  # dict\n  # Key: sum\n  #
        Value: list&amp;lt;tuple&amp;lt;set_indices, tuple_numbers&amp;gt;&amp;gt;\n  nij
        = defaultdict(list)\n  for i, ni in enumerate(ns):\n    for j, nj in enumerate(ns):\n      if
        i &amp;gt;= j:\n        continue\n      nij[ni+nj].append((set([i, j]), (ni,
        nj)))\n\n  # For each third number, see if there exists a pair where the third
        number is unused\n  # If so, return the product\n  for k, nk in enumerate(ns):\n    diff
        = target - nk\n    for sum_tuple in nij[diff]:\n      already_used = sum_tuple[0]\n      if
        k in already_used:\n        continue\n      ni = sum_tuple[1][0]\n      nj
        = sum_tuple[1][1]\n      return ni*nj*nk\n\nwith open(&amp;#39;1.txt&amp;#39;)
        as f:\n  l = [int(n) for n in f.readlines()]\n  print(p2(l, 2020))\n  print(p3(l,
        2020))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebn1q2/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebn1q2", "created":
        1606872927.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geboier",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "phaeena",
        "can_mod_post": false, "created_utc": 1606873738.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_10tkuh", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# C++\n\nSimple working cpp solution: [https://github.com/phaeena/Advent-of-Code-2020/tree/main/Day1](https://github.com/phaeena/Advent-of-Code-2020/tree/main/Day1)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;C++&lt;/h1&gt;\n\n&lt;p&gt;Simple
        working cpp solution: &lt;a href=\"https://github.com/phaeena/Advent-of-Code-2020/tree/main/Day1\"&gt;https://github.com/phaeena/Advent-of-Code-2020/tree/main/Day1&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geboier/",
        "subreddit_type": "public", "locked": false, "name": "t1_geboier", "created":
        1606873738.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gebpih7",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "akopoko",
        "can_mod_post": false, "created_utc": 1606874291.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_5nl0i", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**ELIXIR - Part 1**\n\n    def part1(input) do\n      {num1, num2} = get_two_values_for_sum(input,
        2020) \n      num1 * num2\n    end\n\n&amp;#x200B;\n\n    defp get_two_values_for_sum(list,
        desired_sum) do\n      valid_num_map =\n        list\n        |&gt; Enum.map(fn
        val -&gt; {val, String.to_integer(val)} end)\n        |&gt; Map.new\n    \n      try
        do\n        for num &lt;- list do\n          val = String.to_integer(num)\n          case
        Map.get(valid_num_map, \"#{desired_sum - val}\") do\n            nil -&gt;
        nil\n            matching_val -&gt; throw({matching_val, val})\n          end\n        end\n        #
        We got through for loop without throwing, meaning no matches, return nil\n        nil\n      catch\n        result
        -&gt; result\n      end\n    end\n\n**Part 2**\n\n    def part2(input) do\n      valid_nums
        = \n        input\n        |&gt; Enum.map(&amp;String.to_integer/1)\n        |&gt;
        Enum.reject(&amp;(&amp;1 &gt; 2020))\n    \n      try do\n            # For
        each value, up to len(input), run get_two_values, which also loops through
        list. So n^2 ?\n        for val1 &lt;- valid_nums do\n          case get_two_values_for_sum(input,
        2020 - val1) do\n            {val2, val3} -&gt; throw({val1, val2, val3})\n            nil
        -&gt; nil\n          end\n        end\n        nil\n      catch\n        {val1,
        val2, val3} = result -&gt; val1 * val2 * val3\n      end\n    end\n\ntotally
        forgot about the \\`for\\` comprehensions until I was reading through some
        of the solutions here; may have made my life a bit easier \ud83e\udd26\ud83c\udfff\u200d\u2640\ufe0f",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;ELIXIR
        - Part 1&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def part1(input)
        do\n  {num1, num2} = get_two_values_for_sum(input, 2020) \n  num1 * num2\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;defp
        get_two_values_for_sum(list, desired_sum) do\n  valid_num_map =\n    list\n    |&amp;gt;
        Enum.map(fn val -&amp;gt; {val, String.to_integer(val)} end)\n    |&amp;gt;
        Map.new\n\n  try do\n    for num &amp;lt;- list do\n      val = String.to_integer(num)\n      case
        Map.get(valid_num_map, &amp;quot;#{desired_sum - val}&amp;quot;) do\n        nil
        -&amp;gt; nil\n        matching_val -&amp;gt; throw({matching_val, val})\n      end\n    end\n    #
        We got through for loop without throwing, meaning no matches, return nil\n    nil\n  catch\n    result
        -&amp;gt; result\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Part
        2&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def part2(input) do\n  valid_nums
        = \n    input\n    |&amp;gt; Enum.map(&amp;amp;String.to_integer/1)\n    |&amp;gt;
        Enum.reject(&amp;amp;(&amp;amp;1 &amp;gt; 2020))\n\n  try do\n        # For
        each value, up to len(input), run get_two_values, which also loops through
        list. So n^2 ?\n    for val1 &amp;lt;- valid_nums do\n      case get_two_values_for_sum(input,
        2020 - val1) do\n        {val2, val3} -&amp;gt; throw({val1, val2, val3})\n        nil
        -&amp;gt; nil\n      end\n    end\n    nil\n  catch\n    {val1, val2, val3}
        = result -&amp;gt; val1 * val2 * val3\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;totally
        forgot about the `for` comprehensions until I was reading through some of
        the solutions here; may have made my life a bit easier \ud83e\udd26\ud83c\udfff\u200d\u2640\ufe0f&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebpih7/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebpih7", "created":
        1606874291.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gebpzhl",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "fullmetalalch",
        "can_mod_post": false, "created_utc": 1606874552.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_5tx9e", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Same solution as basically everyone else here in Go. Only change is I did
        include support for duplicate numbers in part 2, but not sure this is something
        which even comes up.\n\n    package aoc2020\n    \n    import (\n    \t\"fmt\"\n    \t\"strconv\"\n    \t\"strings\"\n    )\n    \n    //
        Day1Part1 fixes the expense report\n    func Day1Part1() {\n    \tnums :=
        parseExpenseReport(\"input/day1.txt\")\n    \tresult := fixExpenseReport(nums)\n    \n    \tfmt.Printf(\"Day1Part1:
        %d\\n\", result)\n    }\n    \n    // Day1Part2 fixes the expense report by
        finding three numbers which\n    // hit the target\n    func Day1Part2() {\n    \tnums
        := parseExpenseReport(\"input/day1.txt\")\n    \tresult := fixExpenseReportThreeValues(nums)\n    \n    \tfmt.Printf(\"Day1Part2:
        %d\\n\", result)\n    }\n    \n    func parseExpenseReport(name string) []int
        {\n    \ttext := readFile(name)\n    \n    \tlines := strings.Split(text,
        \"\\n\")\n    \n    \tnums := make([]int, len(lines))\n    \n    \tfor index,
        l := range lines {\n    \t\tv, err := strconv.Atoi(l)\n    \n    \t\tif err
        != nil {\n    \t\t\tpanic(err)\n    \t\t}\n    \n    \t\tnums[index] = v\n    \t}\n    \n    \treturn
        nums\n    }\n    \n    func fixExpenseReport(nums []int) int {\n    \ttarget
        := 2020\n    \tpossibleEntries := map[int]bool{}\n    \n    \tfor _, num :=
        range nums {\n    \t\tif !possibleEntries[num] {\n    \t\t\tpossibleEntries[target-num]
        = true\n    \t\t\tcontinue\n    \t\t}\n    \n    \t\tcomplement := target
        - num\n    \n    \t\treturn num * complement\n    \t}\n    \n    \treturn
        -1\n    }\n    \n    func fixExpenseReportThreeValues(nums []int) int {\n    \ttarget
        := 2020\n    \tnumCounts := map[int]int{}\n    \n    \tfor _, num := range
        nums {\n    \t\tnumCounts[num]++\n    \t}\n    \n    \tfor i, a := range nums
        {\n    \t\tfor j := i + 1; j &lt; len(nums); j++ {\n    \t\t\tb := nums[j]\n    \t\t\tc
        := target - a - b\n    \n    \t\t\tcount := numCounts[c]\n    \n    \t\t\tif
        a == c {\n    \t\t\t\tcount--\n    \t\t\t}\n    \t\t\tif b == c {\n    \t\t\t\tcount--\n    \t\t\t}\n    \t\t\tif
        count &lt; 1 {\n    \t\t\t\tcontinue\n    \t\t\t}\n    \n    \t\t\treturn
        a * b * c\n    \t\t}\n    \t}\n    \n    \treturn -1\n    }", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Same solution as basically everyone else
        here in Go. Only change is I did include support for duplicate numbers in
        part 2, but not sure this is something which even comes up.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package
        aoc2020\n\nimport (\n    &amp;quot;fmt&amp;quot;\n    &amp;quot;strconv&amp;quot;\n    &amp;quot;strings&amp;quot;\n)\n\n//
        Day1Part1 fixes the expense report\nfunc Day1Part1() {\n    nums := parseExpenseReport(&amp;quot;input/day1.txt&amp;quot;)\n    result
        := fixExpenseReport(nums)\n\n    fmt.Printf(&amp;quot;Day1Part1: %d\\n&amp;quot;,
        result)\n}\n\n// Day1Part2 fixes the expense report by finding three numbers
        which\n// hit the target\nfunc Day1Part2() {\n    nums := parseExpenseReport(&amp;quot;input/day1.txt&amp;quot;)\n    result
        := fixExpenseReportThreeValues(nums)\n\n    fmt.Printf(&amp;quot;Day1Part2:
        %d\\n&amp;quot;, result)\n}\n\nfunc parseExpenseReport(name string) []int
        {\n    text := readFile(name)\n\n    lines := strings.Split(text, &amp;quot;\\n&amp;quot;)\n\n    nums
        := make([]int, len(lines))\n\n    for index, l := range lines {\n        v,
        err := strconv.Atoi(l)\n\n        if err != nil {\n            panic(err)\n        }\n\n        nums[index]
        = v\n    }\n\n    return nums\n}\n\nfunc fixExpenseReport(nums []int) int
        {\n    target := 2020\n    possibleEntries := map[int]bool{}\n\n    for _,
        num := range nums {\n        if !possibleEntries[num] {\n            possibleEntries[target-num]
        = true\n            continue\n        }\n\n        complement := target -
        num\n\n        return num * complement\n    }\n\n    return -1\n}\n\nfunc
        fixExpenseReportThreeValues(nums []int) int {\n    target := 2020\n    numCounts
        := map[int]int{}\n\n    for _, num := range nums {\n        numCounts[num]++\n    }\n\n    for
        i, a := range nums {\n        for j := i + 1; j &amp;lt; len(nums); j++ {\n            b
        := nums[j]\n            c := target - a - b\n\n            count := numCounts[c]\n\n            if
        a == c {\n                count--\n            }\n            if b == c {\n                count--\n            }\n            if
        count &amp;lt; 1 {\n                continue\n            }\n\n            return
        a * b * c\n        }\n    }\n\n    return -1\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebpzhl/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebpzhl", "created":
        1606874552.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606876118.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gebs83z", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "emmanuel_erc",
        "can_mod_post": false, "created_utc": 1606875808.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_rkk2o", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Here is a reasonably fast but otherwise idiomatic solution in Haskell (at
        least IMO)\n\n    import Control.Applicative ((&lt;|&gt;))\n    import Data.Array\n\n    main
        :: IO ()\n    main = do\n      numbers &lt;- map read . lines &lt;$&gt; readFile
        \"day1puzzle.txt\"\n      mapM_ print $ solution1 numbers 2020\n      mapM_
        print $ solution2 numbers\n\n    solution1 :: [Int] -&gt; Int -&gt; Maybe
        Int\n    solution1 xs target = foldr go Nothing xs\n      where\n        arr
        = listArray (1,2019) (repeat 0) // (map ((,)&lt;*&gt;id) xs)\n        go i
        b\n            | i &lt;= 0 || i &gt; length arr = b\n            | target
        - i &lt;= 0 = b\n            | arr ! (target - i) == 0 = b\n            |
        otherwise = Just $ i * (arr ! (target - i))\n\n    solution2 :: [Int] -&gt;
        Maybe Int\n    solution2 xs = foldr go Nothing xs\n      where\n        go
        i b  = fmap (i *) (solution1 xs (2020 - i)) &lt;|&gt; b", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Here is a reasonably fast but otherwise
        idiomatic solution in Haskell (at least IMO)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        Control.Applicative ((&amp;lt;|&amp;gt;))\nimport Data.Array\n\nmain :: IO
        ()\nmain = do\n  numbers &amp;lt;- map read . lines &amp;lt;$&amp;gt; readFile
        &amp;quot;day1puzzle.txt&amp;quot;\n  mapM_ print $ solution1 numbers 2020\n  mapM_
        print $ solution2 numbers\n\nsolution1 :: [Int] -&amp;gt; Int -&amp;gt; Maybe
        Int\nsolution1 xs target = foldr go Nothing xs\n  where\n    arr = listArray
        (1,2019) (repeat 0) // (map ((,)&amp;lt;*&amp;gt;id) xs)\n    go i b\n        |
        i &amp;lt;= 0 || i &amp;gt; length arr = b\n        | target - i &amp;lt;=
        0 = b\n        | arr ! (target - i) == 0 = b\n        | otherwise = Just $
        i * (arr ! (target - i))\n\nsolution2 :: [Int] -&amp;gt; Maybe Int\nsolution2
        xs = foldr go Nothing xs\n  where\n    go i b  = fmap (i *) (solution1 xs
        (2020 - i)) &amp;lt;|&amp;gt; b\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebs83z/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebs83z", "created":
        1606875808.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gebt57q",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "aoc-fan",
        "can_mod_post": false, "created_utc": 1606876317.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_13cqpt", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "With TypeScript : First solution with a single loop (using Set), second bit
        optimized nested for loops, [Repo](https://github.com/bhosale-ajay/adventofcode/blob/master/2020/ts/D01.test.ts)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;With TypeScript : First
        solution with a single loop (using Set), second bit optimized nested for loops,
        &lt;a href=\"https://github.com/bhosale-ajay/adventofcode/blob/master/2020/ts/D01.test.ts\"&gt;Repo&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebt57q/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebt57q", "created":
        1606876317.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gebv38e",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "MaxDeviant",
        "can_mod_post": false, "created_utc": 1606877353.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_5fe79", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My [solution](https://github.com/maxdeviant/advent-of-code/blob/master/2020/purescript/01/src/Main.purs)
        in PureScript. Elegant, but not at all optimized ;)\n\n    module Main where\n    \n    import
        Prelude\n    import Data.Array (filter, head)\n    import Data.Either (Either(..),
        note)\n    import Data.Int as Int\n    import Data.String.Utils (lines)\n    import
        Data.Traversable (traverse)\n    import Data.Tuple (Tuple(..))\n    import
        Effect (Effect)\n    import Effect.Console (log, logShow)\n    import Node.Encoding
        (Encoding(..))\n    import Node.FS.Sync (readTextFile)\n    \n    parseExpenseReport
        :: String -&gt; Either String (Array Int)\n    parseExpenseReport =\n      lines\n        &gt;&gt;&gt;
        traverse\n            ( \\line -&gt;\n                line # Int.fromString
        # note (\"Failed to parse \" &lt;&gt; line)\n            )\n    \n    partOne
        :: String -&gt; Either String Int\n    partOne input = do\n      let\n        sumToFind
        = 2020\n      expenseReport &lt;- parseExpenseReport input\n      [ Tuple
        ] &lt;*&gt; expenseReport &lt;*&gt; expenseReport\n        # filter (\\(Tuple
        x y) -&gt; x + y == sumToFind)\n        # map (\\(Tuple x y) -&gt; x * y)\n        #
        head\n        # (note $ \"No entries found that sum to \" &lt;&gt; show sumToFind)\n    \n    data
        Triple a\n      = Triple a a a\n    \n    partTwo :: String -&gt; Either String
        Int\n    partTwo input = do\n      let\n        sumToFind = 2020\n      expenseReport
        &lt;- parseExpenseReport input\n      [ Triple ] &lt;*&gt; expenseReport &lt;*&gt;
        expenseReport &lt;*&gt; expenseReport\n        # filter (\\(Triple x y z)
        -&gt; x + y + z == sumToFind)\n        # map (\\(Triple x y z) -&gt; x * y
        * z)\n        # head\n        # (note $ \"No entries found that sum to \"
        &lt;&gt; show sumToFind)\n    \n    main :: Effect Unit\n    main = do\n      input
        &lt;- readTextFile UTF8 \"input.txt\"\n      log \"Part One\"\n      case
        partOne input of\n        Right answer -&gt; logShow answer\n        Left
        error -&gt; log $ \"Failed with: \" &lt;&gt; error\n      log \"Part Two\"\n      case
        partTwo input of\n        Right answer -&gt; logShow answer\n        Left
        error -&gt; log $ \"Failed with: \" &lt;&gt; error", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;My &lt;a href=\"https://github.com/maxdeviant/advent-of-code/blob/master/2020/purescript/01/src/Main.purs\"&gt;solution&lt;/a&gt;
        in PureScript. Elegant, but not at all optimized ;)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;module
        Main where\n\nimport Prelude\nimport Data.Array (filter, head)\nimport Data.Either
        (Either(..), note)\nimport Data.Int as Int\nimport Data.String.Utils (lines)\nimport
        Data.Traversable (traverse)\nimport Data.Tuple (Tuple(..))\nimport Effect
        (Effect)\nimport Effect.Console (log, logShow)\nimport Node.Encoding (Encoding(..))\nimport
        Node.FS.Sync (readTextFile)\n\nparseExpenseReport :: String -&amp;gt; Either
        String (Array Int)\nparseExpenseReport =\n  lines\n    &amp;gt;&amp;gt;&amp;gt;
        traverse\n        ( \\line -&amp;gt;\n            line # Int.fromString #
        note (&amp;quot;Failed to parse &amp;quot; &amp;lt;&amp;gt; line)\n        )\n\npartOne
        :: String -&amp;gt; Either String Int\npartOne input = do\n  let\n    sumToFind
        = 2020\n  expenseReport &amp;lt;- parseExpenseReport input\n  [ Tuple ] &amp;lt;*&amp;gt;
        expenseReport &amp;lt;*&amp;gt; expenseReport\n    # filter (\\(Tuple x y)
        -&amp;gt; x + y == sumToFind)\n    # map (\\(Tuple x y) -&amp;gt; x * y)\n    #
        head\n    # (note $ &amp;quot;No entries found that sum to &amp;quot; &amp;lt;&amp;gt;
        show sumToFind)\n\ndata Triple a\n  = Triple a a a\n\npartTwo :: String -&amp;gt;
        Either String Int\npartTwo input = do\n  let\n    sumToFind = 2020\n  expenseReport
        &amp;lt;- parseExpenseReport input\n  [ Triple ] &amp;lt;*&amp;gt; expenseReport
        &amp;lt;*&amp;gt; expenseReport &amp;lt;*&amp;gt; expenseReport\n    # filter
        (\\(Triple x y z) -&amp;gt; x + y + z == sumToFind)\n    # map (\\(Triple
        x y z) -&amp;gt; x * y * z)\n    # head\n    # (note $ &amp;quot;No entries
        found that sum to &amp;quot; &amp;lt;&amp;gt; show sumToFind)\n\nmain :: Effect
        Unit\nmain = do\n  input &amp;lt;- readTextFile UTF8 &amp;quot;input.txt&amp;quot;\n  log
        &amp;quot;Part One&amp;quot;\n  case partOne input of\n    Right answer -&amp;gt;
        logShow answer\n    Left error -&amp;gt; log $ &amp;quot;Failed with: &amp;quot;
        &amp;lt;&amp;gt; error\n  log &amp;quot;Part Two&amp;quot;\n  case partTwo
        input of\n    Right answer -&amp;gt; logShow answer\n    Left error -&amp;gt;
        log $ &amp;quot;Failed with: &amp;quot; &amp;lt;&amp;gt; error\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebv38e/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebv38e", "created":
        1606877353.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606878022.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gebvdck", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ImHavik",
        "can_mod_post": false, "created_utc": 1606877511.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_wgctv", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# Python\n\nI''m currently learning / playing around with Python, so this
        isn''t the most efficient way.... but it''s quite short, and a bit different
        (I think), so I''ll take it! Made a function you can call to solve both parts.\n\n&amp;#x200B;\n\n    from\u00a0itertools\u00a0import\u00a0product\n    from
        math import prod\n    \n    def gimme_2020(_numbers, _n):\n      for\u00a0vals\u00a0in\u00a0product(_numbers,\u00a0repeat\u00a0=\u00a0_n):\n        if
        sum(vals,\u00a00)\u00a0==\u00a02020:\n          return\u00a0prod(vals)\n    \n    with
        open(\"C:\\\\Python\\AdventofCode\\Day1\\input.txt\")\u00a0as file:\n      numbers\u00a0=\u00a0[int(line.rstrip(\"\\n\"))\u00a0for\u00a0line\u00a0in
        file]\n    \n    print(f\"Part 1: {gimme_2020(numbers,2)}\")\n    print(f\"Part
        2: {gimme_2020(numbers,3)}\")", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;h1&gt;Python&lt;/h1&gt;\n\n&lt;p&gt;I&amp;#39;m currently
        learning / playing around with Python, so this isn&amp;#39;t the most efficient
        way.... but it&amp;#39;s quite short, and a bit different (I think), so I&amp;#39;ll
        take it! Made a function you can call to solve both parts.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from\u00a0itertools\u00a0import\u00a0product\nfrom
        math import prod\n\ndef gimme_2020(_numbers, _n):\n  for\u00a0vals\u00a0in\u00a0product(_numbers,\u00a0repeat\u00a0=\u00a0_n):\n    if
        sum(vals,\u00a00)\u00a0==\u00a02020:\n      return\u00a0prod(vals)\n\nwith
        open(&amp;quot;C:\\\\Python\\AdventofCode\\Day1\\input.txt&amp;quot;)\u00a0as
        file:\n  numbers\u00a0=\u00a0[int(line.rstrip(&amp;quot;\\n&amp;quot;))\u00a0for\u00a0line\u00a0in
        file]\n\nprint(f&amp;quot;Part 1: {gimme_2020(numbers,2)}&amp;quot;)\nprint(f&amp;quot;Part
        2: {gimme_2020(numbers,3)}&amp;quot;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebvdck/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebvdck", "created":
        1606877511.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_gebz88n", "id": "gebz88n", "parent_id":
        "t1_gebvdck", "depth": 1, "children": ["gebz88n"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gebx9gq",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "AidGli",
        "can_mod_post": false, "created_utc": 1606878565.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_s1khh1r", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# Python\nPretty simple solution, decided to check for edge cases although
        it wasn''t necessary to get the solution.\n\nI''m making a series of videos
        where I will be going over my solutions for each day, feel free to check out
        day one [here](https://www.youtube.com/watch?v=IBRaMBGDDuo) :)\n\n    def
        readEntries(filename=\"input.txt\"):\n        with open(filename, \"r\") as
        filein:\n            return [int(line.rstrip()) for line in filein]\n    \n    \n    def
        part1(entries):\n        entriesset = set(entries)\n        if 1010 in entriesset:\n            if
        entries.count(1010) &gt; 1:\n                return f\"1010 * 1010 = {1010
        ** 2}\"\n            else:\n                entriesset.remove(1010)\n        for
        i in entriesset:\n            if (2020 - i) in entriesset:\n                return
        f\"{i} * {2020 - i} = {i * (2020  - i)}\"\n    \n    \n    def part2(entries):\n        entriesset
        = set(entries)\n        for x, i in enumerate(entries[:-1]):\n            for
        j in entries[x:]:\n                if (2020 - (i + j)) in entriesset:\n                    if
        (2020 - (i + j) == i and entries.count(i) == 1) or (2020 - (i + j) == j and
        entries.count(j) == 1):\n                        continue\n                    return
        f\"{i} * {j} * {2020 - (i + j)} = {i * j * (2020 - (i + j))}\"\n    \n    \n    def
        main():\n        entries = readEntries()\n        print(part1(entries))\n        print(part2(entries))\n    \n    \n    main()",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Python&lt;/h1&gt;\n\n&lt;p&gt;Pretty
        simple solution, decided to check for edge cases although it wasn&amp;#39;t
        necessary to get the solution.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m making a
        series of videos where I will be going over my solutions for each day, feel
        free to check out day one &lt;a href=\"https://www.youtube.com/watch?v=IBRaMBGDDuo\"&gt;here&lt;/a&gt;
        :)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def readEntries(filename=&amp;quot;input.txt&amp;quot;):\n    with
        open(filename, &amp;quot;r&amp;quot;) as filein:\n        return [int(line.rstrip())
        for line in filein]\n\n\ndef part1(entries):\n    entriesset = set(entries)\n    if
        1010 in entriesset:\n        if entries.count(1010) &amp;gt; 1:\n            return
        f&amp;quot;1010 * 1010 = {1010 ** 2}&amp;quot;\n        else:\n            entriesset.remove(1010)\n    for
        i in entriesset:\n        if (2020 - i) in entriesset:\n            return
        f&amp;quot;{i} * {2020 - i} = {i * (2020  - i)}&amp;quot;\n\n\ndef part2(entries):\n    entriesset
        = set(entries)\n    for x, i in enumerate(entries[:-1]):\n        for j in
        entries[x:]:\n            if (2020 - (i + j)) in entriesset:\n                if
        (2020 - (i + j) == i and entries.count(i) == 1) or (2020 - (i + j) == j and
        entries.count(j) == 1):\n                    continue\n                return
        f&amp;quot;{i} * {j} * {2020 - (i + j)} = {i * j * (2020 - (i + j))}&amp;quot;\n\n\ndef
        main():\n    entries = readEntries()\n    print(part1(entries))\n    print(part2(entries))\n\n\nmain()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebx9gq/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebx9gq", "created":
        1606878565.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gebykhw",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "zachmane",
        "can_mod_post": false, "created_utc": 1606879324.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_12xve4", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "```haskell\nmain :: IO ()\nmain = interact $ show . constraint . fmap read
        . lines\n    where\n        constraint ns = \n            head [a*b*c | a
        &lt;- ns, b &lt;- ns, c &lt;- ns, a + b + c == 2020]\n```", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;code&gt;haskell\nmain :: IO ()\nmain
        = interact $ show . constraint . fmap read . lines\n    where\n        constraint
        ns = \n            head [a*b*c | a &amp;lt;- ns, b &amp;lt;- ns, c &amp;lt;-
        ns, a + b + c == 2020]\n&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebykhw/", "subreddit_type":
        "public", "locked": false, "name": "t1_gebykhw", "created": 1606879324.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 2, "name":
        "t1_gedvguu", "id": "gedvguu", "parent_id": "t1_gebykhw", "depth": 1, "children":
        ["gedvguu", "gebylau"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": 1606882131.0, "mod_reason_by": null, "banned_by": null, "ups": 2,
        "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gec124u",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "the4ner",
        "can_mod_post": false, "created_utc": 1606880789.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_50ysl", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "In Go\n    \n    \n    // Part1 executes part 1 of of this day''s puzzle\n    func
        (d *Day1) Part1() {\n    \tfmt.Println(\"Day 1 Part 1\")\n    \terr := d.ReadFile(\"1-1.txt\")\n    \tif
        err != nil {\n    \t\tpanic(err)\n    \t}\n    \n    \tm := map[int]bool{}\n    \tfor
        _, e := range d.Entries {\n    \t\tm[e] = true\n    \t\tif m[2020-e] == true
        {\n    \t\t\tfmt.Printf(\"%d * %d = %d\\n\", e, 2020-e, e*(2020-e))\n    \t\t\treturn\n    \t\t}\n    \t}\n    }\n    \n    //
        Part2 executes part 2 of of this day''s puzzle\n    func (d *Day1) Part2()
        {\n    \tfmt.Println(\"Day 1 Part 2\")\n    \terr := d.ReadFile(\"1-1.txt\")\n    \tif
        err != nil {\n    \t\tpanic(err)\n    \t}\n    \tfor _, i := range d.Entries
        {\n    \t\tt := 2020 - i\n    \t\tm := map[int]bool{}\n    \t\tfor _, e :=
        range d.Entries {\n    \t\t\tm[e] = true\n    \t\t\tif m[t-e] == true {\n    \t\t\t\tfmt.Printf(\"%d
        * %d * %d = %d\\n\", e, t-i, i, i*e*(t-e))\n    \t\t\t\treturn\n    \t\t\t}\n    \t\t}\n    \t}\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In Go&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;//
        Part1 executes part 1 of of this day&amp;#39;s puzzle\nfunc (d *Day1) Part1()
        {\n    fmt.Println(&amp;quot;Day 1 Part 1&amp;quot;)\n    err := d.ReadFile(&amp;quot;1-1.txt&amp;quot;)\n    if
        err != nil {\n        panic(err)\n    }\n\n    m := map[int]bool{}\n    for
        _, e := range d.Entries {\n        m[e] = true\n        if m[2020-e] == true
        {\n            fmt.Printf(&amp;quot;%d * %d = %d\\n&amp;quot;, e, 2020-e,
        e*(2020-e))\n            return\n        }\n    }\n}\n\n// Part2 executes
        part 2 of of this day&amp;#39;s puzzle\nfunc (d *Day1) Part2() {\n    fmt.Println(&amp;quot;Day
        1 Part 2&amp;quot;)\n    err := d.ReadFile(&amp;quot;1-1.txt&amp;quot;)\n    if
        err != nil {\n        panic(err)\n    }\n    for _, i := range d.Entries {\n        t
        := 2020 - i\n        m := map[int]bool{}\n        for _, e := range d.Entries
        {\n            m[e] = true\n            if m[t-e] == true {\n                fmt.Printf(&amp;quot;%d
        * %d * %d = %d\\n&amp;quot;, e, t-i, i, i*e*(t-e))\n                return\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gec124u/",
        "subreddit_type": "public", "locked": false, "name": "t1_gec124u", "created":
        1606880789.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1614569229.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gec1oxq", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "aexl",
        "can_mod_post": false, "created_utc": 1606881166.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_6d4oe", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My solution in **Julia**:\n\n[https://github.com/goggle/AdventOfCode2020.jl/blob/master/src/day01.jl](https://github.com/goggle/AdventOfCode2020.jl/blob/master/src/day01.jl)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My solution in &lt;strong&gt;Julia&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/goggle/AdventOfCode2020.jl/blob/master/src/day01.jl\"&gt;https://github.com/goggle/AdventOfCode2020.jl/blob/master/src/day01.jl&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gec1oxq/",
        "subreddit_type": "public", "locked": false, "name": "t1_gec1oxq", "created":
        1606881166.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gec1vl4",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "space_perogy",
        "can_mod_post": false, "created_utc": 1606881277.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_6rklx", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "In elixir:\n\n[Don''t think just write code](https://git.sr.ht/~afontaine/advent-of-code/tree/a0ae33632ae63452d22e1cfbc411360c7f0b5fae/lib/Y2020/1.ex)\n\n[See
        a real solution for A, figure out how to apply it to B](https://git.sr.ht/~afontaine/advent-of-code/tree/76ab55c7216eddaf2a01ba18e0747fd7003d2e98/lib/Y2020/1.ex)\n\nI
        guess I need to remember how to think with data structures again, but I hope
        to see many more trees.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In
        elixir:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://git.sr.ht/%7Eafontaine/advent-of-code/tree/a0ae33632ae63452d22e1cfbc411360c7f0b5fae/lib/Y2020/1.ex\"&gt;Don&amp;#39;t
        think just write code&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://git.sr.ht/%7Eafontaine/advent-of-code/tree/76ab55c7216eddaf2a01ba18e0747fd7003d2e98/lib/Y2020/1.ex\"&gt;See
        a real solution for A, figure out how to apply it to B&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I
        guess I need to remember how to think with data structures again, but I hope
        to see many more trees.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gec1vl4/",
        "subreddit_type": "public", "locked": false, "name": "t1_gec1vl4", "created":
        1606881277.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gec24rm",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "xehale",
        "can_mod_post": false, "created_utc": 1606881432.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_h6cjt", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I''m in my first semester and first time doing any coding challenge and I''m
        happy I got it to work \\^\\_\\^\n\n**Java:**\n\n    import java.util.*; //
        imports scanner object\n    import java.io.*; // imports input/output\n    public
        class DayOne\n    {\n        public static void main (String[] args) throws
        IOException\n        {\n            String entry2 = \"\";\n            Scanner
        inFile = new Scanner(new File(\"DayOne.txt\")); \n            PrintWriter
        outFile = new PrintWriter(new FileWriter(\"DayOneAnswers.txt\"));\n            while
        (inFile.hasNextLine()) \n            {\n                String line = inFile.nextLine();
        // creates string from next line\n                int entry1 = Integer.parseInt(line);
        // converts line to int -&gt; entry1\n                int find = 2020 - entry1;
        // creates number to find to equal 2020 using entry1\n                entry2
        = Integer.toString(find); // converts find to string -&gt; entry2\n                outFile.println(entry2);
        // creates new textfile with possible answers\n            }\n            outFile.close();
        // previous scanners closed\n            inFile.close();\n            // open
        both textfiles\n            Scanner inFileAns = new Scanner(new File(\"DayOneAnswers.txt\"));\n            while
        (inFileAns.hasNextLine())\n            {\n                String line2 = inFileAns.nextLine();\n                inFile
        = new Scanner(new File(\"DayOne.txt\"));\n                while (inFile.hasNextLine())\n                {\n                    String
        line = inFile.nextLine();\n                    if (line.equals(line2))\n                    {\n                        int
        answer = Integer.parseInt(line2);\n                        int multiply =
        answer*(2020-answer);\n                        System.out.println(\"The answer
        is: \" + multiply + \"\\nThe two numbers were: \" + answer + \" and \" + (2020-answer));\n                        System.exit(0);\n                    }\n                }\n            }\n            inFile.close();\n            inFileAns.close();\n        }\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m in my first
        semester and first time doing any coding challenge and I&amp;#39;m happy I
        got it to work ^_^&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Java:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        java.util.*; // imports scanner object\nimport java.io.*; // imports input/output\npublic
        class DayOne\n{\n    public static void main (String[] args) throws IOException\n    {\n        String
        entry2 = &amp;quot;&amp;quot;;\n        Scanner inFile = new Scanner(new File(&amp;quot;DayOne.txt&amp;quot;));
        \n        PrintWriter outFile = new PrintWriter(new FileWriter(&amp;quot;DayOneAnswers.txt&amp;quot;));\n        while
        (inFile.hasNextLine()) \n        {\n            String line = inFile.nextLine();
        // creates string from next line\n            int entry1 = Integer.parseInt(line);
        // converts line to int -&amp;gt; entry1\n            int find = 2020 - entry1;
        // creates number to find to equal 2020 using entry1\n            entry2 =
        Integer.toString(find); // converts find to string -&amp;gt; entry2\n            outFile.println(entry2);
        // creates new textfile with possible answers\n        }\n        outFile.close();
        // previous scanners closed\n        inFile.close();\n        // open both
        textfiles\n        Scanner inFileAns = new Scanner(new File(&amp;quot;DayOneAnswers.txt&amp;quot;));\n        while
        (inFileAns.hasNextLine())\n        {\n            String line2 = inFileAns.nextLine();\n            inFile
        = new Scanner(new File(&amp;quot;DayOne.txt&amp;quot;));\n            while
        (inFile.hasNextLine())\n            {\n                String line = inFile.nextLine();\n                if
        (line.equals(line2))\n                {\n                    int answer =
        Integer.parseInt(line2);\n                    int multiply = answer*(2020-answer);\n                    System.out.println(&amp;quot;The
        answer is: &amp;quot; + multiply + &amp;quot;\\nThe two numbers were: &amp;quot;
        + answer + &amp;quot; and &amp;quot; + (2020-answer));\n                    System.exit(0);\n                }\n            }\n        }\n        inFile.close();\n        inFileAns.close();\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gec24rm/",
        "subreddit_type": "public", "locked": false, "name": "t1_gec24rm", "created":
        1606881432.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gec2cvf",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "sseymens",
        "can_mod_post": false, "created_utc": 1606881568.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_1j8d9twm", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Python:**\n\n    def entries(list_items):\n        for i in range(len(list_items)):\n            sum_of_2020
        = 2020-list_items[i]\n            for j in range(i+1, len(list_items)):\n                if
        list_items[j] == sum_of_2020:\n                    print(list_items[i] * list_items[j])",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        entries(list_items):\n    for i in range(len(list_items)):\n        sum_of_2020
        = 2020-list_items[i]\n        for j in range(i+1, len(list_items)):\n            if
        list_items[j] == sum_of_2020:\n                print(list_items[i] * list_items[j])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gec2cvf/",
        "subreddit_type": "public", "locked": false, "name": "t1_gec2cvf", "created":
        1606881568.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gec5e9n",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "hodadthedoor",
        "can_mod_post": false, "created_utc": 1606883440.0, "send_replies": true,
        "parent_id": "t1_gec2cvf", "score": 2, "author_fullname": "t2_4r5kf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Concise and smart. Thanks for sharing. I learned something today.", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Concise and smart. Thanks for sharing. I
        learned something today.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gec5e9n/",
        "subreddit_type": "public", "locked": false, "name": "t1_gec5e9n", "created":
        1606883440.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_gec2p19", "id": "gec2p19", "parent_id":
        "t1_gec2cvf", "depth": 1, "children": ["gec2p19"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606883480.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gec2gg5", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Sopef86",
        "can_mod_post": false, "created_utc": 1606881629.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_81p5x597", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Java. Works with different numbers of entries and goal sum. Checks for duplicates.I
        think it''s O(n^((i-1))), with ''i'' being number of entries to sum?\n\n    public
        BigInteger problem(int numEntries, long goal) {\n        var entriesFrequency
        = getInput()\n                .lines()\n                .map(Long::parseLong)\n                .collect(Collectors.groupingBy(Function.identity(),
        Collectors.counting()));\n    \n        List&lt;Long&gt; result = findSum(entriesFrequency,
        new ArrayList&lt;&gt;(), numEntries, goal);\n    \n        return result.stream()\n                .map(BigInteger::valueOf)\n                .reduce(BigInteger.ONE,
        BigInteger::multiply);\n    }\n    \n    \n    public List&lt;Long&gt; findSum(Map&lt;Long,
        Long&gt; entriesFrequency, List&lt;Long&gt; result, int entriesGoal, long
        sumGoal) {\n        for (Long entry : entriesFrequency.keySet()) {\n            result.add(entry);\n            \n                if
        (result.size() == entriesGoal - 1\n                    &amp;&amp; entriesFrequency.containsKey(sumGoal
        - sum(result))) {\n                    result.add(sumGoal - sum(result));\n                    if
        (noDuplicates(entriesFrequency, result)) {\n                        break;\n                    }
        else {\n                        result.remove(result.size() - 1);\n                    }\n            }
        else if (result.size() &lt; entriesGoal - 1) {\n                findSum(entriesFrequency,
        result, entriesGoal, sumGoal);\n            }\n    \n            if (result.size()
        != entriesGoal) {\n                result.remove(result.size() - 1);\n            }\n        }\n        return
        result;\n    }\n    \n    private Long sum(List&lt;Long&gt; result) {\n        long
        sum = 0;\n        for (Long r : result) {\n            sum += r;\n        }\n        return
        sum;\n    }\n    \n    private boolean noDuplicates(Map&lt;Long, Long&gt;
        entriesFrequency, List&lt;Long&gt; result) {\n        var resultFrequency
        = result.stream().collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n    \n        for
        (var entry : resultFrequency.entrySet()) {\n            if (entriesFrequency.get(entry.getKey())
        &lt; entry.getValue()) {\n                return false;\n            }\n        }\n        return
        true;\n    }", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Java.
        Works with different numbers of entries and goal sum. Checks for duplicates.I
        think it&amp;#39;s O(n&lt;sup&gt;(i-1&lt;/sup&gt;)), with &amp;#39;i&amp;#39;
        being number of entries to sum?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public
        BigInteger problem(int numEntries, long goal) {\n    var entriesFrequency
        = getInput()\n            .lines()\n            .map(Long::parseLong)\n            .collect(Collectors.groupingBy(Function.identity(),
        Collectors.counting()));\n\n    List&amp;lt;Long&amp;gt; result = findSum(entriesFrequency,
        new ArrayList&amp;lt;&amp;gt;(), numEntries, goal);\n\n    return result.stream()\n            .map(BigInteger::valueOf)\n            .reduce(BigInteger.ONE,
        BigInteger::multiply);\n}\n\n\npublic List&amp;lt;Long&amp;gt; findSum(Map&amp;lt;Long,
        Long&amp;gt; entriesFrequency, List&amp;lt;Long&amp;gt; result, int entriesGoal,
        long sumGoal) {\n    for (Long entry : entriesFrequency.keySet()) {\n        result.add(entry);\n\n            if
        (result.size() == entriesGoal - 1\n                &amp;amp;&amp;amp; entriesFrequency.containsKey(sumGoal
        - sum(result))) {\n                result.add(sumGoal - sum(result));\n                if
        (noDuplicates(entriesFrequency, result)) {\n                    break;\n                }
        else {\n                    result.remove(result.size() - 1);\n                }\n        }
        else if (result.size() &amp;lt; entriesGoal - 1) {\n            findSum(entriesFrequency,
        result, entriesGoal, sumGoal);\n        }\n\n        if (result.size() !=
        entriesGoal) {\n            result.remove(result.size() - 1);\n        }\n    }\n    return
        result;\n}\n\nprivate Long sum(List&amp;lt;Long&amp;gt; result) {\n    long
        sum = 0;\n    for (Long r : result) {\n        sum += r;\n    }\n    return
        sum;\n}\n\nprivate boolean noDuplicates(Map&amp;lt;Long, Long&amp;gt; entriesFrequency,
        List&amp;lt;Long&amp;gt; result) {\n    var resultFrequency = result.stream().collect(Collectors.groupingBy(Function.identity(),
        Collectors.counting()));\n\n    for (var entry : resultFrequency.entrySet())
        {\n        if (entriesFrequency.get(entry.getKey()) &amp;lt; entry.getValue())
        {\n            return false;\n        }\n    }\n    return true;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gec2gg5/",
        "subreddit_type": "public", "locked": false, "name": "t1_gec2gg5", "created":
        1606881629.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gec5osj", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        2, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "My solution in\n\n**Python**\n\nNot in any way efficient
        but it works pretty quickly for me!\n\n    import math as m\n\n    with open(''./input1'',''r'')
        as f:\n            inp = f.read()\n\n    inp = [int(_) for _ in inp.split(''\\n'')][:-1]
        # something something EOF newline\n\n    for x in inp:\n        for y in inp:\n            if
        (x+y)==2020:\n                sol1 = (x,y)\n\n            for z in inp:\n                if
        (x+y+z)==2020:\n                    sol2 = (x,y,z)\n                    break\n\n    print(f\"The
        sol''n to part 1 is {m.prod(sol1)}\")\n    print(f\"The sol''n to part 2 is
        {m.prod(sol2)}\")\n\nI think I''m gonna try it in Rust next", "awarders":
        [], "downs": 0, "author_flair_css_class": null, "name": "t1_gec5osj", "collapsed":
        false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My
        solution in&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Not
        in any way efficient but it works pretty quickly for me!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        math as m\n\nwith open(&amp;#39;./input1&amp;#39;,&amp;#39;r&amp;#39;) as
        f:\n        inp = f.read()\n\ninp = [int(_) for _ in inp.split(&amp;#39;\\n&amp;#39;)][:-1]
        # something something EOF newline\n\nfor x in inp:\n    for y in inp:\n        if
        (x+y)==2020:\n            sol1 = (x,y)\n\n        for z in inp:\n            if
        (x+y+z)==2020:\n                sol2 = (x,y,z)\n                break\n\nprint(f&amp;quot;The
        sol&amp;#39;n to part 1 is {m.prod(sol1)}&amp;quot;)\nprint(f&amp;quot;The
        sol&amp;#39;n to part 2 is {m.prod(sol2)}&amp;quot;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I
        think I&amp;#39;m gonna try it in Rust next&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gec5osj/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606883625.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606883625.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gec65da",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "einsteinsboi",
        "can_mod_post": false, "created_utc": 1606883921.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_fc5pe", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My messy solution in **Python**\n\n[https://github.com/marymlucas/advent\\_of\\_code\\_2020/blob/main/day1.py](https://github.com/marymlucas/advent_of_code_2020/blob/main/day1.py)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My messy solution in
        &lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/marymlucas/advent_of_code_2020/blob/main/day1.py\"&gt;https://github.com/marymlucas/advent_of_code_2020/blob/main/day1.py&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gec65da/",
        "subreddit_type": "public", "locked": false, "name": "t1_gec65da", "created":
        1606883921.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gec7b6w",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Wunkolo",
        "can_mod_post": false, "created_utc": 1606884679.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_120x5f", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**C++**\n\n    #include &lt;cstddef&gt;\n    #include &lt;cstdint&gt;\n    #include
        &lt;iostream&gt;\n    #include &lt;fstream&gt;\n    #include &lt;vector&gt;\n    \n    std::uintmax_t
        Part1( const std::vector&lt;std::uintmax_t&gt;&amp; Numbers )\n    {\n            for(
        std::size_t i = 0; i &lt; Numbers.size(); ++i )\n            {\n                    for(
        std::size_t j = 0; j &lt; Numbers.size(); ++j )\n                    {\n                            if(
        Numbers[i] + Numbers[j] == 2020 )\n                                    return
        Numbers[i] * Numbers[j];\n                    }\n            }\n            return
        {};\n    }\n    \n    std::uintmax_t Part2( const std::vector&lt;std::uintmax_t&gt;&amp;
        Numbers )\n    {\n            for( std::size_t i = 0; i &lt; Numbers.size();
        ++i )\n            {\n                    for( std::size_t j = 0; j &lt; Numbers.size();
        ++j )\n                    {\n                            for( std::size_t
        k = 0; k &lt; Numbers.size(); ++k )\n                            {\n                                    if(
        Numbers[i] + Numbers[j] + Numbers[k] == 2020 )\n                                            return
        Numbers[i] * Numbers[j] * Numbers[k];\n                            }\n                    }\n            }\n            return
        {};\n    }\n    \n    int main(int argc, char *argv[])\n    {\n            std::vector&lt;std::uintmax_t&gt;
        Numbers;\n    \n            std::ifstream Input(argv[1]);\n            std::uintmax_t
        CurNumber;\n            while( Input &gt;&gt; CurNumber ) Numbers.push_back(CurNumber);\n    \n            std::cout
        &lt;&lt; Part1(Numbers) &lt;&lt; std::endl;\n            std::cout &lt;&lt;
        Part2(Numbers) &lt;&lt; std::endl;\n            return EXIT_SUCCESS;\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;C++&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include
        &amp;lt;cstddef&amp;gt;\n#include &amp;lt;cstdint&amp;gt;\n#include &amp;lt;iostream&amp;gt;\n#include
        &amp;lt;fstream&amp;gt;\n#include &amp;lt;vector&amp;gt;\n\nstd::uintmax_t
        Part1( const std::vector&amp;lt;std::uintmax_t&amp;gt;&amp;amp; Numbers )\n{\n        for(
        std::size_t i = 0; i &amp;lt; Numbers.size(); ++i )\n        {\n                for(
        std::size_t j = 0; j &amp;lt; Numbers.size(); ++j )\n                {\n                        if(
        Numbers[i] + Numbers[j] == 2020 )\n                                return
        Numbers[i] * Numbers[j];\n                }\n        }\n        return {};\n}\n\nstd::uintmax_t
        Part2( const std::vector&amp;lt;std::uintmax_t&amp;gt;&amp;amp; Numbers )\n{\n        for(
        std::size_t i = 0; i &amp;lt; Numbers.size(); ++i )\n        {\n                for(
        std::size_t j = 0; j &amp;lt; Numbers.size(); ++j )\n                {\n                        for(
        std::size_t k = 0; k &amp;lt; Numbers.size(); ++k )\n                        {\n                                if(
        Numbers[i] + Numbers[j] + Numbers[k] == 2020 )\n                                        return
        Numbers[i] * Numbers[j] * Numbers[k];\n                        }\n                }\n        }\n        return
        {};\n}\n\nint main(int argc, char *argv[])\n{\n        std::vector&amp;lt;std::uintmax_t&amp;gt;
        Numbers;\n\n        std::ifstream Input(argv[1]);\n        std::uintmax_t
        CurNumber;\n        while( Input &amp;gt;&amp;gt; CurNumber ) Numbers.push_back(CurNumber);\n\n        std::cout
        &amp;lt;&amp;lt; Part1(Numbers) &amp;lt;&amp;lt; std::endl;\n        std::cout
        &amp;lt;&amp;lt; Part2(Numbers) &amp;lt;&amp;lt; std::endl;\n        return
        EXIT_SUCCESS;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gec7b6w/", "subreddit_type":
        "public", "locked": false, "name": "t1_gec7b6w", "created": 1606884679.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": 1606921455.0, "mod_reason_by": null, "banned_by": null, "ups": 2,
        "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gec7jgm",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "rosso412",
        "can_mod_post": false, "created_utc": 1606884831.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_15oqmyqz", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My Day 1 in MIPS Assembler\n\nPart 1:\n\n&amp;#x200B;\n    .data\n\n\tList:
        .asciiz \"/home/user/Assembly/AdventOfCode/AdventOfCodeInput-1.12.20.txt\"\n\n\tListspacein:
        .space 1300\n\n\tListspacewo: .space 1300\n\n    .text\n\n    \\#select file\n\n    select:\n\n\tli
        $v0, 13\n\n\tla $a0, List\n\n\tli $a1, 0\n\n\tsyscall\n\n\tmove $s0, $v0\n\n    \\#read
        file + save to space\n\n    read:\n\n\tli $v0, 14\n\n\tmove $a0, $s0\n\n\tla
        $a1, Listspacein\n\n\tla $a2, 4096\n\n\tsyscall\n\n    \\#close file \n\n    close:\n\n\tli
        $v0, 16\n\n\tmove $a0, $s0\n\n\tsyscall\n\n    \\#remove \\\\n &amp; \\\\r\n\n\tla
        $t0, Listspacein \n\n\tla $t9, Listspacewo\n\n\tli $t2, 0\n\n    startfilter:\n\n\tlb
        $t1, ($t0)\n\n\tbeq $t1, 10, sas\n\n\tbeq $t1, 13, sas\n\n\tbeq $t0, 268502264,
        sas\n\n\tadd $t2, $t2, 1\n\n\tadd $t0, $t0, 1\n\n\tbgtu $t0, 268502266, ffilter\n\n\tj
        startfilter\n\n    sas:\n\n\tbne $t2, 3, sasloop\n\n\tli $t4,0\n\n\tsb $t4,
        ($t9)\n\n\tadd $t9, $t9, 1\n\n    sasloop:\n\n\tli $t4, 0\n\n\tsub $t3, $t0,
        $t2\n\n\tlb $t4, ($t3)\n\n\tsub $t4, $t4, 48\n\n\tsb $t4, ($t9)\n\n\tadd $t9,
        $t9, 1\n\n\tsub $t2, $t2, 1\n\n\tbeq $t2, 0, sasloopend\n\n\tj sasloop\n\n    sasloopend:\n\n\tadd
        $t0, $t0, 2\n\n\tbeq $t0, 268502266, ffilter\n\n\tj startfilter\n\n    ffilter:\n\n    \\#makesingle
        numbers\n\n\tla $t0, Listspacein\n\n\tli $t1, 0\n\n    emptyListspacein:\n\n\tsw
        $zero, ($t0)\n\n\tadd $t0, $t0, 4\n\n\tadd $t1, $t1, 4\n\n\tbeq $t1, 1300,
        Listspaceinempty\n\n\tj emptyListspacein\n\n    Listspaceinempty:\n\n\tla
        $t0, Listspacein\n\n\tsub $t9, $t9, 1\n\n\tli $t1,0\n\n\tli $t2,0\n\n\tli
        $t3,0\n\n\tli $t4,0\n\n    startmsnloop:\n\n\tlb $t1, ($t9)\n\n\tlb $t2, -1($t9)\n\n\tmul
        $t2, $t2, 10\n\n\tlb $t3, -2($t9)\n\n\tmul $t3, $t3, 100\n\n\tlb $t4, -3($t9)\n\n\tmul
        $t4, $t4, 1000\n\n\tadd $t1, $t1, $t2\n\n\tadd $t1, $t1, $t3\n\n\tadd $t1,
        $t1, $t4\n\n\tsw $t1, ($t0)\n\n\tsub $t9, $t9, 4\n\n\tadd $t0, $t0, 4\n\n\tla
        $t1, Listspacewo\n\n\tbgt $t1, $t9, msnloopend\n\n\tj startmsnloop\n\n    msnloopend:\n\n    \\#(find
        x+y=2020) &amp; (mul y &amp; y)\n\n\tla $t0, Listspacein\n\n\tadd $t8, $t0,
        1304\n\n    adut2020:\n\n\tlw $t1, ($t0)\n\n\tadd $t9, $zero, $t0\n\n    find2020:\n\n\tlw
        $t2, ($t9)\n\n\tadd $t3, $t1, $t2\n\n\tbeq $t3, 2020, eq2020\n\n\tadd $t9,
        $t9, 4\n\n\tbeq $t2, 0, inct0\n\n\tj find2020\n\n    inct0:\n\n\tadd $t0,
        $t0, 4\n\n\tj adut2020\n\n    eq2020:\n\n\tmul $t1, $t1, $t2\n\n    \\#print\n\n    print:\n\n\tmove
        $a0, $t1\n\n\tli $v0, 1\n\n\tsyscall\n\n    \\#end\n\n    end:\n\n\tli $v0,
        10\n\n\tsyscall\\`\\\\", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My
        Day 1 in MIPS Assembler&lt;/p&gt;\n\n&lt;p&gt;Part 1:&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;\n    .data&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;List:
        .asciiz &amp;quot;/home/user/Assembly/AdventOfCode/AdventOfCodeInput-1.12.20.txt&amp;quot;\n\nListspacein:
        .space 1300\n\nListspacewo: .space 1300\n\n.text\n\n\\#select file\n\nselect:\n\nli
        $v0, 13\n\nla $a0, List\n\nli $a1, 0\n\nsyscall\n\nmove $s0, $v0\n\n\\#read
        file + save to space\n\nread:\n\nli $v0, 14\n\nmove $a0, $s0\n\nla $a1, Listspacein\n\nla
        $a2, 4096\n\nsyscall\n\n\\#close file \n\nclose:\n\nli $v0, 16\n\nmove $a0,
        $s0\n\nsyscall\n\n\\#remove \\\\n &amp;amp; \\\\r\n\nla $t0, Listspacein \n\nla
        $t9, Listspacewo\n\nli $t2, 0\n\nstartfilter:\n\nlb $t1, ($t0)\n\nbeq $t1,
        10, sas\n\nbeq $t1, 13, sas\n\nbeq $t0, 268502264, sas\n\nadd $t2, $t2, 1\n\nadd
        $t0, $t0, 1\n\nbgtu $t0, 268502266, ffilter\n\nj startfilter\n\nsas:\n\nbne
        $t2, 3, sasloop\n\nli $t4,0\n\nsb $t4, ($t9)\n\nadd $t9, $t9, 1\n\nsasloop:\n\nli
        $t4, 0\n\nsub $t3, $t0, $t2\n\nlb $t4, ($t3)\n\nsub $t4, $t4, 48\n\nsb $t4,
        ($t9)\n\nadd $t9, $t9, 1\n\nsub $t2, $t2, 1\n\nbeq $t2, 0, sasloopend\n\nj
        sasloop\n\nsasloopend:\n\nadd $t0, $t0, 2\n\nbeq $t0, 268502266, ffilter\n\nj
        startfilter\n\nffilter:\n\n\\#makesingle numbers\n\nla $t0, Listspacein\n\nli
        $t1, 0\n\nemptyListspacein:\n\nsw $zero, ($t0)\n\nadd $t0, $t0, 4\n\nadd $t1,
        $t1, 4\n\nbeq $t1, 1300, Listspaceinempty\n\nj emptyListspacein\n\nListspaceinempty:\n\nla
        $t0, Listspacein\n\nsub $t9, $t9, 1\n\nli $t1,0\n\nli $t2,0\n\nli $t3,0\n\nli
        $t4,0\n\nstartmsnloop:\n\nlb $t1, ($t9)\n\nlb $t2, -1($t9)\n\nmul $t2, $t2,
        10\n\nlb $t3, -2($t9)\n\nmul $t3, $t3, 100\n\nlb $t4, -3($t9)\n\nmul $t4,
        $t4, 1000\n\nadd $t1, $t1, $t2\n\nadd $t1, $t1, $t3\n\nadd $t1, $t1, $t4\n\nsw
        $t1, ($t0)\n\nsub $t9, $t9, 4\n\nadd $t0, $t0, 4\n\nla $t1, Listspacewo\n\nbgt
        $t1, $t9, msnloopend\n\nj startmsnloop\n\nmsnloopend:\n\n\\#(find x+y=2020)
        &amp;amp; (mul y &amp;amp; y)\n\nla $t0, Listspacein\n\nadd $t8, $t0, 1304\n\nadut2020:\n\nlw
        $t1, ($t0)\n\nadd $t9, $zero, $t0\n\nfind2020:\n\nlw $t2, ($t9)\n\nadd $t3,
        $t1, $t2\n\nbeq $t3, 2020, eq2020\n\nadd $t9, $t9, 4\n\nbeq $t2, 0, inct0\n\nj
        find2020\n\ninct0:\n\nadd $t0, $t0, 4\n\nj adut2020\n\neq2020:\n\nmul $t1,
        $t1, $t2\n\n\\#print\n\nprint:\n\nmove $a0, $t1\n\nli $v0, 1\n\nsyscall\n\n\\#end\n\nend:\n\nli
        $v0, 10\n\nsyscall\\`\\\\\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gec7jgm/", "subreddit_type":
        "public", "locked": false, "name": "t1_gec7jgm", "created": 1606884831.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": 1606947047.0, "mod_reason_by": null, "banned_by": null, "ups": 1,
        "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gece159",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606889541.0, "send_replies": true,
        "parent_id": "t1_gec7jgm", "score": 1, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "~~Your code is not showing up correctly on old.reddit.  Could you please
        edit it using old.reddit''s four-spaces formatting instead of new.reddit''s
        triple backticks?  Note that if you''re using the visual editor, you may have
        to \"Switch to Markdown\" to get Reddit to understand the formatting properly.~~\n\nEdit:
        post was fixed, thanks!", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": true, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;del&gt;Your
        code is not showing up correctly on old.reddit.  Could you please edit it
        using old.reddit&amp;#39;s four-spaces formatting instead of new.reddit&amp;#39;s
        triple backticks?  Note that if you&amp;#39;re using the visual editor, you
        may have to &amp;quot;Switch to Markdown&amp;quot; to get Reddit to understand
        the formatting properly.&lt;/del&gt;&lt;/p&gt;\n\n&lt;p&gt;Edit: post was
        fixed, thanks!&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gece159/",
        "subreddit_type": "public", "locked": false, "name": "t1_gece159", "created":
        1606889541.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gecbbcr", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "KarmaFactChecker",
        "can_mod_post": false, "created_utc": 1606887466.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_5mctdvmp", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Javascript**\n\n    Inputs = Inputs.map(n =&gt; parseInt(n, 10));\n    //
        algorithm *-*\n    let our2020 = Inputs.filter(n =&gt; n + Inputs.find(k =&gt;
        k+n == 2020) == 2020);\n    console.log(\"Solution:\", our2020[0] * our2020[1]);\n\n&amp;#x200B;\n\n**Didn''t
        notice there was a part 2 so I''ll edit that solution in later...**", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Inputs
        = Inputs.map(n =&amp;gt; parseInt(n, 10));\n// algorithm *-*\nlet our2020
        = Inputs.filter(n =&amp;gt; n + Inputs.find(k =&amp;gt; k+n == 2020) == 2020);\nconsole.log(&amp;quot;Solution:&amp;quot;,
        our2020[0] * our2020[1]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Didn&amp;#39;t
        notice there was a part 2 so I&amp;#39;ll edit that solution in later...&lt;/strong&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gecbbcr/",
        "subreddit_type": "public", "locked": false, "name": "t1_gecbbcr", "created":
        1606887466.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606893465.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gecibnq", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "mberz2",
        "can_mod_post": false, "created_utc": 1606893133.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_83fpmjao", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Golang**\n\nMy first code challenge. So far so fun.\n\n    package main\n    \n    import
        (\n       \"bufio\";\"fmt\";\"os\";\"strconv\";\"sort\"\n    )\n    \n    func
        readInts(path string) ([]int){\n      \n      file, _ := os.Open(path)\n      defer
        file.Close()\n      var lines []int\n      scanner := bufio.NewScanner(file)\n      \n      for
        scanner.Scan(){\n        x, _ := strconv.Atoi(scanner.Text())\n        lines
        = append(lines, x)\n      }\n    \n      return lines\n    }\n    \n    func
        main() {\n    \n      arr := readInts(\"input.txt\")\n      doubles(arr);\n      triples(arr);\n    }\n    \n    func
        doubles(arr []int){\n      var m = make(map[int]int)\n    \n      for i :=
        0; i &lt; len(arr); i++ {\n        if(m[2020-arr[i]] != 0){\n          fmt.Println(\"Numbers
        are \", m[2020-arr[i]], \"&amp;\", arr[i])\n          fmt.Println(\"Product
        = \", m[2020-arr[i]]*arr[i])\n          break;\n        } else {\n          m[arr[i]]
        = arr[i];\n        }\n      }\n    \n    }\n    \n    func triples(arr []int){\n    \n      sort.Ints(arr);\n      r
        := len(arr) - 1;\n    \n      for i := 0 ; i &lt; len(arr)-2; i++ {\n        l
        := i + 1;\n        for l &lt; r {\n          if(arr[i] + arr[l] + arr[r] ==
        2020){\n            fmt.Println(\"Triplet = \", arr[i], arr[l], arr[r])\n            fmt.Println(\"Product
        = \", arr[i] * arr[l] * arr[r])\n            break;\n          } else if(arr[i]
        + arr[l] + arr[r] &lt; 2020){\n            l++;\n          } else {\n            r--;\n          }\n        }\n    \n      }\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Golang&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;My
        first code challenge. So far so fun.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package
        main\n\nimport (\n   &amp;quot;bufio&amp;quot;;&amp;quot;fmt&amp;quot;;&amp;quot;os&amp;quot;;&amp;quot;strconv&amp;quot;;&amp;quot;sort&amp;quot;\n)\n\nfunc
        readInts(path string) ([]int){\n\n  file, _ := os.Open(path)\n  defer file.Close()\n  var
        lines []int\n  scanner := bufio.NewScanner(file)\n\n  for scanner.Scan(){\n    x,
        _ := strconv.Atoi(scanner.Text())\n    lines = append(lines, x)\n  }\n\n  return
        lines\n}\n\nfunc main() {\n\n  arr := readInts(&amp;quot;input.txt&amp;quot;)\n  doubles(arr);\n  triples(arr);\n}\n\nfunc
        doubles(arr []int){\n  var m = make(map[int]int)\n\n  for i := 0; i &amp;lt;
        len(arr); i++ {\n    if(m[2020-arr[i]] != 0){\n      fmt.Println(&amp;quot;Numbers
        are &amp;quot;, m[2020-arr[i]], &amp;quot;&amp;amp;&amp;quot;, arr[i])\n      fmt.Println(&amp;quot;Product
        = &amp;quot;, m[2020-arr[i]]*arr[i])\n      break;\n    } else {\n      m[arr[i]]
        = arr[i];\n    }\n  }\n\n}\n\nfunc triples(arr []int){\n\n  sort.Ints(arr);\n  r
        := len(arr) - 1;\n\n  for i := 0 ; i &amp;lt; len(arr)-2; i++ {\n    l :=
        i + 1;\n    for l &amp;lt; r {\n      if(arr[i] + arr[l] + arr[r] == 2020){\n        fmt.Println(&amp;quot;Triplet
        = &amp;quot;, arr[i], arr[l], arr[r])\n        fmt.Println(&amp;quot;Product
        = &amp;quot;, arr[i] * arr[l] * arr[r])\n        break;\n      } else if(arr[i]
        + arr[l] + arr[r] &amp;lt; 2020){\n        l++;\n      } else {\n        r--;\n      }\n    }\n\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gecibnq/",
        "subreddit_type": "public", "locked": false, "name": "t1_gecibnq", "created":
        1606893133.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geco79q",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "MrMikardo",
        "can_mod_post": false, "created_utc": 1606898632.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_1t838kyf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Day 1, in Answer Set Programming (ASP):\n\n    {in(N)} :- input(N).\n    N
        = 2020 :- #sum{I : in(I)} = N.\n    N = 2 :- #count{I: in(I)} = N.\n    #show
        in/1.\n\n&amp;#x200B;\n\nThis assumes that you''ve already parsed the input
        stream into `input(...)` atoms, of course! But that can easily be done with
        a Python script.\n\nDay 2 is the same as the above, adjusting the second N
        to be 3. And then you need to find the product of the results :)", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Day 1, in Answer Set Programming (ASP):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{in(N)}
        :- input(N).\nN = 2020 :- #sum{I : in(I)} = N.\nN = 2 :- #count{I: in(I)}
        = N.\n#show in/1.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;This
        assumes that you&amp;#39;ve already parsed the input stream into &lt;code&gt;input(...)&lt;/code&gt;
        atoms, of course! But that can easily be done with a Python script.&lt;/p&gt;\n\n&lt;p&gt;Day
        2 is the same as the above, adjusting the second N to be 3. And then you need
        to find the product of the results :)&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geco79q/", "subreddit_type":
        "public", "locked": false, "name": "t1_geco79q", "created": 1606898632.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gecq4io", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "cnille", "can_mod_post": false, "created_utc":
        1606900635.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 2,
        "author_fullname": "t2_167eit", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "## python\n\n    def part1(arr):\n        rests
        = set()\n        for x in arr:\n            rest = 2020 - x\n            if
        rest in rests:\n                return rest * x\n            else:\n                rests.add(x)\n    def
        part2(arr):\n        rests = {}\n        for x in arr:\n            for y
        in arr:\n                rests[x + y] = x * y\n        for x in arr:\n            rest
        = 2020 - x\n            if rest in rests:\n                return x * rests[rest]\n\nSolutions
        in `O(n)` for part1 and `O(n^2)` for part2.   \nBlog about todays puzzle with
        alternative solutions: [https://dev.to/cnille/aoc-2020-day-1-a1k](https://dev.to/cnille/aoc-2020-day-1-a1k)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h2&gt;python&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        part1(arr):\n    rests = set()\n    for x in arr:\n        rest = 2020 - x\n        if
        rest in rests:\n            return rest * x\n        else:\n            rests.add(x)\ndef
        part2(arr):\n    rests = {}\n    for x in arr:\n        for y in arr:\n            rests[x
        + y] = x * y\n    for x in arr:\n        rest = 2020 - x\n        if rest
        in rests:\n            return x * rests[rest]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Solutions
        in &lt;code&gt;O(n)&lt;/code&gt; for part1 and &lt;code&gt;O(n^2)&lt;/code&gt;
        for part2.&lt;br/&gt;\nBlog about todays puzzle with alternative solutions:
        &lt;a href=\"https://dev.to/cnille/aoc-2020-day-1-a1k\"&gt;https://dev.to/cnille/aoc-2020-day-1-a1k&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gecq4io/",
        "subreddit_type": "public", "locked": false, "name": "t1_gecq4io", "created":
        1606900635.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gecsn65",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "RasterCrow",
        "can_mod_post": false, "created_utc": 1606903416.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_7pi0a", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My solution in Python 3 \n\n`f\u00a0= open(\"input.txt\",\u00a0\"r\")`  \n`lines\u00a0=\u00a0f.read().splitlines()`\u00a0  \n`f.close()`  \n`#\u00a0Part1`  \n`def
        part1():`  \n `for\u00a0a\u00a0in range(len(lines)):`\u00a0\u00a0  \n `for\u00a0b\u00a0in
        range(a,len(lines)):`  \n `if int(lines[a])+int(lines[b])==2020:`  \n `print(int(lines[a])*int(lines[b]))`  \n`#\u00a0Part\u00a02`  \n`def
        part2():`  \n `for\u00a0a\u00a0in range(len(lines)):`\u00a0\u00a0  \n `for\u00a0b\u00a0in
        range(a,len(lines)):`  \n `for\u00a0c\u00a0in range(b,len(lines)):`  \n `if
        int(lines[a])+int(lines[b])+int(lines[c])==2020:`  \n `print(int(lines[a])*int(lines[b])*int(lines[c]))`",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My solution in Python
        3 &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;f\u00a0= open(&amp;quot;input.txt&amp;quot;,\u00a0&amp;quot;r&amp;quot;)&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;lines\u00a0=\u00a0f.read().splitlines()&lt;/code&gt;\u00a0&lt;br/&gt;\n&lt;code&gt;f.close()&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;#\u00a0Part1&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;def
        part1():&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;for\u00a0a\u00a0in range(len(lines)):&lt;/code&gt;\u00a0\u00a0&lt;br/&gt;\n
        &lt;code&gt;for\u00a0b\u00a0in range(a,len(lines)):&lt;/code&gt;&lt;br/&gt;\n
        &lt;code&gt;if int(lines[a])+int(lines[b])==2020:&lt;/code&gt;&lt;br/&gt;\n
        &lt;code&gt;print(int(lines[a])*int(lines[b]))&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;#\u00a0Part\u00a02&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;def
        part2():&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;for\u00a0a\u00a0in range(len(lines)):&lt;/code&gt;\u00a0\u00a0&lt;br/&gt;\n
        &lt;code&gt;for\u00a0b\u00a0in range(a,len(lines)):&lt;/code&gt;&lt;br/&gt;\n
        &lt;code&gt;for\u00a0c\u00a0in range(b,len(lines)):&lt;/code&gt;&lt;br/&gt;\n
        &lt;code&gt;if int(lines[a])+int(lines[b])+int(lines[c])==2020:&lt;/code&gt;&lt;br/&gt;\n
        &lt;code&gt;print(int(lines[a])*int(lines[b])*int(lines[c]))&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gecsn65/",
        "subreddit_type": "public", "locked": false, "name": "t1_gecsn65", "created":
        1606903416.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gectazu",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "InflationSquare",
        "can_mod_post": false, "created_utc": 1606904163.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_6wpol", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My python3 solution. Swapping out the size of the combinations from 2 to
        3 gives the second answer. My test data happened to have a solution for size
        4 as well.\n\n    from itertools import combinations\n    from math import
        prod\n    with open(''1-1.in'', ''r'') as f:\n        data = f.read().splitlines()\n    print(next(prod(x)
        for x in combinations([int(x) for x in data], 2) if sum(x) == 2020))", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;My python3 solution. Swapping out the size
        of the combinations from 2 to 3 gives the second answer. My test data happened
        to have a solution for size 4 as well.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from
        itertools import combinations\nfrom math import prod\nwith open(&amp;#39;1-1.in&amp;#39;,
        &amp;#39;r&amp;#39;) as f:\n    data = f.read().splitlines()\nprint(next(prod(x)
        for x in combinations([int(x) for x in data], 2) if sum(x) == 2020))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gectazu/",
        "subreddit_type": "public", "locked": false, "name": "t1_gectazu", "created":
        1606904163.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gecyms2",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "MrLeapingLemur",
        "can_mod_post": false, "created_utc": 1606909754.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_5h1k6", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Solution in Python3:  \n\n\n    import os\n    from itertools import combinations\n    \n    allNums
        = []\n    with open(\"aoc2020_01_B.txt\",\"r\") as f:\n    \tfor line in f.readlines():\n    \t\tallNums.append(int(line.rstrip()))\n    #part
        1\n    for c in combinations(allNums,2):\n    \tif c[0]+c[1]==2020:\n    \t\tprint(c[0]*c[1])\n    #part
        2\n    for c in combinations(allNums,3):\n    \tif c[0]+c[1]+c[2]==2020:\n    \t\tprint(c[0]*c[1]*c[2])",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Solution in Python3:  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        os\nfrom itertools import combinations\n\nallNums = []\nwith open(&amp;quot;aoc2020_01_B.txt&amp;quot;,&amp;quot;r&amp;quot;)
        as f:\n    for line in f.readlines():\n        allNums.append(int(line.rstrip()))\n#part
        1\nfor c in combinations(allNums,2):\n    if c[0]+c[1]==2020:\n        print(c[0]*c[1])\n#part
        2\nfor c in combinations(allNums,3):\n    if c[0]+c[1]+c[2]==2020:\n        print(c[0]*c[1]*c[2])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gecyms2/",
        "subreddit_type": "public", "locked": false, "name": "t1_gecyms2", "created":
        1606909754.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gefvvqo",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "danielnieto89",
        "can_mod_post": false, "created_utc": 1606959075.0, "send_replies": true,
        "parent_id": "t1_gecyms2", "score": 2, "author_fullname": "t2_114c1b", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "&gt;from itertools import combinations\n\ncool! I didn''t know combinations
        function", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;from
        itertools import combinations&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;cool!
        I didn&amp;#39;t know combinations function&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gefvvqo/", "subreddit_type":
        "public", "locked": false, "name": "t1_gefvvqo", "created": 1606959075.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 1, "name":
        "t1_gehoi2p", "id": "gehoi2p", "parent_id": "t1_gefvvqo", "depth": 2, "children":
        ["gehoi2p"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ged2syd", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "mack06_",
        "can_mod_post": false, "created_utc": 1606913407.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_28d8020s", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My [typescript solutions](https://github.com/oddbytes/adventofcode/tree/master/src/2020/Day%201)
        (O(N2) &amp;&amp; O(N) for part1)\n\nMore details in spanish in my AoC blog
        -  [Advent of Code 2020 - D\u00eda 1](https://oddbytes.net/typescript/advent-code-2020-dia-1/)
        .", "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My &lt;a href=\"https://github.com/oddbytes/adventofcode/tree/master/src/2020/Day%201\"&gt;typescript
        solutions&lt;/a&gt; (O(N2) &amp;amp;&amp;amp; O(N) for part1)&lt;/p&gt;\n\n&lt;p&gt;More
        details in spanish in my AoC blog -  &lt;a href=\"https://oddbytes.net/typescript/advent-code-2020-dia-1/\"&gt;Advent
        of Code 2020 - D\u00eda 1&lt;/a&gt; .&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ged2syd/", "subreddit_type":
        "public", "locked": false, "name": "t1_ged2syd", "created": 1606913407.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "ged959m", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "adventOfCodeJess", "can_mod_post": false,
        "created_utc": 1606917371.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 2, "author_fullname": "t2_5zbfjnzz", "report_reasons": null, "approved_by":
        null, "all_awardings": [], "collapsed": false, "body": "Jess\n\n[day1.clp](https://topaz.github.io/paste/#XQAAAQB8BgAAAAAAAAAUGQimgxSd1AWW6sc0AfJLl2gzgCG9kG2xttr7azAyx+LFeGsYTt+yKJGsWR2ggVWyCRvbOO8UJYDNReG6hUrp37am0lDC4Yc4t/bSQHz0eFg/i5lI8pcU6iuebWGCfU+5+bSC9h0rixh05T6lKBP0FZsGanN8qnpP5pd5hbkEkGD9KGeHqOaazlk91EJbTSNunqRGtvw1mPxD6ST0MWLPgfqpDmisf7IfRFIFGE/PuyVbTXg5ETlCSAemvQh41VvwIEeAR9hO1998PxZD5mS+wH2KnaQ4wmWnCUvnQGGt0I7FiURtRbTdw/wKgeO6iLjy/bYZ9IuCkbHhdL1UMqzdkxs2qu2Vxc/XXkXgcgTHGk7lgWpenT6OkO9VrJVdImLXLauSbJ82yc5QKbQvRXSpL+xc/JQGNDlzvZu8c21Fokve2x+1zIrwyEtMGZgoK8yH2DGXXwZrw8Df0h1P+1mjdh+iJQsAMgezzuhfX0AijZzqKEfuGdtIjDdPenRiIgQbsSmLuZMV+NES5PeR51tN2PgwPL6l+8TvT24Ufxm0A9Is8DJrlCAI23oHa01CBbVn8NPg01ZVpJcbsKVhkGuwJkCAgy7AhYrAfpYOqyMWdlLlG8przu5q/6kD6GU=)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Jess&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://topaz.github.io/paste/#XQAAAQB8BgAAAAAAAAAUGQimgxSd1AWW6sc0AfJLl2gzgCG9kG2xttr7azAyx+LFeGsYTt+yKJGsWR2ggVWyCRvbOO8UJYDNReG6hUrp37am0lDC4Yc4t/bSQHz0eFg/i5lI8pcU6iuebWGCfU+5+bSC9h0rixh05T6lKBP0FZsGanN8qnpP5pd5hbkEkGD9KGeHqOaazlk91EJbTSNunqRGtvw1mPxD6ST0MWLPgfqpDmisf7IfRFIFGE/PuyVbTXg5ETlCSAemvQh41VvwIEeAR9hO1998PxZD5mS+wH2KnaQ4wmWnCUvnQGGt0I7FiURtRbTdw/wKgeO6iLjy/bYZ9IuCkbHhdL1UMqzdkxs2qu2Vxc/XXkXgcgTHGk7lgWpenT6OkO9VrJVdImLXLauSbJ82yc5QKbQvRXSpL+xc/JQGNDlzvZu8c21Fokve2x+1zIrwyEtMGZgoK8yH2DGXXwZrw8Df0h1P+1mjdh+iJQsAMgezzuhfX0AijZzqKEfuGdtIjDdPenRiIgQbsSmLuZMV+NES5PeR51tN2PgwPL6l+8TvT24Ufxm0A9Is8DJrlCAI23oHa01CBbVn8NPg01ZVpJcbsKVhkGuwJkCAgy7AhYrAfpYOqyMWdlLlG8przu5q/6kD6GU=\"&gt;day1.clp&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ged959m/",
        "subreddit_type": "public", "locked": false, "name": "t1_ged959m", "created":
        1606917371.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gedjo2d",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "iwane",
        "can_mod_post": false, "created_utc": 1606922164.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_bn49m", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "LabVIEW 2020 (G)\n\n[http://htmlpreview.github.io/?https://github.com/iwane-pl/aoc\\_2020/blob/main/AoC%20Day%201/Documentation/Solution/Solution.html](http://htmlpreview.github.io/?https://github.com/iwane-pl/aoc_2020/blob/main/AoC%20Day%201/Documentation/Solution/Solution.html)\n\n[http://htmlpreview.github.io/?https://github.com/iwane-pl/aoc\\_2020/blob/main/AoC%20Day%201/Documentation/Solution%20part%202/Solution\\_part\\_2.html](http://htmlpreview.github.io/?https://github.com/iwane-pl/aoc_2020/blob/main/AoC%20Day%201/Documentation/Solution%20part%202/Solution_part_2.html)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;LabVIEW 2020 (G)&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"http://htmlpreview.github.io/?https://github.com/iwane-pl/aoc_2020/blob/main/AoC%20Day%201/Documentation/Solution/Solution.html\"&gt;http://htmlpreview.github.io/?https://github.com/iwane-pl/aoc_2020/blob/main/AoC%20Day%201/Documentation/Solution/Solution.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"http://htmlpreview.github.io/?https://github.com/iwane-pl/aoc_2020/blob/main/AoC%20Day%201/Documentation/Solution%20part%202/Solution_part_2.html\"&gt;http://htmlpreview.github.io/?https://github.com/iwane-pl/aoc_2020/blob/main/AoC%20Day%201/Documentation/Solution%20part%202/Solution_part_2.html&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gedjo2d/",
        "subreddit_type": "public", "locked": false, "name": "t1_gedjo2d", "created":
        1606922164.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606975820.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gedl7y0", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "tururut_tururut",
        "can_mod_post": false, "created_utc": 1606922832.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_4xuiwc2u", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Incredibly bruteforce but did the job done (Python).\n\nFirst part\n\n`import
        pandas as pd`           \n\n`numbers = pd.read_clipboard()`   \n\n`solution
        = []`   \n\n`for number in numbers[\"numbers\"]:`\n\n`for i in range(0,200):`\n\n`if
        number+numbers[\"numbers\"][i] == 2020:`\n\n`solution.append([number,numbers[\"numbers\"][i]])`\n\n`else:`\n\n`pass`\n\n`import
        numpy as np`\n\n`solution2 = np.array(solution[0])`\n\n`print(solution2[0]*solution2[1])`
        \n\nSecond part\n\n `import pandas as pd`       \n  \n`numbers = pd.read_clipboard()`    \n\n
        `solution = []` \n\n`for number in numbers[\"numbers\"]:`\n\n`for i in range(0,200):`\n\n`for
        j in range(0,200):`      \n\n`if number+numbers[\"numbers\"][i]+numbers[\"numbers\"][j]
        == 2020:`\n\n`solution.append([number,numbers[\"numbers\"][i], numbers[\"numbers\"][j]`\n\n`else:`
        \n\n`pass`       \n`import numpy as np`       \n`solution2 = np.array(solution[0])`       \n`print(solution2[0]*solution2[1]*solution2[2])`",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Incredibly bruteforce
        but did the job done (Python).&lt;/p&gt;\n\n&lt;p&gt;First part&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;import
        pandas as pd&lt;/code&gt;           &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;numbers
        = pd.read_clipboard()&lt;/code&gt;   &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;solution
        = []&lt;/code&gt;   &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;for number in numbers[&amp;quot;numbers&amp;quot;]:&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;for
        i in range(0,200):&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;if number+numbers[&amp;quot;numbers&amp;quot;][i]
        == 2020:&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;solution.append([number,numbers[&amp;quot;numbers&amp;quot;][i]])&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;else:&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;pass&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;import
        numpy as np&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;solution2 = np.array(solution[0])&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;print(solution2[0]*solution2[1])&lt;/code&gt;
        &lt;/p&gt;\n\n&lt;p&gt;Second part&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;import
        pandas as pd&lt;/code&gt;       &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;numbers
        = pd.read_clipboard()&lt;/code&gt;    &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;solution
        = []&lt;/code&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;for number in numbers[&amp;quot;numbers&amp;quot;]:&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;for
        i in range(0,200):&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;for j in
        range(0,200):&lt;/code&gt;      &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;if number+numbers[&amp;quot;numbers&amp;quot;][i]+numbers[&amp;quot;numbers&amp;quot;][j]
        == 2020:&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;solution.append([number,numbers[&amp;quot;numbers&amp;quot;][i],
        numbers[&amp;quot;numbers&amp;quot;][j]&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;else:&lt;/code&gt;
        &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;pass&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;import
        numpy as np&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;solution2 = np.array(solution[0])&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;print(solution2[0]*solution2[1]*solution2[2])&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gedl7y0/",
        "subreddit_type": "public", "locked": false, "name": "t1_gedl7y0", "created":
        1606922832.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gef6epr",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606946798.0, "send_replies": true,
        "parent_id": "t1_gedl7y0", "score": 2, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Please add the language to your post to make it easier for folks who Ctrl-F
        the megathreads looking for a specific language.  Thanks!", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": true, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Please add the language to your post to
        make it easier for folks who Ctrl-F the megathreads looking for a specific
        language.  Thanks!&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gef6epr/",
        "subreddit_type": "public", "locked": false, "name": "t1_gef6epr", "created":
        1606946798.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gedmx6c", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "jeffers0n",
        "can_mod_post": false, "created_utc": 1606923548.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_4akw5", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My solution in Ruby:\n\n`#!/bin/env ruby`  \n`#Find the two entries that
        sum to 2020; what do you get if you multiply them together?`  \n`numbers =
        File.readlines(''./input'')`  \n`numbers.each do |num1|`  \n `numbers.each
        do |num2|`  \n `sum = num1.to_i + num2.to_i`  \n `puts num1.strip + ''+''
        + num2.strip + ''='' + sum.to_s`  \n `if sum == 2020`  \n `puts num1.to_i
        * num2.to_i`  \n `exit`  \n `end`  \n `end`  \n`end`", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;My solution in Ruby:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;#!/bin/env
        ruby&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;#Find the two entries that sum to
        2020; what do you get if you multiply them together?&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;numbers
        = File.readlines(&amp;#39;./input&amp;#39;)&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;numbers.each
        do |num1|&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;numbers.each do |num2|&lt;/code&gt;&lt;br/&gt;\n
        &lt;code&gt;sum = num1.to_i + num2.to_i&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;puts
        num1.strip + &amp;#39;+&amp;#39; + num2.strip + &amp;#39;=&amp;#39; + sum.to_s&lt;/code&gt;&lt;br/&gt;\n
        &lt;code&gt;if sum == 2020&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;puts num1.to_i
        * num2.to_i&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;exit&lt;/code&gt;&lt;br/&gt;\n
        &lt;code&gt;end&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;end&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;end&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gedmx6c/",
        "subreddit_type": "public", "locked": false, "name": "t1_gedmx6c", "created":
        1606923548.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1607010075.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gednq6d", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "onionpopcorn",
        "can_mod_post": false, "created_utc": 1606923884.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_14rgj9", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "java  \n\n    import java.util.HashMap;\n    import java.util.Map;\n    import
        java.util.Scanner;\n    \u200b\n    public class addition\n    {\n        public
        static void main(String[] args)\n        {\n            Map&lt;Integer, Integer&gt;
        resultMap = new HashMap&lt;Integer, Integer&gt;();\n            Scanner scanner
        = new Scanner(System.in);\n    \u200b\n            while (true)\n            {\n                try\n                {\n                    Integer
        number = scanner.nextInt();\n                    Integer numberNeeded = 2020
        - number;\n    \u200b\n                    if(resultMap.containsKey(numberNeeded)){\n                        System.out.println(number
        * numberNeeded);\n                        break;\n                    }\n                    else{\n                        resultMap.put(number,
        null);\n                    }\n    \u200b\n                }\n                catch
        (Exception e)\n                {\n                    break;\n                }\n            }\n        }\n\nEdit:
        part2\n\n     public class addition\n     {\n         public static void main(String[]
        args)\n         {\n             Map&lt;Integer, Integer&gt; resultMap = new
        HashMap&lt;Integer, Integer&gt;();\n             Scanner scanner = new Scanner(System.in);\n     \n             while
        (true)\n             {\n                 try\n                 {\n                     Integer
        number = scanner.nextInt();\n     \n                     for (Integer currNum
        : resultMap.keySet())\n                     {\n                         Integer
        numberNeeded = 2020 - (number + currNum);\n     \n                         if
        (numberNeeded != currNum &amp;&amp; resultMap.containsKey(numberNeeded))\n                         {\n                             System.out.println(number
        + \" \" + currNum + \" \" + numberNeeded);\n                             System.out.println(number
        * currNum * numberNeeded);\n                             break;\n                         }\n                     }\n                     resultMap.put(number,
        null);\n     \n                 }\n                 catch (Exception e)\n                 {\n                     break;\n                 }\n             }\n         }\n     }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;java  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\u200b\npublic
        class addition\n{\n    public static void main(String[] args)\n    {\n        Map&amp;lt;Integer,
        Integer&amp;gt; resultMap = new HashMap&amp;lt;Integer, Integer&amp;gt;();\n        Scanner
        scanner = new Scanner(System.in);\n\u200b\n        while (true)\n        {\n            try\n            {\n                Integer
        number = scanner.nextInt();\n                Integer numberNeeded = 2020 -
        number;\n\u200b\n                if(resultMap.containsKey(numberNeeded)){\n                    System.out.println(number
        * numberNeeded);\n                    break;\n                }\n                else{\n                    resultMap.put(number,
        null);\n                }\n\u200b\n            }\n            catch (Exception
        e)\n            {\n                break;\n            }\n        }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Edit:
        part2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; public class addition\n {\n     public
        static void main(String[] args)\n     {\n         Map&amp;lt;Integer, Integer&amp;gt;
        resultMap = new HashMap&amp;lt;Integer, Integer&amp;gt;();\n         Scanner
        scanner = new Scanner(System.in);\n\n         while (true)\n         {\n             try\n             {\n                 Integer
        number = scanner.nextInt();\n\n                 for (Integer currNum : resultMap.keySet())\n                 {\n                     Integer
        numberNeeded = 2020 - (number + currNum);\n\n                     if (numberNeeded
        != currNum &amp;amp;&amp;amp; resultMap.containsKey(numberNeeded))\n                     {\n                         System.out.println(number
        + &amp;quot; &amp;quot; + currNum + &amp;quot; &amp;quot; + numberNeeded);\n                         System.out.println(number
        * currNum * numberNeeded);\n                         break;\n                     }\n                 }\n                 resultMap.put(number,
        null);\n\n             }\n             catch (Exception e)\n             {\n                 break;\n             }\n         }\n     }\n
        }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gednq6d/",
        "subreddit_type": "public", "locked": false, "name": "t1_gednq6d", "created":
        1606923884.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606947092.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gef6cjx", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606946770.0, "send_replies": true,
        "parent_id": "t1_gednq6d", "score": 2, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "~~This code is really hard to read on old.reddit.  Could you please edit
        it using old.reddit''s four-spaces formatting instead of new.reddit''s triple
        backticks?  Note that if you''re using the visual editor, you may have to
        \"Switch to Markdown\" to get Reddit to understand the formatting properly.~~\n\nEdit:
        post was fixed, thanks!", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": true, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;del&gt;This
        code is really hard to read on old.reddit.  Could you please edit it using
        old.reddit&amp;#39;s four-spaces formatting instead of new.reddit&amp;#39;s
        triple backticks?  Note that if you&amp;#39;re using the visual editor, you
        may have to &amp;quot;Switch to Markdown&amp;quot; to get Reddit to understand
        the formatting properly.&lt;/del&gt;&lt;/p&gt;\n\n&lt;p&gt;Edit: post was
        fixed, thanks!&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gef6cjx/",
        "subreddit_type": "public", "locked": false, "name": "t1_gef6cjx", "created":
        1606946770.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gef6ro1", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "onionpopcorn",
        "can_mod_post": false, "created_utc": 1606946962.0, "send_replies": true,
        "parent_id": "t1_gef6cjx", "score": 2, "author_fullname": "t2_14rgj9", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Thanks, is that better?", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks,
        is that better?&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gef6ro1/",
        "subreddit_type": "public", "locked": false, "name": "t1_gef6ro1", "created":
        1606946962.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gef70gm",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606947077.0, "send_replies": true,
        "parent_id": "t1_gef6ro1", "score": 2, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "\ud83d\udc4d", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": true, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;\ud83d\udc4d&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gef70gm/",
        "subreddit_type": "public", "locked": false, "name": "t1_gef70gm", "created":
        1606947077.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge99dmt", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "SpiritDry8585",
        "can_mod_post": false, "created_utc": 1606829759.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 3, "author_fullname": "t2_8b4t7kwd", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python\n\nPart-2\n\n&amp;#x200B;\n\n    import random\n    \n    filename
        = ''text_files\\\\puz1.txt''\n    data = []\n    \n    with open(filename)
        as f:\n        for row in f:\n            data.append(row.strip())\n    i
        = 0\n    while True:\n        var1 = random.randint(0, 199)\n        var2
        = random.randint(0, 199)\n        var3 = random.randint(0, 199)\n    \n        if
        int(data[var1]) + int(data[var2]) + int(data[var3]) == 2020:\n            print(int(data[var2])*int(data[var3])*int(data[var1]))\n            break",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python&lt;/p&gt;\n\n&lt;p&gt;Part-2&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        random\n\nfilename = &amp;#39;text_files\\\\puz1.txt&amp;#39;\ndata = []\n\nwith
        open(filename) as f:\n    for row in f:\n        data.append(row.strip())\ni
        = 0\nwhile True:\n    var1 = random.randint(0, 199)\n    var2 = random.randint(0,
        199)\n    var3 = random.randint(0, 199)\n\n    if int(data[var1]) + int(data[var2])
        + int(data[var3]) == 2020:\n        print(int(data[var2])*int(data[var3])*int(data[var1]))\n        break\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge99dmt/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge99dmt", "created":
        1606829759.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 5, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9g52m",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "MiataCory",
        "can_mod_post": false, "created_utc": 1606833900.0, "send_replies": true,
        "parent_id": "t1_ge99dmt", "score": 5, "author_fullname": "t2_16r1kk", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Hold up.\n\nAre you just checking random number positions until you get an
        answer?!", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hold
        up.&lt;/p&gt;\n\n&lt;p&gt;Are you just checking random number positions until
        you get an answer?!&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9g52m/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9g52m", "created":
        1606833900.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9ot17",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "IlliterateJedi",
        "can_mod_post": false, "created_utc": 1606838365.0, "send_replies": true,
        "parent_id": "t1_ge9g52m", "score": 3, "author_fullname": "t2_2keby", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "It''s the most Pythonic way to do this imo", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;It&amp;#39;s the most Pythonic way to do this imo&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9ot17/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9ot17", "created":
        1606838365.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_gea3asd", "id": "gea3asd", "parent_id":
        "t1_ge9ot17", "depth": 3, "children": ["gea3asd"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606845234.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9nuai", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "SpiritDry8585",
        "can_mod_post": false, "created_utc": 1606837899.0, "send_replies": true,
        "parent_id": "t1_ge9g52m", "score": 2, "author_fullname": "t2_8b4t7kwd", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Actually I''m at a beginner stage, I know its not great performance wise(part-2
        took more than 4,5 seconds in cmd) but it worked which was unexpected for
        me :).", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Actually
        I&amp;#39;m at a beginner stage, I know its not great performance wise(part-2
        took more than 4,5 seconds in cmd) but it worked which was unexpected for
        me :).&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9nuai/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9nuai", "created":
        1606837899.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 4, "name": "t1_ge9zmvj", "id": "ge9zmvj", "parent_id":
        "t1_ge9nuai", "depth": 3, "children": ["ge9zmvj"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gebdjkq",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "legally_art",
        "can_mod_post": false, "created_utc": 1606867638.0, "send_replies": true,
        "parent_id": "t1_ge9g52m", "score": 2, "author_fullname": "t2_8uqrusix", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "A true chaotic neutral.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;A
        true chaotic neutral.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebdjkq/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebdjkq", "created":
        1606867638.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge9qgzn", "id": "ge9qgzn", "parent_id":
        "t1_ge9g52m", "depth": 2, "children": ["ge9qgzn"]}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9j1er", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_ge99dmt", "score":
        2, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Haha, that''s an interesting way of doing part 2 ;) I''m
        not convinced it''s slower than my solution :p", "awarders": [], "downs":
        0, "author_flair_css_class": null, "name": "t1_ge9j1er", "collapsed": false,
        "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Haha,
        that&amp;#39;s an interesting way of doing part 2 ;) I&amp;#39;m not convinced
        it&amp;#39;s slower than my solution :p&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9j1er/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606835471.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606835471.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_ge9nxif", "id": "ge9nxif", "parent_id":
        "t1_ge9j1er", "depth": 2, "children": ["ge9nxif"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8g3mb",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "AccusationsInc",
        "can_mod_post": false, "created_utc": 1606802260.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_qhd3tti", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "First-year participating. Added some unnecessary flair just to meet the style
        guidelines that have been drilled into me this first year of college lol.\n\n  https://pastebin.com/Y4q8SaD8",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;First-year participating.
        Added some unnecessary flair just to meet the style guidelines that have been
        drilled into me this first year of college lol.&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://pastebin.com/Y4q8SaD8\"&gt;https://pastebin.com/Y4q8SaD8&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8g3mb/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8g3mb", "created":
        1606802260.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8n2hm",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606808229.0, "send_replies": true,
        "parent_id": "t1_ge8g3mb", "score": 1, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "&gt; Added some unnecessary flair just to meet the style guidelines that
        have been drilled into me this first year of college lol.\n\nWow, you added
        ~comments~ to your code!   &gt;____&gt;", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": true, "body_html": "&lt;div
        class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Added some unnecessary flair
        just to meet the style guidelines that have been drilled into me this first
        year of college lol.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Wow, you added
        ~comments~ to your code!   &amp;gt;____&amp;gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8n2hm/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8n2hm", "created":
        1606808229.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": 1606821593.0,
        "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8zfpr", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "w133",
        "can_mod_post": false, "created_utc": 1606821165.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_q3o2c", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python\n\nPart 1, linear in time and space\n\n    def sol1(input):\n      is_in
        = [False] * 2020\n      for x in input:\n        if is_in[2020 - x]:\n          return
        x * (2020 - x)\n        else:\n          is_in[x] = True\n\n\nPart 2, quadratic
        in time, linear in space\n\n    def sol2(input):\n      is_in = [False] *
        2021\n    \n      for i in range(len(input)):\n        for j in range(i+1,
        len(input)):\n          x, y = input[i], input[j]\n          if x+y &lt;=
        2020:\n            is_in[x+y] = x*y\n    \n      for z in input:\n        if
        is_in[2020-z]:\n          return is_in[2020-z] * z", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Python&lt;/p&gt;\n\n&lt;p&gt;Part 1, linear in time
        and space&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def sol1(input):\n  is_in =
        [False] * 2020\n  for x in input:\n    if is_in[2020 - x]:\n      return x
        * (2020 - x)\n    else:\n      is_in[x] = True\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2, quadratic in time, linear in space&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        sol2(input):\n  is_in = [False] * 2021\n\n  for i in range(len(input)):\n    for
        j in range(i+1, len(input)):\n      x, y = input[i], input[j]\n      if x+y
        &amp;lt;= 2020:\n        is_in[x+y] = x*y\n\n  for z in input:\n    if is_in[2020-z]:\n      return
        is_in[2020-z] * z\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8zfpr/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8zfpr", "created": 1606821165.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 1, "name":
        "t1_ge8zg63", "id": "ge8zg63", "parent_id": "t1_ge8zfpr", "depth": 1, "children":
        ["ge8zg63"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": 1606903176.0,
        "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geamavo", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ragnario",
        "can_mod_post": false, "created_utc": 1606854162.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_24x9f150", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Rust beginner\n\n[https://github.com/trinnguyen/advent-of-code-2020/blob/master/day01/src/main.rs](https://github.com/trinnguyen/advent-of-code-2020/blob/master/day01/src/main.rs)\n\nEdited:
        remove code, use external repo instead", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Rust beginner&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/trinnguyen/advent-of-code-2020/blob/master/day01/src/main.rs\"&gt;https://github.com/trinnguyen/advent-of-code-2020/blob/master/day01/src/main.rs&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Edited:
        remove code, use external repo instead&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geamavo/", "subreddit_type":
        "public", "locked": false, "name": "t1_geamavo", "created": 1606854162.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "geanxl9", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "daggerdragon", "can_mod_post": false,
        "created_utc": 1606854916.0, "send_replies": true, "parent_id": "t1_geamavo",
        "score": 2, "author_fullname": "t2_60niu", "report_reasons": null, "approved_by":
        null, "all_awardings": [], "collapsed": false, "body": "This code is really
        hard to read on old.reddit.  Could you please edit it using old.reddit''s
        four-spaces formatting instead of new.reddit''s triple backticks?  Note that
        if you''re using the visual editor, you may have to \"Switch to Markdown\"
        to get Reddit to understand the formatting properly.\n\nAlternatively, consider
        using /u/topaz2078''s [`paste`](https://topaz.github.io/paste/) or an external
        repo instead.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": true, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This
        code is really hard to read on old.reddit.  Could you please edit it using
        old.reddit&amp;#39;s four-spaces formatting instead of new.reddit&amp;#39;s
        triple backticks?  Note that if you&amp;#39;re using the visual editor, you
        may have to &amp;quot;Switch to Markdown&amp;quot; to get Reddit to understand
        the formatting properly.&lt;/p&gt;\n\n&lt;p&gt;Alternatively, consider using
        &lt;a href=\"/u/topaz2078\"&gt;/u/topaz2078&lt;/a&gt;&amp;#39;s &lt;a href=\"https://topaz.github.io/paste/\"&gt;&lt;code&gt;paste&lt;/code&gt;&lt;/a&gt;
        or an external repo instead.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geanxl9/",
        "subreddit_type": "public", "locked": false, "name": "t1_geanxl9", "created":
        1606854916.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "more", "data": {"count": 1, "name": "t1_gecsg6f", "id": "gecsg6f",
        "parent_id": "t1_geanxl9", "depth": 2, "children": ["gecsg6f"]}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geaxt4t",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "_cab13_",
        "can_mod_post": false, "created_utc": 1606859569.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_t9ozf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Kotlin solution! Fetching directly from the website; you need to add your
        session cookie.\n\n    import java.net.HttpURLConnection\n    import java.net.URL\n    \n    var
        values = (URL(\"https://adventofcode.com/2020/day/1/input\").openConnection()
        as HttpURLConnection).apply {\n    \trequestMethod = \"GET\"\n    \taddRequestProperty(\"Cookie\",
        \"session=[yourtoken]\");\n    }.inputStream.bufferedReader().readLines().map
        { it.toInt() }\n    \n    for (i in values.indices) {\n    \tfor (j in i +
        1 until values.size) {\n    \t\tif (values[i] + values[j] == 2020)\n    \t\t\tprintln(\"Total
        for two indices: ${values[i] * values[j]}\")\n    \t\t\n    \t\tfor (k in
        j + 1 until values.size) {\n    \t\t\tif (values[i] + values[j] + values[k]
        == 2020) println(\"Total for three indices: ${values[i] * values[j] * values[k]}\")\n    \t\t}\n    \t}\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Kotlin solution! Fetching
        directly from the website; you need to add your session cookie.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        java.net.HttpURLConnection\nimport java.net.URL\n\nvar values = (URL(&amp;quot;https://adventofcode.com/2020/day/1/input&amp;quot;).openConnection()
        as HttpURLConnection).apply {\n    requestMethod = &amp;quot;GET&amp;quot;\n    addRequestProperty(&amp;quot;Cookie&amp;quot;,
        &amp;quot;session=[yourtoken]&amp;quot;);\n}.inputStream.bufferedReader().readLines().map
        { it.toInt() }\n\nfor (i in values.indices) {\n    for (j in i + 1 until values.size)
        {\n        if (values[i] + values[j] == 2020)\n            println(&amp;quot;Total
        for two indices: ${values[i] * values[j]}&amp;quot;)\n\n        for (k in
        j + 1 until values.size) {\n            if (values[i] + values[j] + values[k]
        == 2020) println(&amp;quot;Total for three indices: ${values[i] * values[j]
        * values[k]}&amp;quot;)\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geaxt4t/",
        "subreddit_type": "public", "locked": false, "name": "t1_geaxt4t", "created":
        1606859569.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 13, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geb3fjt",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "Aneurysm9",
        "can_mod_post": false, "created_utc": 1606862309.0, "send_replies": true,
        "parent_id": "t1_geaxt4t", "score": 13, "author_fullname": "t2_4b465", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "DO NOT DO THIS.\n\nYour input will not change and you should download it
        once and keep a local copy.  Requesting the input every time you run your
        solution puts excess load on the servers and may result in action being taken
        to stop that traffic.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;DO
        NOT DO THIS.&lt;/p&gt;\n\n&lt;p&gt;Your input will not change and you should
        download it once and keep a local copy.  Requesting the input every time you
        run your solution puts excess load on the servers and may result in action
        being taken to stop that traffic.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb3fjt/", "subreddit_type":
        "public", "locked": false, "name": "t1_geb3fjt", "created": 1606862309.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": "moderator"}}, {"kind": "more", "data": {"count": 7,
        "name": "t1_gebwfeq", "id": "gebwfeq", "parent_id": "t1_geb3fjt", "depth":
        2, "children": ["gebwfeq"]}}, {"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "removal_reason":
        null, "link_id": "t3_k4e4lm", "author_flair_template_id": null, "likes": null,
        "replies": "", "user_reports": [], "saved": false, "id": "ge8dewk", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        "DELETED", "no_follow": true, "author": "[deleted]", "can_mod_post": false,
        "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1, "approved_by":
        null, "mod_note": null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body":
        "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class": null, "name":
        "t1_ge8dewk", "collapsed": false, "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8dewk/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606800158.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606800158.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8e6mm",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "jonathan_paulson",
        "can_mod_post": false, "created_utc": 1606800745.0, "send_replies": true,
        "parent_id": "t1_ge8dewk", "score": 2, "author_fullname": "t2_k7ou5", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Here''s what I did: `X = [int(line) for line in fileinput.input()]`. You
        want to read the list of lines and parse each one as an integer.", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s what I did: &lt;code&gt;X
        = [int(line) for line in fileinput.input()]&lt;/code&gt;. You want to read
        the list of lines and parse each one as an integer.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8e6mm/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8e6mm", "created":
        1606800745.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8elve",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Mikel3377",
        "can_mod_post": false, "created_utc": 1606801074.0, "send_replies": true,
        "parent_id": "t1_ge8dewk", "score": 2, "author_fullname": "t2_e4993", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "split by newline (''\\n''). Pretty much every challege I write the same first
        line in JavaScript: `input.split(''\\n'').map(n =&gt; +n)`.", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;split by newline (&amp;#39;\\n&amp;#39;).
        Pretty much every challege I write the same first line in JavaScript: &lt;code&gt;input.split(&amp;#39;\\n&amp;#39;).map(n
        =&amp;gt; +n)&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8elve/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8elve", "created":
        1606801074.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8jvk1",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "brskbk",
        "can_mod_post": false, "created_utc": 1606805387.0, "send_replies": true,
        "parent_id": "t1_ge8elve", "score": 2, "author_fullname": "t2_fl28y", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Wow, i''ve been doing `.map(x =&gt; parseInt(x, 10))` for years, the `+n`
        solution is so much easier!", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Wow,
        i&amp;#39;ve been doing &lt;code&gt;.map(x =&amp;gt; parseInt(x, 10))&lt;/code&gt;
        for years, the &lt;code&gt;+n&lt;/code&gt; solution is so much easier!&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8jvk1/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8jvk1", "created":
        1606805387.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_ge9ktp5", "id": "ge9ktp5", "parent_id":
        "t1_ge8jvk1", "depth": 3, "children": ["ge9ktp5"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8jdky",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606804962.0, "send_replies": true,
        "parent_id": "t1_ge8dewk", "score": 1, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "&gt; # Top-level posts in Solution Megathreads are for *code solutions* only.\n\nThis
        is a top-level post, so please edit your post and share your code/repo/solution
        or, if you haven''t finished the puzzle yet, you can always create your own
        thread and make sure to flair it with `Help`.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": true, "body_html": "&lt;div
        class=\"md\"&gt;&lt;blockquote&gt;\n&lt;h1&gt;Top-level posts in Solution
        Megathreads are for &lt;em&gt;code solutions&lt;/em&gt; only.&lt;/h1&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This
        is a top-level post, so please edit your post and share your code/repo/solution
        or, if you haven&amp;#39;t finished the puzzle yet, you can always create
        your own thread and make sure to flair it with &lt;code&gt;Help&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8jdky/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8jdky", "created":
        1606804962.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge8tknr", "id": "ge8tknr", "parent_id":
        "t1_ge8dewk", "depth": 1, "children": ["ge8tknr"]}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8e9e9", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_ge8e9e9", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8e9e9/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606800803.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606800803.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8jnv0",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606805204.0, "send_replies": true,
        "parent_id": "t1_ge8e9e9", "score": 1, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "&gt; # Top-level posts in Solution Megathreads are for *code solutions* only.\n\nThis
        is a top-level post, so please edit your post and share your code/repo/solution
        or, if you haven''t finished the puzzle yet, you can always create your own
        thread and make sure to flair it with `Help`.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": true, "body_html": "&lt;div
        class=\"md\"&gt;&lt;blockquote&gt;\n&lt;h1&gt;Top-level posts in Solution
        Megathreads are for &lt;em&gt;code solutions&lt;/em&gt; only.&lt;/h1&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This
        is a top-level post, so please edit your post and share your code/repo/solution
        or, if you haven&amp;#39;t finished the puzzle yet, you can always create
        your own thread and make sure to flair it with &lt;code&gt;Help&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8jnv0/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8jnv0", "created":
        1606805204.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": 1606814577.0,
        "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8qa9v", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "racksitybitch",
        "can_mod_post": false, "created_utc": 1606811295.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_o26yv", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python solution at \\~1.2ms\n\n    #%% setup some quit variables\n    go1
        = 1; go2 = 1;\n    \n    #%% sort originally here because it would set me
        up to make cuts faster but also makes part 1 faster too??\n    ns.sort()\n    \n    #%%
        part 1\n    if go1 == 1:\n        for nn in ns:\n            if go1 == 1:\n                for
        ff in ns:\n                    if go1 == 1 and nn+ff == 2020:\n                        print(nn*ff)\n                        go1
        = 0\n                        break\n    #%% part 2\n    if go2 == 1:\n        for
        nn in ns:\n            if go2 == 1:\n                for ff in ns:\n                    if
        go2 == 1 and 2020-nn-ff &gt;= min(ns):\n                        for tt in
        ns:\n                            if nn+ff+tt == 2020:\n                                print(nn*ff*tt)\n                                go2
        = 0\n                                break\n\nI use numpy to allocate size
        when I parsed the text file without a package [https://github.com/rlmcclure/advent2020/blob/main/day1/day1.py](https://github.com/rlmcclure/advent2020/blob/main/day1/day1.py).I''d
        love feedback or to see other lower times! itertools was way slower for me.I''d
        also love some insight on why sort makes even part 1 more efficient apparently?",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python solution at ~1.2ms&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#%%
        setup some quit variables\ngo1 = 1; go2 = 1;\n\n#%% sort originally here because
        it would set me up to make cuts faster but also makes part 1 faster too??\nns.sort()\n\n#%%
        part 1\nif go1 == 1:\n    for nn in ns:\n        if go1 == 1:\n            for
        ff in ns:\n                if go1 == 1 and nn+ff == 2020:\n                    print(nn*ff)\n                    go1
        = 0\n                    break\n#%% part 2\nif go2 == 1:\n    for nn in ns:\n        if
        go2 == 1:\n            for ff in ns:\n                if go2 == 1 and 2020-nn-ff
        &amp;gt;= min(ns):\n                    for tt in ns:\n                        if
        nn+ff+tt == 2020:\n                            print(nn*ff*tt)\n                            go2
        = 0\n                            break\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I
        use numpy to allocate size when I parsed the text file without a package &lt;a
        href=\"https://github.com/rlmcclure/advent2020/blob/main/day1/day1.py\"&gt;https://github.com/rlmcclure/advent2020/blob/main/day1/day1.py&lt;/a&gt;.I&amp;#39;d
        love feedback or to see other lower times! itertools was way slower for me.I&amp;#39;d
        also love some insight on why sort makes even part 1 more efficient apparently?&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8qa9v/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8qa9v", "created":
        1606811295.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606867915.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8tn9d", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "MuumiJumala",
        "can_mod_post": false, "created_utc": 1606814830.0, "send_replies": true,
        "parent_id": "t1_ge8qa9v", "score": 3, "author_fullname": "t2_9hygu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "With your code (which is naively just checking all possible combinations,
        which would get extremely slow with large inputs) the solution just happens
        to be found faster after sorting. A more sophisticated approach would actually
        *require* sorting in order to be efficient. Here''s my code (ported to Python,
        as I originally did it in Crystal) which takes about 0.2 milliseconds with
        my input on my machine (yours takes about 5 milliseconds). I didn''t include
        reading the input in the timing as it is the exact same on both.\n\n    numbers.sort()\n    TARGET
        = 2020\n\n    # Part 1\n    left = 0\n    right = len(numbers) - 1\n    while
        numbers[left] + numbers[right] != TARGET:\n        while numbers[left] + numbers[right]
        &gt; TARGET:\n            right -= 1\n        while numbers[left] + numbers[right]
        &lt; TARGET:\n            left += 1\n    print(numbers[left] * numbers[right])\n\n    #
        Part 2\n    left = 0\n    middle = 1\n    right = len(numbers) - 1\n    maxright
        = right\n\n    while left + 1 &lt; right:\n        remaining = TARGET - numbers[left]\n        middle
        = left + 1\n        while middle &lt; right:\n            while numbers[middle]
        + numbers[right] &lt; remaining:\n                middle += 1\n            while
        numbers[middle] + numbers[right] &gt; remaining:\n                right -=
        1\n            if numbers[left] + numbers[middle] + numbers[right] == TARGET:\n                print(numbers[left]
        * numbers[middle] * numbers[right])\n                exit(0)\n        left
        += 1\n        right = maxright\n\n(edit: Turns out there was a bug in my second
        part that affected some inputs, it''s fixed now)", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;With your code (which is naively just checking all
        possible combinations, which would get extremely slow with large inputs) the
        solution just happens to be found faster after sorting. A more sophisticated
        approach would actually &lt;em&gt;require&lt;/em&gt; sorting in order to be
        efficient. Here&amp;#39;s my code (ported to Python, as I originally did it
        in Crystal) which takes about 0.2 milliseconds with my input on my machine
        (yours takes about 5 milliseconds). I didn&amp;#39;t include reading the input
        in the timing as it is the exact same on both.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;numbers.sort()\nTARGET
        = 2020\n\n# Part 1\nleft = 0\nright = len(numbers) - 1\nwhile numbers[left]
        + numbers[right] != TARGET:\n    while numbers[left] + numbers[right] &amp;gt;
        TARGET:\n        right -= 1\n    while numbers[left] + numbers[right] &amp;lt;
        TARGET:\n        left += 1\nprint(numbers[left] * numbers[right])\n\n# Part
        2\nleft = 0\nmiddle = 1\nright = len(numbers) - 1\nmaxright = right\n\nwhile
        left + 1 &amp;lt; right:\n    remaining = TARGET - numbers[left]\n    middle
        = left + 1\n    while middle &amp;lt; right:\n        while numbers[middle]
        + numbers[right] &amp;lt; remaining:\n            middle += 1\n        while
        numbers[middle] + numbers[right] &amp;gt; remaining:\n            right -=
        1\n        if numbers[left] + numbers[middle] + numbers[right] == TARGET:\n            print(numbers[left]
        * numbers[middle] * numbers[right])\n            exit(0)\n    left += 1\n    right
        = maxright\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(edit: Turns out there was
        a bug in my second part that affected some inputs, it&amp;#39;s fixed now)&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8tn9d/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8tn9d", "created":
        1606814830.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8z3fc",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ItsNiklass",
        "can_mod_post": false, "created_utc": 1606820802.0, "send_replies": true,
        "parent_id": "t1_ge8tn9d", "score": 2, "author_fullname": "t2_qf8ol", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Part 2 is generating the wrong answer as far as i can see, but Part 1 is
        really the fastest Python solution in this thread", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Part 2 is generating the wrong answer as far as i
        can see, but Part 1 is really the fastest Python solution in this thread&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8z3fc/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8z3fc", "created":
        1606820802.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge929fq", "id": "ge929fq", "parent_id":
        "t1_ge8z3fc", "depth": 3, "children": ["ge929fq"]}}, {"kind": "more", "data":
        {"count": 1, "name": "t1_ge9lvph", "id": "ge9lvph", "parent_id": "t1_ge8tn9d",
        "depth": 2, "children": ["ge9lvph"]}}, {"kind": "more", "data": {"count":
        6, "name": "t1_ge8swvh", "id": "ge8swvh", "parent_id": "t1_ge8qa9v", "depth":
        1, "children": ["ge8swvh"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "ge93jm1", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Way2Smart2", "can_mod_post": false, "created_utc":
        1606825222.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_20xr3m", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "**C#**\n\n    class Program\n    {\n        static
        void Main(string[] args)\n        {\n            // Set up list to store our
        integers.\n            List&lt;int&gt; report = new List&lt;int&gt;();\n\n            //
        Set up a StreamReader to move the input into a list.\n            StreamReader
        inputReader = new StreamReader(@\"input.txt\");\n            string inputBuffer;\n\n            //
        Move input into list (converting to integer on the way).\n            while
        ((inputBuffer = inputReader.ReadLine()) != null)\n            {\n                report.Add(int.Parse(inputBuffer));\n            }\n\n            //
        Get the goal.\n            Console.WriteLine(\"Goal?\");\n            int
        goal = int.Parse(Console.ReadLine());\n\n            // Loop across the list
        for 3 values in order to find a match\n            for (int first = 0; first
        &lt; report.Count - 2; first++)\n            {\n                for (int second
        = 0; second &lt; report.Count - 1; second++)\n                {\n                    if
        (report.Contains(goal - report[second] - report[first]))\n                    {\n                        //
        Output\n                        Console.WriteLine(report[first] + \", \" +
        report[second] + \", \" + (goal - report[second] - report[first]));\n                        Console.WriteLine(report[first]
        * report[second] * (goal - report[second] - report[first]));\n                        return;\n                    }\n                }\n            }\n        }\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;C#&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class
        Program\n{\n    static void Main(string[] args)\n    {\n        // Set up
        list to store our integers.\n        List&amp;lt;int&amp;gt; report = new
        List&amp;lt;int&amp;gt;();\n\n        // Set up a StreamReader to move the
        input into a list.\n        StreamReader inputReader = new StreamReader(@&amp;quot;input.txt&amp;quot;);\n        string
        inputBuffer;\n\n        // Move input into list (converting to integer on
        the way).\n        while ((inputBuffer = inputReader.ReadLine()) != null)\n        {\n            report.Add(int.Parse(inputBuffer));\n        }\n\n        //
        Get the goal.\n        Console.WriteLine(&amp;quot;Goal?&amp;quot;);\n        int
        goal = int.Parse(Console.ReadLine());\n\n        // Loop across the list for
        3 values in order to find a match\n        for (int first = 0; first &amp;lt;
        report.Count - 2; first++)\n        {\n            for (int second = 0; second
        &amp;lt; report.Count - 1; second++)\n            {\n                if (report.Contains(goal
        - report[second] - report[first]))\n                {\n                    //
        Output\n                    Console.WriteLine(report[first] + &amp;quot;,
        &amp;quot; + report[second] + &amp;quot;, &amp;quot; + (goal - report[second]
        - report[first]));\n                    Console.WriteLine(report[first] *
        report[second] * (goal - report[second] - report[first]));\n                    return;\n                }\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge93jm1/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge93jm1", "created":
        1606825222.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_ge95gtj", "id": "ge95gtj", "parent_id":
        "t1_ge93jm1", "depth": 1, "children": ["ge95gtj"]}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606834952.0, "mod_reason_by": null,
        "banned_by": null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge95uhg", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Python, a simple solution to a simple problem:\n\n    def
        load_data(f_name):\n        with open(f_name, \"r\") as f:\n            data_read
        = f.read()\n        return data_read\n    \n    def make_set_and_list(data):\n        rows
        = data.split(\"\\n\")\n        numbers = list(map(int, rows))\n        return
        set(numbers), numbers\n    \n    def find_two_parts_of_2020(number_set, number_list):\n        for
        n in number_list:\n            if 2020-n in number_set:\n                return
        n, 2020-n\n        return None\n    \n    def find_three_parts_of_2020(number_set,
        number_list):\n        for m, n in combinations(number_list, 2):\n            if
        2020 - m - n in number_set:\n                return m, n, 2020 - m - n\n        return
        None\n    \n    def run():\n        data = load_data(\"Day01.txt\")\n        number_set,
        number_list = make_set_and_list(data)\n        a, b = find_two_parts_of_2020(number_set,
        number_list)\n        print(f\"The two numbers that add up to 2020 are {a}
        and {b} and their product is {a * b}\")\n        i, j, k = find_three_parts_of_2020(number_set,
        number_list)\n        print(f\"The three numbers that add up to 2020 are {i},
        {j} and {k} and their product is {i * j * k}\")", "awarders": [], "downs":
        0, "author_flair_css_class": null, "name": "t1_ge95uhg", "collapsed": false,
        "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python,
        a simple solution to a simple problem:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        load_data(f_name):\n    with open(f_name, &amp;quot;r&amp;quot;) as f:\n        data_read
        = f.read()\n    return data_read\n\ndef make_set_and_list(data):\n    rows
        = data.split(&amp;quot;\\n&amp;quot;)\n    numbers = list(map(int, rows))\n    return
        set(numbers), numbers\n\ndef find_two_parts_of_2020(number_set, number_list):\n    for
        n in number_list:\n        if 2020-n in number_set:\n            return n,
        2020-n\n    return None\n\ndef find_three_parts_of_2020(number_set, number_list):\n    for
        m, n in combinations(number_list, 2):\n        if 2020 - m - n in number_set:\n            return
        m, n, 2020 - m - n\n    return None\n\ndef run():\n    data = load_data(&amp;quot;Day01.txt&amp;quot;)\n    number_set,
        number_list = make_set_and_list(data)\n    a, b = find_two_parts_of_2020(number_set,
        number_list)\n    print(f&amp;quot;The two numbers that add up to 2020 are
        {a} and {b} and their product is {a * b}&amp;quot;)\n    i, j, k = find_three_parts_of_2020(number_set,
        number_list)\n    print(f&amp;quot;The three numbers that add up to 2020 are
        {i}, {j} and {k} and their product is {i * j * k}&amp;quot;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge95uhg/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606827174.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606827174.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge973v5",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ddddavidee",
        "can_mod_post": false, "created_utc": 1606828151.0, "send_replies": true,
        "parent_id": "t1_ge95uhg", "score": 3, "author_fullname": "t2_f1mmu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Nice, but using product you''re testing also for the same number selected
        twice that can be avoided", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nice,
        but using product you&amp;#39;re testing also for the same number selected
        twice that can be avoided&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge973v5/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge973v5", "created":
        1606828151.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_ge9bk4d", "id": "ge9bk4d", "parent_id":
        "t1_ge973v5", "depth": 2, "children": ["ge9bk4d"]}}, {"kind": "more", "data":
        {"count": 470, "name": "t1_ge9euu1", "id": "ge9euu1", "parent_id": "t3_k4e4lm",
        "depth": 0, "children": ["ge9euu1", "geaqgwd", "ge9hyrm", "gebclbc", "geb34hs",
        "geb2kzp", "ge9w3sf", "gea97s3", "ge9vh7d", "ge8ff2d", "ge8dil8", "geamp0x",
        "ge8cv0w", "geb9b3s", "gea9tbw", "ge8d3oo", "ge8dckb", "ge8cl31", "ge8h6cs",
        "ge8gd8r", "ge8edqs", "ge8eiq2", "ge8d3xk", "ge8d88g", "ge8dnbn", "ge8d6qk",
        "ge8d75b", "ge8egd7", "ge8d8ht", "geaco7m", "ge8dc2t", "ge8fij5", "ge8cl3c",
        "ge8cm9v", "ge8dgjc", "ge8djkf", "ge8hasg", "ge8d981", "ge8yk7u", "ge8hblp",
        "ge8qs04", "ge8iotj", "ge8eqo4", "ge8r3ie", "ge8hf6j", "ge8rgu3", "ge8jf9z",
        "ge8dw1k", "ge8eek9", "ge8dglu", "ge8uxge", "ge8e72m", "ge8dqnf", "ge8gn6r",
        "ge8et2j", "ge8dq4x", "ge8hczq", "ge8vrzv", "ge8hjs0", "ge9066a", "ge8d575",
        "ge8eiis", "ge8gvxc", "ge8f6p3", "ge8hgha", "ge8w7ap", "ge8dhow", "ge8d4fv",
        "ge8e2mm", "ge8xemy", "ge8em6p", "ge8e5vy", "ge8oces", "ge8feyg", "ge9225u",
        "ge8x2ax", "ge8e5m5", "ge8yvut", "ge94kss", "gea17ge", "ge8yog2", "ge8iw3m",
        "ge99hmm", "ge92lj3", "ge8vnir", "ge92kna", "ge8t5hs", "ge95a1e", "ge90ffa",
        "ge8z4ff", "ge8zyte", "ge90snh", "geabg9r", "ge9963b", "ge998wb", "ge8jsx5",
        "ge8ucg7", "ge8q1ox", "ge8zxsv", "ge8gx4l", "ge8umgx", "ge8drnn", "ge9wiwj",
        "ge9px27", "ge8xx75", "ge8hj6a", "ge8v5uh", "ge8yqmy", "ge95r6o", "ge99c2y",
        "geae2je", "ge8qd7s", "ge9hbp6", "ge8hhxr", "ge8isow", "ge959yk", "ge8zlpr",
        "ge9kuii", "ge8kak3", "ge8j4w1", "ge9vs5f", "ge9autn", "ge8s8wl", "ge8gwg3",
        "ge9n0k8", "ge8vu5a", "ge8l8lb", "ge96iwo", "ge9e7k1", "ge8jglc", "ge93z8h",
        "ge96tiq", "ge8ypio", "ge9l4ak", "ge9m65s", "ge93wxk", "ge8iorh", "ge8fo5f",
        "ge97rgx", "geby48b", "ge8wy22", "ge95f68", "ge94liw", "ge8vf78", "ge8ft9b",
        "ge8g4iv", "ge9nnl1", "ge9idwm", "gea37gf", "ge8ndxc", "ge8grtd", "ge9quzr",
        "ge9pptc", "gea846b", "gead2hx", "gea6p3j", "ge9hgu2", "geby132", "ge9qj85",
        "ge9p8jh", "gea55cz", "ge9bnyc", "ge9f357", "ge9oow8", "gea7lc6", "ged616q",
        "ge93bhe", "gea91jq", "geab8yv", "ge989na", "gebka8s", "ge9l7o8", "ge8zg5h",
        "ge948qx", "ge91y87", "ge9fs08", "ge9p7h9", "ged4hhm", "geac8gr", "ge9wtc6",
        "ge9cwwc", "gead5e6", "gecd75d", "ge9lf9j", "gec5h0g", "ge98ysx", "geator7",
        "ge9c3l6", "ge8xlj2", "ge8u58v", "ge8v2we", "ge8ugt2", "ge9ysx3", "geady27",
        "geaja8q", "gea60ob", "ge9qgy9", "ge8rlp9", "gea8ouf", "gebcdzv", "gebx4pn",
        "gea5sgr", "ge9lb2t", "geayy5d", "geb434g", "geaxx0l", "gebidqz", "geadna4",
        "ge93efl", "ge9v0oa", "gea3dle", "ge99296", "ge90035", "ge9k6sa", "gebuoyc",
        "ge9aay1", "ge90t2q", "ge93z7e", "gebuvuw", "ge9gln9", "ge94tnj", "ge9p67o",
        "ge8ub8c", "gecjat6", "geajhnt", "geayab9", "ge9809q", "ge933cq", "ge8xree",
        "geaqabf", "gea04hh", "ge8xday", "gea6m9x", "ge9u529", "ge90pv4", "ge99kma",
        "ged4e5g", "geacp52", "ge985ep", "ge9c2p4", "gea0reu", "geb73sk", "ge98qck",
        "ge9fh10", "ge98q2x", "ge9lrxu", "geaeq43", "gea1c82", "gec0e6f", "gea5os4",
        "ge9kgch", "ge9cla0"]}}], true]], [0, 12, "attr", "things"], [12, 13, "call",
        ["t1_geaqgdt"]], [13, 14, "attr", "focus"], [14, 15, "call", []], [0, 16,
        "attr", "things"], [16, 17, "call", ["None"]], [17, 18, "attr", "filter"],
        [18, 19, "call", [".morechildren"]], [19, 20, "attr", "remove"], [20, 21,
        "call", []]], "success": true}'
  recorded_at: Sat, 08 Mar 2025 23:06:36 GMT
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:37 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=wSvyB4uE9WpChrsuiM; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sat, 08 Mar 2025 23:06:37 GMT
- request:
    method: post
    uri: https://oauth.reddit.com/api/morechildren.json
    body:
      encoding: UTF-8
      string: link_id=t3_k4e4lm&children=ge9euu1,geaqgwd,ge9hyrm,gebclbc,geb34hs,geb2kzp,ge9w3sf,gea97s3,ge9vh7d,ge8ff2d,ge8dil8,geamp0x,ge8cv0w,geb9b3s,gea9tbw,ge8d3oo,ge8dckb,ge8cl31,ge8h6cs,ge8gd8r,ge8edqs,ge8eiq2,ge8d3xk,ge8d88g,ge8dnbn,ge8d6qk,ge8d75b,ge8egd7,ge8d8ht,geaco7m,ge8dc2t,ge8fij5,ge8cl3c,ge8cm9v,ge8dgjc,ge8djkf,ge8hasg,ge8d981,ge8yk7u,ge8hblp,ge8qs04,ge8iotj,ge8eqo4,ge8r3ie,ge8hf6j,ge8rgu3,ge8jf9z,ge8dw1k,ge8eek9,ge8dglu,ge8uxge,ge8e72m,ge8dqnf,ge8gn6r,ge8et2j,ge8dq4x,ge8hczq,ge8vrzv,ge8hjs0,ge9066a,ge8d575,ge8eiis,ge8gvxc,ge8f6p3,ge8hgha,ge8w7ap,ge8dhow,ge8d4fv,ge8e2mm,ge8xemy,ge8em6p,ge8e5vy,ge8oces,ge8feyg,ge9225u,ge8x2ax,ge8e5m5,ge8yvut,ge94kss,gea17ge,ge8yog2,ge8iw3m,ge99hmm,ge92lj3,ge8vnir,ge92kna,ge8t5hs,ge95a1e,ge90ffa,ge8z4ff,ge8zyte,ge90snh,geabg9r,ge9963b,ge998wb,ge8jsx5,ge8ucg7,ge8q1ox,ge8zxsv,ge8gx4l,ge8umgx,ge8drnn,ge9wiwj,ge9px27,ge8xx75,ge8hj6a,ge8v5uh,ge8yqmy,ge95r6o,ge99c2y,geae2je,ge8qd7s,ge9hbp6,ge8hhxr,ge8isow,ge959yk,ge8zlpr,ge9kuii,ge8kak3,ge8j4w1,ge9vs5f,ge9autn,ge8s8wl,ge8gwg3,ge9n0k8,ge8vu5a,ge8l8lb,ge96iwo,ge9e7k1,ge8jglc,ge93z8h,ge96tiq,ge8ypio,ge9l4ak,ge9m65s,ge93wxk,ge8iorh,ge8fo5f,ge97rgx,geby48b,ge8wy22,ge95f68,ge94liw,ge8vf78,ge8ft9b,ge8g4iv,ge9nnl1,ge9idwm,gea37gf,ge8ndxc,ge8grtd,ge9quzr,ge9pptc,gea846b,gead2hx,gea6p3j,ge9hgu2,geby132,ge9qj85,ge9p8jh,gea55cz,ge9bnyc,ge9f357,ge9oow8,gea7lc6,ged616q,ge93bhe,gea91jq,geab8yv,ge989na,gebka8s,ge9l7o8,ge8zg5h,ge948qx,ge91y87,ge9fs08,ge9p7h9,ged4hhm,geac8gr,ge9wtc6,ge9cwwc,gead5e6,gecd75d,ge9lf9j,gec5h0g,ge98ysx,geator7,ge9c3l6,ge8xlj2,ge8u58v,ge8v2we,ge8ugt2,ge9ysx3,geady27,geaja8q,gea60ob,ge9qgy9,ge8rlp9,gea8ouf,gebcdzv,gebx4pn,gea5sgr,ge9lb2t,geayy5d,geb434g,geaxx0l,gebidqz,geadna4,ge93efl,ge9v0oa,gea3dle,ge99296,ge90035,ge9k6sa,gebuoyc,ge9aay1,ge90t2q,ge93z7e,gebuvuw,ge9gln9,ge94tnj,ge9p67o,ge8ub8c,gecjat6,geajhnt,geayab9,ge9809q,ge933cq,ge8xree,geaqabf,gea04hh,ge8xday,gea6m9x,ge9u529,ge90pv4,ge99kma,ged4e5g,geacp52,ge985ep,ge9c2p4,gea0reu,geb73sk,ge98qck,ge9fh10,ge98q2x,ge9lrxu,geaeq43,gea1c82,gec0e6f,gea5os4,ge9kgch,ge9cla0
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '31555'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      set-cookie:
      - loid=000000001ksigce8zp.2.1741475197231.Z0FBQUFBQm56TTE5dm5OU09zT0VVOG5YWDk2LTJMcVVsenZBZ19lUmQtRUVhMFdMS3BHQ0FwMGF5aENFT290bGpUdDRDcFJaSGFVMjZlNVB2YXRaTHRUYzd5X19hN01RV1R3U0FCaEVXcXJWXzkwVWxmOXV4SFFjUGVBaTcwM1VZVnoyNVpINFlodW4;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Mon, 08-Mar-2027 23:06:37
        GMT; secure, session_tracker=pmekqcbnabdnifhpjn.0.1741475197247.Z0FBQUFBQm56TTE5dFhMSXNJY0xvY2o1bkF0LUJTNW5jby1jU0Y4MmlEbFNvUzU4WmJhQ0Z6UDE4SDF3dURXUDdYdVdyN0FlVFl3aTVORDlqcDF2OXpkeVFsYkVxTFMyYjAxSm1YWV9iMktnZ0w0b3pKcGNMaUZTSE9od1lkRmVJcUhlLTluakU1eXc;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 01:06:37
        GMT; secure, edgebucket=dK5NXaNSVbj3Gofagq; Domain=reddit.com; Max-Age=63071999;
        Path=/;  secure
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '20'
      x-ratelimit-remaining:
      - '80.0'
      x-ratelimit-reset:
      - '202'
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:37 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"jquery": [[0, 1, "call", ["body"]], [1, 2, "attr", "find"], [2, 3,
        "call", [".status"]], [3, 4, "attr", "hide"], [4, 5, "call", []], [5, 6, "attr",
        "html"], [6, 7, "call", [""]], [7, 8, "attr", "end"], [8, 9, "call", []],
        [0, 10, "attr", "insert_things"], [10, 11, "call", [[{"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9hyrm",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Seanie987",
        "can_mod_post": false, "created_utc": 1606834896.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_4gbpker", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Probably not the fastest solution but here it is in Python 3\n\n&amp;#x200B;\n\n       \n    nums
        = [1078,1109,1702,1293,1541,1422,1679,1891,1898,1455,1540,1205,1971,1582,1139,1438,1457,1725,1907,1872,1101,1403,1557,1597,1619,1974,1287,292,1647,1444,1241,879,1761,1067,1178,1510,1110,1233,1121,1299,1796,1124,1768,1466,1871,1279,1344,1485,1258,1179,1147,492,1234,1843,1421,1819,1964,1671,1793,1302,1731,1886,1686,1150,1806,1960,1841,1936,1845,1520,1779,1102,1323,1892,1742,1941,1395,1525,1165,715,1829,1448,1906,1191,1981,1115,1716,1644,1310,1836,1105,1517,1790,1950,1741,1256,1467,1677,1372,1838,1637,1143,1763,1222,1291,1835,1602,1927,1933,1952,1692,1662,1967,1791,1984,1176,1324,1460,1416,562,1862,1273,1518,1535,1093,1977,1923,1246,1570,1674,1861,1811,1431,47,1158,1912,1322,1062,1407,1528,1068,1868,1997,1930,959,1676,1759,2000,1993,1722,1738,1264,1361,1542,1187,1735,1405,1745,1753,1833,1493,1311,1547,1180,1553,1513,1812,1951,1948,1834,1925,1726,1326,1931,1962,1947,1173,1633,1901,1781,1483,1789,1417,1929,1859,1760,1347,1996,1328,1798,1230,1298,1877,1840,1607,1253,1057,1650,117,1593]\n    \n    for
        i in nums:\n        for j in nums:\n            if i + j == 2020:\n                print(str(i)
        + \" + \" + str(j) + \" = \" + str(i*j))", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Probably not the fastest solution but here it is
        in Python 3&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;nums
        = [1078,1109,1702,1293,1541,1422,1679,1891,1898,1455,1540,1205,1971,1582,1139,1438,1457,1725,1907,1872,1101,1403,1557,1597,1619,1974,1287,292,1647,1444,1241,879,1761,1067,1178,1510,1110,1233,1121,1299,1796,1124,1768,1466,1871,1279,1344,1485,1258,1179,1147,492,1234,1843,1421,1819,1964,1671,1793,1302,1731,1886,1686,1150,1806,1960,1841,1936,1845,1520,1779,1102,1323,1892,1742,1941,1395,1525,1165,715,1829,1448,1906,1191,1981,1115,1716,1644,1310,1836,1105,1517,1790,1950,1741,1256,1467,1677,1372,1838,1637,1143,1763,1222,1291,1835,1602,1927,1933,1952,1692,1662,1967,1791,1984,1176,1324,1460,1416,562,1862,1273,1518,1535,1093,1977,1923,1246,1570,1674,1861,1811,1431,47,1158,1912,1322,1062,1407,1528,1068,1868,1997,1930,959,1676,1759,2000,1993,1722,1738,1264,1361,1542,1187,1735,1405,1745,1753,1833,1493,1311,1547,1180,1553,1513,1812,1951,1948,1834,1925,1726,1326,1931,1962,1947,1173,1633,1901,1781,1483,1789,1417,1929,1859,1760,1347,1996,1328,1798,1230,1298,1877,1840,1607,1253,1057,1650,117,1593]\n\nfor
        i in nums:\n    for j in nums:\n        if i + j == 2020:\n            print(str(i)
        + &amp;quot; + &amp;quot; + str(j) + &amp;quot; = &amp;quot; + str(i*j))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9hyrm/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9hyrm", "created":
        1606834896.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606852829.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9w3sf", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "simondrawer",
        "can_mod_post": false, "created_utc": 1606841865.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_q42tws", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python itertools combinations.\n\nComment police say my top level comment
        has to have my code in it:\n\n\n    import itertools\n\n    expenses = []\n\n    with
        open (\u201cinput.txt\u201d, \u201cr\u201d) as inputfile:\n\t    data=inputfile.readlines()\n\t    for
        line in data:\n            expenses.append(int(line.strip()))\n\t\n    for
        pair in itertools.combinations(expenses,3):\n\t    if pair[0]+pair[1]+pair[2]==2020:\n    \n\t\t    print(pair[0]
        * pair[1] * pair[2])", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python
        itertools combinations.&lt;/p&gt;\n\n&lt;p&gt;Comment police say my top level
        comment has to have my code in it:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        itertools\n\nexpenses = []\n\nwith open (\u201cinput.txt\u201d, \u201cr\u201d)
        as inputfile:\n    data=inputfile.readlines()\n    for line in data:\n        expenses.append(int(line.strip()))\n\nfor
        pair in itertools.combinations(expenses,3):\n    if pair[0]+pair[1]+pair[2]==2020:\n\n        print(pair[0]
        * pair[1] * pair[2])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9w3sf/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge9w3sf", "created": 1606841865.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "removal_reason":
        null, "link_id": "t3_k4e4lm", "author_flair_template_id": null, "likes": null,
        "replies": "", "user_reports": [], "saved": false, "id": "ge9yhqs", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        "DELETED", "no_follow": true, "author": "[deleted]", "can_mod_post": false,
        "send_replies": true, "parent_id": "t1_ge9w3sf", "score": 2, "approved_by":
        null, "mod_note": null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body":
        "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class": null, "name":
        "t1_ge9yhqs", "collapsed": true, "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9yhqs/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606843023.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606843023.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind":
        "more", "data": {"count": 10, "name": "t1_gea67kx", "id": "gea67kx", "parent_id":
        "t1_ge9yhqs", "depth": 2, "children": ["gea67kx", "ge9zlfc"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geaeuiq",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606850717.0, "send_replies": true,
        "parent_id": "t1_ge9w3sf", "score": 1, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "&gt; # Top-level posts in Solution Megathreads are for *code solutions* only.\n\nThis
        is a top-level post, so please edit your post and share your code/repo/solution.",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        true, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;h1&gt;Top-level
        posts in Solution Megathreads are for &lt;em&gt;code solutions&lt;/em&gt;
        only.&lt;/h1&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This is a top-level post,
        so please edit your post and share your code/repo/solution.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geaeuiq/",
        "subreddit_type": "public", "locked": false, "name": "t1_geaeuiq", "created":
        1606850717.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geaqgwd", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "thedjotaku",
        "can_mod_post": false, "created_utc": 1606856096.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_d7b8t", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I''m a Pythonista and have been spending most of 2020 working on getting
        more Pythonic with my code. So this year (my first year) I''m doing Python
        for all my solutions. It''s been neat to see your other solutions. I thought
        I was being elegant (certainly more elegant than I would have been in 2020),
        but definitely could improve things.\n\nHere''s my solution: [https://github.com/djotaku/adventofcode/tree/main/2020/Day\\_1\\_1](https://github.com/djotaku/adventofcode/tree/main/2020/Day_1_1)
        and [https://github.com/djotaku/adventofcode/tree/main/2020/Day\\_1\\_2](https://github.com/djotaku/adventofcode/tree/main/2020/Day_1_2)\n\nI
        think going forward I may just do each day in the same folder.", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m a Pythonista and have been spending
        most of 2020 working on getting more Pythonic with my code. So this year (my
        first year) I&amp;#39;m doing Python for all my solutions. It&amp;#39;s been
        neat to see your other solutions. I thought I was being elegant (certainly
        more elegant than I would have been in 2020), but definitely could improve
        things.&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s my solution: &lt;a href=\"https://github.com/djotaku/adventofcode/tree/main/2020/Day_1_1\"&gt;https://github.com/djotaku/adventofcode/tree/main/2020/Day_1_1&lt;/a&gt;
        and &lt;a href=\"https://github.com/djotaku/adventofcode/tree/main/2020/Day_1_2\"&gt;https://github.com/djotaku/adventofcode/tree/main/2020/Day_1_2&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I
        think going forward I may just do each day in the same folder.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geaqgwd/",
        "subreddit_type": "public", "locked": false, "name": "t1_geaqgwd", "created":
        1606856096.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1713955021.0, "mod_reason_by": null,
        "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geb6nb4", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ephemient",
        "can_mod_post": false, "created_utc": 1606863933.0, "send_replies": true,
        "parent_id": "t1_geaqgwd", "score": 3, "author_fullname": "t2_3y2dr", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "This space intentionally left blank.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;This space intentionally left blank.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb6nb4/",
        "subreddit_type": "public", "locked": false, "name": "t1_geb6nb4", "created":
        1606863933.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_geykew3", "id": "geykew3", "parent_id":
        "t1_geb6nb4", "depth": 2, "children": ["geykew3", "gebsgmz"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geb2kzp",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "thiagopromano",
        "can_mod_post": false, "created_utc": 1606861882.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_45jy9vy", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# Elixir\n\n    defmodule Day1 do\n      def get_report do\n        read_file()\n        |&gt;
        to_tuple()\n        |&gt; Enum.filter(fn {_, _, _, sum, _} -&gt; sum == 2020
        end)\n      end\n    \n      def read_file() do\n        File.stream!(\"day1a.in\")\n        |&gt;
        Stream.map(&amp;String.replace(&amp;1, \"\\n\", \"\"))\n        |&gt; Enum.map(&amp;String.to_integer/1)\n      end\n    \n      def
        to_tuple(list) do\n        for a &lt;- list, b &lt;- list , c &lt;- list do\n          {a,
        b, c, a+b+c, a*b*c}\n        end\n      end\n    end", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;h1&gt;Elixir&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;defmodule
        Day1 do\n  def get_report do\n    read_file()\n    |&amp;gt; to_tuple()\n    |&amp;gt;
        Enum.filter(fn {_, _, _, sum, _} -&amp;gt; sum == 2020 end)\n  end\n\n  def
        read_file() do\n    File.stream!(&amp;quot;day1a.in&amp;quot;)\n    |&amp;gt;
        Stream.map(&amp;amp;String.replace(&amp;amp;1, &amp;quot;\\n&amp;quot;, &amp;quot;&amp;quot;))\n    |&amp;gt;
        Enum.map(&amp;amp;String.to_integer/1)\n  end\n\n  def to_tuple(list) do\n    for
        a &amp;lt;- list, b &amp;lt;- list , c &amp;lt;- list do\n      {a, b, c,
        a+b+c, a*b*c}\n    end\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb2kzp/",
        "subreddit_type": "public", "locked": false, "name": "t1_geb2kzp", "created":
        1606861882.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_gebbfi1", "id": "gebbfi1", "parent_id":
        "t1_geb2kzp", "depth": 1, "children": ["gebbfi1"]}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606863414.0, "mod_reason_by": null,
        "banned_by": null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geb34hs", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        2, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_geb34hs", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb34hs/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606862153.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606862153.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_geb6s56", "id": "geb6s56", "parent_id":
        "t1_geb34hs", "depth": 1, "children": ["geb6s56"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geb9b3s",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Chaphasilor",
        "can_mod_post": false, "created_utc": 1606865330.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_obfkf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "## AssemblyScript :D\n\n[GitHub link](https://github.com/Chaphasilor/AdventOfCode-2020/tree/main/assembly/Day%201)\n\nIt''s
        the simplest brute-force solution, but I started with AssemblyScript today
        and worried more about getting the code to run than optimizing it xD", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;h2&gt;AssemblyScript :D&lt;/h2&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/Chaphasilor/AdventOfCode-2020/tree/main/assembly/Day%201\"&gt;GitHub
        link&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s the simplest brute-force
        solution, but I started with AssemblyScript today and worried more about getting
        the code to run than optimizing it xD&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb9b3s/", "subreddit_type":
        "public", "locked": false, "name": "t1_geb9b3s", "created": 1606865330.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gebclbc", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "combustible", "can_mod_post": false, "created_utc":
        1606867111.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_5ofya", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "I''ll be honest... not sure
        my heart''s in it this year\n\n    -&gt; % time ruby -e ''i=File.read(\"input1.txt\").split(\"\\n\").map{|x|
        x.to_i};x=[0,0,0];while x.sum!=2020;x=i.sample(3);end;puts x[0]*x[1]*x[2]''\n    212900130\n    ruby
        -e   0.19s user 0.03s system 99% cpu 0.216 total", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;I&amp;#39;ll be honest... not sure my heart&amp;#39;s
        in it this year&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;-&amp;gt; % time ruby
        -e &amp;#39;i=File.read(&amp;quot;input1.txt&amp;quot;).split(&amp;quot;\\n&amp;quot;).map{|x|
        x.to_i};x=[0,0,0];while x.sum!=2020;x=i.sample(3);end;puts x[0]*x[1]*x[2]&amp;#39;\n212900130\nruby
        -e   0.19s user 0.03s system 99% cpu 0.216 total\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebclbc/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebclbc", "created":
        1606867111.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gea9tbw", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        -1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_gea9tbw", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea9tbw/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606848385.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606848385.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": -1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geadotf",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606850184.0, "send_replies": true,
        "parent_id": "t1_gea9tbw", "score": 1, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "&gt; # Top-level posts in Solution Megathreads are for *code solutions* only.\n\nThis
        is a top-level post, so please edit your post and share your code/repo/solution
        or, if you haven''t finished the puzzle yet, you can always create your own
        thread and make sure to flair it with `Help`.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": true, "body_html": "&lt;div
        class=\"md\"&gt;&lt;blockquote&gt;\n&lt;h1&gt;Top-level posts in Solution
        Megathreads are for &lt;em&gt;code solutions&lt;/em&gt; only.&lt;/h1&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This
        is a top-level post, so please edit your post and share your code/repo/solution
        or, if you haven&amp;#39;t finished the puzzle yet, you can always create
        your own thread and make sure to flair it with &lt;code&gt;Help&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geadotf/",
        "subreddit_type": "public", "locked": false, "name": "t1_geadotf", "created":
        1606850184.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 0, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9vh7d", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "LuckyLactose",
        "can_mod_post": false, "created_utc": 1606841570.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 0, "author_fullname": "t2_3wf82ne1", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**SWIFT**\n\nSlightly over-engineered (sorted list, early-out if current
        check is too large, Result class if part 2 was doing something else than just
        finding the product of the values, etc.).\n\n[https://github.com/LactoseGK/adventofcode2020/blob/main/AdventOfCode2020/AdventOfCode2020/Days/Day01VC.swift](https://github.com/LactoseGK/adventofcode2020/blob/main/AdventOfCode2020/AdventOfCode2020/Days/Day01VC.swift)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;SWIFT&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Slightly
        over-engineered (sorted list, early-out if current check is too large, Result
        class if part 2 was doing something else than just finding the product of
        the values, etc.).&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/LactoseGK/adventofcode2020/blob/main/AdventOfCode2020/AdventOfCode2020/Days/Day01VC.swift\"&gt;https://github.com/LactoseGK/adventofcode2020/blob/main/AdventOfCode2020/AdventOfCode2020/Days/Day01VC.swift&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9vh7d/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9vh7d", "created":
        1606841570.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606848713.0, "mod_reason_by": null,
        "banned_by": null, "ups": 0, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gea97s3", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "toastedstapler",
        "can_mod_post": false, "created_utc": 1606848102.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 0, "author_fullname": "t2_ck238", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Rust:\n\n    use std::collections::HashMap;\n    \n    fn load_numbers()
        -&gt; Vec&lt;i64&gt; {\n        let s = std::fs::read_to_string(\"files/01.txt\").expect(\"should
        be file\");\n        s.lines()\n            .map(|i| i.parse().expect(\"should
        be valid int\"))\n            .collect()\n    }\n    \n    fn part1(nums:
        &amp;Vec&lt;i64&gt;) -&gt; i64 {\n        let mut i = 0;\n        let mut
        j = nums.len() - 1;\n        let mut t = nums[i] + nums[j];\n    \n        while
        t != 2020 {\n            if t &lt; 2020 {\n                i += 1;\n            }
        else {\n                j -= 1;\n            }\n            t = nums[i] +
        nums[j];\n        }\n    \n        nums[i] * nums[j]\n    }\n    \n    fn
        part2(nums: &amp;Vec&lt;i64&gt;) -&gt; i64 {\n        let min = nums.first().expect(\"more
        than 0 items\");\n        let cache: HashMap&lt;i64, (i64, i64)&gt; = (0..nums.len())\n            .flat_map(|i|
        ((i + 1)..nums.len()).map(move |j| (i, j)))\n            .filter_map(|(i,
        j)| {\n                let i = nums[i];\n                let j = nums[j];\n                if
        i + j + min &lt; GOAL {\n                    Some((i + j, (i, j)))\n                }
        else {\n                    None\n                }\n            })\n            .collect();\n    \n        for
        &amp;num in nums {\n            let diff = GOAL - num;\n            if let
        Some((i, j)) = cache.get(&amp;diff) {\n                return i * j * num;\n            }\n        }\n    \n        panic!(\"please
        work\")\n    }\n    \n    pub fn run() {\n        let mut nums = load_numbers();\n        nums.sort();\n    \n        println!(\"day
        1\");\n        println!(\"part 1: {}\", part1(&amp;nums));\n        println!(\"part
        2: {}\", part2(&amp;nums));\n    }\n\ninitially i had brute forced it, but
        i decided to change for a more elegant solution", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Rust:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use std::collections::HashMap;\n\nfn
        load_numbers() -&amp;gt; Vec&amp;lt;i64&amp;gt; {\n    let s = std::fs::read_to_string(&amp;quot;files/01.txt&amp;quot;).expect(&amp;quot;should
        be file&amp;quot;);\n    s.lines()\n        .map(|i| i.parse().expect(&amp;quot;should
        be valid int&amp;quot;))\n        .collect()\n}\n\nfn part1(nums: &amp;amp;Vec&amp;lt;i64&amp;gt;)
        -&amp;gt; i64 {\n    let mut i = 0;\n    let mut j = nums.len() - 1;\n    let
        mut t = nums[i] + nums[j];\n\n    while t != 2020 {\n        if t &amp;lt;
        2020 {\n            i += 1;\n        } else {\n            j -= 1;\n        }\n        t
        = nums[i] + nums[j];\n    }\n\n    nums[i] * nums[j]\n}\n\nfn part2(nums:
        &amp;amp;Vec&amp;lt;i64&amp;gt;) -&amp;gt; i64 {\n    let min = nums.first().expect(&amp;quot;more
        than 0 items&amp;quot;);\n    let cache: HashMap&amp;lt;i64, (i64, i64)&amp;gt;
        = (0..nums.len())\n        .flat_map(|i| ((i + 1)..nums.len()).map(move |j|
        (i, j)))\n        .filter_map(|(i, j)| {\n            let i = nums[i];\n            let
        j = nums[j];\n            if i + j + min &amp;lt; GOAL {\n                Some((i
        + j, (i, j)))\n            } else {\n                None\n            }\n        })\n        .collect();\n\n    for
        &amp;amp;num in nums {\n        let diff = GOAL - num;\n        if let Some((i,
        j)) = cache.get(&amp;amp;diff) {\n            return i * j * num;\n        }\n    }\n\n    panic!(&amp;quot;please
        work&amp;quot;)\n}\n\npub fn run() {\n    let mut nums = load_numbers();\n    nums.sort();\n\n    println!(&amp;quot;day
        1&amp;quot;);\n    println!(&amp;quot;part 1: {}&amp;quot;, part1(&amp;amp;nums));\n    println!(&amp;quot;part
        2: {}&amp;quot;, part2(&amp;amp;nums));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;initially
        i had brute forced it, but i decided to change for a more elegant solution&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea97s3/",
        "subreddit_type": "public", "locked": false, "name": "t1_gea97s3", "created":
        1606848102.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 0, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geamp0x",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "MarilenaFanboy",
        "can_mod_post": false, "created_utc": 1606854345.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 0, "author_fullname": "t2_8i1c3uqe", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Guys! Hello, I''m new to programming. I used c to write this programm which
        is wrong and i don''t know why.. Can you pls help me? The numbers that I''m
        getting are 198 and 1822 and the multiplication gives me **360756 which seems
        about right but I don''t know why it is not correct :(**\n\n \n\n\\#include
        &lt;stdio.h&gt;  \n\\#include &lt;stdlib.h&gt;  \nint main(){  \n FILE\\*\u00a0input;  \n
        int values\\[200\\];  \n int wantedNumber;  \n input\u00a0=\u00a0fopen(\"input.txt\",\u00a0\"r\");  \n
        fscanf\u00a0(input\u00a0,\u00a0\"%d\",\u00a0&amp;values);  \n int i\u00a0=\u00a00;  \n
        while(!feof\u00a0(input)){  \n //printf(\"values\u00a0are:\u00a0%d\\\\n\",\u00a0values);  \n
        fscanf(input\u00a0,\u00a0\"%d\",\u00a0&amp;values\\[i\\]);\u00a0  \n i++;  \n\u00a0\u00a0\u00a0\u00a0}  \n
        fclose(input);  \n   \n for(i\u00a0=\u00a00;\u00a0i&lt;\u00a0200;\u00a0i++\u00a0){  \n
        wantedNumber\u00a0=\u00a02020-values\\[i\\];  \n for(int j\u00a0=\u00a00;\u00a0j\u00a0&lt;\u00a0200;\u00a0j++){  \n
        if((values\\[j\\]\u00a0/\u00a01000)\u00a0==\u00a00){  \n if(values\\[j\\]\u00a0+\u00a0wantedNumber\u00a0==\u00a02020){  \n
        printf(\"%d\u00a0%d\\\\n\",\u00a0values\\[j\\],\u00a0wantedNumber);  \n printf(\"%d\",\u00a0values\\[j\\]\\*wantedNumber);  \n
        return 0;  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}  \n\u00a0\u00a0\u00a0\u00a0}  \n}",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Guys! Hello, I&amp;#39;m
        new to programming. I used c to write this programm which is wrong and i don&amp;#39;t
        know why.. Can you pls help me? The numbers that I&amp;#39;m getting are 198
        and 1822 and the multiplication gives me &lt;strong&gt;360756 which seems
        about right but I don&amp;#39;t know why it is not correct :(&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;#include
        &amp;lt;stdio.h&amp;gt;&lt;br/&gt;\n#include &amp;lt;stdlib.h&amp;gt;&lt;br/&gt;\nint
        main(){&lt;br/&gt;\n FILE*\u00a0input;&lt;br/&gt;\n int values[200];&lt;br/&gt;\n
        int wantedNumber;&lt;br/&gt;\n input\u00a0=\u00a0fopen(&amp;quot;input.txt&amp;quot;,\u00a0&amp;quot;r&amp;quot;);&lt;br/&gt;\n
        fscanf\u00a0(input\u00a0,\u00a0&amp;quot;%d&amp;quot;,\u00a0&amp;amp;values);&lt;br/&gt;\n
        int i\u00a0=\u00a00;&lt;br/&gt;\n while(!feof\u00a0(input)){&lt;br/&gt;\n
        //printf(&amp;quot;values\u00a0are:\u00a0%d\\n&amp;quot;,\u00a0values);&lt;br/&gt;\n
        fscanf(input\u00a0,\u00a0&amp;quot;%d&amp;quot;,\u00a0&amp;amp;values[i]);\u00a0&lt;br/&gt;\n
        i++;&lt;br/&gt;\n\u00a0\u00a0\u00a0\u00a0}&lt;br/&gt;\n fclose(input);  &lt;/p&gt;\n\n&lt;p&gt;for(i\u00a0=\u00a00;\u00a0i&amp;lt;\u00a0200;\u00a0i++\u00a0){&lt;br/&gt;\n
        wantedNumber\u00a0=\u00a02020-values[i];&lt;br/&gt;\n for(int j\u00a0=\u00a00;\u00a0j\u00a0&amp;lt;\u00a0200;\u00a0j++){&lt;br/&gt;\n
        if((values[j]\u00a0/\u00a01000)\u00a0==\u00a00){&lt;br/&gt;\n if(values[j]\u00a0+\u00a0wantedNumber\u00a0==\u00a02020){&lt;br/&gt;\n
        printf(&amp;quot;%d\u00a0%d\\n&amp;quot;,\u00a0values[j],\u00a0wantedNumber);&lt;br/&gt;\n
        printf(&amp;quot;%d&amp;quot;,\u00a0values[j]*wantedNumber);&lt;br/&gt;\n
        return 0;&lt;br/&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}&lt;br/&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}&lt;br/&gt;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}&lt;br/&gt;\n\u00a0\u00a0\u00a0\u00a0}&lt;br/&gt;\n}&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geamp0x/",
        "subreddit_type": "public", "locked": false, "name": "t1_geamp0x", "created":
        1606854345.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geantd6",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606854861.0, "send_replies": true,
        "parent_id": "t1_geamp0x", "score": 1, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "&gt; # Top-level posts in Solution Megathreads are for *code solutions* only.\n\nThis
        is a top-level post, so please edit your post and share your code/repo/solution.  Since
        it seems like you haven''t finished the puzzle yet, create your own thread
        and make sure to flair it with `Help`.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": true, "body_html": "&lt;div
        class=\"md\"&gt;&lt;blockquote&gt;\n&lt;h1&gt;Top-level posts in Solution
        Megathreads are for &lt;em&gt;code solutions&lt;/em&gt; only.&lt;/h1&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This
        is a top-level post, so please edit your post and share your code/repo/solution.  Since
        it seems like you haven&amp;#39;t finished the puzzle yet, create your own
        thread and make sure to flair it with &lt;code&gt;Help&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geantd6/",
        "subreddit_type": "public", "locked": false, "name": "t1_geantd6", "created":
        1606854861.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geatnet", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606857614.0, "send_replies": true,
        "parent_id": "t1_geantd6", "score": 1, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Note: /u/MarilenaFanboy posted their solution in [another post here](https://www.reddit.com/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geaq1d5/)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        true, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Note: &lt;a href=\"/u/MarilenaFanboy\"&gt;/u/MarilenaFanboy&lt;/a&gt;
        posted their solution in &lt;a href=\"https://www.reddit.com/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geaq1d5/\"&gt;another
        post here&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geatnet/",
        "subreddit_type": "public", "locked": false, "name": "t1_geatnet", "created":
        1606857614.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "more", "data": {"count": 2, "name": "t1_geang24", "id": "geang24",
        "parent_id": "t1_geamp0x", "depth": 1, "children": ["geang24", "geasyjj"]}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": 1606800364.0,
        "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8cl31", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "seligman99",
        "can_mod_post": false, "created_utc": 1606799550.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_3syc5", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python 683 / 532\n\nApparently I don''t hit refresh as fast as others\n\n[github](https://github.com/seligman/aoc/blob/master/2020/Helpers/day_01.py)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python 683 / 532&lt;/p&gt;\n\n&lt;p&gt;Apparently
        I don&amp;#39;t hit refresh as fast as others&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/seligman/aoc/blob/master/2020/Helpers/day_01.py\"&gt;github&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8cl31/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8cl31", "created":
        1606799550.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606799836.0, "mod_reason_by": null,
        "banned_by": null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8cl3c", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_ge8cl3c", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8cl3c/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606799550.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606799550.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8clqi",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "backtickbot",
        "can_mod_post": false, "created_utc": 1606799564.0, "send_replies": true,
        "parent_id": "t1_ge8cl3c", "score": 1, "author_fullname": "t2_8n9fijwc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Hello, hugh\\_tc: code blocks using backticks (\\`\\`\\`) don''t work on
        all versions of Reddit!\n\nSome users see [this](https://stalas.alm.lt/backformat/ge8cl3c.png)
        / [this](https://stalas.alm.lt/backformat/ge8cl3c.html) instead.\n\nTo fix
        this, indent every line with **4 spaces** instead. It''s a bit annoying, but
        then your code blocks are properly formatted for everyone.\n\nAn easy way
        to do this is to use the [code-block button in the editor](https://stalas.alm.lt/files/new-reddit-codeblock.png).
        If it''s not working, try switching to the fancy-pants editor and back again.\n\n[Comment
        with formatting fixed for old.reddit.com users](https://np.reddit.com/r/backtickbot/comments/k4eby7/httpsnpredditcomradventofcodecommentsk4e4lm2020/)\n\n[FAQ](https://www.reddit.com/r/backtickbot/wiki/index)\n\n^(You
        can opt out by replying with backtickopt6 to this comment.)", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Hello, hugh_tc: code blocks using backticks
        (```) don&amp;#39;t work on all versions of Reddit!&lt;/p&gt;\n\n&lt;p&gt;Some
        users see &lt;a href=\"https://stalas.alm.lt/backformat/ge8cl3c.png\"&gt;this&lt;/a&gt;
        / &lt;a href=\"https://stalas.alm.lt/backformat/ge8cl3c.html\"&gt;this&lt;/a&gt;
        instead.&lt;/p&gt;\n\n&lt;p&gt;To fix this, indent every line with &lt;strong&gt;4
        spaces&lt;/strong&gt; instead. It&amp;#39;s a bit annoying, but then your
        code blocks are properly formatted for everyone.&lt;/p&gt;\n\n&lt;p&gt;An
        easy way to do this is to use the &lt;a href=\"https://stalas.alm.lt/files/new-reddit-codeblock.png\"&gt;code-block
        button in the editor&lt;/a&gt;. If it&amp;#39;s not working, try switching
        to the fancy-pants editor and back again.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://np.reddit.com/r/backtickbot/comments/k4eby7/httpsnpredditcomradventofcodecommentsk4e4lm2020/\"&gt;Comment
        with formatting fixed for old.reddit.com users&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://www.reddit.com/r/backtickbot/wiki/index\"&gt;FAQ&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;You
        can opt out by replying with backtickopt6 to this comment.&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8clqi/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8clqi", "created":
        1606799564.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8cpkh",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "VeeArr",
        "can_mod_post": false, "created_utc": 1606799643.0, "send_replies": true,
        "parent_id": "t1_ge8clqi", "score": 2, "author_fullname": "t2_6h8f6", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Good bot", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Good
        bot&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8cpkh/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8cpkh", "created":
        1606799643.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge8cqkr", "id": "ge8cqkr", "parent_id":
        "t1_ge8cpkh", "depth": 3, "children": ["ge8cqkr"]}}, {"kind": "more", "data":
        {"count": 1, "name": "t1_ge8j7c9", "id": "ge8j7c9", "parent_id": "t1_ge8clqi",
        "depth": 2, "children": ["ge8j7c9"]}}, {"kind": "more", "data": {"count":
        3, "name": "t1_ge8csvh", "id": "ge8csvh", "parent_id": "t1_ge8cl3c", "depth":
        1, "children": ["ge8csvh"]}}, {"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": 1615492855.0, "mod_reason_by": null, "banned_by": null, "removal_reason":
        null, "link_id": "t3_k4e4lm", "author_flair_template_id": null, "likes": null,
        "replies": "", "user_reports": [], "saved": false, "id": "ge8cv0w", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        "DELETED", "no_follow": true, "author": "[deleted]", "can_mod_post": false,
        "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1, "approved_by":
        null, "mod_note": null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body":
        "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class": null, "name":
        "t1_ge8cv0w", "collapsed": false, "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8cv0w/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606799752.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606799752.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8fjm6",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "dreadful_design",
        "can_mod_post": false, "created_utc": 1606801812.0, "send_replies": true,
        "parent_id": "t1_ge8cv0w", "score": 2, "author_fullname": "t2_29ernm17", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "This my solution too, if it works it works...", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;This my solution too, if it works it works...&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8fjm6/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8fjm6", "created":
        1606801812.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8d3oo",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Lrrrr_",
        "can_mod_post": false, "created_utc": 1606799929.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_xojf2", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "JavaScript. 141/351\n\n    const fs = require(''fs'')\n    const input =
        fs.readFileSync(''q1.txt'', ''utf8'')\n        .split(''\\n'')\n        .map(c
        =&gt; +c)\n    \n    for(let i = 0; i &lt; input.length; i++)\n        for(let
        j = i; j &lt; input.length; j++) {\n            if(input[i] + input[j] ===
        2020)\n                console.log(''p1'', input[i] * input[j])\n    \n            for(let
        k = j; k &lt; input.length; k++)\n                if(input[i] + input[j] +
        input[k] === 2020)\n                    console.log(''p2'', input[i] * input[j]
        * input[k])\n        }", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;JavaScript.
        141/351&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const fs = require(&amp;#39;fs&amp;#39;)\nconst
        input = fs.readFileSync(&amp;#39;q1.txt&amp;#39;, &amp;#39;utf8&amp;#39;)\n    .split(&amp;#39;\\n&amp;#39;)\n    .map(c
        =&amp;gt; +c)\n\nfor(let i = 0; i &amp;lt; input.length; i++)\n    for(let
        j = i; j &amp;lt; input.length; j++) {\n        if(input[i] + input[j] ===
        2020)\n            console.log(&amp;#39;p1&amp;#39;, input[i] * input[j])\n\n        for(let
        k = j; k &amp;lt; input.length; k++)\n            if(input[i] + input[j] +
        input[k] === 2020)\n                console.log(&amp;#39;p2&amp;#39;, input[i]
        * input[j] * input[k])\n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8d3oo/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8d3oo", "created": 1606799929.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "ge8d3xk", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "nlowe_", "can_mod_post": false, "created_utc":
        1606799934.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_56rgazd6", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "[Go, 1546/1273](https://github.com/nlowe/aoc2020/commit/59701655757329e286fbc89707bf4ca67aaff523).
        I have a generator that templates a package for each day, and that was able
        to get my problem input right away, but I couldn''t actually get the problem
        page itself to load until about 9 minutes later. Looks popular this year,
        I''ll try again tomorrow!", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a
        href=\"https://github.com/nlowe/aoc2020/commit/59701655757329e286fbc89707bf4ca67aaff523\"&gt;Go,
        1546/1273&lt;/a&gt;. I have a generator that templates a package for each
        day, and that was able to get my problem input right away, but I couldn&amp;#39;t
        actually get the problem page itself to load until about 9 minutes later.
        Looks popular this year, I&amp;#39;ll try again tomorrow!&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8d3xk/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8d3xk", "created":
        1606799934.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8dez1",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "FogLander",
        "can_mod_post": false, "created_utc": 1606800160.0, "send_replies": true,
        "parent_id": "t1_ge8d3xk", "score": 2, "author_fullname": "t2_iy44x", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I had the reverse, sitting there with working code looking at the problem
        page but with no input", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        had the reverse, sitting there with working code looking at the problem page
        but with no input&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8dez1/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8dez1", "created":
        1606800160.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8m8aq",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606807454.0, "send_replies": true,
        "parent_id": "t1_ge8d3xk", "score": 2, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Sorry about that!  We normally have buttery smooth launches but I guess 2020
        told us to hold its beer and watch this -_-\n\n/u/topaz2078 is looking into
        it to prevent this from happening again, no worries :)", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": true, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Sorry about that!  We normally have buttery smooth
        launches but I guess 2020 told us to hold its beer and watch this -_-&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"/u/topaz2078\"&gt;/u/topaz2078&lt;/a&gt; is looking into it to prevent
        this from happening again, no worries :)&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8m8aq/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8m8aq", "created": 1606807454.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": "moderator"}}, {"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 2,
        "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8n68z",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "nlowe_",
        "can_mod_post": false, "created_utc": 1606808324.0, "send_replies": true,
        "parent_id": "t1_ge8m8aq", "score": 2, "author_fullname": "t2_56rgazd6", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "No worries. I deal with stuff like that in my day job, I can certainly appreciate
        how difficult preparing for something like this is! Good luck with the rest
        of the month! #HugOps", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No
        worries. I deal with stuff like that in my day job, I can certainly appreciate
        how difficult preparing for something like this is! Good luck with the rest
        of the month! #HugOps&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8n68z/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8n68z", "created":
        1606808324.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606800497.0, "mod_reason_by": null,
        "banned_by": null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8d4fv", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "##Haskell (459/1360)\n    \n    inputData :: IO [Int]\n    inputData
        = map read . lines &lt;$&gt; input 20 1\n\n    sum2020 :: [Int] -&gt; Maybe
        (Int, Int)\n    sum2020 (x : xs) = sum2020'' x xs &lt;|&gt; sum2020 xs\n      where\n        sum2020''
        :: Int -&gt; [Int] -&gt; Maybe (Int, Int)\n        sum2020'' x xs = (x,) &lt;$&gt;
        find ((== 2020) . (+ x)) xs\n\n    part1 :: IO Int\n    part1 = uncurry (*)
        . fromMaybe (0, 0) . sum2020 &lt;$&gt; inputData\n\n    sum2020Three :: [Int]
        -&gt; Maybe (Int, Int, Int)\n    sum2020Three (x : xs) = sum2020Three'' x
        xs &lt;|&gt; sum2020Three xs\n      where\n        sum2020Three'' :: Int -&gt;
        [Int] -&gt; Maybe (Int, Int, Int)\n        sum2020Three'' x (y : xs) = ((x,y,)
        &lt;$&gt; find ((== 2020) . (+ y) . (+ x)) xs) &lt;|&gt; sum2020Three'' x
        xs\n        sum2020Three'' x [] = Nothing\n\n    part2 :: IO Int\n    part2
        = (\\(a, b, c) -&gt; a * b * c) . fromMaybe (0, 0, 0) . sum2020Three &lt;$&gt;
        inputData", "awarders": [], "downs": 0, "author_flair_css_class": null, "name":
        "t1_ge8d4fv", "collapsed": false, "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;h2&gt;Haskell (459/1360)&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;inputData
        :: IO [Int]\ninputData = map read . lines &amp;lt;$&amp;gt; input 20 1\n\nsum2020
        :: [Int] -&amp;gt; Maybe (Int, Int)\nsum2020 (x : xs) = sum2020&amp;#39; x
        xs &amp;lt;|&amp;gt; sum2020 xs\n  where\n    sum2020&amp;#39; :: Int -&amp;gt;
        [Int] -&amp;gt; Maybe (Int, Int)\n    sum2020&amp;#39; x xs = (x,) &amp;lt;$&amp;gt;
        find ((== 2020) . (+ x)) xs\n\npart1 :: IO Int\npart1 = uncurry (*) . fromMaybe
        (0, 0) . sum2020 &amp;lt;$&amp;gt; inputData\n\nsum2020Three :: [Int] -&amp;gt;
        Maybe (Int, Int, Int)\nsum2020Three (x : xs) = sum2020Three&amp;#39; x xs
        &amp;lt;|&amp;gt; sum2020Three xs\n  where\n    sum2020Three&amp;#39; :: Int
        -&amp;gt; [Int] -&amp;gt; Maybe (Int, Int, Int)\n    sum2020Three&amp;#39;
        x (y : xs) = ((x,y,) &amp;lt;$&amp;gt; find ((== 2020) . (+ y) . (+ x)) xs)
        &amp;lt;|&amp;gt; sum2020Three&amp;#39; x xs\n    sum2020Three&amp;#39; x
        [] = Nothing\n\npart2 :: IO Int\npart2 = (\\(a, b, c) -&amp;gt; a * b * c)
        . fromMaybe (0, 0, 0) . sum2020Three &amp;lt;$&amp;gt; inputData\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8d4fv/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606799944.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606799944.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8d575",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ritobanrc",
        "can_mod_post": false, "created_utc": 1606799960.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_16tntq", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Rust. 887/993. _Slightly optimized_ using a `HashSet`. https://github.com/ritobanrc/aoc2020/blob/main/src/day01.rs
        (still O(n) and O(n^2), respectively).", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Rust. 887/993. &lt;em&gt;Slightly optimized&lt;/em&gt;
        using a &lt;code&gt;HashSet&lt;/code&gt;. &lt;a href=\"https://github.com/ritobanrc/aoc2020/blob/main/src/day01.rs\"&gt;https://github.com/ritobanrc/aoc2020/blob/main/src/day01.rs&lt;/a&gt;
        (still O(n) and O(n&lt;sup&gt;2),&lt;/sup&gt; respectively).&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8d575/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8d575", "created":
        1606799960.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8d6qk",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "youaremean_YAM",
        "can_mod_post": false, "created_utc": 1606799991.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_14969o", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "[Javascript solution](https://github.com/agardes/adventofcode-2020/blob/main/day01.js)\n\n687
        / 462", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a
        href=\"https://github.com/agardes/adventofcode-2020/blob/main/day01.js\"&gt;Javascript
        solution&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;687 / 462&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8d6qk/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8d6qk", "created":
        1606799991.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606800208.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8d75b", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "frontpageminus",
        "can_mod_post": false, "created_utc": 1606799999.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_9akbj", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Ruby - 1706 / 1575. Just brute forcing it. Part one:\n\n    values = File.read(''1_1.txt'').lines.map(&amp;:chomp).map(&amp;:to_i)\n    (0..values.size-2).each
        do |l|\n      (l+1..values.size-1).each do |r|\n        if values[l] + values[r]
        == 2020\n          puts values[l] * values[r]\n          exit\n        end\n      end\n    end\n\nPart
        two:\n\n    values = File.read(''1_1.txt'').lines.map(&amp;:chomp).map(&amp;:to_i)\n    (0..values.size-3).each
        do |l|\n      (l+1..values.size-2).each do |r|\n        (r+1..values.size-1).each
        do |c|\n          if values[l] + values[r] + values[c] == 2020\n            puts
        values[l] * values[r] * values[c]\n            exit\n          end\n        end\n      end\n    end",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ruby - 1706 / 1575.
        Just brute forcing it. Part one:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;values
        = File.read(&amp;#39;1_1.txt&amp;#39;).lines.map(&amp;amp;:chomp).map(&amp;amp;:to_i)\n(0..values.size-2).each
        do |l|\n  (l+1..values.size-1).each do |r|\n    if values[l] + values[r] ==
        2020\n      puts values[l] * values[r]\n      exit\n    end\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        two:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;values = File.read(&amp;#39;1_1.txt&amp;#39;).lines.map(&amp;amp;:chomp).map(&amp;amp;:to_i)\n(0..values.size-3).each
        do |l|\n  (l+1..values.size-2).each do |r|\n    (r+1..values.size-1).each
        do |c|\n      if values[l] + values[r] + values[c] == 2020\n        puts values[l]
        * values[r] * values[c]\n        exit\n      end\n    end\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8d75b/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8d75b", "created":
        1606799999.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8d88g", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[removed]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_ge8d88g", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[removed]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8d88g/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606800022.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606800022.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8mgrw",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606807670.0, "send_replies": true,
        "parent_id": "t1_ge8d88g", "score": 1, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "&gt; # Top-level posts in Solution Megathreads are for *code solutions* only.\n\nPlus,
        [you''ve already made a thread with this information](https://www.reddit.com/r/adventofcode/comments/k4ehqn/discuss_and_crack_discord/).
        If you edit your post to share your code/repo/solution *and* just link to
        your own thread, I''ll re-approve it.\n\n(Or if you haven''t finished the
        puzzle yet, you can always create your own thread and make sure to flair it
        with `Help`.)", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": true, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;h1&gt;Top-level
        posts in Solution Megathreads are for &lt;em&gt;code solutions&lt;/em&gt;
        only.&lt;/h1&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Plus, &lt;a href=\"https://www.reddit.com/r/adventofcode/comments/k4ehqn/discuss_and_crack_discord/\"&gt;you&amp;#39;ve
        already made a thread with this information&lt;/a&gt;. If you edit your post
        to share your code/repo/solution &lt;em&gt;and&lt;/em&gt; just link to your
        own thread, I&amp;#39;ll re-approve it.&lt;/p&gt;\n\n&lt;p&gt;(Or if you haven&amp;#39;t
        finished the puzzle yet, you can always create your own thread and make sure
        to flair it with &lt;code&gt;Help&lt;/code&gt;.)&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8mgrw/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8mgrw", "created":
        1606807670.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "more", "data": {"count": 4, "name": "t1_ge8ddco", "id": "ge8ddco",
        "parent_id": "t1_ge8d88g", "depth": 1, "children": ["ge8ddco", "ge8ls91"]}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8d8ht", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "alle_menschen",
        "can_mod_post": false, "created_utc": 1606800027.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_qhvkz", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python, 1064 / 482. Didn''t spam refresh.\n\n    from itertools import product\n    values
        = []\n    with open(\"input\") as f:\n        for line in f:\n            values.append(int(line.strip()))\n    for
        i, j in product(values, repeat=2):\n        if i + j == 2020:\n            print(f\"{i}
        * {j} = {i * j}\")\n            break\n    \n    for i, j, k in product(values,
        repeat=3):\n        if i + j + k == 2020:\n            print(f\"{i} * {j}
        * {k} = {i * j * k}\")\n            break", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Python, 1064 / 482. Didn&amp;#39;t spam refresh.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from
        itertools import product\nvalues = []\nwith open(&amp;quot;input&amp;quot;)
        as f:\n    for line in f:\n        values.append(int(line.strip()))\nfor i,
        j in product(values, repeat=2):\n    if i + j == 2020:\n        print(f&amp;quot;{i}
        * {j} = {i * j}&amp;quot;)\n        break\n\nfor i, j, k in product(values,
        repeat=3):\n    if i + j + k == 2020:\n        print(f&amp;quot;{i} * {j}
        * {k} = {i * j * k}&amp;quot;)\n        break\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8d8ht/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8d8ht", "created":
        1606800027.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606801281.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8dc2t", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "coriandor",
        "can_mod_post": false, "created_utc": 1606800100.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_84lyo", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I love how easy and elegant Crystal does permutations.\n\n    lines = File.open(\"input.txt\").each_line.map{|line|
        line.to_i}.to_a\n\n    lines.each_permutation(2) do |n|\n      if n.sum ==
        2020\n        puts n[0] * n[1]\n        break;\n      end\n    end\n\n    lines.each_permutation(3)
        do |n|\n      if n.sum == 2020\n        puts n[0] * n[1] * n[2]\n        break;\n      end\n    end\n\nedit:
        just realized this actually could be each_combination, which is also an option
        in the stdlib, but it doesn''t really matter since the set is small and order
        doesn''t matter anyways.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        love how easy and elegant Crystal does permutations.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;lines
        = File.open(&amp;quot;input.txt&amp;quot;).each_line.map{|line| line.to_i}.to_a\n\nlines.each_permutation(2)
        do |n|\n  if n.sum == 2020\n    puts n[0] * n[1]\n    break;\n  end\nend\n\nlines.each_permutation(3)
        do |n|\n  if n.sum == 2020\n    puts n[0] * n[1] * n[2]\n    break;\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;edit:
        just realized this actually could be each_combination, which is also an option
        in the stdlib, but it doesn&amp;#39;t really matter since the set is small
        and order doesn&amp;#39;t matter anyways.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8dc2t/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8dc2t", "created": 1606800100.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 3, "name":
        "t1_ge8o2gu", "id": "ge8o2gu", "parent_id": "t1_ge8dc2t", "depth": 1, "children":
        ["ge8o2gu"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8dckb", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "2SmoothForYou",
        "can_mod_post": false, "created_utc": 1606800109.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_hephg", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "    main :: IO ()\n    main = do\n        content &lt;- readFile \"day1.txt\"\n        print
        $ part1 $ lines content\n        print $ part2 $ lines content\n    \n    part1
        :: [String] -&gt; Int\n    part1 arr = tupleTimes $ head $ filter (\\(x, y)
        -&gt; x + y == 2020) [(read x, read y) | x &lt;- arr, y &lt;- arr]\n    \n    tupleTimes
        :: (Int, Int) -&gt; Int\n    tupleTimes (a, b) = a * b\n    \n    thrupleTimes
        :: (Int, Int, Int) -&gt; Int\n    thrupleTimes (a,b,c) = a*b*c\n    \n    part2
        :: [String] -&gt; Int\n    part2 arr = thrupleTimes $ head $ filter (\\(x,
        y, z) -&gt; x + y + z == 2020) [(read x, read y, read z) | x &lt;- arr, y
        &lt;- arr, z &lt;- arr]\n\nEasy enough to hack together a brute force in Haskell
        using list comprehensions to generate cartesian products and filter.", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;main :: IO ()\nmain = do\n    content
        &amp;lt;- readFile &amp;quot;day1.txt&amp;quot;\n    print $ part1 $ lines
        content\n    print $ part2 $ lines content\n\npart1 :: [String] -&amp;gt;
        Int\npart1 arr = tupleTimes $ head $ filter (\\(x, y) -&amp;gt; x + y == 2020)
        [(read x, read y) | x &amp;lt;- arr, y &amp;lt;- arr]\n\ntupleTimes :: (Int,
        Int) -&amp;gt; Int\ntupleTimes (a, b) = a * b\n\nthrupleTimes :: (Int, Int,
        Int) -&amp;gt; Int\nthrupleTimes (a,b,c) = a*b*c\n\npart2 :: [String] -&amp;gt;
        Int\npart2 arr = thrupleTimes $ head $ filter (\\(x, y, z) -&amp;gt; x + y
        + z == 2020) [(read x, read y, read z) | x &amp;lt;- arr, y &amp;lt;- arr,
        z &amp;lt;- arr]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Easy enough to hack
        together a brute force in Haskell using list comprehensions to generate cartesian
        products and filter.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8dckb/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8dckb", "created":
        1606800109.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8dqgx",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "fatheart",
        "can_mod_post": false, "created_utc": 1606800401.0, "send_replies": true,
        "parent_id": "t1_ge8dckb", "score": 2, "author_fullname": "t2_5boa3", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Also used a list comprehension to solve:\n\n    main = do\n      input &lt;-
        map read . lines &lt;$&gt; readFile \"day1.input\"\n      print . (++) \"Part
        1: \" . show . head $ [ x * y | x &lt;- input, y &lt;- input, x + y == 2020
        ]\n      print . (++) \"Part 2: \" . show . head $ [ x * y * z | x &lt;- input,
        y &lt;- input, z &lt;- input, x + y + z == 2020 ]", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Also used a list comprehension to solve:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;main
        = do\n  input &amp;lt;- map read . lines &amp;lt;$&amp;gt; readFile &amp;quot;day1.input&amp;quot;\n  print
        . (++) &amp;quot;Part 1: &amp;quot; . show . head $ [ x * y | x &amp;lt;-
        input, y &amp;lt;- input, x + y == 2020 ]\n  print . (++) &amp;quot;Part 2:
        &amp;quot; . show . head $ [ x * y * z | x &amp;lt;- input, y &amp;lt;- input,
        z &amp;lt;- input, x + y + z == 2020 ]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8dqgx/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8dqgx", "created":
        1606800401.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8ehwf",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "2SmoothForYou",
        "can_mod_post": false, "created_utc": 1606800987.0, "send_replies": true,
        "parent_id": "t1_ge8dqgx", "score": 2, "author_fullname": "t2_hephg", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Oh yeah that\u2019s way better. I forgot about just doing the math in the
        list comprehension like you did.", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Oh yeah that\u2019s way better. I forgot about just
        doing the math in the list comprehension like you did.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8ehwf/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8ehwf", "created":
        1606800987.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606801954.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8dgjc", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "omginbd",
        "can_mod_post": false, "created_utc": 1606800192.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_5uht8", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Elixir \n\n---\n\n`get_lines` comes from the Aoc.Utils module.\n\n    defmodule
        Aoc.Day01 do\n      import Aoc.Utils\n      def part1(filename) do\n        {first,
        second} = filename\n        |&gt; get_lines\n        |&gt; Enum.map(&amp;String.to_integer/1)\n        |&gt;
        find_summing_numbers(2020)\n        first * second\n      end\n    \n      defp
        find_summing_numbers([head | tail], number_to_find) do\n        other_number
        = Enum.find(tail, fn a -&gt; a === number_to_find - head end)\n        case
        other_number do\n          nil -&gt; find_summing_numbers(tail, number_to_find)\n          _
        -&gt; {head, other_number}\n        end\n      end\n    \n      defp find_summing_numbers([],
        _num), do: nil\n    \n      def part2(filename) do\n        {first, {second,
        third}} = filename\n        |&gt; get_lines\n        |&gt; Enum.map(&amp;String.to_integer/1)\n        |&gt;
        find_three_summing_numbers(2020)\n        first * second * third\n      end\n    \n      defp
        find_three_summing_numbers([head | tail], number_to_find) do\n        other_numbers
        = find_summing_numbers(tail, number_to_find - head)\n        case other_numbers
        do\n          nil -&gt; find_three_summing_numbers(tail, number_to_find)\n          _
        -&gt; {head, other_numbers}\n        end\n      end\n    end", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Elixir &lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;&lt;code&gt;get_lines&lt;/code&gt;
        comes from the Aoc.Utils module.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;defmodule
        Aoc.Day01 do\n  import Aoc.Utils\n  def part1(filename) do\n    {first, second}
        = filename\n    |&amp;gt; get_lines\n    |&amp;gt; Enum.map(&amp;amp;String.to_integer/1)\n    |&amp;gt;
        find_summing_numbers(2020)\n    first * second\n  end\n\n  defp find_summing_numbers([head
        | tail], number_to_find) do\n    other_number = Enum.find(tail, fn a -&amp;gt;
        a === number_to_find - head end)\n    case other_number do\n      nil -&amp;gt;
        find_summing_numbers(tail, number_to_find)\n      _ -&amp;gt; {head, other_number}\n    end\n  end\n\n  defp
        find_summing_numbers([], _num), do: nil\n\n  def part2(filename) do\n    {first,
        {second, third}} = filename\n    |&amp;gt; get_lines\n    |&amp;gt; Enum.map(&amp;amp;String.to_integer/1)\n    |&amp;gt;
        find_three_summing_numbers(2020)\n    first * second * third\n  end\n\n  defp
        find_three_summing_numbers([head | tail], number_to_find) do\n    other_numbers
        = find_summing_numbers(tail, number_to_find - head)\n    case other_numbers
        do\n      nil -&amp;gt; find_three_summing_numbers(tail, number_to_find)\n      _
        -&amp;gt; {head, other_numbers}\n    end\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8dgjc/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8dgjc", "created":
        1606800192.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8dglu",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "nullReference13",
        "can_mod_post": false, "created_utc": 1606800194.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_11c1sc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# Deno\n\nThis uses the starter for Deno that I wrote [here](https://github.com/Mmarzex/advent-of-code-deno-starter)\n\n    import
        Day from \"./day.ts\";\n    \n    class Day1 extends Day {\n      partOne():
        string {\n        const expenses = this.input.trimRight().split(\"\\n\").map((d)
        =&gt; parseInt(d));\n        for (let i = 0; i &lt; expenses.length; i++)
        {\n          for (let j = i + 1; j &lt; expenses.length; j++) {\n            if
        (expenses[i] + expenses[j] === 2020) {\n              return `${expenses[i]
        * expenses[j]}`;\n            }\n          }\n        }\n        return \"\";\n      }\n      partTwo():
        string {\n        const expenses = this.input.trimRight().split(\"\\n\").map((d)
        =&gt; parseInt(d));\n        for (let i = 0; i &lt; expenses.length; i++)
        {\n          for (let j = i + 1; j &lt; expenses.length; j++) {\n            for
        (let z = j + 1; z &lt; expenses.length; z++) {\n              if (expenses[i]
        + expenses[j] + expenses[z] === 2020) {\n                return `${expenses[i]
        * expenses[j] * expenses[z]}`;\n              }\n            }\n          }\n        }\n        return
        \"\";\n      }\n    }\n    \n    export default Day1;", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;h1&gt;Deno&lt;/h1&gt;\n\n&lt;p&gt;This uses the starter
        for Deno that I wrote &lt;a href=\"https://github.com/Mmarzex/advent-of-code-deno-starter\"&gt;here&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        Day from &amp;quot;./day.ts&amp;quot;;\n\nclass Day1 extends Day {\n  partOne():
        string {\n    const expenses = this.input.trimRight().split(&amp;quot;\\n&amp;quot;).map((d)
        =&amp;gt; parseInt(d));\n    for (let i = 0; i &amp;lt; expenses.length; i++)
        {\n      for (let j = i + 1; j &amp;lt; expenses.length; j++) {\n        if
        (expenses[i] + expenses[j] === 2020) {\n          return `${expenses[i] *
        expenses[j]}`;\n        }\n      }\n    }\n    return &amp;quot;&amp;quot;;\n  }\n  partTwo():
        string {\n    const expenses = this.input.trimRight().split(&amp;quot;\\n&amp;quot;).map((d)
        =&amp;gt; parseInt(d));\n    for (let i = 0; i &amp;lt; expenses.length; i++)
        {\n      for (let j = i + 1; j &amp;lt; expenses.length; j++) {\n        for
        (let z = j + 1; z &amp;lt; expenses.length; z++) {\n          if (expenses[i]
        + expenses[j] + expenses[z] === 2020) {\n            return `${expenses[i]
        * expenses[j] * expenses[z]}`;\n          }\n        }\n      }\n    }\n    return
        &amp;quot;&amp;quot;;\n  }\n}\n\nexport default Day1;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8dglu/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8dglu", "created":
        1606800194.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606801508.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8dil8", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "MasterMedo",
        "can_mod_post": false, "created_utc": 1606800236.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_xdp9x", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**python** **EDITED**, initially using `bisect`...\n\n    with open(''../input/1.txt'',
        ''r'') as f:\n        data = [int(line) for line in f]\n    \n    for i, x
        in enumerate(data):\n        for j, y in enumerate(data[i:], 1):\n            if
        x + y == 2020:\n                part1 = x * y\n            for k, z in enumerate(data[i+j:]):\n                if
        x + y + z == 2020:\n                    part2 = x * y * z\n    \n    print(part1)\n    print(part2)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;python&lt;/strong&gt;
        &lt;strong&gt;EDITED&lt;/strong&gt;, initially using &lt;code&gt;bisect&lt;/code&gt;...&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with
        open(&amp;#39;../input/1.txt&amp;#39;, &amp;#39;r&amp;#39;) as f:\n    data
        = [int(line) for line in f]\n\nfor i, x in enumerate(data):\n    for j, y
        in enumerate(data[i:], 1):\n        if x + y == 2020:\n            part1 =
        x * y\n        for k, z in enumerate(data[i+j:]):\n            if x + y +
        z == 2020:\n                part2 = x * y * z\n\nprint(part1)\nprint(part2)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8dil8/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8dil8", "created":
        1606800236.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 4, "name": "t1_ge8ex7j", "id": "ge8ex7j", "parent_id":
        "t1_ge8dil8", "depth": 1, "children": ["ge8ex7j"]}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8djkf", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_ge8djkf", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8djkf/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606800257.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606800257.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8mkve",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606807774.0, "send_replies": true,
        "parent_id": "t1_ge8djkf", "score": 1, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "&gt; # Top-level posts in Solution Megathreads are for *code solutions* only.\n\nThis
        is a top-level post, so please edit your post and share your code/repo/solution
        or, if you haven''t finished the puzzle yet, you can always create your own
        thread and make sure to flair it with `Help`.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": true, "body_html": "&lt;div
        class=\"md\"&gt;&lt;blockquote&gt;\n&lt;h1&gt;Top-level posts in Solution
        Megathreads are for &lt;em&gt;code solutions&lt;/em&gt; only.&lt;/h1&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This
        is a top-level post, so please edit your post and share your code/repo/solution
        or, if you haven&amp;#39;t finished the puzzle yet, you can always create
        your own thread and make sure to flair it with &lt;code&gt;Help&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8mkve/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8mkve", "created":
        1606807774.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "more", "data": {"count": 1, "name": "t1_ge8e7bi", "id": "ge8e7bi",
        "parent_id": "t1_ge8djkf", "depth": 1, "children": ["ge8e7bi"]}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8dq4x",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "leagcy",
        "can_mod_post": false, "created_utc": 1606800395.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_oxh3f", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python 531/430\n\n    partone = 0\n    parttwo = 1\n    f = open(\"input.txt\",
        \"r\")\n    entries = []\n    for lines in f:\n        entries.append(int(lines))    \n    for
        i in range(len(entries)):\n        for j in range(i+1,len(entries)):\n            if
        partone:\n                if entries[i] + entries[j] == 2020:\n                    print
        (entries[i] * entries[j])\n            elif parttwo:\n                for
        k in range(j+1,len(entries)):\n                    if entries[i] + entries[j]
        + entries[k] == 2020:\n                        print (entries[i] * entries[j]
        * entries[k])\n                        break", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Python 531/430&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;partone
        = 0\nparttwo = 1\nf = open(&amp;quot;input.txt&amp;quot;, &amp;quot;r&amp;quot;)\nentries
        = []\nfor lines in f:\n    entries.append(int(lines))    \nfor i in range(len(entries)):\n    for
        j in range(i+1,len(entries)):\n        if partone:\n            if entries[i]
        + entries[j] == 2020:\n                print (entries[i] * entries[j])\n        elif
        parttwo:\n            for k in range(j+1,len(entries)):\n                if
        entries[i] + entries[j] + entries[k] == 2020:\n                    print (entries[i]
        * entries[j] * entries[k])\n                    break\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8dq4x/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8dq4x", "created":
        1606800395.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1607047883.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8drnn", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "mariotacke",
        "can_mod_post": false, "created_utc": 1606800425.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_8lk32w", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Node.js/Javascript ([repository](https://github.com/mariotacke/advent-of-code-2020/tree/master/day-01-report-repair))
        (338 / 2231)\n\nPart 1\n\n    module.exports\u00a0=\u00a0(input)\u00a0=&gt;\u00a0{  \n      const
        numbers\u00a0=\u00a0input.split(''\\\\n'').map((line)\u00a0=&gt; parseInt(line));  \n\n      for\u00a0(let
        i\u00a0=\u00a00;\u00a0i\u00a0&lt;\u00a0numbers.length;\u00a0i++)\u00a0{  \n        for\u00a0(let
        j\u00a0=\u00a00;\u00a0j\u00a0&lt;\u00a0numbers.length;\u00a0j++)\u00a0{\n          if\u00a0(numbers\\[i\\]\u00a0+\u00a0numbers\\[j\\]\u00a0===\u00a02020)\u00a0{  \n            return
        numbers\\[i\\]\u00a0\\*\u00a0numbers\\[j\\];  \n    \u00a0\u00a0    }  \n        }  \n    \u00a0\u00a0}  \n    };  \n\nPart
        2\n\n    module.exports = (input) =&gt; {\n      const numbers = input.split(''\\n'').map((line)
        =&gt; parseInt(line));\n    \n      for (let i = 0; i &lt; numbers.length;
        i++) {\n        for (let j = 0; j &lt; numbers.length; j++) {\n          for
        (let k = 0; k &lt; numbers.length; k++) {\n            if (numbers[i] + numbers[j]
        + numbers[k] === 2020) {\n              return numbers[i] * numbers[j] * numbers[k];\n            }\n          }\n        }\n      }\n    };",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Node.js/Javascript (&lt;a
        href=\"https://github.com/mariotacke/advent-of-code-2020/tree/master/day-01-report-repair\"&gt;repository&lt;/a&gt;)
        (338 / 2231)&lt;/p&gt;\n\n&lt;p&gt;Part 1&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;module.exports\u00a0=\u00a0(input)\u00a0=&amp;gt;\u00a0{  \n  const
        numbers\u00a0=\u00a0input.split(&amp;#39;\\\\n&amp;#39;).map((line)\u00a0=&amp;gt;
        parseInt(line));  \n\n  for\u00a0(let i\u00a0=\u00a00;\u00a0i\u00a0&amp;lt;\u00a0numbers.length;\u00a0i++)\u00a0{  \n    for\u00a0(let
        j\u00a0=\u00a00;\u00a0j\u00a0&amp;lt;\u00a0numbers.length;\u00a0j++)\u00a0{\n      if\u00a0(numbers\\[i\\]\u00a0+\u00a0numbers\\[j\\]\u00a0===\u00a02020)\u00a0{  \n        return
        numbers\\[i\\]\u00a0\\*\u00a0numbers\\[j\\];  \n\u00a0\u00a0    }  \n    }  \n\u00a0\u00a0}  \n};  \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;module.exports = (input) =&amp;gt; {\n  const
        numbers = input.split(&amp;#39;\\n&amp;#39;).map((line) =&amp;gt; parseInt(line));\n\n  for
        (let i = 0; i &amp;lt; numbers.length; i++) {\n    for (let j = 0; j &amp;lt;
        numbers.length; j++) {\n      for (let k = 0; k &amp;lt; numbers.length; k++)
        {\n        if (numbers[i] + numbers[j] + numbers[k] === 2020) {\n          return
        numbers[i] * numbers[j] * numbers[k];\n        }\n      }\n    }\n  }\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8drnn/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8drnn", "created":
        1606800425.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8dw1k",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Rascal_Two",
        "can_mod_post": false, "created_utc": 1606800518.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_kxv37", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python 3. 271/651.\n\nInitial code was quite verbose, but optimizes pretty
        well - could''ve gotten better in part 2 had I spent less time scrambling
        over the site crash and more time optimizing, but could''ve been worse!\n\n#
        Initial\n\n    def solve_one(data):\n    \tnums = list(map(int, data.split(''\\n'')))\n    \tfor
        i in range(len(nums)):\n    \t\tfor j in range(len(nums)):\n    \t\t\tif i
        == j:\n    \t\t\t\tcontinue\n    \t\t\tif nums[i] + nums[j] == 2020:\n    \t\t\t\treturn
        nums[i] * nums[j]\n    \n    \n    def solve_two(data):\n    \tnums = list(map(int,
        data.split(''\\n'')))\n    \tfor i in range(len(nums)):\n    \t\tfor j in
        range(len(nums)):\n    \t\t\tfor k in range(len(nums)):\n    \t\t\t\tif nums[i]
        == nums[j] or nums[i] == nums[k] or nums[j] == nums[k]:\n    \t\t\t\t\tcontinue\n    \t\t\t\tif
        nums[i] + nums[j] + nums[k] == 2020:\n    \t\t\t\t\treturn nums[i] * nums[j]
        * nums[k]\n    \n# Optimized\n\n    def solve(data: str, length: int) -&gt;
        Optional[int]:\n    \tfor items in itertools.combinations(map(int, data.split(''\\n'')),
        length):\n    \t\tif sum(items) == 2020:\n    \t\t\treturn math.prod(items)\n    \n    def
        solve_one(data: str):\n    \treturn solve(data, 2)\n    \n    def solve_two(data:
        str):\n    \treturn solve(data, 3)", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Python 3. 271/651.&lt;/p&gt;\n\n&lt;p&gt;Initial
        code was quite verbose, but optimizes pretty well - could&amp;#39;ve gotten
        better in part 2 had I spent less time scrambling over the site crash and
        more time optimizing, but could&amp;#39;ve been worse!&lt;/p&gt;\n\n&lt;h1&gt;Initial&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        solve_one(data):\n    nums = list(map(int, data.split(&amp;#39;\\n&amp;#39;)))\n    for
        i in range(len(nums)):\n        for j in range(len(nums)):\n            if
        i == j:\n                continue\n            if nums[i] + nums[j] == 2020:\n                return
        nums[i] * nums[j]\n\n\ndef solve_two(data):\n    nums = list(map(int, data.split(&amp;#39;\\n&amp;#39;)))\n    for
        i in range(len(nums)):\n        for j in range(len(nums)):\n            for
        k in range(len(nums)):\n                if nums[i] == nums[j] or nums[i] ==
        nums[k] or nums[j] == nums[k]:\n                    continue\n                if
        nums[i] + nums[j] + nums[k] == 2020:\n                    return nums[i] *
        nums[j] * nums[k]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Optimized&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        solve(data: str, length: int) -&amp;gt; Optional[int]:\n    for items in itertools.combinations(map(int,
        data.split(&amp;#39;\\n&amp;#39;)), length):\n        if sum(items) == 2020:\n            return
        math.prod(items)\n\ndef solve_one(data: str):\n    return solve(data, 2)\n\ndef
        solve_two(data: str):\n    return solve(data, 3)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8dw1k/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8dw1k", "created":
        1606800518.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8e5vy",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Mikityg",
        "can_mod_post": false, "created_utc": 1606800729.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_5zmf0", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Part 1, elixir. My brain is stuck in map mode and this is the first thing
        that came to mind.\n\n    [a, b | _] = \n        Enum.map(input, fn x -&gt;
        2020 - x end) \n        |&gt; Enum.filter(fn x -&gt; Enum.member?(input, x)
        end)\n    \n    a * b\n\ncouldn''t figure how to do part 2 in a similar way.
        I''m enjoying AOC in a new language though!", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Part 1, elixir. My brain is stuck in map mode and
        this is the first thing that came to mind.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[a,
        b | _] = \n    Enum.map(input, fn x -&amp;gt; 2020 - x end) \n    |&amp;gt;
        Enum.filter(fn x -&amp;gt; Enum.member?(input, x) end)\n\na * b\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;couldn&amp;#39;t
        figure how to do part 2 in a similar way. I&amp;#39;m enjoying AOC in a new
        language though!&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8e5vy/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8e5vy", "created":
        1606800729.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8fjxh",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "omginbd",
        "can_mod_post": false, "created_utc": 1606801818.0, "send_replies": true,
        "parent_id": "t1_ge8e5vy", "score": 2, "author_fullname": "t2_5uht8", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I also did elixir, if you want a reference for what I did.\nhttps://old.reddit.com/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8dgjc/\n\nAlso,
        Enum.filter + Enum.member? = Enum.find", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;I also did elixir, if you want a reference for what
        I did.\n&lt;a href=\"https://old.reddit.com/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8dgjc/\"&gt;https://old.reddit.com/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8dgjc/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Also,
        Enum.filter + Enum.member? = Enum.find&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8fjxh/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8fjxh", "created": 1606801818.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 2, "name":
        "t1_ge8h79p", "id": "ge8h79p", "parent_id": "t1_ge8fjxh", "depth": 2, "children":
        ["ge8h79p"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8edqs", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "PendragonDaGreat",
        "can_mod_post": false, "created_utc": 1606800897.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_7nqwk", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "C#/CSharp\nRuns in `nlog(n)+n` for part 1 if I understand it right. Uses
        the helper functions from This repo: https://github.com/sindrekjr/AdventOfCodeBase\n\n\n    using
        System.Collections.Generic;\n    using AdventOfCode.UserClasses;\n    \n    namespace
        AdventOfCode.Solutions.Year2020\n    {\n    \n        class Day01 : ASolution\n        {\n            List&lt;int&gt;
        costs;\n    \n            public Day01() : base(01, 2020, \"\")\n            {\n                costs
        = new List&lt;int&gt;(Utilities.ToIntArray(Input, \"\\n\"));\n                costs.Sort();\n    \n                \n            }\n    \n            protected
        override string SolvePartOne()\n            {\n                int i = 0;\n                int
        j = 1;\n    \n                while(true)\n                {\n                    int
        test = costs[i] + costs[^j];\n                    if (test == 2020)\n                    {\n                        break;\n                    }
        else if (test &gt; 2020)\n                    {\n                        j++;\n                    }
        else if(test &lt;2020)\n                    {\n                        i++;\n                    }\n                }\n                return
        \"\" + (costs[i] * costs[^j]);\n            }\n    \n            protected
        override string SolvePartTwo()\n            {\n                for(int i =
        0; i &lt; costs.Count; i++)\n                {\n                    for(int
        j = i+1; j&lt;costs.Count; j++)\n                    {\n                        for
        (int k = j+1; k&lt;costs.Count; k++)\n                        {\n                            if
        (costs[i] + costs[j] + costs[k] == 2020) return (costs[i] * costs[j] * costs[k]).ToString();\n                        }\n                    }\n                }\n                \n    \n                return
        null;\n            }\n        }\n    }", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;C#/CSharp\nRuns in &lt;code&gt;nlog(n)+n&lt;/code&gt;
        for part 1 if I understand it right. Uses the helper functions from This repo:
        &lt;a href=\"https://github.com/sindrekjr/AdventOfCodeBase\"&gt;https://github.com/sindrekjr/AdventOfCodeBase&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;using
        System.Collections.Generic;\nusing AdventOfCode.UserClasses;\n\nnamespace
        AdventOfCode.Solutions.Year2020\n{\n\n    class Day01 : ASolution\n    {\n        List&amp;lt;int&amp;gt;
        costs;\n\n        public Day01() : base(01, 2020, &amp;quot;&amp;quot;)\n        {\n            costs
        = new List&amp;lt;int&amp;gt;(Utilities.ToIntArray(Input, &amp;quot;\\n&amp;quot;));\n            costs.Sort();\n\n\n        }\n\n        protected
        override string SolvePartOne()\n        {\n            int i = 0;\n            int
        j = 1;\n\n            while(true)\n            {\n                int test
        = costs[i] + costs[^j];\n                if (test == 2020)\n                {\n                    break;\n                }
        else if (test &amp;gt; 2020)\n                {\n                    j++;\n                }
        else if(test &amp;lt;2020)\n                {\n                    i++;\n                }\n            }\n            return
        &amp;quot;&amp;quot; + (costs[i] * costs[^j]);\n        }\n\n        protected
        override string SolvePartTwo()\n        {\n            for(int i = 0; i &amp;lt;
        costs.Count; i++)\n            {\n                for(int j = i+1; j&amp;lt;costs.Count;
        j++)\n                {\n                    for (int k = j+1; k&amp;lt;costs.Count;
        k++)\n                    {\n                        if (costs[i] + costs[j]
        + costs[k] == 2020) return (costs[i] * costs[j] * costs[k]).ToString();\n                    }\n                }\n            }\n\n\n            return
        null;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8edqs/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8edqs", "created": 1606800897.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 3, "name":
        "t1_ge8u9xa", "id": "ge8u9xa", "parent_id": "t1_ge8edqs", "depth": 1, "children":
        ["ge8u9xa"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8eiis", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Gurrewe",
        "can_mod_post": false, "created_utc": 1606801001.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_5308z", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Go. 632 / 476.\n\n    func solve(in string) {\n    \tvar ii []int\n    \tfor
        _, row := range strings.Split(strings.TrimSpace(in), \"\\n\") {\n    \t\ti,
        err := strconv.Atoi(row)\n    \t\tif err != nil {\n    \t\t\tpanic(err)\n    \t\t}\n    \t\tii
        = append(ii, i)\n    \t}\n    \n    \tfor k, v := range ii {\n    \t\tfor
        _, vv := range ii[k:] {\n    \t\t\tif v+vv == 2020 {\n    \t\t\t\tfmt.Println(v
        * vv)\n    \t\t\t}\n    \t\t}\n    \t}\n    \n    \tfor k, v := range ii {\n    \t\tfor
        kk, vv := range ii[k:] {\n    \t\t\tfor _, vvv := range ii[k+kk:] {\n    \t\t\t\tif
        v+vv+vvv == 2020 {\n    \t\t\t\t\tfmt.Println(v * vv * vvv)\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t}\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Go. 632 / 476.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func
        solve(in string) {\n    var ii []int\n    for _, row := range strings.Split(strings.TrimSpace(in),
        &amp;quot;\\n&amp;quot;) {\n        i, err := strconv.Atoi(row)\n        if
        err != nil {\n            panic(err)\n        }\n        ii = append(ii, i)\n    }\n\n    for
        k, v := range ii {\n        for _, vv := range ii[k:] {\n            if v+vv
        == 2020 {\n                fmt.Println(v * vv)\n            }\n        }\n    }\n\n    for
        k, v := range ii {\n        for kk, vv := range ii[k:] {\n            for
        _, vvv := range ii[k+kk:] {\n                if v+vv+vvv == 2020 {\n                    fmt.Println(v
        * vv * vvv)\n                }\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8eiis/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8eiis", "created":
        1606801001.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8eiq2",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "aceshades",
        "can_mod_post": false, "created_utc": 1606801005.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_8l85t", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Rust**\n                \n    fn main() {\n        let values: Vec&lt;i32&gt;
        = read_input_as_lines(\"2020/day01/src/input.txt\")\n            .into_iter()\n            .map(|val|
        val.parse::&lt;i32&gt;().unwrap())\n            .collect();    println!(\"Part
        1: {}\", two_sum(&amp;values, 2020).unwrap());\n        println!(\"Part 2:
        {}\", three_sum(&amp;values, 2020).unwrap());\n    }\n    \n    fn two_sum(values:
        &amp;[i32], target: i32) -&gt; Option&lt;i32&gt; {\n        let mut previous_values:
        HashSet&lt;i32&gt; = HashSet::new();\n        for value in values {\n            let
        diff = target - value;\n            if previous_values.contains(&amp;diff)
        {\n                return Some(value * diff);\n            }\n            previous_values.insert(*value);\n        }\n        None\n    }\n    \n    fn
        three_sum(values: &amp;[i32], target: i32) -&gt; Option&lt;i32&gt; {\n        for
        i in 0..values.len()-2 {\n            let num = values[i];\n            if
        let Some(two_sum_result) = two_sum(&amp;values[i+1..], target - num) {\n                return
        Some(num * two_sum_result);\n            }\n        }\n        None\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fn
        main() {\n    let values: Vec&amp;lt;i32&amp;gt; = read_input_as_lines(&amp;quot;2020/day01/src/input.txt&amp;quot;)\n        .into_iter()\n        .map(|val|
        val.parse::&amp;lt;i32&amp;gt;().unwrap())\n        .collect();    println!(&amp;quot;Part
        1: {}&amp;quot;, two_sum(&amp;amp;values, 2020).unwrap());\n    println!(&amp;quot;Part
        2: {}&amp;quot;, three_sum(&amp;amp;values, 2020).unwrap());\n}\n\nfn two_sum(values:
        &amp;amp;[i32], target: i32) -&amp;gt; Option&amp;lt;i32&amp;gt; {\n    let
        mut previous_values: HashSet&amp;lt;i32&amp;gt; = HashSet::new();\n    for
        value in values {\n        let diff = target - value;\n        if previous_values.contains(&amp;amp;diff)
        {\n            return Some(value * diff);\n        }\n        previous_values.insert(*value);\n    }\n    None\n}\n\nfn
        three_sum(values: &amp;amp;[i32], target: i32) -&amp;gt; Option&amp;lt;i32&amp;gt;
        {\n    for i in 0..values.len()-2 {\n        let num = values[i];\n        if
        let Some(two_sum_result) = two_sum(&amp;amp;values[i+1..], target - num) {\n            return
        Some(num * two_sum_result);\n        }\n    }\n    None\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8eiq2/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8eiq2", "created":
        1606801005.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606828617.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8em6p", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "tslater2006",
        "can_mod_post": false, "created_utc": 1606801080.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_9q53a", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "C#, using a helper class for combinations\n\nPart 1:\n\n            IEnumerable&lt;long[]&gt;
        combos = Combinations.GetCombinations(_input, 2);\n            var matchingPair
        = combos.Where(l =&gt; l.Sum() == 2020).First();\n            return matchingPair.Aggregate((long)1,
        (a, b) =&gt; a * b).ToString();\n\nPart 2:\n\n            IEnumerable&lt;long[]&gt;
        combos = Combinations.GetCombinations(_input, 3);\n            var matchingPair
        = combos.Where(l =&gt; l.Sum() == 2020).First();\n            return matchingPair.Aggregate((long)1,
        (a, b) =&gt; a * b).ToString();\n\n[Combination class](https://github.com/tslater2006/AdventOfCode2020/blob/main/AdventOfCode/Utilities/Combinations.cs)\n\nEdit:
        [More Performant Version](https://topaz.github.io/paste/#XQAAAQBNBwAAAAAAAAAQaJgOpjQ2Cmmd6Y6eO20ly+tJFH66D/sqW7lKXCK6SfnFfyy6sV5MaJZmNmGsCOeUZ3N2YBQyoV9viYMxrdOmsaKNCG/Jl7YAURq7M+d1qtS6Cm7aqqjAhcCS3SQphSrMbewuRq1jzdILN8OhxDdqSvtR21HyW5CZQloE5cLO5A20BrxWTMWWMQX07N4iU3TN1SVQdmO+HV5z6xoAl+4cCh0eEMqDc0n9PCCa2IuemCyfyHbbys+HVTrdFNW9j47mAQ5ZOZ9z5cP8+fr+f2kTFsipSfqMJxoNjnJZRyBiQhtr8S253zhnFIcuMIHVKD6Fdx9ScX1mO6qUgYou4Mn1JbUdhetF9K8Bujkit+hiji1mNJ2uUEeh8ukMFNtNcxj9YIkHwbBOWNqnig2A0EbS0p2CPXKs8blTUC+vMdZ26ylr8lKaJmdzsut1c/0zcyx7SmrTQVwoynuEmfC7uD0EF6wLHOx4fuXxaV3Ixyz1hTSRdR0Wn8AMWZMhq9p9IBT3MFIPQQshf5M4kkVXBcMR+/HrH5hKPzQFBfoeNDofd8LzpECtmU8/8hO41//3mMyEF/aM6ZZOUbSouqePOvd/wrCoVh1PfdhLer/EY7UQo4bD1l021Hl44kljnZQqkU8F29dTlGbQClAz6zEwbjvLrj1wH2cCyhaGElewdO1hGU8Z9qs17aU+2c3SRF6B/1qdhwA=)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C#, using a helper class
        for combinations&lt;/p&gt;\n\n&lt;p&gt;Part 1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;        IEnumerable&amp;lt;long[]&amp;gt;
        combos = Combinations.GetCombinations(_input, 2);\n        var matchingPair
        = combos.Where(l =&amp;gt; l.Sum() == 2020).First();\n        return matchingPair.Aggregate((long)1,
        (a, b) =&amp;gt; a * b).ToString();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;        IEnumerable&amp;lt;long[]&amp;gt;
        combos = Combinations.GetCombinations(_input, 3);\n        var matchingPair
        = combos.Where(l =&amp;gt; l.Sum() == 2020).First();\n        return matchingPair.Aggregate((long)1,
        (a, b) =&amp;gt; a * b).ToString();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/tslater2006/AdventOfCode2020/blob/main/AdventOfCode/Utilities/Combinations.cs\"&gt;Combination
        class&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Edit: &lt;a href=\"https://topaz.github.io/paste/#XQAAAQBNBwAAAAAAAAAQaJgOpjQ2Cmmd6Y6eO20ly+tJFH66D/sqW7lKXCK6SfnFfyy6sV5MaJZmNmGsCOeUZ3N2YBQyoV9viYMxrdOmsaKNCG/Jl7YAURq7M+d1qtS6Cm7aqqjAhcCS3SQphSrMbewuRq1jzdILN8OhxDdqSvtR21HyW5CZQloE5cLO5A20BrxWTMWWMQX07N4iU3TN1SVQdmO+HV5z6xoAl+4cCh0eEMqDc0n9PCCa2IuemCyfyHbbys+HVTrdFNW9j47mAQ5ZOZ9z5cP8+fr+f2kTFsipSfqMJxoNjnJZRyBiQhtr8S253zhnFIcuMIHVKD6Fdx9ScX1mO6qUgYou4Mn1JbUdhetF9K8Bujkit+hiji1mNJ2uUEeh8ukMFNtNcxj9YIkHwbBOWNqnig2A0EbS0p2CPXKs8blTUC+vMdZ26ylr8lKaJmdzsut1c/0zcyx7SmrTQVwoynuEmfC7uD0EF6wLHOx4fuXxaV3Ixyz1hTSRdR0Wn8AMWZMhq9p9IBT3MFIPQQshf5M4kkVXBcMR+/HrH5hKPzQFBfoeNDofd8LzpECtmU8/8hO41//3mMyEF/aM6ZZOUbSouqePOvd/wrCoVh1PfdhLer/EY7UQo4bD1l021Hl44kljnZQqkU8F29dTlGbQClAz6zEwbjvLrj1wH2cCyhaGElewdO1hGU8Z9qs17aU+2c3SRF6B/1qdhwA=\"&gt;More
        Performant Version&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8em6p/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8em6p", "created":
        1606801080.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 5, "name": "t1_ge8izf0", "id": "ge8izf0", "parent_id":
        "t1_ge8em6p", "depth": 1, "children": ["ge8izf0"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606801939.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8eqo4", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "keramitas",
        "can_mod_post": false, "created_utc": 1606801177.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_xzhypjk", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Welp that was kind of an underwhelming first day :p \n\nCheck out my solutions
        for [part 1](https://github.com/r0mainK/advent/blob/master/2020/01_part_1.py)
        and [part 2](https://github.com/r0mainK/advent/blob/master/2020/01_part_2.py)
        in Python if you care, I''m getting some coffee :D", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Welp that was kind of an underwhelming first day
        :p &lt;/p&gt;\n\n&lt;p&gt;Check out my solutions for &lt;a href=\"https://github.com/r0mainK/advent/blob/master/2020/01_part_1.py\"&gt;part
        1&lt;/a&gt; and &lt;a href=\"https://github.com/r0mainK/advent/blob/master/2020/01_part_2.py\"&gt;part
        2&lt;/a&gt; in Python if you care, I&amp;#39;m getting some coffee :D&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8eqo4/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8eqo4", "created":
        1606801177.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8et2j", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_ge8et2j", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8et2j/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606801228.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606801228.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge8etq5", "id": "ge8etq5", "parent_id":
        "t1_ge8et2j", "depth": 1, "children": ["ge8etq5"]}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606802015.0, "mod_reason_by": null,
        "banned_by": null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8f6p3", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Quick and dirty Scala ([github](https://github.com/bbstilson/adventofcode/blob/master/adventofcode/src/bbstilson/aoc2020/Day1.scala)).\n\n4th
        year''s the charm! Maybe I''ll make it to the end this time.", "awarders":
        [], "downs": 0, "author_flair_css_class": null, "name": "t1_ge8f6p3", "collapsed":
        false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Quick
        and dirty Scala (&lt;a href=\"https://github.com/bbstilson/adventofcode/blob/master/adventofcode/src/bbstilson/aoc2020/Day1.scala\"&gt;github&lt;/a&gt;).&lt;/p&gt;\n\n&lt;p&gt;4th
        year&amp;#39;s the charm! Maybe I&amp;#39;ll make it to the end this time.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8f6p3/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606801529.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606801529.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606801938.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8feyg", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "rise_majestic_hyena",
        "can_mod_post": false, "created_utc": 1606801708.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_5fvht0gn", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Racket:\n\n    #lang racket\n    \n    (define puzzle (map string-&gt;number
        (file-&gt;lines \"input\")))\n    \n    ;; part 1\n    (for* ([n (in-list
        puzzle)]\n           [m (in-list puzzle)])\n      (when (= (+ n m) 2020)\n        (printf
        \"~a * ~a = ~a \\n\" n m (* n m))))\n    \n    ;; part 2\n    (for* ([n (in-list
        puzzle)]\n           [m (in-list puzzle)]\n           [l (in-list puzzle)])\n      (when
        (= (+ n m l) 2020)\n        (printf \"~a * ~a * ~a = ~a \\n\" n m l (* n m))))\n\nEdit
        to add that `for*` is a macro that nests the loop variables, unlike `for`
        which has the loop variables iterate in parallel.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Racket:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#lang
        racket\n\n(define puzzle (map string-&amp;gt;number (file-&amp;gt;lines &amp;quot;input&amp;quot;)))\n\n;;
        part 1\n(for* ([n (in-list puzzle)]\n       [m (in-list puzzle)])\n  (when
        (= (+ n m) 2020)\n    (printf &amp;quot;~a * ~a = ~a \\n&amp;quot; n m (*
        n m))))\n\n;; part 2\n(for* ([n (in-list puzzle)]\n       [m (in-list puzzle)]\n       [l
        (in-list puzzle)])\n  (when (= (+ n m l) 2020)\n    (printf &amp;quot;~a *
        ~a * ~a = ~a \\n&amp;quot; n m l (* n m))))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Edit
        to add that &lt;code&gt;for*&lt;/code&gt; is a macro that nests the loop variables,
        unlike &lt;code&gt;for&lt;/code&gt; which has the loop variables iterate in
        parallel.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8feyg/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8feyg", "created":
        1606801708.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8uqpk",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "raevnos",
        "can_mod_post": false, "created_utc": 1606816034.0, "send_replies": true,
        "parent_id": "t1_ge8feyg", "score": 2, "author_fullname": "t2_3995k", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Racket has a `combinations` function that would be very useful.", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Racket has a &lt;code&gt;combinations&lt;/code&gt;
        function that would be very useful.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8uqpk/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8uqpk", "created": 1606816034.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": 1688362283.0, "mod_reason_by": null, "banned_by": null, "removal_reason":
        null, "link_id": "t3_k4e4lm", "author_flair_template_id": null, "likes": null,
        "replies": "", "user_reports": [], "saved": false, "id": "ge9evzf", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        "DELETED", "no_follow": true, "author": "[deleted]", "can_mod_post": false,
        "send_replies": true, "parent_id": "t1_ge8uqpk", "score": 2, "approved_by":
        null, "mod_note": null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body":
        "[removed]", "awarders": [], "downs": 0, "author_flair_css_class": null, "name":
        "t1_ge9evzf", "collapsed": true, "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;[removed]&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9evzf/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606833179.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606833179.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9nbyo",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "raevnos",
        "can_mod_post": false, "created_utc": 1606837648.0, "send_replies": true,
        "parent_id": "t1_ge9evzf", "score": 2, "author_fullname": "t2_3995k", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I ended up writing my own version of that for chicken.", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;I ended up writing my own version of that
        for chicken.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9nbyo/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9nbyo", "created":
        1606837648.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_gesc915", "id": "gesc915", "parent_id":
        "t1_ge9evzf", "depth": 3, "children": ["gesc915"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8ff2d",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "iamnguele",
        "can_mod_post": false, "created_utc": 1606801711.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_zpobo", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Golang.\n\nWent the brutal way as it might be one of the rare days where
        I can get away with it.\n\n    func (d *Computer) Part2(input days.Input)
        (days.Result, error) {\n    \tintinput := []int{}\n    \n    \tfor _, i :=
        range input {\n    \t\tintval, _ := strconv.Atoi(i)\n    \t\tintinput = append(intinput,
        intval)\n    \t}\n    \n    \tfor _, i := range intinput {\n    \t\tfor _,
        j := range intinput {\n    \t\t\tif i == j {\n    \t\t\t\tcontinue\n    \t\t\t}\n    \n    \t\t\tfor
        _, k := range intinput {\n    \t\t\t\tif k == i {\n    \t\t\t\t\tcontinue\n    \t\t\t\t}\n    \n    \t\t\t\tif
        k == j {\n    \t\t\t\t\tcontinue\n    \t\t\t\t}\n    \n    \t\t\t\tif i+j+k
        == 2020 {\n    \t\t\t\t\treturn days.Result(fmt.Sprint(i * j * k)), nil\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t}\n    \n    \treturn
        \"\", fmt.Errorf(\"not found\")\n    }", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Golang.&lt;/p&gt;\n\n&lt;p&gt;Went the brutal way
        as it might be one of the rare days where I can get away with it.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func
        (d *Computer) Part2(input days.Input) (days.Result, error) {\n    intinput
        := []int{}\n\n    for _, i := range input {\n        intval, _ := strconv.Atoi(i)\n        intinput
        = append(intinput, intval)\n    }\n\n    for _, i := range intinput {\n        for
        _, j := range intinput {\n            if i == j {\n                continue\n            }\n\n            for
        _, k := range intinput {\n                if k == i {\n                    continue\n                }\n\n                if
        k == j {\n                    continue\n                }\n\n                if
        i+j+k == 2020 {\n                    return days.Result(fmt.Sprint(i * j *
        k)), nil\n                }\n            }\n        }\n    }\n\n    return
        &amp;quot;&amp;quot;, fmt.Errorf(&amp;quot;not found&amp;quot;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8ff2d/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8ff2d", "created":
        1606801711.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8fij5",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "jwise00",
        "can_mod_post": false, "created_utc": 1606801788.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_167ae7", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Lua.  50/374.  I''m streaming every day this year (though I''ll be a minute
        or two late on Thursdays); here''s the video of my solve (contains strong
        language): https://www.youtube.com/watch?v=3T0qwXfhQ1g\n\nSource: https://github.com/jwise/aoc/blob/master/2020/1.lua",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Lua.  50/374.  I&amp;#39;m
        streaming every day this year (though I&amp;#39;ll be a minute or two late
        on Thursdays); here&amp;#39;s the video of my solve (contains strong language):
        &lt;a href=\"https://www.youtube.com/watch?v=3T0qwXfhQ1g\"&gt;https://www.youtube.com/watch?v=3T0qwXfhQ1g&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Source:
        &lt;a href=\"https://github.com/jwise/aoc/blob/master/2020/1.lua\"&gt;https://github.com/jwise/aoc/blob/master/2020/1.lua&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8fij5/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8fij5", "created":
        1606801788.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8mw9b",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606808068.0, "send_replies": true,
        "parent_id": "t1_ge8fij5", "score": 1, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "&gt; I''m streaming every day this year (though I''ll be a minute or two
        late on Thursdays); here''s the video of my solve (contains strong language):
        https://www.youtube.com/watch?v=3T0qwXfhQ1g\n\nAdded you to our [list of streamers](https://www.reddit.com/r/adventofcode/wiki/streamers)
        in the wiki!", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": true, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I&amp;#39;m
        streaming every day this year (though I&amp;#39;ll be a minute or two late
        on Thursdays); here&amp;#39;s the video of my solve (contains strong language):
        &lt;a href=\"https://www.youtube.com/watch?v=3T0qwXfhQ1g\"&gt;https://www.youtube.com/watch?v=3T0qwXfhQ1g&lt;/a&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Added
        you to our &lt;a href=\"https://www.reddit.com/r/adventofcode/wiki/streamers\"&gt;list
        of streamers&lt;/a&gt; in the wiki!&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8mw9b/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8mw9b", "created": 1606808068.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": "moderator"}}, {"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1,
        "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8ft9b",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Intro245",
        "can_mod_post": false, "created_utc": 1606802026.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_1gh69k6q", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python. Initial solution, part 1:\n\n    for a in V:    # V is a list of
        the entries, as integers\n        for b in V:\n            if a+b==2020:\n                ans=a*b\n\nPart
        2:\n\n    for a in V:\n        for b in V:\n            for c in V:\n                if
        a+b+c==2020:\n                    ans=a*b*c\n\n[Cleaned up solution, using
        `itertools.combinations`, on GitHub.](https://github.com/LukasGelbmann/Advent-of-Code/blob/master/advent2020/d01_report_repair.py)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python. Initial solution,
        part 1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for a in V:    # V is a list of
        the entries, as integers\n    for b in V:\n        if a+b==2020:\n            ans=a*b\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for a in V:\n    for b in V:\n        for
        c in V:\n            if a+b+c==2020:\n                ans=a*b*c\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/LukasGelbmann/Advent-of-Code/blob/master/advent2020/d01_report_repair.py\"&gt;Cleaned
        up solution, using &lt;code&gt;itertools.combinations&lt;/code&gt;, on GitHub.&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8ft9b/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8ft9b", "created":
        1606802026.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606812191.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8g4iv", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Markavian",
        "can_mod_post": false, "created_utc": 1606802280.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_7uy5y", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Edit: Node JS solution, ported to JS in the Browser to make a viewer\n\n*beep
        boop* not fast enough for the leaderboard, been making a bar chart visualisation
        for the data:\n- https://johnbeech.github.io/advent-of-code-2020/solutions/day1/viewer.html",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Edit: Node JS solution,
        ported to JS in the Browser to make a viewer&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;beep
        boop&lt;/em&gt; not fast enough for the leaderboard, been making a bar chart
        visualisation for the data:\n- &lt;a href=\"https://johnbeech.github.io/advent-of-code-2020/solutions/day1/viewer.html\"&gt;https://johnbeech.github.io/advent-of-code-2020/solutions/day1/viewer.html&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8g4iv/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8g4iv", "created":
        1606802280.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8n485",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606808274.0, "send_replies": true,
        "parent_id": "t1_ge8g4iv", "score": 1, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Noice.  What language did you use, looks like JavaScript of some sort?",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        true, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Noice.  What language
        did you use, looks like JavaScript of some sort?&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8n485/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8n485", "created":
        1606808274.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8nmrt", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Markavian",
        "can_mod_post": false, "created_utc": 1606808748.0, "send_replies": true,
        "parent_id": "t1_ge8n485", "score": 2, "author_fullname": "t2_7uy5y", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Thanks! Solved locally using node js, then copied the solution into the browser
        and used Vue.js, axios, HTML, CSS to render the bar chart.", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks! Solved locally using node js, then
        copied the solution into the browser and used Vue.js, axios, HTML, CSS to
        render the bar chart.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8nmrt/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8nmrt", "created":
        1606808748.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8gd8r",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "TallPeppermintMocha",
        "can_mod_post": false, "created_utc": 1606802474.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_jytyf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python. Really excited for something happy to end this year with.\n\n    raw
        = puzzle.input_data\n    data = [int(i) for i in raw.splitlines()]\n\n    for
        i in range(len(data)):\n        for j in range(i+1, len(data)):\n            if
        data[i]+data[j] == 2020:\n                part_a = data[i]*data[j]\n                print(''Part
        A: '', part_a)\n            for k in range(j+1, len(data)):\n                if
        data[i]+data[j]+data[k] == 2020:\n                    part_b = data[i]*data[j]*data[k]\n                    print(''Part
        B:'', part_b)", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python.
        Really excited for something happy to end this year with.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;raw
        = puzzle.input_data\ndata = [int(i) for i in raw.splitlines()]\n\nfor i in
        range(len(data)):\n    for j in range(i+1, len(data)):\n        if data[i]+data[j]
        == 2020:\n            part_a = data[i]*data[j]\n            print(&amp;#39;Part
        A: &amp;#39;, part_a)\n        for k in range(j+1, len(data)):\n            if
        data[i]+data[j]+data[k] == 2020:\n                part_b = data[i]*data[j]*data[k]\n                print(&amp;#39;Part
        B:&amp;#39;, part_b)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8gd8r/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8gd8r", "created": 1606802474.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "ge8gn6r", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "sakisan_be", "can_mod_post": false, "created_utc":
        1606802699.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_kf762", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "# Haskell\n\n    import
        Control.Applicative\n    \n    main :: IO ()\n    main = do\n        input
        &lt;- readFile \"Day01.txt\"\n        let numbers = map read $ lines input\n        putStrLn
        $ show $ solve1 numbers\n        putStrLn $ show $ solve2 numbers\n    \n    solve1
        numbers = x * y\n        where (x,y) = head $\n                    filter
        (\\(a,b) -&gt; a + b == 2020) $\n                    liftA2 (,) numbers numbers
        \n    \n    solve2 numbers = x * y * z\n        where (x,y,z) = head $\n                    filter
        (\\(a,b,c) -&gt; a + b + c == 2020) $\n                    liftA3 (,,) numbers
        numbers numbers", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Haskell&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        Control.Applicative\n\nmain :: IO ()\nmain = do\n    input &amp;lt;- readFile
        &amp;quot;Day01.txt&amp;quot;\n    let numbers = map read $ lines input\n    putStrLn
        $ show $ solve1 numbers\n    putStrLn $ show $ solve2 numbers\n\nsolve1 numbers
        = x * y\n    where (x,y) = head $\n                filter (\\(a,b) -&amp;gt;
        a + b == 2020) $\n                liftA2 (,) numbers numbers \n\nsolve2 numbers
        = x * y * z\n    where (x,y,z) = head $\n                filter (\\(a,b,c)
        -&amp;gt; a + b + c == 2020) $\n                liftA3 (,,) numbers numbers
        numbers\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8gn6r/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8gn6r", "created":
        1606802699.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606803985.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8grtd", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "sblom",
        "can_mod_post": false, "created_utc": 1606802802.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_4h2ly", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "C# (LINQPad, specifically)\n\nBraindead LINQ solution to Part 1. LINQ solution
        with a very wimpy optimization for Part 2.\n\nWrote a full knapsack implementation
        while waiting for my data in case I needed it for Part 2, but figured Day
        1 surely shouldn''t.\n\n    #region Part 1/2 DumpContainers\n    var part1
        = new DumpContainer().Dump(\"Part 1\");\n    var part2 = new DumpContainer().Dump(\"Part
        2\");\n    void Dump1(object o)\n    {\n    \tpart1.AppendContent(o);\n    }\n    \n    void
        Dump2(object o)\n    {\n    \tpart2.AppendContent(o);\n    }\n    #endregion\n    \n    var
        lines = await AoC.GetLinesWeb();\n    var input = lines.First();\n    \n    var
        nums = lines.Select(x =&gt; int.Parse(x));\n    \n    Dump1(from x in nums
        from y in nums where x + y == 2020 select x * y);\n    \n    Dump2(from x
        in nums from y in nums where x + y &lt; 2020 from z in nums where x + y +
        z == 2020 select x * y * z);\n    //                                  ^^^^^^^^^^^^^^^^^^\n    //                                  This
        optimization is enough to go from 3.7s to .2s on my SurfaceBook.\n    //                                  I
        love how topaz chooses N such that N^2 is fast-ish on something slow, but
        N^3 is slow-ish on something fast.\n    \n    \n    // I set off speculatively
        on the following path while the aoc server was being hugged to death just
        in case it was\n    // some kind of knapsack problem.\n    \n    var tots
        = new Dictionary&lt;int, List&lt;ImmutableList&lt;int&gt;&gt;&gt;\n    {\n    \t{
        0, new List&lt;ImmutableList&lt;int&gt;&gt; { ImmutableList&lt;int&gt;.Empty
        } }\n    };\n    \n    foreach (var num in nums)\n    {\n    \tvar newtots
        = tots;\n    \n    \tforeach (var tot in tots.ToList())\n    \t{\n    \t\tvar
        newtot = tot.Key + num;\n    \t\tif (newtot &gt; 2020) continue;\n    \t\tvar
        newways = tot.Value.Select(way =&gt; way.Add(num));\n    \n    \t\tif (newtots.ContainsKey(newtot))\n    \t\t{\n    \t\t\tnewtots[newtot].AddRange(newways);\n    \t\t}\n    \t\telse\n    \t\t{\n    \t\t\tnewtots[newtot]
        = newways.ToList();\n    \t\t}\n    \t}\n    }\n    \n    tots[2020].Dump();",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C# (LINQPad, specifically)&lt;/p&gt;\n\n&lt;p&gt;Braindead
        LINQ solution to Part 1. LINQ solution with a very wimpy optimization for
        Part 2.&lt;/p&gt;\n\n&lt;p&gt;Wrote a full knapsack implementation while waiting
        for my data in case I needed it for Part 2, but figured Day 1 surely shouldn&amp;#39;t.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#region
        Part 1/2 DumpContainers\nvar part1 = new DumpContainer().Dump(&amp;quot;Part
        1&amp;quot;);\nvar part2 = new DumpContainer().Dump(&amp;quot;Part 2&amp;quot;);\nvoid
        Dump1(object o)\n{\n    part1.AppendContent(o);\n}\n\nvoid Dump2(object o)\n{\n    part2.AppendContent(o);\n}\n#endregion\n\nvar
        lines = await AoC.GetLinesWeb();\nvar input = lines.First();\n\nvar nums =
        lines.Select(x =&amp;gt; int.Parse(x));\n\nDump1(from x in nums from y in
        nums where x + y == 2020 select x * y);\n\nDump2(from x in nums from y in
        nums where x + y &amp;lt; 2020 from z in nums where x + y + z == 2020 select
        x * y * z);\n//                                  ^^^^^^^^^^^^^^^^^^\n//                                  This
        optimization is enough to go from 3.7s to .2s on my SurfaceBook.\n//                                  I
        love how topaz chooses N such that N^2 is fast-ish on something slow, but
        N^3 is slow-ish on something fast.\n\n\n// I set off speculatively on the
        following path while the aoc server was being hugged to death just in case
        it was\n// some kind of knapsack problem.\n\nvar tots = new Dictionary&amp;lt;int,
        List&amp;lt;ImmutableList&amp;lt;int&amp;gt;&amp;gt;&amp;gt;\n{\n    { 0,
        new List&amp;lt;ImmutableList&amp;lt;int&amp;gt;&amp;gt; { ImmutableList&amp;lt;int&amp;gt;.Empty
        } }\n};\n\nforeach (var num in nums)\n{\n    var newtots = tots;\n\n    foreach
        (var tot in tots.ToList())\n    {\n        var newtot = tot.Key + num;\n        if
        (newtot &amp;gt; 2020) continue;\n        var newways = tot.Value.Select(way
        =&amp;gt; way.Add(num));\n\n        if (newtots.ContainsKey(newtot))\n        {\n            newtots[newtot].AddRange(newways);\n        }\n        else\n        {\n            newtots[newtot]
        = newways.ToList();\n        }\n    }\n}\n\ntots[2020].Dump();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8grtd/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8grtd", "created":
        1606802802.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge8gsga", "id": "ge8gsga", "parent_id":
        "t1_ge8grtd", "depth": 1, "children": ["ge8gsga"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8gvxc",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Pyr0Byt3",
        "can_mod_post": false, "created_utc": 1606802893.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_b4y19", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "#[Go/Golang](https://github.com/mnml/aoc/blob/master/2020/01/2.go) 207/65\n\nFirst
        time cracking top 100 on a part; feels kind of fraudulent because of the server
        issues.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a
        href=\"https://github.com/mnml/aoc/blob/master/2020/01/2.go\"&gt;Go/Golang&lt;/a&gt;
        207/65&lt;/h1&gt;\n\n&lt;p&gt;First time cracking top 100 on a part; feels
        kind of fraudulent because of the server issues.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8gvxc/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8gvxc", "created":
        1606802893.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8gwg3",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Flavorless_Quark",
        "can_mod_post": false, "created_utc": 1606802905.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_946e4ci8", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        " Python, rank 93 -- Allegedly solved in 7 min, but we all know that''s a
        lie\n\nPart 1:\n\n    with open(''input'') as input:\n\tinp = [int(line.rstrip())
        for line in input]\n\n    for x in inp:\n        for y in inp:\n            print(\"Solution
        :\", x * y)\n            exit()\n\nPart 2:\n\n    with open(''input'') as
        input:\n        inp = [int(line.rstrip()) for line in input]\n\n    for x
        in inp:\n        for y in inp:\n             for w in inp:\n                 if
        x + y  + w == 2020:\n                     print(\"Solution :\", x * y * w)\n                     exit()\n\nEDIT
        : Formatting ...?", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python,
        rank 93 -- Allegedly solved in 7 min, but we all know that&amp;#39;s a lie&lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with open(&amp;#39;input&amp;#39;)
        as input:\ninp = [int(line.rstrip()) for line in input]\n\nfor x in inp:\n    for
        y in inp:\n        print(&amp;quot;Solution :&amp;quot;, x * y)\n        exit()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with open(&amp;#39;input&amp;#39;)
        as input:\n    inp = [int(line.rstrip()) for line in input]\n\nfor x in inp:\n    for
        y in inp:\n         for w in inp:\n             if x + y  + w == 2020:\n                 print(&amp;quot;Solution
        :&amp;quot;, x * y * w)\n                 exit()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;EDIT
        : Formatting ...?&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8gwg3/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8gwg3", "created":
        1606802905.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8nrxn",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606808880.0, "send_replies": true,
        "parent_id": "t1_ge8gwg3", "score": 1, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "&gt; Allegedly solved in 7 min, but we all know that''s a lie\n\nSorry about
        that!  We appreciate your patience while /u/topaz2078 propped the servers
        back up.\n\n&gt; EDIT : Formatting ...?\n\nLooks good to me on old.reddit.",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        true, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Allegedly
        solved in 7 min, but we all know that&amp;#39;s a lie&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Sorry
        about that!  We appreciate your patience while &lt;a href=\"/u/topaz2078\"&gt;/u/topaz2078&lt;/a&gt;
        propped the servers back up.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;EDIT
        : Formatting ...?&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Looks good to
        me on old.reddit.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8nrxn/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8nrxn", "created":
        1606808880.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": 1606804685.0,
        "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8gx4l", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "chrisgzf",
        "can_mod_post": false, "created_utc": 1606802921.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_946cfwko", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python 3.\n\nTrying to golf this:\n\n`print(list(filter(None, map(lambda
        x: x[0] * x[1] * x[2] if sum(x) == 2020 else None, __import__(\"itertools\").combinations(map(int,
        open(\"Day01_Input\").readlines()), 3))))[0])`\n\nEDIT:\n\na shorter version\n\n`[print(a*b*c)
        if a+b+c == 2020 else 0 for a,b,c in __import__(\"itertools\").combinations(map(int,
        open(\"Day01_Input\").readlines()), 3)]`", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Python 3.&lt;/p&gt;\n\n&lt;p&gt;Trying to golf this:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;print(list(filter(None,
        map(lambda x: x[0] * x[1] * x[2] if sum(x) == 2020 else None, __import__(&amp;quot;itertools&amp;quot;).combinations(map(int,
        open(&amp;quot;Day01_Input&amp;quot;).readlines()), 3))))[0])&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;EDIT:&lt;/p&gt;\n\n&lt;p&gt;a
        shorter version&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;[print(a*b*c) if a+b+c ==
        2020 else 0 for a,b,c in __import__(&amp;quot;itertools&amp;quot;).combinations(map(int,
        open(&amp;quot;Day01_Input&amp;quot;).readlines()), 3)]&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8gx4l/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8gx4l", "created":
        1606802921.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606804887.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8h6cs", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "teksimian",
        "can_mod_post": false, "created_utc": 1606803130.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_1niop", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "just learning typescript.  what''s a prettier way to do this nested foreach
        ugliness ?\n\n    import { readFileSync } from ''fs'';\n    \n    let inputarr:
        number[] = readFileSync(''input.txt'')\n    \t.toString()\n    \t.split(\"\\n\")\n    \t.map(Number);\n    \n    inputarr.forEach(ei
        =&gt; {\n    \tinputarr.forEach(ej =&gt; {\n    \t\tinputarr.forEach(ek =&gt;
        {\n    \t\t\tif (ei + ej + ek == 2020) {\n    \t\t\t\tconsole.log({ ei, ej,
        ek })\n    \t\t\t\tconsole.log(ei * ej * ek);\n    \t\t\t\tprocess.exit(0);\n    \t\t\t}\n    \t\t});\t\t\n    \t});\n    });",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;just learning typescript.  what&amp;#39;s
        a prettier way to do this nested foreach ugliness ?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        { readFileSync } from &amp;#39;fs&amp;#39;;\n\nlet inputarr: number[] = readFileSync(&amp;#39;input.txt&amp;#39;)\n    .toString()\n    .split(&amp;quot;\\n&amp;quot;)\n    .map(Number);\n\ninputarr.forEach(ei
        =&amp;gt; {\n    inputarr.forEach(ej =&amp;gt; {\n        inputarr.forEach(ek
        =&amp;gt; {\n            if (ei + ej + ek == 2020) {\n                console.log({
        ei, ej, ek })\n                console.log(ei * ej * ek);\n                process.exit(0);\n            }\n        });     \n    });\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8h6cs/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8h6cs", "created":
        1606803130.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8hrjr",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "heyitsmattwade",
        "can_mod_post": false, "created_utc": 1606803612.0, "send_replies": true,
        "parent_id": "t1_ge8h6cs", "score": 3, "author_fullname": "t2_985du", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Sort your input and create a lookup map of the numbers.\n\nStarting from
        the first number of your sorted input, pick a number `a`. Find all the numbers
        for `b` such that they are less than `2020 - a` and greater than `a`. Then,
        check if a number `c = 2020 - (a + b)` exists with your lookup map. If so,
        you found your answer! Otherwise, continue searching for `b` values. If we
        reach the end of `b`, continue from the start with the next `a`.\n\nIn code
        that looks like:\n\n    const { input } = require(''./input'');\n    \n    input.sort((a,
        b) =&gt; a - b);\n    const num_map = input.reduce((obj, v) =&gt; ((obj[v]
        = true), obj), {});\n    \n    const SUM = 2020;\n    \n    outer: for (let
        i = 0; i &lt; input.length; i++) {\n        let a = input[i];\n        let
        b_c = SUM - a;\n    \n        for (let j = i + 1; j &lt; input.length; j++)
        {\n            let b = input[j];\n            if (b &gt;= b_c) {\n                break;\n            }\n    \n            let
        c = SUM - (a + b);\n            if (num_map[c]) {\n                console.log({
        a, b, c });\n                console.log(''a * b * c = '', a * b * c);\n                break
        outer;\n            }\n        }\n    }", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Sort your input and create a lookup map of the numbers.&lt;/p&gt;\n\n&lt;p&gt;Starting
        from the first number of your sorted input, pick a number &lt;code&gt;a&lt;/code&gt;.
        Find all the numbers for &lt;code&gt;b&lt;/code&gt; such that they are less
        than &lt;code&gt;2020 - a&lt;/code&gt; and greater than &lt;code&gt;a&lt;/code&gt;.
        Then, check if a number &lt;code&gt;c = 2020 - (a + b)&lt;/code&gt; exists
        with your lookup map. If so, you found your answer! Otherwise, continue searching
        for &lt;code&gt;b&lt;/code&gt; values. If we reach the end of &lt;code&gt;b&lt;/code&gt;,
        continue from the start with the next &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;In
        code that looks like:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const { input }
        = require(&amp;#39;./input&amp;#39;);\n\ninput.sort((a, b) =&amp;gt; a - b);\nconst
        num_map = input.reduce((obj, v) =&amp;gt; ((obj[v] = true), obj), {});\n\nconst
        SUM = 2020;\n\nouter: for (let i = 0; i &amp;lt; input.length; i++) {\n    let
        a = input[i];\n    let b_c = SUM - a;\n\n    for (let j = i + 1; j &amp;lt;
        input.length; j++) {\n        let b = input[j];\n        if (b &amp;gt;= b_c)
        {\n            break;\n        }\n\n        let c = SUM - (a + b);\n        if
        (num_map[c]) {\n            console.log({ a, b, c });\n            console.log(&amp;#39;a
        * b * c = &amp;#39;, a * b * c);\n            break outer;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8hrjr/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8hrjr", "created":
        1606803612.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8hasg",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "BenjaminGeiger",
        "can_mod_post": false, "created_utc": 1606803231.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_49qj4", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "F#, 3641/3703. [The code.](https://github.com/benjamingeiger/advent-of-code/tree/main/2020/day01)\n\nIt''s
        ugly, I''ll admit. I had to look up things like \"how do I read lines from
        a file?\" because most of my experience with F# has been in situations where
        the input is already provided.", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;F#, 3641/3703. &lt;a href=\"https://github.com/benjamingeiger/advent-of-code/tree/main/2020/day01\"&gt;The
        code.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s ugly, I&amp;#39;ll admit.
        I had to look up things like &amp;quot;how do I read lines from a file?&amp;quot;
        because most of my experience with F# has been in situations where the input
        is already provided.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8hasg/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8hasg", "created":
        1606803231.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8hczq",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "diplodicus_",
        "can_mod_post": false, "created_utc": 1606803279.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_bqk16", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Golang. Way over optimized for the small input, but using this opportunity
        to find ways to be a bit smarter with data structures.\n\nPart 1:\n\n    package
        main\n    \n    import (\n\t    \"bufio\"\n\t    \"fmt\"\n\t    \"log\"\n\t    \"os\"\n\t    \"strconv\"\n    )\n    \n    func
        main() {\n\t    f, err := os.Open(\"input.txt\")\n\t    if err != nil {\n\t\t    log.Fatal(err)\n\t    }\n\t    defer
        f.Close()\n    \n\t    s := bufio.NewScanner(f)\n    \n\t    s.Split(bufio.ScanLines)\n    \n\t    numberMap
        := make(map[int]bool)\n    \n\t    for s.Scan() {\n\t\t    line := s.Text()\n\t\t    lineInt,
        err := strconv.Atoi(line)\n\t\t    if err != nil {\n\t\t\t    log.Fatalf(\"encountered
        non integer: %v\", err)\n\t\t    }\n    \n\t\t    complement := 2020 - lineInt\n\t\t    if
        numberMap[complement] {\n\t\t\t    fmt.Printf(\"%d\\n\", complement * lineInt)\n\t\t\t    return\n\t\t    }\n    \n\t\t    numberMap[lineInt]
        = true\n\t    }\n\t    fmt.Println(\"no complement found\")\n    }\n\n\nAnd
        part 2:\n\n    package main\n    \n    import (\n\t    \"bufio\"\n\t    \"fmt\"\n\t    \"log\"\n\t    \"os\"\n\t    \"strconv\"\n    )\n    \n    func
        main() {\n\t    f, err := os.Open(\"input.txt\")\n\t    if err != nil {\n\t\t    log.Fatal(err)\n\t    }\n\t    defer
        f.Close()\n    \n\t    s := bufio.NewScanner(f)\n    \n\t    s.Split(bufio.ScanLines)\n    \n\t    sumMap
        := make(map[int][]int)\n    \n\t    for s.Scan() {\n\t\t    line := s.Text()\n\t\t    lineInt,
        err := strconv.Atoi(line)\n    \n\t\t    if err != nil {\n\t\t\t    fmt.Println(\"encountered
        non integer\")\n\t\t    }\n    \n\t\t    complement := 2020 - lineInt\n\t\t    components
        := sumMap[complement]\n\t\t    if len(components) == 2 {\n\t\t\t    fmt.Printf(\"%d\",
        lineInt * components[0] * components[1])\n\t\t\t    return\n\t\t    }\n    \n\t\t    for
        k, v := range sumMap {\n\t\t\t    if len(v) == 1 {\n\t\t\t\t    sumMap[k +
        lineInt] = []int{k, lineInt}\n\t\t\t    }\n\t\t    }\n    \n\t\t    sumMap[lineInt]
        = []int{lineInt}\n\t    }\n    \n\t    fmt.Println(\"didn''t find it\")\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Golang. Way over optimized
        for the small input, but using this opportunity to find ways to be a bit smarter
        with data structures.&lt;/p&gt;\n\n&lt;p&gt;Part 1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package
        main\n\nimport (\n    &amp;quot;bufio&amp;quot;\n    &amp;quot;fmt&amp;quot;\n    &amp;quot;log&amp;quot;\n    &amp;quot;os&amp;quot;\n    &amp;quot;strconv&amp;quot;\n)\n\nfunc
        main() {\n    f, err := os.Open(&amp;quot;input.txt&amp;quot;)\n    if err
        != nil {\n        log.Fatal(err)\n    }\n    defer f.Close()\n\n    s := bufio.NewScanner(f)\n\n    s.Split(bufio.ScanLines)\n\n    numberMap
        := make(map[int]bool)\n\n    for s.Scan() {\n        line := s.Text()\n        lineInt,
        err := strconv.Atoi(line)\n        if err != nil {\n            log.Fatalf(&amp;quot;encountered
        non integer: %v&amp;quot;, err)\n        }\n\n        complement := 2020 -
        lineInt\n        if numberMap[complement] {\n            fmt.Printf(&amp;quot;%d\\n&amp;quot;,
        complement * lineInt)\n            return\n        }\n\n        numberMap[lineInt]
        = true\n    }\n    fmt.Println(&amp;quot;no complement found&amp;quot;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And
        part 2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package main\n\nimport (\n    &amp;quot;bufio&amp;quot;\n    &amp;quot;fmt&amp;quot;\n    &amp;quot;log&amp;quot;\n    &amp;quot;os&amp;quot;\n    &amp;quot;strconv&amp;quot;\n)\n\nfunc
        main() {\n    f, err := os.Open(&amp;quot;input.txt&amp;quot;)\n    if err
        != nil {\n        log.Fatal(err)\n    }\n    defer f.Close()\n\n    s := bufio.NewScanner(f)\n\n    s.Split(bufio.ScanLines)\n\n    sumMap
        := make(map[int][]int)\n\n    for s.Scan() {\n        line := s.Text()\n        lineInt,
        err := strconv.Atoi(line)\n\n        if err != nil {\n            fmt.Println(&amp;quot;encountered
        non integer&amp;quot;)\n        }\n\n        complement := 2020 - lineInt\n        components
        := sumMap[complement]\n        if len(components) == 2 {\n            fmt.Printf(&amp;quot;%d&amp;quot;,
        lineInt * components[0] * components[1])\n            return\n        }\n\n        for
        k, v := range sumMap {\n            if len(v) == 1 {\n                sumMap[k
        + lineInt] = []int{k, lineInt}\n            }\n        }\n\n        sumMap[lineInt]
        = []int{lineInt}\n    }\n\n    fmt.Println(&amp;quot;didn&amp;#39;t find it&amp;quot;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8hczq/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8hczq", "created":
        1606803279.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8hf6j", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Brute force all the way. Small dataset, 200^3 = 8,000,000,
        let''s go for that cube solution.\n\n    #!/usr/bin/python3\n    with open(''day01.in'')
        as f:\n        digs = [int(v) for v in f.read().splitlines()]\n\n\n    # part
        1\n    def find_nums(inp):\n        for d1 in inp:\n            for d2 in
        inp:\n                if d1 + d2 == 2020:\n                    return d1,
        d2\n        return (0, 0)\n\n\n    (a, b) = find_nums(digs)\n    print(a*b)\n\n    #
        part 2\n    def find_nums(inp):\n        for d1 in inp:\n            for d2
        in inp:\n                for d3 in inp:\n                    if d1 + d2 +
        d3 == 2020:\n                        return d1, d2, d3\n        return (0,
        0, 0)\n\n\n    (a, b, c) = find_nums(digs)\n    print(a*b*c)\n\nUser time
        0.078 seconds, yeah I can live with that.", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_ge8hf6j", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Brute force all the way. Small dataset,
        200&lt;sup&gt;3&lt;/sup&gt; = 8,000,000, let&amp;#39;s go for that cube solution.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/usr/bin/python3\nwith
        open(&amp;#39;day01.in&amp;#39;) as f:\n    digs = [int(v) for v in f.read().splitlines()]\n\n\n#
        part 1\ndef find_nums(inp):\n    for d1 in inp:\n        for d2 in inp:\n            if
        d1 + d2 == 2020:\n                return d1, d2\n    return (0, 0)\n\n\n(a,
        b) = find_nums(digs)\nprint(a*b)\n\n# part 2\ndef find_nums(inp):\n    for
        d1 in inp:\n        for d2 in inp:\n            for d3 in inp:\n                if
        d1 + d2 + d3 == 2020:\n                    return d1, d2, d3\n    return (0,
        0, 0)\n\n\n(a, b, c) = find_nums(digs)\nprint(a*b*c)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;User
        time 0.078 seconds, yeah I can live with that.&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8hf6j/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606803329.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606803329.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8hhxr",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "drummaster015",
        "can_mod_post": false, "created_utc": 1606803393.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_cpyqk", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Haskell**\n\n    convert :: String -&gt; [Int]\n    convert = map read
        . lines\n        \n    genTuples2 :: [Int] -&gt; [[Int]]\n    genTuples2 x
        = [[y1, y2] | y1 &lt;- x, y2 &lt;- x]\n        \n    genTuples3 :: [Int] -&gt;
        [[Int]]\n    genTuples3 x = [[y1, y2, y3] | y1 &lt;- x, y2 &lt;- x, y3 &lt;-
        x]\n        \n    day1 :: ([Int] -&gt; [[Int]]) -&gt; [Int] -&gt; Int\n    day1
        g = product . head . filter (\\x -&gt; sum x == 2020) . g\n        \n    main
        = do\n        contents &lt;- readFile \"inputs/day1.txt\"\n        putStrLn
        $ show . day1 genTuples2 . convert $ contents\n        putStrLn $ show . day1
        genTuples3 . convert $ contents", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Haskell&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;convert
        :: String -&amp;gt; [Int]\nconvert = map read . lines\n\ngenTuples2 :: [Int]
        -&amp;gt; [[Int]]\ngenTuples2 x = [[y1, y2] | y1 &amp;lt;- x, y2 &amp;lt;-
        x]\n\ngenTuples3 :: [Int] -&amp;gt; [[Int]]\ngenTuples3 x = [[y1, y2, y3]
        | y1 &amp;lt;- x, y2 &amp;lt;- x, y3 &amp;lt;- x]\n\nday1 :: ([Int] -&amp;gt;
        [[Int]]) -&amp;gt; [Int] -&amp;gt; Int\nday1 g = product . head . filter (\\x
        -&amp;gt; sum x == 2020) . g\n\nmain = do\n    contents &amp;lt;- readFile
        &amp;quot;inputs/day1.txt&amp;quot;\n    putStrLn $ show . day1 genTuples2
        . convert $ contents\n    putStrLn $ show . day1 genTuples3 . convert $ contents\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8hhxr/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8hhxr", "created":
        1606803393.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8hj6a",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "scratchisthebest",
        "can_mod_post": false, "created_utc": 1606803420.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_der29", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "[Fairly slapdash rust as a complete beginner to the language](https://github.com/quat1024/advent-of-code-2020/blob/b6f4780d7cf049fedc89c71e27a14ca6bb123554/src/main.rs).
        Checking out some of the other Rust solutions in this thread is fun, i''ll
        have to look into `itertools` \ud83d\udc40 and... learn how the module system
        works", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a
        href=\"https://github.com/quat1024/advent-of-code-2020/blob/b6f4780d7cf049fedc89c71e27a14ca6bb123554/src/main.rs\"&gt;Fairly
        slapdash rust as a complete beginner to the language&lt;/a&gt;. Checking out
        some of the other Rust solutions in this thread is fun, i&amp;#39;ll have
        to look into &lt;code&gt;itertools&lt;/code&gt; \ud83d\udc40 and... learn
        how the module system works&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8hj6a/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8hj6a", "created":
        1606803420.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8iorh",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "schwiz",
        "can_mod_post": false, "created_utc": 1606804381.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_3fwvi", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "    fun main() {\n        val ints = ResourceReader(1).ints()\n        println(part1(ints,
        2020))\n        println(part2(ints, 2020))\n    }\n    \n    //Find the two
        ints who sum is 2020 and return their product\n    fun part1(ints : List&lt;Int&gt;,
        sum : Int) : Int {\n        for(i in ints.indices){\n            val value
        = ints[i]\n            val want = sum - value\n            if(ints.contains(want))
        return value * want\n        }\n        return 0\n    }\n    \n    //Find
        THREE ints who sum is 2020 and return their product.\n    fun part2(ints :
        List&lt;Int&gt;, sum : Int) : Int {\n        for(i in ints.indices){\n            val
        value = ints[i]\n            val remains = sum - value\n            val pairdown
        = ints.filter { it &lt;= remains }\n            val next = part1(pairdown,
        remains)\n            if(next != 0) return next * value\n        }\n        return
        0\n    }", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;fun
        main() {\n    val ints = ResourceReader(1).ints()\n    println(part1(ints,
        2020))\n    println(part2(ints, 2020))\n}\n\n//Find the two ints who sum is
        2020 and return their product\nfun part1(ints : List&amp;lt;Int&amp;gt;, sum
        : Int) : Int {\n    for(i in ints.indices){\n        val value = ints[i]\n        val
        want = sum - value\n        if(ints.contains(want)) return value * want\n    }\n    return
        0\n}\n\n//Find THREE ints who sum is 2020 and return their product.\nfun part2(ints
        : List&amp;lt;Int&amp;gt;, sum : Int) : Int {\n    for(i in ints.indices){\n        val
        value = ints[i]\n        val remains = sum - value\n        val pairdown =
        ints.filter { it &amp;lt;= remains }\n        val next = part1(pairdown, remains)\n        if(next
        != 0) return next * value\n    }\n    return 0\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8iorh/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8iorh", "created":
        1606804381.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8nuup",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606808954.0, "send_replies": true,
        "parent_id": "t1_ge8iorh", "score": 1, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "What language is this?", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": true, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What
        language is this?&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8nuup/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8nuup", "created":
        1606808954.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "more", "data": {"count": 3, "name": "t1_ge9js6h", "id": "ge9js6h",
        "parent_id": "t1_ge8nuup", "depth": 2, "children": ["ge9js6h", "ge8r5n0",
        "ge8r6su"]}}, {"kind": "more", "data": {"count": 318, "name": "t1_ge8iw3m",
        "id": "ge8iw3m", "parent_id": "t3_k4e4lm", "depth": 0, "children": ["ge8iw3m",
        "ge8iotj", "ge8jsx5", "ge8j4w1", "ge8isow", "ge8kak3", "ge8q1ox", "ge8s8wl",
        "ge8rlp9", "ge8jf9z", "ge8jglc", "ge8oces", "ge8u58v", "ge8ndxc", "ge8qs04",
        "ge8r3ie", "ge8zyte", "ge8umgx", "ge9066a", "ge8v5uh", "ge8qd7s", "ge8ub8c",
        "ge8vu5a", "ge8l8lb", "ge8ypio", "ge8vnir", "ge8uxge", "ge8zxsv", "ge8w7ap",
        "ge8rgu3", "ge92lj3", "ge92kna", "ge8zg5h", "ge8t5hs", "ge90ffa", "ge90snh",
        "ge8z4ff", "ge8xlj2", "ge94kss", "ge94liw", "ge8xx75", "ge9l4ak", "ge8xemy",
        "ge8zlpr", "ge8vrzv", "ge8ugt2", "ge8yog2", "ge90t2q", "ge90pv4", "ge8xday",
        "ge90035", "ge96iwo", "ge9cla0", "ge8yk7u", "ge989na", "ge8v2we", "gea8ouf",
        "ge9225u", "ge8x2ax", "ge93wxk", "ge8xree", "ge8wy22", "gea1c82", "ge9p67o",
        "ge9idwm", "ge99c2y", "ge98q2x", "ge9px27", "ge8ucg7", "ge95a1e", "ge985ep",
        "ge948qx", "ge95r6o", "gea846b", "gea04hh", "ge98ysx", "ge998wb", "ge9gln9",
        "gea91jq", "ge94tnj", "ge9aay1", "ge9quzr", "ge9c3l6", "ge8yqmy", "ge9lb2t",
        "geadna4", "ge99296", "ge97rgx", "ge959yk", "ge91y87", "gebuvuw", "ge9wiwj",
        "ge8vf78", "gea60ob", "ge9wtc6", "ge9autn", "ge93z8h", "ge9n0k8", "ge9809q",
        "ge95f68", "ge99kma", "ge9k6sa", "ge9c2p4", "ge98qck", "ge9lrxu", "gead2hx",
        "gea0reu", "geady27", "ge9fh10", "ge8yvut", "ge9nnl1", "ge9kuii", "gea55cz",
        "ge96tiq", "geaeq43", "ge93bhe", "ge93efl", "ge9p8jh", "ge9hbp6", "ge9ysx3",
        "ge93z7e", "geby48b", "gea17ge", "ge99hmm", "gebuoyc", "gea37gf", "geby132",
        "ged616q", "ge9qj85", "ge9bnyc", "ge9f357", "gea6m9x", "ge9oow8", "geb434g",
        "geacp52", "ge9fs08", "ged4hhm", "ge9l7o8", "ge9963b", "ge9cwwc", "ge9p7h9",
        "gead5e6", "geabg9r", "gea6p3j", "geator7", "ge9hgu2", "ge9u529", "geajhnt",
        "ge9pptc", "geaja8q", "ge9qgy9", "geb73sk", "gea5os4", "gebcdzv", "geac8gr",
        "gebx4pn", "gea5sgr", "gecd75d", "gec5h0g", "geayy5d", "geaxx0l", "ged4e5g",
        "ge9v0oa", "gebka8s", "gea3dle", "ge9m65s", "gecjat6", "gec0e6f", "ge933cq",
        "geayab9", "gea7lc6", "geae2je", "geab8yv", "gebidqz", "ge9lf9j", "geaqabf",
        "ge9vs5f", "ge9kgch", "ge9e7k1"]}}], true]], [0, 12, "attr", "things"], [12,
        13, "call", ["t1_ge9hyrm"]], [13, 14, "attr", "focus"], [14, 15, "call", []],
        [0, 16, "attr", "things"], [16, 17, "call", ["None"]], [17, 18, "attr", "filter"],
        [18, 19, "call", [".morechildren"]], [19, 20, "attr", "remove"], [20, 21,
        "call", []]], "success": true}'
  recorded_at: Sat, 08 Mar 2025 23:06:37 GMT
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:37 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=MIHbWM8EMXH324zGZ1; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sat, 08 Mar 2025 23:06:37 GMT
- request:
    method: post
    uri: https://oauth.reddit.com/api/morechildren.json
    body:
      encoding: UTF-8
      string: link_id=t3_k4e4lm&children=ge8iw3m,ge8iotj,ge8jsx5,ge8j4w1,ge8isow,ge8kak3,ge8q1ox,ge8s8wl,ge8rlp9,ge8jf9z,ge8jglc,ge8oces,ge8u58v,ge8ndxc,ge8qs04,ge8r3ie,ge8zyte,ge8umgx,ge9066a,ge8v5uh,ge8qd7s,ge8ub8c,ge8vu5a,ge8l8lb,ge8ypio,ge8vnir,ge8uxge,ge8zxsv,ge8w7ap,ge8rgu3,ge92lj3,ge92kna,ge8zg5h,ge8t5hs,ge90ffa,ge90snh,ge8z4ff,ge8xlj2,ge94kss,ge94liw,ge8xx75,ge9l4ak,ge8xemy,ge8zlpr,ge8vrzv,ge8ugt2,ge8yog2,ge90t2q,ge90pv4,ge8xday,ge90035,ge96iwo,ge9cla0,ge8yk7u,ge989na,ge8v2we,gea8ouf,ge9225u,ge8x2ax,ge93wxk,ge8xree,ge8wy22,gea1c82,ge9p67o,ge9idwm,ge99c2y,ge98q2x,ge9px27,ge8ucg7,ge95a1e,ge985ep,ge948qx,ge95r6o,gea846b,gea04hh,ge98ysx,ge998wb,ge9gln9,gea91jq,ge94tnj,ge9aay1,ge9quzr,ge9c3l6,ge8yqmy,ge9lb2t,geadna4,ge99296,ge97rgx,ge959yk,ge91y87,gebuvuw,ge9wiwj,ge8vf78,gea60ob,ge9wtc6,ge9autn,ge93z8h,ge9n0k8,ge9809q,ge95f68,ge99kma,ge9k6sa,ge9c2p4,ge98qck,ge9lrxu,gead2hx,gea0reu,geady27,ge9fh10,ge8yvut,ge9nnl1,ge9kuii,gea55cz,ge96tiq,geaeq43,ge93bhe,ge93efl,ge9p8jh,ge9hbp6,ge9ysx3,ge93z7e,geby48b,gea17ge,ge99hmm,gebuoyc,gea37gf,geby132,ged616q,ge9qj85,ge9bnyc,ge9f357,gea6m9x,ge9oow8,geb434g,geacp52,ge9fs08,ged4hhm,ge9l7o8,ge9963b,ge9cwwc,ge9p7h9,gead5e6,geabg9r,gea6p3j,geator7,ge9hgu2,ge9u529,geajhnt,ge9pptc,geaja8q,ge9qgy9,geb73sk,gea5os4,gebcdzv,geac8gr,gebx4pn,gea5sgr,gecd75d,gec5h0g,geayy5d,geaxx0l,ged4e5g,ge9v0oa,gebka8s,gea3dle,ge9m65s,gecjat6,gec0e6f,ge933cq,geayab9,gea7lc6,geae2je,geab8yv,gebidqz,ge9lf9j,geaqabf,ge9vs5f,ge9kgch,ge9e7k1
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '32489'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      set-cookie:
      - loid=000000001ksigck5i2.2.1741475197995.Z0FBQUFBQm56TTEtZHZtRzJRUXJYMUhXUEZtUkg5MklnQjJyRGpqZzNJVFlEQ2x2NGIzQlVzMEtKRzk2UFY4bGZIVW8tWW8wQ1FlNXZ1UUNUTV83OUFJbjZsSGdVME5kRGtySTg2QXM1d1RlakxrRV9LbTcwQUx3Ylp6NFVud1VFRDdfdXI1WVdpQVY;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Mon, 08-Mar-2027 23:06:38
        GMT; secure, session_tracker=lllljpbbronhiheehq.0.1741475198007.Z0FBQUFBQm56TTEtV0p1X3RzZ1FtcmQ3WXdiczNMZU85dHNNQ0RnazhUUmRGLWtmRUZCa1Z1WGtiMWpGTk05T3JGcVlfdC1OTnBHWEZmOFhIREQ2b3hyN2xxMF80SklLNVdTZHJkaDF1NUd1c3h0Qk1raTZHOUFxam10MHJhRlVBOHhhODc4NmRRMEI;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 01:06:38
        GMT; secure, edgebucket=XTpn38nCf56gnPu5gG; Domain=reddit.com; Max-Age=63071999;
        Path=/;  secure
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '21'
      x-ratelimit-remaining:
      - '79.0'
      x-ratelimit-reset:
      - '202'
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:38 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"jquery": [[0, 1, "call", ["body"]], [1, 2, "attr", "find"], [2, 3,
        "call", [".status"]], [3, 4, "attr", "hide"], [4, 5, "call", []], [5, 6, "attr",
        "html"], [6, 7, "call", [""]], [7, 8, "attr", "end"], [8, 9, "call", []],
        [0, 10, "attr", "insert_things"], [10, 11, "call", [[{"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606804672.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8iotj", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "tim0",
        "can_mod_post": false, "created_utc": 1606804383.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_3sdf0", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Here''s a Go solution that uses a set to avoid the quadratic explosion. This
        needn''t build the set multiple times, but this was fast enough. I''m using
        this year''s event to learn Go: so far I don''t like how verbose it is, but
        it''s still surprisingly productive. \n\n    func arrayWithout(arr []int,
        without int) []int {\n    \tvar result []int\n    \tfor _, i := range arr
        {\n    \t\tif i != without {\n    \t\t\tresult = append(result, i)\n    \t\t}\n    \t}\n    \treturn
        result\n    }\n\n    func solve2(target int, ints []int) (x, y int, success
        bool) {\n    \tlookup := make(map[int]bool)\n    \tfor _, i := range ints
        {\n    \t\tlookup[i] = true\n    \t}\n    \tfor _, i := range ints {\n    \t\trem
        := target - i\n\n    \t\tif lookup[rem] {\n    \t\t\treturn i, rem, true\n    \t\t}\n    \t}\n    \treturn
        0, 0, false\n    }\n\n    func One() {\n    \tints := util.ReadFileInts(\"input/1.txt\")\n\n    \t//
        Part 1\n    \tx, y, succ := solve2(2020, ints)\n    \tif succ {\n    \t\tfmt.Println(\"PART
        1: Found a solution!\", x, y, x*y)\n    \t}\n\n    \t// Part 2\n    \tfor
        _, i := range ints {\n    \t\trem := 2020 - i\n\n    \t\tx, y, succ = solve2(rem,
        arrayWithout(ints, i))\n    \t\tif succ {\n    \t\t\tfmt.Println(\"PART 2:
        Found a solution!\", i, x, y, i*x*y)\n    \t\t\treturn\n    \t\t}\n    \t}\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s a Go
        solution that uses a set to avoid the quadratic explosion. This needn&amp;#39;t
        build the set multiple times, but this was fast enough. I&amp;#39;m using
        this year&amp;#39;s event to learn Go: so far I don&amp;#39;t like how verbose
        it is, but it&amp;#39;s still surprisingly productive. &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func
        arrayWithout(arr []int, without int) []int {\n    var result []int\n    for
        _, i := range arr {\n        if i != without {\n            result = append(result,
        i)\n        }\n    }\n    return result\n}\n\nfunc solve2(target int, ints
        []int) (x, y int, success bool) {\n    lookup := make(map[int]bool)\n    for
        _, i := range ints {\n        lookup[i] = true\n    }\n    for _, i := range
        ints {\n        rem := target - i\n\n        if lookup[rem] {\n            return
        i, rem, true\n        }\n    }\n    return 0, 0, false\n}\n\nfunc One() {\n    ints
        := util.ReadFileInts(&amp;quot;input/1.txt&amp;quot;)\n\n    // Part 1\n    x,
        y, succ := solve2(2020, ints)\n    if succ {\n        fmt.Println(&amp;quot;PART
        1: Found a solution!&amp;quot;, x, y, x*y)\n    }\n\n    // Part 2\n    for
        _, i := range ints {\n        rem := 2020 - i\n\n        x, y, succ = solve2(rem,
        arrayWithout(ints, i))\n        if succ {\n            fmt.Println(&amp;quot;PART
        2: Found a solution!&amp;quot;, i, x, y, i*x*y)\n            return\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8iotj/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8iotj", "created":
        1606804383.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_ge8ipdo", "id": "ge8ipdo", "parent_id":
        "t1_ge8iotj", "depth": 1, "children": ["ge8ipdo"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606805674.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8isow", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "pettersson18",
        "can_mod_post": false, "created_utc": 1606804473.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_7y543emf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python. Managed to get on the leaderboard, too bad it doesn''t count :)\n\n    def
        find_two_sum(s, arr):\n        d = {}\n        for nr in arr:\n            if
        s-nr in d:\n                return nr, s-nr\n            else:\n                d[nr]
        = True\n    \n    \n    ints = []\n    \n    \n    with open(\"input\") as
        f:\n        for i in f:\n            ints.append(int(i))\n    \n    x, y =
        find_two_sum(2020, ints)\n    print(\"Part 1: \", x * y)\n    \n    # for
        each number `x` in the array, we are looking for two numbers whose sum is
        2020 - x\n    for i in range(0, len(ints) - 2):\n        diff = 2020 - ints[i]\n        res
        = find_two_sum(diff, ints[i+1:])\n        if res:\n            print(\"Part
        2: \", ints[i] * res[0] * res[1])\n            break", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Python. Managed to get on the leaderboard, too bad
        it doesn&amp;#39;t count :)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def find_two_sum(s,
        arr):\n    d = {}\n    for nr in arr:\n        if s-nr in d:\n            return
        nr, s-nr\n        else:\n            d[nr] = True\n\n\nints = []\n\n\nwith
        open(&amp;quot;input&amp;quot;) as f:\n    for i in f:\n        ints.append(int(i))\n\nx,
        y = find_two_sum(2020, ints)\nprint(&amp;quot;Part 1: &amp;quot;, x * y)\n\n#
        for each number `x` in the array, we are looking for two numbers whose sum
        is 2020 - x\nfor i in range(0, len(ints) - 2):\n    diff = 2020 - ints[i]\n    res
        = find_two_sum(diff, ints[i+1:])\n    if res:\n        print(&amp;quot;Part
        2: &amp;quot;, ints[i] * res[0] * res[1])\n        break\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8isow/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8isow", "created":
        1606804473.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge8itaq", "id": "ge8itaq", "parent_id":
        "t1_ge8isow", "depth": 1, "children": ["ge8itaq"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606805524.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8iw3m", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "cxvpbnq",
        "can_mod_post": false, "created_utc": 1606804553.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_945tdpor", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Advent of Code is a perfect opportunity to *learn a new language*. I encourage
        you to challenge yourself and try to learn something new! Ignore the leaderboard.\n\nI
        also took my chances. I started live streaming  for the first time on Twitch
        where I solved Day 1 in **Rust**. It may be an easy problem today, but writing
        in an unknown language for the first time can be challenging!\n\nI first solved
        it in `O(n^2)` and `O(n^3)` respectively. But got it down to `O(n)` and `O(n^2)`.\n\n[https://github.com/cXVpbnQ/aoc-rust](https://github.com/cXVpbnQ/aoc-rust)\n\nI
        am here to learn, so I you have remarks or suggestions, let me know!", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Advent of Code is a perfect opportunity
        to &lt;em&gt;learn a new language&lt;/em&gt;. I encourage you to challenge
        yourself and try to learn something new! Ignore the leaderboard.&lt;/p&gt;\n\n&lt;p&gt;I
        also took my chances. I started live streaming  for the first time on Twitch
        where I solved Day 1 in &lt;strong&gt;Rust&lt;/strong&gt;. It may be an easy
        problem today, but writing in an unknown language for the first time can be
        challenging!&lt;/p&gt;\n\n&lt;p&gt;I first solved it in &lt;code&gt;O(n^2)&lt;/code&gt;
        and &lt;code&gt;O(n^3)&lt;/code&gt; respectively. But got it down to &lt;code&gt;O(n)&lt;/code&gt;
        and &lt;code&gt;O(n^2)&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/cXVpbnQ/aoc-rust\"&gt;https://github.com/cXVpbnQ/aoc-rust&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I
        am here to learn, so I you have remarks or suggestions, let me know!&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8iw3m/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8iw3m", "created":
        1606804553.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606805152.0, "mod_reason_by": null,
        "banned_by": null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8j4w1", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_ge8j4w1", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8j4w1/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606804758.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606804758.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge8j5hj", "id": "ge8j5hj", "parent_id":
        "t1_ge8j4w1", "depth": 1, "children": ["ge8j5hj"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8jf9z",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Shirobutaman",
        "can_mod_post": false, "created_utc": 1606805003.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_123pl0", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Swift. Part 2 (mostly) naive solution:\n\n    let input : [Int] = loadInput().sorted()\n    \n    var
        steps = 0 // out of personal interest\n    for (i,x) in input.enumerated()
        {\n      for (j,y) in input[i+1..&lt;input.count].enumerated() {\n        for
        z in input[j+1..&lt;input.count] {\n          steps += 1\n          if x +
        y + z == 2020 {\n            print(\"Answer: \\(x), \\(y), \\(z) -&gt;\",x*y*z)\n            print(\"Steps:\",
        steps) // 1551 steps, not bad\n            return\n          } else if x +
        y + z &gt; 2020 {\n            break\n          }\n        }\n      }\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Swift. Part 2 (mostly)
        naive solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let input : [Int] = loadInput().sorted()\n\nvar
        steps = 0 // out of personal interest\nfor (i,x) in input.enumerated() {\n  for
        (j,y) in input[i+1..&amp;lt;input.count].enumerated() {\n    for z in input[j+1..&amp;lt;input.count]
        {\n      steps += 1\n      if x + y + z == 2020 {\n        print(&amp;quot;Answer:
        \\(x), \\(y), \\(z) -&amp;gt;&amp;quot;,x*y*z)\n        print(&amp;quot;Steps:&amp;quot;,
        steps) // 1551 steps, not bad\n        return\n      } else if x + y + z &amp;gt;
        2020 {\n        break\n      }\n    }\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8jf9z/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8jf9z", "created":
        1606805003.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606808687.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8jglc", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "sim642",
        "can_mod_post": false, "created_utc": 1606805033.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_49npq", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "[My **Scala** solution](https://github.com/sim642/adventofcode/blob/master/src/main/scala/eu/sim642/adventofcode2020/Day1.scala).\n\nEssentially
        the same one-liner as every other functional solution uses:\n\n    entries.combinations(n).find(_.sum
        == 2020).get.product\nFor part 1 I wrote it with \"2\" instead of \"n\" but
        already thought that might be one of the generalizations part 2 will make.",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/sim642/adventofcode/blob/master/src/main/scala/eu/sim642/adventofcode2020/Day1.scala\"&gt;My
        &lt;strong&gt;Scala&lt;/strong&gt; solution&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Essentially
        the same one-liner as every other functional solution uses:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;entries.combinations(n).find(_.sum
        == 2020).get.product\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For part 1 I wrote
        it with &amp;quot;2&amp;quot; instead of &amp;quot;n&amp;quot; but already
        thought that might be one of the generalizations part 2 will make.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8jglc/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8jglc", "created":
        1606805033.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8jsx5",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "dylanfromwinnipeg",
        "can_mod_post": false, "created_utc": 1606805325.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_7524szs", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Solved in C#.\n\n[Code](https://github.com/dylan-smith/AdventOfCode2020/blob/master/src/Days/Day01.cs)\n\n[Video](https://youtu.be/CvMvjvUGz8Q)\n\n[Blog
        Post](https://www.westerndevs.com/_/Advent-Of-Code-Day01/)\n\n    public override
        string PartOne(string input)\n    {\n        var entries = input.Integers().OrderBy(x
        =&gt; x).ToList();\n        var result = entries.GetCombinations(2).First(c
        =&gt; c.Sum() == 2020);\n        return (result.First() * result.Last()).ToString();\n    }\n    \n    public
        override string PartTwo(string input)\n    {\n        var entries = input.Integers().OrderBy(x
        =&gt; x).ToList();\n        var result = entries.GetCombinations(3).First(c
        =&gt; c.Sum() == 2020).ToList();\n        return (result[0] * result[1] *
        result[2]).ToString();\n    }", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Solved in C#.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/dylan-smith/AdventOfCode2020/blob/master/src/Days/Day01.cs\"&gt;Code&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://youtu.be/CvMvjvUGz8Q\"&gt;Video&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://www.westerndevs.com/_/Advent-Of-Code-Day01/\"&gt;Blog Post&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public
        override string PartOne(string input)\n{\n    var entries = input.Integers().OrderBy(x
        =&amp;gt; x).ToList();\n    var result = entries.GetCombinations(2).First(c
        =&amp;gt; c.Sum() == 2020);\n    return (result.First() * result.Last()).ToString();\n}\n\npublic
        override string PartTwo(string input)\n{\n    var entries = input.Integers().OrderBy(x
        =&amp;gt; x).ToList();\n    var result = entries.GetCombinations(3).First(c
        =&amp;gt; c.Sum() == 2020).ToList();\n    return (result[0] * result[1] *
        result[2]).ToString();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8jsx5/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8jsx5", "created": 1606805325.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": 1606806833.0, "mod_reason_by": null, "banned_by": null, "ups": 1,
        "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8l8lb",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Rick-T",
        "can_mod_post": false, "created_utc": 1606806564.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_j78hn", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# [Haskell](https://github.com/Rick-T/Advent-of-Code-2k20/blob/master/src/Day01.hs)\n\nUsing
        list comprehensions. It''s possible to make it go faster by not iterating
        the whole list every time. But this solution is too simple and still fast
        enough, so I couldn''t be bothered.\n\nPart1: \n\n    solvePart1 :: [Int]
        -&gt; Int\n    solvePart1 input = head [x * y | x &lt;- input, y &lt;- input,
        x + y == 2020]\n\nPart2:\n\n    solvePart2 :: [Int] -&gt; Int\n    solvePart2
        input = head [x * y * z | x &lt;- input, y &lt;- input, z &lt;- input, x +
        y + z == 2020]", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a
        href=\"https://github.com/Rick-T/Advent-of-Code-2k20/blob/master/src/Day01.hs\"&gt;Haskell&lt;/a&gt;&lt;/h1&gt;\n\n&lt;p&gt;Using
        list comprehensions. It&amp;#39;s possible to make it go faster by not iterating
        the whole list every time. But this solution is too simple and still fast
        enough, so I couldn&amp;#39;t be bothered.&lt;/p&gt;\n\n&lt;p&gt;Part1: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;solvePart1
        :: [Int] -&amp;gt; Int\nsolvePart1 input = head [x * y | x &amp;lt;- input,
        y &amp;lt;- input, x + y == 2020]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;solvePart2
        :: [Int] -&amp;gt; Int\nsolvePart2 input = head [x * y * z | x &amp;lt;- input,
        y &amp;lt;- input, z &amp;lt;- input, x + y + z == 2020]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8l8lb/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8l8lb", "created":
        1606806564.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606814550.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8t5hs", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Mayalabielle",
        "can_mod_post": false, "created_utc": 1606814299.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_2h3tqouf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Elixir, with a custom combinator in case we need it later in the AOC.\n\n    defmodule
        AOC do\n      import AOC.Helper.Input\n    \n      defmodule D1 do\n        def
        run1() do\n          solve(2)\n        end\n    \n        def run2() do\n          solve(3)\n        end\n    \n        def
        solve(len) do\n          get_input(\"D1\")\n          |&gt; split_input()\n          |&gt;
        Enum.map(fn v -&gt;\n            {int, _} = Integer.parse(v)\n            int\n          end)\n          |&gt;
        AOC.Helper.Combinator.combine(len)\n          |&gt; Enum.find(&amp;(Enum.sum(&amp;1)
        == 2020))\n          |&gt; List.flatten()\n          |&gt; Enum.reduce(1,
        &amp;(&amp;2 * &amp;1))\n        end\n      end\n    end\n\nAnd the combinator
        :\n\n      defmodule Combinator do\n        def combine(input, len)\n        def
        combine(_, 0), do: [[]]\n        def combine([], _), do: []\n    \n        def
        combine([h | t], len),\n          do: Enum.map(combine(t, len - 1), &amp;[h
        | &amp;1]) ++ combine(t, len)\n      end\n\n\nAlso my [AOC solutions repo](https://github.com/papey/aoc/tree/master/2k20/aoc)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Elixir, with a custom
        combinator in case we need it later in the AOC.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;defmodule
        AOC do\n  import AOC.Helper.Input\n\n  defmodule D1 do\n    def run1() do\n      solve(2)\n    end\n\n    def
        run2() do\n      solve(3)\n    end\n\n    def solve(len) do\n      get_input(&amp;quot;D1&amp;quot;)\n      |&amp;gt;
        split_input()\n      |&amp;gt; Enum.map(fn v -&amp;gt;\n        {int, _} =
        Integer.parse(v)\n        int\n      end)\n      |&amp;gt; AOC.Helper.Combinator.combine(len)\n      |&amp;gt;
        Enum.find(&amp;amp;(Enum.sum(&amp;amp;1) == 2020))\n      |&amp;gt; List.flatten()\n      |&amp;gt;
        Enum.reduce(1, &amp;amp;(&amp;amp;2 * &amp;amp;1))\n    end\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And
        the combinator :&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;  defmodule Combinator
        do\n    def combine(input, len)\n    def combine(_, 0), do: [[]]\n    def
        combine([], _), do: []\n\n    def combine([h | t], len),\n      do: Enum.map(combine(t,
        len - 1), &amp;amp;[h | &amp;amp;1]) ++ combine(t, len)\n  end\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also
        my &lt;a href=\"https://github.com/papey/aoc/tree/master/2k20/aoc\"&gt;AOC
        solutions repo&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8t5hs/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8t5hs", "created":
        1606814299.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8taab",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606814445.0, "send_replies": true,
        "parent_id": "t1_ge8t5hs", "score": 1, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "The code blocks are screwed up on old.reddit.  Could you please edit it using
        old.reddit''s four-spaces formatting instead of new.reddit''s triple backticks?  Note
        that if you''re using the visual editor, you may have to \"Switch to Markdown\"
        to get Reddit to understand the formatting properly.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": true, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;The code blocks are screwed up on old.reddit.  Could
        you please edit it using old.reddit&amp;#39;s four-spaces formatting instead
        of new.reddit&amp;#39;s triple backticks?  Note that if you&amp;#39;re using
        the visual editor, you may have to &amp;quot;Switch to Markdown&amp;quot;
        to get Reddit to understand the formatting properly.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8taab/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8taab", "created":
        1606814445.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8tepq", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Mayalabielle",
        "can_mod_post": false, "created_utc": 1606814576.0, "send_replies": true,
        "parent_id": "t1_ge8taab", "score": 2, "author_fullname": "t2_2h3tqouf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Oh, didn''t know about this, should be fixed. Thanks !", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Oh, didn&amp;#39;t know about this, should
        be fixed. Thanks !&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8tepq/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8tepq", "created":
        1606814576.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8tf8y",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606814592.0, "send_replies": true,
        "parent_id": "t1_ge8tepq", "score": 1, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "There we go, thanks!", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": true, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There
        we go, thanks!&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8tf8y/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8tf8y", "created":
        1606814592.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": 1688361098.0,
        "mod_reason_by": null, "banned_by": null, "removal_reason": null, "link_id":
        "t3_k4e4lm", "author_flair_template_id": null, "likes": null, "replies": "",
        "user_reports": [], "saved": false, "id": "ge9djtl", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        "DELETED", "no_follow": true, "author": "[deleted]", "can_mod_post": false,
        "send_replies": true, "parent_id": "t1_ge8tf8y", "score": 2, "approved_by":
        null, "mod_note": null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body":
        "[removed]", "awarders": [], "downs": 0, "author_flair_css_class": null, "name":
        "t1_ge9djtl", "collapsed": false, "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;[removed]&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9djtl/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606832390.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606832390.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 4, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gea66km",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606846668.0, "send_replies": true,
        "parent_id": "t1_ge9djtl", "score": 2, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I normally ban bots from /r/adventofcode on site.  That /u/backtickbot is
        actively and *noticeably* reducing my workload on the megathreads, though,
        so... I think I''ve found a bot that''s actually *useful* for once.  It can
        stay as long as it doesn''t get spammy!", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": true, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;I normally ban bots from &lt;a href=\"/r/adventofcode\"&gt;/r/adventofcode&lt;/a&gt;
        on site.  That &lt;a href=\"/u/backtickbot\"&gt;/u/backtickbot&lt;/a&gt; is
        actively and &lt;em&gt;noticeably&lt;/em&gt; reducing my workload on the megathreads,
        though, so... I think I&amp;#39;ve found a bot that&amp;#39;s actually &lt;em&gt;useful&lt;/em&gt;
        for once.  It can stay as long as it doesn&amp;#39;t get spammy!&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea66km/",
        "subreddit_type": "public", "locked": false, "name": "t1_gea66km", "created":
        1606846668.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 5, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "more", "data": {"count": 2, "name": "t1_ge8u2rp", "id": "ge8u2rp",
        "parent_id": "t1_ge8t5hs", "depth": 1, "children": ["ge8u2rp"]}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8u58v",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Ryuuji159",
        "can_mod_post": false, "created_utc": 1606815370.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_zvsc0", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Stupid simple python solution, I suppose that is not perfect with all inputs,
        but it works for this test cases\n\n    with open(''report_repair.in'') as
        f:\n        data = [int(line) for line in f]\n        data.sort()\n\n    for
        x in range(len(data)):\n        rest = 2020 - data[x]\n\n        for y in
        range(x + 1, len(data)):\n            second_rest = rest - data[y]\n\n            if
        second_rest in data:\n                print((data[x], data[y], second_rest),
        data[x] * data[y] * second_rest)", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Stupid simple python solution, I suppose that is
        not perfect with all inputs, but it works for this test cases&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with
        open(&amp;#39;report_repair.in&amp;#39;) as f:\n    data = [int(line) for
        line in f]\n    data.sort()\n\nfor x in range(len(data)):\n    rest = 2020
        - data[x]\n\n    for y in range(x + 1, len(data)):\n        second_rest =
        rest - data[y]\n\n        if second_rest in data:\n            print((data[x],
        data[y], second_rest), data[x] * data[y] * second_rest)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8u58v/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8u58v", "created":
        1606815370.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8u5nx",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "backtickbot",
        "can_mod_post": false, "created_utc": 1606815383.0, "send_replies": true,
        "parent_id": "t1_ge8u58v", "score": 3, "author_fullname": "t2_8n9fijwc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Hello, Ryuuji159: code blocks using backticks (\\`\\`\\`) don''t work on
        all versions of Reddit!\n\nSome users see [this](https://stalas.alm.lt/backformat/ge8u58v.png)
        / [this](https://stalas.alm.lt/backformat/ge8u58v.html) instead.\n\nTo fix
        this, indent every line with **4 spaces** instead. It''s a bit annoying, but
        then your code blocks are properly formatted for everyone.\n\nAn easy way
        to do this is to use the [code-block button in the editor](https://stalas.alm.lt/files/new-reddit-codeblock.png).
        If it''s not working, try switching to the fancy-pants editor and back again.\n\n[Comment
        with formatting fixed for old.reddit.com users](https://np.reddit.com/r/backtickbot/comments/k4ht55/httpsnpredditcomradventofcodecommentsk4e4lm2020/)\n\n[FAQ](https://www.reddit.com/r/backtickbot/wiki/index)\n\n^(You
        can opt out by replying with backtickopt6 to this comment.)", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Hello, Ryuuji159: code blocks using backticks
        (```) don&amp;#39;t work on all versions of Reddit!&lt;/p&gt;\n\n&lt;p&gt;Some
        users see &lt;a href=\"https://stalas.alm.lt/backformat/ge8u58v.png\"&gt;this&lt;/a&gt;
        / &lt;a href=\"https://stalas.alm.lt/backformat/ge8u58v.html\"&gt;this&lt;/a&gt;
        instead.&lt;/p&gt;\n\n&lt;p&gt;To fix this, indent every line with &lt;strong&gt;4
        spaces&lt;/strong&gt; instead. It&amp;#39;s a bit annoying, but then your
        code blocks are properly formatted for everyone.&lt;/p&gt;\n\n&lt;p&gt;An
        easy way to do this is to use the &lt;a href=\"https://stalas.alm.lt/files/new-reddit-codeblock.png\"&gt;code-block
        button in the editor&lt;/a&gt;. If it&amp;#39;s not working, try switching
        to the fancy-pants editor and back again.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://np.reddit.com/r/backtickbot/comments/k4ht55/httpsnpredditcomradventofcodecommentsk4e4lm2020/\"&gt;Comment
        with formatting fixed for old.reddit.com users&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://www.reddit.com/r/backtickbot/wiki/index\"&gt;FAQ&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;You
        can opt out by replying with backtickopt6 to this comment.&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8u5nx/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8u5nx", "created":
        1606815383.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606816346.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8ub8c", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "GamerWoona",
        "can_mod_post": false, "created_utc": 1606815552.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_tv3rm", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**C++**\n\n[**https://github.com/neiomi1/AdventofCode2020/blob/master/Day\\_01/Day\\_01.cpp**](https://github.com/neiomi1/AdventofCode2020/blob/master/Day_01/Day_01.cpp)\n\n    int
        find_triple(int sum_goal) {\n    \n        for (int i = 0; i &lt; num_entries;
        i++) {\n    \n            for (int j = i + 1; j &lt; num_entries; j++) {\n    \n                for
        (int k = j + 1; k &lt; num_entries; k++) {\n    \n                    int
        temp_sum = entries[i] + entries[j] + entries[k];\n    \n                    if
        (temp_sum &gt; sum_goal) {\n    \n                        break;\n    \n                    }\n    \n                    if
        (temp_sum == sum_goal) {\n    \n                        return entries[i]
        * entries[j] * entries[k];\n    \n                    }\n    \n                }\n    \n                if
        (entries[i] + entries[j] &gt; sum_goal) {\n    \n                    break;\n    \n                }\n    \n            }\n    \n            if
        (entries[i] &gt; sum_goal) {    \n                break;\n            }\n        }\n    \n    return
        NULL;\n    \n    }\n\nusing a sorted vector to save some computation time.
        Ended up with \\~500 microsec. avg. Worst case in O(n\\^3), so not that great
        \\^\\^;", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;C++&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/neiomi1/AdventofCode2020/blob/master/Day_01/Day_01.cpp\"&gt;&lt;strong&gt;https://github.com/neiomi1/AdventofCode2020/blob/master/Day_01/Day_01.cpp&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;int
        find_triple(int sum_goal) {\n\n    for (int i = 0; i &amp;lt; num_entries;
        i++) {\n\n        for (int j = i + 1; j &amp;lt; num_entries; j++) {\n\n            for
        (int k = j + 1; k &amp;lt; num_entries; k++) {\n\n                int temp_sum
        = entries[i] + entries[j] + entries[k];\n\n                if (temp_sum &amp;gt;
        sum_goal) {\n\n                    break;\n\n                }\n\n                if
        (temp_sum == sum_goal) {\n\n                    return entries[i] * entries[j]
        * entries[k];\n\n                }\n\n            }\n\n            if (entries[i]
        + entries[j] &amp;gt; sum_goal) {\n\n                break;\n\n            }\n\n        }\n\n        if
        (entries[i] &amp;gt; sum_goal) {    \n            break;\n        }\n    }\n\nreturn
        NULL;\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;using a sorted vector to
        save some computation time. Ended up with ~500 microsec. avg. Worst case in
        O(n^3), so not that great ^^;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8ub8c/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8ub8c", "created": 1606815552.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "removal_reason":
        null, "link_id": "t3_k4e4lm", "author_flair_template_id": null, "likes": null,
        "replies": "", "user_reports": [], "saved": false, "id": "ge8ucg7", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "[deleted]", "can_mod_post": false, "send_replies":
        true, "parent_id": "t3_k4e4lm", "score": 1, "approved_by": null, "mod_note":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "Another Rust,
        day one part two, single-threaded runs between 1.5 and 2 microseconds (uses
        crossbeam-utils but not necessary)\n\nhttps://gist.github.com/mental32/5238c5652613995c58c932f3d303cd91",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_ge8ucg7",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Another
        Rust, day one part two, single-threaded runs between 1.5 and 2 microseconds
        (uses crossbeam-utils but not necessary)&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://gist.github.com/mental32/5238c5652613995c58c932f3d303cd91\"&gt;https://gist.github.com/mental32/5238c5652613995c58c932f3d303cd91&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8ucg7/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606815589.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606815589.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8ugt2",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "enelen",
        "can_mod_post": false, "created_utc": 1606815722.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 2, "author_fullname": "t2_t7yj3", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**R**\n\n        # Part 1\n        m &lt;- expand.grid(vals, vals)\n        sums
        &lt;- rowSums(m)\n        idx &lt;- which(sums == 2020)\n        prod(m[idx[1],
        ])\n        \n        # Part 2\n        m2 &lt;- expand.grid(vals, vals, vals)\n        sums2
        &lt;- rowSums(m2)\n        idx2 &lt;- which(sums2 == 2020)\n        prod(m2[idx2[1],
        ])", "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;R&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    #
        Part 1\n    m &amp;lt;- expand.grid(vals, vals)\n    sums &amp;lt;- rowSums(m)\n    idx
        &amp;lt;- which(sums == 2020)\n    prod(m[idx[1], ])\n\n    # Part 2\n    m2
        &amp;lt;- expand.grid(vals, vals, vals)\n    sums2 &amp;lt;- rowSums(m2)\n    idx2
        &amp;lt;- which(sums2 == 2020)\n    prod(m2[idx2[1], ])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8ugt2/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8ugt2", "created":
        1606815722.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8umgx",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "polaris64",
        "can_mod_post": false, "created_utc": 1606815901.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_do5b8", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# Python 3\n\nGeneral solution for both parts using `itertools.combinations`:\n\n    from
        itertools import combinations\n    \n    def solve(inp, size):\n        for
        comb in combinations(inp, size):\n            if sum(comb) == 2020:\n                return
        reduce(lambda x, y: x * y, comb)\n\nOne-liners (no error checking) using only
        generator expressions and `reduce`:\n\n    from functools import reduce\n    \n    def
        solve_p1(inp):\n        return reduce(lambda x, y: x * y, next((x,y) for x
        in inp for y in inp if y != x and x + y == 2020))\n    \n    def solve_p2(inp):\n        return
        reduce(lambda x, y: x * y, next((x,y,z) for x in inp for y in inp for z in
        inp if x != y != z and x + y + z == 2020))", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;h1&gt;Python 3&lt;/h1&gt;\n\n&lt;p&gt;General solution
        for both parts using &lt;code&gt;itertools.combinations&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from
        itertools import combinations\n\ndef solve(inp, size):\n    for comb in combinations(inp,
        size):\n        if sum(comb) == 2020:\n            return reduce(lambda x,
        y: x * y, comb)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;One-liners (no error
        checking) using only generator expressions and &lt;code&gt;reduce&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from
        functools import reduce\n\ndef solve_p1(inp):\n    return reduce(lambda x,
        y: x * y, next((x,y) for x in inp for y in inp if y != x and x + y == 2020))\n\ndef
        solve_p2(inp):\n    return reduce(lambda x, y: x * y, next((x,y,z) for x in
        inp for y in inp for z in inp if x != y != z and x + y + z == 2020))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8umgx/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8umgx", "created":
        1606815901.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8w7a0",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "zopatista",
        "can_mod_post": false, "created_utc": 1606817655.0, "send_replies": true,
        "parent_id": "t1_ge8umgx", "score": 2, "author_fullname": "t2_7xrf5", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Instead of `reduce()`, use `operator.mul()`! `return mul(*comb)` is sooo
        much simpler :-)", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Instead
        of &lt;code&gt;reduce()&lt;/code&gt;, use &lt;code&gt;operator.mul()&lt;/code&gt;!
        &lt;code&gt;return mul(*comb)&lt;/code&gt; is sooo much simpler :-)&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8w7a0/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8w7a0", "created":
        1606817655.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 4, "name": "t1_ge8xst5", "id": "ge8xst5", "parent_id":
        "t1_ge8w7a0", "depth": 2, "children": ["ge8xst5", "ge8wvtw"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8uxge",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Russiaball",
        "can_mod_post": false, "created_utc": 1606816241.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_gthtb", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "[C++]\nGoing for speed here, since I woke up way past the (no cleared) leaderboards.
        Probably missed some optimizations, but runs in 666 us.\n\n    for (int&amp;
        val : numbers) {\n\t\tif (val &lt; min) min = val;\n\t}\n\n\tmin = 2020 -
        min;\n\n\tfor (int&amp; val : numbers) {\n\t\tif (val &lt;= min) {\n\t\t\tsecond_numbers.push_back(val);\n\t\t}\n\t}\n\n\tnumbers
        = second_numbers;\n\n\tfor (int&amp; val1 : numbers) {\n\t\tif (val1 &gt;
        min) continue;\n\t\ttarget1 = 2020 - val1;\n\t\tfor (int&amp; val2 : numbers)
        {\n\n\t\t\tif (val2 == target1) {\n\t\t\t\tanswer1 = val1 * val2;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse
        if (val1 + val2 &gt; min) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttarget2 =
        2020 - val1 - val2;\n\t\t\tfor (int&amp; val3 : numbers) {\n\t\t\t\tif (val3
        == target2) {\n\t\t\t\t\tanswer2 = val1 * val2 * val3;\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[C++]\nGoing for speed
        here, since I woke up way past the (no cleared) leaderboards. Probably missed
        some optimizations, but runs in 666 us.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for
        (int&amp;amp; val : numbers) {\n    if (val &amp;lt; min) min = val;\n}\n\nmin
        = 2020 - min;\n\nfor (int&amp;amp; val : numbers) {\n    if (val &amp;lt;=
        min) {\n        second_numbers.push_back(val);\n    }\n}\n\nnumbers = second_numbers;\n\nfor
        (int&amp;amp; val1 : numbers) {\n    if (val1 &amp;gt; min) continue;\n    target1
        = 2020 - val1;\n    for (int&amp;amp; val2 : numbers) {\n\n        if (val2
        == target1) {\n            answer1 = val1 * val2;\n            continue;\n        }\n        else
        if (val1 + val2 &amp;gt; min) {\n            continue;\n        }\n\n        target2
        = 2020 - val1 - val2;\n        for (int&amp;amp; val3 : numbers) {\n            if
        (val3 == target2) {\n                answer2 = val1 * val2 * val3;\n            }\n        }\n\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8uxge/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8uxge", "created":
        1606816241.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606819912.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8v5uh", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "DiscombobulatedAd208",
        "can_mod_post": false, "created_utc": 1606816501.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_6z2hq05c", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "[Clojure](https://github.com/grierson/Challenges/blob/master/advent/src/aoc2020/01.clj)\n\n    (ns
        aoc2020.01\n      (:require [clojure.java.io :as io]))\n    \n    (def data
        (line-seq (io/reader (io/resource \"aoc2020/01.txt\"))))\n    (def nums (map
        #(Long/parseLong %) data))\n    \n    (first (for [x nums\n                 y
        nums\n                 :when (= 2020 (+ x y))]\n             (* x y)))", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/grierson/Challenges/blob/master/advent/src/aoc2020/01.clj\"&gt;Clojure&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(ns
        aoc2020.01\n  (:require [clojure.java.io :as io]))\n\n(def data (line-seq
        (io/reader (io/resource &amp;quot;aoc2020/01.txt&amp;quot;))))\n(def nums
        (map #(Long/parseLong %) data))\n\n(first (for [x nums\n             y nums\n             :when
        (= 2020 (+ x y))]\n         (* x y)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8v5uh/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8v5uh", "created":
        1606816501.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8vf78", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "## F# \n\n[solution on github](https://github.com/sotolf2/aoc2020/blob/main/day1.fsx)\n\nI
        think my combination function is quite slow since it''s build on lists, but
        I haven''t quite understood sequence comprehensions yet, so it will have to
        do, at least it creates the correct answers ;)\n\nLearning is fun, and this
        was a nice soft start :)", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_ge8vf78", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;h2&gt;F#&lt;/h2&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/sotolf2/aoc2020/blob/main/day1.fsx\"&gt;solution
        on github&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I think my combination function
        is quite slow since it&amp;#39;s build on lists, but I haven&amp;#39;t quite
        understood sequence comprehensions yet, so it will have to do, at least it
        creates the correct answers ;)&lt;/p&gt;\n\n&lt;p&gt;Learning is fun, and
        this was a nice soft start :)&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "can_gild": false, "top_awarded_type": null, "unrepliable_reason": null, "author_flair_text_color":
        "dark", "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8vf78/",
        "num_reports": null, "locked": false, "report_reasons": null, "created": 1606816787.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1606816787.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8vrzv",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Alligatronica",
        "can_mod_post": false, "created_utc": 1606817182.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_ehco4", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# JavaScript/Node.js\n\nI figured I''d do something funky and functional
        for part 1, then really phoned it in for part 2\n\n    const part1 = input
        =&gt; input.split(''\\n'').map(Number).map(\n      (x,i,a)=&gt;{\n        const
        y = a.filter(y=&gt;x+y===2020)[0]\n        return y?x*y:null\n      }\n    ).filter(x=&gt;x)[0]\n    const
        part2 = input =&gt; {\n      const list = input.split(''\\n'').map(Number)\n      let
        answer = 0\n      for(let i=0;i&lt;list.length;i++){\n        for(let j=0;j&lt;list.length;j++){\n          for(let
        k=0;k&lt;list.length;k++){\n            if(\n              i!=j &amp;&amp;
        i!=k &amp;&amp; j!=k &amp;&amp;\n              list[i]+list[j]+list[k]===2020\n            ){\n              answer=list[i]*list[j]*list[k]\n              break;\n            }\n          }\n          if(answer)break;\n        }\n        if(answer)break;\n      }\n      return
        answer\n    }", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;JavaScript/Node.js&lt;/h1&gt;\n\n&lt;p&gt;I
        figured I&amp;#39;d do something funky and functional for part 1, then really
        phoned it in for part 2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const part1 =
        input =&amp;gt; input.split(&amp;#39;\\n&amp;#39;).map(Number).map(\n  (x,i,a)=&amp;gt;{\n    const
        y = a.filter(y=&amp;gt;x+y===2020)[0]\n    return y?x*y:null\n  }\n).filter(x=&amp;gt;x)[0]\nconst
        part2 = input =&amp;gt; {\n  const list = input.split(&amp;#39;\\n&amp;#39;).map(Number)\n  let
        answer = 0\n  for(let i=0;i&amp;lt;list.length;i++){\n    for(let j=0;j&amp;lt;list.length;j++){\n      for(let
        k=0;k&amp;lt;list.length;k++){\n        if(\n          i!=j &amp;amp;&amp;amp;
        i!=k &amp;amp;&amp;amp; j!=k &amp;amp;&amp;amp;\n          list[i]+list[j]+list[k]===2020\n        ){\n          answer=list[i]*list[j]*list[k]\n          break;\n        }\n      }\n      if(answer)break;\n    }\n    if(answer)break;\n  }\n  return
        answer\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8vrzv/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8vrzv", "created":
        1606817182.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8vu5a",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "8483",
        "can_mod_post": false, "created_utc": 1606817250.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_m68sl", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Node \n\n\n    let fs = require(\"fs\");\n    \n    let inputFile = `aoc2001.txt`;\n    let
        input = fs.readFileSync(inputFile, \"utf8\");\n    let data = input.split(/\\r?\\n/);\n    \n    data
        = data.map((item) =&gt; parseInt(item));\n    \n    data.map((a) =&gt; {\n        data.map((b)
        =&gt; {\n            if (a + b === 2020) {\n                console.log(a
        * b);\n            }\n        });\n    });\n    \n    data.map((a) =&gt; {\n        data.map((b)
        =&gt; {\n            let c = data.filter((item) =&gt; item === 2020 - a -
        b);\n            if (2020 - a - b - c === 0) {\n                console.log(a
        * b * c);\n            }\n        });\n    });", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Node &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let fs
        = require(&amp;quot;fs&amp;quot;);\n\nlet inputFile = `aoc2001.txt`;\nlet
        input = fs.readFileSync(inputFile, &amp;quot;utf8&amp;quot;);\nlet data =
        input.split(/\\r?\\n/);\n\ndata = data.map((item) =&amp;gt; parseInt(item));\n\ndata.map((a)
        =&amp;gt; {\n    data.map((b) =&amp;gt; {\n        if (a + b === 2020) {\n            console.log(a
        * b);\n        }\n    });\n});\n\ndata.map((a) =&amp;gt; {\n    data.map((b)
        =&amp;gt; {\n        let c = data.filter((item) =&amp;gt; item === 2020 -
        a - b);\n        if (2020 - a - b - c === 0) {\n            console.log(a
        * b * c);\n        }\n    });\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8vu5a/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8vu5a", "created":
        1606817250.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8vuiy",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "backtickbot",
        "can_mod_post": false, "created_utc": 1606817262.0, "send_replies": true,
        "parent_id": "t1_ge8vu5a", "score": 2, "author_fullname": "t2_8n9fijwc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Hello, 8483: code blocks using backticks (\\`\\`\\`) don''t work on all versions
        of Reddit!\n\nSome users see [this](https://stalas.alm.lt/backformat/ge8vu5a.png)
        / [this](https://stalas.alm.lt/backformat/ge8vu5a.html) instead.\n\nTo fix
        this, indent every line with **4 spaces** instead. It''s a bit annoying, but
        then your code blocks are properly formatted for everyone.\n\nAn easy way
        to do this is to use the [code-block button in the editor](https://stalas.alm.lt/files/new-reddit-codeblock.png).
        If it''s not working, try switching to the fancy-pants editor and back again.\n\n[Comment
        with formatting fixed for old.reddit.com users](https://np.reddit.com/r/backtickbot/comments/k4i6tx/httpsnpredditcomradventofcodecommentsk4e4lm2020/)\n\n[FAQ](https://www.reddit.com/r/backtickbot/wiki/index)\n\n^(You
        can opt out by replying with backtickopt6 to this comment.)", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Hello, 8483: code blocks using backticks
        (```) don&amp;#39;t work on all versions of Reddit!&lt;/p&gt;\n\n&lt;p&gt;Some
        users see &lt;a href=\"https://stalas.alm.lt/backformat/ge8vu5a.png\"&gt;this&lt;/a&gt;
        / &lt;a href=\"https://stalas.alm.lt/backformat/ge8vu5a.html\"&gt;this&lt;/a&gt;
        instead.&lt;/p&gt;\n\n&lt;p&gt;To fix this, indent every line with &lt;strong&gt;4
        spaces&lt;/strong&gt; instead. It&amp;#39;s a bit annoying, but then your
        code blocks are properly formatted for everyone.&lt;/p&gt;\n\n&lt;p&gt;An
        easy way to do this is to use the &lt;a href=\"https://stalas.alm.lt/files/new-reddit-codeblock.png\"&gt;code-block
        button in the editor&lt;/a&gt;. If it&amp;#39;s not working, try switching
        to the fancy-pants editor and back again.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://np.reddit.com/r/backtickbot/comments/k4i6tx/httpsnpredditcomradventofcodecommentsk4e4lm2020/\"&gt;Comment
        with formatting fixed for old.reddit.com users&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://www.reddit.com/r/backtickbot/wiki/index\"&gt;FAQ&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;You
        can opt out by replying with backtickopt6 to this comment.&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8vuiy/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8vuiy", "created":
        1606817262.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8w7ap",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Tarmen",
        "can_mod_post": false, "created_utc": 1606817655.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_7mjdo", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Clojure\n\nAfter the first part I was really set on a solution that does
        a single pass so it got a bit weird\n\n    (ns aoc2020.day1\n      (:require  [clojure.set
        :as s]))\n\n    (defn normalize [a]\n      (max a (- 2020 a)))\n    (defn
        step [acc cur]\n      (let [cur (normalize cur)]\n        (if (acc cur)\n          (reduced
        cur)\n          (conj acc cur))))\n\n    (defn step2 [acc cur]\n      (if-let
        [[a b] (get-in acc [:l2 cur])]\n        (reduced (* a b cur))\n        (let
        [candidates (into {} (for [k (seq (:l1 acc)) :when (&lt; (+ k cur) 2020)]
        [(- 2020 cur k) [cur k]]))]\n          (-&gt; acc\n              (update :l1
        conj cur)\n              (update :l2 s/union candidates)))))\n\n    (defn
        solution1 [ls] (reduce step #{} ls))\n    (defn solution2 [ls] (reduce step2
        {:l1 #{} :l2 {}} ls))\n\n    (defn solve [f]\n      (with-open [rdr (clojure.java.io/reader
        \"resources/day1.input\")]\n        (-&gt;&gt; (line-seq rdr)\n             (map
        #(Integer/parseInt %))\n             (f))))\n    (defn solve1 [] (solve (comp
        #(* %1 (- 2020 %1)) solution1)))\n    (defn solve2 [] (solve solution2))",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Clojure&lt;/p&gt;\n\n&lt;p&gt;After
        the first part I was really set on a solution that does a single pass so it
        got a bit weird&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(ns aoc2020.day1\n  (:require  [clojure.set
        :as s]))\n\n(defn normalize [a]\n  (max a (- 2020 a)))\n(defn step [acc cur]\n  (let
        [cur (normalize cur)]\n    (if (acc cur)\n      (reduced cur)\n      (conj
        acc cur))))\n\n(defn step2 [acc cur]\n  (if-let [[a b] (get-in acc [:l2 cur])]\n    (reduced
        (* a b cur))\n    (let [candidates (into {} (for [k (seq (:l1 acc)) :when
        (&amp;lt; (+ k cur) 2020)] [(- 2020 cur k) [cur k]]))]\n      (-&amp;gt; acc\n          (update
        :l1 conj cur)\n          (update :l2 s/union candidates)))))\n\n(defn solution1
        [ls] (reduce step #{} ls))\n(defn solution2 [ls] (reduce step2 {:l1 #{} :l2
        {}} ls))\n\n(defn solve [f]\n  (with-open [rdr (clojure.java.io/reader &amp;quot;resources/day1.input&amp;quot;)]\n    (-&amp;gt;&amp;gt;
        (line-seq rdr)\n         (map #(Integer/parseInt %))\n         (f))))\n(defn
        solve1 [] (solve (comp #(* %1 (- 2020 %1)) solution1)))\n(defn solve2 [] (solve
        solution2))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8w7ap/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8w7ap", "created":
        1606817655.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8wy22",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Bearcasso",
        "can_mod_post": false, "created_utc": 1606818487.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_mc9xl", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "In Python, i used the data as txt file\n\n    data = [word.strip(''\\n'')
        for word in open(''expense_report.txt'', ''r'').readlines()]\n    data = list(map(int,
        data))\n    \n    for n in range(len(data)):\n        for i in range(len(data)):\n            for
        j in range(len(data)):\n                if data[n]+data[i]+data[j] == 2020:\n                    print(data[n]*data[i]*data[j])",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In Python, i used the
        data as txt file&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;data = [word.strip(&amp;#39;\\n&amp;#39;)
        for word in open(&amp;#39;expense_report.txt&amp;#39;, &amp;#39;r&amp;#39;).readlines()]\ndata
        = list(map(int, data))\n\nfor n in range(len(data)):\n    for i in range(len(data)):\n        for
        j in range(len(data)):\n            if data[n]+data[i]+data[j] == 2020:\n                print(data[n]*data[i]*data[j])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8wy22/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8wy22", "created":
        1606818487.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8ygny",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "A-UNDERSCORE-D",
        "can_mod_post": false, "created_utc": 1606820122.0, "send_replies": true,
        "parent_id": "t1_ge8wy22", "score": 2, "author_fullname": "t2_16m0x2", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Rather than doing two steps for your data (especially with one as a list
        comp), try something like: `[int(w) for w in open(\"input.txt\").read().splitlines()]`\n\nsplitlines()
        already drops your \\n for you, and you can use the int constructor directly
        in the comp", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Rather
        than doing two steps for your data (especially with one as a list comp), try
        something like: &lt;code&gt;[int(w) for w in open(&amp;quot;input.txt&amp;quot;).read().splitlines()]&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;splitlines()
        already drops your \\n for you, and you can use the int constructor directly
        in the comp&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8ygny/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8ygny", "created":
        1606820122.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 4, "name": "t1_ge91edq", "id": "ge91edq", "parent_id":
        "t1_ge8ygny", "depth": 2, "children": ["ge91edq", "gea47tt"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge91fcc",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Manatee2k3",
        "can_mod_post": false, "created_utc": 1606823207.0, "send_replies": true,
        "parent_id": "t1_ge8wy22", "score": 2, "author_fullname": "t2_4m2rg9bj", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "This was very helpfull thankyou.", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;This was very helpfull thankyou.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge91fcc/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge91fcc", "created":
        1606823207.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606819310.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8x2ax", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "tomflumery",
        "can_mod_post": false, "created_utc": 1606818614.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_1n1f8ga0", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Rust itertools:\n\n    use itertools::Itertools;\n    \n    fn main() {\n        let
        input = include_str!(\"input.txt\").trim().lines().map(|s| s.parse::&lt;u32&gt;().unwrap());\n    \n        let
        part1 = input.clone().combinations(2)\n                                 .find(|v|
        v[0] + v[1] == 2020)\n                                 .map(|v| v[0] * v[1]);\n    \n        let
        part2 = input.combinations(3)\n                         .find(|v| v[0] + v[1]
        + v[2] == 2020)\n                         .map(|v| v[0] * v[1] * v[2]);\n    \n        println!(\"{},
        {}\", part1.unwrap(), part2.unwrap());\n    }", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Rust itertools:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use
        itertools::Itertools;\n\nfn main() {\n    let input = include_str!(&amp;quot;input.txt&amp;quot;).trim().lines().map(|s|
        s.parse::&amp;lt;u32&amp;gt;().unwrap());\n\n    let part1 = input.clone().combinations(2)\n                             .find(|v|
        v[0] + v[1] == 2020)\n                             .map(|v| v[0] * v[1]);\n\n    let
        part2 = input.combinations(3)\n                     .find(|v| v[0] + v[1]
        + v[2] == 2020)\n                     .map(|v| v[0] * v[1] * v[2]);\n\n    println!(&amp;quot;{},
        {}&amp;quot;, part1.unwrap(), part2.unwrap());\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8x2ax/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8x2ax", "created":
        1606818614.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8xday",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "masterarms",
        "can_mod_post": false, "created_utc": 1606818951.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_a4tv5", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "## Tcl\n\n    proc parts data {\n    set data [lsort -integer $data]\n    set
        l [llength $data]\n    for {set x 0} {$x &lt; $l} {incr x} {\n            for
        {set y [expr {$x+1}]} {$y &lt; $l} {incr y} {\n                set a [lindex
        $data $x]\n                set b [lindex $data $y]\n                if {$a
        + $b &gt; 2020} break\n                 if {$a+$b == 2020} {\n                    puts  Part1:\\t[
        * $a $b ]\n                }\n                for {set z [expr {$y+1}]} {$z
        &lt; $l} {incr z} {\n                    set c [lindex $data $z]  \n                    if
        {$a+$b+$c == 2020} {\n                    puts  Part2:\\t[* $a $b $c]\n                   \n                }           \n            }\n        }\n    }\n    }\n    parts
        $data", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h2&gt;Tcl&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;proc
        parts data {\nset data [lsort -integer $data]\nset l [llength $data]\nfor
        {set x 0} {$x &amp;lt; $l} {incr x} {\n        for {set y [expr {$x+1}]} {$y
        &amp;lt; $l} {incr y} {\n            set a [lindex $data $x]\n            set
        b [lindex $data $y]\n            if {$a + $b &amp;gt; 2020} break\n             if
        {$a+$b == 2020} {\n                puts  Part1:\\t[ * $a $b ]\n            }\n            for
        {set z [expr {$y+1}]} {$z &amp;lt; $l} {incr z} {\n                set c [lindex
        $data $z]  \n                if {$a+$b+$c == 2020} {\n                puts  Part2:\\t[*
        $a $b $c]\n\n            }           \n        }\n    }\n}\n}\nparts $data\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8xday/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8xday", "created":
        1606818951.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8xemy",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "btqr",
        "can_mod_post": false, "created_utc": 1606818990.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_1iqv26ui", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Java\n\n    import java.util.*;\n    \n    public class Main {\n        public
        static void main(String[] args) {\n            Scanner in = new Scanner(System.in);\n            List&lt;Integer&gt;
        numbers = new ArrayList&lt;&gt;();\n            for (int i = 0; i &lt; 200;
        i++) {\n                numbers.add(in.nextInt());\n            }\n    \n            Collections.sort(numbers);\n            for
        (int i = 0; i &lt; 200; i++) {\n                for (int j = i + 1; j &lt;
        200; j++) {\n                    int a = numbers.get(i);\n                    int
        b = numbers.get(j);\n                    int idx = Collections.binarySearch(numbers,
        2020 - a - b);\n                    if (idx &gt;= 0) {\n                        System.out.println(a
        * b * numbers.get(idx));\n                        return;\n                    }\n                }\n            }\n        }\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Java&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        java.util.*;\n\npublic class Main {\n    public static void main(String[]
        args) {\n        Scanner in = new Scanner(System.in);\n        List&amp;lt;Integer&amp;gt;
        numbers = new ArrayList&amp;lt;&amp;gt;();\n        for (int i = 0; i &amp;lt;
        200; i++) {\n            numbers.add(in.nextInt());\n        }\n\n        Collections.sort(numbers);\n        for
        (int i = 0; i &amp;lt; 200; i++) {\n            for (int j = i + 1; j &amp;lt;
        200; j++) {\n                int a = numbers.get(i);\n                int
        b = numbers.get(j);\n                int idx = Collections.binarySearch(numbers,
        2020 - a - b);\n                if (idx &amp;gt;= 0) {\n                    System.out.println(a
        * b * numbers.get(idx));\n                    return;\n                }\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8xemy/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8xemy", "created":
        1606818990.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8xree",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "hetzenmat",
        "can_mod_post": false, "created_utc": 1606819369.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_144tta", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My solution using Prolog (tested with SWI Prolog, not sure if it also works
        with other engines):\n\n    main :-\n    \tstdin_lines(L),\n    \tmap2(string_number,
        L, N),\n    \taoc1_1(N, 2020, R1),\n    \taoc1_2(N, R2),\n    \twrite(\"Part
        1: \"),\n    \twriteln(R1),\n    \twrite(\"Part 2: \"),\n    \twriteln(R2).\n    \n    stdin_lines([])
        :-\n    \tcurrent_input(I),\n    \tat_end_of_stream(I).\n    \n    stdin_lines(L)
        :-\n    \tcurrent_input(Input),\n    \tread_string(Input, \"\\n\", \"\\r\\t
        \", End, String),\n    \t(End = -1 -&gt;\n    \t\tL = [String]\n    \t; stdin_lines(T),
        L = [String | T]).\n    \n    map2(_, [], []).\n    map2(F, [L|T], [H|R])
        :-\n    \tcall(F, L, H),\n    \tmap2(F, T, R).\n    \n    string_number(X,
        Y) :- number_string(Y, X).\n    \n    find_sums(R, E, [H|_], E, H) :- E +
        H =:= R.\n    find_sums(R, E, [_|T], A, B) :- find_sums(R, E, T, A, B).\n    \n    aoc1_1([H|T],
        E, R) :-\n    \t(find_sums(E, H, T, A, B) -&gt;\n    \t\tR is A * B;\n    \t\taoc1_1(T,
        E, R)).\n    \n    aoc1_2([A | T], R) :-\n    \tD is 2020 - A,\n    \t(aoc1_1(T,
        D, B) -&gt; R is B * A\n    \t; aoc1_2(T, R)).", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;My solution using Prolog (tested with SWI Prolog,
        not sure if it also works with other engines):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;main
        :-\n    stdin_lines(L),\n    map2(string_number, L, N),\n    aoc1_1(N, 2020,
        R1),\n    aoc1_2(N, R2),\n    write(&amp;quot;Part 1: &amp;quot;),\n    writeln(R1),\n    write(&amp;quot;Part
        2: &amp;quot;),\n    writeln(R2).\n\nstdin_lines([]) :-\n    current_input(I),\n    at_end_of_stream(I).\n\nstdin_lines(L)
        :-\n    current_input(Input),\n    read_string(Input, &amp;quot;\\n&amp;quot;,
        &amp;quot;\\r\\t &amp;quot;, End, String),\n    (End = -1 -&amp;gt;\n        L
        = [String]\n    ; stdin_lines(T), L = [String | T]).\n\nmap2(_, [], []).\nmap2(F,
        [L|T], [H|R]) :-\n    call(F, L, H),\n    map2(F, T, R).\n\nstring_number(X,
        Y) :- number_string(Y, X).\n\nfind_sums(R, E, [H|_], E, H) :- E + H =:= R.\nfind_sums(R,
        E, [_|T], A, B) :- find_sums(R, E, T, A, B).\n\naoc1_1([H|T], E, R) :-\n    (find_sums(E,
        H, T, A, B) -&amp;gt;\n        R is A * B;\n        aoc1_1(T, E, R)).\n\naoc1_2([A
        | T], R) :-\n    D is 2020 - A,\n    (aoc1_1(T, D, B) -&amp;gt; R is B * A\n    ;
        aoc1_2(T, R)).\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8xree/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8xree", "created": 1606819369.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "ge8yk7u", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "hackersleepyhead", "can_mod_post": false,
        "created_utc": 1606820227.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 1, "author_fullname": "t2_3kuixb2", "report_reasons": null, "approved_by":
        null, "all_awardings": [], "collapsed": false, "body": "Elixir \n\n[PART 01](https://github.com/venkatesh73/aoc/blob/master/2020/elixir/expense_report.ex)\n\n[PART
        02](https://github.com/venkatesh73/aoc/blob/master/2020/elixir/expense_report_adv.ex)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Elixir &lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/venkatesh73/aoc/blob/master/2020/elixir/expense_report.ex\"&gt;PART
        01&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/venkatesh73/aoc/blob/master/2020/elixir/expense_report_adv.ex\"&gt;PART
        02&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8yk7u/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8yk7u", "created":
        1606820227.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8yog2",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "jtgorn",
        "can_mod_post": false, "created_utc": 1606820353.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_2nr7xyfi", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Ruby  \n\n    $a = File.readlines(\"1.txt\").collect(&amp;:to_i)\n\n    def
        sumsto(total)\n      $a &amp; $a.collect { |x| total - x }\n    end\n\n    def
        summable(total)\n      !sumsto(total).empty?\n    end\n\n    print \"Result
        1: \",sumsto(2020).reduce(1, :*)\n    print \"\\nResult 2: \", $a.select{
        |i| summable(2020-i) }.reduce(1, :*)", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Ruby  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$a = File.readlines(&amp;quot;1.txt&amp;quot;).collect(&amp;amp;:to_i)\n\ndef
        sumsto(total)\n  $a &amp;amp; $a.collect { |x| total - x }\nend\n\ndef summable(total)\n  !sumsto(total).empty?\nend\n\nprint
        &amp;quot;Result 1: &amp;quot;,sumsto(2020).reduce(1, :*)\nprint &amp;quot;\\nResult
        2: &amp;quot;, $a.select{ |i| summable(2020-i) }.reduce(1, :*)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8yog2/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8yog2", "created":
        1606820353.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606821367.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8yqmy", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "lxrsg",
        "can_mod_post": false, "created_utc": 1606820419.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_a280h3q", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "python3\n\n```\n    lines = list(map(int, open(''data.in'').readlines()))\n    next(print(x
        * (2020 - x)) for x in lines if 2020 - x in lines)\n    next(print(y * x *
        (2020 - x - y)) for x in lines for y in lines if 2020 - x - y in lines)\n```",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;python3&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\n    lines
        = list(map(int, open(&amp;#39;data.in&amp;#39;).readlines()))\n    next(print(x
        * (2020 - x)) for x in lines if 2020 - x in lines)\n    next(print(y * x *
        (2020 - x - y)) for x in lines for y in lines if 2020 - x - y in lines)\n&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8yqmy/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8yqmy", "created":
        1606820419.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_ge8yr4w", "id": "ge8yr4w", "parent_id":
        "t1_ge8yqmy", "depth": 1, "children": ["ge8yr4w", "ge915to"]}}, {"kind": "t1",
        "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1630435171.0, "mod_reason_by": null,
        "banned_by": null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8yvut", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_ge8yvut", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8yvut/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606820572.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606820572.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge90cm5", "id": "ge90cm5", "parent_id":
        "t1_ge8yvut", "depth": 1, "children": ["ge90cm5"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8z4ff",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Fyvaproldje",
        "can_mod_post": false, "created_utc": 1606820832.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_2h7zn9ro", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "C++\n\n```\n    void Solver::part1(std::string_view input) {\n    \tstd::vector&lt;int&gt;
        numbers = ints(input);\n    \tauto middle = std::partition(numbers.begin(),
        numbers.end(), [](int i) { return i &lt; 1010; });\n    \tstd::span&lt;int&gt;
        small = make_span(numbers.begin(), middle);\n    \tstd::span&lt;int&gt; big
        = make_span(middle, numbers.end());\n    \tbig |= ranges::actions::sort;\n    \tfor
        (int a : small) {\n    \t\tif (std::binary_search(big.begin(), big.end(),
        2020 - a)) {\n    \t\t\tstd::cout &lt;&lt; (a * (2020 -a));\n    \t\t\treturn;\n    \t\t}\n    \t}\n    \tstd::cout
        &lt;&lt; \"not found\";\n    }\n    \n    void Solver::part2(std::string_view
        input) {\n    \tstd::vector&lt;int&gt; numbers = ints(input);\n    \tnumbers
        |= ranges::actions::sort;\n    \tfor (auto it_1 = numbers.begin(); it_1 +
        2 != numbers.end(); ++it_1) {\n    \t\tfor (auto it_2 = it_1 + 1; it_2 + 1!=
        numbers.end(); ++it_2) {\n    \t\t\tint another = 2020 - *it_1 - *it_2;\n    \t\t\tif
        (std::binary_search(it_2 + 1, numbers.end(), another)) {\n    \t\t\t\tstd::cout
        &lt;&lt; (*it_1 * *it_2 * another);\n    \t\t\t\treturn;\n    \t\t\t}\n    \t\t}\n    \t}\n    \tstd::cout
        &lt;&lt; \"not found\";\n    }\n```\n\nhttps://github.com/DarthGandalf/advent-of-code/blob/master/2020/day1.cpp\n\nI''m
        missing Rust''s `combinations()` in the C++ Ranges-v3 library.", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;C++&lt;/p&gt;\n\n&lt;p&gt;```\n    void
        Solver::part1(std::string_view input) {\n        std::vector&amp;lt;int&amp;gt;
        numbers = ints(input);\n        auto middle = std::partition(numbers.begin(),
        numbers.end(), [](int i) { return i &amp;lt; 1010; });\n        std::span&amp;lt;int&amp;gt;
        small = make_span(numbers.begin(), middle);\n        std::span&amp;lt;int&amp;gt;
        big = make_span(middle, numbers.end());\n        big |= ranges::actions::sort;\n        for
        (int a : small) {\n            if (std::binary_search(big.begin(), big.end(),
        2020 - a)) {\n                std::cout &amp;lt;&amp;lt; (a * (2020 -a));\n                return;\n            }\n        }\n        std::cout
        &amp;lt;&amp;lt; &amp;quot;not found&amp;quot;;\n    }&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;void
        Solver::part2(std::string_view input) {\n    std::vector&amp;lt;int&amp;gt;
        numbers = ints(input);\n    numbers |= ranges::actions::sort;\n    for (auto
        it_1 = numbers.begin(); it_1 + 2 != numbers.end(); ++it_1) {\n        for
        (auto it_2 = it_1 + 1; it_2 + 1!= numbers.end(); ++it_2) {\n            int
        another = 2020 - *it_1 - *it_2;\n            if (std::binary_search(it_2 +
        1, numbers.end(), another)) {\n                std::cout &amp;lt;&amp;lt;
        (*it_1 * *it_2 * another);\n                return;\n            }\n        }\n    }\n    std::cout
        &amp;lt;&amp;lt; &amp;quot;not found&amp;quot;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;```&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/DarthGandalf/advent-of-code/blob/master/2020/day1.cpp\"&gt;https://github.com/DarthGandalf/advent-of-code/blob/master/2020/day1.cpp&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m
        missing Rust&amp;#39;s &lt;code&gt;combinations()&lt;/code&gt; in the C++
        Ranges-v3 library.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8z4ff/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8z4ff", "created":
        1606820832.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge8z4wa", "id": "ge8z4wa", "parent_id":
        "t1_ge8z4ff", "depth": 1, "children": ["ge8z4wa"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8zlpr",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "M124367",
        "can_mod_post": false, "created_utc": 1606821339.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_cmzcp", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Solution in `Kotlin` (functional)\n\nI first solved it imperatively, but
        generalized it to a function that can take any amount of terms theoretically.
        However the puzzle input is only set up to guarantee a result for 2 and 3
        terms.\n\n(Learning Kotlin through AoC)\n\n```kotlin\npackage december\n\nimport
        AbstractDay\n\nclass Day1 : AbstractDay() {\n\n    override val day = 1\n    \n    //
        The inputs as a list of integers sorted ascending.\n    private val input
        = obtainInput { s -&gt; s.toInt() }.sorted()\n\n    override fun part1():
        String = findProductOfMatchingSum(2, 2020, input).toString()\n\n    override
        fun part2(): String = findProductOfMatchingSum(3, 2020, input).toString()\n\n    /**\n     *
        Finds the product of the first combination of `terms` in `list` that sum to
        `target`.\n     *\n     * @param terms Amount of terms to combine.\n     *
        @param target The target sum.\n     * @param list The list to search in (preferably
        sorted).\n     * @return The product of the first `terms` in the `list` that
        sum to `target` or null if it cannot be found.\n     */\n    private fun findProductOfMatchingSum(terms:
        Int, target: Int, list: List&lt;Int&gt;, prevSum: Int = 0): Int? {\n        if
        (terms &lt; 1) return 0\n        if (terms == 1) return list.find { i -&gt;
        prevSum + i == target }\n        for (i in 0..list.size - terms) {\n            val
        v = list[i]\n            val n = findProductOfMatchingSum(terms - 1, target,
        list.subList(i, list.size), prevSum + v)\n            if (n != null) return
        v * n\n        }\n        return null\n    }\n}\n```", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Solution in &lt;code&gt;Kotlin&lt;/code&gt; (functional)&lt;/p&gt;\n\n&lt;p&gt;I
        first solved it imperatively, but generalized it to a function that can take
        any amount of terms theoretically. However the puzzle input is only set up
        to guarantee a result for 2 and 3 terms.&lt;/p&gt;\n\n&lt;p&gt;(Learning Kotlin
        through AoC)&lt;/p&gt;\n\n&lt;p&gt;```kotlin\npackage december&lt;/p&gt;\n\n&lt;p&gt;import
        AbstractDay&lt;/p&gt;\n\n&lt;p&gt;class Day1 : AbstractDay() {&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;override
        val day = 1\n\n// The inputs as a list of integers sorted ascending.\nprivate
        val input = obtainInput { s -&amp;gt; s.toInt() }.sorted()\n\noverride fun
        part1(): String = findProductOfMatchingSum(2, 2020, input).toString()\n\noverride
        fun part2(): String = findProductOfMatchingSum(3, 2020, input).toString()\n\n/**\n
        * Finds the product of the first combination of `terms` in `list` that sum
        to `target`.\n *\n * @param terms Amount of terms to combine.\n * @param target
        The target sum.\n * @param list The list to search in (preferably sorted).\n
        * @return The product of the first `terms` in the `list` that sum to `target`
        or null if it cannot be found.\n */\nprivate fun findProductOfMatchingSum(terms:
        Int, target: Int, list: List&amp;lt;Int&amp;gt;, prevSum: Int = 0): Int? {\n    if
        (terms &amp;lt; 1) return 0\n    if (terms == 1) return list.find { i -&amp;gt;
        prevSum + i == target }\n    for (i in 0..list.size - terms) {\n        val
        v = list[i]\n        val n = findProductOfMatchingSum(terms - 1, target, list.subList(i,
        list.size), prevSum + v)\n        if (n != null) return v * n\n    }\n    return
        null\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}\n```&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8zlpr/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8zlpr", "created":
        1606821339.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8zyte",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "reacher",
        "can_mod_post": false, "created_utc": 1606821720.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_3pfyz", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Some sloppy brutish Python\n\n    num = [int(n) for n in open(''01in'').read().strip().split(\"\\n\")]\n    \n    for
        i in range(len(num)):\n        for j in range(len(num)-1):\n            if
        (num[i] + num[j+1]) == 2020:\n                print(num[i] * num[j+1])\n            for
        k in range(len(num)-2):\n                if num[i] + num[j+1] + num[k+2] ==
        2020:\n                    print(num[i] * num[j+1] * num[k+2])", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Some sloppy brutish Python&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;num
        = [int(n) for n in open(&amp;#39;01in&amp;#39;).read().strip().split(&amp;quot;\\n&amp;quot;)]\n\nfor
        i in range(len(num)):\n    for j in range(len(num)-1):\n        if (num[i]
        + num[j+1]) == 2020:\n            print(num[i] * num[j+1])\n        for k
        in range(len(num)-2):\n            if num[i] + num[j+1] + num[k+2] == 2020:\n                print(num[i]
        * num[j+1] * num[k+2])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8zyte/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge8zyte", "created": 1606821720.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 5, "name":
        "t1_ge915e7", "id": "ge915e7", "parent_id": "t1_ge8zyte", "depth": 1, "children":
        ["ge915e7", "ge90ixf"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "ge9066a", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "bananaEngineer1", "can_mod_post": false,
        "created_utc": 1606821936.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 1, "author_fullname": "t2_175jwa", "report_reasons": null, "approved_by":
        null, "all_awardings": [], "collapsed": false, "body": "**Python**\n\nwith
        open(\"Day1.txt\")\u00a0as\u00a0f:  \nlst\u00a0=\u00a0\\[int(x)\u00a0for\u00a0x\u00a0in\u00a0[f.read](https://f.read)().split()\\]\n\nfor\u00a0x\u00a0in\u00a0lst:  \nfor\u00a0y\u00a0in\u00a0lst:  \nfor\u00a0z\u00a0in\u00a0lst:  \nif(x\u00a0+\u00a0y\u00a0+\u00a0z\u00a0==2020):  \nprint(x\\*y\\*z)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;with
        open(&amp;quot;Day1.txt&amp;quot;)\u00a0as\u00a0f:&lt;br/&gt;\nlst\u00a0=\u00a0[int(x)\u00a0for\u00a0x\u00a0in\u00a0&lt;a
        href=\"https://f.read\"&gt;f.read&lt;/a&gt;().split()]&lt;/p&gt;\n\n&lt;p&gt;for\u00a0x\u00a0in\u00a0lst:&lt;br/&gt;\nfor\u00a0y\u00a0in\u00a0lst:&lt;br/&gt;\nfor\u00a0z\u00a0in\u00a0lst:&lt;br/&gt;\nif(x\u00a0+\u00a0y\u00a0+\u00a0z\u00a0==2020):&lt;br/&gt;\nprint(x*y*z)&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9066a/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9066a", "created":
        1606821936.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9a2js",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Klohto",
        "can_mod_post": false, "created_utc": 1606830218.0, "send_replies": true,
        "parent_id": "t1_ge9066a", "score": 1, "author_fullname": "t2_8imo6", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Suppose you got lucky with input but FYI, you''re duplicating numbers.",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Suppose you got lucky
        with input but FYI, you&amp;#39;re duplicating numbers.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9a2js/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9a2js", "created":
        1606830218.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_ge9cul2", "id": "ge9cul2", "parent_id":
        "t1_ge9a2js", "depth": 2, "children": ["ge9cul2"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606822429.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge90ffa", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "AlistairJF",
        "can_mod_post": false, "created_utc": 1606822201.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_3x5avj", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Done hackingly in **Excel**.\n\nPart 1:\n\n* put input into a column (D3:D202)\n*
        Column E: =2020 - D3\n* Column F: = match(E3, D3:D$202)\n* Then multiply the
        two values that are not #N/A\n\nPart 2 done in VBA, not very elegantly!",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Done hackingly in &lt;strong&gt;Excel&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;put input into a column (D3:D202)&lt;/li&gt;\n&lt;li&gt;Column
        E: =2020 - D3&lt;/li&gt;\n&lt;li&gt;Column F: = match(E3, D3:D$202)&lt;/li&gt;\n&lt;li&gt;Then
        multiply the two values that are not #N/A&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Part
        2 done in VBA, not very elegantly!&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge90ffa/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge90ffa", "created": 1606822201.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": 1606822687.0, "mod_reason_by": null, "banned_by": null, "removal_reason":
        null, "link_id": "t3_k4e4lm", "author_flair_template_id": null, "likes": null,
        "replies": "", "user_reports": [], "saved": false, "id": "ge90pv4", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        "DELETED", "no_follow": true, "author": "[deleted]", "can_mod_post": false,
        "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1, "approved_by":
        null, "mod_note": null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body":
        "[removed]", "awarders": [], "downs": 0, "author_flair_css_class": null, "name":
        "t1_ge90pv4", "collapsed": false, "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;[removed]&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge90pv4/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606822492.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606822492.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge96q6f", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_ge90pv4", "score":
        2, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "You can get better formatting when you use the code block
        button\n\n    // code example", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_ge96q6f", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;You can get better formatting when you use
        the code block button&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// code example\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge96q6f/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606827860.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606827860.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge98vvs", "id": "ge98vvs", "parent_id":
        "t1_ge90pv4", "depth": 1, "children": ["ge98vvs"]}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge90snh", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Kotlin, im pretty pleased with the two solutions.  \n[https://github.com/downloadpizza/Aoc2020/blob/main/src/main/kotlin/day1/Day1.kt](https://github.com/downloadpizza/Aoc2020/blob/main/src/main/kotlin/day1/Day1.kt)",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_ge90snh",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Kotlin,
        im pretty pleased with the two solutions.&lt;br/&gt;\n&lt;a href=\"https://github.com/downloadpizza/Aoc2020/blob/main/src/main/kotlin/day1/Day1.kt\"&gt;https://github.com/downloadpizza/Aoc2020/blob/main/src/main/kotlin/day1/Day1.kt&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge90snh/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606822569.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606822569.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606917765.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge90t2q", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "vini_2003",
        "can_mod_post": false, "created_utc": 1606822581.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_odiqh", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Kotlin**\n\nIt''s not fast, but it''s not meant to be either and I''m not
        digging research papers for this.\n\n**Part I &amp; II:**\n\n    class ChallengeOne
        : Challenge(\"/day/one/input.txt\") {\n        override fun run() {\n            val
        sTA = System.currentTimeMillis();\n        \n            text.lines()\n                .map
        { it.toInt() }\n                .also { list -&gt;\n                    list.forEach
        { a -&gt;\n                        list.forEach { b -&gt;\n                            if
        (a + b == 2020) {\n                                println(\"Part I: Found
        $a, $b, resulting in ${a * b}.\")\n                    \n                                return\n                            }\n                        }\n                    }\n                }\n        \n            val
        eTA = System.currentTimeMillis();\n            \n            println(\"Took
        ${eTA - sTA}ms.\")\n        \n            val sTB = System.currentTimeMillis()\n        \n            text.lines()\n                .map
        { it.toInt() }\n                .also { list -&gt;\n                    list.forEach
        { a -&gt;\n                        list.forEach { b -&gt;\n                            list.forEach
        { c -&gt;\n                                if (a + b + c == 2020) {\n                                    println(\"Part
        II: Found $a, $b and $c, resulting in ${a * b * c}.\")\n        \n                                    return\n                                }\n                            }\n                        }\n                    }\n                }\n        \n            val
        eTB = System.currentTimeMillis()\n    \n            println(\"Took ${eTB -
        sTB}ms.\")\n        }\n    }", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Kotlin&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s
        not fast, but it&amp;#39;s not meant to be either and I&amp;#39;m not digging
        research papers for this.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Part I &amp;amp;
        II:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class ChallengeOne
        : Challenge(&amp;quot;/day/one/input.txt&amp;quot;) {\n    override fun run()
        {\n        val sTA = System.currentTimeMillis();\n\n        text.lines()\n            .map
        { it.toInt() }\n            .also { list -&amp;gt;\n                list.forEach
        { a -&amp;gt;\n                    list.forEach { b -&amp;gt;\n                        if
        (a + b == 2020) {\n                            println(&amp;quot;Part I: Found
        $a, $b, resulting in ${a * b}.&amp;quot;)\n\n                            return\n                        }\n                    }\n                }\n            }\n\n        val
        eTA = System.currentTimeMillis();\n\n        println(&amp;quot;Took ${eTA
        - sTA}ms.&amp;quot;)\n\n        val sTB = System.currentTimeMillis()\n\n        text.lines()\n            .map
        { it.toInt() }\n            .also { list -&amp;gt;\n                list.forEach
        { a -&amp;gt;\n                    list.forEach { b -&amp;gt;\n                        list.forEach
        { c -&amp;gt;\n                            if (a + b + c == 2020) {\n                                println(&amp;quot;Part
        II: Found $a, $b and $c, resulting in ${a * b * c}.&amp;quot;)\n\n                                return\n                            }\n                        }\n                    }\n                }\n            }\n\n        val
        eTB = System.currentTimeMillis()\n\n        println(&amp;quot;Took ${eTB -
        sTB}ms.&amp;quot;)\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge90t2q/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge90t2q", "created": 1606822581.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "removal_reason":
        null, "link_id": "t3_k4e4lm", "author_flair_template_id": null, "likes": null,
        "replies": "", "user_reports": [], "saved": false, "id": "ge92kna", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        "DELETED", "no_follow": true, "author": "[deleted]", "can_mod_post": false,
        "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1, "approved_by":
        null, "mod_note": null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body":
        "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class": null, "name":
        "t1_ge92kna", "collapsed": false, "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge92kna/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606824329.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606824329.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge92q99", "id": "ge92q99", "parent_id":
        "t1_ge92kna", "depth": 1, "children": ["ge92q99"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge92lj3",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Bammerbom",
        "can_mod_post": false, "created_utc": 1606824351.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_s055y", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "A well commented and high performance solution in Rust, those are my goals
        for this year\n\n[https://github.com/JonathanBrouwer/aoc2020/blob/master/src/day1/main.rs](https://github.com/JonathanBrouwer/aoc2020/blob/master/src/day1/main.rs)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;A well commented and
        high performance solution in Rust, those are my goals for this year&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/JonathanBrouwer/aoc2020/blob/master/src/day1/main.rs\"&gt;https://github.com/JonathanBrouwer/aoc2020/blob/master/src/day1/main.rs&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge92lj3/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge92lj3", "created":
        1606824351.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge965oq",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "aurele",
        "can_mod_post": false, "created_utc": 1606827420.0, "send_replies": true,
        "parent_id": "t1_ge92lj3", "score": 2, "author_fullname": "t2_1w2b", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "If you care about performance, you should try:\n\n- part 1: use `BTreeSet`
        instead of `HashSet`\n- part 1: even better, use the `bit-array` crate that
        will fit 2048 booleans in 4 cache line entries\n- part 2 : start the inner
        loop after the element of the outer loop since addition is commutative (by
        using, for example, `.enumerate()` on the outer loop to get the current index)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If you care about performance,
        you should try:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;part 1: use &lt;code&gt;BTreeSet&lt;/code&gt;
        instead of &lt;code&gt;HashSet&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;part 1:
        even better, use the &lt;code&gt;bit-array&lt;/code&gt; crate that will fit
        2048 booleans in 4 cache line entries&lt;/li&gt;\n&lt;li&gt;part 2 : start
        the inner loop after the element of the outer loop since addition is commutative
        (by using, for example, &lt;code&gt;.enumerate()&lt;/code&gt; on the outer
        loop to get the current index)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge965oq/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge965oq", "created": 1606827420.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 1, "name":
        "t1_ge9dl5o", "id": "ge9dl5o", "parent_id": "t1_ge965oq", "depth": 2, "children":
        ["ge9dl5o"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": 1606833356.0,
        "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge933cq", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "sldyvf",
        "can_mod_post": false, "created_utc": 1606824809.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_5ebu9", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I am learning Go lang this year and so far ive got this: \n\nhttps://github.com/IAmBullsaw/AOC-2020/blob/main/day01/main.go\n\nIt
        did the trick but not well.\n\n    Solving puzzle...\n      Level 1 took 25.271\u00b5s\n      Level
        2 took 1.165569ms\n\nProbably slow since it rechecks too many values.\n\nEDIT:
        So, i tried to use a binary search on binsearch(input, 2020-input[i]) which
        did work on level 1, but I failed on level 2.\n\nThen I learned about \"two
        pointer algorithm\" and now it is very much more efficient in level 2 but
        less in level 1... Still, much improved!\n\n    Solving puzzle...\n      Level
        1 took 33.79\u00b5s\n      Level 2 took 22.09\u00b5s", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;I am learning Go lang this year and so far ive got
        this: &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/IAmBullsaw/AOC-2020/blob/main/day01/main.go\"&gt;https://github.com/IAmBullsaw/AOC-2020/blob/main/day01/main.go&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It
        did the trick but not well.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Solving puzzle...\n  Level
        1 took 25.271\u00b5s\n  Level 2 took 1.165569ms\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Probably
        slow since it rechecks too many values.&lt;/p&gt;\n\n&lt;p&gt;EDIT: So, i
        tried to use a binary search on binsearch(input, 2020-input[i]) which did
        work on level 1, but I failed on level 2.&lt;/p&gt;\n\n&lt;p&gt;Then I learned
        about &amp;quot;two pointer algorithm&amp;quot; and now it is very much more
        efficient in level 2 but less in level 1... Still, much improved!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Solving
        puzzle...\n  Level 1 took 33.79\u00b5s\n  Level 2 took 22.09\u00b5s\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge933cq/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge933cq", "created":
        1606824809.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge95kum",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "A-UNDERSCORE-D",
        "can_mod_post": false, "created_utc": 1606826966.0, "send_replies": true,
        "parent_id": "t1_ge933cq", "score": 2, "author_fullname": "t2_16m0x2", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "One thing to know, you can use lables to break outer loops, add `someLabel:`
        above your loop and `break someLabel` in your innermost loop, that''ll get
        you out of everywhere.\n\nCheck out my solution if you want to see a different
        way: https://github.com/A-UNDERSCORE-D/aoc2020/blob/main/2020/01/solution.go",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;One thing to know, you
        can use lables to break outer loops, add &lt;code&gt;someLabel:&lt;/code&gt;
        above your loop and &lt;code&gt;break someLabel&lt;/code&gt; in your innermost
        loop, that&amp;#39;ll get you out of everywhere.&lt;/p&gt;\n\n&lt;p&gt;Check
        out my solution if you want to see a different way: &lt;a href=\"https://github.com/A-UNDERSCORE-D/aoc2020/blob/main/2020/01/solution.go\"&gt;https://github.com/A-UNDERSCORE-D/aoc2020/blob/main/2020/01/solution.go&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge95kum/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge95kum", "created":
        1606826966.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_ge9f99l", "id": "ge9f99l", "parent_id":
        "t1_ge95kum", "depth": 2, "children": ["ge9f99l"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606825229.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge93bhe", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "woben3",
        "can_mod_post": false, "created_utc": 1606825018.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_6lpxjz14", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Here is my julia solution.\n\nFirst part.\n\n    function FindTwo(target
        = 2020)\n    \tarr = readdata(\"E:\\\\AoC2020\\\\Day1\\\\input.txt\")\n    \tleft
        = 1\n    \tright = length(arr)\n    \twhile left &lt; right\n    \t\tif arr[left]
        + arr[right] == target\n    \t\t\treturn [arr[left],arr[right]]\n    \t\telseif
        arr[left] + arr[right] &lt; target\n    \t\t\tleft += 1\n    \t\telse\n    \t\t\tright
        -= 1\n    \t\tend\n    \tend\n    \treturn \"Not found!\"\n    end\n\n&amp;#x200B;\n\nThe
        second part.\n\n    function FindThreeBruteForce(target = 2020)\n    \tarr
        = readdata(\"E:\\\\AoC2020\\\\Day1\\\\input.txt\")\n    \tfor i in 1:(length(arr)
        - 2)\n    \t\tfor j in (i+1):(length(arr) - 1)\n    \t\t\tfor k in (j+1):(length(arr))\n    \t\t\t\tif
        arr[i] + arr[j] + arr[k] == target\n    \t\t\t\t\treturn [arr[i],arr[j],arr[k]]\n    \t\t\t\tend\n    \t\t\tend\n    \t\tend\n    \tend\n    \n    \treturn
        \"Triplet Not Found!\"\n    end", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Here is my julia solution.&lt;/p&gt;\n\n&lt;p&gt;First
        part.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function FindTwo(target = 2020)\n    arr
        = readdata(&amp;quot;E:\\\\AoC2020\\\\Day1\\\\input.txt&amp;quot;)\n    left
        = 1\n    right = length(arr)\n    while left &amp;lt; right\n        if arr[left]
        + arr[right] == target\n            return [arr[left],arr[right]]\n        elseif
        arr[left] + arr[right] &amp;lt; target\n            left += 1\n        else\n            right
        -= 1\n        end\n    end\n    return &amp;quot;Not found!&amp;quot;\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;The
        second part.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function FindThreeBruteForce(target
        = 2020)\n    arr = readdata(&amp;quot;E:\\\\AoC2020\\\\Day1\\\\input.txt&amp;quot;)\n    for
        i in 1:(length(arr) - 2)\n        for j in (i+1):(length(arr) - 1)\n            for
        k in (j+1):(length(arr))\n                if arr[i] + arr[j] + arr[k] == target\n                    return
        [arr[i],arr[j],arr[k]]\n                end\n            end\n        end\n    end\n\n    return
        &amp;quot;Triplet Not Found!&amp;quot;\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge93bhe/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge93bhe", "created":
        1606825018.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge93efl",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "arrayofemotions",
        "can_mod_post": false, "created_utc": 1606825091.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_4xux3", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "          var data = document.forms.puzzleinput.data.value.trim().split(\"\\n\").map(x
        =&gt; Number(x));\n          var result1 = 0;\n          var result2 = 0;\n    \n          //
        1: find the two numbers that add up to 2020, then multiply them. \n          var
        i = 0;\n          var found = false;\n          while(i&lt;data.length &amp;&amp;
        !found) {\n            for(var j=i+1; j&lt;data.length; j++) {\n              if(data[i]+data[j]==2020){\n                result1
        = data[i]*data[j];\n                found=true;\n              }\n            }\n            i++;\n          }\n          \n          //
        2: find the three numbers adding up to 2020, then multiply them:\n          i
        = 0;\n          j = 0;\n          found = false;\n          while(i&lt;data.length
        &amp;&amp; !found) {\n            j = i+1;\n            while(j&lt;data.length
        &amp;&amp; !found) {\n              if(!(data[i]+data[j]&gt;=2020)){\n                for(var
        k=j+1; k&lt;data.length; k++) {\n                  if(data[i]+data[j]+data[k]==2020)
        {\n                    result2 = data[i]* data[j]* data[k];\n                    found
        = true;\n                  }\n                }\n              }\n              j++;\n            }\n            i++;\n          }\n\nIn
        hacky javascript. I probably didn''t need the while loops, but my brain kinda
        hates code that continues to loop for no reason.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;      var data = document.forms.puzzleinput.data.value.trim().split(&amp;quot;\\n&amp;quot;).map(x
        =&amp;gt; Number(x));\n      var result1 = 0;\n      var result2 = 0;\n\n      //
        1: find the two numbers that add up to 2020, then multiply them. \n      var
        i = 0;\n      var found = false;\n      while(i&amp;lt;data.length &amp;amp;&amp;amp;
        !found) {\n        for(var j=i+1; j&amp;lt;data.length; j++) {\n          if(data[i]+data[j]==2020){\n            result1
        = data[i]*data[j];\n            found=true;\n          }\n        }\n        i++;\n      }\n\n      //
        2: find the three numbers adding up to 2020, then multiply them:\n      i
        = 0;\n      j = 0;\n      found = false;\n      while(i&amp;lt;data.length
        &amp;amp;&amp;amp; !found) {\n        j = i+1;\n        while(j&amp;lt;data.length
        &amp;amp;&amp;amp; !found) {\n          if(!(data[i]+data[j]&amp;gt;=2020)){\n            for(var
        k=j+1; k&amp;lt;data.length; k++) {\n              if(data[i]+data[j]+data[k]==2020)
        {\n                result2 = data[i]* data[j]* data[k];\n                found
        = true;\n              }\n            }\n          }\n          j++;\n        }\n        i++;\n      }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In
        hacky javascript. I probably didn&amp;#39;t need the while loops, but my brain
        kinda hates code that continues to loop for no reason.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge93efl/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge93efl", "created":
        1606825091.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606828651.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge93wxk", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "WhamolaFTW",
        "can_mod_post": false, "created_utc": 1606825555.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_4j4mg", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Got a pretty simple one line solution for part one using sets and reduce
        in Python\n\n`result = reduce(lambda x,y:x*y, set(data).intersection(set([2020-i
        for i in data])))`\n\nEdit : full solution using sets and reduce, \"input\"
        is my text file containing the input data\n\n    from functools import reduce;\n    with
        open(\"input\") as f:\n        data = set(map(int,f.read().splitlines()))\n    part1
        = reduce(lambda x,y:x*y, data.intersection({2020-i for i in data}))\n    part2
        = reduce(lambda x,y:x*y, {el for el in data if len(data.intersection({2020-em-el
        for em in data}))})", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Got
        a pretty simple one line solution for part one using sets and reduce in Python&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;result
        = reduce(lambda x,y:x*y, set(data).intersection(set([2020-i for i in data])))&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Edit
        : full solution using sets and reduce, &amp;quot;input&amp;quot; is my text
        file containing the input data&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from functools
        import reduce;\nwith open(&amp;quot;input&amp;quot;) as f:\n    data = set(map(int,f.read().splitlines()))\npart1
        = reduce(lambda x,y:x*y, data.intersection({2020-i for i in data}))\npart2
        = reduce(lambda x,y:x*y, {el for el in data if len(data.intersection({2020-em-el
        for em in data}))})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge93wxk/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge93wxk", "created": 1606825555.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "ge93z7e", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "hdf1986", "can_mod_post": false, "created_utc":
        1606825612.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_q5cribn", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "My ruby solutions for day
        1:  \n\n\nPart 1: [https://github.com/hdf1986/advent-of-code/blob/master/2020/day1/ruby/part1.rb](https://github.com/hdf1986/advent-of-code/blob/master/2020/day1/ruby/part1.rb)  \nPart
        2: [https://github.com/hdf1986/advent-of-code/blob/master/2020/day1/ruby/part2.rb](https://github.com/hdf1986/advent-of-code/blob/master/2020/day1/ruby/part2.rb)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My ruby solutions for
        day 1:  &lt;/p&gt;\n\n&lt;p&gt;Part 1: &lt;a href=\"https://github.com/hdf1986/advent-of-code/blob/master/2020/day1/ruby/part1.rb\"&gt;https://github.com/hdf1986/advent-of-code/blob/master/2020/day1/ruby/part1.rb&lt;/a&gt;&lt;br/&gt;\nPart
        2: &lt;a href=\"https://github.com/hdf1986/advent-of-code/blob/master/2020/day1/ruby/part2.rb\"&gt;https://github.com/hdf1986/advent-of-code/blob/master/2020/day1/ruby/part2.rb&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge93z7e/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge93z7e", "created":
        1606825612.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge93z8h",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "thetideturnsmc",
        "can_mod_post": false, "created_utc": 1606825613.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_5jom2tyk", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "A solution in Javacript for part two from a beginner - this is my first ever
        Javascript program and I found this makes sense to me, even though it may
        not be most efficient. Thought it might be helpful for anyone else new!\n\n#
        Javascript\n\n    const adventInput = [1993, 1715, 1997, 1666, 1676, 1830,
        1203, 1800, 1125, 1191, 1902, 1972, 1471, 1137, 2003, 1250, 1548, 1070, 1152,
        2004, 1127, 1111, 1898, 1848, 1934, 1236, 1704, 1950, 1387, 1713, 1214, 1266,
        1114, 1089, 1677, 1207, 1341, 1689, 1772, 1901, 1932, 1645, 1285, 1884, 883,
        1291, 1543, 1455, 1213, 1088, 1784, 1506, 1879, 1811, 1880, 994, 1021, 1585,
        1662, 1683, 1071, 1643, 1754, 1389, 1124, 1820, 1168, 1875, 1017, 1180, 1375,
        1359, 1311, 1357, 1501, 1719, 1584, 1609, 1977, 1786, 1232, 1263, 1748, 1664,
        1693, 1766, 1598, 1053, 1277, 1466, 1877, 1844, 1829, 1165, 1606, 1298, 1963,
        1873, 1911, 1729, 1418, 1372, 1777, 1371, 1588, 1329, 1029, 1931, 1115, 1810,
        1595, 1237, 1282, 1838, 1642, 1937, 1343, 1578, 1425, 1814, 1690, 1129, 1321,
        1174, 1863, 1405, 1066, 1220, 1780, 1410, 1156, 1991, 1568, 1368, 99, 1750,
        1280, 1400, 1601, 1804, 1363, 1613, 1252, 1434, 1094, 1867, 1542, 1093, 1926,
        1251, 1348, 689, 1441, 1913, 1969, 1409, 1201, 1459, 1110, 1452, 1051, 1860,
        1346, 1537, 1060, 1182, 1386, 1141, 1184, 1989, 1852, 1097, 1135, 1078, 1587,
        1984, 1970, 1259, 1281, 1092, 1294, 1233, 1186, 1555, 1755, 1886, 1030, 1706,
        1313, 1481, 1998, 1181, 1244, 1269, 1684, 1798, 1023, 1960, 1050, 1293]\n    \n    for
        (let first = 0; first &lt; adventInput .length; first++) {\n    \tfor (let
        second = 0; second &lt; adventInput.length; second++) {\n    \t\tfor (let
        third = 0; third &lt; adventInput.length; third++) {\n    \t\t    if (adventInput[first]
        + adventInput[second] + adventInput[third] === 2020)\n    \t\t        console.log(adventInput[first]
        * adventInput[second] * adventInput[third]);\n    \t}\n        }\n    }\n\nI
        know it prints the solution multiple times but it does still solve it.", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;A solution in Javacript for part two from
        a beginner - this is my first ever Javascript program and I found this makes
        sense to me, even though it may not be most efficient. Thought it might be
        helpful for anyone else new!&lt;/p&gt;\n\n&lt;h1&gt;Javascript&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;const
        adventInput = [1993, 1715, 1997, 1666, 1676, 1830, 1203, 1800, 1125, 1191,
        1902, 1972, 1471, 1137, 2003, 1250, 1548, 1070, 1152, 2004, 1127, 1111, 1898,
        1848, 1934, 1236, 1704, 1950, 1387, 1713, 1214, 1266, 1114, 1089, 1677, 1207,
        1341, 1689, 1772, 1901, 1932, 1645, 1285, 1884, 883, 1291, 1543, 1455, 1213,
        1088, 1784, 1506, 1879, 1811, 1880, 994, 1021, 1585, 1662, 1683, 1071, 1643,
        1754, 1389, 1124, 1820, 1168, 1875, 1017, 1180, 1375, 1359, 1311, 1357, 1501,
        1719, 1584, 1609, 1977, 1786, 1232, 1263, 1748, 1664, 1693, 1766, 1598, 1053,
        1277, 1466, 1877, 1844, 1829, 1165, 1606, 1298, 1963, 1873, 1911, 1729, 1418,
        1372, 1777, 1371, 1588, 1329, 1029, 1931, 1115, 1810, 1595, 1237, 1282, 1838,
        1642, 1937, 1343, 1578, 1425, 1814, 1690, 1129, 1321, 1174, 1863, 1405, 1066,
        1220, 1780, 1410, 1156, 1991, 1568, 1368, 99, 1750, 1280, 1400, 1601, 1804,
        1363, 1613, 1252, 1434, 1094, 1867, 1542, 1093, 1926, 1251, 1348, 689, 1441,
        1913, 1969, 1409, 1201, 1459, 1110, 1452, 1051, 1860, 1346, 1537, 1060, 1182,
        1386, 1141, 1184, 1989, 1852, 1097, 1135, 1078, 1587, 1984, 1970, 1259, 1281,
        1092, 1294, 1233, 1186, 1555, 1755, 1886, 1030, 1706, 1313, 1481, 1998, 1181,
        1244, 1269, 1684, 1798, 1023, 1960, 1050, 1293]\n\nfor (let first = 0; first
        &amp;lt; adventInput .length; first++) {\n    for (let second = 0; second
        &amp;lt; adventInput.length; second++) {\n        for (let third = 0; third
        &amp;lt; adventInput.length; third++) {\n            if (adventInput[first]
        + adventInput[second] + adventInput[third] === 2020)\n                console.log(adventInput[first]
        * adventInput[second] * adventInput[third]);\n    }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I
        know it prints the solution multiple times but it does still solve it.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge93z8h/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge93z8h", "created":
        1606825613.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge9ec4g", "id": "ge9ec4g", "parent_id":
        "t1_ge93z8h", "depth": 1, "children": ["ge9ec4g"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge948qx",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Reffter",
        "can_mod_post": false, "created_utc": 1606825843.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_hfkay", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Java solution (zero optimization):  \n\n\n    package main;\n    \n    import
        java.io.File; // Import the File class\n    import java.io.FileNotFoundException;
        // Import this class to handle errors\n    import java.util.Scanner; // Import
        the Scanner class to read text files\n    import java.util.ArrayList; // import
        the ArrayList class\n    \n    public class Main {\n        public static
        void main(String[] args) {\n            ArrayList&lt;Integer&gt; lista = new
        ArrayList&lt;Integer&gt;();\n            try {\n                File myObj
        = new File(\"input.txt\");\n                Scanner myReader = new Scanner(myObj);\n                while
        (myReader.hasNextLine()) {\n                    lista.add(myReader.nextInt());\n                }\n                myReader.close();\n            }
        catch (FileNotFoundException e) {\n                System.out.println(\"An
        error occurred.\");\n                e.printStackTrace();\n            }\n    \n            for
        (int i = 0; i &lt; lista.size(); i++) {\n                for (int j = 0; j
        &lt; lista.size(); j++) {\n                    for(int k = 0; k &lt; lista.size();
        k++){\n                        if (lista.get(i) + lista.get(j) + lista.get(k)
        == 2020) {\n                            System.out.println(lista.get(i) +
        \" \" + lista.get(j) + \" \" + lista.get(k));\n                            System.out.println(lista.get(i)
        * lista.get(j) * lista.get(k));\n                    }\n                    }\n                }\n            }\n        }\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Java solution (zero
        optimization):  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package main;\n\nimport
        java.io.File; // Import the File class\nimport java.io.FileNotFoundException;
        // Import this class to handle errors\nimport java.util.Scanner; // Import
        the Scanner class to read text files\nimport java.util.ArrayList; // import
        the ArrayList class\n\npublic class Main {\n    public static void main(String[]
        args) {\n        ArrayList&amp;lt;Integer&amp;gt; lista = new ArrayList&amp;lt;Integer&amp;gt;();\n        try
        {\n            File myObj = new File(&amp;quot;input.txt&amp;quot;);\n            Scanner
        myReader = new Scanner(myObj);\n            while (myReader.hasNextLine())
        {\n                lista.add(myReader.nextInt());\n            }\n            myReader.close();\n        }
        catch (FileNotFoundException e) {\n            System.out.println(&amp;quot;An
        error occurred.&amp;quot;);\n            e.printStackTrace();\n        }\n\n        for
        (int i = 0; i &amp;lt; lista.size(); i++) {\n            for (int j = 0; j
        &amp;lt; lista.size(); j++) {\n                for(int k = 0; k &amp;lt; lista.size();
        k++){\n                    if (lista.get(i) + lista.get(j) + lista.get(k)
        == 2020) {\n                        System.out.println(lista.get(i) + &amp;quot;
        &amp;quot; + lista.get(j) + &amp;quot; &amp;quot; + lista.get(k));\n                        System.out.println(lista.get(i)
        * lista.get(j) * lista.get(k));\n                }\n                }\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge948qx/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge948qx", "created":
        1606825843.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9hvl7",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "woodoo123",
        "can_mod_post": false, "created_utc": 1606834847.0, "send_replies": true,
        "parent_id": "t1_ge948qx", "score": 2, "author_fullname": "t2_9pfip", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "A possible optimization could be to use streams. Once you got the numbers
        as a List of Integers, you can just do the following:\n\n    private static
        int getFirstResult(List&lt;Integer&gt; numbers) {\n        return numbers.stream()\n                .filter(firstNumber
        -&gt; numbers.stream()\n                        .anyMatch(secondNumber -&gt;
        2020 == firstNumber + secondNumber))\n                .reduce(1, (a, b) -&gt;
        a * b);\n    }", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;A
        possible optimization could be to use streams. Once you got the numbers as
        a List of Integers, you can just do the following:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;private
        static int getFirstResult(List&amp;lt;Integer&amp;gt; numbers) {\n    return
        numbers.stream()\n            .filter(firstNumber -&amp;gt; numbers.stream()\n                    .anyMatch(secondNumber
        -&amp;gt; 2020 == firstNumber + secondNumber))\n            .reduce(1, (a,
        b) -&amp;gt; a * b);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9hvl7/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge9hvl7", "created": 1606834847.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": 1606826640.0, "mod_reason_by": null, "banned_by": null, "removal_reason":
        null, "link_id": "t3_k4e4lm", "author_flair_template_id": null, "likes": null,
        "replies": "", "user_reports": [], "saved": false, "id": "ge94kss", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "[deleted]", "can_mod_post": false, "send_replies":
        true, "parent_id": "t3_k4e4lm", "score": 1, "approved_by": null, "mod_note":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "Python (oneliner)\n\n    import
        itertools as i,math;f=lambda x:print(next(math.prod(y) for y in i.combinations((int(l)
        for l in open(''01.in'').readlines()),x) if sum(y)==2020));f(2);f(3)", "awarders":
        [], "downs": 0, "author_flair_css_class": null, "name": "t1_ge94kss", "collapsed":
        false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python
        (oneliner)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import itertools as i,math;f=lambda
        x:print(next(math.prod(y) for y in i.combinations((int(l) for l in open(&amp;#39;01.in&amp;#39;).readlines()),x)
        if sum(y)==2020));f(2);f(3)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge94kss/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606826137.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606826137.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge96twu", "id": "ge96twu", "parent_id":
        "t1_ge94kss", "depth": 1, "children": ["ge96twu"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge94liw",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Chris_Hemsworth",
        "can_mod_post": false, "created_utc": 1606826154.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_d1ama", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "#Python 3 using itertools\n\n    import itertools\n    import numpy as np\n    \n    with
        open(''../inputs/day1.txt'') as f:\n        nums = list(map(int, f.readlines()))\n    \n    answer
        = np.prod([combo for combo in itertools.combinations(nums, 2) if sum(combo)
        == 2020][0])\n    print(f\"Part 1 Answer: {answer}\")\n    answer = np.prod([combo
        for combo in itertools.combinations(nums, 3) if sum(combo) == 2020][0])\n    print(f\"Part
        2 Answer: {answer}\")", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Python
        3 using itertools&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;import itertools\nimport
        numpy as np\n\nwith open(&amp;#39;../inputs/day1.txt&amp;#39;) as f:\n    nums
        = list(map(int, f.readlines()))\n\nanswer = np.prod([combo for combo in itertools.combinations(nums,
        2) if sum(combo) == 2020][0])\nprint(f&amp;quot;Part 1 Answer: {answer}&amp;quot;)\nanswer
        = np.prod([combo for combo in itertools.combinations(nums, 3) if sum(combo)
        == 2020][0])\nprint(f&amp;quot;Part 2 Answer: {answer}&amp;quot;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge94liw/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge94liw", "created":
        1606826154.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge962sp", "id": "ge962sp", "parent_id":
        "t1_ge94liw", "depth": 1, "children": ["ge962sp"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge94tnj",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "llimllib",
        "can_mod_post": false, "created_utc": 1606826347.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_32r8", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# Bash\n\npart 1:\n\n    # read the inputs.txt file into an array called
        inputs\n    # `readarray` is a synonym for `mapfile`. manual here:\n    #
        http://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html#index-mapfile\n    readarray
        -t inputs &lt; input.txt\n\n    for i in ${inputs[@]}; do\n    for j in ${inputs[@]};
        do\n        if [[ $((i+j)) == 2020 ]]; then\n            echo $i, $j, $((i*j))\n            break
        2\n        fi\n    done\n    done\n\npart 2:\n\n    # we can get a pretty
        decent speedup by slicing the arrays properly to avoid extra loops\n    \n    readarray
        -t inputs &lt; input.txt\n    \n    ni=0\n    \n    for i in ${inputs[@]};
        do\n        ni=$((ni+1))\n        nj=ni\n        # we can slice arrays in
        bash!\n        for j in ${inputs[@]:ni}; do\n            nj=$((nj+1))\n            if
        [[ $((i+j)) -gt 2020 ]]; then\n              continue\n            fi\n            for
        k in ${inputs[@]:nj}; do\n                if [[ $((i+j+k)) == 2020 ]]; then\n                  echo
        $i, $j, $k, $((i*j*k))\n                  break 3\n                fi\n            done\n        done\n    done",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Bash&lt;/h1&gt;\n\n&lt;p&gt;part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# read the inputs.txt file into an
        array called inputs\n# `readarray` is a synonym for `mapfile`. manual here:\n#
        http://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html#index-mapfile\nreadarray
        -t inputs &amp;lt; input.txt\n\nfor i in ${inputs[@]}; do\nfor j in ${inputs[@]};
        do\n    if [[ $((i+j)) == 2020 ]]; then\n        echo $i, $j, $((i*j))\n        break
        2\n    fi\ndone\ndone\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;part 2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#
        we can get a pretty decent speedup by slicing the arrays properly to avoid
        extra loops\n\nreadarray -t inputs &amp;lt; input.txt\n\nni=0\n\nfor i in
        ${inputs[@]}; do\n    ni=$((ni+1))\n    nj=ni\n    # we can slice arrays in
        bash!\n    for j in ${inputs[@]:ni}; do\n        nj=$((nj+1))\n        if
        [[ $((i+j)) -gt 2020 ]]; then\n          continue\n        fi\n        for
        k in ${inputs[@]:nj}; do\n            if [[ $((i+j+k)) == 2020 ]]; then\n              echo
        $i, $j, $k, $((i*j*k))\n              break 3\n            fi\n        done\n    done\ndone\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge94tnj/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge94tnj", "created":
        1606826347.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 0, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge94u77",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "backtickbot",
        "can_mod_post": false, "created_utc": 1606826360.0, "send_replies": true,
        "parent_id": "t1_ge94tnj", "score": 0, "author_fullname": "t2_8n9fijwc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Hello, llimllib: code blocks using backticks (\\`\\`\\`) don''t work on all
        versions of Reddit!\n\nSome users see [this](https://stalas.alm.lt/backformat/ge94tnj.png)
        / [this](https://stalas.alm.lt/backformat/ge94tnj.html) instead.\n\nTo fix
        this, indent every line with **4 spaces** instead. It''s a bit annoying, but
        then your code blocks are properly formatted for everyone.\n\nAn easy way
        to do this is to use the [code-block button in the editor](https://stalas.alm.lt/files/new-reddit-codeblock.png).
        If it''s not working, try switching to the fancy-pants editor and back again.\n\n[Comment
        with formatting fixed for old.reddit.com users](https://np.reddit.com/r/backtickbot/comments/k4k2y7/httpsnpredditcomradventofcodecommentsk4e4lm2020/)\n\n[FAQ](https://www.reddit.com/r/backtickbot/wiki/index)\n\n^(You
        can opt out by replying with backtickopt6 to this comment.)", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Hello, llimllib: code blocks using backticks
        (```) don&amp;#39;t work on all versions of Reddit!&lt;/p&gt;\n\n&lt;p&gt;Some
        users see &lt;a href=\"https://stalas.alm.lt/backformat/ge94tnj.png\"&gt;this&lt;/a&gt;
        / &lt;a href=\"https://stalas.alm.lt/backformat/ge94tnj.html\"&gt;this&lt;/a&gt;
        instead.&lt;/p&gt;\n\n&lt;p&gt;To fix this, indent every line with &lt;strong&gt;4
        spaces&lt;/strong&gt; instead. It&amp;#39;s a bit annoying, but then your
        code blocks are properly formatted for everyone.&lt;/p&gt;\n\n&lt;p&gt;An
        easy way to do this is to use the &lt;a href=\"https://stalas.alm.lt/files/new-reddit-codeblock.png\"&gt;code-block
        button in the editor&lt;/a&gt;. If it&amp;#39;s not working, try switching
        to the fancy-pants editor and back again.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://np.reddit.com/r/backtickbot/comments/k4k2y7/httpsnpredditcomradventofcodecommentsk4e4lm2020/\"&gt;Comment
        with formatting fixed for old.reddit.com users&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://www.reddit.com/r/backtickbot/wiki/index\"&gt;FAQ&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;You
        can opt out by replying with backtickopt6 to this comment.&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge94u77/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge94u77", "created":
        1606826360.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606827292.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge959yk", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "thibpat",
        "can_mod_post": false, "created_utc": 1606826720.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_j7bwx", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# JavaScript walkthrough\n\nVideo: [**https://youtu.be/fzZMD19Ek4g**](https://youtu.be/fzZMD19Ek4g)\n\nSource:
        [https://github.com/tpatel/advent-of-code-2020/blob/main/day1.js](https://github.com/tpatel/advent-of-code-2020/blob/main/day1.js)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;JavaScript walkthrough&lt;/h1&gt;\n\n&lt;p&gt;Video:
        &lt;a href=\"https://youtu.be/fzZMD19Ek4g\"&gt;&lt;strong&gt;https://youtu.be/fzZMD19Ek4g&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Source:
        &lt;a href=\"https://github.com/tpatel/advent-of-code-2020/blob/main/day1.js\"&gt;https://github.com/tpatel/advent-of-code-2020/blob/main/day1.js&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge959yk/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge959yk", "created":
        1606826720.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge95a1e",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "anka69",
        "can_mod_post": false, "created_utc": 1606826721.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_10qfco", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "&amp;#x200B;\n\n**Julia**\n\nA quite hacky solution but hey, it works!\n\n    data_set
        = Set()\n    \n    f = open(\"input.txt\") do file\n    \n        for ln in
        eachline(file)\n    \n            number = parse(Int, ln)\n            push!(data_set,
        number)\n        end\n    end\n    \n    # Part 1\n    println(\"---PART 1---\")\n    for
        number in data_set\n    \n        tmp = 2020 - number\n        if tmp in data_set\n            println(tmp,
        \" \", number, \" Product is: \", tmp*number)\n        end\n    \n    end\n    \n    println(\"---PART
        2---\")\n    for number in data_set\n        for number_2 in data_set\n    \n            tmp
        = 2020 - number - number_2\n    \n            if tmp in data_set\n                println(tmp,
        \" \", number, \" Product is: \", tmp*number*number_2)\n            end\n    \n        end\n    \n    end",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Julia&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;A
        quite hacky solution but hey, it works!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;data_set
        = Set()\n\nf = open(&amp;quot;input.txt&amp;quot;) do file\n\n    for ln in
        eachline(file)\n\n        number = parse(Int, ln)\n        push!(data_set,
        number)\n    end\nend\n\n# Part 1\nprintln(&amp;quot;---PART 1---&amp;quot;)\nfor
        number in data_set\n\n    tmp = 2020 - number\n    if tmp in data_set\n        println(tmp,
        &amp;quot; &amp;quot;, number, &amp;quot; Product is: &amp;quot;, tmp*number)\n    end\n\nend\n\nprintln(&amp;quot;---PART
        2---&amp;quot;)\nfor number in data_set\n    for number_2 in data_set\n\n        tmp
        = 2020 - number - number_2\n\n        if tmp in data_set\n            println(tmp,
        &amp;quot; &amp;quot;, number, &amp;quot; Product is: &amp;quot;, tmp*number*number_2)\n        end\n\n    end\n\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge95a1e/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge95a1e", "created":
        1606826721.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge95f68",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Sidalay",
        "can_mod_post": false, "created_utc": 1606826838.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_94ai6zfe", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "C++\n\nFirst time finding out about AoC and excited to jump in. Also its
        good timing as I''m a beginner learning for about 3 months now and would like
        to find some fun challenges to do for practice!\n\n    int main()\n    {\n        std::ifstream
        Expenses {\"Expenses.txt\"};    // txt file containing the expense numbers\n        std::vector
        &lt;int&gt; AllExpenses;              // container to collect &amp; store
        each expense number\n        int NumLine{};                              //
        grabs the number from txt file to push into vector\n        int Product{};                              //
        stores value of the three numbers that multiply to 2020\n        int Sum{2020};                              //
        stores the Sum that our three expenses need to add up to\n    \n        try\n        {\n            if
        (!Expenses)\n            {\n                throw (\"File could not be found.\");\n            }\n            while
        (Expenses &gt;&gt; NumLine)\n            {\n                AllExpenses.push_back(NumLine);\n            }\n            for
        (auto &amp;i:AllExpenses)       // Loop through vectors to get 1st,2nd,3rd
        \n            {                               // values to find sum(2020)
        and product\n                for (auto &amp;c:AllExpenses)   \n                {\n                    for
        (auto &amp;z:AllExpenses)\n                    {\n                        if
        (i + c + z == Sum)\n                        {\n                            Product
        = i * c * z;\n    \n                            std::cout &lt;&lt; i &lt;&lt;
        \" + \" &lt;&lt; c &lt;&lt; \" + \" \n                                      &lt;&lt;
        z &lt;&lt; \" = \" &lt;&lt; Sum &lt;&lt; std::endl;\n                            std::cout
        &lt;&lt; i &lt;&lt; \" * \" &lt;&lt; c &lt;&lt; \" * \" \n                                      &lt;&lt;
        z &lt;&lt; \" = \" &lt;&lt; Product &lt;&lt; std::endl;\n                        }\n                    }\n                }\n            }\n        }\n    \n        catch(const
        std::exception&amp; e)\n        {\n            std::cerr &lt;&lt; e.what()
        &lt;&lt; ''\\n'';\n        }\n    \n        Expenses.close();\n        std::cin.get();\n        \n        return
        0;\n    }", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C++&lt;/p&gt;\n\n&lt;p&gt;First
        time finding out about AoC and excited to jump in. Also its good timing as
        I&amp;#39;m a beginner learning for about 3 months now and would like to find
        some fun challenges to do for practice!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;int
        main()\n{\n    std::ifstream Expenses {&amp;quot;Expenses.txt&amp;quot;};    //
        txt file containing the expense numbers\n    std::vector &amp;lt;int&amp;gt;
        AllExpenses;              // container to collect &amp;amp; store each expense
        number\n    int NumLine{};                              // grabs the number
        from txt file to push into vector\n    int Product{};                              //
        stores value of the three numbers that multiply to 2020\n    int Sum{2020};                              //
        stores the Sum that our three expenses need to add up to\n\n    try\n    {\n        if
        (!Expenses)\n        {\n            throw (&amp;quot;File could not be found.&amp;quot;);\n        }\n        while
        (Expenses &amp;gt;&amp;gt; NumLine)\n        {\n            AllExpenses.push_back(NumLine);\n        }\n        for
        (auto &amp;amp;i:AllExpenses)       // Loop through vectors to get 1st,2nd,3rd
        \n        {                               // values to find sum(2020) and
        product\n            for (auto &amp;amp;c:AllExpenses)   \n            {\n                for
        (auto &amp;amp;z:AllExpenses)\n                {\n                    if (i
        + c + z == Sum)\n                    {\n                        Product =
        i * c * z;\n\n                        std::cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt;
        &amp;quot; + &amp;quot; &amp;lt;&amp;lt; c &amp;lt;&amp;lt; &amp;quot; + &amp;quot;
        \n                                  &amp;lt;&amp;lt; z &amp;lt;&amp;lt; &amp;quot;
        = &amp;quot; &amp;lt;&amp;lt; Sum &amp;lt;&amp;lt; std::endl;\n                        std::cout
        &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;quot; * &amp;quot; &amp;lt;&amp;lt;
        c &amp;lt;&amp;lt; &amp;quot; * &amp;quot; \n                                  &amp;lt;&amp;lt;
        z &amp;lt;&amp;lt; &amp;quot; = &amp;quot; &amp;lt;&amp;lt; Product &amp;lt;&amp;lt;
        std::endl;\n                    }\n                }\n            }\n        }\n    }\n\n    catch(const
        std::exception&amp;amp; e)\n    {\n        std::cerr &amp;lt;&amp;lt; e.what()
        &amp;lt;&amp;lt; &amp;#39;\\n&amp;#39;;\n    }\n\n    Expenses.close();\n    std::cin.get();\n\n    return
        0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge95f68/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge95f68", "created":
        1606826838.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge95r6o",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "sikerdebaard",
        "can_mod_post": false, "created_utc": 1606827102.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_i7mgk5j", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# Python + numpy\n\nWhile definitely not the shortest, quickest or best solution
        it was fun to play around with. For part 1 this code projects the numbers
        on a square and calculates the sum and for part 2 it projects the numbers
        on a cube and calculates the sum. This seems to be faster than the standard
        python itertools solution. Lots of room for optimization left though, anything
        above 3 dimensions will crash your system. ;)\n\n    import sys\n    \n    !{sys.executable}
        -m pip install pandas\n\n## Numpy solution\n\n    import numpy as np\n    \n    year
        = 2020\n    dimensions = 3\n    \n    numbers = np.loadtxt(''day01/numbers.txt'',
        dtype=np.uint64)\n    l = numbers.shape[0]\n    \n    initial_arrays = []\n    result
        = np.zeros(dimensions * [l])\n    for i in range(0, dimensions):\n        init
        = np.zeros(dimensions * [l])\n        init[...] = numbers\n        \n        if
        dimensions &gt; 2:\n            dim1 = i\n            dim2 = i + 1\n            if
        dim2 &gt;= dimensions:\n                dim2 = 0\n            init = np.rot90(init,
        1, (dim1, dim2))\n        else:\n            init = np.rot90(init, i)\n        initial_arrays.append(init)\n        result
        += init\n    \n    counter = 0\n    q = np.where(result == year)\n    coords
        = list(zip(*q))\n    \n    result = []\n    for idxarr in coords:\n        vals
        = []\n        for arr in initial_arrays:\n            vals.append(arr[idxarr])\n            \n        result
        += vals\n        counter += 1\n        \n    result = list(set(result))\n    \n    print(result,
        int(np.prod(result)))\n    [577.0, 1021.0, 422.0] 248607374\n\n# Itertools
        solution\n\n    import numpy as np\n    from itertools import combinations\n    \n    year
        = 2020\n    dimensions = 3\n    \n    numbers = np.loadtxt(''day01/numbers.txt'',
        dtype=np.uint64)\n    \n    result = list([c for c in combinations(numbers,
        dimensions) if sum(c) == year][0])\n        \n    print(result, np.prod(result))\n    [422,
        577, 1021] 248607374", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Python
        + numpy&lt;/h1&gt;\n\n&lt;p&gt;While definitely not the shortest, quickest
        or best solution it was fun to play around with. For part 1 this code projects
        the numbers on a square and calculates the sum and for part 2 it projects
        the numbers on a cube and calculates the sum. This seems to be faster than
        the standard python itertools solution. Lots of room for optimization left
        though, anything above 3 dimensions will crash your system. ;)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        sys\n\n!{sys.executable} -m pip install pandas\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Numpy
        solution&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;import numpy as np\n\nyear =
        2020\ndimensions = 3\n\nnumbers = np.loadtxt(&amp;#39;day01/numbers.txt&amp;#39;,
        dtype=np.uint64)\nl = numbers.shape[0]\n\ninitial_arrays = []\nresult = np.zeros(dimensions
        * [l])\nfor i in range(0, dimensions):\n    init = np.zeros(dimensions * [l])\n    init[...]
        = numbers\n\n    if dimensions &amp;gt; 2:\n        dim1 = i\n        dim2
        = i + 1\n        if dim2 &amp;gt;= dimensions:\n            dim2 = 0\n        init
        = np.rot90(init, 1, (dim1, dim2))\n    else:\n        init = np.rot90(init,
        i)\n    initial_arrays.append(init)\n    result += init\n\ncounter = 0\nq
        = np.where(result == year)\ncoords = list(zip(*q))\n\nresult = []\nfor idxarr
        in coords:\n    vals = []\n    for arr in initial_arrays:\n        vals.append(arr[idxarr])\n\n    result
        += vals\n    counter += 1\n\nresult = list(set(result))\n\nprint(result, int(np.prod(result)))\n[577.0,
        1021.0, 422.0] 248607374\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Itertools
        solution&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;import numpy as np\nfrom itertools
        import combinations\n\nyear = 2020\ndimensions = 3\n\nnumbers = np.loadtxt(&amp;#39;day01/numbers.txt&amp;#39;,
        dtype=np.uint64)\n\nresult = list([c for c in combinations(numbers, dimensions)
        if sum(c) == year][0])\n\nprint(result, np.prod(result))\n[422, 577, 1021]
        248607374\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge95r6o/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge95r6o", "created":
        1606827102.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9809q",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "442401",
        "can_mod_post": false, "created_utc": 1606828808.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_g67aa", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Ruby**\n\nReturns an array containing solutions to parts 1 &amp; 2\n\n    input
        = File.readlines(\"input.txt\").map(&amp;:to_i)\n\n    [2, 3].map do |part|\n      input.permutation(part)
        { |perm| break perm if perm.sum == 2020 }.inject(:*)\n    end", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Returns
        an array containing solutions to parts 1 &amp;amp; 2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;input
        = File.readlines(&amp;quot;input.txt&amp;quot;).map(&amp;amp;:to_i)\n\n[2,
        3].map do |part|\n  input.permutation(part) { |perm| break perm if perm.sum
        == 2020 }.inject(:*)\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9809q/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge9809q", "created": 1606828808.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "ge989na", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "gandu_chele", "can_mod_post": false, "created_utc":
        1606828988.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_orqxg", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "part one done in excel,
        similar to what /u/AlistairJF did\n\nPart 2 \n\n**Go**\n\n    package main\n    \n    import
        (\n    \t\"bufio\"\n    \t\"fmt\"\n    \t\"io\"\n    \t\"os\"\n    \t\"sort\"\n    \t\"strconv\"\n    \t\"time\"\n    )\n    \n    func
        day1p2(in io.Reader, out io.Writer) {\n    \n    \ttargetVal := 2020\n    \tdat,
        err := readLines(\"input.txt\")\n    \tif err != nil {\n    \t\tfmt.Println(err)\n    \t}\n    \tsort.Ints(dat)\n    \t//fmt.Println(dat)\n    \tarrSize
        := len(dat)\n    \tfor i := 0; i &lt; arrSize-2; i++ {\n    \n    \t\tleft
        := i + 1\n    \t\tright := arrSize - 1\n    \t\tfor left &lt; right {\n    \t\t\tif
        dat[i]+dat[left]+dat[right] == targetVal {\n    \t\t\t\tfmt.Println(\"Triplet
        is \", dat[i], \", \", dat[left], \", \", dat[right])\n    \t\t\t\tfmt.Println(\"Product
        is \", dat[i]*dat[left]*dat[right])\n    \t\t\t\treturn\n    \t\t\t} else
        if dat[i]+dat[left]+dat[right] &lt; targetVal {\n    \t\t\t\tleft++\n    \t\t\t}
        else {\n    \t\t\t\tright--\n    \t\t\t}\n    \t\t}\n    \t}\n    \n    }\n    \n    //
        readLines reads a whole file into memory\n    // and returns a slice of its
        ints.\n    func readLines(path string) ([]int, error) {\n    \tfile, err :=
        os.Open(path)\n    \tif err != nil {\n    \t\treturn nil, err\n    \t}\n    \tdefer
        file.Close()\n    \n    \tvar lines []int\n    \tscanner := bufio.NewScanner(file)\n    \tfor
        scanner.Scan() {\n    \t\tintVal, _ := strconv.Atoi(scanner.Text())\n    \t\tlines
        = append(lines, intVal)\n    \t}\n    \treturn lines, scanner.Err()\n    }\n    \n    func
        main() {\n    \tstart := time.Now()\n    \tday1p2(os.Stdin, os.Stdout)\n    \telapsed
        := time.Since(start)\n    \tfmt.Printf(\"day1p2 took %v\", elapsed)\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;part one done in excel,
        similar to what &lt;a href=\"/u/AlistairJF\"&gt;/u/AlistairJF&lt;/a&gt; did&lt;/p&gt;\n\n&lt;p&gt;Part
        2 &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Go&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package
        main\n\nimport (\n    &amp;quot;bufio&amp;quot;\n    &amp;quot;fmt&amp;quot;\n    &amp;quot;io&amp;quot;\n    &amp;quot;os&amp;quot;\n    &amp;quot;sort&amp;quot;\n    &amp;quot;strconv&amp;quot;\n    &amp;quot;time&amp;quot;\n)\n\nfunc
        day1p2(in io.Reader, out io.Writer) {\n\n    targetVal := 2020\n    dat, err
        := readLines(&amp;quot;input.txt&amp;quot;)\n    if err != nil {\n        fmt.Println(err)\n    }\n    sort.Ints(dat)\n    //fmt.Println(dat)\n    arrSize
        := len(dat)\n    for i := 0; i &amp;lt; arrSize-2; i++ {\n\n        left :=
        i + 1\n        right := arrSize - 1\n        for left &amp;lt; right {\n            if
        dat[i]+dat[left]+dat[right] == targetVal {\n                fmt.Println(&amp;quot;Triplet
        is &amp;quot;, dat[i], &amp;quot;, &amp;quot;, dat[left], &amp;quot;, &amp;quot;,
        dat[right])\n                fmt.Println(&amp;quot;Product is &amp;quot;,
        dat[i]*dat[left]*dat[right])\n                return\n            } else if
        dat[i]+dat[left]+dat[right] &amp;lt; targetVal {\n                left++\n            }
        else {\n                right--\n            }\n        }\n    }\n\n}\n\n//
        readLines reads a whole file into memory\n// and returns a slice of its ints.\nfunc
        readLines(path string) ([]int, error) {\n    file, err := os.Open(path)\n    if
        err != nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var
        lines []int\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan()
        {\n        intVal, _ := strconv.Atoi(scanner.Text())\n        lines = append(lines,
        intVal)\n    }\n    return lines, scanner.Err()\n}\n\nfunc main() {\n    start
        := time.Now()\n    day1p2(os.Stdin, os.Stdout)\n    elapsed := time.Since(start)\n    fmt.Printf(&amp;quot;day1p2
        took %v&amp;quot;, elapsed)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge989na/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge989na", "created":
        1606828988.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606829536.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge98q2x", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "blodyx",
        "can_mod_post": false, "created_utc": 1606829309.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_b4wvy", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "my first AoC ill do them in python probably, i had a idea to hit the toplist
        as i was online at the relese... so focus was short program\n\n&amp;#x200B;\n\n&amp;#x200B;\n\n    \n    f
        = open(\"1.input\", \"r\")\n    listan=[]\n    for i in f:\n        listan.append(int(i.strip()))\n    \n    for
        x in listan:\n        for y in listan:\n            for z in listan:\n                if
        x+y+z==2020:\n                    print x*y*z", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;my first AoC ill do them in python probably, i had
        a idea to hit the toplist as i was online at the relese... so focus was short
        program&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;f
        = open(&amp;quot;1.input&amp;quot;, &amp;quot;r&amp;quot;)\nlistan=[]\nfor
        i in f:\n    listan.append(int(i.strip()))\n\nfor x in listan:\n    for y
        in listan:\n        for z in listan:\n            if x+y+z==2020:\n                print
        x*y*z\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge98q2x/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge98q2x", "created":
        1606829309.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge98qck",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "haujie",
        "can_mod_post": false, "created_utc": 1606829314.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_6s2a4", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Scala (gotta love those for-comprehensions )\n\n[paste](https://topaz.github.io/paste/#XQAAAQADAQAAAAAAAAAQaJmMJur7QTvWxASuc76+NBG9Xh6XKQptrqtjIjfmc4WQpxzPcH9DbD4nKIWwYQP2kvEZyIUtAU4jlT4731P9DPSPtQqldu455uKkAlCAWgML5oAUseY2nWCk3hf4VNAMTt48TuaCWwNBEJlLgZKInUzmiFQoBOm8Df5BW9c3hE4vqldeBCCsK/smxkA=)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Scala (gotta love those
        for-comprehensions )&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://topaz.github.io/paste/#XQAAAQADAQAAAAAAAAAQaJmMJur7QTvWxASuc76+NBG9Xh6XKQptrqtjIjfmc4WQpxzPcH9DbD4nKIWwYQP2kvEZyIUtAU4jlT4731P9DPSPtQqldu455uKkAlCAWgML5oAUseY2nWCk3hf4VNAMTt48TuaCWwNBEJlLgZKInUzmiFQoBOm8Df5BW9c3hE4vqldeBCCsK/smxkA=\"&gt;paste&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge98qck/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge98qck", "created":
        1606829314.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge98ysx",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "thebasementtapes",
        "can_mod_post": false, "created_utc": 1606829474.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_73cjr", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "    def elf_budget():\n        txt = open(\"desktop/advent_budget.txt\").read()\n        txt
        = txt.split(\"\\n\")\n        for i in range(0, len(txt)): \n             txt[i]
        = int(txt[i])\n        for i in txt: \n            for j in txt:\n                for
        k in txt:\n                    if i + j + k == 2020:\n                        return
        (i * j * k)\n\nVery simple and probably not super efficient python solution
        for me", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;def
        elf_budget():\n    txt = open(&amp;quot;desktop/advent_budget.txt&amp;quot;).read()\n    txt
        = txt.split(&amp;quot;\\n&amp;quot;)\n    for i in range(0, len(txt)): \n         txt[i]
        = int(txt[i])\n    for i in txt: \n        for j in txt:\n            for
        k in txt:\n                if i + j + k == 2020:\n                    return
        (i * j * k)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Very simple and probably
        not super efficient python solution for me&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge98ysx/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge98ysx", "created": 1606829474.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": 1606852636.0, "mod_reason_by": null, "banned_by": null, "ups": 1,
        "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge99296",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Breezing",
        "can_mod_post": false, "created_utc": 1606829541.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_4qvav", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My solution for any number of required expenses and any target value after
        a few revisions off my first attempt.\n\nTrying to grow as a programmer so
        any CC would be welcome.\n\nedit: python 3\n\n    import itertools\n    \n    number_of_matches
        = 3\n    goal_value = 2020\n    \n    expenses = [int(x) for x in open(''1a.in'').read().split(\"\\n\")]\n    possibles
        = itertools.combinations(expenses, number_of_matches)\n    \n    for a in
        possibles:\n        if sum(a) == goal_value:\n            product = 1\n            for
        b in range(number_of_matches):\n                product *= a[b]\n            print(\"The
        values are {} and the product is {}\".format(a, product))", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;My solution for any number of required expenses
        and any target value after a few revisions off my first attempt.&lt;/p&gt;\n\n&lt;p&gt;Trying
        to grow as a programmer so any CC would be welcome.&lt;/p&gt;\n\n&lt;p&gt;edit:
        python 3&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import itertools\n\nnumber_of_matches
        = 3\ngoal_value = 2020\n\nexpenses = [int(x) for x in open(&amp;#39;1a.in&amp;#39;).read().split(&amp;quot;\\n&amp;quot;)]\npossibles
        = itertools.combinations(expenses, number_of_matches)\n\nfor a in possibles:\n    if
        sum(a) == goal_value:\n        product = 1\n        for b in range(number_of_matches):\n            product
        *= a[b]\n        print(&amp;quot;The values are {} and the product is {}&amp;quot;.format(a,
        product))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge99296/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge99296", "created":
        1606829541.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_geagtt0", "id": "geagtt0", "parent_id":
        "t1_ge99296", "depth": 1, "children": ["geagtt0"]}}, {"kind": "more", "data":
        {"count": 183, "name": "t1_ge99c2y", "id": "ge99c2y", "parent_id": "t3_k4e4lm",
        "depth": 0, "children": ["ge99c2y", "ge9963b", "ge99kma", "ge99hmm", "ge9bnyc",
        "ge998wb", "ge9autn", "ge9c2p4", "ge9hgu2", "ge9aay1", "ge9fs08", "ge9cwwc",
        "ge9c3l6", "ge9px27", "ge9f357", "ge9e7k1", "ge9lrxu", "ge9cla0", "ge9pptc",
        "ge9idwm", "ge9hbp6", "ge9fh10", "ge9kuii", "ge9oow8", "geab8yv", "ge9l7o8",
        "ge9k6sa", "ge9gln9", "ge9qgy9", "gea5sgr", "ge9quzr", "gea1c82", "ge9lf9j",
        "ge9n0k8", "gea04hh", "ge9vs5f", "ge9kgch", "gea7lc6", "gebuvuw", "ge9wtc6",
        "geaxx0l", "ge9m65s", "ge9nnl1", "gea60ob", "ge9p8jh", "gea6m9x", "geacp52",
        "ge9v0oa", "geby132", "geb73sk", "geajhnt", "gead5e6", "gea6p3j", "ge9p7h9",
        "ge9l4ak", "gea8ouf", "ge9lb2t", "ge9u529", "ge9qj85", "gea91jq", "geayy5d",
        "gecd75d", "geb434g", "gecjat6", "geby48b", "gebidqz", "gec5h0g", "ge9p67o",
        "gea5os4", "gea3dle", "geayab9", "ge9wiwj", "geaqabf", "geady27", "gea17ge",
        "gebka8s", "geae2je", "ge9ysx3", "geaeq43", "ged616q", "gea0reu", "gead2hx",
        "gebuoyc", "gea37gf", "gea55cz", "ged4hhm", "gec0e6f", "gebcdzv", "gebx4pn",
        "geadna4", "geator7", "geabg9r", "gea846b", "ged4e5g", "geaja8q", "geac8gr"]}}],
        true]], [0, 12, "attr", "things"], [12, 13, "call", ["t1_ge8iotj"]], [13,
        14, "attr", "focus"], [14, 15, "call", []], [0, 16, "attr", "things"], [16,
        17, "call", ["None"]], [17, 18, "attr", "filter"], [18, 19, "call", [".morechildren"]],
        [19, 20, "attr", "remove"], [20, 21, "call", []]], "success": true}'
  recorded_at: Sat, 08 Mar 2025 23:06:38 GMT
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:38 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=7oyROCqn6a5wh3skjL; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sat, 08 Mar 2025 23:06:38 GMT
- request:
    method: post
    uri: https://oauth.reddit.com/api/morechildren.json
    body:
      encoding: UTF-8
      string: link_id=t3_k4e4lm&children=ge99c2y,ge9963b,ge99kma,ge99hmm,ge9bnyc,ge998wb,ge9autn,ge9c2p4,ge9hgu2,ge9aay1,ge9fs08,ge9cwwc,ge9c3l6,ge9px27,ge9f357,ge9e7k1,ge9lrxu,ge9cla0,ge9pptc,ge9idwm,ge9hbp6,ge9fh10,ge9kuii,ge9oow8,geab8yv,ge9l7o8,ge9k6sa,ge9gln9,ge9qgy9,gea5sgr,ge9quzr,gea1c82,ge9lf9j,ge9n0k8,gea04hh,ge9vs5f,ge9kgch,gea7lc6,gebuvuw,ge9wtc6,geaxx0l,ge9m65s,ge9nnl1,gea60ob,ge9p8jh,gea6m9x,geacp52,ge9v0oa,geby132,geb73sk,geajhnt,gead5e6,gea6p3j,ge9p7h9,ge9l4ak,gea8ouf,ge9lb2t,ge9u529,ge9qj85,gea91jq,geayy5d,gecd75d,geb434g,gecjat6,geby48b,gebidqz,gec5h0g,ge9p67o,gea5os4,gea3dle,geayab9,ge9wiwj,geaqabf,geady27,gea17ge,gebka8s,geae2je,ge9ysx3,geaeq43,ged616q,gea0reu,gead2hx,gebuoyc,gea37gf,gea55cz,ged4hhm,gec0e6f,gebcdzv,gebx4pn,geadna4,geator7,geabg9r,gea846b,ged4e5g,geaja8q,geac8gr
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '31620'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      set-cookie:
      - loid=000000001ksigcqb12.2.1741475198737.Z0FBQUFBQm56TTFfbzYxRjJYaW4yQ0FOVG5RRzhyWnRiNTR2TXVPTWpJY0FCMU90cExTZ1RTVy02dW1jdU9PUUFMRkxzNzZ5NUtjUjduUlNnRzN1MXVVaERkWGQwRzdaTnN4QWVXazRhRGI2Qkt5bUxuZC05TVdWVVJoSGR1TXJ6dVM2QlBMWnd0NWY;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Mon, 08-Mar-2027 23:06:39
        GMT; secure, session_tracker=frfljjamrjkhacqngl.0.1741475198750.Z0FBQUFBQm56TTFfTDRIYl9rRlZ3c0VxeHBkaS0wSTNmWHJOZk1GWl9SeU5BY0pfT3d0X2xfTVhaSThnVGhGNlR6TjI2TVJITHMtTk9UZFh2a2dfc0JIUTh4M3JQN1RZY0lOSWl6alVhZWdya2cwSHBpbnFwVXdraEgwOFFPdjJKbHJyazUyWDFIS2E;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 01:06:39
        GMT; secure, edgebucket=O0AvFETINIV3aR9Ogq; Domain=reddit.com; Max-Age=63071999;
        Path=/;  secure
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '22'
      x-ratelimit-remaining:
      - '78.0'
      x-ratelimit-reset:
      - '201'
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:39 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"jquery": [[0, 1, "call", ["body"]], [1, 2, "attr", "find"], [2, 3,
        "call", [".status"]], [3, 4, "attr", "hide"], [4, 5, "call", []], [5, 6, "attr",
        "html"], [6, 7, "call", [""]], [7, 8, "attr", "end"], [8, 9, "call", []],
        [0, 10, "attr", "insert_things"], [10, 11, "call", [[{"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606830498.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge99c2y", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "okawei",
        "can_mod_post": false, "created_utc": 1606829730.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_3tlqt", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Golang**\n     \n    package main\n    \n    import (\n    \t\"fmt\"\n    \t\"math\"\n    \t\"strconv\"\n    \t\"strings\"\n    )\n    \n    const
        input = `1772,1065,1827,1671,1181,1915,1657,1632,1053,1546,1039,1388,1698,1174,1275,1250,1988,1078,1075,1958,1617,1387,1543,1965,1867,1771,1755,1331,1677,1935,1488,911,1001,1516,1949,1626,1083,1402,1223,1179,2001,1790,1551,1117,1990,1968,1532,1999,1175,1126,1869,1666,1753,513,1349,1139,1941,1823,1647,1835,1943,1459,1833,1398,1877,1625,1749,1631,1864,1826,1499,1336,1264,1091,1558,1321,1754,1729,1585,1740,1767,1774,1164,1318,1930,1236,1995,1611,1319,1361,1119,1563,1578,1047,1797,1787,1038,1921,1656,1898,1828,1727,1825,2010,536,1395,1865,1882,1638,1954,1565,1296,1723,1187,60,1130,1102,1963,1048,1493,1795,472,1496,1278,1444,1889,860,1975,1961,1070,1570,1495,1644,1881,1293,1090,1906,1385,1549,1143,1195,2004,1397,1032,1681,2000,1574,1400,1911,1868,1917,1872,1696,1086,1291,1761,1703,1202,1486,1705,1924,1186,1676,1615,1951,1556,1604,1534,2002,1334,1109,1108,1713,1422,1909,1418,1592,1887,1037,1568,1914,1780,1929,1973,1684,1581,1148,1931,1619,1082,1166,1913,1312,1330,1540,1841,1977,1769,1691,1821`\n    \n    func
        main() {\n    \tinputArr := getInputArray()\n    \tpart1Answer := getPart1Answer(inputArr)\n    \tpart2Answer
        := getPart2Answer(inputArr)\n    \tfmt.Println(part1Answer)\n    \tfmt.Println(part2Answer)\n    }\n    \n    func
        smallestNumber(inputArr []int) int{\n    \ttracker := math.MaxInt64\n    \tfor
        _, val := range inputArr {\n    \t\tif val &lt; tracker {\n    \t\t\ttracker
        = val\n    \t\t}\n    \t}\n    \treturn tracker\n    }\n    \n    func getPart2Answer(inputArr
        []int) int {\n    \t// If any number added to the smallest number is &gt;
        2020 then we can ignore it\n    \tprunedInput := getPrunedInput(inputArr)\n    \tfor
        i, val := range prunedInput {\n    \t\tfor i2, val2 := range prunedInput {\n    \t\t\t//
        Don''t use the same number twice\n    \t\t\tif val+val2 &gt; 2020 ||  i ==
        i2 {\n    \t\t\t\tcontinue\n    \t\t\t}\n    \t\t\tfor i3, val3 := range prunedInput
        {\n    \n    \t\t\t\t// Don''t use the same number twice\n    \t\t\t\tif i2
        == i3 || i2 == i {\n    \t\t\t\t\tcontinue\n    \t\t\t\t}\n    \t\t\t\tif
        val+val2+val3 == 2020 {\n    \t\t\t\t\treturn val * val2 * val3\n    \n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t}\n    \treturn
        0\n    }\n    \n    func getPrunedInput(inputArr []int) []int {\n    \tprunedInput
        := []int{}\n    \tsmallestNum := smallestNumber(inputArr)\n    \tfor _, val
        := range inputArr {\n    \t\tif val+smallestNum &lt; 2020 {\n    \t\t\tprunedInput
        = append(prunedInput, val)\n    \t\t}\n    \t}\n    \treturn prunedInput\n    }\n    \n    \n    func
        getPart1Answer(inputArr []int) int {\n    \tfor i, v := range inputArr {\n    \t\tfor
        i2, v2 := range inputArr {\n    \t\t\t// Don''t compare the same number to
        itself\n    \t\t\tif i == i2 {\n    \t\t\t\tcontinue\n    \t\t\t}\n    \t\t\tif
        v+v2 == 2020 {\n    \t\t\t\treturn v * v2\n    \t\t\t}\n    \t\t}\n    \t}\n    \treturn
        0\n    }\n    \n    func getInputArray() []int {\n    \tinputArr := strings.Split(input,
        \",\")\n    \tvar inputIntArr []int\n    \tfor _, num := range inputArr {\n    \t\tintVal,
        _ := strconv.Atoi(num)\n    \t\tinputIntArr = append(inputIntArr, intVal)\n    \t}\n    \treturn
        inputIntArr\n    }", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Golang&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package
        main\n\nimport (\n    &amp;quot;fmt&amp;quot;\n    &amp;quot;math&amp;quot;\n    &amp;quot;strconv&amp;quot;\n    &amp;quot;strings&amp;quot;\n)\n\nconst
        input = `1772,1065,1827,1671,1181,1915,1657,1632,1053,1546,1039,1388,1698,1174,1275,1250,1988,1078,1075,1958,1617,1387,1543,1965,1867,1771,1755,1331,1677,1935,1488,911,1001,1516,1949,1626,1083,1402,1223,1179,2001,1790,1551,1117,1990,1968,1532,1999,1175,1126,1869,1666,1753,513,1349,1139,1941,1823,1647,1835,1943,1459,1833,1398,1877,1625,1749,1631,1864,1826,1499,1336,1264,1091,1558,1321,1754,1729,1585,1740,1767,1774,1164,1318,1930,1236,1995,1611,1319,1361,1119,1563,1578,1047,1797,1787,1038,1921,1656,1898,1828,1727,1825,2010,536,1395,1865,1882,1638,1954,1565,1296,1723,1187,60,1130,1102,1963,1048,1493,1795,472,1496,1278,1444,1889,860,1975,1961,1070,1570,1495,1644,1881,1293,1090,1906,1385,1549,1143,1195,2004,1397,1032,1681,2000,1574,1400,1911,1868,1917,1872,1696,1086,1291,1761,1703,1202,1486,1705,1924,1186,1676,1615,1951,1556,1604,1534,2002,1334,1109,1108,1713,1422,1909,1418,1592,1887,1037,1568,1914,1780,1929,1973,1684,1581,1148,1931,1619,1082,1166,1913,1312,1330,1540,1841,1977,1769,1691,1821`\n\nfunc
        main() {\n    inputArr := getInputArray()\n    part1Answer := getPart1Answer(inputArr)\n    part2Answer
        := getPart2Answer(inputArr)\n    fmt.Println(part1Answer)\n    fmt.Println(part2Answer)\n}\n\nfunc
        smallestNumber(inputArr []int) int{\n    tracker := math.MaxInt64\n    for
        _, val := range inputArr {\n        if val &amp;lt; tracker {\n            tracker
        = val\n        }\n    }\n    return tracker\n}\n\nfunc getPart2Answer(inputArr
        []int) int {\n    // If any number added to the smallest number is &amp;gt;
        2020 then we can ignore it\n    prunedInput := getPrunedInput(inputArr)\n    for
        i, val := range prunedInput {\n        for i2, val2 := range prunedInput {\n            //
        Don&amp;#39;t use the same number twice\n            if val+val2 &amp;gt;
        2020 ||  i == i2 {\n                continue\n            }\n            for
        i3, val3 := range prunedInput {\n\n                // Don&amp;#39;t use the
        same number twice\n                if i2 == i3 || i2 == i {\n                    continue\n                }\n                if
        val+val2+val3 == 2020 {\n                    return val * val2 * val3\n\n                }\n            }\n        }\n    }\n    return
        0\n}\n\nfunc getPrunedInput(inputArr []int) []int {\n    prunedInput := []int{}\n    smallestNum
        := smallestNumber(inputArr)\n    for _, val := range inputArr {\n        if
        val+smallestNum &amp;lt; 2020 {\n            prunedInput = append(prunedInput,
        val)\n        }\n    }\n    return prunedInput\n}\n\n\nfunc getPart1Answer(inputArr
        []int) int {\n    for i, v := range inputArr {\n        for i2, v2 := range
        inputArr {\n            // Don&amp;#39;t compare the same number to itself\n            if
        i == i2 {\n                continue\n            }\n            if v+v2 ==
        2020 {\n                return v * v2\n            }\n        }\n    }\n    return
        0\n}\n\nfunc getInputArray() []int {\n    inputArr := strings.Split(input,
        &amp;quot;,&amp;quot;)\n    var inputIntArr []int\n    for _, num := range
        inputArr {\n        intVal, _ := strconv.Atoi(num)\n        inputIntArr =
        append(inputIntArr, intVal)\n    }\n    return inputIntArr\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge99c2y/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge99c2y", "created":
        1606829730.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606830325.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge99hmm", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "SShrike",
        "can_mod_post": false, "created_utc": 1606829834.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_oe2pw", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Rust**\n\nHere''s my [solution](https://github.com/severen/practice/blob/master/advent-of-code/2020/rust/day01/src/main.rs)
        in Rust. I initially quickly wrote it with a brute force search (worst-case
        O(n\\^2) and O(n\\^3) for part 1 and 2 respectively), and then went back and
        wrote it more efficiently with hashing as is the best solution for these kinds
        of n-sum problems, which shaved things down to O(n) and O(n\\^2).", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s
        my &lt;a href=\"https://github.com/severen/practice/blob/master/advent-of-code/2020/rust/day01/src/main.rs\"&gt;solution&lt;/a&gt;
        in Rust. I initially quickly wrote it with a brute force search (worst-case
        O(n^2) and O(n^3) for part 1 and 2 respectively), and then went back and wrote
        it more efficiently with hashing as is the best solution for these kinds of
        n-sum problems, which shaved things down to O(n) and O(n^2).&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge99hmm/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge99hmm", "created":
        1606829834.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9aay1",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "korny92",
        "can_mod_post": false, "created_utc": 1606830366.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_5q37z", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "javascript (numbers in a div):\n```\nvar text = document.getElementById(''content'').innerHTML;\nvar
        lines = text.split(''\\n'');\nvar max = 2020;\n\nvar lines_lt_2020 = [];\n\nlines.forEach(number
        =&gt; {\n  if(number === '''') {\n    return;\n  }\n  \n  number = parseInt(number);\n  \n  if(number
        &gt;= max) {\n    return;\n  }\n  \n  lines_lt_2020.push(number);\n});\n\nvar
        win_a = 0;\nvar win_b = 0;\nvar win_c = 0;\n\nlines_lt_2020.forEach(function(n1,
        i) {  \n  lines_lt_2020.forEach(function(n2, j) {\n    lines_lt_2020.forEach(function(n3,
        j) {\n      if((n1 + n2 + n3) !== max) {\n        return;\n      }\n    \n      win_a
        = n1;\n      win_b = n2;\n      win_c = n3;\n    });\n  });\n});\n\nconsole.log(win_a)\nconsole.log(win_b)\nconsole.log(win_c)\nconsole.log(win_a
        * win_b * win_c)\n```", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;javascript
        (numbers in a div):\n```\nvar text = document.getElementById(&amp;#39;content&amp;#39;).innerHTML;\nvar
        lines = text.split(&amp;#39;\\n&amp;#39;);\nvar max = 2020;&lt;/p&gt;\n\n&lt;p&gt;var
        lines_lt_2020 = [];&lt;/p&gt;\n\n&lt;p&gt;lines.forEach(number =&amp;gt; {\n  if(number
        === &amp;#39;&amp;#39;) {\n    return;\n  }&lt;/p&gt;\n\n&lt;p&gt;number =
        parseInt(number);&lt;/p&gt;\n\n&lt;p&gt;if(number &amp;gt;= max) {\n    return;\n  }&lt;/p&gt;\n\n&lt;p&gt;lines_lt_2020.push(number);\n});&lt;/p&gt;\n\n&lt;p&gt;var
        win_a = 0;\nvar win_b = 0;\nvar win_c = 0;&lt;/p&gt;\n\n&lt;p&gt;lines_lt_2020.forEach(function(n1,
        i) {&lt;br/&gt;\n  lines_lt_2020.forEach(function(n2, j) {\n    lines_lt_2020.forEach(function(n3,
        j) {\n      if((n1 + n2 + n3) !== max) {\n        return;\n      }&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;  win_a
        = n1;\n  win_b = n2;\n  win_c = n3;\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;});\n});&lt;/p&gt;\n\n&lt;p&gt;console.log(win_a)\nconsole.log(win_b)\nconsole.log(win_c)\nconsole.log(win_a
        * win_b * win_c)\n```&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9aay1/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9aay1", "created":
        1606830366.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9abp2",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "backtickbot",
        "can_mod_post": false, "created_utc": 1606830379.0, "send_replies": true,
        "parent_id": "t1_ge9aay1", "score": 1, "author_fullname": "t2_8n9fijwc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Hello, korny92: code blocks using backticks (\\`\\`\\`) don''t work on all
        versions of Reddit!\n\nSome users see [this](https://stalas.alm.lt/backformat/ge9aay1.png)
        / [this](https://stalas.alm.lt/backformat/ge9aay1.html) instead.\n\nTo fix
        this, indent every line with **4 spaces** instead. It''s a bit annoying, but
        then your code blocks are properly formatted for everyone.\n\nAn easy way
        to do this is to use the [code-block button in the editor](https://stalas.alm.lt/files/new-reddit-codeblock.png).
        If it''s not working, try switching to the fancy-pants editor and back again.\n\n[Comment
        with formatting fixed for old.reddit.com users](https://np.reddit.com/r/backtickbot/comments/k4l486/httpsnpredditcomradventofcodecommentsk4e4lm2020/)\n\n[FAQ](https://www.reddit.com/r/backtickbot/wiki/index)\n\n^(You
        can opt out by replying with backtickopt6 to this comment.)", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Hello, korny92: code blocks using backticks
        (```) don&amp;#39;t work on all versions of Reddit!&lt;/p&gt;\n\n&lt;p&gt;Some
        users see &lt;a href=\"https://stalas.alm.lt/backformat/ge9aay1.png\"&gt;this&lt;/a&gt;
        / &lt;a href=\"https://stalas.alm.lt/backformat/ge9aay1.html\"&gt;this&lt;/a&gt;
        instead.&lt;/p&gt;\n\n&lt;p&gt;To fix this, indent every line with &lt;strong&gt;4
        spaces&lt;/strong&gt; instead. It&amp;#39;s a bit annoying, but then your
        code blocks are properly formatted for everyone.&lt;/p&gt;\n\n&lt;p&gt;An
        easy way to do this is to use the &lt;a href=\"https://stalas.alm.lt/files/new-reddit-codeblock.png\"&gt;code-block
        button in the editor&lt;/a&gt;. If it&amp;#39;s not working, try switching
        to the fancy-pants editor and back again.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://np.reddit.com/r/backtickbot/comments/k4l486/httpsnpredditcomradventofcodecommentsk4e4lm2020/\"&gt;Comment
        with formatting fixed for old.reddit.com users&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://www.reddit.com/r/backtickbot/wiki/index\"&gt;FAQ&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;You
        can opt out by replying with backtickopt6 to this comment.&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9abp2/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9abp2", "created":
        1606830379.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606831139.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9autn", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "lucprins",
        "can_mod_post": false, "created_utc": 1606830719.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_3tj2yqx3", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Not very great at C++ so I decided to just try every single combination.
        Probably not the best solution\n\n    #include &lt;iostream&gt;\n    #include
        &lt;string&gt;\n    #include &lt;fstream&gt;\n    #include &lt;algorithm&gt;\n    \n    int
        main()\n    {\n    std::string numberString;\n    int arr[200];\n    int index
        = 0;\n    std::ifstream file(\"2020.txt\", std::ios::in);\n    if (file.is_open())\n    {\n      while
        (!file.eof())  \n      {  \n      \tstd::getline(file, numberString);  \n      \tint
        number = std::stoi(numberString);  \n      \tarr\\[index\\] = number;  \n      \tindex++;  \n      }  \n    }\n    file.close();\n    \n    index
        = 0;\n    int index2 = 1;\n    \n    //part 1\n    \n    for ( ; index2 &lt;
        200; index2++)\n    {\n      if (arr[index] + arr[index2] == 2020)  \n      {  \n          std::cout
        &lt;&lt; \"The answer is: \" &lt;&lt; arr[index\\] * arr[index2] &lt;&lt;
        std::endl;  \n      \tindex2 = 200;  \n      }  \n      else if (index2 ==
        199)  \n      {  \n      \tindex2 = 0;  \n      \tindex++;  \n      }  \n    }\n    \n    //part
        2\n    \n    index = 0;\n    index2 = 0;\n    int index3 = 0;\n    \n    for
        (; index &lt; 200; index++)\n    {\n      for (; index2 &lt; 200; index2++)  \n      {  \n      \tfor
        (; index3 &lt; 200; index3++)  \n      \t{  \n                if (arr[index]
        + arr[index2] + arr[index3] == 2020)\n                {\n                    answer
        = arr[index] * arr[index2] * arr[index3];\n                    std::cout &lt;&lt;
        \"The answer is: \" &lt;&lt; answer &lt;&lt; std::endl;\n                    index
        = 201;\n                    index2 = 201;\n                    index3 = 201;\n                }\n      \t}  \n      \tif
        (index3 == 200)  \n                index3 = 0;\n      }  \n      if (index2
        == 200)  \n      \tindex2 = 0;  \n    }\n    std::cout &lt;&lt; \"done\" &lt;&lt;
        std::endl;\n    }", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not
        very great at C++ so I decided to just try every single combination. Probably
        not the best solution&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;\n#include
        &amp;lt;string&amp;gt;\n#include &amp;lt;fstream&amp;gt;\n#include &amp;lt;algorithm&amp;gt;\n\nint
        main()\n{\nstd::string numberString;\nint arr[200];\nint index = 0;\nstd::ifstream
        file(&amp;quot;2020.txt&amp;quot;, std::ios::in);\nif (file.is_open())\n{\n  while
        (!file.eof())  \n  {  \n    std::getline(file, numberString);  \n    int number
        = std::stoi(numberString);  \n    arr\\[index\\] = number;  \n    index++;  \n  }  \n}\nfile.close();\n\nindex
        = 0;\nint index2 = 1;\n\n//part 1\n\nfor ( ; index2 &amp;lt; 200; index2++)\n{\n  if
        (arr[index] + arr[index2] == 2020)  \n  {  \n      std::cout &amp;lt;&amp;lt;
        &amp;quot;The answer is: &amp;quot; &amp;lt;&amp;lt; arr[index\\] * arr[index2]
        &amp;lt;&amp;lt; std::endl;  \n    index2 = 200;  \n  }  \n  else if (index2
        == 199)  \n  {  \n    index2 = 0;  \n    index++;  \n  }  \n}\n\n//part 2\n\nindex
        = 0;\nindex2 = 0;\nint index3 = 0;\n\nfor (; index &amp;lt; 200; index++)\n{\n  for
        (; index2 &amp;lt; 200; index2++)  \n  {  \n    for (; index3 &amp;lt; 200;
        index3++)  \n    {  \n            if (arr[index] + arr[index2] + arr[index3]
        == 2020)\n            {\n                answer = arr[index] * arr[index2]
        * arr[index3];\n                std::cout &amp;lt;&amp;lt; &amp;quot;The answer
        is: &amp;quot; &amp;lt;&amp;lt; answer &amp;lt;&amp;lt; std::endl;\n                index
        = 201;\n                index2 = 201;\n                index3 = 201;\n            }\n    }  \n    if
        (index3 == 200)  \n            index3 = 0;\n  }  \n  if (index2 == 200)  \n    index2
        = 0;  \n}\nstd::cout &amp;lt;&amp;lt; &amp;quot;done&amp;quot; &amp;lt;&amp;lt;
        std::endl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9autn/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge9autn", "created": 1606830719.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 2, "name":
        "t1_ge9i3gx", "id": "ge9i3gx", "parent_id": "t1_ge9autn", "depth": 1, "children":
        ["ge9i3gx"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": 1606856339.0,
        "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9c2p4", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "slavcatx",
        "can_mod_post": false, "created_utc": 1606831493.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_t1e8l9o", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I''m new to coding and when I look at other''s solutions mine doesn''t look
        that great but hey - it works. I added those \"breaks\" because I didn''t
        want it to show me the same solutions multiple times.\n\npart 1: [https://pastebin.com/YgbRpiL7](https://pastebin.com/YgbRpiL7)\n\npart
        2: [https://pastebin.com/y02etjhX](https://pastebin.com/y02etjhX)\n\nedit:  forgot
        to add - I used Python", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m
        new to coding and when I look at other&amp;#39;s solutions mine doesn&amp;#39;t
        look that great but hey - it works. I added those &amp;quot;breaks&amp;quot;
        because I didn&amp;#39;t want it to show me the same solutions multiple times.&lt;/p&gt;\n\n&lt;p&gt;part
        1: &lt;a href=\"https://pastebin.com/YgbRpiL7\"&gt;https://pastebin.com/YgbRpiL7&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;part
        2: &lt;a href=\"https://pastebin.com/y02etjhX\"&gt;https://pastebin.com/y02etjhX&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;edit:  forgot
        to add - I used Python&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9c2p4/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9c2p4", "created":
        1606831493.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geag2tb",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606851281.0, "send_replies": true,
        "parent_id": "t1_ge9c2p4", "score": 2, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Welcome to Advent of Code (and coding in general!)  Don''t worry about making
        your code \"pretty\" - focus more on learning how the system works, best practices
        in coding in general, and of course, ensuring that you get the right answer
        in the end ;)\n\nThat being said, please add the language to your post to
        make it easier for folks who Ctrl-F the megathreads looking for a specific
        language.  Thanks!", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": true, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Welcome
        to Advent of Code (and coding in general!)  Don&amp;#39;t worry about making
        your code &amp;quot;pretty&amp;quot; - focus more on learning how the system
        works, best practices in coding in general, and of course, ensuring that you
        get the right answer in the end ;)&lt;/p&gt;\n\n&lt;p&gt;That being said,
        please add the language to your post to make it easier for folks who Ctrl-F
        the megathreads looking for a specific language.  Thanks!&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geag2tb/",
        "subreddit_type": "public", "locked": false, "name": "t1_geag2tb", "created":
        1606851281.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9c3l6", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ColonelMcColonel",
        "can_mod_post": false, "created_utc": 1606831509.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_kotu8", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I did a Rust version, of course I used int32 and might need to make it bigger
        if the input was larger, but made a function that can find any number of combinations.\n\n[https://github.com/SamMorrowDrums/aoc2/tree/cdca02e0b82cc2ea5f280a67c8d4c714bf15075b](https://github.com/SamMorrowDrums/aoc2/tree/cdca02e0b82cc2ea5f280a67c8d4c714bf15075b)\n\nOn
        part 1, I made a function that explicitly got the versions, but then with
        part 2 I used a crate that already gets combinations of length n.", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;I did a Rust version, of course I used int32
        and might need to make it bigger if the input was larger, but made a function
        that can find any number of combinations.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/SamMorrowDrums/aoc2/tree/cdca02e0b82cc2ea5f280a67c8d4c714bf15075b\"&gt;https://github.com/SamMorrowDrums/aoc2/tree/cdca02e0b82cc2ea5f280a67c8d4c714bf15075b&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;On
        part 1, I made a function that explicitly got the versions, but then with
        part 2 I used a crate that already gets combinations of length n.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9c3l6/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9c3l6", "created":
        1606831509.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9e7k1",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "RockSlice",
        "can_mod_post": false, "created_utc": 1606832780.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_ejomc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Powershell**\n\n\t$numlist = $numlist |sort-object\n\t:outside ForEach
        ($i in $numlist) {\n\t\tWrite-Host \"testing $number\"\n\t\t:inside ForEach
        ($j in $numlist) {\n\t\t\tif (($i + $j) -eq 2020) {\n\t\t\t\tWrite-Host \"$($i)
        + $($j) = 2020\"\n\t\t\t\tWrite-Host \"$($i) * $($j) = $($i * $j)\"\n\t\t\t\tbreak
        outside\n\t\t\t}\n\t\t\tif (($i + $j) -gt 2020) {\n\t\t\t\tbreak inside\n\t\t\t}\n\t\t}\n\t}\n\nA
        bit brute-force, but it works.", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Powershell&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$numlist
        = $numlist |sort-object\n:outside ForEach ($i in $numlist) {\n    Write-Host
        &amp;quot;testing $number&amp;quot;\n    :inside ForEach ($j in $numlist)
        {\n        if (($i + $j) -eq 2020) {\n            Write-Host &amp;quot;$($i)
        + $($j) = 2020&amp;quot;\n            Write-Host &amp;quot;$($i) * $($j) =
        $($i * $j)&amp;quot;\n            break outside\n        }\n        if (($i
        + $j) -gt 2020) {\n            break inside\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A
        bit brute-force, but it works.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9e7k1/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge9e7k1", "created": 1606832780.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": 1606836165.0, "mod_reason_by": null, "banned_by": null, "ups": 1,
        "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9f357",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "aim4it",
        "can_mod_post": false, "created_utc": 1606833296.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_68630", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "PHP with a recursive function:\n\n    $input = file(\"input.txt\", FILE_IGNORE_NEW_LINES);\n    \n    sort($input,
        SORT_NUMERIC);\n    \n    function puzzle($list, $answer, $recursion, &amp;$found,$picks
        = [])\n    {\n        if ($found) {\n            return;\n        }\n        if
        ($recursion &gt;= 1) {\n            foreach ($list as $num) {\n                $newPicks
        = $picks;\n                $newPicks[] = (int)$num;\n                puzzle($list,
        $answer, ($recursion - 1), $found, $newPicks);\n            }\n        } else
        {\n            if (array_sum($picks) == $answer) {\n                echo \"Found:
        \" . array_product($picks) . PHP_EOL;\n                $found = true;\n            }\n        }\n    }\n    \n    $found
        = false;\n    puzzle($input, 2020, 3, $found);", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;PHP with a recursive function:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$input
        = file(&amp;quot;input.txt&amp;quot;, FILE_IGNORE_NEW_LINES);\n\nsort($input,
        SORT_NUMERIC);\n\nfunction puzzle($list, $answer, $recursion, &amp;amp;$found,$picks
        = [])\n{\n    if ($found) {\n        return;\n    }\n    if ($recursion &amp;gt;=
        1) {\n        foreach ($list as $num) {\n            $newPicks = $picks;\n            $newPicks[]
        = (int)$num;\n            puzzle($list, $answer, ($recursion - 1), $found,
        $newPicks);\n        }\n    } else {\n        if (array_sum($picks) == $answer)
        {\n            echo &amp;quot;Found: &amp;quot; . array_product($picks) .
        PHP_EOL;\n            $found = true;\n        }\n    }\n}\n\n$found = false;\npuzzle($input,
        2020, 3, $found);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9f357/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge9f357", "created": 1606833296.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "ge9f3ys", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "backtickbot", "can_mod_post": false, "created_utc":
        1606833310.0, "send_replies": true, "parent_id": "t1_ge9f357", "score": 2,
        "author_fullname": "t2_8n9fijwc", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "Hello, aim4it: code blocks
        using backticks (\\`\\`\\`) don''t work on all versions of Reddit!\n\nSome
        users see [this](https://stalas.alm.lt/backformat/ge9f357.png) / [this](https://stalas.alm.lt/backformat/ge9f357.html)
        instead.\n\nTo fix this, indent every line with **4 spaces** instead. It''s
        a bit annoying, but then your code blocks are properly formatted for everyone.\n\nAn
        easy way to do this is to use the [code-block button in the editor](https://stalas.alm.lt/files/new-reddit-codeblock.png).
        If it''s not working, try switching to the fancy-pants editor and back again.\n\n[Comment
        with formatting fixed for old.reddit.com users](https://np.reddit.com/r/backtickbot/comments/k4lyzh/httpsnpredditcomradventofcodecommentsk4e4lm2020/)\n\n[FAQ](https://www.reddit.com/r/backtickbot/wiki/index)\n\n^(You
        can opt out by replying with backtickopt6 to this comment.)", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Hello, aim4it: code blocks using backticks
        (```) don&amp;#39;t work on all versions of Reddit!&lt;/p&gt;\n\n&lt;p&gt;Some
        users see &lt;a href=\"https://stalas.alm.lt/backformat/ge9f357.png\"&gt;this&lt;/a&gt;
        / &lt;a href=\"https://stalas.alm.lt/backformat/ge9f357.html\"&gt;this&lt;/a&gt;
        instead.&lt;/p&gt;\n\n&lt;p&gt;To fix this, indent every line with &lt;strong&gt;4
        spaces&lt;/strong&gt; instead. It&amp;#39;s a bit annoying, but then your
        code blocks are properly formatted for everyone.&lt;/p&gt;\n\n&lt;p&gt;An
        easy way to do this is to use the &lt;a href=\"https://stalas.alm.lt/files/new-reddit-codeblock.png\"&gt;code-block
        button in the editor&lt;/a&gt;. If it&amp;#39;s not working, try switching
        to the fancy-pants editor and back again.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://np.reddit.com/r/backtickbot/comments/k4lyzh/httpsnpredditcomradventofcodecommentsk4e4lm2020/\"&gt;Comment
        with formatting fixed for old.reddit.com users&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://www.reddit.com/r/backtickbot/wiki/index\"&gt;FAQ&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;You
        can opt out by replying with backtickopt6 to this comment.&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9f3ys/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9f3ys", "created":
        1606833310.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606833720.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9fh10", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "colonelflounders",
        "can_mod_post": false, "created_utc": 1606833518.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_j8zxj", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I ended up solving this initially by reasoning about the math and searching
        through the input file, afterwards I tried coding up the solution in Haskell.\n\n**Haskell**\n\n\n    module
        Main where\n    \n    import Data.Set (Set)\n    import qualified Data.Set
        as S\n    \n    find2ThatSum2020 :: Set Int -&gt; (Int, Int)\n    find2ThatSum2020
        s = let lessThan1k = S.filter (\\x -&gt; x &lt; 1000) s\n                             f
        x acc = if acc &gt; 1000\n                                          then acc\n                                          else
        if S.member (2020 - x) s\n                                             then
        x\n                                             else acc\n                             number1
        = S.foldr (f) 0 lessThan1k\n                          in (number1, 2020 -
        number1)\n\n    find3ThatSum2020 :: Set Int -&gt; (Int, Int, Int)\n    find3ThatSum2020
        s = let lessThan1k = S.filter(\\x -&gt; x &lt; 1000) s\n                             lessThan1k''
        = S.toList lessThan1k\n                             (x,y) = head $ [(x,y)
        | x &lt;- lessThan1k'', y &lt;- lessThan1k'', S.member (2020 - x - y) s]\n                          in
        (x,y,2020 - x - y)\n    \n    main :: IO ()\n    main = do\n      content
        &lt;- readFile \"input.txt\"\n      let numbers = map (read) $ lines content\n      let
        numbers'' = S.fromList numbers\n      let (x,y) = find2ThatSum2020 numbers''\n      let
        (x'',y'',z'') = find3ThatSum2020 numbers''\n      putStrLn . show $ x * y\n      putStrLn
        . show $ x'' * y'' * z''", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        ended up solving this initially by reasoning about the math and searching
        through the input file, afterwards I tried coding up the solution in Haskell.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Haskell&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;module
        Main where\n\nimport Data.Set (Set)\nimport qualified Data.Set as S\n\nfind2ThatSum2020
        :: Set Int -&amp;gt; (Int, Int)\nfind2ThatSum2020 s = let lessThan1k = S.filter
        (\\x -&amp;gt; x &amp;lt; 1000) s\n                         f x acc = if acc
        &amp;gt; 1000\n                                      then acc\n                                      else
        if S.member (2020 - x) s\n                                         then x\n                                         else
        acc\n                         number1 = S.foldr (f) 0 lessThan1k\n                      in
        (number1, 2020 - number1)\n\nfind3ThatSum2020 :: Set Int -&amp;gt; (Int, Int,
        Int)\nfind3ThatSum2020 s = let lessThan1k = S.filter(\\x -&amp;gt; x &amp;lt;
        1000) s\n                         lessThan1k&amp;#39; = S.toList lessThan1k\n                         (x,y)
        = head $ [(x,y) | x &amp;lt;- lessThan1k&amp;#39;, y &amp;lt;- lessThan1k&amp;#39;,
        S.member (2020 - x - y) s]\n                      in (x,y,2020 - x - y)\n\nmain
        :: IO ()\nmain = do\n  content &amp;lt;- readFile &amp;quot;input.txt&amp;quot;\n  let
        numbers = map (read) $ lines content\n  let numbers&amp;#39; = S.fromList
        numbers\n  let (x,y) = find2ThatSum2020 numbers&amp;#39;\n  let (x&amp;#39;,y&amp;#39;,z&amp;#39;)
        = find3ThatSum2020 numbers&amp;#39;\n  putStrLn . show $ x * y\n  putStrLn
        . show $ x&amp;#39; * y&amp;#39; * z&amp;#39;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9fh10/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9fh10", "created":
        1606833518.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge9fhxh", "id": "ge9fhxh", "parent_id":
        "t1_ge9fh10", "depth": 1, "children": ["ge9fhxh"]}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9gln9", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_ge9gln9", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9gln9/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606834157.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606834157.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge9ow7i", "id": "ge9ow7i", "parent_id":
        "t1_ge9gln9", "depth": 1, "children": ["ge9ow7i"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9hbp6",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "sternold",
        "can_mod_post": false, "created_utc": 1606834551.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_8yh06", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Javascript** I just did it in the console of the input page\n\nPart 1\n\n    document.getElementsByTagName(''pre'')[0].innerHTML.split(''\\n'').flatMap(i
        =&gt; x.map(j =&gt; [i, j])).find(pair =&gt; pair.reduce((total, i) =&gt;
        total + parseInt(i), 0) == 2020).reduce((total, i) =&gt; total*i, 1);\n\nPart
        2\n\n    document.getElementsByTagName(''pre'')[0].innerHTML.split(''\\n'').flatMap(i
        =&gt; x.flatMap(j =&gt; x.map(k =&gt; [i, j, k]))).find(pair =&gt; pair.reduce((total,
        i) =&gt; total + parseInt(i), 0) == 2020).reduce((total, i) =&gt; total*i,
        1);", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;
        I just did it in the console of the input page&lt;/p&gt;\n\n&lt;p&gt;Part
        1&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;document.getElementsByTagName(&amp;#39;pre&amp;#39;)[0].innerHTML.split(&amp;#39;\\n&amp;#39;).flatMap(i
        =&amp;gt; x.map(j =&amp;gt; [i, j])).find(pair =&amp;gt; pair.reduce((total,
        i) =&amp;gt; total + parseInt(i), 0) == 2020).reduce((total, i) =&amp;gt;
        total*i, 1);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part 2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;document.getElementsByTagName(&amp;#39;pre&amp;#39;)[0].innerHTML.split(&amp;#39;\\n&amp;#39;).flatMap(i
        =&amp;gt; x.flatMap(j =&amp;gt; x.map(k =&amp;gt; [i, j, k]))).find(pair =&amp;gt;
        pair.reduce((total, i) =&amp;gt; total + parseInt(i), 0) == 2020).reduce((total,
        i) =&amp;gt; total*i, 1);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9hbp6/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge9hbp6", "created": 1606834551.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "ge9hgu2", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "DStanley1809", "can_mod_post": false,
        "created_utc": 1606834628.0, "send_replies": true, "parent_id": "t3_k4e4lm",
        "score": 1, "author_fullname": "t2_ci857", "report_reasons": null, "approved_by":
        null, "all_awardings": [], "collapsed": false, "body": "I used Python.  Here''s
        part 1:\n\n    import itertools\n    \n    def reportRepair():\n        \n        #
        Read input text file and store contents\n        inputText = open(\"input.txt\",
        \"r\")\n        inputContent= inputText.read()\n        \n        # Close
        opened file\n        inputText.close()\n        \n        # Split input text
        in to a list based on line breaks then convert the \n        # strings to
        ints\n        inputList = inputContent.split(\"\\n\")\n        \n        for
        i in range(0, len(inputList)):\n            inputList[i] = int(inputList[i])\n        \n        #
        Generate a list of all possible combinations of two numbers from the list\n        pairs
        = list(itertools.combinations(inputList, 2))\n        \n        # Iterate
        over the list of pairs to find the pair that adds up to 2020\n        for
        i in pairs:\n            if i[0] + i[1] == 2020:\n                # Return
        the product of the pair\n                return i[0]*i[1]\n\n\n\nHere''s part
        2. All I had to do was change a 2  to a 3 and add a third value to the if
        and return statements:\n\n    import itertools\n    \n    def reportRepair():\n        \n        #
        Read input text file and store contents\n        inputText = open(\"input.txt\",
        \"r\")\n        inputContent= inputText.read()\n        \n        # Close
        opened file\n        inputText.close()\n        \n        # Split input text
        in to a list based on line breaks then convert the \n        # strings to
        ints\n        inputList = inputContent.split(\"\\n\")\n        \n        for
        i in range(0, len(inputList)):\n            inputList[i] = int(inputList[i])\n        \n        #
        Generate a list of all possible combinations of three numbers from the list\n        triples
        = list(itertools.combinations(inputList, 3))\n        \n        # Iterate
        over the list of triples to find the triple that adds up to 2020\n        for
        i in triples:\n            if i[0] + i[1] + i[2] == 2020:\n                #
        Return the product of the triple\n                return i[0]*i[1]*i[2]",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I used Python.  Here&amp;#39;s
        part 1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import itertools\n\ndef reportRepair():\n\n    #
        Read input text file and store contents\n    inputText = open(&amp;quot;input.txt&amp;quot;,
        &amp;quot;r&amp;quot;)\n    inputContent= inputText.read()\n\n    # Close
        opened file\n    inputText.close()\n\n    # Split input text in to a list
        based on line breaks then convert the \n    # strings to ints\n    inputList
        = inputContent.split(&amp;quot;\\n&amp;quot;)\n\n    for i in range(0, len(inputList)):\n        inputList[i]
        = int(inputList[i])\n\n    # Generate a list of all possible combinations
        of two numbers from the list\n    pairs = list(itertools.combinations(inputList,
        2))\n\n    # Iterate over the list of pairs to find the pair that adds up
        to 2020\n    for i in pairs:\n        if i[0] + i[1] == 2020:\n            #
        Return the product of the pair\n            return i[0]*i[1]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here&amp;#39;s
        part 2. All I had to do was change a 2  to a 3 and add a third value to the
        if and return statements:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import itertools\n\ndef
        reportRepair():\n\n    # Read input text file and store contents\n    inputText
        = open(&amp;quot;input.txt&amp;quot;, &amp;quot;r&amp;quot;)\n    inputContent=
        inputText.read()\n\n    # Close opened file\n    inputText.close()\n\n    #
        Split input text in to a list based on line breaks then convert the \n    #
        strings to ints\n    inputList = inputContent.split(&amp;quot;\\n&amp;quot;)\n\n    for
        i in range(0, len(inputList)):\n        inputList[i] = int(inputList[i])\n\n    #
        Generate a list of all possible combinations of three numbers from the list\n    triples
        = list(itertools.combinations(inputList, 3))\n\n    # Iterate over the list
        of triples to find the triple that adds up to 2020\n    for i in triples:\n        if
        i[0] + i[1] + i[2] == 2020:\n            # Return the product of the triple\n            return
        i[0]*i[1]*i[2]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9hgu2/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge9hgu2", "created": 1606834628.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 1, "name":
        "t1_ge9oxsz", "id": "ge9oxsz", "parent_id": "t1_ge9hgu2", "depth": 1, "children":
        ["ge9oxsz"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9idwm", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "the_terrier",
        "can_mod_post": false, "created_utc": 1606835122.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_a1q7b", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "C++ constexpr solution sharing the godbolt Link as that makes it easy to
        see. \nhttps://godbolt.org/z/h5813Y", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;C++ constexpr solution sharing the godbolt Link as
        that makes it easy to see. \n&lt;a href=\"https://godbolt.org/z/h5813Y\"&gt;https://godbolt.org/z/h5813Y&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9idwm/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9idwm", "created":
        1606835122.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9kgch", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[My short inefficient swift solution](https://nopaste.ml/?l=swft#XQAAAQBhAQAAAAAAAAA7GEqmJ5Le0P3LfcA83VgBJqxFgZPxn8H2yjStViZ8+CNxSO/2CAdt8vLWqqGKlxOsmbdCqNUhazXMGoXqeM/CT5+k6DsicuUSmPIc/ClQ+LtvUQYL2783/PcZZZcOcRFVvrTQY8IxE7HbGPmlLfQdCsntSoSE2xXsAqBoAOuTgESNjmyVEK4T8zREq4Ffgjl50YiTIo7+6ftcCmABx2dlXuk//iV0QA==)",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_ge9kgch",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a
        href=\"https://nopaste.ml/?l=swft#XQAAAQBhAQAAAAAAAAA7GEqmJ5Le0P3LfcA83VgBJqxFgZPxn8H2yjStViZ8+CNxSO/2CAdt8vLWqqGKlxOsmbdCqNUhazXMGoXqeM/CT5+k6DsicuUSmPIc/ClQ+LtvUQYL2783/PcZZZcOcRFVvrTQY8IxE7HbGPmlLfQdCsntSoSE2xXsAqBoAOuTgESNjmyVEK4T8zREq4Ffgjl50YiTIo7+6ftcCmABx2dlXuk//iV0QA==\"&gt;My
        short inefficient swift solution&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9kgch/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606836200.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606836200.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9kuii",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "culp",
        "can_mod_post": false, "created_utc": 1606836404.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_5wzce", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Here''s my **Clojure** solution:\n\nI''m writing clojure for the first time
        (I write Java for my day job). Would appreciate any pointers if I''m doing
        something silly!\n\n    (ns advent.core\n      (:require [clojure.math.combinatorics
        :as combo]))\n    \n    (defn input\n      \"Read a file, returning a vector
        containing each line\"\n      [f]\n      (map read-string (clojure.string/split
        (slurp f) #\"\\n\")))\n    \n    (defn day1-part1\n      []\n      (let [xs
        (set (input \"resources/day1.txt\"))]\n        (-&gt;&gt; (filter #(contains?
        xs (- 2020 %)) xs)\n             (reduce *))))\n    \n    (defn day1-part2\n      []\n      (as-&gt;
        (input \"resources/day1.txt\") x\n            (combo/combinations x 3)\n            (filter
        #(= 2020 (reduce + %)) x)\n            (first x)\n            (reduce * x)))\n    \n    (defn
        -main\n      [&amp; args]\n      (println (str \"day1-part1: \" (day1-part1)))\n      (println
        (str \"day1-part2: \" (day1-part2))))", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s my &lt;strong&gt;Clojure&lt;/strong&gt;
        solution:&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m writing clojure for the first
        time (I write Java for my day job). Would appreciate any pointers if I&amp;#39;m
        doing something silly!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(ns advent.core\n  (:require
        [clojure.math.combinatorics :as combo]))\n\n(defn input\n  &amp;quot;Read
        a file, returning a vector containing each line&amp;quot;\n  [f]\n  (map read-string
        (clojure.string/split (slurp f) #&amp;quot;\\n&amp;quot;)))\n\n(defn day1-part1\n  []\n  (let
        [xs (set (input &amp;quot;resources/day1.txt&amp;quot;))]\n    (-&amp;gt;&amp;gt;
        (filter #(contains? xs (- 2020 %)) xs)\n         (reduce *))))\n\n(defn day1-part2\n  []\n  (as-&amp;gt;
        (input &amp;quot;resources/day1.txt&amp;quot;) x\n        (combo/combinations
        x 3)\n        (filter #(= 2020 (reduce + %)) x)\n        (first x)\n        (reduce
        * x)))\n\n(defn -main\n  [&amp;amp; args]\n  (println (str &amp;quot;day1-part1:
        &amp;quot; (day1-part1)))\n  (println (str &amp;quot;day1-part2: &amp;quot;
        (day1-part2))))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9kuii/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge9kuii", "created": 1606836404.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": 1606841712.0, "mod_reason_by": null, "banned_by": null, "ups": 1,
        "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9l4ak",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "tobega",
        "can_mod_post": false, "created_utc": 1606836542.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_56v5itu2", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Optimal (?) solution in julia that runs part2 in 3.8 usecs (ok, I have to
        add the time to sort the list as well, 1 usec, and the time to create the
        set, 2.5 usec) [https://github.com/tobega/aoc2020/blob/main/a1.jl](https://github.com/tobega/aoc2020/blob/main/a1.jl)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Optimal (?) solution
        in julia that runs part2 in 3.8 usecs (ok, I have to add the time to sort
        the list as well, 1 usec, and the time to create the set, 2.5 usec) &lt;a
        href=\"https://github.com/tobega/aoc2020/blob/main/a1.jl\"&gt;https://github.com/tobega/aoc2020/blob/main/a1.jl&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9l4ak/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9l4ak", "created":
        1606836542.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 4, "name": "t1_geat6cn", "id": "geat6cn", "parent_id":
        "t1_ge9l4ak", "depth": 1, "children": ["geat6cn"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9l7o8",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Rakicy",
        "can_mod_post": false, "created_utc": 1606836592.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_1iav06tf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python 3 implemented the same way as many others. I see I need to check out
        itertools.combinations though.  Any feedback would be appreciated!\n\n    def
        return_list() -&gt; list:\n        filepath = r''day01input.txt''\n        with
        open(filepath, ''r'') as file:\n            num_list = [int(line) for line
        in file]\n        return num_list\n    \n    def find_sum(num_list: list)
        -&gt; int:\n        list_len = len(num_list)\n        for start_num in range(list_len
        -1):\n            for next_num in range(0, list_len - start_num - 1):\n                if
        num_list[start_num] + num_list[next_num] == 2020:\n                    print(num_list[start_num],
        \"+\", num_list[next_num], \"=\", num_list[start_num] + num_list[next_num])\n                    return
        num_list[start_num] * num_list[next_num]\n    \n    def find_three_sum(num_list:
        list) -&gt; int:\n        list_len = len(num_list)\n        for start_num
        in range(list_len -1):\n            for next_num in range(0, list_len - start_num
        - 1):\n                for final_num in range(0, list_len - next_num - 1):\n                    if
        num_list[start_num] + num_list[next_num] + num_list[final_num] == 2020:\n                        print(num_list[start_num],
        \"+\", num_list[next_num], \"+\", num_list[final_num], \"=\", num_list[start_num]
        + num_list[next_num] + num_list[final_num])\n                        return
        num_list[start_num] * num_list[next_num] * num_list[final_num]\n    \n    def
        main():\n        num_list = return_list()\n        print(\"the two numbers
        multiplied are:\", find_sum(num_list))\n        print(\"the three numbers
        multiplied are:\", find_three_sum(num_list))\n    \n    if __name__ == ''__main__'':\n        main()",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python 3 implemented
        the same way as many others. I see I need to check out itertools.combinations
        though.  Any feedback would be appreciated!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        return_list() -&amp;gt; list:\n    filepath = r&amp;#39;day01input.txt&amp;#39;\n    with
        open(filepath, &amp;#39;r&amp;#39;) as file:\n        num_list = [int(line)
        for line in file]\n    return num_list\n\ndef find_sum(num_list: list) -&amp;gt;
        int:\n    list_len = len(num_list)\n    for start_num in range(list_len -1):\n        for
        next_num in range(0, list_len - start_num - 1):\n            if num_list[start_num]
        + num_list[next_num] == 2020:\n                print(num_list[start_num],
        &amp;quot;+&amp;quot;, num_list[next_num], &amp;quot;=&amp;quot;, num_list[start_num]
        + num_list[next_num])\n                return num_list[start_num] * num_list[next_num]\n\ndef
        find_three_sum(num_list: list) -&amp;gt; int:\n    list_len = len(num_list)\n    for
        start_num in range(list_len -1):\n        for next_num in range(0, list_len
        - start_num - 1):\n            for final_num in range(0, list_len - next_num
        - 1):\n                if num_list[start_num] + num_list[next_num] + num_list[final_num]
        == 2020:\n                    print(num_list[start_num], &amp;quot;+&amp;quot;,
        num_list[next_num], &amp;quot;+&amp;quot;, num_list[final_num], &amp;quot;=&amp;quot;,
        num_list[start_num] + num_list[next_num] + num_list[final_num])\n                    return
        num_list[start_num] * num_list[next_num] * num_list[final_num]\n\ndef main():\n    num_list
        = return_list()\n    print(&amp;quot;the two numbers multiplied are:&amp;quot;,
        find_sum(num_list))\n    print(&amp;quot;the three numbers multiplied are:&amp;quot;,
        find_three_sum(num_list))\n\nif __name__ == &amp;#39;__main__&amp;#39;:\n    main()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9l7o8/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9l7o8", "created":
        1606836592.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9loqc",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "fiddle_n",
        "can_mod_post": false, "created_utc": 1606836833.0, "send_replies": true,
        "parent_id": "t1_ge9l7o8", "score": 2, "author_fullname": "t2_7is2d", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "You should check out itertools in general - it''s my most used module in
        AoC", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You
        should check out itertools in general - it&amp;#39;s my most used module in
        AoC&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9loqc/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9loqc", "created":
        1606836833.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9ni8h",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "IlliterateJedi",
        "can_mod_post": false, "created_utc": 1606837734.0, "send_replies": true,
        "parent_id": "t1_ge9l7o8", "score": 2, "author_fullname": "t2_2keby", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I have a few points of feedback:\n\n    def find_sum(num_list: list) -&gt;
        int:\n        list_len = len(num_list)\n        for start_num in range(list_len
        -1):\n            for next_num in range(0, list_len - start_num - 1):\n\n*
        If you put 1010 at num_list[0], you will get the wrong result since the loops
        in find_sum are initialized with the same number.\n* When iterating over a
        list, you can generally just iterate over the slice/list instead of converting
        to a range, \n\ne.g.,:\n\n\n\n\n    for num1 in num_list:\n        for num2
        in num_list[1:]\n\nYou usually only need to use range() if you are going to
        interact with a value in a list instead of just accessing it.", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;I have a few points of feedback:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        find_sum(num_list: list) -&amp;gt; int:\n    list_len = len(num_list)\n    for
        start_num in range(list_len -1):\n        for next_num in range(0, list_len
        - start_num - 1):\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If you
        put 1010 at num_list[0], you will get the wrong result since the loops in
        find_sum are initialized with the same number.&lt;/li&gt;\n&lt;li&gt;When
        iterating over a list, you can generally just iterate over the slice/list
        instead of converting to a range, &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;e.g.,:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for
        num1 in num_list:\n    for num2 in num_list[1:]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You
        usually only need to use range() if you are going to interact with a value
        in a list instead of just accessing it.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9ni8h/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge9ni8h", "created": 1606837734.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 8, "name":
        "t1_ge9okd9", "id": "ge9okd9", "parent_id": "t1_ge9ni8h", "depth": 2, "children":
        ["ge9okd9", "gea8akf"]}}, {"kind": "more", "data": {"count": 4, "name": "t1_ge9obi2",
        "id": "ge9obi2", "parent_id": "t1_ge9l7o8", "depth": 1, "children": ["ge9obi2"]}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": 1607433705.0,
        "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9lb2t", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Diderikdm",
        "can_mod_post": false, "created_utc": 1606836640.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_552bks37", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Python:**\n\n    with open(\"C:\\\\Advent\\\\day1.txt\", ''r'') as file:\n        data
        = [int(value) for value in file.read().splitlines()]\n        print(''Part
        1: {}''.format([x*y for x in data for y in data if x+y == 2020][0]))\n        print(''Part
        2: {}''.format([x*y*z for x in data for y in data for z in data if x+y+z ==
        2020][0]))", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with
        open(&amp;quot;C:\\\\Advent\\\\day1.txt&amp;quot;, &amp;#39;r&amp;#39;) as
        file:\n    data = [int(value) for value in file.read().splitlines()]\n    print(&amp;#39;Part
        1: {}&amp;#39;.format([x*y for x in data for y in data if x+y == 2020][0]))\n    print(&amp;#39;Part
        2: {}&amp;#39;.format([x*y*z for x in data for y in data for z in data if
        x+y+z == 2020][0]))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9lb2t/", "subreddit_type":
        "public", "locked": false, "name": "t1_ge9lb2t", "created": 1606836640.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "ge9lf9j", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "tobega", "can_mod_post": false, "created_utc":
        1606836698.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_56v5itu2", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "Dumb brute force solution
        in the Tailspin programming language [https://github.com/tobega/aoc2020/blob/main/a1.tt](https://github.com/tobega/aoc2020/blob/main/a1.tt)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Dumb brute force solution
        in the Tailspin programming language &lt;a href=\"https://github.com/tobega/aoc2020/blob/main/a1.tt\"&gt;https://github.com/tobega/aoc2020/blob/main/a1.tt&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9lf9j/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9lf9j", "created":
        1606836698.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9lrxu",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Junafani",
        "can_mod_post": false, "created_utc": 1606836879.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_bck5q", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Here is my Java solution:\n\n[Link](https://topaz.github.io/paste/#XQAAAQAkBQAAAAAAAAA4GEiZzRd1JAgL5dFX3EwXdqEiC29u1UZSqYdspr9yBrzIBgfmu3Fbsny2a9pR5fkhwiqNptlj0gINsNU639B1PaAvQctRHxo+EGBrITCaZqWPWqEuVcNH6Vd4xVGTxRswZmIlfTYmSDbwwnDQsFBCLxLjGjDnoCHbr9WaPEE7Hh2z6nuB7wcx9k3Ti6vvuhhsKA+LBIVcEYTDjYCuvfgs/MZiChlMaEEkqynJsFqwp/Pn7KYKHJH6YtzxsVmkUwhAkWqT0GtfKqLNe9j8ES3tEFLvqggBtdfVCJBewCXpLtCCQvn+SQK4Uwxm06M9OBMgKZ2ZXVG9Q2qYBr4NkBoq5cSGttDt92tzbPKh/aGrIbzROqZN83j/J8UASb4OuIN3zTxc6ju57/1k7A/RgRNFcZCqSvwDp9drDlNzq+1T08Q5uC/5Kl00TQJSy0OogiLrp6O8wtR2Y7QvNx0UsdO9qmW8vGHkXl7DfpTDWUxmiM+WPXMymG+lMRqEW8w8132WzxbvoJQMpw6lsaQ2f6CQetDc2zLxo3vonZ0ukZlly/Y8cHy7fJvlkmiOxty7a+3QIJ8czl46P3jFav80qtkIkTCpqRsQcBdxfLXDCtdvs1U/AZso2k7FSjvZBcp/iOGLBI05kxUx5a7wF1hz73XaRp3M3hJc9UXl6NSyQGefObqJ2wv9/PHM)\n\nEasy
        challenge to start with. Most of the challenge for me came from not coding
        for a bit and having to remember how things work in Java (and also talking
        with my gf at the same time on phone which didn''t make concentrating easy)\n\nI
        wonder if there is going to be theme this year and which is it going to be.
        Last year had intcode which was fun.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Here is my Java solution:&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://topaz.github.io/paste/#XQAAAQAkBQAAAAAAAAA4GEiZzRd1JAgL5dFX3EwXdqEiC29u1UZSqYdspr9yBrzIBgfmu3Fbsny2a9pR5fkhwiqNptlj0gINsNU639B1PaAvQctRHxo+EGBrITCaZqWPWqEuVcNH6Vd4xVGTxRswZmIlfTYmSDbwwnDQsFBCLxLjGjDnoCHbr9WaPEE7Hh2z6nuB7wcx9k3Ti6vvuhhsKA+LBIVcEYTDjYCuvfgs/MZiChlMaEEkqynJsFqwp/Pn7KYKHJH6YtzxsVmkUwhAkWqT0GtfKqLNe9j8ES3tEFLvqggBtdfVCJBewCXpLtCCQvn+SQK4Uwxm06M9OBMgKZ2ZXVG9Q2qYBr4NkBoq5cSGttDt92tzbPKh/aGrIbzROqZN83j/J8UASb4OuIN3zTxc6ju57/1k7A/RgRNFcZCqSvwDp9drDlNzq+1T08Q5uC/5Kl00TQJSy0OogiLrp6O8wtR2Y7QvNx0UsdO9qmW8vGHkXl7DfpTDWUxmiM+WPXMymG+lMRqEW8w8132WzxbvoJQMpw6lsaQ2f6CQetDc2zLxo3vonZ0ukZlly/Y8cHy7fJvlkmiOxty7a+3QIJ8czl46P3jFav80qtkIkTCpqRsQcBdxfLXDCtdvs1U/AZso2k7FSjvZBcp/iOGLBI05kxUx5a7wF1hz73XaRp3M3hJc9UXl6NSyQGefObqJ2wv9/PHM\"&gt;Link&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Easy
        challenge to start with. Most of the challenge for me came from not coding
        for a bit and having to remember how things work in Java (and also talking
        with my gf at the same time on phone which didn&amp;#39;t make concentrating
        easy)&lt;/p&gt;\n\n&lt;p&gt;I wonder if there is going to be theme this year
        and which is it going to be. Last year had intcode which was fun.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9lrxu/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9lrxu", "created":
        1606836879.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9m65s",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "IIDaFuQII",
        "can_mod_post": false, "created_utc": 1606837076.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_rqtm3", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Got my Java-Version down to 16,7 us from 265,3 us  \n\n\n[Link To Github](https://github.com/krankkkk/AdventOfCode/blob/master/src/de/adventofcode/day1/Day1.java)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Got my Java-Version
        down to 16,7 us from 265,3 us  &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/krankkkk/AdventOfCode/blob/master/src/de/adventofcode/day1/Day1.java\"&gt;Link
        To Github&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9m65s/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9m65s", "created":
        1606837076.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9n0k8",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "thulyadalas",
        "can_mod_post": false, "created_utc": 1606837491.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_h0ajq", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Rust 0ms both parts using complements HashSet for two sum and sorted 2 pointer
        approach for three sum.\n\n    use std::collections::HashSet;\n    \n    use
        crate::util::get_puzzle_input;\n    \n    pub fn run() {\n        let input
        = get_puzzle_input(2020, 1);\n        let mut nums: Vec&lt;u32&gt; = vec![];\n        for
        line in input.lines() {\n            nums.push(line.parse().unwrap());\n        }\n        let
        target = 2020u32;\n        let (x, y) = two_sum(&amp;nums, target);\n        println!(\"p1
        {}\", x * y);\n        let v = three_sum(&amp;mut nums, target);\n        println!(\"p2
        {}\", v.iter().product::&lt;u32&gt;());\n    }\n    \n    fn two_sum(nums:
        &amp;Vec&lt;u32&gt;, target: u32) -&gt; (u32, u32) {\n        let mut complements
        = HashSet::new();\n        for i in nums.iter() {\n            let c = target
        - *i;\n            if complements.contains(&amp;c) {\n                return
        (c, *i);\n            } else {\n                complements.insert(i);\n            }\n        }\n        unreachable!()\n    }\n    \n    pub
        fn three_sum(nums: &amp;mut Vec&lt;u32&gt;, goal: u32) -&gt; [u32; 3] {\n        nums.sort();\n        for
        (i, &amp;x) in nums.iter().enumerate() {\n            let target = goal -
        x;\n            let mut l = i + 1;\n            let mut r = nums.len() - 1;\n            while
        l &lt; r {\n                let sum = nums[l] + nums[r];\n                if
        sum &gt; target {\n                    r -= 1;\n                } else if
        sum &lt; target {\n                    l += 1;\n                } else {\n                    let
        v = [x, nums[l], nums[r]];\n                    return v;\n                }\n            }\n        }\n        unreachable!()\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Rust 0ms both parts
        using complements HashSet for two sum and sorted 2 pointer approach for three
        sum.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use std::collections::HashSet;\n\nuse
        crate::util::get_puzzle_input;\n\npub fn run() {\n    let input = get_puzzle_input(2020,
        1);\n    let mut nums: Vec&amp;lt;u32&amp;gt; = vec![];\n    for line in input.lines()
        {\n        nums.push(line.parse().unwrap());\n    }\n    let target = 2020u32;\n    let
        (x, y) = two_sum(&amp;amp;nums, target);\n    println!(&amp;quot;p1 {}&amp;quot;,
        x * y);\n    let v = three_sum(&amp;amp;mut nums, target);\n    println!(&amp;quot;p2
        {}&amp;quot;, v.iter().product::&amp;lt;u32&amp;gt;());\n}\n\nfn two_sum(nums:
        &amp;amp;Vec&amp;lt;u32&amp;gt;, target: u32) -&amp;gt; (u32, u32) {\n    let
        mut complements = HashSet::new();\n    for i in nums.iter() {\n        let
        c = target - *i;\n        if complements.contains(&amp;amp;c) {\n            return
        (c, *i);\n        } else {\n            complements.insert(i);\n        }\n    }\n    unreachable!()\n}\n\npub
        fn three_sum(nums: &amp;amp;mut Vec&amp;lt;u32&amp;gt;, goal: u32) -&amp;gt;
        [u32; 3] {\n    nums.sort();\n    for (i, &amp;amp;x) in nums.iter().enumerate()
        {\n        let target = goal - x;\n        let mut l = i + 1;\n        let
        mut r = nums.len() - 1;\n        while l &amp;lt; r {\n            let sum
        = nums[l] + nums[r];\n            if sum &amp;gt; target {\n                r
        -= 1;\n            } else if sum &amp;lt; target {\n                l += 1;\n            }
        else {\n                let v = [x, nums[l], nums[r]];\n                return
        v;\n            }\n        }\n    }\n    unreachable!()\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9n0k8/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9n0k8", "created":
        1606837491.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_gea6eh3", "id": "gea6eh3", "parent_id":
        "t1_ge9n0k8", "depth": 1, "children": ["gea6eh3"]}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9nnl1", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_ge9nnl1", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9nnl1/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606837807.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606837807.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge9noqa", "id": "ge9noqa", "parent_id":
        "t1_ge9nnl1", "depth": 1, "children": ["ge9noqa"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9p67o",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "will_code_4_beer",
        "can_mod_post": false, "created_utc": 1606838544.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_8bzr39jd", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My C# solution \ud83e\udd37  \n[https://arter.dev/advent-of-code-day-one](https://arter.dev/advent-of-code-day-one)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My C# solution \ud83e\udd37&lt;br/&gt;\n&lt;a
        href=\"https://arter.dev/advent-of-code-day-one\"&gt;https://arter.dev/advent-of-code-day-one&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9p67o/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9p67o", "created":
        1606838544.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9p7h9",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "troelsbjerre",
        "can_mod_post": false, "created_utc": 1606838562.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_cb6a3", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python3 oneliner for parts 1 and 2:\n\n`print(functools.reduce(lambda x,y:
        x*y,next(filter(lambda x:sum(x)==2020,itertools.combinations(map(int,sys.stdin.read().split()),1+int(sys.argv[1]))))))`\n\nGive
        the part number as the only argument on the commandline, and the problem input
        on stdin.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python3
        oneliner for parts 1 and 2:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;print(functools.reduce(lambda
        x,y: x*y,next(filter(lambda x:sum(x)==2020,itertools.combinations(map(int,sys.stdin.read().split()),1+int(sys.argv[1]))))))&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Give
        the part number as the only argument on the commandline, and the problem input
        on stdin.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9p7h9/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9p7h9", "created":
        1606838562.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606844106.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9p8jh", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "CaptainKirk1970",
        "can_mod_post": false, "created_utc": 1606838576.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_5lrxsehf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My python version of the day 1 solution:\n\n    from itertools import combinations\n    import
        math\n    def day_one(combination_max = 2):\n        combinations_list = list(combinations(convert_list_to_int_values(read_data()),
        combination_max))\n        for i in combinations_list: \n            if(sum(i[:combination_max])
        == 2020):\n                return math.prod(i[:combination_max])\n    \n    print(day_one(2))\n    print(day_one(3))",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My python version of
        the day 1 solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from itertools import
        combinations\nimport math\ndef day_one(combination_max = 2):\n    combinations_list
        = list(combinations(convert_list_to_int_values(read_data()), combination_max))\n    for
        i in combinations_list: \n        if(sum(i[:combination_max]) == 2020):\n            return
        math.prod(i[:combination_max])\n\nprint(day_one(2))\nprint(day_one(3))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9p8jh/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9p8jh", "created":
        1606838576.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9pptc",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "FinlandMan90075",
        "can_mod_post": false, "created_utc": 1606838810.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_34fztjms", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Java.\nNot the cleanest, not the most optimal, but it works fine.\nhttps://gist.github.com/Ma100Dev/7fe5ac21cc5a3431c1daf6f3d6a49807",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Java.\nNot the cleanest,
        not the most optimal, but it works fine.\n&lt;a href=\"https://gist.github.com/Ma100Dev/7fe5ac21cc5a3431c1daf6f3d6a49807\"&gt;https://gist.github.com/Ma100Dev/7fe5ac21cc5a3431c1daf6f3d6a49807&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9pptc/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9pptc", "created":
        1606838810.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9px27",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Axew11",
        "can_mod_post": false, "created_utc": 1606838905.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_12wb10", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python 3 Solution: [https://github.com/Axew11/AdventOfCode/blob/master/Advent%20of%20Code%202020/day\\_1.py](https://github.com/Axew11/AdventOfCode/blob/master/Advent%20of%20Code%202020/day_1.py)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python 3 Solution: &lt;a
        href=\"https://github.com/Axew11/AdventOfCode/blob/master/Advent%20of%20Code%202020/day_1.py\"&gt;https://github.com/Axew11/AdventOfCode/blob/master/Advent%20of%20Code%202020/day_1.py&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9px27/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9px27", "created":
        1606838905.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge9spac", "id": "ge9spac", "parent_id":
        "t1_ge9px27", "depth": 1, "children": ["ge9spac"]}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9qgy9", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "# This is my simple python solution:\n\n```python\nimport
        csv\n\nresults = []\nwith open(''puzzle_1.csv'', newline='''') as inputfile:\n    for
        row in csv.reader(inputfile):\n        results.append(int(row[0]))\n```\n\n##
        Part 1:\n\n```python\nfound = False\n\nfor n in results:\n\n    for n2 in
        results:\n\n        if n + n2 == 2020:\n            print(''N1:'', n)\n            print(''N2:'',
        n2)\n            print(''Answer:'', n * n2)\n            found = True\n\n        if
        found:\n            break\n\n    if found:\n        break\n```\n\n## Part
        2:\n\n```python\nfound = False\n\nfor n in results:\n\n    for n2 in results:\n\n        for
        n3 in results:\n\n            if n + n2 + n3 == 2020:\n                print(''N1:'',
        n)\n                print(''N2:'', n2)\n                print(''N3:'', n3)\n                print(''Answer:'',
        n * n2 * n3)\n                found = True\n            \n            if found:\n                break\n\n        if
        found:\n            break\n\n    if found:\n        break\n```", "awarders":
        [], "downs": 0, "author_flair_css_class": null, "name": "t1_ge9qgy9", "collapsed":
        false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;This
        is my simple python solution:&lt;/h1&gt;\n\n&lt;p&gt;```python\nimport csv&lt;/p&gt;\n\n&lt;p&gt;results
        = []\nwith open(&amp;#39;puzzle_1.csv&amp;#39;, newline=&amp;#39;&amp;#39;)
        as inputfile:\n    for row in csv.reader(inputfile):\n        results.append(int(row[0]))\n```&lt;/p&gt;\n\n&lt;h2&gt;Part
        1:&lt;/h2&gt;\n\n&lt;p&gt;```python\nfound = False&lt;/p&gt;\n\n&lt;p&gt;for
        n in results:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for n2 in results:\n\n    if
        n + n2 == 2020:\n        print(&amp;#39;N1:&amp;#39;, n)\n        print(&amp;#39;N2:&amp;#39;,
        n2)\n        print(&amp;#39;Answer:&amp;#39;, n * n2)\n        found = True\n\n    if
        found:\n        break\n\nif found:\n    break\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;```&lt;/p&gt;\n\n&lt;h2&gt;Part
        2:&lt;/h2&gt;\n\n&lt;p&gt;```python\nfound = False&lt;/p&gt;\n\n&lt;p&gt;for
        n in results:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for n2 in results:\n\n    for
        n3 in results:\n\n        if n + n2 + n3 == 2020:\n            print(&amp;#39;N1:&amp;#39;,
        n)\n            print(&amp;#39;N2:&amp;#39;, n2)\n            print(&amp;#39;N3:&amp;#39;,
        n3)\n            print(&amp;#39;Answer:&amp;#39;, n * n2 * n3)\n            found
        = True\n\n        if found:\n            break\n\n    if found:\n        break\n\nif
        found:\n    break\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;```&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9qgy9/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606839176.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606839176.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 0, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9qi03",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "backtickbot",
        "can_mod_post": false, "created_utc": 1606839191.0, "send_replies": true,
        "parent_id": "t1_ge9qgy9", "score": 0, "author_fullname": "t2_8n9fijwc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Hello, RyRyMc: code blocks using backticks (\\`\\`\\`) don''t work on all
        versions of Reddit!\n\nSome users see [this](https://stalas.alm.lt/backformat/ge9qgy9.png)
        / [this](https://stalas.alm.lt/backformat/ge9qgy9.html) instead.\n\nTo fix
        this, indent every line with **4 spaces** instead. It''s a bit annoying, but
        then your code blocks are properly formatted for everyone.\n\nAn easy way
        to do this is to use the [code-block button in the editor](https://stalas.alm.lt/files/new-reddit-codeblock.png).
        If it''s not working, try switching to the fancy-pants editor and back again.\n\n[Comment
        with formatting fixed for old.reddit.com users](https://np.reddit.com/r/backtickbot/comments/k4nwji/httpsnpredditcomradventofcodecommentsk4e4lm2020/)\n\n[FAQ](https://www.reddit.com/r/backtickbot/wiki/index)\n\n^(You
        can opt out by replying with backtickopt6 to this comment.)", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Hello, RyRyMc: code blocks using backticks
        (```) don&amp;#39;t work on all versions of Reddit!&lt;/p&gt;\n\n&lt;p&gt;Some
        users see &lt;a href=\"https://stalas.alm.lt/backformat/ge9qgy9.png\"&gt;this&lt;/a&gt;
        / &lt;a href=\"https://stalas.alm.lt/backformat/ge9qgy9.html\"&gt;this&lt;/a&gt;
        instead.&lt;/p&gt;\n\n&lt;p&gt;To fix this, indent every line with &lt;strong&gt;4
        spaces&lt;/strong&gt; instead. It&amp;#39;s a bit annoying, but then your
        code blocks are properly formatted for everyone.&lt;/p&gt;\n\n&lt;p&gt;An
        easy way to do this is to use the &lt;a href=\"https://stalas.alm.lt/files/new-reddit-codeblock.png\"&gt;code-block
        button in the editor&lt;/a&gt;. If it&amp;#39;s not working, try switching
        to the fancy-pants editor and back again.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://np.reddit.com/r/backtickbot/comments/k4nwji/httpsnpredditcomradventofcodecommentsk4e4lm2020/\"&gt;Comment
        with formatting fixed for old.reddit.com users&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://www.reddit.com/r/backtickbot/wiki/index\"&gt;FAQ&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;You
        can opt out by replying with backtickopt6 to this comment.&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9qi03/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9qi03", "created":
        1606839191.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9qj85",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "4tuitously",
        "can_mod_post": false, "created_utc": 1606839207.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_6phuryx4", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Kicking of this year with some codegolf (js)\n\n```for(i=8e6,r=document.querySelector(''pre'').innerHTML.split`\\n`.map(x=&gt;+x);i--;)(a=r[i/4e4|0])+(b=r[i%(4e4)/200|0])+(c=r[i%200])==2020?alert(a*b*c):0```",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Kicking of this year
        with some codegolf (js)&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;for(i=8e6,r=document.querySelector(&amp;#39;pre&amp;#39;).innerHTML.split`\\n`.map(x=&amp;gt;+x);i--;)(a=r[i/4e4|0])+(b=r[i%(4e4)/200|0])+(c=r[i%200])==2020?alert(a*b*c):0&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9qj85/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9qj85", "created":
        1606839207.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9u529", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_ge9u529", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9u529/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606840937.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606840937.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ge9u6b1", "id": "ge9u6b1", "parent_id":
        "t1_ge9u529", "depth": 1, "children": ["ge9u6b1"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9vs5f",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "nahuak",
        "can_mod_post": false, "created_utc": 1606841712.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_36mcnk4", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Here''s my Go solution. Would love any feedback if my approach is not the
        most efficient :)\n\n[https://github.com/nahuakang/advent-of-code-2020/blob/master/day1/day1.go](https://github.com/nahuakang/advent-of-code-2020/blob/master/day1/day1.go)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s my Go
        solution. Would love any feedback if my approach is not the most efficient
        :)&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/nahuakang/advent-of-code-2020/blob/master/day1/day1.go\"&gt;https://github.com/nahuakang/advent-of-code-2020/blob/master/day1/day1.go&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9vs5f/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9vs5f", "created":
        1606841712.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_ge9yme4", "id": "ge9yme4", "parent_id":
        "t1_ge9vs5f", "depth": 1, "children": ["ge9yme4"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge9wiwj",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Morego",
        "can_mod_post": false, "created_utc": 1606842067.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_al3vl", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "NimLang:\n\n    import strutils, tables \n    \n    type \n        Pair =
        (int, int)\n    \n    proc main() =\n        var\n            arr = newSeq[int](200)\n            arr2
        = newSeq[int](200)\n            \n            tbl = initTable[Pair, int]()\n            sol1found
        = false \n    \n        let f = open(\"input.txt\")\n        defer: f.close()\n    \n        for
        line in f.lines:\n            arr.add(parseInt(line)) \n       \n        for
        a in arr:\n            for b in arr: \n                arr2.add(a + b)\n    \n                if
        not sol1found and a + b == 2020:\n                    echo(\"Solution 1: \",
        a * b) \n                    sol1found = true\n                if a + b &lt;=
        2020:\n                    tbl[(a, b)] = a + b\n        \n        for key,
        value in tbl.pairs:\n            for v in arr:\n                if v + value
        == 2020:\n                    echo(\"Solution 2: \", key[0] * key[1] * v)
        \n                    return\n    \n    main()", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;NimLang:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        strutils, tables \n\ntype \n    Pair = (int, int)\n\nproc main() =\n    var\n        arr
        = newSeq[int](200)\n        arr2 = newSeq[int](200)\n\n        tbl = initTable[Pair,
        int]()\n        sol1found = false \n\n    let f = open(&amp;quot;input.txt&amp;quot;)\n    defer:
        f.close()\n\n    for line in f.lines:\n        arr.add(parseInt(line)) \n\n    for
        a in arr:\n        for b in arr: \n            arr2.add(a + b)\n\n            if
        not sol1found and a + b == 2020:\n                echo(&amp;quot;Solution
        1: &amp;quot;, a * b) \n                sol1found = true\n            if a
        + b &amp;lt;= 2020:\n                tbl[(a, b)] = a + b\n\n    for key, value
        in tbl.pairs:\n        for v in arr:\n            if v + value == 2020:\n                echo(&amp;quot;Solution
        2: &amp;quot;, key[0] * key[1] * v) \n                return\n\nmain()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9wiwj/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9wiwj", "created":
        1606842067.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606857813.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9wtc6", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "oweiler",
        "can_mod_post": false, "created_utc": 1606842210.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_qmufu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Scala w/ Ammonite\n\n    import scala.util.Using\n    import scala.io.Source\n    \n    def
        printProduct(n: Int): Unit =\n      Using(Source.fromFile(\"input.txt\"))
        {\n         _.getLines()\n          .toSeq\n          .map(_.toInt)\n          .combinations(n)\n          .find(_.sum
        == 2020)\n          .map(_.product)\n          .foreach(println)\n      }\n    \n    @main\n    def
        main(n: Int) {\n      printProduct(n)\n    }", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Scala w/ Ammonite&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        scala.util.Using\nimport scala.io.Source\n\ndef printProduct(n: Int): Unit
        =\n  Using(Source.fromFile(&amp;quot;input.txt&amp;quot;)) {\n     _.getLines()\n      .toSeq\n      .map(_.toInt)\n      .combinations(n)\n      .find(_.sum
        == 2020)\n      .map(_.product)\n      .foreach(println)\n  }\n\n@main\ndef
        main(n: Int) {\n  printProduct(n)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9wtc6/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge9wtc6", "created":
        1606842210.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_geats6e", "id": "geats6e", "parent_id":
        "t1_ge9wtc6", "depth": 1, "children": ["geats6e"]}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge9ysx3", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Learning rust. Brute-forced it. Remove `num3` and third
        loop for first part.\n\n    fn main() {\n        let mut nums: Vec&lt;i32&gt;
        = INPUT\n            .to_string()\n            .lines()\n            .map(|s|
        s.parse().unwrap())\n            .collect();\n    \n        nums.sort_by(|a,
        b| b.cmp(a));\n    \n        let mut num1 = 0;\n        let mut num2 = 0;\n        let
        mut num3 = 0;\n        for i in 0..nums.len() {\n            for j in (i +
        1)..nums.len() {\n                for k in (j + 1)..nums.len() {\n                    let
        t = nums[i] + nums[j] + nums[k];\n                    if t &gt; TARGET_NUM
        {\n                        break;\n                    }\n                    if
        t == TARGET_NUM {\n                        num1 = nums[i];\n                        num2
        = nums[j];\n                        num3 = nums[k];\n                    }\n                }\n            }\n            if
        num1 != 0 {\n                break;\n            }\n        }\n    \n        println!(\"{:?}\",
        (num1, num2, num3));\n        println!(\"{}\", num1 * num2 * num3);\n    }",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_ge9ysx3",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Learning
        rust. Brute-forced it. Remove &lt;code&gt;num3&lt;/code&gt; and third loop
        for first part.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fn main() {\n    let mut
        nums: Vec&amp;lt;i32&amp;gt; = INPUT\n        .to_string()\n        .lines()\n        .map(|s|
        s.parse().unwrap())\n        .collect();\n\n    nums.sort_by(|a, b| b.cmp(a));\n\n    let
        mut num1 = 0;\n    let mut num2 = 0;\n    let mut num3 = 0;\n    for i in
        0..nums.len() {\n        for j in (i + 1)..nums.len() {\n            for k
        in (j + 1)..nums.len() {\n                let t = nums[i] + nums[j] + nums[k];\n                if
        t &amp;gt; TARGET_NUM {\n                    break;\n                }\n                if
        t == TARGET_NUM {\n                    num1 = nums[i];\n                    num2
        = nums[j];\n                    num3 = nums[k];\n                }\n            }\n        }\n        if
        num1 != 0 {\n            break;\n        }\n    }\n\n    println!(&amp;quot;{:?}&amp;quot;,
        (num1, num2, num3));\n    println!(&amp;quot;{}&amp;quot;, num1 * num2 * num3);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge9ysx3/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606843171.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606843171.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gea04hh", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "My simple Python solution. Aiming to go with pure Python,
        hence no use of `itertools`:\n\n    import time\n    raw_input = open(''puzzle_input_1.txt'')\n    puzzle_input
        = [int(line) for line in raw_input]\n    PART = 2\n    def main(puzzle_input):\n        if
        PART == 1:\n            for num_1 in puzzle_input:\n                for num_2
        in puzzle_input:\n                    if num_1 + num_2 == 2020:\n                        return
        num_1 * num_2\n        elif PART == 2:\n            for num_1 in puzzle_input:\n                for
        num_2 in puzzle_input:\n                    for num_3 in puzzle_input:\n                        if
        num_1 + num_2 + num_3 == 2020:\n                            return num_1 *
        num_2 * num_3\n    if __name__ == ''__main__'':\n        start_time = time.time()\n        output
        = main(puzzle_input)\n        print(output)\n        print(time.time() - start_time)\n\nAverage
        runtime of 0.3416 ms\n\nI also tried the only algorithmic speed-up I could
        think of, but the runtime was slower due to list slicing/concatenation:\n\n    import
        time\n    raw_input = open(''puzzle_input_1.txt'')\n    puzzle_input = [int(line)
        for line in raw_input]\n    PART = 2\n    def main(puzzle_input):\n        if
        PART == 1:\n            for i, num_1 in enumerate(puzzle_input):\n                for
        num_2 in puzzle_input[:i] + puzzle_input[i+1:]:\n                    if num_1
        + num_2 == 2020:\n                        return num_1 * num_2\n        elif
        PART == 2:\n            for i, num_1 in enumerate(puzzle_input):\n                for
        j, num_2 in enumerate(puzzle_input[:i] + puzzle_input[i+1:]):\n                    for
        num_3 in puzzle_input[:j] + puzzle_input[j+1:]:\n                        if
        num_1 + num_2 + num_3 == 2020:\n                            return num_1 *
        num_2 * num_3\n    if __name__ == ''__main__'':\n        start_time = time.time()\n        output
        = main(puzzle_input)\n        print(output)\n        print(time.time() - start_time)\n\nAverage
        runtime of 0.3715 ms", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_gea04hh", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;My simple Python solution. Aiming to go
        with pure Python, hence no use of &lt;code&gt;itertools&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        time\nraw_input = open(&amp;#39;puzzle_input_1.txt&amp;#39;)\npuzzle_input
        = [int(line) for line in raw_input]\nPART = 2\ndef main(puzzle_input):\n    if
        PART == 1:\n        for num_1 in puzzle_input:\n            for num_2 in puzzle_input:\n                if
        num_1 + num_2 == 2020:\n                    return num_1 * num_2\n    elif
        PART == 2:\n        for num_1 in puzzle_input:\n            for num_2 in puzzle_input:\n                for
        num_3 in puzzle_input:\n                    if num_1 + num_2 + num_3 == 2020:\n                        return
        num_1 * num_2 * num_3\nif __name__ == &amp;#39;__main__&amp;#39;:\n    start_time
        = time.time()\n    output = main(puzzle_input)\n    print(output)\n    print(time.time()
        - start_time)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Average runtime of 0.3416
        ms&lt;/p&gt;\n\n&lt;p&gt;I also tried the only algorithmic speed-up I could
        think of, but the runtime was slower due to list slicing/concatenation:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        time\nraw_input = open(&amp;#39;puzzle_input_1.txt&amp;#39;)\npuzzle_input
        = [int(line) for line in raw_input]\nPART = 2\ndef main(puzzle_input):\n    if
        PART == 1:\n        for i, num_1 in enumerate(puzzle_input):\n            for
        num_2 in puzzle_input[:i] + puzzle_input[i+1:]:\n                if num_1
        + num_2 == 2020:\n                    return num_1 * num_2\n    elif PART
        == 2:\n        for i, num_1 in enumerate(puzzle_input):\n            for j,
        num_2 in enumerate(puzzle_input[:i] + puzzle_input[i+1:]):\n                for
        num_3 in puzzle_input[:j] + puzzle_input[j+1:]:\n                    if num_1
        + num_2 + num_3 == 2020:\n                        return num_1 * num_2 * num_3\nif
        __name__ == &amp;#39;__main__&amp;#39;:\n    start_time = time.time()\n    output
        = main(puzzle_input)\n    print(output)\n    print(time.time() - start_time)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Average
        runtime of 0.3715 ms&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "can_gild": false, "top_awarded_type": null, "unrepliable_reason": null, "author_flair_text_color":
        "dark", "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea04hh/",
        "num_reports": null, "locked": false, "report_reasons": null, "created": 1606843799.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1606843799.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_gea3per", "id": "gea3per", "parent_id":
        "t1_gea04hh", "depth": 1, "children": ["gea3per"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606858389.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gea0reu", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "foolnotion",
        "can_mod_post": false, "created_utc": 1606844104.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_737kk", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "C++\n===\n\nGeneralized approach that should work for any target sum and
        number of desired terms. The inputs are sorted and for the base case (`n ==
        2`) the second term is found using binary search.\nPart 2 runs in 3.2us.\n\nRelevant
        snippet:\n\n    auto find_terms(std::vector&lt;int&gt; const&amp; values,
        int n, int64_t sum, int64_t product = 1) -&gt; std::optional&lt;int64_t&gt;\n    {\n        EXPECT(n
        &gt;= 2);\n        EXPECT(sum &gt; 0);\n    \n        std::vector&lt;int&gt;
        pair(n);\n        std::vector&lt;gsl::span&lt;const int&gt;&gt; ranges(n);\n    \n        for
        (int i = 0; i &lt; n; ++i) {\n            ranges[i] = gsl::span&lt;const int&gt;(values.data()
        + i, values.size() - n + i);\n        }\n    \n        auto [min_elem, max_elem]
        = std::minmax_element(values.begin(), values.end());\n    \n        if (n
        == 2) {\n            for (auto x : values) {\n                auto y = sum
        - x;\n    \n                if (std::binary_search(values.begin(), values.end(),
        y)) {\n                    return std::make_optional(x * y * product);\n                }\n            }\n            return
        std::nullopt;\n        } else if (n &gt; 2) {\n            for (auto v : values)
        {\n                if (v &gt; sum - *min_elem) continue;\n    \n                if
        (auto res = find_terms(values, n - 1, sum - v, v * product); res.has_value())
        {\n                    return res;\n                }\n            }\n        }\n        return
        std::nullopt;\n    }\n\n**[C++ solution](https://github.com/foolnotion/aoc2020/blob/master/src/day01.cpp)**",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;C++&lt;/h1&gt;\n\n&lt;p&gt;Generalized
        approach that should work for any target sum and number of desired terms.
        The inputs are sorted and for the base case (&lt;code&gt;n == 2&lt;/code&gt;)
        the second term is found using binary search.\nPart 2 runs in 3.2us.&lt;/p&gt;\n\n&lt;p&gt;Relevant
        snippet:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;auto find_terms(std::vector&amp;lt;int&amp;gt;
        const&amp;amp; values, int n, int64_t sum, int64_t product = 1) -&amp;gt;
        std::optional&amp;lt;int64_t&amp;gt;\n{\n    EXPECT(n &amp;gt;= 2);\n    EXPECT(sum
        &amp;gt; 0);\n\n    std::vector&amp;lt;int&amp;gt; pair(n);\n    std::vector&amp;lt;gsl::span&amp;lt;const
        int&amp;gt;&amp;gt; ranges(n);\n\n    for (int i = 0; i &amp;lt; n; ++i) {\n        ranges[i]
        = gsl::span&amp;lt;const int&amp;gt;(values.data() + i, values.size() - n
        + i);\n    }\n\n    auto [min_elem, max_elem] = std::minmax_element(values.begin(),
        values.end());\n\n    if (n == 2) {\n        for (auto x : values) {\n            auto
        y = sum - x;\n\n            if (std::binary_search(values.begin(), values.end(),
        y)) {\n                return std::make_optional(x * y * product);\n            }\n        }\n        return
        std::nullopt;\n    } else if (n &amp;gt; 2) {\n        for (auto v : values)
        {\n            if (v &amp;gt; sum - *min_elem) continue;\n\n            if
        (auto res = find_terms(values, n - 1, sum - v, v * product); res.has_value())
        {\n                return res;\n            }\n        }\n    }\n    return
        std::nullopt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;a
        href=\"https://github.com/foolnotion/aoc2020/blob/master/src/day01.cpp\"&gt;C++
        solution&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea0reu/", "subreddit_type":
        "public", "locked": false, "name": "t1_gea0reu", "created": 1606844104.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gea17ge", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "lynerist", "can_mod_post": false, "created_utc":
        1606844316.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_314jez9d", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "My Go solution!\n\nhttps://github.com/lynerist/Advent-of-code-2020-golang/tree/master/DAY%2001",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My Go solution!&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/lynerist/Advent-of-code-2020-golang/tree/master/DAY%2001\"&gt;https://github.com/lynerist/Advent-of-code-2020-golang/tree/master/DAY%2001&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea17ge/",
        "subreddit_type": "public", "locked": false, "name": "t1_gea17ge", "created":
        1606844316.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gea1c82", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_gea1c82", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea1c82/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606844377.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606844377.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gea358l",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "KidKool7",
        "can_mod_post": false, "created_utc": 1606845225.0, "send_replies": true,
        "parent_id": "t1_gea1c82", "score": 2, "author_fullname": "t2_1fbqf7", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "&gt;So i solved part one of that in O(1)\n\nThis is not possible. Even touching
        each element once requieres O(n) time.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;So i solved part one of that
        in O(1)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This is not possible. Even
        touching each element once requieres O(n) time.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea358l/",
        "subreddit_type": "public", "locked": false, "name": "t1_gea358l", "created":
        1606845225.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 9, "name": "t1_gea7fr2", "id": "gea7fr2", "parent_id":
        "t1_gea358l", "depth": 2, "children": ["gea7fr2"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geaene3",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606850627.0, "send_replies": true,
        "parent_id": "t1_gea1c82", "score": 1, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "&gt; # Top-level posts in Solution Megathreads are for *code solutions* only.\n\nThis
        is a top-level post, so please edit your post and share your code/repo/solution.\n\nYou
        can always create your own thread (and make sure to flair it with `Help`)
        about the O(1) question.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": true, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;h1&gt;Top-level
        posts in Solution Megathreads are for &lt;em&gt;code solutions&lt;/em&gt;
        only.&lt;/h1&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This is a top-level post,
        so please edit your post and share your code/repo/solution.&lt;/p&gt;\n\n&lt;p&gt;You
        can always create your own thread (and make sure to flair it with &lt;code&gt;Help&lt;/code&gt;)
        about the O(1) question.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geaene3/",
        "subreddit_type": "public", "locked": false, "name": "t1_geaene3", "created":
        1606850627.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "more", "data": {"count": 2, "name": "t1_gea4vsr", "id": "gea4vsr",
        "parent_id": "t1_gea1c82", "depth": 1, "children": ["gea4vsr"]}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gea3dle",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "jalbert0",
        "can_mod_post": false, "created_utc": 1606845335.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_82we13qo", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python runtime first problem O(n); second O(n\\^2)\n\n    import pandas as
        pd\n    \n    \n    def problem_1(array, target, start):\n        seen = set()\n        for
        i in range(start, len(array)):\n            complement = target - array[i]\n            if
        complement in seen:\n                return complement * array[i]\n            seen.add(array[i])\n    \n        return
        None\n    \n    def problem_2(array):\n        for i, val in enumerate(array):\n            target
        = 2020 - val\n            result = problem_1(array, target, i+1)\n            if
        result is not None:\n                return val * result\n    \n        raise
        ValueError\n    \n    if __name__ == ''__main__'':\n        data = pd.read_csv(''data_1.csv'')[''col''].values\n        result_1
        = problem_1(data, 2020, 0)\n        print(result_1)\n        result_2 = problem_2(data)\n        print(result_2)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python runtime first
        problem O(n); second O(n^2)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import pandas
        as pd\n\n\ndef problem_1(array, target, start):\n    seen = set()\n    for
        i in range(start, len(array)):\n        complement = target - array[i]\n        if
        complement in seen:\n            return complement * array[i]\n        seen.add(array[i])\n\n    return
        None\n\ndef problem_2(array):\n    for i, val in enumerate(array):\n        target
        = 2020 - val\n        result = problem_1(array, target, i+1)\n        if result
        is not None:\n            return val * result\n\n    raise ValueError\n\nif
        __name__ == &amp;#39;__main__&amp;#39;:\n    data = pd.read_csv(&amp;#39;data_1.csv&amp;#39;)[&amp;#39;col&amp;#39;].values\n    result_1
        = problem_1(data, 2020, 0)\n    print(result_1)\n    result_2 = problem_2(data)\n    print(result_2)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea3dle/",
        "subreddit_type": "public", "locked": false, "name": "t1_gea3dle", "created":
        1606845335.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 6, "name": "t1_geab0mv", "id": "geab0mv", "parent_id":
        "t1_gea3dle", "depth": 1, "children": ["geab0mv", "geab2gi"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gea55cz",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Scroph",
        "can_mod_post": false, "created_utc": 1606846181.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_6p6h0", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "A little late to the party, but here''s a C++ solution that uses a set to
        reduce the complexity a bit :\n\n    #include &lt;iostream&gt;\n    #include
        &lt;set&gt;\n    #include &lt;vector&gt;\n\n    using namespace std;\n\n    int
        main()\n    {\n        set&lt;int&gt; report;\n        vector&lt;int&gt; input;\n        int
        entry;\n        while(cin &gt;&gt; entry)\n        {\n            report.insert(entry);\n            input.push_back(entry);\n        }\n\n        for(int
        i = 0; i &lt; input.size(); i++)\n        {\n            for(int j = i + 1;
        j &lt; input.size(); j++)\n            {\n                auto match = report.find(2020
        - input[i] - input[j]);\n                if(match != report.end())\n                {\n                    cout
        &lt;&lt; input[i] * input[j] * *match &lt;&lt; endl;\n                    return
        0;\n                }\n            }\n        }\n    }", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;A little late to the party, but here&amp;#39;s a
        C++ solution that uses a set to reduce the complexity a bit :&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include
        &amp;lt;iostream&amp;gt;\n#include &amp;lt;set&amp;gt;\n#include &amp;lt;vector&amp;gt;\n\nusing
        namespace std;\n\nint main()\n{\n    set&amp;lt;int&amp;gt; report;\n    vector&amp;lt;int&amp;gt;
        input;\n    int entry;\n    while(cin &amp;gt;&amp;gt; entry)\n    {\n        report.insert(entry);\n        input.push_back(entry);\n    }\n\n    for(int
        i = 0; i &amp;lt; input.size(); i++)\n    {\n        for(int j = i + 1; j
        &amp;lt; input.size(); j++)\n        {\n            auto match = report.find(2020
        - input[i] - input[j]);\n            if(match != report.end())\n            {\n                cout
        &amp;lt;&amp;lt; input[i] * input[j] * *match &amp;lt;&amp;lt; endl;\n                return
        0;\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea55cz/",
        "subreddit_type": "public", "locked": false, "name": "t1_gea55cz", "created":
        1606846181.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606847680.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gea5sgr", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "__developer__",
        "can_mod_post": false, "created_utc": 1606846485.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_375a6oqo", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python\n\nPart 1:\n\n    data.sort()\n    i = 0\n    j = len(data) - 1\n    while
        i &lt; j:\n        if data[i] + data[j] == 2020:\n            print(f\"Part
        1: {data[i] * data[j]}\")\n            break\n        elif data[i] &lt; 2020
        - data[j]:\n            i += 1\n        else:\n            j -= 1\n\nPart
        2:\n\n    data.sort()\n    i = 0\n    j = len(data) - 1\n    k = i + 1\n    while
        i &lt; j:\n        while k &lt; j:\n            if data[i] + data[j] + data[k]
        == 2020:\n                print(f\"Part 2: {data[i] * data[j] * data[k]}\")\n                break\n            elif
        data[i] + data[k] &lt; 2020 - data[j]:\n                k += 1\n            else:\n                j
        -= 1\n        i += 1\n        k = i + 1", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Python&lt;/p&gt;\n\n&lt;p&gt;Part 1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;data.sort()\ni
        = 0\nj = len(data) - 1\nwhile i &amp;lt; j:\n    if data[i] + data[j] == 2020:\n        print(f&amp;quot;Part
        1: {data[i] * data[j]}&amp;quot;)\n        break\n    elif data[i] &amp;lt;
        2020 - data[j]:\n        i += 1\n    else:\n        j -= 1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;data.sort()\ni = 0\nj = len(data) -
        1\nk = i + 1\nwhile i &amp;lt; j:\n    while k &amp;lt; j:\n        if data[i]
        + data[j] + data[k] == 2020:\n            print(f&amp;quot;Part 2: {data[i]
        * data[j] * data[k]}&amp;quot;)\n            break\n        elif data[i] +
        data[k] &amp;lt; 2020 - data[j]:\n            k += 1\n        else:\n            j
        -= 1\n    i += 1\n    k = i + 1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea5sgr/",
        "subreddit_type": "public", "locked": false, "name": "t1_gea5sgr", "created":
        1606846485.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606847140.0, "mod_reason_by": null,
        "banned_by": null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gea6m9x", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": false, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_gea6m9x", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea6m9x/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606846872.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606846872.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gea6ndy",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "backtickbot",
        "can_mod_post": false, "created_utc": 1606846887.0, "send_replies": true,
        "parent_id": "t1_gea6m9x", "score": 2, "author_fullname": "t2_8n9fijwc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Hello, holychromoly: code blocks using backticks (\\`\\`\\`) don''t work
        on all versions of Reddit!\n\nSome users see [this](https://stalas.alm.lt/backformat/gea6m9x.png)
        / [this](https://stalas.alm.lt/backformat/gea6m9x.html) instead.\n\nTo fix
        this, indent every line with **4 spaces** instead. It''s a bit annoying, but
        then your code blocks are properly formatted for everyone.\n\nAn easy way
        to do this is to use the [code-block button in the editor](https://stalas.alm.lt/files/new-reddit-codeblock.png).
        If it''s not working, try switching to the fancy-pants editor and back again.\n\n[Comment
        with formatting fixed for old.reddit.com users](https://np.reddit.com/r/backtickbot/comments/k4qmr5/httpsnpredditcomradventofcodecommentsk4e4lm2020/)\n\n[FAQ](https://www.reddit.com/r/backtickbot/wiki/index)\n\n^(You
        can opt out by replying with backtickopt6 to this comment.)", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Hello, holychromoly: code blocks using backticks
        (```) don&amp;#39;t work on all versions of Reddit!&lt;/p&gt;\n\n&lt;p&gt;Some
        users see &lt;a href=\"https://stalas.alm.lt/backformat/gea6m9x.png\"&gt;this&lt;/a&gt;
        / &lt;a href=\"https://stalas.alm.lt/backformat/gea6m9x.html\"&gt;this&lt;/a&gt;
        instead.&lt;/p&gt;\n\n&lt;p&gt;To fix this, indent every line with &lt;strong&gt;4
        spaces&lt;/strong&gt; instead. It&amp;#39;s a bit annoying, but then your
        code blocks are properly formatted for everyone.&lt;/p&gt;\n\n&lt;p&gt;An
        easy way to do this is to use the &lt;a href=\"https://stalas.alm.lt/files/new-reddit-codeblock.png\"&gt;code-block
        button in the editor&lt;/a&gt;. If it&amp;#39;s not working, try switching
        to the fancy-pants editor and back again.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://np.reddit.com/r/backtickbot/comments/k4qmr5/httpsnpredditcomradventofcodecommentsk4e4lm2020/\"&gt;Comment
        with formatting fixed for old.reddit.com users&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://www.reddit.com/r/backtickbot/wiki/index\"&gt;FAQ&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;You
        can opt out by replying with backtickopt6 to this comment.&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea6ndy/",
        "subreddit_type": "public", "locked": false, "name": "t1_gea6ndy", "created":
        1606846887.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gea6p3j",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "CotswoldWanker",
        "can_mod_post": false, "created_utc": 1606846909.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_53cz41xs", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# Python\n\n## Part One\n\n    from functools import reduce\n    \n    with
        open(\"input.txt\", \"r\") as f:\n        data = f.readlines()\n        puzzle_input
        = [int(line.strip()) for line in data]\n    \n    \n    def find_addends(target,
        input_list):\n         for i in input_list:\n             for j in input_list:\n                 if
        i + j == target:\n                     return i, j         \n    \n    answer
        = reduce(lambda x, y: x*y, find_addends(2020, puzzle_input))\n    \n    print(answer)\n\n##
        Part Two\n\n    from functools import reduce\n    \n    with open(\"input.txt\",
        \"r\") as f:\n        data = f.readlines()\n        puzzle_input = [int(line.strip())
        for line in data]\n    \n    def find_addends(target, input_list):\n        for
        i in input_list:\n            for j in input_list:\n                    for
        k in input_list:\n                        if i + j + k == target:\n                            return
        i, j, k              \n  \n    answer = reduce(lambda x, y: x*y, find_addends(2020,
        puzzle_input))\n    \n    print(answer)", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;h1&gt;Python&lt;/h1&gt;\n\n&lt;h2&gt;Part One&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;from
        functools import reduce\n\nwith open(&amp;quot;input.txt&amp;quot;, &amp;quot;r&amp;quot;)
        as f:\n    data = f.readlines()\n    puzzle_input = [int(line.strip()) for
        line in data]\n\n\ndef find_addends(target, input_list):\n     for i in input_list:\n         for
        j in input_list:\n             if i + j == target:\n                 return
        i, j         \n\nanswer = reduce(lambda x, y: x*y, find_addends(2020, puzzle_input))\n\nprint(answer)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;Part
        Two&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;from functools import reduce\n\nwith
        open(&amp;quot;input.txt&amp;quot;, &amp;quot;r&amp;quot;) as f:\n    data
        = f.readlines()\n    puzzle_input = [int(line.strip()) for line in data]\n\ndef
        find_addends(target, input_list):\n    for i in input_list:\n        for j
        in input_list:\n                for k in input_list:\n                    if
        i + j + k == target:\n                        return i, j, k              \n\nanswer
        = reduce(lambda x, y: x*y, find_addends(2020, puzzle_input))\n\nprint(answer)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea6p3j/",
        "subreddit_type": "public", "locked": false, "name": "t1_gea6p3j", "created":
        1606846909.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_geaas54", "id": "geaas54", "parent_id":
        "t1_gea6p3j", "depth": 1, "children": ["geaas54"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gea7lc6",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "azuremis",
        "can_mod_post": false, "created_utc": 1606847329.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_94eexqub", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Solved with python:\n\n    with open(\"input.txt\") as f:\n      numbers
        = [int(x) for x in f]\n    \n    def special_pair(nums):\n      pair = [(a,
        b) for a in nums for b in nums if a + b == 2020]\n      return pair[0][0]
        * pair[0][1]\n    \n    def special_triple(nums):\n      triple = [(a, b,
        c) for a in nums for b in nums for c in nums if a + b + c == 2020]\n      return
        triple[0][0] * triple[0][1] * triple[0][2]\n    \n    print(special_pair(numbers))\n    print(special_triple(numbers))\n    \n    \n\nLet
        me know if it could be simpler :)", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Solved with python:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with
        open(&amp;quot;input.txt&amp;quot;) as f:\n  numbers = [int(x) for x in f]\n\ndef
        special_pair(nums):\n  pair = [(a, b) for a in nums for b in nums if a + b
        == 2020]\n  return pair[0][0] * pair[0][1]\n\ndef special_triple(nums):\n  triple
        = [(a, b, c) for a in nums for b in nums for c in nums if a + b + c == 2020]\n  return
        triple[0][0] * triple[0][1] * triple[0][2]\n\nprint(special_pair(numbers))\nprint(special_triple(numbers))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Let
        me know if it could be simpler :)&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea7lc6/", "subreddit_type":
        "public", "locked": false, "name": "t1_gea7lc6", "created": 1606847329.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 6, "name":
        "t1_geah5kt", "id": "geah5kt", "parent_id": "t1_gea7lc6", "depth": 1, "children":
        ["geah5kt", "gea9eci"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gea846b", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "nilgoun", "can_mod_post": false, "created_utc":
        1606847580.0, "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1,
        "author_fullname": "t2_50n9zz22", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "First time posting,  currently
        learning rust and trying to get used to concepts.. so this is really not an
        optimal solution. Graciously failed to map both combinations into one line,
        like one could easily do in python :)  Would love to get hints if you feel
        like it.\n\nP.S.: Thanks for showing the optimal solutions with O(n) / O(n\u00b2)
        runtime, really learned something today :D\n\n    pub fn day1() -&gt; Result&lt;(),
        Error&gt; {\n        let input = read(File::open(\"day1.txt\")?)?;`\n       \n        let
        result = input.iter()\n                          .combinations(2)\n                          .filter(|x|
        x[0]+x[1] == 2020)\n                          .next()\n                          .unwrap();\n        print!(\"star1
        {:?} | \", result[0]*result[1]);\n    \n        let result = input.iter()\n                          .combinations(3)\n                          .filter(|x|
        x[0]+x[1]+x[2] == 2020)\n                          .next()\n                          .unwrap();\n        print!(\"star2
        {}\\n\", result[0]*result[1]*result[2]);\n    \n        Ok(())\n    }", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;First time posting,  currently learning
        rust and trying to get used to concepts.. so this is really not an optimal
        solution. Graciously failed to map both combinations into one line, like one
        could easily do in python :)  Would love to get hints if you feel like it.&lt;/p&gt;\n\n&lt;p&gt;P.S.:
        Thanks for showing the optimal solutions with O(n) / O(n\u00b2) runtime, really
        learned something today :D&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;pub fn day1()
        -&amp;gt; Result&amp;lt;(), Error&amp;gt; {\n    let input = read(File::open(&amp;quot;day1.txt&amp;quot;)?)?;`\n\n    let
        result = input.iter()\n                      .combinations(2)\n                      .filter(|x|
        x[0]+x[1] == 2020)\n                      .next()\n                      .unwrap();\n    print!(&amp;quot;star1
        {:?} | &amp;quot;, result[0]*result[1]);\n\n    let result = input.iter()\n                      .combinations(3)\n                      .filter(|x|
        x[0]+x[1]+x[2] == 2020)\n                      .next()\n                      .unwrap();\n    print!(&amp;quot;star2
        {}\\n&amp;quot;, result[0]*result[1]*result[2]);\n\n    Ok(())\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea846b/",
        "subreddit_type": "public", "locked": false, "name": "t1_gea846b", "created":
        1606847580.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606927124.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gea8ouf", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "hahncholo",
        "can_mod_post": false, "created_utc": 1606847850.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_ltgib", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "#Rust \n\nhttps://github.com/nicolashahn/advent-of-code/blob/master/2020/d01/src/main.rs",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Rust&lt;/h1&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/nicolashahn/advent-of-code/blob/master/2020/d01/src/main.rs\"&gt;https://github.com/nicolashahn/advent-of-code/blob/master/2020/d01/src/main.rs&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gea8ouf/",
        "subreddit_type": "public", "locked": false, "name": "t1_gea8ouf", "created":
        1606847850.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_gea8pz8", "id": "gea8pz8", "parent_id":
        "t1_gea8ouf", "depth": 1, "children": ["gea8pz8"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606849600.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geab8yv", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "MundaneIntroduction",
        "can_mod_post": false, "created_utc": 1606849051.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_20js28a3", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python solution, lmk where I can improve\n\n    with open(''input.txt'',
        ''r'') as file:\n        nums = [int(line[:-1]) for line in file.readlines()[:-1]]\n    \n    twosumdic
        = {}\n    threesumdic = {}\n    for i, num in enumerate(nums):\n        #twosum
        stuff\n        try:     \n            print(str(twosumdic[num] * num))\n            print(\"^ans1\")\n        except
        KeyError:\n            twosumdic[2020-num] = num\n    \n        #threesum
        stuff\n        try:\n            print(str(threesumdic[num] * num))\n            print(\"^ans2\")\n        except
        KeyError:\n            pass\n        for num1 in nums[:i]:\n            threesumdic[2020-num-num1]
        = num1 * num", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python
        solution, lmk where I can improve&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with
        open(&amp;#39;input.txt&amp;#39;, &amp;#39;r&amp;#39;) as file:\n    nums
        = [int(line[:-1]) for line in file.readlines()[:-1]]\n\ntwosumdic = {}\nthreesumdic
        = {}\nfor i, num in enumerate(nums):\n    #twosum stuff\n    try:     \n        print(str(twosumdic[num]
        * num))\n        print(&amp;quot;^ans1&amp;quot;)\n    except KeyError:\n        twosumdic[2020-num]
        = num\n\n    #threesum stuff\n    try:\n        print(str(threesumdic[num]
        * num))\n        print(&amp;quot;^ans2&amp;quot;)\n    except KeyError:\n        pass\n    for
        num1 in nums[:i]:\n        threesumdic[2020-num-num1] = num1 * num\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geab8yv/",
        "subreddit_type": "public", "locked": false, "name": "t1_geab8yv", "created":
        1606849051.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_geaba90", "id": "geaba90", "parent_id":
        "t1_geab8yv", "depth": 1, "children": ["geaba90", "geafzsu"]}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geabg9r",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Scoobyben",
        "can_mod_post": false, "created_utc": 1606849144.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_55auj", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "C# \\[8/1151\\] - my first ever leaderboard points, briefly. Guess I''m going
        to have to wake up for 5am some more to get some non null ones! \n\n    public
        static int Part1()\n            {\n                var lines = FileReader.ReadInputLines(1);\n                var
        ints = lines.Select(int.Parse).ToList();\n    \n                foreach (var
        i in ints)\n                {\n                    var other = 2020 - i;\n                    if
        (ints.Contains(other))\n                    {\n                        return
        i * other;\n                    }\n                }\n    \n                return
        0;\n            }\n    \n            public static int Part2()\n            {\n                var
        lines = FileReader.ReadInputLines(1);\n                var ints = lines.Select(int.Parse).ToList();\n    \n                foreach
        (var i in ints)\n                {\n                    var other1 = 2020
        - i;\n                    if (other1 == -1)\n                    {\n                        continue;\n                    }\n                    foreach
        (var j in ints.Except(new [] { i}))\n                    {\n                        var
        other2 = other1 - j;\n                        if (ints.Contains(other2))\n                        {\n                            return
        i * j * other2;\n                        }\n                    }\n                }\n    \n                return
        -1;\n            }", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C#
        [8/1151] - my first ever leaderboard points, briefly. Guess I&amp;#39;m going
        to have to wake up for 5am some more to get some non null ones! &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public
        static int Part1()\n        {\n            var lines = FileReader.ReadInputLines(1);\n            var
        ints = lines.Select(int.Parse).ToList();\n\n            foreach (var i in
        ints)\n            {\n                var other = 2020 - i;\n                if
        (ints.Contains(other))\n                {\n                    return i *
        other;\n                }\n            }\n\n            return 0;\n        }\n\n        public
        static int Part2()\n        {\n            var lines = FileReader.ReadInputLines(1);\n            var
        ints = lines.Select(int.Parse).ToList();\n\n            foreach (var i in
        ints)\n            {\n                var other1 = 2020 - i;\n                if
        (other1 == -1)\n                {\n                    continue;\n                }\n                foreach
        (var j in ints.Except(new [] { i}))\n                {\n                    var
        other2 = other1 - j;\n                    if (ints.Contains(other2))\n                    {\n                        return
        i * j * other2;\n                    }\n                }\n            }\n\n            return
        -1;\n        }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geabg9r/", "subreddit_type":
        "public", "locked": false, "name": "t1_geabg9r", "created": 1606849144.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 3, "name":
        "t1_geatlp4", "id": "geatlp4", "parent_id": "t1_geabg9r", "depth": 1, "children":
        ["geatlp4"]}}, {"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": 1608259133.0,
        "mod_reason_by": null, "banned_by": null, "removal_reason": null, "link_id":
        "t3_k4e4lm", "author_flair_template_id": null, "likes": null, "replies": "",
        "user_reports": [], "saved": false, "id": "geac8gr", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        "DELETED", "no_follow": true, "author": "[deleted]", "can_mod_post": false,
        "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1, "approved_by":
        null, "mod_note": null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body":
        "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class": null, "name":
        "t1_geac8gr", "collapsed": false, "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geac8gr/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606849509.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606849509.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geadldr",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606850139.0, "send_replies": true,
        "parent_id": "t1_geac8gr", "score": 1, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Please add the language to your post to make it easier for folks who Ctrl-F
        the megathreads looking for a specific language.  Thanks!", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": true, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Please add the language to your post to
        make it easier for folks who Ctrl-F the megathreads looking for a specific
        language.  Thanks!&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geadldr/",
        "subreddit_type": "public", "locked": false, "name": "t1_geadldr", "created":
        1606850139.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geacp52", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Written in Rust, using the itertools library (feels just
        a tiny bit like cheating, but hey):\n\n    use std::fs::File;\n    use std::io::prelude::*;\n    use
        itertools::Itertools;\n    \n    fn find_product_of_2020_sum_1(data: &amp;Vec&lt;u64&gt;)
        -&gt; u64 {\n        for pair in data.iter().combinations(2) {\n            if
        pair[0] + pair[1] == 2020 {\n                return pair[0] * pair[1];\n            }\n        }\n        0\n    }\n    \n    \n    fn
        find_product_of_2020_sum_2(data: &amp;Vec&lt;u64&gt;) -&gt; u64 {\n        for
        pair in data.iter().combinations(3) {\n            if pair[0] + pair[1] +
        pair[2] == 2020 {\n                return pair[0] * pair[1] * pair[2];\n            }\n        }\n        0\n    }\n    \n    fn
        main() {\n        let mut file = File::open(\"data.txt\").expect(\"Failed
        to open file\");\n        let mut contents = String::new();\n        file.read_to_string(&amp;mut
        contents).expect(\"Failed to read to string\");\n        let data = contents.trim().split_whitespace().map(|x|
        x.parse().expect(\"Failed to parse\")).collect();\n        let answer1 = find_product_of_2020_sum_1(&amp;data);\n        println!(\"{}\",
        answer1);\n        let answer2 = find_product_of_2020_sum_2(&amp;data);\n        println!(\"{}\",
        answer2);\n    }", "awarders": [], "downs": 0, "author_flair_css_class": null,
        "name": "t1_geacp52", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Written in Rust, using the itertools library
        (feels just a tiny bit like cheating, but hey):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use
        std::fs::File;\nuse std::io::prelude::*;\nuse itertools::Itertools;\n\nfn
        find_product_of_2020_sum_1(data: &amp;amp;Vec&amp;lt;u64&amp;gt;) -&amp;gt;
        u64 {\n    for pair in data.iter().combinations(2) {\n        if pair[0] +
        pair[1] == 2020 {\n            return pair[0] * pair[1];\n        }\n    }\n    0\n}\n\n\nfn
        find_product_of_2020_sum_2(data: &amp;amp;Vec&amp;lt;u64&amp;gt;) -&amp;gt;
        u64 {\n    for pair in data.iter().combinations(3) {\n        if pair[0] +
        pair[1] + pair[2] == 2020 {\n            return pair[0] * pair[1] * pair[2];\n        }\n    }\n    0\n}\n\nfn
        main() {\n    let mut file = File::open(&amp;quot;data.txt&amp;quot;).expect(&amp;quot;Failed
        to open file&amp;quot;);\n    let mut contents = String::new();\n    file.read_to_string(&amp;amp;mut
        contents).expect(&amp;quot;Failed to read to string&amp;quot;);\n    let data
        = contents.trim().split_whitespace().map(|x| x.parse().expect(&amp;quot;Failed
        to parse&amp;quot;)).collect();\n    let answer1 = find_product_of_2020_sum_1(&amp;amp;data);\n    println!(&amp;quot;{}&amp;quot;,
        answer1);\n    let answer2 = find_product_of_2020_sum_2(&amp;amp;data);\n    println!(&amp;quot;{}&amp;quot;,
        answer2);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "can_gild": false, "top_awarded_type": null, "unrepliable_reason": null, "author_flair_text_color":
        "dark", "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geacp52/",
        "num_reports": null, "locked": false, "report_reasons": null, "created": 1606849727.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1606849727.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geadhpo",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Tetha",
        "can_mod_post": false, "created_utc": 1606850093.0, "send_replies": true,
        "parent_id": "t1_geacp52", "score": 2, "author_fullname": "t2_43v02", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I prettymuch have the same code, but I used the `include_str!` macro to import
        the input at compile time. It makes the file handling a bit easier imo:\n\n    let
        input = include_str!(\"input\");\n    let numbers = input.lines().map(|l|
        l.trim().parse::&lt;i32&gt;()).collect::&lt;Result&lt;Vec&lt;i32&gt;, ParseIntError&gt;&gt;()?;",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I prettymuch have the
        same code, but I used the &lt;code&gt;include_str!&lt;/code&gt; macro to import
        the input at compile time. It makes the file handling a bit easier imo:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let
        input = include_str!(&amp;quot;input&amp;quot;);\nlet numbers = input.lines().map(|l|
        l.trim().parse::&amp;lt;i32&amp;gt;()).collect::&amp;lt;Result&amp;lt;Vec&amp;lt;i32&amp;gt;,
        ParseIntError&amp;gt;&amp;gt;()?;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geadhpo/",
        "subreddit_type": "public", "locked": false, "name": "t1_geadhpo", "created":
        1606850093.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_geaihih", "id": "geaihih", "parent_id":
        "t1_geadhpo", "depth": 2, "children": ["geaihih"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gead2hx",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "aardvark1231",
        "can_mod_post": false, "created_utc": 1606849898.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_24zg2nv1", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My C# solution.  \n\n\n    public static class Day1 {\n    \n        static
        string[] input = System.IO.File.ReadAllLines(@\"Input\\day1.txt\");\n    \n        public
        static void Solve() {\n            int[] number = new int[input.Length];\n    \n            for(int
        i = 0; i &lt; number.Length; i++) {\n                number[i] = int.Parse(input[i]);\n            }\n    \n            int
        part1 = 0;\n            int part2 = 0; \n    \n            for (int x = 0;
        x &lt; number.Length - 2; x++) {\n                for (int y = x + 1; y &lt;
        number.Length - 1; y++) {\n                    if (number[x] + number[y] ==
        2020) {\n                        part1 = number[x] * number[y];\n                    }\n                    for
        (int z = y + 1; z &lt; number.Length; z++) {\n                        if (number[x]
        + number[y] + number[z] == 2020) {\n                            part2 = number[x]
        * number[y] * number[z];\n                        }\n                    }\n                }\n            }\n    \n            Console.WriteLine(\"2020
        Day 1\");\n            Console.WriteLine(\"=================================\");\n            Console.WriteLine(\"Part
        1: {0}\", part1);\n            Console.WriteLine(\"Part 2: {0}\", part2);\n            Console.WriteLine(\"=================================\");\n        }\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My C# solution.  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public
        static class Day1 {\n\n    static string[] input = System.IO.File.ReadAllLines(@&amp;quot;Input\\day1.txt&amp;quot;);\n\n    public
        static void Solve() {\n        int[] number = new int[input.Length];\n\n        for(int
        i = 0; i &amp;lt; number.Length; i++) {\n            number[i] = int.Parse(input[i]);\n        }\n\n        int
        part1 = 0;\n        int part2 = 0; \n\n        for (int x = 0; x &amp;lt;
        number.Length - 2; x++) {\n            for (int y = x + 1; y &amp;lt; number.Length
        - 1; y++) {\n                if (number[x] + number[y] == 2020) {\n                    part1
        = number[x] * number[y];\n                }\n                for (int z =
        y + 1; z &amp;lt; number.Length; z++) {\n                    if (number[x]
        + number[y] + number[z] == 2020) {\n                        part2 = number[x]
        * number[y] * number[z];\n                    }\n                }\n            }\n        }\n\n        Console.WriteLine(&amp;quot;2020
        Day 1&amp;quot;);\n        Console.WriteLine(&amp;quot;=================================&amp;quot;);\n        Console.WriteLine(&amp;quot;Part
        1: {0}&amp;quot;, part1);\n        Console.WriteLine(&amp;quot;Part 2: {0}&amp;quot;,
        part2);\n        Console.WriteLine(&amp;quot;=================================&amp;quot;);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gead2hx/",
        "subreddit_type": "public", "locked": false, "name": "t1_gead2hx", "created":
        1606849898.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gead5e6",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "EquifaxCanEatMyAss",
        "can_mod_post": false, "created_utc": 1606849935.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_8gec0yms", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "*PYTHON*\n\nNested for loops, not optimized\n\n    import os\n    import
        time\n\n    def timer(func):\n\n        def wrapper(numbers):\n            StartTime
        = time.time()\n            val = func(numbers)\n            EndTime = time.time()\n\n            print(\"Time
        elapsed (seconds): \" + str(EndTime-StartTime))\n\n            return(val)\n\n        return(wrapper)\n\n    def
        getInput():\n        path = os.path.join(os.path.split(os.path.abspath(__file__))[0],
        \"input.txt\")\n\n        numbers = None\n        with open(path,''r'') as
        f:\n            numbers = f.readlines()\n        \n        numbers = [int(i.replace(\"\\n\",\"\"))
        for i in numbers]\n        numbers = sorted(numbers)\n        #print(numbers)\n        return(numbers)\n\n    @timer\n    def
        pt1(numbers):\n\n        for i in numbers:\n\n            for j in sorted(numbers,
        reverse=True):\n\n                if i+j == 2020: \n                    solution
        = (i,j)\n                    return(solution)\n        return(None)\n\n    @timer\n    def
        pt2(numbers):\n\n        for i in numbers:\n            for j in numbers:\n                for
        k in sorted(numbers, reverse=True):\n                    if i+j+k == 2020:
        \n                        solution = (i,j,k)\n                        return(solution)\n\n        return(None)\n\n    def
        main():\n        numbers = getInput()\n        sol1 = pt1(numbers)\n        print(\"Solution
        1: \" + str(sol1[0] * sol1[1]))\n        sol2 = pt2(numbers)\n        print(\"Solution
        2: \" + str(sol2[0] * sol2[1] * sol2[2]))\n\n    if __name__ == ''__main__'':\n        main()",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;em&gt;PYTHON&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Nested
        for loops, not optimized&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import os\nimport
        time\n\ndef timer(func):\n\n    def wrapper(numbers):\n        StartTime =
        time.time()\n        val = func(numbers)\n        EndTime = time.time()\n\n        print(&amp;quot;Time
        elapsed (seconds): &amp;quot; + str(EndTime-StartTime))\n\n        return(val)\n\n    return(wrapper)\n\ndef
        getInput():\n    path = os.path.join(os.path.split(os.path.abspath(__file__))[0],
        &amp;quot;input.txt&amp;quot;)\n\n    numbers = None\n    with open(path,&amp;#39;r&amp;#39;)
        as f:\n        numbers = f.readlines()\n\n    numbers = [int(i.replace(&amp;quot;\\n&amp;quot;,&amp;quot;&amp;quot;))
        for i in numbers]\n    numbers = sorted(numbers)\n    #print(numbers)\n    return(numbers)\n\n@timer\ndef
        pt1(numbers):\n\n    for i in numbers:\n\n        for j in sorted(numbers,
        reverse=True):\n\n            if i+j == 2020: \n                solution =
        (i,j)\n                return(solution)\n    return(None)\n\n@timer\ndef pt2(numbers):\n\n    for
        i in numbers:\n        for j in numbers:\n            for k in sorted(numbers,
        reverse=True):\n                if i+j+k == 2020: \n                    solution
        = (i,j,k)\n                    return(solution)\n\n    return(None)\n\ndef
        main():\n    numbers = getInput()\n    sol1 = pt1(numbers)\n    print(&amp;quot;Solution
        1: &amp;quot; + str(sol1[0] * sol1[1]))\n    sol2 = pt2(numbers)\n    print(&amp;quot;Solution
        2: &amp;quot; + str(sol2[0] * sol2[1] * sol2[2]))\n\nif __name__ == &amp;#39;__main__&amp;#39;:\n    main()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gead5e6/",
        "subreddit_type": "public", "locked": false, "name": "t1_gead5e6", "created":
        1606849935.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geady27", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Very short solution in Python for part 2\n\n    f = open(''input'')\n    l
        = [int(line) for line in f]\n    for a in range(len(l)):\n        for b in
        range(a+1,len(l)):\n            for c in range(b+1,len(l)):\n                if
        l[a] + l[b] +l[c]== 2020:\n                    print(l[a]*l[b]*l[c])", "awarders":
        [], "downs": 0, "author_flair_css_class": null, "name": "t1_geady27", "collapsed":
        false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Very
        short solution in Python for part 2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;f
        = open(&amp;#39;input&amp;#39;)\nl = [int(line) for line in f]\nfor a in range(len(l)):\n    for
        b in range(a+1,len(l)):\n        for c in range(b+1,len(l)):\n            if
        l[a] + l[b] +l[c]== 2020:\n                print(l[a]*l[b]*l[c])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geady27/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606850301.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606850301.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geae2je",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Deltaan",
        "can_mod_post": false, "created_utc": 1606850358.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_54tgd", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "One line O(n) Python solution to problem 1:\n    `print(reduce(lambda x,y:
        x*y, [x for x in data if (2020-x) in set(data)]))       `", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;One line O(n) Python solution to problem
        1:\n    &lt;code&gt;print(reduce(lambda x,y: x*y, [x for x in data if (2020-x)
        in set(data)]))&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geae2je/",
        "subreddit_type": "public", "locked": false, "name": "t1_geae2je", "created":
        1606850358.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geafmdn",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Discobacon",
        "can_mod_post": false, "created_utc": 1606851072.0, "send_replies": true,
        "parent_id": "t1_geae2je", "score": 2, "author_fullname": "t2_6rxfs", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Could you please explain this?\n\nAnd how is it O(n) :) ?", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Could you please explain this?&lt;/p&gt;\n\n&lt;p&gt;And
        how is it O(n) :) ?&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": true,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geafmdn/",
        "subreddit_type": "public", "locked": false, "name": "t1_geafmdn", "created":
        1606851072.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606858570.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gearyrj", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "HalfsInner",
        "can_mod_post": false, "created_utc": 1606856798.0, "send_replies": true,
        "parent_id": "t1_geafmdn", "score": 2, "author_fullname": "t2_4ymvw5t6", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Below''s my O(n) solution in C++ as well.\n\nTime complexity explanation:\n\n1.
        \\[Optional\\] In the task there is no word about more correct answers than
        one, so you can squash inputs puzzle where same numbers/values appear.\n2.
        Instead keeping it in an array, it''s possible to put the input to the structure
        called ''associative array'' in math (set/unordered\\_set/hashset/dict -&gt;
        containers). This type of containers provide very fast access to their elements.
        Please read more here: [https://en.wikipedia.org/wiki/Hash\\_table](https://en.wikipedia.org/wiki/Hash_table)\n3.
        For each record, you have to do subtraction to find wanted suplement (O(n)),
        and check/find if this suplement exists in set (O(1)). So you have O(n) \\*
        O(1) = O(n)\n\n```cpp\n    template &lt;typename Container&gt;\n    auto crack(Container
        report) {\n        int result = -1;\n        for (auto &amp;&amp;val : report)
        {    // O(n) loop\n            constexpr int xmassYear = 2020;\n            const
        int supplement = xmassYear - val; // Subtract\n            auto it = report.find(supplement);
        // O(1) find\n            if (it != cend(report)) {\n                return
        val * *it; // Stop, because no more answers\n            }\n        }\n        return
        result;\n    }\n```", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Below&amp;#39;s
        my O(n) solution in C++ as well.&lt;/p&gt;\n\n&lt;p&gt;Time complexity explanation:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;[Optional]
        In the task there is no word about more correct answers than one, so you can
        squash inputs puzzle where same numbers/values appear.&lt;/li&gt;\n&lt;li&gt;Instead
        keeping it in an array, it&amp;#39;s possible to put the input to the structure
        called &amp;#39;associative array&amp;#39; in math (set/unordered_set/hashset/dict
        -&amp;gt; containers). This type of containers provide very fast access to
        their elements. Please read more here: &lt;a href=\"https://en.wikipedia.org/wiki/Hash_table\"&gt;https://en.wikipedia.org/wiki/Hash_table&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;For
        each record, you have to do subtraction to find wanted suplement (O(n)), and
        check/find if this suplement exists in set (O(1)). So you have O(n) * O(1)
        = O(n)&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;code&gt;cpp\n    template &amp;lt;typename
        Container&amp;gt;\n    auto crack(Container report) {\n        int result
        = -1;\n        for (auto &amp;amp;&amp;amp;val : report) {    // O(n) loop\n            constexpr
        int xmassYear = 2020;\n            const int supplement = xmassYear - val;
        // Subtract\n            auto it = report.find(supplement); // O(1) find\n            if
        (it != cend(report)) {\n                return val * *it; // Stop, because
        no more answers\n            }\n        }\n        return result;\n    }\n&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gearyrj/",
        "subreddit_type": "public", "locked": false, "name": "t1_gearyrj", "created":
        1606856798.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_geas00g", "id": "geas00g", "parent_id":
        "t1_gearyrj", "depth": 3, "children": ["geas00g", "geas0cs"]}}, {"kind": "more",
        "data": {"count": 1, "name": "t1_geaq8ka", "id": "geaq8ka", "parent_id": "t1_geafmdn",
        "depth": 2, "children": ["geaq8ka"]}}, {"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "removal_reason":
        null, "link_id": "t3_k4e4lm", "author_flair_template_id": null, "likes": null,
        "replies": "", "user_reports": [], "saved": false, "id": "geaeq43", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        "DELETED", "no_follow": true, "author": "[deleted]", "can_mod_post": false,
        "send_replies": true, "parent_id": "t3_k4e4lm", "score": 1, "approved_by":
        null, "mod_note": null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body":
        "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class": null, "name":
        "t1_geaeq43", "collapsed": false, "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geaeq43/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606850662.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606850662.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 0, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geaer8f",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "backtickbot",
        "can_mod_post": false, "created_utc": 1606850676.0, "send_replies": true,
        "parent_id": "t1_geaeq43", "score": 0, "author_fullname": "t2_8n9fijwc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Hello, Reeceeboii\\_: code blocks using backticks (\\`\\`\\`) don''t work
        on all versions of Reddit!\n\nSome users see [this](https://stalas.alm.lt/backformat/geaeq43.png)
        / [this](https://stalas.alm.lt/backformat/geaeq43.html) instead.\n\nTo fix
        this, indent every line with **4 spaces** instead. It''s a bit annoying, but
        then your code blocks are properly formatted for everyone.\n\nAn easy way
        to do this is to use the [code-block button in the editor](https://stalas.alm.lt/files/new-reddit-codeblock.png).
        If it''s not working, try switching to the fancy-pants editor and back again.\n\n[Comment
        with formatting fixed for old.reddit.com users](https://np.reddit.com/r/backtickbot/comments/k4rzgc/httpsnpredditcomradventofcodecommentsk4e4lm2020/)\n\n[FAQ](https://www.reddit.com/r/backtickbot/wiki/index)\n\n^(You
        can opt out by replying with backtickopt6 to this comment.)", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Hello, Reeceeboii_: code blocks using backticks
        (```) don&amp;#39;t work on all versions of Reddit!&lt;/p&gt;\n\n&lt;p&gt;Some
        users see &lt;a href=\"https://stalas.alm.lt/backformat/geaeq43.png\"&gt;this&lt;/a&gt;
        / &lt;a href=\"https://stalas.alm.lt/backformat/geaeq43.html\"&gt;this&lt;/a&gt;
        instead.&lt;/p&gt;\n\n&lt;p&gt;To fix this, indent every line with &lt;strong&gt;4
        spaces&lt;/strong&gt; instead. It&amp;#39;s a bit annoying, but then your
        code blocks are properly formatted for everyone.&lt;/p&gt;\n\n&lt;p&gt;An
        easy way to do this is to use the &lt;a href=\"https://stalas.alm.lt/files/new-reddit-codeblock.png\"&gt;code-block
        button in the editor&lt;/a&gt;. If it&amp;#39;s not working, try switching
        to the fancy-pants editor and back again.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://np.reddit.com/r/backtickbot/comments/k4rzgc/httpsnpredditcomradventofcodecommentsk4e4lm2020/\"&gt;Comment
        with formatting fixed for old.reddit.com users&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://www.reddit.com/r/backtickbot/wiki/index\"&gt;FAQ&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;You
        can opt out by replying with backtickopt6 to this comment.&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geaer8f/",
        "subreddit_type": "public", "locked": false, "name": "t1_geaer8f", "created":
        1606850676.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geb73sk",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "AddendumSouthern",
        "can_mod_post": false, "created_utc": 1606864172.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_7man07y4", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "my solution using Kotlin\n\n```\n     private fun productOf2(input: Set&lt;Int&gt;,
        target: Int): Int {\n        input.forEach {\n                val difference
        = target - it\n                if (difference &gt; 0 &amp;&amp; input.contains(difference))
        {\n                    return it * difference\n                }\n            }\n        return
        0\n    }\n\n    private fun productOf3(input: Set&lt;Int&gt;): Int {\n        input.forEach
        {\n            val productOf2 = productOf2(input, 2020 - it)\n            if
        (productOf2 &gt; 0) {\n                return productOf2 * it\n            }\n        }\n\n        return
        0\n    }\n```", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;my
        solution using Kotlin&lt;/p&gt;\n\n&lt;p&gt;```\n     private fun productOf2(input:
        Set&amp;lt;Int&amp;gt;, target: Int): Int {\n        input.forEach {\n                val
        difference = target - it\n                if (difference &amp;gt; 0 &amp;amp;&amp;amp;
        input.contains(difference)) {\n                    return it * difference\n                }\n            }\n        return
        0\n    }&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;private fun productOf3(input:
        Set&amp;lt;Int&amp;gt;): Int {\n    input.forEach {\n        val productOf2
        = productOf2(input, 2020 - it)\n        if (productOf2 &amp;gt; 0) {\n            return
        productOf2 * it\n        }\n    }\n\n    return 0\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;```&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb73sk/",
        "subreddit_type": "public", "locked": false, "name": "t1_geb73sk", "created":
        1606864172.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gebe7wd",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606868015.0, "send_replies": true,
        "parent_id": "t1_geb73sk", "score": 1, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "This code is really hard to read on old.reddit.  Could you please edit it
        using old.reddit''s four-spaces formatting instead of new.reddit''s triple
        backticks?  Note that if you''re using the visual editor, you may have to
        \"Switch to Markdown\" to get Reddit to understand the formatting properly.",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        true, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This code is really hard
        to read on old.reddit.  Could you please edit it using old.reddit&amp;#39;s
        four-spaces formatting instead of new.reddit&amp;#39;s triple backticks?  Note
        that if you&amp;#39;re using the visual editor, you may have to &amp;quot;Switch
        to Markdown&amp;quot; to get Reddit to understand the formatting properly.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebe7wd/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebe7wd", "created":
        1606868015.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "more", "data": {"count": 19, "name": "t1_gebuvuw", "id": "gebuvuw",
        "parent_id": "t3_k4e4lm", "depth": 0, "children": ["gebuvuw", "gebx4pn", "geby132",
        "gec5h0g", "gecjat6", "geby48b", "ged4hhm", "gecd75d", "ged4e5g", "ged616q",
        "gec0e6f"]}}], true]], [0, 12, "attr", "things"], [12, 13, "call", ["t1_ge99c2y"]],
        [13, 14, "attr", "focus"], [14, 15, "call", []], [0, 16, "attr", "things"],
        [16, 17, "call", ["None"]], [17, 18, "attr", "filter"], [18, 19, "call", [".morechildren"]],
        [19, 20, "attr", "remove"], [20, 21, "call", []]], "success": true}'
  recorded_at: Sat, 08 Mar 2025 23:06:39 GMT
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:39 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=eeLGzCnPhdFu9GA91w; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sat, 08 Mar 2025 23:06:39 GMT
- request:
    method: post
    uri: https://oauth.reddit.com/api/morechildren.json
    body:
      encoding: UTF-8
      string: link_id=t3_k4e4lm&children=gebuvuw,gebx4pn,geby132,gec5h0g,gecjat6,geby48b,ged4hhm,gecd75d,ged4e5g,ged616q,gec0e6f
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '4823'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      set-cookie:
      - loid=000000001ksigcy16o.2.1741475199740.Z0FBQUFBQm56TTFfWTRqa3J5S3ZIRmdwRjNNMFR5MVhkX3EwRVpnOGczd0dXQUt3RHF6bnlzbFBOWVVxZXJ5LU1pVFRObXVhZUd2eG1XV25hbUc5ZXdjbDg2U0x4bGVDM1REX1JfQ3p3aXJtVUZDUlV6TFpxdWZraTNvRlROa2xXX3QxYjh0YnZ5QkY;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Mon, 08-Mar-2027 23:06:39
        GMT; secure, session_tracker=jajrmomgbocoplmgbn.0.1741475199753.Z0FBQUFBQm56TTFfaGRfTEptRFNwdVphdVk5VnpjaS1IQTZPZ0g2MlRLUzRkdWF2OGR6eXFZRkR6M1JsRmlveHRHT01tUmFGUm5DZWpyMXQwSk4wYWtIeDI5SWRaV3Brd1VqaENPbDQ5cU9pWGstWFMzZlB4djg3VnhWZTdiRXYxTWctRWhxdk5xYXo;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 01:06:39
        GMT; secure, edgebucket=wsd9DtpDNKGqdB0ha9; Domain=reddit.com; Max-Age=63071999;
        Path=/;  secure
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '23'
      x-ratelimit-remaining:
      - '77.0'
      x-ratelimit-reset:
      - '200'
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:39 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"jquery": [[0, 1, "call", ["body"]], [1, 2, "attr", "find"], [2, 3,
        "call", [".status"]], [3, 4, "attr", "hide"], [4, 5, "call", []], [5, 6, "attr",
        "html"], [6, 7, "call", [""]], [7, 8, "attr", "end"], [8, 9, "call", []],
        [0, 10, "attr", "insert_things"], [10, 11, "call", [[{"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606879242.0, "mod_reason_by": null,
        "banned_by": null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "geby132", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_geby132", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geby132/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606879010.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606879010.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geby1xv",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "backtickbot",
        "can_mod_post": false, "created_utc": 1606879024.0, "send_replies": true,
        "parent_id": "t1_geby132", "score": 1, "author_fullname": "t2_8n9fijwc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Hello, Reignful: code blocks using backticks (\\`\\`\\`) don''t work on all
        versions of Reddit!\n\nSome users see [this](https://stalas.alm.lt/backformat/geby132.png)
        / [this](https://stalas.alm.lt/backformat/geby132.html) instead.\n\nTo fix
        this, indent every line with **4 spaces** instead. It''s a bit annoying, but
        then your code blocks are properly formatted for everyone.\n\nAn easy way
        to do this is to use the [code-block button in the editor](https://stalas.alm.lt/files/new-reddit-codeblock.png).
        If it''s not working, try switching to the fancy-pants editor and back again.\n\n[Comment
        with formatting fixed for old.reddit.com users](https://np.reddit.com/r/backtickbot/comments/k5113u/httpsnpredditcomradventofcodecommentsk4e4lm2020/)\n\n[FAQ](https://www.reddit.com/r/backtickbot/wiki/index)\n\n^(You
        can opt out by replying with backtickopt6 to this comment.)", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Hello, Reignful: code blocks using backticks
        (```) don&amp;#39;t work on all versions of Reddit!&lt;/p&gt;\n\n&lt;p&gt;Some
        users see &lt;a href=\"https://stalas.alm.lt/backformat/geby132.png\"&gt;this&lt;/a&gt;
        / &lt;a href=\"https://stalas.alm.lt/backformat/geby132.html\"&gt;this&lt;/a&gt;
        instead.&lt;/p&gt;\n\n&lt;p&gt;To fix this, indent every line with &lt;strong&gt;4
        spaces&lt;/strong&gt; instead. It&amp;#39;s a bit annoying, but then your
        code blocks are properly formatted for everyone.&lt;/p&gt;\n\n&lt;p&gt;An
        easy way to do this is to use the &lt;a href=\"https://stalas.alm.lt/files/new-reddit-codeblock.png\"&gt;code-block
        button in the editor&lt;/a&gt;. If it&amp;#39;s not working, try switching
        to the fancy-pants editor and back again.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://np.reddit.com/r/backtickbot/comments/k5113u/httpsnpredditcomradventofcodecommentsk4e4lm2020/\"&gt;Comment
        with formatting fixed for old.reddit.com users&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://www.reddit.com/r/backtickbot/wiki/index\"&gt;FAQ&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;You
        can opt out by replying with backtickopt6 to this comment.&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geby1xv/",
        "subreddit_type": "public", "locked": false, "name": "t1_geby1xv", "created":
        1606879024.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gec0e6f",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "magus517707",
        "can_mod_post": false, "created_utc": 1606880392.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_3rjdr", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**PowerShell:**\n\nI am removing the pivot elements when comparing to the
        input list in the case that an element gives a false positive by pinging against
        itself. This allows for a more generalized function, though this is only useful
        if there are no duplicates in the list. If there are duplicates in the list
        that would allow for the bailout condition to be true, then this would break
        the solution i.e. the value to search for is 40 and there are two elements
        that are 20.\n\n|Times running on Ryzen 3700x (Standard Clock Speed)|\n\nSolution
        1: Average - 2.2 ms\n\nSolution 2: Average - 200 ms\n\n```\n[System.Collections.ArrayList]$in
        =gc .\\input.txt | foreach-object{$_.ToInt64($Null)}\n\n#Solution 1\nfunction
        twoSum{\nparam($val,$list)\n    foreach($e in $list){\n        $diff = $val-$e\n        if(($list
        -ne $e) -contains $diff){\n            $e*$list[[array]::IndexOf($list,$diff)]\n            return\n        }\n    }\n}\n\ntwoSum
        2020 $in\n\n#Solution 2\nfunction threeSum{\nparam($val,$list)\n    foreach($e
        in $list){\n        foreach($e1 in ($list -ne $el)){\n            $diff =
        $val-($e+$e1)\n            if(($list -ne $e -ne $e1) -contains $diff){\n                $e*$e1*$list[[array]::IndexOf($list,$diff)]\n                return\n            }\n        }\n    }\n}\n\nthreeSum
        2020 $in\n```", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;PowerShell:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I
        am removing the pivot elements when comparing to the input list in the case
        that an element gives a false positive by pinging against itself. This allows
        for a more generalized function, though this is only useful if there are no
        duplicates in the list. If there are duplicates in the list that would allow
        for the bailout condition to be true, then this would break the solution i.e.
        the value to search for is 40 and there are two elements that are 20.&lt;/p&gt;\n\n&lt;p&gt;|Times
        running on Ryzen 3700x (Standard Clock Speed)|&lt;/p&gt;\n\n&lt;p&gt;Solution
        1: Average - 2.2 ms&lt;/p&gt;\n\n&lt;p&gt;Solution 2: Average - 200 ms&lt;/p&gt;\n\n&lt;p&gt;```\n[System.Collections.ArrayList]$in
        =gc .\\input.txt | foreach-object{$_.ToInt64($Null)}&lt;/p&gt;\n\n&lt;h1&gt;Solution
        1&lt;/h1&gt;\n\n&lt;p&gt;function twoSum{\nparam($val,$list)\n    foreach($e
        in $list){\n        $diff = $val-$e\n        if(($list -ne $e) -contains $diff){\n            $e*$list[[array]::IndexOf($list,$diff)]\n            return\n        }\n    }\n}&lt;/p&gt;\n\n&lt;p&gt;twoSum
        2020 $in&lt;/p&gt;\n\n&lt;h1&gt;Solution 2&lt;/h1&gt;\n\n&lt;p&gt;function
        threeSum{\nparam($val,$list)\n    foreach($e in $list){\n        foreach($e1
        in ($list -ne $el)){\n            $diff = $val-($e+$e1)\n            if(($list
        -ne $e -ne $e1) -contains $diff){\n                $e&lt;em&gt;$e1&lt;/em&gt;$list[[array]::IndexOf($list,$diff)]\n                return\n            }\n        }\n    }\n}&lt;/p&gt;\n\n&lt;p&gt;threeSum
        2020 $in\n```&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gec0e6f/",
        "subreddit_type": "public", "locked": false, "name": "t1_gec0e6f", "created":
        1606880392.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gejnqy5",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1607041089.0, "send_replies": true,
        "parent_id": "t1_gec0e6f", "score": 1, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Your code is hard to read on old.reddit.  As per our [posting guidelines](https://www.reddit.com/r/adventofcode/wiki/index#wiki_how_do_i_format_code.3F),
        would you please edit it using old.reddit''s four-spaces formatting instead
        of new.reddit''s triple backticks?\n\nPut four spaces before every code line.  (If
        you''re using new.reddit, click the button in the editor that says \"Switch
        to Markdown\" first.)\n\n`[space space space space]public static void main()`\n`[space
        space space space][more spaces for indenting]/* more code here*/`\n\nturns
        into\n\n    public static void main()\n        /* more code here */\n\nAlternatively,
        stuff your code in /u/topaz2078''s [`paste`](https://topaz.github.io/paste/)
        or an external repo instead and link to that instead.\n\nThanks!", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": true, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Your code is hard to read on old.reddit.  As
        per our &lt;a href=\"https://www.reddit.com/r/adventofcode/wiki/index#wiki_how_do_i_format_code.3F\"&gt;posting
        guidelines&lt;/a&gt;, would you please edit it using old.reddit&amp;#39;s
        four-spaces formatting instead of new.reddit&amp;#39;s triple backticks?&lt;/p&gt;\n\n&lt;p&gt;Put
        four spaces before every code line.  (If you&amp;#39;re using new.reddit,
        click the button in the editor that says &amp;quot;Switch to Markdown&amp;quot;
        first.)&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;[space space space space]public
        static void main()&lt;/code&gt;\n&lt;code&gt;[space space space space][more
        spaces for indenting]/* more code here*/&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;turns
        into&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public static void main()\n    /*
        more code here */\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Alternatively, stuff
        your code in &lt;a href=\"/u/topaz2078\"&gt;/u/topaz2078&lt;/a&gt;&amp;#39;s
        &lt;a href=\"https://topaz.github.io/paste/\"&gt;&lt;code&gt;paste&lt;/code&gt;&lt;/a&gt;
        or an external repo instead and link to that instead.&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gejnqy5/",
        "subreddit_type": "public", "locked": false, "name": "t1_gejnqy5", "created":
        1607041089.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gec0f1d", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "backtickbot",
        "can_mod_post": false, "created_utc": 1606880406.0, "send_replies": true,
        "parent_id": "t1_gec0e6f", "score": 1, "author_fullname": "t2_8n9fijwc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Hello, magus517707: code blocks using backticks (\\`\\`\\`) don''t work on
        all versions of Reddit!\n\nSome users see [this](https://stalas.alm.lt/backformat/gec0e6f.png)
        / [this](https://stalas.alm.lt/backformat/gec0e6f.html) instead.\n\nTo fix
        this, indent every line with **4 spaces** instead. It''s a bit annoying, but
        then your code blocks are properly formatted for everyone.\n\nAn easy way
        to do this is to use the [code-block button in the editor](https://stalas.alm.lt/files/new-reddit-codeblock.png).
        If it''s not working, try switching to the fancy-pants editor and back again.\n\n[Comment
        with formatting fixed for old.reddit.com users](https://np.reddit.com/r/backtickbot/comments/k51f9s/httpsnpredditcomradventofcodecommentsk4e4lm2020/)\n\n[FAQ](https://www.reddit.com/r/backtickbot/wiki/index)\n\n^(You
        can opt out by replying with backtickopt6 to this comment.)", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Hello, magus517707: code blocks using backticks
        (```) don&amp;#39;t work on all versions of Reddit!&lt;/p&gt;\n\n&lt;p&gt;Some
        users see &lt;a href=\"https://stalas.alm.lt/backformat/gec0e6f.png\"&gt;this&lt;/a&gt;
        / &lt;a href=\"https://stalas.alm.lt/backformat/gec0e6f.html\"&gt;this&lt;/a&gt;
        instead.&lt;/p&gt;\n\n&lt;p&gt;To fix this, indent every line with &lt;strong&gt;4
        spaces&lt;/strong&gt; instead. It&amp;#39;s a bit annoying, but then your
        code blocks are properly formatted for everyone.&lt;/p&gt;\n\n&lt;p&gt;An
        easy way to do this is to use the &lt;a href=\"https://stalas.alm.lt/files/new-reddit-codeblock.png\"&gt;code-block
        button in the editor&lt;/a&gt;. If it&amp;#39;s not working, try switching
        to the fancy-pants editor and back again.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://np.reddit.com/r/backtickbot/comments/k51f9s/httpsnpredditcomradventofcodecommentsk4e4lm2020/\"&gt;Comment
        with formatting fixed for old.reddit.com users&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://www.reddit.com/r/backtickbot/wiki/index\"&gt;FAQ&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;You
        can opt out by replying with backtickopt6 to this comment.&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gec0f1d/",
        "subreddit_type": "public", "locked": false, "name": "t1_gec0f1d", "created":
        1606880406.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gecd75d", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_gecd75d", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gecd75d/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606888887.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606888887.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gecd7un",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "backtickbot",
        "can_mod_post": false, "created_utc": 1606888902.0, "send_replies": true,
        "parent_id": "t1_gecd75d", "score": 1, "author_fullname": "t2_8n9fijwc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Hello, Macrobian: code blocks using backticks (\\`\\`\\`) don''t work on
        all versions of Reddit!\n\nSome users see [this](https://stalas.alm.lt/backformat/gecd75d.png)
        / [this](https://stalas.alm.lt/backformat/gecd75d.html) instead.\n\nTo fix
        this, indent every line with **4 spaces** instead. It''s a bit annoying, but
        then your code blocks are properly formatted for everyone.\n\nAn easy way
        to do this is to use the [code-block button in the editor](https://stalas.alm.lt/files/new-reddit-codeblock.png).
        If it''s not working, try switching to the fancy-pants editor and back again.\n\n[Comment
        with formatting fixed for old.reddit.com users](https://np.reddit.com/r/backtickbot/comments/k53mkv/httpsnpredditcomradventofcodecommentsk4e4lm2020/)\n\n[FAQ](https://www.reddit.com/r/backtickbot/wiki/index)\n\n^(You
        can opt out by replying with backtickopt6 to this comment.)", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Hello, Macrobian: code blocks using backticks
        (```) don&amp;#39;t work on all versions of Reddit!&lt;/p&gt;\n\n&lt;p&gt;Some
        users see &lt;a href=\"https://stalas.alm.lt/backformat/gecd75d.png\"&gt;this&lt;/a&gt;
        / &lt;a href=\"https://stalas.alm.lt/backformat/gecd75d.html\"&gt;this&lt;/a&gt;
        instead.&lt;/p&gt;\n\n&lt;p&gt;To fix this, indent every line with &lt;strong&gt;4
        spaces&lt;/strong&gt; instead. It&amp;#39;s a bit annoying, but then your
        code blocks are properly formatted for everyone.&lt;/p&gt;\n\n&lt;p&gt;An
        easy way to do this is to use the &lt;a href=\"https://stalas.alm.lt/files/new-reddit-codeblock.png\"&gt;code-block
        button in the editor&lt;/a&gt;. If it&amp;#39;s not working, try switching
        to the fancy-pants editor and back again.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://np.reddit.com/r/backtickbot/comments/k53mkv/httpsnpredditcomradventofcodecommentsk4e4lm2020/\"&gt;Comment
        with formatting fixed for old.reddit.com users&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://www.reddit.com/r/backtickbot/wiki/index\"&gt;FAQ&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;You
        can opt out by replying with backtickopt6 to this comment.&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gecd7un/",
        "subreddit_type": "public", "locked": false, "name": "t1_gecd7un", "created":
        1606888902.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1607170569.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ged4e5g", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "welluke",
        "can_mod_post": false, "created_utc": 1606914628.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_6p8lryqj", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My solution in SQL (MySQL):\n\nhttps://github.com/lukaswelsch/aoc-2020/blob/main/day1/day1.sql",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My solution in SQL (MySQL):&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/lukaswelsch/aoc-2020/blob/main/day1/day1.sql\"&gt;https://github.com/lukaswelsch/aoc-2020/blob/main/day1/day1.sql&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ged4e5g/",
        "subreddit_type": "public", "locked": false, "name": "t1_ged4e5g", "created":
        1606914628.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gef6r3b",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606946955.0, "send_replies": true,
        "parent_id": "t1_ged4e5g", "score": 1, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "This code shows up as crossed-out on old.reddit.  Could you please edit it
        using old.reddit''s four-spaces formatting instead of whatever new.reddit  is
        doing to mangle it?  Note that if you''re using the visual editor, you may
        have to \"Switch to Markdown\" to get Reddit to understand the formatting
        properly.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": true, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This
        code shows up as crossed-out on old.reddit.  Could you please edit it using
        old.reddit&amp;#39;s four-spaces formatting instead of whatever new.reddit  is
        doing to mangle it?  Note that if you&amp;#39;re using the visual editor,
        you may have to &amp;quot;Switch to Markdown&amp;quot; to get Reddit to understand
        the formatting properly.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gef6r3b/",
        "subreddit_type": "public", "locked": false, "name": "t1_gef6r3b", "created":
        1606946955.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ged4hhm", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Jv11235813",
        "can_mod_post": false, "created_utc": 1606914695.0, "send_replies": true,
        "parent_id": "t3_k4e4lm", "score": 1, "author_fullname": "t2_7uhs6w7j", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "This is waaaaay easier than everyone thinks and it doesn''t require any programming
        or code to figure it out! I used Excel and solved in less than 5 min.", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;This is waaaaay easier than everyone thinks
        and it doesn&amp;#39;t require any programming or code to figure it out! I
        used Excel and solved in less than 5 min.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ged4hhm/", "subreddit_type":
        "public", "locked": false, "name": "t1_ged4hhm", "created": 1606914695.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_k4e4lm", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "gef6li3", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "daggerdragon", "can_mod_post": false,
        "created_utc": 1606946884.0, "send_replies": true, "parent_id": "t1_ged4hhm",
        "score": 2, "author_fullname": "t2_60niu", "report_reasons": null, "approved_by":
        null, "all_awardings": [], "collapsed": false, "body": "&gt; # Top-level posts
        in Solution Megathreads are for *code solutions* only.\n\nThis is a top-level
        post, so please edit your post and share your code/repo/solution.  Even a
        screenshot of the Excel formulas used or a bulleted write-up on what data
        goes in what cell will do.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": true, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;h1&gt;Top-level
        posts in Solution Megathreads are for &lt;em&gt;code solutions&lt;/em&gt;
        only.&lt;/h1&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This is a top-level post,
        so please edit your post and share your code/repo/solution.  Even a screenshot
        of the Excel formulas used or a bulleted write-up on what data goes in what
        cell will do.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gef6li3/",
        "subreddit_type": "public", "locked": false, "name": "t1_gef6li3", "created":
        1606946884.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gepu69k", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "RedBorger",
        "can_mod_post": false, "created_utc": 1607190812.0, "send_replies": true,
        "parent_id": "t1_ged4hhm", "score": 2, "author_fullname": "t2_zr3it", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "That''s normal, it''s day 1. It is meant to be easy.\n\nAnd there''s actually
        a guy that tries to solve all the calendar using only Excel spreadsheets.",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s normal,
        it&amp;#39;s day 1. It is meant to be easy.&lt;/p&gt;\n\n&lt;p&gt;And there&amp;#39;s
        actually a guy that tries to solve all the calendar using only Excel spreadsheets.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gepu69k/",
        "subreddit_type": "public", "locked": false, "name": "t1_gepu69k", "created":
        1607190812.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ged616q", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_k4e4lm", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_ged616q", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ged616q/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606915772.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606915772.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 0, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ged61wm",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "backtickbot",
        "can_mod_post": false, "created_utc": 1606915785.0, "send_replies": true,
        "parent_id": "t1_ged616q", "score": 0, "author_fullname": "t2_8n9fijwc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Hello, UbiquitinatedKarma: code blocks using backticks (\\`\\`\\`) don''t
        work on all versions of Reddit!\n\nSome users see [this](https://stalas.alm.lt/backformat/ged616q.png)
        / [this](https://stalas.alm.lt/backformat/ged616q.html) instead.\n\nTo fix
        this, indent every line with **4 spaces** instead. It''s a bit annoying, but
        then your code blocks are properly formatted for everyone.\n\nAn easy way
        to do this is to use the [code-block button in the editor](https://stalas.alm.lt/files/new-reddit-codeblock.png).
        If it''s not working, try switching to the fancy-pants editor and back again.\n\n[Comment
        with formatting fixed for old.reddit.com users](https://np.reddit.com/r/backtickbot/comments/k597yp/httpsnpredditcomradventofcodecommentsk4e4lm2020/)\n\n[FAQ](https://www.reddit.com/r/backtickbot/wiki/index)\n\n^(You
        can opt out by replying with backtickopt6 to this comment.)", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Hello, UbiquitinatedKarma: code blocks using
        backticks (```) don&amp;#39;t work on all versions of Reddit!&lt;/p&gt;\n\n&lt;p&gt;Some
        users see &lt;a href=\"https://stalas.alm.lt/backformat/ged616q.png\"&gt;this&lt;/a&gt;
        / &lt;a href=\"https://stalas.alm.lt/backformat/ged616q.html\"&gt;this&lt;/a&gt;
        instead.&lt;/p&gt;\n\n&lt;p&gt;To fix this, indent every line with &lt;strong&gt;4
        spaces&lt;/strong&gt; instead. It&amp;#39;s a bit annoying, but then your
        code blocks are properly formatted for everyone.&lt;/p&gt;\n\n&lt;p&gt;An
        easy way to do this is to use the &lt;a href=\"https://stalas.alm.lt/files/new-reddit-codeblock.png\"&gt;code-block
        button in the editor&lt;/a&gt;. If it&amp;#39;s not working, try switching
        to the fancy-pants editor and back again.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://np.reddit.com/r/backtickbot/comments/k597yp/httpsnpredditcomradventofcodecommentsk4e4lm2020/\"&gt;Comment
        with formatting fixed for old.reddit.com users&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://www.reddit.com/r/backtickbot/wiki/index\"&gt;FAQ&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;You
        can opt out by replying with backtickopt6 to this comment.&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ged61wm/",
        "subreddit_type": "public", "locked": false, "name": "t1_ged61wm", "created":
        1606915785.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], true]],
        [0, 12, "attr", "things"], [12, 13, "call", ["t1_geby132"]], [13, 14, "attr",
        "focus"], [14, 15, "call", []], [0, 16, "attr", "things"], [16, 17, "call",
        ["None"]], [17, 18, "attr", "filter"], [18, 19, "call", [".morechildren"]],
        [19, 20, "attr", "remove"], [20, 21, "call", []]], "success": true}'
  recorded_at: Sat, 08 Mar 2025 23:06:39 GMT
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:40 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=WXNiyO1sCIyn2dZXsy; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sat, 08 Mar 2025 23:06:40 GMT
- request:
    method: post
    uri: https://oauth.reddit.com/api/morechildren.json
    body:
      encoding: UTF-8
      string: link_id=t3_k4e4lm&children=ge8nz8m
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '1416'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      set-cookie:
      - loid=000000001ksigd1c7i.2.1741475200204.Z0FBQUFBQm56TTJBaUdZcDh5cmJxbEdEMFBCSmtoMWFCWF9GQmxjUXJ1Z0U3bTFLVmhwd3ZRV3EycUVEZW1Dc2RBYUZUVGhwWnlyUXN0SklSX1dJTjVtRzNJR3dnbjZYQVV5X2M1N2c5Zjk2Y2ZnQTJMVzRmdjZ4UGtoYXlRMHlReXV1akViY3JrS0I;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Mon, 08-Mar-2027 23:06:40
        GMT; secure, session_tracker=nhdaencphopipahqqe.0.1741475200217.Z0FBQUFBQm56TTJBVkVTU05PQXBabGdJTWs4U2FudllpY2xLRUZWOHJsWUZ4RkxoY1hFdmROZGRQS3RGcnk1NXZFbi1ZY1BEaXVkWlIxd2V0VW5laVc0Q1k4VE1DWDhLSGtzZmRjdGhVT0tTNlIxeGR2OS0tR0VTQTVHaUxTTWt1OVpwX3NjMUh5VWY;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 01:06:40
        GMT; secure, edgebucket=bGLVrNLX5XZJXscX6O; Domain=reddit.com; Max-Age=63071999;
        Path=/;  secure
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '24'
      x-ratelimit-remaining:
      - '76.0'
      x-ratelimit-reset:
      - '199'
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:40 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"jquery": [[0, 1, "call", ["body"]], [1, 2, "attr", "find"], [2, 3,
        "call", [".status"]], [3, 4, "attr", "hide"], [4, 5, "call", []], [5, 6, "attr",
        "html"], [6, 7, "call", [""]], [7, 8, "attr", "end"], [8, 9, "call", []],
        [0, 10, "attr", "insert_things"], [10, 11, "call", [[{"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_k4e4lm", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ge8nz8m", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_ge8dg41", "score":
        3, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Nice! This is very close to my solution. I love ruby''s
        combinatorics functions.\n\n(You don''t need that ampersand in #reduce)",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_ge8nz8m",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nice!
        This is very close to my solution. I love ruby&amp;#39;s combinatorics functions.&lt;/p&gt;\n\n&lt;p&gt;(You
        don&amp;#39;t need that ampersand in #reduce)&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8nz8m/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1606809067.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1606809067.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8rjq5",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Sharparam",
        "can_mod_post": false, "created_utc": 1606812598.0, "send_replies": true,
        "parent_id": "t1_ge8nz8m", "score": 2, "author_fullname": "t2_ayk53", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Yeah the built-in combinatorics stuff is a lifesaver, I miss a lot of these
        built-in things when working in other languages.\n\nDidn''t know that reduce
        could take a plain symbol for the method, thanks for pointing it out!", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Yeah the built-in combinatorics stuff is
        a lifesaver, I miss a lot of these built-in things when working in other languages.&lt;/p&gt;\n\n&lt;p&gt;Didn&amp;#39;t
        know that reduce could take a plain symbol for the method, thanks for pointing
        it out!&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8rjq5/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8rjq5", "created":
        1606812598.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], true]],
        [0, 12, "attr", "things"], [12, 13, "call", ["t1_ge8nz8m"]], [13, 14, "attr",
        "focus"], [14, 15, "call", []], [0, 16, "attr", "things"], [16, 17, "call",
        ["None"]], [17, 18, "attr", "filter"], [18, 19, "call", [".morechildren"]],
        [19, 20, "attr", "remove"], [20, 21, "call", []]], "success": true}'
  recorded_at: Sat, 08 Mar 2025 23:06:40 GMT
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:40 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=AMhyAhgDhc8tx8VxAb; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sat, 08 Mar 2025 23:06:40 GMT
- request:
    method: post
    uri: https://oauth.reddit.com/api/morechildren.json
    body:
      encoding: UTF-8
      string: link_id=t3_k4e4lm&children=geb3aye
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '1337'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      set-cookie:
      - loid=000000001ksigd4d7e.2.1741475200632.Z0FBQUFBQm56TTJBaDZBdHZQOVVkb1k5TVZ5SWZhUElGaXRqS29OMkxHZXJPMW5pZnhyRzF2X2ZUUGY4eGw2Q2Jsb3hJcFQtRGw4aUs4WVJmVnhZazU1YkZweTNaOC12aDhCaXByUVpOSWJ5M0x6SnJ3dXlpUGJ1N0VrLTU2TW9vZVNHWEhpWDJYczY;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Mon, 08-Mar-2027 23:06:40
        GMT; secure, session_tracker=ljqeknpggeidklqmif.0.1741475200644.Z0FBQUFBQm56TTJBT1lyX3dZVlUzeE5KR2xsYm5hWEJ0bjZQcVdPVnJoRTZJSWVoTHNLa3JobFhIbkdvZTYwdXA1ODNqc2RYLUUwbGNzOHhjUEpEeE0yRVhYMldhSkVyT01pZzNVcWstSTRjWWdfdWprV0QwY3JQU2dCZlMyaFJudHRHRmdocFNNX1M;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 01:06:40
        GMT; secure, edgebucket=ziSKWuuE7aFfI1TGxu; Domain=reddit.com; Max-Age=63071999;
        Path=/;  secure
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '25'
      x-ratelimit-remaining:
      - '75.0'
      x-ratelimit-reset:
      - '199'
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:40 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"jquery": [[0, 1, "call", ["body"]], [1, 2, "attr", "find"], [2, 3,
        "call", [".status"]], [3, 4, "attr", "hide"], [4, 5, "call", []], [5, 6, "attr",
        "html"], [6, 7, "call", [""]], [7, 8, "attr", "end"], [8, 9, "call", []],
        [0, 10, "attr", "insert_things"], [10, 11, "call", [[{"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "geb3aye",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1606862245.0, "send_replies": true,
        "parent_id": "t1_geax0kn", "score": 1, "author_fullname": "t2_60niu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "This code is really hard to read on old.reddit.  Could you please edit it
        using old.reddit''s four-spaces formatting instead of new.reddit''s triple
        backticks?  Note that if you''re using the visual editor, you may have to
        \"Switch to Markdown\" to get Reddit to understand the formatting properly.",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        true, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This code is really hard
        to read on old.reddit.  Could you please edit it using old.reddit&amp;#39;s
        four-spaces formatting instead of new.reddit&amp;#39;s triple backticks?  Note
        that if you&amp;#39;re using the visual editor, you may have to &amp;quot;Switch
        to Markdown&amp;quot; to get Reddit to understand the formatting properly.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/geb3aye/",
        "subreddit_type": "public", "locked": false, "name": "t1_geb3aye", "created":
        1606862245.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": "moderator"}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "gecr79f", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Piggelinmannen",
        "can_mod_post": false, "created_utc": 1606901802.0, "send_replies": true,
        "parent_id": "t1_geb3aye", "score": 1, "author_fullname": "t2_jqfnq", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I think I got it? Reddit did it''s best to ruin the formatting once again.",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think I got it? Reddit
        did it&amp;#39;s best to ruin the formatting once again.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gecr79f/",
        "subreddit_type": "public", "locked": false, "name": "t1_gecr79f", "created":
        1606901802.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], true]],
        [0, 12, "attr", "things"], [12, 13, "call", ["t1_geb3aye"]], [13, 14, "attr",
        "focus"], [14, 15, "call", []], [0, 16, "attr", "things"], [16, 17, "call",
        ["None"]], [17, 18, "attr", "filter"], [18, 19, "call", [".morechildren"]],
        [19, 20, "attr", "remove"], [20, 21, "call", []]], "success": true}'
  recorded_at: Sat, 08 Mar 2025 23:06:40 GMT
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:40 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=P1yj24YgRnZ2VU0bp6; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sat, 08 Mar 2025 23:06:40 GMT
- request:
    method: post
    uri: https://oauth.reddit.com/api/morechildren.json
    body:
      encoding: UTF-8
      string: link_id=t3_k4e4lm&children=ge908p9
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '1085'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      set-cookie:
      - loid=000000001ksigd7z2u.2.1741475201058.Z0FBQUFBQm56TTJCRVZRQmo0Y3MtaXljWWNFNkRJSU1GeVhjQTFsdXA3LXBTU21YdThCaThKTUtvam9iT3JXUGtnRFlTamVOTE03UTNpVlZlSVdVQzRnaEg2cEREcmFHMEw5a0JvUGktLTlkVjJ6TU9IbVZKeXp4Tkg2WjRjbUNxS1FGOGR3TWdSRGw;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Mon, 08-Mar-2027 23:06:41
        GMT; secure, session_tracker=aljdggmbomhpbnqkpb.0.1741475201068.Z0FBQUFBQm56TTJCdmdlekM5NFZFVVE0THhjN2VJSEQ3dS1FWmhHenlCTkxZQW0yMVVxdzNETkhiVmdGbFBidFE3X3FXUzJCVUJKVnZSVXB6azN5TXBGeE9SU3VTeExIM2hBZmZmUTBDRkhlWTExUzZybHNCZUQya2hHT1E3VWtiUWwwV3Q0N2M3bGg;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 01:06:41
        GMT; secure, edgebucket=2gksHkMd8UGeB8FJuf; Domain=reddit.com; Max-Age=63071999;
        Path=/;  secure
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '26'
      x-ratelimit-remaining:
      - '74.0'
      x-ratelimit-reset:
      - '198'
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:41 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"jquery": [[0, 1, "call", ["body"]], [1, 2, "attr", "find"], [2, 3,
        "call", [".status"]], [3, 4, "attr", "hide"], [4, 5, "call", []], [5, 6, "attr",
        "html"], [6, 7, "call", [""]], [7, 8, "attr", "end"], [8, 9, "call", []],
        [0, 10, "attr", "insert_things"], [10, 11, "call", [[{"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge908p9",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "jtgorn",
        "can_mod_post": false, "created_utc": 1606822009.0, "send_replies": true,
        "parent_id": "t1_ge8rsst", "score": 1, "author_fullname": "t2_2nr7xyfi", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I prefer this syntax\n\n    p\u00a0ARGF.map(&amp;:to\\_i).combination(2).find{|x|\u00a0x.sum==2020}.reduce:\\*",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I prefer this syntax&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;p\u00a0ARGF.map(&amp;amp;:to\\_i).combination(2).find{|x|\u00a0x.sum==2020}.reduce:\\*\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge908p9/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge908p9", "created":
        1606822009.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], true]],
        [0, 12, "attr", "things"], [12, 13, "call", ["t1_ge908p9"]], [13, 14, "attr",
        "focus"], [14, 15, "call", []], [0, 16, "attr", "things"], [16, 17, "call",
        ["None"]], [17, 18, "attr", "filter"], [18, 19, "call", [".morechildren"]],
        [19, 20, "attr", "remove"], [20, 21, "call", []]], "success": true}'
  recorded_at: Sat, 08 Mar 2025 23:06:41 GMT
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:41 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=ri5qOzdfFNPilOv9Vw; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sat, 08 Mar 2025 23:06:41 GMT
- request:
    method: post
    uri: https://oauth.reddit.com/api/morechildren.json
    body:
      encoding: UTF-8
      string: link_id=t3_k4e4lm&children=ge8vpls
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '1564'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      set-cookie:
      - loid=000000001ksigdapl1.2.1741475201439.Z0FBQUFBQm56TTJCN3FHQm03bktnT0ZuVTMwVzE0T2REczNqdHRPZHVuTldtMVRNYjVjakIxYWdXWjFhdXBHX2ZqTDNzNzNxak45QzZFWVRMQ1M3cmowRVRfWFpwX280cEI1Wmd4V0NCRTd4ZEplb0M4RHFtUTdBUjJNMmx2ZWxrNmtUdk94bFdMb0c;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Mon, 08-Mar-2027 23:06:41
        GMT; secure, session_tracker=pkkjglmomogjrnbpgh.0.1741475201451.Z0FBQUFBQm56TTJCMld3T2JEeHNkWHNZMHhfOU1uWkVNbjZqOHlzcXlvME8ta0NPTXN0VGo3TVFoY01xampOdzNoZ1U1T29ienpPbTRVQ3pkdWN6MlR5eF9jMHd1YmYzLVlWRDhJZ0FSRUxCYm5sb2JLNjZGS3NCQWloWGFzbVJOYnJPakFOdzRsbFo;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 01:06:41
        GMT; secure, edgebucket=SAZAUWz8y3CSwcELh5; Domain=reddit.com; Max-Age=63071999;
        Path=/;  secure
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '27'
      x-ratelimit-remaining:
      - '73.0'
      x-ratelimit-reset:
      - '198'
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:41 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"jquery": [[0, 1, "call", ["body"]], [1, 2, "attr", "find"], [2, 3,
        "call", [".status"]], [3, 4, "attr", "hide"], [4, 5, "call", []], [5, 6, "attr",
        "html"], [6, 7, "call", [""]], [7, 8, "attr", "end"], [8, 9, "call", []],
        [0, 10, "attr", "insert_things"], [10, 11, "call", [[{"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ge8vpls",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "backtickbot",
        "can_mod_post": false, "created_utc": 1606817108.0, "send_replies": true,
        "parent_id": "t1_ge8vp59", "score": 1, "author_fullname": "t2_8n9fijwc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Hello, odlp: code blocks using backticks (\\`\\`\\`) don''t work on all versions
        of Reddit!\n\nSome users see [this](https://stalas.alm.lt/backformat/ge8vp59.png)
        / [this](https://stalas.alm.lt/backformat/ge8vp59.html) instead.\n\nTo fix
        this, indent every line with **4 spaces** instead. It''s a bit annoying, but
        then your code blocks are properly formatted for everyone.\n\nAn easy way
        to do this is to use the [code-block button in the editor](https://stalas.alm.lt/files/new-reddit-codeblock.png).
        If it''s not working, try switching to the fancy-pants editor and back again.\n\n[Comment
        with formatting fixed for old.reddit.com users](https://np.reddit.com/r/backtickbot/comments/k4i5r9/httpsnpredditcomradventofcodecommentsk4e4lm2020/)\n\n[FAQ](https://www.reddit.com/r/backtickbot/wiki/index)\n\n^(You
        can opt out by replying with backtickopt6 to this comment.)", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Hello, odlp: code blocks using backticks
        (```) don&amp;#39;t work on all versions of Reddit!&lt;/p&gt;\n\n&lt;p&gt;Some
        users see &lt;a href=\"https://stalas.alm.lt/backformat/ge8vp59.png\"&gt;this&lt;/a&gt;
        / &lt;a href=\"https://stalas.alm.lt/backformat/ge8vp59.html\"&gt;this&lt;/a&gt;
        instead.&lt;/p&gt;\n\n&lt;p&gt;To fix this, indent every line with &lt;strong&gt;4
        spaces&lt;/strong&gt; instead. It&amp;#39;s a bit annoying, but then your
        code blocks are properly formatted for everyone.&lt;/p&gt;\n\n&lt;p&gt;An
        easy way to do this is to use the &lt;a href=\"https://stalas.alm.lt/files/new-reddit-codeblock.png\"&gt;code-block
        button in the editor&lt;/a&gt;. If it&amp;#39;s not working, try switching
        to the fancy-pants editor and back again.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://np.reddit.com/r/backtickbot/comments/k4i5r9/httpsnpredditcomradventofcodecommentsk4e4lm2020/\"&gt;Comment
        with formatting fixed for old.reddit.com users&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://www.reddit.com/r/backtickbot/wiki/index\"&gt;FAQ&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;You
        can opt out by replying with backtickopt6 to this comment.&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/ge8vpls/",
        "subreddit_type": "public", "locked": false, "name": "t1_ge8vpls", "created":
        1606817108.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], true]],
        [0, 12, "attr", "things"], [12, 13, "call", ["t1_ge8vpls"]], [13, 14, "attr",
        "focus"], [14, 15, "call", []], [0, 16, "attr", "things"], [16, 17, "call",
        ["None"]], [17, 18, "attr", "filter"], [18, 19, "call", [".morechildren"]],
        [19, 20, "attr", "remove"], [20, 21, "call", []]], "success": true}'
  recorded_at: Sat, 08 Mar 2025 23:06:41 GMT
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:41 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=KLVhOePgTKnl5PkpVw; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sat, 08 Mar 2025 23:06:41 GMT
- request:
    method: post
    uri: https://oauth.reddit.com/api/morechildren.json
    body:
      encoding: UTF-8
      string: link_id=t3_k4e4lm&children=gebmqvp
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '1572'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      set-cookie:
      - loid=000000001ksigddu2o.2.1741475201829.Z0FBQUFBQm56TTJCS3FoR0JZbFcwTDB3c1N1bkRrOXFsN1gtejJUOXhkTHZpRG84OGxvTzhaZWVEamVYc2F6NGtuWWJVeFRjSXpSTFBkdjdzc251bFpWVjByVzZ3Sm9WTEM4NGdJYjJEc1NWblpUMGQwWFhDbGpzYU9vMXJqallNT3dvbUtXZUdhUm4;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Mon, 08-Mar-2027 23:06:41
        GMT; secure, session_tracker=eefaegphldpnljlrdn.0.1741475201841.Z0FBQUFBQm56TTJCVThJbFZ5ZFFQMVI4YW5XOC1tQVJrMXVPeXhwaXRPcG1IVVRxOTVIenBWYnk5Zm1CVVc1bEJmTzVFX3JYNi1oOFp4d1NjX3lwQTlJZ2FBYy1oTkZYR1hpZW5vVUVHdmFick5SQWczdFBxbEFQSWoxUU85VVBLVXM3UXNWWUkxMjA;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 01:06:41
        GMT; secure, edgebucket=dCoAX6D8x30VvcEte3; Domain=reddit.com; Max-Age=63071999;
        Path=/;  secure
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '28'
      x-ratelimit-remaining:
      - '72.0'
      x-ratelimit-reset:
      - '198'
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:06:41 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"jquery": [[0, 1, "call", ["body"]], [1, 2, "attr", "find"], [2, 3,
        "call", [".status"]], [3, 4, "attr", "hide"], [4, 5, "call", []], [5, 6, "attr",
        "html"], [6, 7, "call", [""]], [7, 8, "attr", "end"], [8, 9, "call", []],
        [0, 10, "attr", "insert_things"], [10, 11, "call", [[{"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "gebmqvp",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "backtickbot",
        "can_mod_post": false, "created_utc": 1606872758.0, "send_replies": true,
        "parent_id": "t1_gebmpyg", "score": 1, "author_fullname": "t2_8n9fijwc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Hello, Mermoose: code blocks using backticks (\\`\\`\\`) don''t work on all
        versions of Reddit!\n\nSome users see [this](https://stalas.alm.lt/backformat/gebmpyg.png)
        / [this](https://stalas.alm.lt/backformat/gebmpyg.html) instead.\n\nTo fix
        this, indent every line with **4 spaces** instead. It''s a bit annoying, but
        then your code blocks are properly formatted for everyone.\n\nAn easy way
        to do this is to use the [code-block button in the editor](https://stalas.alm.lt/files/new-reddit-codeblock.png).
        If it''s not working, try switching to the fancy-pants editor and back again.\n\n[Comment
        with formatting fixed for old.reddit.com users](https://np.reddit.com/r/backtickbot/comments/k4z6b6/httpsnpredditcomradventofcodecommentsk4e4lm2020/)\n\n[FAQ](https://www.reddit.com/r/backtickbot/wiki/index)\n\n^(You
        can opt out by replying with backtickopt6 to this comment.)", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Hello, Mermoose: code blocks using backticks
        (```) don&amp;#39;t work on all versions of Reddit!&lt;/p&gt;\n\n&lt;p&gt;Some
        users see &lt;a href=\"https://stalas.alm.lt/backformat/gebmpyg.png\"&gt;this&lt;/a&gt;
        / &lt;a href=\"https://stalas.alm.lt/backformat/gebmpyg.html\"&gt;this&lt;/a&gt;
        instead.&lt;/p&gt;\n\n&lt;p&gt;To fix this, indent every line with &lt;strong&gt;4
        spaces&lt;/strong&gt; instead. It&amp;#39;s a bit annoying, but then your
        code blocks are properly formatted for everyone.&lt;/p&gt;\n\n&lt;p&gt;An
        easy way to do this is to use the &lt;a href=\"https://stalas.alm.lt/files/new-reddit-codeblock.png\"&gt;code-block
        button in the editor&lt;/a&gt;. If it&amp;#39;s not working, try switching
        to the fancy-pants editor and back again.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://np.reddit.com/r/backtickbot/comments/k4z6b6/httpsnpredditcomradventofcodecommentsk4e4lm2020/\"&gt;Comment
        with formatting fixed for old.reddit.com users&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://www.reddit.com/r/backtickbot/wiki/index\"&gt;FAQ&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;sup&gt;You
        can opt out by replying with backtickopt6 to this comment.&lt;/sup&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/k4e4lm/2020_day_1_solutions/gebmqvp/",
        "subreddit_type": "public", "locked": false, "name": "t1_gebmqvp", "created":
        1606872758.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_k4e4lm", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], true]],
        [0, 12, "attr", "things"], [12, 13, "call", ["t1_gebmqvp"]], [13, 14, "attr",
        "focus"], [14, 15, "call", []], [0, 16, "attr", "things"], [16, 17, "call",
        ["None"]], [17, 18, "attr", "filter"], [18, 19, "call", [".morechildren"]],
        [19, 20, "attr", "remove"], [20, 21, "call", []]], "success": true}'
  recorded_at: Sat, 08 Mar 2025 23:06:41 GMT
recorded_with: VCR 6.3.1
