---
http_interactions:
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:21:31 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=i4kJJQyWyRFdxucBiy; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sat, 08 Mar 2025 23:21:32 GMT
- request:
    method: get
    uri: https://oauth.reddit.com/r/adventofcode/comments/a20646/2018_day_1_solutions.json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '91116'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      access-control-allow-origin:
      - "*"
      access-control-expose-headers:
      - X-Moose
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '6'
      x-ratelimit-remaining:
      - '94.0'
      x-ratelimit-reset:
      - '507'
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:21:33 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - loid=000000001ksjdlx668.2.1741476092194.Z0FBQUFBQm56TkQ5VTBHcS1iTnlvRlY4Qk1DajZ6VG1KQ1FGbkd5OXowbDQyZDExdXRYdk9WWE1tNkpDSkp6RDVldXRqZGI5ZWhfeGR0YlQ2X0NFVjdmRFpyN0pyWTZvUHMxVnpGSV9GY2JQb0tBQms5N0JQUnFyMVIxeS1JSXNIcUx3YTVST2dKYjQ;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Mon, 08-Mar-2027 23:21:33
        GMT; secure; SameSite=None; Secure, session_tracker=acjofdiaqnnqcqaflr.0.1741476092208.Z0FBQUFBQm56TkQ5Njc4V05SRi15bi10QmRzbkRWeUc2NWhoQlpzeDFrNnNGZ1k4aHZDWm1TZTY1RE03ZGF5Nzl6RVY3a1hMZHNQeVIwb2FZZnR5RXE4T01BWkoxTEhNczlaY29ZVUhRRXBpMGRCcWZOai1jVHZMTS1oSDVveTBrMnNZYzFEcnhLMW8;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 01:21:33
        GMT; secure; SameSite=None; Secure, csv=2; Max-Age=63072000; Domain=.reddit.com;
        Path=/; Secure; SameSite=None, edgebucket=JHQITLNNIg0iL2yNzk; Domain=reddit.com;
        Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '[{"kind": "Listing", "data": {"after": null, "dist": 1, "modhash":
        "", "geo_filter": "", "children": [{"kind": "t3", "data": {"approved_at_utc":
        null, "subreddit": "adventofcode", "selftext": "Welcome to Advent of Code
        2018!  If you participated in a previous year, welcome back, and if you''re
        new this year, we hope you have fun and learn lots!\n\nWe''re going to follow
        the same general format as previous years'' megathreads:\n\n1. Each day''s
        puzzle will release at exactly midnight EST (UTC -5).\n1. The daily megathread
        for each day will be posted very soon afterwards and immediately locked.\n
        * We know we can''t control people posting solutions elsewhere and trying
        to exploit the leaderboard, but this way we can try to reduce the leaderboard
        gaming from the official subreddit.\n1. The daily megathread will remain locked
        until there are a significant number of people on the leaderboard with gold
        stars.\n * \"A significant number\" is whatever number we decide is appropriate,
        but the leaderboards usually fill up fast, so no worries.\n1. When the thread
        is unlocked, you may post your solution as a comment or, for longer solutions,
        consider linking to your repo (e.g. GitHub/gists/Pastebin/[blag](https://xkcd.com/148/)/whatever).\n\nAbove
        all, remember, AoC is all about having fun and learning more about the wonderful
        world of programming!\n\n***\n\n#--- Day 1: Chronal Calibration ---\n\n***\n\nPost
        your solution as a comment or, for longer solutions, consider linking to your
        repo (e.g. GitHub/gists/Pastebin/blag or whatever).\n\nNote: The Solution
        Megathreads are for *solutions* only. If you have questions, please post your
        own thread and make sure to flair it with `Help`.\n\n***\n\n### [Advent of
        Code: The Party Game!](/r/adventofcode/w/aoctpg)\n\nThis year we shall be
        doing a [Mad Libs](https://en.wikipedia.org/wiki/Mad_Libs)-style community
        activity that is ~~a complete clone of~~ loosely inspired by [Apples to Apples](https://en.wikipedia.org/wiki/Apples_to_Apples)
        and [Cards Against Humanity](https://en.wikipedia.org/wiki/Cards_Against_Humanity).  For
        each day''s megathread, we will post a prompt card with one or more fill-in-the-blanks
        for you to, well, fill in with your best quip(s).  Who knows; if you submit
        a truly awesome card combo, you might just earn yourself some silver-plated
        awesome points!\n\nA few guidelines for your submissions:\n\n+ You do not
        need to submit card(s) along with your solution; however, you *must* post
        a solution if you want to submit a card\n+ You don''t have to submit an image
        of the card - text is fine\n+ All sorts of folks play AoC every year, so let''s
        keep things PG\n + If you absolutely must revert to your inner teenager, make
        sure to clearly identify your submission like **[NSFW]**`(image)[url.com]`
        or with spoiler tags like so: &gt;!NSFW WORDS OMG!!&lt;\n + The markdown is
        `&gt;!NSFW text goes here!&lt;` with no prefixed or trailing spaces\n + If
        you do not clearly identify your NSFW submission as NSFW, your post will be
        removed until you edit it\n\nAnd now, without further ado:\n\n#### [Card Prompt:
        Day 1](https://i.imgur.com/508tMa5m.jpg)\nTranscript:\n&gt; One does not simply
        ___ during Advent of Code.\n\n***\n\n###~~This thread will be unlocked when
        there are a significant number of people on the leaderboard with gold stars
        for today''s puzzle.~~\n###*edit:* Leaderboard capped, thread unlocked!",
        "user_reports": [], "saved": false, "mod_reason_title": null, "gilded": 0,
        "clicked": false, "title": "-\ud83c\udf84- 2018 Day 1 Solutions -\ud83c\udf84-",
        "link_flair_richtext": [], "subreddit_name_prefixed": "r/adventofcode", "hidden":
        false, "pwls": 6, "link_flair_css_class": "flair-solutionmegathread", "downs":
        0, "top_awarded_type": null, "hide_score": false, "name": "t3_a20646", "quarantine":
        false, "link_flair_text_color": "light", "upvote_ratio": 0.99, "author_flair_background_color":
        null, "subreddit_type": "public", "ups": 94, "total_awards_received": 0, "media_embed":
        {}, "author_flair_template_id": null, "is_original_content": false, "author_fullname":
        "t2_60niu", "secure_media": null, "is_reddit_media_domain": false, "is_meta":
        false, "category": null, "secure_media_embed": {}, "link_flair_text": "SOLUTION
        MEGATHREAD", "can_mod_post": false, "score": 94, "approved_by": null, "is_created_from_ads_ui":
        false, "author_premium": false, "thumbnail": "", "edited": 1543641621.0, "author_flair_css_class":
        null, "author_flair_richtext": [], "gildings": {}, "content_categories": null,
        "is_self": true, "mod_note": null, "created": 1543640679.0, "link_flair_type":
        "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type":
        "text", "domain": "self.adventofcode", "allow_live_comments": true, "selftext_html":
        "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Welcome to Advent of
        Code 2018!  If you participated in a previous year, welcome back, and if you&amp;#39;re
        new this year, we hope you have fun and learn lots!&lt;/p&gt;\n\n&lt;p&gt;We&amp;#39;re
        going to follow the same general format as previous years&amp;#39; megathreads:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Each
        day&amp;#39;s puzzle will release at exactly midnight EST (UTC -5).&lt;/li&gt;\n&lt;li&gt;The
        daily megathread for each day will be posted very soon afterwards and immediately
        locked.\n\n&lt;ul&gt;\n&lt;li&gt;We know we can&amp;#39;t control people posting
        solutions elsewhere and trying to exploit the leaderboard, but this way we
        can try to reduce the leaderboard gaming from the official subreddit.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;The
        daily megathread will remain locked until there are a significant number of
        people on the leaderboard with gold stars.\n\n&lt;ul&gt;\n&lt;li&gt;&amp;quot;A
        significant number&amp;quot; is whatever number we decide is appropriate,
        but the leaderboards usually fill up fast, so no worries.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;When
        the thread is unlocked, you may post your solution as a comment or, for longer
        solutions, consider linking to your repo (e.g. GitHub/gists/Pastebin/&lt;a
        href=\"https://xkcd.com/148/\"&gt;blag&lt;/a&gt;/whatever).&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Above
        all, remember, AoC is all about having fun and learning more about the wonderful
        world of programming!&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h1&gt;--- Day 1: Chronal
        Calibration ---&lt;/h1&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;Post your solution as
        a comment or, for longer solutions, consider linking to your repo (e.g. GitHub/gists/Pastebin/blag
        or whatever).&lt;/p&gt;\n\n&lt;p&gt;Note: The Solution Megathreads are for
        &lt;em&gt;solutions&lt;/em&gt; only. If you have questions, please post your
        own thread and make sure to flair it with &lt;code&gt;Help&lt;/code&gt;.&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h3&gt;&lt;a
        href=\"/r/adventofcode/w/aoctpg\"&gt;Advent of Code: The Party Game!&lt;/a&gt;&lt;/h3&gt;\n\n&lt;p&gt;This
        year we shall be doing a &lt;a href=\"https://en.wikipedia.org/wiki/Mad_Libs\"&gt;Mad
        Libs&lt;/a&gt;-style community activity that is &lt;del&gt;a complete clone
        of&lt;/del&gt; loosely inspired by &lt;a href=\"https://en.wikipedia.org/wiki/Apples_to_Apples\"&gt;Apples
        to Apples&lt;/a&gt; and &lt;a href=\"https://en.wikipedia.org/wiki/Cards_Against_Humanity\"&gt;Cards
        Against Humanity&lt;/a&gt;.  For each day&amp;#39;s megathread, we will post
        a prompt card with one or more fill-in-the-blanks for you to, well, fill in
        with your best quip(s).  Who knows; if you submit a truly awesome card combo,
        you might just earn yourself some silver-plated awesome points!&lt;/p&gt;\n\n&lt;p&gt;A
        few guidelines for your submissions:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;You
        do not need to submit card(s) along with your solution; however, you &lt;em&gt;must&lt;/em&gt;
        post a solution if you want to submit a card&lt;/li&gt;\n&lt;li&gt;You don&amp;#39;t
        have to submit an image of the card - text is fine&lt;/li&gt;\n&lt;li&gt;All
        sorts of folks play AoC every year, so let&amp;#39;s keep things PG\n\n&lt;ul&gt;\n&lt;li&gt;If
        you absolutely must revert to your inner teenager, make sure to clearly identify
        your submission like &lt;strong&gt;[NSFW]&lt;/strong&gt;&lt;code&gt;(image)[url.com]&lt;/code&gt;
        or with spoiler tags like so: &lt;span class=\"md-spoiler-text\"&gt;NSFW WORDS
        OMG!&lt;/span&gt;&lt;/li&gt;\n&lt;li&gt;The markdown is &lt;code&gt;&amp;gt;!NSFW
        text goes here!&amp;lt;&lt;/code&gt; with no prefixed or trailing spaces&lt;/li&gt;\n&lt;li&gt;If
        you do not clearly identify your NSFW submission as NSFW, your post will be
        removed until you edit it&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;And
        now, without further ado:&lt;/p&gt;\n\n&lt;h4&gt;&lt;a href=\"https://i.imgur.com/508tMa5m.jpg\"&gt;Card
        Prompt: Day 1&lt;/a&gt;&lt;/h4&gt;\n\n&lt;p&gt;Transcript:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;One
        does not simply ___ during Advent of Code.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;hr/&gt;\n\n&lt;h3&gt;&lt;del&gt;This
        thread will be unlocked when there are a significant number of people on the
        leaderboard with gold stars for today&amp;#39;s puzzle.&lt;/del&gt;&lt;/h3&gt;\n\n&lt;h3&gt;&lt;em&gt;edit:&lt;/em&gt;
        Leaderboard capped, thread unlocked!&lt;/h3&gt;\n&lt;/div&gt;&lt;!-- SC_ON
        --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count":
        null, "archived": true, "no_follow": false, "is_crosspostable": false, "pinned":
        false, "over_18": false, "all_awardings": [], "awarders": [], "media_only":
        false, "link_flair_template_id": "caf5e484-9c70-11e5-aa5d-0e1abaa211ff", "can_gild":
        false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags":
        [], "visited": false, "removed_by": null, "num_reports": null, "distinguished":
        "moderator", "subreddit_id": "t5_3b3wa", "author_is_blocked": false, "mod_reason_by":
        null, "removal_reason": null, "link_flair_background_color": "#000000", "id":
        "a20646", "is_robot_indexable": true, "num_duplicates": 0, "report_reasons":
        null, "author": "daggerdragon", "discussion_type": null, "num_comments": 618,
        "send_replies": false, "media": null, "contest_mode": false, "author_patreon_flair":
        false, "author_flair_text_color": null, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/",
        "stickied": false, "url": "https://www.reddit.com/r/adventofcode/comments/a20646/2018_day_1_solutions/",
        "subreddit_subscribers": 131311, "created_utc": 1543640679.0, "num_crossposts":
        0, "mod_reports": [], "is_video": false}}], "before": null}}, {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "more",
        "data": {"count": 16, "name": "t1_eauqwr9", "id": "eauqwr9", "parent_id":
        "t1_eauqdhz", "depth": 2, "children": ["eauqwr9"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "eauqdhz", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        false, "author": "seaishriver", "can_mod_post": false, "created_utc": 1543672387.0,
        "send_replies": true, "parent_id": "t1_eaukxu5", "score": 6, "author_fullname":
        "t2_jxszb", "removal_reason": null, "approved_by": null, "mod_note": null,
        "all_awardings": [], "body": "So I was also doing this and I''m pretty sure
        there''s a way to do this in O(n) time. I made a solution that does run in
        O(n) time [(gist)](https://gist.github.com/drewtato/f47c8f39f6f9a5db594e2c81a0dd1455),
        but I don''t think it''s 100% correct and it probably doesn''t cover the edge
        cases.\n\nAlso, if the shift is 0 and there haven''t been repeats so far,
        the solution is 0.", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eauqdhz", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;So
        I was also doing this and I&amp;#39;m pretty sure there&amp;#39;s a way to
        do this in O(n) time. I made a solution that does run in O(n) time &lt;a href=\"https://gist.github.com/drewtato/f47c8f39f6f9a5db594e2c81a0dd1455\"&gt;(gist)&lt;/a&gt;,
        but I don&amp;#39;t think it&amp;#39;s 100% correct and it probably doesn&amp;#39;t
        cover the edge cases.&lt;/p&gt;\n\n&lt;p&gt;Also, if the shift is 0 and there
        haven&amp;#39;t been repeats so far, the solution is 0.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauqdhz/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543672387.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 6}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eavtd2b", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "ephemient", "can_mod_post": false, "created_utc":
        1543704453.0, "send_replies": true, "parent_id": "t1_eaukxu5", "score": 4,
        "author_fullname": "t2_3y2dr", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "This space intentionally left
        blank.", "edited": 1713952246.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eavtd2b", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This
        space intentionally left blank.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavtd2b/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543704453.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eavxoqw", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "dang3rous", "can_mod_post": false, "created_utc":
        1543707895.0, "send_replies": true, "parent_id": "t1_eaukxu5", "score": 4,
        "author_fullname": "t2_a49ck", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "I ended up doing something
        similar, because the solution using sets for Part 2 was taking too long. I
        reduced the problem to an equation using modular arithmetic. If a frequency
        reoccurs, it means the following is true:\n\n    # Sum is the answer to part
        1\n    # p[i] is the sum of all integers in the array of frequency changes,
        \n    including i. p[i] = sum(p[:i+1])\n    sum*x + p[i] = sum*y + p[j]\n\nUsing
        the above, you can deduce a few things and solve the problem. \nMy complete
        solution is at https://github.com/dang3r/advent-of-code-2018/blob/master/01_chronal_calibration.py",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eavxoqw", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        ended up doing something similar, because the solution using sets for Part
        2 was taking too long. I reduced the problem to an equation using modular
        arithmetic. If a frequency reoccurs, it means the following is true:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#
        Sum is the answer to part 1\n# p[i] is the sum of all integers in the array
        of frequency changes, \nincluding i. p[i] = sum(p[:i+1])\nsum*x + p[i] = sum*y
        + p[j]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Using the above, you can deduce
        a few things and solve the problem. \nMy complete solution is at &lt;a href=\"https://github.com/dang3r/advent-of-code-2018/blob/master/01_chronal_calibration.py\"&gt;https://github.com/dang3r/advent-of-code-2018/blob/master/01_chronal_calibration.py&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavxoqw/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543707895.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}, {"kind": "more",
        "data": {"count": 6, "name": "t1_eawdwrk", "id": "eawdwrk", "parent_id": "t1_eaukxu5",
        "depth": 1, "children": ["eawdwrk", "eb01vyf", "ebf6hgh", "ec18avz"]}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "eaukxu5", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 1, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "VikeStep", "can_mod_post": false, "created_utc":
        1543665881.0, "send_replies": true, "parent_id": "t3_a20646", "score": 88,
        "author_fullname": "t2_bncww", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Note: The explanation is quite long, so if
        you want to see the code go [here](https://gist.github.com/CameronAavik/2cd37a899290da1e8ad43c6d51a28796).\n\nI
        was going through the solutions posted in this thread and noticed that a lot
        of solutions would carry out multiple passes of the frequency changes, and
        would make use of a set to record which frequencies had been seen before.
        For the purposes of the puzzle inputs supplied, this worked fine because the
        range of frequencies was fairly small. However, if the range of frequencies
        is very large, then it performs poorly. To prove that this is the case, try
        running your solution on the following puzzle input:\n\n    +10000000\n    -9999999\n\nWhen
        you do this the frequency will go 0, 10000000, 1, 10000001, 2, 10000002, 3,
        ... and it would only stop at 10000000. This will loop 10000000 times before
        you find your first repetition, the seen set will contain 10000000 items as
        well and so it doesn''t scale well on both time and memory.\n\nThere exists
        an `O(n log n)` solution where n is the number of frequency diffs (in the
        case above, that would be 2).\n\nTo see how this works, let''s look at another
        puzzle input:\n\n    +1\n    +1\n    +10\n    -9\n\nLet''s see how this plays
        out:\n\nITERATION 1: 0, 1, 2, 12,\n\nITERATION 2: 3, 4, 5, 15,\n\nITERATION
        3: 6, 7, 8, 18,\n\nITERATION 4: 9, 10, 11, 21,\n\nITERATION 5: 12\n\nThe thing
        to notice here is that each row we see is offset by 3 from the previous row.
        The reason for this is because 3 is the frequency after running through one
        iteration, so next iteration it will increase by 3 again. It turns out we
        can use this property in our favour. For each value in the first row, we know
        that it will increase by 3 at a time, so I know that I will eventually hit
        12 again because I start at 0 and after 4 iterations that will have increased
        by 12. Similarly I can also be confident that I will eventually hit frequency
        1000 after 333 iterations since we hit a frequency of 1 in the first line
        and 1 + 333 \\* 3 = 1000.\n\nOne other important property to identify is that
        whenever we see our first repetition, the value that gets repeated would have
        been one of the values in the first row. This is because if a `new frequency`
        in iteration n were to repeat something from the second row, this `new frequency`
        would have been `new frequency - shift` in iteration n - 1, which would have
        also appeared in the first row.\n\nSo, now what do we know about the repetition?
        That the repetition is some number in the first row + a multiple of the sum
        after one iteration, and that the result is also in the first row. The first
        repetition occurs when the number of iterations is minimised.\n\nWe can now
        reduce this problem to something simpler: Given a set of frequencies, A, find
        a frequency x inside A such that x = y + shift \\* n where y is some frequency
        in A, shift is the frequency after one iteration and n is minimised. We can
        solve this by grouping the integers in A based on their value [modulo](https://en.wikipedia.org/wiki/Modulo_operation)
        shift. If we take the example from earlier where shift=3, then there will
        be three groups:\n\nmod 3 = 0: 0, 12\n\nmod 3 = 1: 1\n\nmod 3 = 2: 2\n\nThese
        groups are important because they tell us which numbers would overlap eventually
        if we keep adding by shift. 0 and 12 are in the same group because 0 + 4\\*shift
        is 12. To minimise the n value, all we have to do is find two integers that
        are in the same group where their difference is minimal. In this example it
        is easy because there is only one group that contains more than one integer.
        Since shift is positive we choose frequency 12 at the index of 0. If shift
        was negative, we would choose frequency 0 at the index of 12. If we have more
        than two integers inside a group, we need to make sure to sort the group and
        we can loop through the differences in order.\n\nThere are a few extra edge
        cases to consider. One being the scenario in which there are multiple values
        that all have the same distance. In that case we need to choose the value
        of x that appears first inside A, so we need to keep track of the index inside
        A as well. Some languages might not handle the modulo well when shift is negative,
        in that case you can do modulo abs(shift) and it will work the same. Another
        edge case is when the repetition occurs inside iteration 1, so we need to
        check for that explicitly. Another edge case is when shift is 0, if this happens
        then ~~we will never have a solution~~ the solution is 0. Lastly, if all the
        groups only contain 1 number then there is no solution.\n\nSo with all this
        together, we can implement an `O(n log n)` solution to the problem as seen
        [in this gist on GitHub](https://gist.github.com/CameronAavik/2cd37a899290da1e8ad43c6d51a28796):\n\nNow
        if we run this against our evil puzzle input from earlier, it runs almost
        instantly rather than simulating the frequencies for 10000000 loops.", "edited":
        1543698112.0, "top_awarded_type": null, "author_flair_css_class": null, "name":
        "t1_eaukxu5", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Note:
        The explanation is quite long, so if you want to see the code go &lt;a href=\"https://gist.github.com/CameronAavik/2cd37a899290da1e8ad43c6d51a28796\"&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;I
        was going through the solutions posted in this thread and noticed that a lot
        of solutions would carry out multiple passes of the frequency changes, and
        would make use of a set to record which frequencies had been seen before.
        For the purposes of the puzzle inputs supplied, this worked fine because the
        range of frequencies was fairly small. However, if the range of frequencies
        is very large, then it performs poorly. To prove that this is the case, try
        running your solution on the following puzzle input:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;+10000000\n-9999999\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When
        you do this the frequency will go 0, 10000000, 1, 10000001, 2, 10000002, 3,
        ... and it would only stop at 10000000. This will loop 10000000 times before
        you find your first repetition, the seen set will contain 10000000 items as
        well and so it doesn&amp;#39;t scale well on both time and memory.&lt;/p&gt;\n\n&lt;p&gt;There
        exists an &lt;code&gt;O(n log n)&lt;/code&gt; solution where n is the number
        of frequency diffs (in the case above, that would be 2).&lt;/p&gt;\n\n&lt;p&gt;To
        see how this works, let&amp;#39;s look at another puzzle input:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;+1\n+1\n+10\n-9\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Let&amp;#39;s
        see how this plays out:&lt;/p&gt;\n\n&lt;p&gt;ITERATION 1: 0, 1, 2, 12,&lt;/p&gt;\n\n&lt;p&gt;ITERATION
        2: 3, 4, 5, 15,&lt;/p&gt;\n\n&lt;p&gt;ITERATION 3: 6, 7, 8, 18,&lt;/p&gt;\n\n&lt;p&gt;ITERATION
        4: 9, 10, 11, 21,&lt;/p&gt;\n\n&lt;p&gt;ITERATION 5: 12&lt;/p&gt;\n\n&lt;p&gt;The
        thing to notice here is that each row we see is offset by 3 from the previous
        row. The reason for this is because 3 is the frequency after running through
        one iteration, so next iteration it will increase by 3 again. It turns out
        we can use this property in our favour. For each value in the first row, we
        know that it will increase by 3 at a time, so I know that I will eventually
        hit 12 again because I start at 0 and after 4 iterations that will have increased
        by 12. Similarly I can also be confident that I will eventually hit frequency
        1000 after 333 iterations since we hit a frequency of 1 in the first line
        and 1 + 333 * 3 = 1000.&lt;/p&gt;\n\n&lt;p&gt;One other important property
        to identify is that whenever we see our first repetition, the value that gets
        repeated would have been one of the values in the first row. This is because
        if a &lt;code&gt;new frequency&lt;/code&gt; in iteration n were to repeat
        something from the second row, this &lt;code&gt;new frequency&lt;/code&gt;
        would have been &lt;code&gt;new frequency - shift&lt;/code&gt; in iteration
        n - 1, which would have also appeared in the first row.&lt;/p&gt;\n\n&lt;p&gt;So,
        now what do we know about the repetition? That the repetition is some number
        in the first row + a multiple of the sum after one iteration, and that the
        result is also in the first row. The first repetition occurs when the number
        of iterations is minimised.&lt;/p&gt;\n\n&lt;p&gt;We can now reduce this problem
        to something simpler: Given a set of frequencies, A, find a frequency x inside
        A such that x = y + shift * n where y is some frequency in A, shift is the
        frequency after one iteration and n is minimised. We can solve this by grouping
        the integers in A based on their value &lt;a href=\"https://en.wikipedia.org/wiki/Modulo_operation\"&gt;modulo&lt;/a&gt;
        shift. If we take the example from earlier where shift=3, then there will
        be three groups:&lt;/p&gt;\n\n&lt;p&gt;mod 3 = 0: 0, 12&lt;/p&gt;\n\n&lt;p&gt;mod
        3 = 1: 1&lt;/p&gt;\n\n&lt;p&gt;mod 3 = 2: 2&lt;/p&gt;\n\n&lt;p&gt;These groups
        are important because they tell us which numbers would overlap eventually
        if we keep adding by shift. 0 and 12 are in the same group because 0 + 4*shift
        is 12. To minimise the n value, all we have to do is find two integers that
        are in the same group where their difference is minimal. In this example it
        is easy because there is only one group that contains more than one integer.
        Since shift is positive we choose frequency 12 at the index of 0. If shift
        was negative, we would choose frequency 0 at the index of 12. If we have more
        than two integers inside a group, we need to make sure to sort the group and
        we can loop through the differences in order.&lt;/p&gt;\n\n&lt;p&gt;There
        are a few extra edge cases to consider. One being the scenario in which there
        are multiple values that all have the same distance. In that case we need
        to choose the value of x that appears first inside A, so we need to keep track
        of the index inside A as well. Some languages might not handle the modulo
        well when shift is negative, in that case you can do modulo abs(shift) and
        it will work the same. Another edge case is when the repetition occurs inside
        iteration 1, so we need to check for that explicitly. Another edge case is
        when shift is 0, if this happens then &lt;del&gt;we will never have a solution&lt;/del&gt;
        the solution is 0. Lastly, if all the groups only contain 1 number then there
        is no solution.&lt;/p&gt;\n\n&lt;p&gt;So with all this together, we can implement
        an &lt;code&gt;O(n log n)&lt;/code&gt; solution to the problem as seen &lt;a
        href=\"https://gist.github.com/CameronAavik/2cd37a899290da1e8ad43c6d51a28796\"&gt;in
        this gist on GitHub&lt;/a&gt;:&lt;/p&gt;\n\n&lt;p&gt;Now if we run this against
        our evil puzzle input from earlier, it runs almost instantly rather than simulating
        the frequencies for 10000000 loops.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": true, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaukxu5/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543665881.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 88}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eaujws7", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "u794575248",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_eauj2hu", "score":
        6, "author_fullname": "t2_larkuvo", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "Ha, nice catch, thanks!
        I didn''t need it my original solution I used to submit the answer, as I `add`ed
        a frequency as the first thing in an iteration, but in this version it''s
        definitely needed.", "edited": false, "top_awarded_type": null, "downs": 0,
        "author_flair_css_class": null, "name": "t1_eaujws7", "is_submitter": false,
        "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ha, nice catch, thanks! I didn&amp;#39;t
        need it my original solution I used to submit the answer, as I &lt;code&gt;add&lt;/code&gt;ed
        a frequency as the first thing in an iteration, but in this version it&amp;#39;s
        definitely needed.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_a20646", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaujws7/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543664288.0,
        "author_flair_text": null, "treatment_tags": [], "created_utc": 1543664288.0,
        "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0, "depth":
        2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 6}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eauj2hu", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 1, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "zirtec", "can_mod_post": false, "created_utc":
        1543662987.0, "send_replies": true, "parent_id": "t1_eauapmb", "score": 12,
        "author_fullname": "t2_f2pmc", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "That''s an excellent one!
        Your should start with `0` in the set otherwise this code won''t work on the
        example `+1 -1`. So `seen = {0}`", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_eauj2hu", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s an excellent one! Your should
        start with &lt;code&gt;0&lt;/code&gt; in the set otherwise this code won&amp;#39;t
        work on the example &lt;code&gt;+1 -1&lt;/code&gt;. So &lt;code&gt;seen =
        {0}&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_a20646", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauj2hu/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543662987.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 12}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "more", "data": {"count":
        8, "name": "t1_eavfq7j", "id": "eavfq7j", "parent_id": "t1_eauoy5c", "depth":
        2, "children": ["eavfq7j"]}}], "before": null}}, "user_reports": [], "saved":
        false, "id": "eauoy5c", "banned_at_utc": null, "mod_reason_title": null, "gilded":
        0, "archived": true, "collapsed_reason_code": null, "no_follow": false, "author":
        "pythondevgb", "can_mod_post": false, "created_utc": 1543670866.0, "send_replies":
        true, "parent_id": "t1_eauapmb", "score": 3, "author_fullname": "t2_2j9x567g",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "&gt;changes = \\[int(n.strip()) for n in input.split() if n.strip()\\]\n\nYou
        don''t need n.strip(), split already strips the blanks or ''\\\\n''. So you
        can go\n\n`results = sum(int(n) for n in input.split())`", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eauoy5c",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;changes
        = [int(n.strip()) for n in input.split() if n.strip()]&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;You
        don&amp;#39;t need n.strip(), split already strips the blanks or &amp;#39;\\n&amp;#39;.
        So you can go&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;results = sum(int(n) for n
        in input.split())&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_a20646", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauoy5c/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543670866.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaunspi",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "pythondevgb",
        "can_mod_post": false, "created_utc": 1543669561.0, "send_replies": true,
        "parent_id": "t1_eauapmb", "score": 3, "author_fullname": "t2_2j9x567g", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "This part tripped me up a bit at first. That''s clever! \n\n    or seen.add(f)",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eaunspi", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This
        part tripped me up a bit at first. That&amp;#39;s clever! &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;or
        seen.add(f)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_a20646", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaunspi/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543669561.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 3}}, {"kind": "more", "data": {"count": 11, "name": "t1_eauchqj",
        "id": "eauchqj", "parent_id": "t1_eauapmb", "depth": 1, "children": ["eauchqj",
        "eaw3v36", "eauxfdu", "eavy0f2", "eav3371"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "eauapmb", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        false, "author": "u794575248", "can_mod_post": false, "created_utc": 1543648292.0,
        "send_replies": true, "parent_id": "t3_a20646", "score": 52, "author_fullname":
        "t2_larkuvo", "approved_by": null, "mod_note": null, "all_awardings": [],
        "collapsed": false, "body": "**Python 3**\n\n    # Part 1\n    changes = [int(n.strip())
        for n in input.split() if n.strip()]\n    print(sum(changes))\n\n    # Part
        2\n    from itertools import accumulate, cycle\n    seen = set()\n    print(next(f
        for f in accumulate(cycle(changes)) if f in seen or seen.add(f)))\n\nHere
        I use a nice [`itertools.accumulate`](https://docs.python.org/3/library/itertools.html#itertools.accumulate)
        function that first appeared in Python 3.2 and [`itertools.cycle`](https://docs.python.org/3/library/itertools.html#itertools.cycle).\n\nupd.
        As /u/zirtec mentioned, you need to add `0` to the `seen` set for it to work
        on the example `+1 -1`.\n\nupd. /u/pythondevgb says, there''s no need for
        `.strip`s and `sum(int(n) for n in input.split())` is enough.", "edited":
        1543671560.0, "top_awarded_type": null, "author_flair_css_class": null, "name":
        "t1_eauapmb", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python
        3&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# Part 1\nchanges = [int(n.strip())
        for n in input.split() if n.strip()]\nprint(sum(changes))\n\n# Part 2\nfrom
        itertools import accumulate, cycle\nseen = set()\nprint(next(f for f in accumulate(cycle(changes))
        if f in seen or seen.add(f)))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here
        I use a nice &lt;a href=\"https://docs.python.org/3/library/itertools.html#itertools.accumulate\"&gt;&lt;code&gt;itertools.accumulate&lt;/code&gt;&lt;/a&gt;
        function that first appeared in Python 3.2 and &lt;a href=\"https://docs.python.org/3/library/itertools.html#itertools.cycle\"&gt;&lt;code&gt;itertools.cycle&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;upd.
        As &lt;a href=\"/u/zirtec\"&gt;/u/zirtec&lt;/a&gt; mentioned, you need to
        add &lt;code&gt;0&lt;/code&gt; to the &lt;code&gt;seen&lt;/code&gt; set for
        it to work on the example &lt;code&gt;+1 -1&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;upd.
        &lt;a href=\"/u/pythondevgb\"&gt;/u/pythondevgb&lt;/a&gt; says, there&amp;#39;s
        no need for &lt;code&gt;.strip&lt;/code&gt;s and &lt;code&gt;sum(int(n) for
        n in input.split())&lt;/code&gt; is enough.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauapmb/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543648292.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 52}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "more", "data": {"count":
        1, "name": "t1_eaum9dq", "id": "eaum9dq", "parent_id": "t1_eaue1ro", "depth":
        2, "children": ["eaum9dq"]}}], "before": null}}, "user_reports": [], "saved":
        false, "id": "eaue1ro", "banned_at_utc": null, "mod_reason_title": null, "gilded":
        0, "archived": true, "collapsed_reason_code": null, "no_follow": false, "author":
        "Smylers", "can_mod_post": false, "created_utc": 1543654159.0, "send_replies":
        true, "parent_id": "t1_eaucw6k", "score": 11, "author_fullname": "t2_13cudg",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "And **Vim** for part 2:\n\n    :%s/\\v\\+(.*)/\\1\u27e8Ctrl+A\u27e9\u27e8Enter\u27e9\n    :%s/\\v-(.*)/\\1\u27e8Ctrl+X\u27e9\u27e8Enter\u27e9\n    {O0\u27e8Esc\u27e9\n    \u27e8Ctrl+W\u27e9na0\u27e8Esc\u27e9\u27e8Ctrl+W\u27e9p\n    qc\u27e8Enter\u27e9ddGp:1norm\u27e8Ctrl+R\u27e91\u27e8Enter\u27e9\n    kyy\u27e8Ctrl+W\u27e9ppmm:sor
        nu\u27e8Enter\u27e9\n    ''m\u27e8Ctrl+W\u27e9pq\n    qdqqd@c:redr\u27e8Enter\u27e9@dq\n    @d\n\nThis
        works fine on the sample input. It hasn''t finished yet on my real input,
        but it''s going to have to loop over 100k times, creating a buffer with over
        100k lines in it, so it''ll take a while.\n\nThe set-up starts the same as
        in part 1, then adds a second window with just a 0 in it, to track frequencies
        we''ve encountered so far. The `c` macro is a modified version of `a` which
        after deleting a change appends it to the bottom of the changes list, so it''ll
        loop through them forever.\n\nAnd after updating the frequency, it copies
        it to the bottom of the other window. It sets a mark there with `mm`, then
        uses `:sort u` to sort lines uniquely; so when we reach a frequency we''ve
        seen before, two lines will be replaced with one.\n\nFinally `''m` tries to
        jump back to the mark we set on the bottom line. The first 100k or so times
        this works and the loop continues with the next change. But once a duplicate
        has been found, the `:sort` will have made the file one line shorter; the
        mark `m` won''t be valid any more, so the macro terminates.\n\nAt that point
        the current frequency (at the top of the changes list) should be your answer
        for part 2. I think.\n\n**Update**: After 3\u00a0hours 10\u00a0minutes, it
        completed! And it got the answer right \u2014 [this screenshot shows the expected
        error message](https://imgur.com/a/Io7WkZA), with the repeated frequency at
        the top of the bottom window. Moving to the bottom shows [139324 lines in
        the top buffer](https://imgur.com/a/5y9EOrA).\n", "edited": 1543683380.0,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eaue1ro",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;And &lt;strong&gt;Vim&lt;/strong&gt;
        for part 2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;:%s/\\v\\+(.*)/\\1\u27e8Ctrl+A\u27e9\u27e8Enter\u27e9\n:%s/\\v-(.*)/\\1\u27e8Ctrl+X\u27e9\u27e8Enter\u27e9\n{O0\u27e8Esc\u27e9\n\u27e8Ctrl+W\u27e9na0\u27e8Esc\u27e9\u27e8Ctrl+W\u27e9p\nqc\u27e8Enter\u27e9ddGp:1norm\u27e8Ctrl+R\u27e91\u27e8Enter\u27e9\nkyy\u27e8Ctrl+W\u27e9ppmm:sor
        nu\u27e8Enter\u27e9\n&amp;#39;m\u27e8Ctrl+W\u27e9pq\nqdqqd@c:redr\u27e8Enter\u27e9@dq\n@d\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This
        works fine on the sample input. It hasn&amp;#39;t finished yet on my real
        input, but it&amp;#39;s going to have to loop over 100k times, creating a
        buffer with over 100k lines in it, so it&amp;#39;ll take a while.&lt;/p&gt;\n\n&lt;p&gt;The
        set-up starts the same as in part 1, then adds a second window with just a
        0 in it, to track frequencies we&amp;#39;ve encountered so far. The &lt;code&gt;c&lt;/code&gt;
        macro is a modified version of &lt;code&gt;a&lt;/code&gt; which after deleting
        a change appends it to the bottom of the changes list, so it&amp;#39;ll loop
        through them forever.&lt;/p&gt;\n\n&lt;p&gt;And after updating the frequency,
        it copies it to the bottom of the other window. It sets a mark there with
        &lt;code&gt;mm&lt;/code&gt;, then uses &lt;code&gt;:sort u&lt;/code&gt; to
        sort lines uniquely; so when we reach a frequency we&amp;#39;ve seen before,
        two lines will be replaced with one.&lt;/p&gt;\n\n&lt;p&gt;Finally &lt;code&gt;&amp;#39;m&lt;/code&gt;
        tries to jump back to the mark we set on the bottom line. The first 100k or
        so times this works and the loop continues with the next change. But once
        a duplicate has been found, the &lt;code&gt;:sort&lt;/code&gt; will have made
        the file one line shorter; the mark &lt;code&gt;m&lt;/code&gt; won&amp;#39;t
        be valid any more, so the macro terminates.&lt;/p&gt;\n\n&lt;p&gt;At that
        point the current frequency (at the top of the changes list) should be your
        answer for part 2. I think.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;:
        After 3\u00a0hours 10\u00a0minutes, it completed! And it got the answer right
        \u2014 &lt;a href=\"https://imgur.com/a/Io7WkZA\"&gt;this screenshot shows
        the expected error message&lt;/a&gt;, with the repeated frequency at the top
        of the bottom window. Moving to the bottom shows &lt;a href=\"https://imgur.com/a/5y9EOrA\"&gt;139324
        lines in the top buffer&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaue1ro/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543654159.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 11}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eaucw6k", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "Smylers", "can_mod_post": false, "created_utc":
        1543652163.0, "send_replies": true, "parent_id": "t3_a20646", "score": 35,
        "author_fullname": "t2_13cudg", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Anybody else trying the challenges in **Vim**
        this year? Not Vim''s scripting language, but just typing commands into a
        Vim buffer open on your input, transforming it into the answer. Here''s part\u00a01.\n\nFirst,
        transform the prefix `+` and `-` into postfix `Ctrl+A` and `Ctrl+X`, which
        are the Vim keystrokes for adding and subtracting:\n\n    :%s/\\v\\+(.*)/\\1\u27e8Ctrl+A\u27e9\u27e8Enter\u27e9\n    :%s/\\v-(.*)/\\1\u27e8Ctrl+X\u27e9\u27e8Enter\u27e9\n\nPut
        a `0` on the top line, for the current frequency:\n\n    {O0\u27e8Esc\u27e9\n\nRecord
        a keyboard macro that deletes the top `Ctrl+A`/`Ctrl+X` command and invokes
        it on the first line:\n\n    qa\u27e8Enter\u27e9dd:1norm\u27e8Ctrl+R\u27e91\u27e8Enter\u27e9kq\n\nAfter
        deleting a line, register\u00a0`1` will contain something like `7^A^J` (where
        `^A` is the single-character control code representing the keystroke `Ctrl+A`,
        and `^J` is the line-break).\n\nWe can add 7 to the frequency by going to
        line 1 and typing `7\u27e8Ctrl+A\u27e9`. That can be wrapped as an Ex command
        invoking a normal-mode command, like this: `:1norm7\u27e8Ctrl+A\u27e9\u27e8Enter\u27e9`.
        That''d usually be pointless, but being on the Ex `:` command line means we
        can press `\u27e8Ctrl+R\u27e9` to insert the contents of a register.\n\nSo
        `:1norm\u27e8Ctrl+R\u27e91\u27e8Enter\u27e9` says to go to line\u00a01 and
        act like we''d typed whatever keystrokes we deleted into register\u00a0`1`.\n\nRun
        the macro with `@a`. You can repeat it with `@@`, seeing how each change in
        turn is removed and updates the frequency.\n\nWhen you''ve had enough of doing
        that manually, record another macro which runs the first one in a (sort-of-infinite)
        loop:\n\n    qbqqb@a:redr|sl4m\u27e8Enter\u27e9@bq\n\n(That ensures register
        `b` is empty, then records into `b`: run `@a`, `:redraw` the screen, `:sleep`
        for 4\u00a0milliseconds, and run `@b`. At the time of recording, register
        `b` is empty, so `@b` doesn''t do anything yet. But once recording has finished,
        `b` will of course contain these keystrokes, so this `@b` is what makes the
        whole thing repeat.)\n\nInvoke it with `@b`, and watch the changes disappear
        from the top of the list and update the frequency.\n\nEventually the final
        change will have been deleted, and the cursor will remain on the only remaining
        line (the frequency line). That means the `k` at the end of `@a` won''t be
        able to move the cursor upwards. That will make Vim beep, and exit the macro
        \u2014 that''s what stops the loop actually being infinite.\n\nMake it faster
        or slower by adjusting the sleep time of `4` when recording `b`.", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eaucw6k",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Anybody else trying
        the challenges in &lt;strong&gt;Vim&lt;/strong&gt; this year? Not Vim&amp;#39;s
        scripting language, but just typing commands into a Vim buffer open on your
        input, transforming it into the answer. Here&amp;#39;s part\u00a01.&lt;/p&gt;\n\n&lt;p&gt;First,
        transform the prefix &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt;
        into postfix &lt;code&gt;Ctrl+A&lt;/code&gt; and &lt;code&gt;Ctrl+X&lt;/code&gt;,
        which are the Vim keystrokes for adding and subtracting:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;:%s/\\v\\+(.*)/\\1\u27e8Ctrl+A\u27e9\u27e8Enter\u27e9\n:%s/\\v-(.*)/\\1\u27e8Ctrl+X\u27e9\u27e8Enter\u27e9\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Put
        a &lt;code&gt;0&lt;/code&gt; on the top line, for the current frequency:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{O0\u27e8Esc\u27e9\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Record
        a keyboard macro that deletes the top &lt;code&gt;Ctrl+A&lt;/code&gt;/&lt;code&gt;Ctrl+X&lt;/code&gt;
        command and invokes it on the first line:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;qa\u27e8Enter\u27e9dd:1norm\u27e8Ctrl+R\u27e91\u27e8Enter\u27e9kq\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After
        deleting a line, register\u00a0&lt;code&gt;1&lt;/code&gt; will contain something
        like &lt;code&gt;7^A^J&lt;/code&gt; (where &lt;code&gt;^A&lt;/code&gt; is
        the single-character control code representing the keystroke &lt;code&gt;Ctrl+A&lt;/code&gt;,
        and &lt;code&gt;^J&lt;/code&gt; is the line-break).&lt;/p&gt;\n\n&lt;p&gt;We
        can add 7 to the frequency by going to line 1 and typing &lt;code&gt;7\u27e8Ctrl+A\u27e9&lt;/code&gt;.
        That can be wrapped as an Ex command invoking a normal-mode command, like
        this: &lt;code&gt;:1norm7\u27e8Ctrl+A\u27e9\u27e8Enter\u27e9&lt;/code&gt;.
        That&amp;#39;d usually be pointless, but being on the Ex &lt;code&gt;:&lt;/code&gt;
        command line means we can press &lt;code&gt;\u27e8Ctrl+R\u27e9&lt;/code&gt;
        to insert the contents of a register.&lt;/p&gt;\n\n&lt;p&gt;So &lt;code&gt;:1norm\u27e8Ctrl+R\u27e91\u27e8Enter\u27e9&lt;/code&gt;
        says to go to line\u00a01 and act like we&amp;#39;d typed whatever keystrokes
        we deleted into register\u00a0&lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Run
        the macro with &lt;code&gt;@a&lt;/code&gt;. You can repeat it with &lt;code&gt;@@&lt;/code&gt;,
        seeing how each change in turn is removed and updates the frequency.&lt;/p&gt;\n\n&lt;p&gt;When
        you&amp;#39;ve had enough of doing that manually, record another macro which
        runs the first one in a (sort-of-infinite) loop:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;qbqqb@a:redr|sl4m\u27e8Enter\u27e9@bq\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(That
        ensures register &lt;code&gt;b&lt;/code&gt; is empty, then records into &lt;code&gt;b&lt;/code&gt;:
        run &lt;code&gt;@a&lt;/code&gt;, &lt;code&gt;:redraw&lt;/code&gt; the screen,
        &lt;code&gt;:sleep&lt;/code&gt; for 4\u00a0milliseconds, and run &lt;code&gt;@b&lt;/code&gt;.
        At the time of recording, register &lt;code&gt;b&lt;/code&gt; is empty, so
        &lt;code&gt;@b&lt;/code&gt; doesn&amp;#39;t do anything yet. But once recording
        has finished, &lt;code&gt;b&lt;/code&gt; will of course contain these keystrokes,
        so this &lt;code&gt;@b&lt;/code&gt; is what makes the whole thing repeat.)&lt;/p&gt;\n\n&lt;p&gt;Invoke
        it with &lt;code&gt;@b&lt;/code&gt;, and watch the changes disappear from
        the top of the list and update the frequency.&lt;/p&gt;\n\n&lt;p&gt;Eventually
        the final change will have been deleted, and the cursor will remain on the
        only remaining line (the frequency line). That means the &lt;code&gt;k&lt;/code&gt;
        at the end of &lt;code&gt;@a&lt;/code&gt; won&amp;#39;t be able to move the
        cursor upwards. That will make Vim beep, and exit the macro \u2014 that&amp;#39;s
        what stops the loop actually being infinite.&lt;/p&gt;\n\n&lt;p&gt;Make it
        faster or slower by adjusting the sleep time of &lt;code&gt;4&lt;/code&gt;
        when recording &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaucw6k/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543652163.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 35}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "more", "data": {"count":
        11, "name": "t1_eax6sav", "id": "eax6sav", "parent_id": "t1_eaurb45", "depth":
        2, "children": ["eax6sav", "eavrf5u", "eawbwpf", "eax6snx"]}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "eaurb45", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "zSync1", "can_mod_post": false, "created_utc":
        1543673340.0, "send_replies": true, "parent_id": "t1_eau63ok", "score": 6,
        "author_fullname": "t2_ay2yr", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Here''s a slightly easier
        solution using `find_map` and `HashSet::replace`:\n\n\tuse std::collections::HashSet;\n\n\tfn
        main() {\n\t\tlet data = include_str!(\"data.txt\");\n\t\tlet c = data.split_whitespace().map(|c|
        c.parse::&lt;i64&gt;().unwrap()).collect::&lt;Vec&lt;_&gt;&gt;();\n\t\tprintln!(\"I:
        {}\", c.iter().sum::&lt;i64&gt;());\n\t\tlet mut cache = HashSet::new();\n\t\tlet
        mut sum = 0;\n\t\tlet v = c.into_iter().cycle().find_map(|c| {\n\t\t\tsum
        += c;\n\t\t\tcache.replace(sum)\n\t\t}).unwrap();\n\t\tprintln!(\"II: {}\",
        v);\n\t}\n", "edited": 1543673595.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eaurb45", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s
        a slightly easier solution using &lt;code&gt;find_map&lt;/code&gt; and &lt;code&gt;HashSet::replace&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use
        std::collections::HashSet;\n\nfn main() {\n    let data = include_str!(&amp;quot;data.txt&amp;quot;);\n    let
        c = data.split_whitespace().map(|c| c.parse::&amp;lt;i64&amp;gt;().unwrap()).collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;();\n    println!(&amp;quot;I:
        {}&amp;quot;, c.iter().sum::&amp;lt;i64&amp;gt;());\n    let mut cache = HashSet::new();\n    let
        mut sum = 0;\n    let v = c.into_iter().cycle().find_map(|c| {\n        sum
        += c;\n        cache.replace(sum)\n    }).unwrap();\n    println!(&amp;quot;II:
        {}&amp;quot;, v);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaurb45/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543673340.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 6}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "more", "data": {"count":
        1, "name": "t1_eavm0bw", "id": "eavm0bw", "parent_id": "t1_eauizsp", "depth":
        3, "children": ["eavm0bw"]}}], "before": null}}, "user_reports": [], "saved":
        false, "id": "eauizsp", "banned_at_utc": null, "mod_reason_title": null, "gilded":
        0, "archived": true, "collapsed_reason_code": null, "no_follow": false, "author":
        "Dutch_Gh0st", "can_mod_post": false, "send_replies": true, "parent_id": "t1_eaucm3g",
        "score": 6, "author_fullname": "t2_rwwpkp", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "`.find(|n| !seen.insert(*n)).unwrap();`
        You have to clone/copy it. The closure given to .find() takes a *reference*
        to the Item of the Iterator, in this case being `&amp;isize`.\nThe problem
        with the insert you are having, is that the value referenced by `n`, goes
        out of scope in the next Iteration. if you *could* insert the reference, you''d
        be dangling! Copying/cloning does not have this problem, because the value''s
        are owned.\n\n    fn main() {\n        let mut set = HashSet::new();\n\n        let
        answer = PUZZLE\n            .lines()\n            .filter_map(|s| s.parse::&lt;isize&gt;().ok())\n            .cycle()\n            .scan(Cell::new(0),
        |frequency, n| {\n                // Updates the value contained in the cell,
        *and* returns the new value (copy''s it)\n                Some(frequency.update(|old|
        old + n))\n            // Also got to copy here, else we''d be dangling!\n            }).find(|n|
        !set.insert(*n));\n\n        println!(\"{:?}\", answer);\n    }\n", "edited":
        1543664845.0, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_eauizsp", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;code&gt;.find(|n|
        !seen.insert(*n)).unwrap();&lt;/code&gt; You have to clone/copy it. The closure
        given to .find() takes a &lt;em&gt;reference&lt;/em&gt; to the Item of the
        Iterator, in this case being &lt;code&gt;&amp;amp;isize&lt;/code&gt;.\nThe
        problem with the insert you are having, is that the value referenced by &lt;code&gt;n&lt;/code&gt;,
        goes out of scope in the next Iteration. if you &lt;em&gt;could&lt;/em&gt;
        insert the reference, you&amp;#39;d be dangling! Copying/cloning does not
        have this problem, because the value&amp;#39;s are owned.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fn
        main() {\n    let mut set = HashSet::new();\n\n    let answer = PUZZLE\n        .lines()\n        .filter_map(|s|
        s.parse::&amp;lt;isize&amp;gt;().ok())\n        .cycle()\n        .scan(Cell::new(0),
        |frequency, n| {\n            // Updates the value contained in the cell,
        *and* returns the new value (copy&amp;#39;s it)\n            Some(frequency.update(|old|
        old + n))\n        // Also got to copy here, else we&amp;#39;d be dangling!\n        }).find(|n|
        !set.insert(*n));\n\n    println!(&amp;quot;{:?}&amp;quot;, answer);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauizsp/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543662875.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543662875.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 6}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eaucm3g", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "lukechampine", "can_mod_post": false,
        "created_utc": 1543651689.0, "send_replies": true, "parent_id": "t1_eau63ok",
        "score": 6, "author_fullname": "t2_124j5o", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "`take_while` + `Cell`
        is an interesting combo! I tried to refine my solution a bit and came up with
        this, but the `find` fails to compile with `borrowed data cannot be stored
        outside of its closure`:\n\n    let mut seen = HashSet::new();\n    return
        input\n        .lines()\n        .map(|x| x.parse::&lt;isize&gt;().unwrap())\n        .cycle()\n        .scan(0,
        |state, n| Some(*state + n))\n        .find(|n| !seen.insert(n)).unwrap();\n\nI''m
        new to Rust; is there a clean way to accomplish this?", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eaucm3g", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;code&gt;take_while&lt;/code&gt;
        + &lt;code&gt;Cell&lt;/code&gt; is an interesting combo! I tried to refine
        my solution a bit and came up with this, but the &lt;code&gt;find&lt;/code&gt;
        fails to compile with &lt;code&gt;borrowed data cannot be stored outside of
        its closure&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let mut seen
        = HashSet::new();\nreturn input\n    .lines()\n    .map(|x| x.parse::&amp;lt;isize&amp;gt;().unwrap())\n    .cycle()\n    .scan(0,
        |state, n| Some(*state + n))\n    .find(|n| !seen.insert(n)).unwrap();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&amp;#39;m
        new to Rust; is there a clean way to accomplish this?&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaucm3g/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543651689.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 6}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 1, "name": "t1_eavrpwa",
        "id": "eavrpwa", "parent_id": "t1_eaupff6", "depth": 2, "children": ["eavrpwa"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "eaupff6", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "cosmicspacedragon", "can_mod_post": false,
        "created_utc": 1543671389.0, "send_replies": true, "parent_id": "t1_eau63ok",
        "score": 3, "author_fullname": "t2_254esxzl", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "Is there a specific
        reason as to why you''re using `isize`?", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eaupff6", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Is there a specific reason
        as to why you&amp;#39;re using &lt;code&gt;isize&lt;/code&gt;?&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaupff6/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543671389.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eavtshz", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "tclent", "can_mod_post": false, "created_utc":
        1543704810.0, "send_replies": true, "parent_id": "t1_eau63ok", "score": 5,
        "author_fullname": "t2_2pd8vmg5", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "After solving it myself and
        learning from all of your solutions, I''ve saved my original solution and
        two improved versions [to my Github repo](https://github.com/tlent/advent-of-code/blob/master/solutions/day-1/src/lib.rs).
        I wrote comments explaining my understanding of all of the parts of the improved
        versions that I thought were tricky. Hopefully this is helpful to anyone else
        trying to learn from these solutions.", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eavtshz", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;After solving it myself and
        learning from all of your solutions, I&amp;#39;ve saved my original solution
        and two improved versions &lt;a href=\"https://github.com/tlent/advent-of-code/blob/master/solutions/day-1/src/lib.rs\"&gt;to
        my Github repo&lt;/a&gt;. I wrote comments explaining my understanding of
        all of the parts of the improved versions that I thought were tricky. Hopefully
        this is helpful to anyone else trying to learn from these solutions.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavtshz/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543704810.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 5}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eau8whp", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "d3adbeef123", "can_mod_post": false, "created_utc":
        1543645521.0, "send_replies": true, "parent_id": "t1_eau63ok", "score": 3,
        "author_fullname": "t2_gyfmd", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Wow, TIL about lines().. thanks
        :)", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eau8whp", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Wow,
        TIL about lines().. thanks :)&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_a20646", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau8whp/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543645521.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauhm6l",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daedius",
        "can_mod_post": false, "created_utc": 1543660496.0, "send_replies": true,
        "parent_id": "t1_eau63ok", "score": 3, "author_fullname": "t2_2ocej", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Sorry to bother you, but you really look like you understand Rust better
        than I: \n\nhttps://www.reddit.com/r/adventofcode/comments/a20646/2018_day_1_solutions/eauh689/\n\nCould
        you help me understand why my code written one way works but not another way?",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eauhm6l", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Sorry
        to bother you, but you really look like you understand Rust better than I:
        &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/adventofcode/comments/a20646/2018_day_1_solutions/eauh689/\"&gt;https://www.reddit.com/r/adventofcode/comments/a20646/2018_day_1_solutions/eauh689/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Could
        you help me understand why my code written one way works but not another way?&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauhm6l/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543660496.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "more",
        "data": {"count": 16, "name": "t1_eavuwhx", "id": "eavuwhx", "parent_id":
        "t1_eau63ok", "depth": 1, "children": ["eavuwhx", "eauepra", "eauljah", "eaug4tk",
        "eavbt37", "eavud02"]}}], "before": null}}, "user_reports": [], "saved": false,
        "id": "eau63ok", "banned_at_utc": null, "mod_reason_title": null, "gilded":
        0, "archived": true, "collapsed_reason_code": null, "no_follow": false, "author":
        "Dutch_Gh0st", "can_mod_post": false, "created_utc": 1543642159.0, "send_replies":
        true, "parent_id": "t3_a20646", "score": 28, "author_fullname": "t2_rwwpkp",
        "approved_by": null, "mod_note": null, "all_awardings": [], "collapsed": false,
        "body": "In Rust,\n\nPart 1:\n\n    const PUZZLE: &amp;str = include_str!(\"input.txt\");\n\n    fn
        main() {\n        let sum = PUZZLE.lines().filter_map(|s| s.parse::&lt;isize&gt;().ok()).sum::&lt;isize&gt;();\n        println!(\"{}\",
        sum);\n    }\n\npart2:\n\n    #![feature(cell_update)]\n\n    const PUZZLE:
        &amp;str = include_str!(\"input.txt\");\n    use std::cell::Cell;\n    use
        std::collections::HashSet;\n\n    fn main() {\n        let mut set = HashSet::new();\n\n        let
        frequency = Cell::new(0);\n\n        PUZZLE\n            .lines()\n            .flat_map(|s|
        s.parse::&lt;isize&gt;().ok())\n            .cycle()\n            .take_while(|_|
        set.insert(frequency.get()))\n            .for_each(|n| {\n                frequency.update(|old|
        old + n);\n            });\n\n        println!(\"{:?}\", frequency);\n    }\n",
        "edited": 1543645826.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eau63ok", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In
        Rust,&lt;/p&gt;\n\n&lt;p&gt;Part 1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const
        PUZZLE: &amp;amp;str = include_str!(&amp;quot;input.txt&amp;quot;);\n\nfn
        main() {\n    let sum = PUZZLE.lines().filter_map(|s| s.parse::&amp;lt;isize&amp;gt;().ok()).sum::&amp;lt;isize&amp;gt;();\n    println!(&amp;quot;{}&amp;quot;,
        sum);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;part2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#![feature(cell_update)]\n\nconst
        PUZZLE: &amp;amp;str = include_str!(&amp;quot;input.txt&amp;quot;);\nuse std::cell::Cell;\nuse
        std::collections::HashSet;\n\nfn main() {\n    let mut set = HashSet::new();\n\n    let
        frequency = Cell::new(0);\n\n    PUZZLE\n        .lines()\n        .flat_map(|s|
        s.parse::&amp;lt;isize&amp;gt;().ok())\n        .cycle()\n        .take_while(|_|
        set.insert(frequency.get()))\n        .for_each(|n| {\n            frequency.update(|old|
        old + n);\n        });\n\n    println!(&amp;quot;{:?}&amp;quot;, frequency);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau63ok/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543642159.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 28}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eau8iu6",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1543644982.0, "send_replies": true,
        "parent_id": "t1_eau6aeh", "score": 17, "author_fullname": "t2_60niu", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "[Obligatory white card submission for you](https://i.imgur.com/HiWXATim.jpg)\n\n***\n\nTranscript:\n&gt;
        White card = \"Not use Excel\" by /u/that_lego_guy", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eau8iu6", "is_submitter":
        true, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://i.imgur.com/HiWXATim.jpg\"&gt;Obligatory
        white card submission for you&lt;/a&gt;&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;Transcript:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;White
        card = &amp;quot;Not use Excel&amp;quot; by &lt;a href=\"/u/that_lego_guy\"&gt;/u/that_lego_guy&lt;/a&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": "moderator", "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau8iu6/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543644982.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 17}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaun1kx",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "that_lego_guy",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_eaun0kq", "score":
        5, "author_fullname": "t2_nxpb5", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "At 1am I realized how I could
        have done part 2 in under a minute, so I am off to do that now ", "edited":
        false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null,
        "name": "t1_eaun1kx", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;At
        1am I realized how I could have done part 2 in under a minute, so I am off
        to do that now &lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_a20646", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaun1kx/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543668650.0,
        "author_flair_text": null, "treatment_tags": [], "created_utc": 1543668650.0,
        "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0, "depth":
        2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 5}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eaun0kq", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "Cheezmeister", "can_mod_post": false,
        "created_utc": 1543668614.0, "send_replies": true, "parent_id": "t1_eau6aeh",
        "score": 4, "author_fullname": "t2_3v2zr", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "Excellent. ", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eaun0kq",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Excellent. &lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaun0kq/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543668614.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eav1u52", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "RegretfulPhysicist", "can_mod_post": false,
        "created_utc": 1543683059.0, "send_replies": true, "parent_id": "t1_eau6aeh",
        "score": 3, "author_fullname": "t2_v2wuij2", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "pure filth... I love
        it", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eav1u52", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;pure
        filth... I love it&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_a20646", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eav1u52/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543683059.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ebeq494",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "enjoyjocel",
        "can_mod_post": false, "created_utc": 1544334097.0, "send_replies": true,
        "parent_id": "t1_eau6aeh", "score": 2, "author_fullname": "t2_5ysd3", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "classic! &lt;3", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_ebeq494", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;classic!
        &amp;lt;3&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null,
        "distinguished": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "link_id": "t3_a20646", "unrepliable_reason": null,
        "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/ebeq494/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1544334097.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "more",
        "data": {"count": 7, "name": "t1_eaymxni", "id": "eaymxni", "parent_id": "t1_eau6aeh",
        "depth": 1, "children": ["eaymxni", "eazmdol"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "eau6aeh", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        false, "author": "that_lego_guy", "can_mod_post": false, "created_utc": 1543642367.0,
        "send_replies": true, "parent_id": "t3_a20646", "score": 44, "author_fullname":
        "t2_nxpb5", "approved_by": null, "mod_note": null, "all_awardings": [], "collapsed":
        false, "body": "I''m Back!! Day1Part1...IN EXCEL?!!!!!\n\n     =B1+A2\n\nhttps://github.com/thatlegoguy/AoC2018",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eau6aeh", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m
        Back!! Day1Part1...IN EXCEL?!!!!!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; =B1+A2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/thatlegoguy/AoC2018\"&gt;https://github.com/thatlegoguy/AoC2018&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau6aeh/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543642367.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 44}}, {"kind": "t1",
        "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 18, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 11, "removal_reason": null, "link_id": "t3_a20646",
        "author_flair_template_id": null, "likes": null, "replies": {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "more", "data": {"count": 1, "name": "t1_eaumnua", "id": "eaumnua",
        "parent_id": "t1_eaucrm2", "depth": 3, "children": ["eaumnua"]}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "eaucrm2", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "[deleted]", "can_mod_post": false, "created_utc":
        1543651956.0, "send_replies": true, "parent_id": "t1_eauc9aa", "score": 11,
        "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Either set or dict is able to utilize a hash to look
        it up quicker. A list has to scan through the entire seen values on each iteration.",
        "edited": false, "author_flair_css_class": null, "downs": 0, "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Either set or dict is
        able to utilize a hash to look it up quicker. A list has to scan through the
        entire seen values on each iteration.&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "subreddit_type": "public", "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaucrm2/", "num_reports":
        null, "locked": false, "name": "t1_eaucrm2", "created": 1543651956.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 2, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eauct4v", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "sinjp", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_eauc9aa", "score": 5, "author_fullname": "t2_sl1kc",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "Sets use a hashtable lookup - like a dictionary with only keys
        so the lookup is very fast.", "edited": false, "top_awarded_type": null, "downs":
        0, "author_flair_css_class": null, "name": "t1_eauct4v", "is_submitter": false,
        "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Sets use a hashtable lookup
        - like a dictionary with only keys so the lookup is very fast.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauct4v/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543652025.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543652025.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 5}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eauc9aa", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "oskiflesh", "can_mod_post": false, "created_utc":
        1543651022.0, "send_replies": true, "parent_id": "t1_eau65fv", "score": 6,
        "author_fullname": "t2_drqte", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "I did almost exactly this,
        except I used a list instead of a set for part 2. I know that lists aren''t
        optimal and my code actually took a few minutes to run so I swapped to set
        for a comparison. I was surprised how much quicker it was to run the code
        with set. Can someone explain why set() is so much quicker than list()?",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eauc9aa", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        did almost exactly this, except I used a list instead of a set for part 2.
        I know that lists aren&amp;#39;t optimal and my code actually took a few minutes
        to run so I swapped to set for a comparison. I was surprised how much quicker
        it was to run the code with set. Can someone explain why set() is so much
        quicker than list()?&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_a20646", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauc9aa/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543651022.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "awarders": [], "mod_reason_by": null, "banned_by": null, "ups": 2, "removal_reason":
        null, "link_id": "t3_a20646", "author_flair_template_id": null, "likes": null,
        "replies": "", "user_reports": [], "saved": false, "id": "eau9eej", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "[deleted]", "can_mod_post": false, "created_utc":
        1543646246.0, "send_replies": true, "parent_id": "t1_eau8ke9", "score": 2,
        "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Thanks, I modified it.", "edited": false, "author_flair_css_class":
        null, "downs": 0, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks,
        I modified it.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "subreddit_type": "public",
        "can_gild": false, "top_awarded_type": null, "unrepliable_reason": null, "author_flair_text_color":
        "dark", "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau9eej/",
        "num_reports": null, "locked": false, "name": "t1_eau9eej", "created": 1543646246.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "collapsed": false, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_eauawjo", "id": "eauawjo", "parent_id":
        "t1_eau8ke9", "depth": 2, "children": ["eauawjo"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "eau8ke9", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        false, "author": "lamperi-", "can_mod_post": false, "created_utc": 1543645043.0,
        "send_replies": true, "parent_id": "t1_eau65fv", "score": 5, "author_fullname":
        "t2_qle3c", "removal_reason": null, "approved_by": null, "mod_note": null,
        "all_awardings": [], "body": "You could drop the helper variable \"twice\"
        if you used \"itertools.cycle\" instead of two loops.", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eau8ke9", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You could drop the helper variable
        &amp;quot;twice&amp;quot; if you used &amp;quot;itertools.cycle&amp;quot;
        instead of two loops.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_a20646", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau8ke9/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543645043.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 5}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "more", "data": {"count":
        1, "name": "t1_eavqasx", "id": "eavqasx", "parent_id": "t1_eaui79k", "depth":
        2, "children": ["eavqasx"]}}], "before": null}}, "user_reports": [], "saved":
        false, "id": "eaui79k", "banned_at_utc": null, "mod_reason_title": null, "gilded":
        0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author":
        "zirtec", "can_mod_post": false, "created_utc": 1543661604.0, "send_replies":
        true, "parent_id": "t1_eau65fv", "score": 2, "author_fullname": "t2_f2pmc",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "A set literal avoids a small conversion: `seen = {0}`", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eaui79k",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;A set literal avoids
        a small conversion: &lt;code&gt;seen = {0}&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaui79k/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543661604.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "more",
        "data": {"count": 7, "name": "t1_ebfiujq", "id": "ebfiujq", "parent_id": "t1_eau65fv",
        "depth": 1, "children": ["ebfiujq", "ebc0202", "eav8o3z", "eaxatyh", "eb0dxq3"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "eau65fv", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "[deleted]", "can_mod_post": false, "send_replies":
        true, "parent_id": "t3_a20646", "score": 18, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "Python3. Going
        for neatness, advice appreciated.\n\n    import itertools\n    data = [int(x)
        for x in open(\"input.txt\").readlines()]\n    print(sum(data))\n    \n    freq
        = 0\n    seen = {0}\n    for num in itertools.cycle(data):\n        freq +=
        num\n        if freq in seen:\n            print(freq); break\n        seen.add(freq)\n\n",
        "edited": 1543702058.0, "downs": 0, "author_flair_css_class": null, "collapsed":
        false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python3.
        Going for neatness, advice appreciated.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        itertools\ndata = [int(x) for x in open(&amp;quot;input.txt&amp;quot;).readlines()]\nprint(sum(data))\n\nfreq
        = 0\nseen = {0}\nfor num in itertools.cycle(data):\n    freq += num\n    if
        freq in seen:\n        print(freq); break\n    seen.add(freq)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau65fv/",
        "num_reports": null, "locked": false, "name": "t1_eau65fv", "created": 1543642213.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1543642213.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eax53i4",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Tarmen",
        "can_mod_post": false, "created_utc": 1543758059.0, "send_replies": true,
        "parent_id": "t1_eauairf", "score": 2, "author_fullname": "t2_7mjdo", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Wow, my solution was ridiculously close to yours.\n\n    import qualified
        Data.Set as S\n    import Data.List\n    main :: IO ()\n    main = do\n        input
        &lt;- map readInt . lines &lt;$&gt; readFile \"1.txt\"\n        print (sum
        input)\n        print $ findRepeat $ scanl (+) 0 $ cycle input\n      where\n        readInt
        (''+'':d) = read d\n        readInt d = read d\n    \n    findRepeat :: Ord
        a =&gt; [a] -&gt; Maybe a\n    findRepeat = fmap fst . find (uncurry S.member)
        . (zip &lt;*&gt; previous)\n        where previous = scanl (flip S.insert)
        mempty\n    \n    ", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eax53i4", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Wow,
        my solution was ridiculously close to yours.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        qualified Data.Set as S\nimport Data.List\nmain :: IO ()\nmain = do\n    input
        &amp;lt;- map readInt . lines &amp;lt;$&amp;gt; readFile &amp;quot;1.txt&amp;quot;\n    print
        (sum input)\n    print $ findRepeat $ scanl (+) 0 $ cycle input\n  where\n    readInt
        (&amp;#39;+&amp;#39;:d) = read d\n    readInt d = read d\n\nfindRepeat ::
        Ord a =&amp;gt; [a] -&amp;gt; Maybe a\nfindRepeat = fmap fst . find (uncurry
        S.member) . (zip &amp;lt;*&amp;gt; previous)\n    where previous = scanl (flip
        S.insert) mempty\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eax53i4/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543758059.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "more",
        "data": {"count": 5, "name": "t1_eaw7xz5", "id": "eaw7xz5", "parent_id": "t1_eauairf",
        "depth": 1, "children": ["eaw7xz5", "edaeihe"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "eauairf", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        false, "author": "ephemient", "can_mod_post": false, "created_utc": 1543647981.0,
        "send_replies": true, "parent_id": "t3_a20646", "score": 15, "author_fullname":
        "t2_3y2dr", "approved_by": null, "mod_note": null, "all_awardings": [], "collapsed":
        false, "body": "This space intentionally left blank.", "edited": 1713952306.0,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eauairf",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This space intentionally
        left blank.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauairf/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543647981.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 15}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eau8wpe",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "autid",
        "can_mod_post": false, "created_utc": 1543645530.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 13, "author_fullname": "t2_g26j3", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "**FORTRAN**\n\nNice
        easy start with minimal input reading difficulty.\n\n    PROGRAM DAY1\n      IMPLICIT
        NONE\n      INTEGER :: I,J,K,L,M,PART1,PART2\n      INTEGER :: IERR\n      INTEGER,
        ALLOCATABLE :: A(:),B(:)\n    \n      !File I/O                                                                                                                                                                                                                                   \n      OPEN(1,FILE=''input.txt'')\n      I=0\n      DO\n         READ(1,*,IOSTAT=IERR)\n         IF(IERR.NE.0)EXIT\n         I=I+1\n      END
        DO\n      REWIND(1)\n      ALLOCATE(A(I),B(I))\n      READ(1,*)A\n      CLOSE(1)\n    \n      !Part
        1                                                                                                                                                                                                                                     \n      PART1=SUM(A)\n      WRITE(*,*)
        ''Part 1: '',PART1\n    \n      !Part 2                                                                                                                                                                                                                                     \n      B(1)=0\n      B(2:)=(/(SUM(A(1:J)),J=1,I-1)/)\n      L=0\n    \n      DO
        J=1,I-1\n         DO K=J+1,I\n            IF(MODULO(B(K)-B(J),PART1).EQ.0)THEN\n               M=I*ABS((B(K)-B(J)))/PART1+MINLOC(B,MASK=B.EQ.MIN(B(K),B(J)),DIM=1)\n               IF((L.EQ.0).OR.(M&lt;L))THEN\n                  L=M\n                  PART2=MAX(B(K),B(J))\n               END
        IF\n            END IF\n         END DO\n      END DO\n    \n      WRITE(*,*)
        ''Part 2: '',PART2\n      DEALLOCATE(A)\n      DEALLOCATE(B)\n    \n    END
        PROGRAM DAY1\n", "edited": 1543645812.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eau8wpe", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;FORTRAN&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Nice
        easy start with minimal input reading difficulty.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;PROGRAM
        DAY1\n  IMPLICIT NONE\n  INTEGER :: I,J,K,L,M,PART1,PART2\n  INTEGER :: IERR\n  INTEGER,
        ALLOCATABLE :: A(:),B(:)\n\n  !File I/O                                                                                                                                                                                                                                   \n  OPEN(1,FILE=&amp;#39;input.txt&amp;#39;)\n  I=0\n  DO\n     READ(1,*,IOSTAT=IERR)\n     IF(IERR.NE.0)EXIT\n     I=I+1\n  END
        DO\n  REWIND(1)\n  ALLOCATE(A(I),B(I))\n  READ(1,*)A\n  CLOSE(1)\n\n  !Part
        1                                                                                                                                                                                                                                     \n  PART1=SUM(A)\n  WRITE(*,*)
        &amp;#39;Part 1: &amp;#39;,PART1\n\n  !Part 2                                                                                                                                                                                                                                     \n  B(1)=0\n  B(2:)=(/(SUM(A(1:J)),J=1,I-1)/)\n  L=0\n\n  DO
        J=1,I-1\n     DO K=J+1,I\n        IF(MODULO(B(K)-B(J),PART1).EQ.0)THEN\n           M=I*ABS((B(K)-B(J)))/PART1+MINLOC(B,MASK=B.EQ.MIN(B(K),B(J)),DIM=1)\n           IF((L.EQ.0).OR.(M&amp;lt;L))THEN\n              L=M\n              PART2=MAX(B(K),B(J))\n           END
        IF\n        END IF\n     END DO\n  END DO\n\n  WRITE(*,*) &amp;#39;Part 2:
        &amp;#39;,PART2\n  DEALLOCATE(A)\n  DEALLOCATE(B)\n\nEND PROGRAM DAY1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau8wpe/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543645530.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 13}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 6, "name": "t1_eau9xwm",
        "id": "eau9xwm", "parent_id": "t1_eau60y1", "depth": 1, "children": ["eau9xwm"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "eau60y1", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "obiwan90", "can_mod_post": false, "created_utc":
        1543642073.0, "send_replies": true, "parent_id": "t3_a20646", "score": 14,
        "author_fullname": "t2_345em", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "For the first star, but of course didn''t
        realize until after I built something much more complicated:\n\n    paste
        -s input | bc\n\n(And this only works if the first line of input doesn''t
        start with `+` - see comments for solutions otherwise.)", "edited": 1543711003.0,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eau60y1",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;For the first star,
        but of course didn&amp;#39;t realize until after I built something much more
        complicated:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;paste -s input | bc\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(And
        this only works if the first line of input doesn&amp;#39;t start with &lt;code&gt;+&lt;/code&gt;
        - see comments for solutions otherwise.)&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau60y1/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543642073.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 14}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 2, "name": "t1_eavn5yo",
        "id": "eavn5yo", "parent_id": "t1_eau9gjm", "depth": 1, "children": ["eavn5yo",
        "eavmnam"]}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "eau9gjm", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "zqvt",
        "can_mod_post": false, "created_utc": 1543646334.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 11, "author_fullname": "t2_18uf4vq", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "**Clojure**\n\nManaged
        to make it on the leaderboard, barely\n\n    (def input (read-string &lt;pasted_input&gt;))\n    \n    (defn
        part1 []\n      (reduce + input))\n\n    (defn part2 []\n      (loop [xs (cycle
        input) seen #{} total 0]\n        (if (contains? seen total)\n          total\n          (recur
        (rest xs) (conj seen total) (+ total (first xs))))))\n", "edited": 1543646785.0,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eau9gjm",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Clojure&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Managed
        to make it on the leaderboard, barely&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(def
        input (read-string &amp;lt;pasted_input&amp;gt;))\n\n(defn part1 []\n  (reduce
        + input))\n\n(defn part2 []\n  (loop [xs (cycle input) seen #{} total 0]\n    (if
        (contains? seen total)\n      total\n      (recur (rest xs) (conj seen total)
        (+ total (first xs))))))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau9gjm/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543646334.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 11}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "distinguished":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eauchc3", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "Unihedron",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_eaua8ce", "score":
        8, "author_fullname": "t2_h0e6x", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "31 chars for part 2:\n\n    \\r~W:&amp;+:&amp;mgq&amp;h}1&amp;:&amp;mp|\n    \\1WIE0|&amp;\n\n[Try
        it online!](https://tio.run/##S8/PScsszvj/P6aoLtxKTdtKLTe9UC2j1lANyCqo4YoxDPd0NahR@/9f25wLiHSNuHSBpAkA
        \"Gol&gt;&lt;&gt; \u2013 Try It Online\") Let me know if you need a code explanation\n\nI''ll
        take a shower after this. Debugging was a pain... Powered by [Gol&gt;&lt;&gt;](https://github.com/Sp3000/Golfish/wiki/Example-programs)
        (If you replace the input with the actual huge input, it will work, just takes
        a while to run)\n\nEdit: [I am crazy and I am making it its own thing now](https://www.reddit.com/r/adventofcode/comments/a21hiy/)",
        "edited": 1543654755.0, "author_flair_css_class": null, "name": "t1_eauchc3",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;31 chars for part 2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;\\r~W:&amp;amp;+:&amp;amp;mgq&amp;amp;h}1&amp;amp;:&amp;amp;mp|\n\\1WIE0|&amp;amp;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://tio.run/##S8/PScsszvj/P6aoLtxKTdtKLTe9UC2j1lANyCqo4YoxDPd0NahR@/9f25wLiHSNuHSBpAkA\"
        title=\"Gol&amp;gt;&amp;lt;&amp;gt; \u2013 Try It Online\"&gt;Try it online!&lt;/a&gt;
        Let me know if you need a code explanation&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ll
        take a shower after this. Debugging was a pain... Powered by &lt;a href=\"https://github.com/Sp3000/Golfish/wiki/Example-programs\"&gt;Gol&amp;gt;&amp;lt;&amp;gt;&lt;/a&gt;
        (If you replace the input with the actual huge input, it will work, just takes
        a while to run)&lt;/p&gt;\n\n&lt;p&gt;Edit: &lt;a href=\"https://www.reddit.com/r/adventofcode/comments/a21hiy/\"&gt;I
        am crazy and I am making it its own thing now&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "link_id": "t3_a20646", "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": null, "treatment_tags":
        [], "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauchc3/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543651444.0, "author_flair_text": null, "collapsed": false, "created_utc":
        1543651444.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 4, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 8}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eaua8ce", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "LeCrushinator", "can_mod_post": false,
        "send_replies": true, "parent_id": "t1_eaua3m8", "score": 8, "author_fullname":
        "t2_8mf5r", "removal_reason": null, "approved_by": null, "mod_note": null,
        "all_awardings": [], "collapsed": false, "body": "&gt; IEh+\n\nGood lord...\n\nYour
        programmers were so preoccupied with whether or not they could, they didn\u2019t
        stop to think if they should.", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_eaua8ce", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;IEh+&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Good
        lord...&lt;/p&gt;\n\n&lt;p&gt;Your programmers were so preoccupied with whether
        or not they could, they didn\u2019t stop to think if they should.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaua8ce/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543647520.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543647520.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 8}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eaua3m8", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "Unihedron", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_eau99nx", "score": 17, "author_fullname": "t2_h0e6x",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "4 chars for part 1: `IEh+` [Try it online!](https://tio.run/##VVdJjiQ3ELvXV4QEpND@AB/8ES@AAR/8f7QVJENZ0@iarlRKio1Bxvz57z9//P3fXz8/v//2V/r5SaV@0v6k9Unl85R@/uTzGeczsbr4TQtlnU35fPz5nDwHHqydw/ZJ83xrn6e9m8@@6gvnLTZaxa7OjcVka1y72Ft4oz/6ReeGcl5u2TwuNTy6SV@x7Ctwyi/yk@@R89t10PcgVrzv2np8wZ6nRg7i6PEjuQk454sdARXGUPxfXHbvhF90ISFpHiWuqvJ/yRWlvGPTjjQjIcYo2l2vWOgMubzvplaWu06/N8qTjHnzR/k3mc3Fdwveb52fdC/8VSEb7Qz4YLDv@fAI6o0XPqsuXfipMEM30wWKCROmQ4V5HXJayOHlRXX1F8xJF1Y6T13IZjgYPgMEREXmLQyg0HYXdrdn77lw7nR2vdko/SbCv5rOLSDT0WiqQ0CdGW1ES8Ej/i7BnCVhgrC4EGogQfX0E2rAimQ/B9gPHPfSVOa2wW7ly433ES3uK/juF7k/jNXU2/UsVc8xjaJxqnqt8w4zNCmr0qKhmJKo37gOwvIUMiZxuHnh4PX9rft6vUShkhEqRfWZ9JXgWKhxu21/OynSPRinmxso/gRgBrPf@W0yuVVcUgW8cemjIwFT7ZPp3dJ2I1D2y3HCd7SMxyjYW/QV69WiPqlfh5z7qpBjIDpmzks61S6@reGTBls8KHkhX0zWBhqGLGeuGtNVhMTgTxkkkioxEFRT1ss8/RI2nOgB8cR8p0YEGiHNDKbmKXTDjKJnuZMF/HJrkGi9id6HJyI7irzQKzjfz8GxhjdPE62zsG0jq8iH8J3VKFtE@gjOniqD0DjYTwAOiDmz3CdGg6A3mUWdSKZoNPMlNAxAWDZYGsITn7oCJsdm@UrtW2zUQokh9aQd0CCSBFAS2qLvxGYlP1B4n/aieYjDxMJx97htyNpCDQFeiVtj3Tet7le1JIoUccrH4BFC5jaGrBterlenQ3znddL30CHFVd4ZoGunMU67EvZILR@RjMphpOB2FSPNgAMjz@oj8RLFogne1CJVjQCd1zEYzbd2JCRcgmQ9aogV4AEm@FADK9LhRIJEHrJSR@3NMcwoY6hQvbgp1F3Kp7G8TU0nes@X4hOVwAIiwi@W1yXR0sOBFOKJVzLKGSCx67G/qQ6vvG6lb17u7gq6XOaZyMeIYQel6b/KxqZ50ecgxzhJvnc/4wtoPWCImEWjDg9yezR61naqB2vJjl1KP4PS8De@6LHctpV5grVEeKxx@eIyPocyUWZtsLebItoiai@hZlybSJKxCD3o/okJBYprMSnMq3sWcNZ95ZdBnHyDmUOQnF/6NhlLg0QFDbn@C7TkOMpyLe9BE4kYWEtT3SNwhPXxDpgX4SLf9VZTafMw0HQ6FZONZAlgZblsqdo6PECsJKURkz9KzbG8suUfAWPcWY31lisSyIcDAof6x76IYzAKSgpVzfuluYXBgsR/dobQ4NqygzU0DNXOylf1vlXPMYW6dw5r@erGcW/eEV9aHCIsyNZ8R7VHs@LJlN0pwjhjPWact6o3kzvuZo7abRMP9fPzPw
        \"Gol&gt;&lt;&gt; \u2013 Try It Online\")", "edited": false, "top_awarded_type":
        null, "downs": 0, "author_flair_css_class": null, "name": "t1_eaua3m8", "is_submitter":
        false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;4 chars for part 1:
        &lt;code&gt;IEh+&lt;/code&gt; &lt;a href=\"https://tio.run/##VVdJjiQ3ELvXV4QEpND@AB/8ES@AAR/8f7QVJENZ0@iarlRKio1Bxvz57z9//P3fXz8/v//2V/r5SaV@0v6k9Unl85R@/uTzGeczsbr4TQtlnU35fPz5nDwHHqydw/ZJ83xrn6e9m8@@6gvnLTZaxa7OjcVka1y72Ft4oz/6ReeGcl5u2TwuNTy6SV@x7Ctwyi/yk@@R89t10PcgVrzv2np8wZ6nRg7i6PEjuQk454sdARXGUPxfXHbvhF90ISFpHiWuqvJ/yRWlvGPTjjQjIcYo2l2vWOgMubzvplaWu06/N8qTjHnzR/k3mc3Fdwveb52fdC/8VSEb7Qz4YLDv@fAI6o0XPqsuXfipMEM30wWKCROmQ4V5HXJayOHlRXX1F8xJF1Y6T13IZjgYPgMEREXmLQyg0HYXdrdn77lw7nR2vdko/SbCv5rOLSDT0WiqQ0CdGW1ES8Ej/i7BnCVhgrC4EGogQfX0E2rAimQ/B9gPHPfSVOa2wW7ly433ES3uK/juF7k/jNXU2/UsVc8xjaJxqnqt8w4zNCmr0qKhmJKo37gOwvIUMiZxuHnh4PX9rft6vUShkhEqRfWZ9JXgWKhxu21/OynSPRinmxso/gRgBrPf@W0yuVVcUgW8cemjIwFT7ZPp3dJ2I1D2y3HCd7SMxyjYW/QV69WiPqlfh5z7qpBjIDpmzks61S6@reGTBls8KHkhX0zWBhqGLGeuGtNVhMTgTxkkkioxEFRT1ss8/RI2nOgB8cR8p0YEGiHNDKbmKXTDjKJnuZMF/HJrkGi9id6HJyI7irzQKzjfz8GxhjdPE62zsG0jq8iH8J3VKFtE@gjOniqD0DjYTwAOiDmz3CdGg6A3mUWdSKZoNPMlNAxAWDZYGsITn7oCJsdm@UrtW2zUQokh9aQd0CCSBFAS2qLvxGYlP1B4n/aieYjDxMJx97htyNpCDQFeiVtj3Tet7le1JIoUccrH4BFC5jaGrBterlenQ3znddL30CHFVd4ZoGunMU67EvZILR@RjMphpOB2FSPNgAMjz@oj8RLFogne1CJVjQCd1zEYzbd2JCRcgmQ9aogV4AEm@FADK9LhRIJEHrJSR@3NMcwoY6hQvbgp1F3Kp7G8TU0nes@X4hOVwAIiwi@W1yXR0sOBFOKJVzLKGSCx67G/qQ6vvG6lb17u7gq6XOaZyMeIYQel6b/KxqZ50ecgxzhJvnc/4wtoPWCImEWjDg9yezR61naqB2vJjl1KP4PS8De@6LHctpV5grVEeKxx@eIyPocyUWZtsLebItoiai@hZlybSJKxCD3o/okJBYprMSnMq3sWcNZ95ZdBnHyDmUOQnF/6NhlLg0QFDbn@C7TkOMpyLe9BE4kYWEtT3SNwhPXxDpgX4SLf9VZTafMw0HQ6FZONZAlgZblsqdo6PECsJKURkz9KzbG8suUfAWPcWY31lisSyIcDAof6x76IYzAKSgpVzfuluYXBgsR/dobQ4NqygzU0DNXOylf1vlXPMYW6dw5r@erGcW/eEV9aHCIsyNZ8R7VHs@LJlN0pwjhjPWact6o3kzvuZo7abRMP9fPzPw\"
        title=\"Gol&amp;gt;&amp;lt;&amp;gt; \u2013 Try It Online\"&gt;Try it online!&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaua3m8/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543647311.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543647311.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 17}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eau9bxf", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "Unihedron", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_eau99nx", "score": 4, "author_fullname": "t2_h0e6x",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "I''m really just aiming to finish it as soon as possible, so
        all my code generally looks awful unless I actually have to use a brain cell.
        But I would love to code golf this, and I''m pretty sure I can get even fewer
        characters if I try. That''s not my intent though!", "edited": false, "top_awarded_type":
        null, "downs": 0, "author_flair_css_class": null, "name": "t1_eau9bxf", "is_submitter":
        false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m really just
        aiming to finish it as soon as possible, so all my code generally looks awful
        unless I actually have to use a brain cell. But I would love to code golf
        this, and I&amp;#39;m pretty sure I can get even fewer characters if I try.
        That&amp;#39;s not my intent though!&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau9bxf/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543646142.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543646142.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eau99nx", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "LeCrushinator", "can_mod_post": false,
        "created_utc": 1543646050.0, "send_replies": true, "parent_id": "t1_eau567l",
        "score": 4, "author_fullname": "t2_8mf5r", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "Are you attempting solutions
        using the fewest characters?", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_eau99nx", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Are you attempting solutions using the fewest
        characters?&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_a20646", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau99nx/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543646050.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 4}}, {"kind": "more", "data": {"count": 7, "name": "t1_eaumlnn",
        "id": "eaumlnn", "parent_id": "t1_eau567l", "depth": 1, "children": ["eaumlnn",
        "eauhsi9", "eau6zbg"]}}], "before": null}}, "user_reports": [], "saved": false,
        "id": "eau567l", "banned_at_utc": null, "mod_reason_title": null, "gilded":
        0, "archived": true, "collapsed_reason_code": null, "no_follow": false, "author":
        "Unihedron", "can_mod_post": false, "created_utc": 1543641076.0, "send_replies":
        true, "parent_id": "t3_a20646", "score": 10, "author_fullname": "t2_h0e6x",
        "approved_by": null, "mod_note": null, "all_awardings": [], "collapsed": false,
        "body": "Hi! It''s me! [Image](https://i.imgur.com/Y0yzWtd.png)\n\nPart 1:\n\n    p$&lt;.sum(&amp;:to_i)\n\nPart
        2:\n\n    s={}\n    g=0\n    a=$&lt;.map &amp;:to_i\n    loop{a.map{|x|m=x\n    s[g]=1\n    g+=m.to_i\n    (p
        g\n    exit) if s[g]\n    } }", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_eau567l", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Hi! It&amp;#39;s me! &lt;a href=\"https://i.imgur.com/Y0yzWtd.png\"&gt;Image&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;p$&amp;lt;.sum(&amp;amp;:to_i)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;s={}\ng=0\na=$&amp;lt;.map &amp;amp;:to_i\nloop{a.map{|x|m=x\ns[g]=1\ng+=m.to_i\n(p
        g\nexit) if s[g]\n} }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau567l/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543641076.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 10}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 9, "removal_reason": null, "link_id": "t3_a20646",
        "author_flair_template_id": null, "likes": null, "replies": "", "user_reports":
        [], "saved": false, "id": "eauctxw", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        false, "author": "[deleted]", "can_mod_post": false, "send_replies": true,
        "parent_id": "t1_eaua9k1", "score": 9, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "Looks like
        a cat ran over the keyboard. I love it!", "edited": false, "author_flair_css_class":
        null, "collapsed": false, "downs": 0, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Looks like a cat ran over the keyboard.
        I love it!&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null,
        "associated_award": null, "stickied": false, "subreddit_type": "public", "can_gild":
        false, "top_awarded_type": null, "unrepliable_reason": null, "author_flair_text_color":
        "dark", "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauctxw/",
        "num_reports": null, "locked": false, "name": "t1_eauctxw", "created": 1543652063.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1543652063.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eaufjgx", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "streetster_", "can_mod_post": false, "created_utc":
        1543656743.0, "send_replies": true, "parent_id": "t1_eaua9k1", "score": 2,
        "author_fullname": "t2_smf31", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "&gt;(+/x),\\*s@&amp;\\~((#d)#s)=d:?s:+\\\\1000000#x:\"I\"$0:\\`p1\n\nNice.\n\n    (+/x),s@+/((#d)#s)=d:?s:0i,+\\1000000#x:\"I\"$0:`p1\n\n\\^
        this also works for me (prepend 0i to work with the -1 +1 test case). Yours
        is much more elegant than my solution!", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eaufjgx", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;(+/x),*s@&amp;amp;~((#d)#s)=d:?s:+\\1000000#x:&amp;quot;I&amp;quot;$0:`p1&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Nice.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(+/x),s@+/((#d)#s)=d:?s:0i,+\\1000000#x:&amp;quot;I&amp;quot;$0:`p1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;^
        this also works for me (prepend 0i to work with the -1 +1 test case). Yours
        is much more elegant than my solution!&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaufjgx/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543656743.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ebdnceh",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "will_bui",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_eavlf8y", "score":
        2, "author_fullname": "t2_2lu794w8", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "Opted for the longer
        one as this grows the distinct array. Also had this one, slower though:\n(+/x),&amp;/&amp;2=#:''=+\\1000000#x:\"J\"$0:`p1\n",
        "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_ebdnceh", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Opted
        for the longer one as this grows the distinct array. Also had this one, slower
        though:\n(+/x),&amp;amp;/&amp;amp;2=#:&amp;#39;=+\\1000000#x:&amp;quot;J&amp;quot;$0:`p1&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/ebdnceh/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1544301204.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1544301204.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eavlf8y", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "chneukirchen", "can_mod_post": false,
        "created_utc": 1543698164.0, "send_replies": true, "parent_id": "t1_eaua9k1",
        "score": 2, "author_fullname": "t2_2l43", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "Slightly shorter 2nd
        part:\n\n```\nf@*&amp;~f=(#f)#?f:+\\150000#\"I\"$0:`p1\n```", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eavlf8y",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Slightly shorter 2nd
        part:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\nf@*&amp;amp;~f=(#f)#?f:+\\150000#&amp;quot;I&amp;quot;$0:`p1\n&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavlf8y/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543698164.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eaua9k1", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "will_bui", "can_mod_post": false, "created_utc":
        1543647572.0, "send_replies": true, "parent_id": "t3_a20646", "score": 12,
        "author_fullname": "t2_2lu794w8", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "K:\n\n    (+/x),*s@&amp;~((#d)#s)=d:?s:+\\1000000#x:\"I\"$0:`p1",
        "edited": 1543652078.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eaua9k1", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;K:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(+/x),*s@&amp;amp;~((#d)#s)=d:?s:+\\1000000#x:&amp;quot;I&amp;quot;$0:`p1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaua9k1/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543647572.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 12}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eau7r9y",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "daggerdragon",
        "can_mod_post": false, "created_utc": 1543644052.0, "send_replies": true,
        "parent_id": "t1_eau59xw", "score": 6, "author_fullname": "t2_60niu", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "&gt;One does not simply write regular expressions during Advent Of Code.\n&gt;\n&gt;Unless
        you''re skalski, of course.\n\n`#AoCOps [00:33:00] &lt;askalski&gt; heh, regex`",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eau7r9y", "is_submitter": true, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;One
        does not simply write regular expressions during Advent Of Code.&lt;/p&gt;\n\n&lt;p&gt;Unless
        you&amp;#39;re skalski, of course.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;code&gt;#AoCOps
        [00:33:00] &amp;lt;askalski&amp;gt; heh, regex&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": "moderator", "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau7r9y/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543644052.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 6}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eau59xw", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "raevnos", "can_mod_post": false, "created_utc":
        1543641197.0, "send_replies": true, "parent_id": "t3_a20646", "score": 9,
        "author_fullname": "t2_3995k", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Perl:\n\n    #!/usr/bin/perl\n    use warnings;\n    use
        strict;\n    use autodie;\n    use feature qw/say/;\n    \n    my $freq =
        0;\n    my @shifts;\n    \n    open my $shifts, \"&lt;\", \"day01.txt\";\n    while
        (&lt;$shifts&gt;) {\n      chomp;\n      $freq += $_;\n      push @shifts,
        $_;\n    }\n    \n    say \"Part 1: $freq\";\n    \n    my %freqs = ( 0 =&gt;
        1 );\n    $freq  = 0;\n    while (1) {\n      for (@shifts) {\n        $freq
        += $_;\n        if (++$freqs{$freq} == 2) {\n          say \"Part 2: $freq\";\n          exit
        0;\n        }\n      }\n    }\n    \n\nOne does not simply write regular expressions
        during Advent Of Code.\n\nUnless you''re skalski, of course.", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eau59xw",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Perl:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/usr/bin/perl\nuse
        warnings;\nuse strict;\nuse autodie;\nuse feature qw/say/;\n\nmy $freq = 0;\nmy
        @shifts;\n\nopen my $shifts, &amp;quot;&amp;lt;&amp;quot;, &amp;quot;day01.txt&amp;quot;;\nwhile
        (&amp;lt;$shifts&amp;gt;) {\n  chomp;\n  $freq += $_;\n  push @shifts, $_;\n}\n\nsay
        &amp;quot;Part 1: $freq&amp;quot;;\n\nmy %freqs = ( 0 =&amp;gt; 1 );\n$freq  =
        0;\nwhile (1) {\n  for (@shifts) {\n    $freq += $_;\n    if (++$freqs{$freq}
        == 2) {\n      say &amp;quot;Part 2: $freq&amp;quot;;\n      exit 0;\n    }\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;One
        does not simply write regular expressions during Advent Of Code.&lt;/p&gt;\n\n&lt;p&gt;Unless
        you&amp;#39;re skalski, of course.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau59xw/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543641197.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 9}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 6, "removal_reason": null, "link_id": "t3_a20646",
        "author_flair_template_id": null, "likes": null, "replies": {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaurj1m",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "itsnotxhad",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_eau8q7a", "score":
        2, "author_fullname": "t2_tyj1v", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Me when writing up this solution:
        how did I not already know `in-cycle` existed?\n\nMe when reading this reply:
        how did I not already know `file-&gt;lines` existed?", "edited": false, "top_awarded_type":
        null, "downs": 0, "author_flair_css_class": null, "name": "t1_eaurj1m", "is_submitter":
        false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Me when writing up this
        solution: how did I not already know &lt;code&gt;in-cycle&lt;/code&gt; existed?&lt;/p&gt;\n\n&lt;p&gt;Me
        when reading this reply: how did I not already know &lt;code&gt;file-&amp;gt;lines&lt;/code&gt;
        existed?&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null,
        "distinguished": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "link_id": "t3_a20646", "unrepliable_reason": null,
        "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaurj1m/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543673580.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543673580.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eau8q7a", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        "DELETED", "no_follow": false, "author": "[deleted]", "can_mod_post": false,
        "send_replies": true, "parent_id": "t1_eau735j", "score": 6, "approved_by":
        null, "report_reasons": null, "all_awardings": [], "subreddit_id": "t5_3b3wa",
        "body": "[deleted]", "edited": 1612968214.0, "author_flair_css_class": null,
        "collapsed": true, "downs": 0, "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "associated_award": null, "stickied": false, "subreddit_type":
        "public", "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau8q7a/", "num_reports":
        null, "locked": false, "name": "t1_eau8q7a", "created": 1543645277.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543645277.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 6, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eauf1g9", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_eau735j", "score":
        6, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Shortened a bit for your viewing pleasure. Also file-&gt;list
        handles the number conversion for you.\n\n    #lang racket\n    \n    (let
        ([data (file-&gt;list \"input.txt\")])\n      (println (apply + data))\n      (println
        (for/fold ([seen (set)]\n                          [freq 0]\n                          #:result
        freq)\n                         ([num (in-cycle data)]\n                          #:break
        (set-member? seen freq))\n                 (let ([next (+ freq num)])\n                   (values
        (set-add seen freq) next)))))\n", "edited": 1543702139.0, "author_flair_css_class":
        null, "collapsed": false, "downs": 0, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Shortened a bit for your viewing pleasure.
        Also file-&amp;gt;list handles the number conversion for you.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#lang
        racket\n\n(let ([data (file-&amp;gt;list &amp;quot;input.txt&amp;quot;)])\n  (println
        (apply + data))\n  (println (for/fold ([seen (set)]\n                      [freq
        0]\n                      #:result freq)\n                     ([num (in-cycle
        data)]\n                      #:break (set-member? seen freq))\n             (let
        ([next (+ freq num)])\n               (values (set-add seen freq) next)))))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauf1g9/",
        "num_reports": null, "locked": false, "name": "t1_eauf1g9", "created": 1543655825.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1543655825.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_eavvn37", "id": "eavvn37", "parent_id":
        "t1_eau735j", "depth": 1, "children": ["eavvn37"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "eau735j", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        false, "author": "itsnotxhad", "can_mod_post": false, "created_utc": 1543643282.0,
        "send_replies": true, "parent_id": "t3_a20646", "score": 10, "author_fullname":
        "t2_tyj1v", "approved_by": null, "mod_note": null, "all_awardings": [], "collapsed":
        false, "body": "Racket:\n\n    #lang racket\n\n    (define (file-&gt;numbers
        file)\n      (file-position file 0)\n      (for/list ([line (in-port read-line
        file)])\n        (string-&gt;number line)))\n\n    (define (part1 file)\n      (apply
        + (file-&gt;numbers file)))\n\n    (define (part2 file)\n      (define numbers
        (file-&gt;numbers file))\n      (for/fold ([seen (set)]\n                 [current-frequency
        0]\n                 #:result current-frequency)\n                ([num (in-cycle
        numbers)]\n                 #:break (set-member? seen current-frequency))\n        (let
        ([next (+ current-frequency num)])\n          (values\n           (set-add
        seen current-frequency)\n           next))))\n\n    (module+ main\n      (define
        infile (open-input-file \"input/day1.txt\"))\n      (displayln (part1 infile))\n      (displayln
        (part2 infile))\n      (close-input-port infile))\n", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eau735j", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Racket:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#lang
        racket\n\n(define (file-&amp;gt;numbers file)\n  (file-position file 0)\n  (for/list
        ([line (in-port read-line file)])\n    (string-&amp;gt;number line)))\n\n(define
        (part1 file)\n  (apply + (file-&amp;gt;numbers file)))\n\n(define (part2 file)\n  (define
        numbers (file-&amp;gt;numbers file))\n  (for/fold ([seen (set)]\n             [current-frequency
        0]\n             #:result current-frequency)\n            ([num (in-cycle
        numbers)]\n             #:break (set-member? seen current-frequency))\n    (let
        ([next (+ current-frequency num)])\n      (values\n       (set-add seen current-frequency)\n       next))))\n\n(module+
        main\n  (define infile (open-input-file &amp;quot;input/day1.txt&amp;quot;))\n  (displayln
        (part1 infile))\n  (displayln (part2 infile))\n  (close-input-port infile))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau735j/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543643282.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 10}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eau737d", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "askalski", "can_mod_post": false, "created_utc":
        1543643284.0, "send_replies": true, "parent_id": "t3_a20646", "score": 10,
        "author_fullname": "t2_so7w7", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Perl, of course.  I won''t be able to fully
        commit to the AoC festivities this year until after next weekend (I need to
        be well-rested for playing with Rubik''s cubes in Pittsburgh.)\n\nOne does
        not simply sleep during Advent of Code... but I will try.\n\n    #! /usr/bin/perl\n    \n    my
        $last = 0;\n    my @freq = map { $last = $_ += $last } &lt;&gt;;\n    my %seen
        = map { $_, undef } @freq;\n    while () {\n        for (@freq) {\n            die
        \"Part 1: $last\\nPart 2: $_\\n\"\n                if exists $seen{$_ += $last}\n        }\n    }",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eau737d", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Perl,
        of course.  I won&amp;#39;t be able to fully commit to the AoC festivities
        this year until after next weekend (I need to be well-rested for playing with
        Rubik&amp;#39;s cubes in Pittsburgh.)&lt;/p&gt;\n\n&lt;p&gt;One does not simply
        sleep during Advent of Code... but I will try.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!
        /usr/bin/perl\n\nmy $last = 0;\nmy @freq = map { $last = $_ += $last } &amp;lt;&amp;gt;;\nmy
        %seen = map { $_, undef } @freq;\nwhile () {\n    for (@freq) {\n        die
        &amp;quot;Part 1: $last\\nPart 2: $_\\n&amp;quot;\n            if exists $seen{$_
        += $last}\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau737d/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543643284.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 10}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "more", "data": {"count":
        5, "name": "t1_eautshc", "id": "eautshc", "parent_id": "t1_eauaish", "depth":
        2, "children": ["eautshc"]}}], "before": null}}, "user_reports": [], "saved":
        false, "id": "eauaish", "banned_at_utc": null, "mod_reason_title": null, "gilded":
        0, "archived": true, "collapsed_reason_code": null, "no_follow": false, "author":
        "tobiasvl", "can_mod_post": false, "created_utc": 1543647983.0, "send_replies":
        true, "parent_id": "t1_eau5zol", "score": 5, "author_fullname": "t2_f1p33",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "&gt; sadly didn''t manage to hit the leaderboards but I got close
        (144 and 173).\n\nYesss, I beat you for part 2! I got 172 :D", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eauaish",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;sadly
        didn&amp;#39;t manage to hit the leaderboards but I got close (144 and 173).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Yesss,
        I beat you for part 2! I got 172 :D&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauaish/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543647983.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 5}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "more", "data": {"count":
        3, "name": "t1_eauacne", "id": "eauacne", "parent_id": "t1_eau6u4i", "depth":
        3, "children": ["eauacne"]}}], "before": null}}, "user_reports": [], "saved":
        false, "id": "eau6u4i", "banned_at_utc": null, "mod_reason_title": null, "gilded":
        0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author":
        "GeneralYouri", "can_mod_post": false, "send_replies": true, "parent_id":
        "t1_eau6hk6", "score": 3, "author_fullname": "t2_agvt2", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Ah that sucks! Reddit''s redesign has caused so many more problems than solutions
        so far, it sucks to see that happen constantly. \n\nLeast I can do to help
        is to notify about these easy to miss details. Thanks for all your hard work!",
        "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_eau6u4i", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ah
        that sucks! Reddit&amp;#39;s redesign has caused so many more problems than
        solutions so far, it sucks to see that happen constantly. &lt;/p&gt;\n\n&lt;p&gt;Least
        I can do to help is to notify about these easy to miss details. Thanks for
        all your hard work!&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_a20646", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau6u4i/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543642994.0,
        "author_flair_text": null, "treatment_tags": [], "created_utc": 1543642994.0,
        "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0, "depth":
        2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eau6hk6", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "daggerdragon", "can_mod_post": false,
        "created_utc": 1543642593.0, "send_replies": true, "parent_id": "t1_eau5zol",
        "score": 3, "author_fullname": "t2_60niu", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "&gt; Edit: /u/daggerdragon
        You may want to know that the link to \"Advent of Code: The Party Game!\"
        is a relative one and therefore links to a reddit 404; either it should be
        an absolute link or the page doesn''t exist (yet?).\n\nI know, I''m still
        working on stuff.  When reddit released their new redesign earlier this year,
        none of the styling copies over from old to new nor syncs when changes are
        made to one version, so now I essentially have to maintain *two* subreddits
        which means 2x the work every day -_-  I''m getting there, but thanks for
        the heads up.", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eau6hk6", "is_submitter": true, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Edit:
        &lt;a href=\"/u/daggerdragon\"&gt;/u/daggerdragon&lt;/a&gt; You may want to
        know that the link to &amp;quot;Advent of Code: The Party Game!&amp;quot;
        is a relative one and therefore links to a reddit 404; either it should be
        an absolute link or the page doesn&amp;#39;t exist (yet?).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I
        know, I&amp;#39;m still working on stuff.  When reddit released their new
        redesign earlier this year, none of the styling copies over from old to new
        nor syncs when changes are made to one version, so now I essentially have
        to maintain &lt;em&gt;two&lt;/em&gt; subreddits which means 2x the work every
        day -_-  I&amp;#39;m getting there, but thanks for the heads up.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": "moderator", "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau6hk6/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543642593.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "more",
        "data": {"count": 10, "name": "t1_eauaqrh", "id": "eauaqrh", "parent_id":
        "t1_eau5zol", "depth": 1, "children": ["eauaqrh", "eavwmm2", "eaxsj41", "eav2fg6"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "eau5zol", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "GeneralYouri", "can_mod_post": false,
        "created_utc": 1543642034.0, "send_replies": true, "parent_id": "t3_a20646",
        "score": 6, "author_fullname": "t2_agvt2", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "My first attempt at
        joining live, sadly didn''t manage to hit the leaderboards but I got close
        (144 and 173).\n\nAs for the card prompt: `Sleep` would be what I''d put there.
        (Seriously it''s 6am here why am I awake?)\n\n**JavaScript**\n\nPart 1:\n\n    (input)
        =&gt; input.split(/\\n/g).reduce((acc, change) =&gt; acc + Number(change),
        0);\n\nPart 2:\n\n    (input) =&gt; {\n        const deltas = input.split(/\\n/g);\n        const
        seen = {};\n        let frequency = 0;\n\n        while (true) {\n            for
        (const delta of deltas) {\n                frequency += Number(delta);\n                if
        (seen[frequency]) {\n                    return frequency;\n                }\n                seen[frequency]
        = true;\n            }\n        }\n    };\n\nOfcourse the logic itself is
        simple. Use `Number` to parse the frequency deltas. Part 1 simply sums the
        deltas, while part 2 uses a simple map to keep track of frequencies as it
        applies deltas. A simple `while (true)` ensures the algorithm can iterate
        the list of deltas multiple times.\n\n**Edit:** /u/daggerdragon You may want
        to know that the link to \"Advent of Code: The Party Game!\" is a relative
        one and therefore links to a reddit 404; either it should be an absolute link
        or the page doesn''t exist (yet?).\n\n**Edit 2:** I''ve since made a couple
        small changes to the code. If anyone''s interested they can be found [in my
        AoC project on GitHub](https://github.com/GeneralYouri/AOC/tree/master/src/2018/day1).",
        "edited": 1543708053.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eau5zol", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My
        first attempt at joining live, sadly didn&amp;#39;t manage to hit the leaderboards
        but I got close (144 and 173).&lt;/p&gt;\n\n&lt;p&gt;As for the card prompt:
        &lt;code&gt;Sleep&lt;/code&gt; would be what I&amp;#39;d put there. (Seriously
        it&amp;#39;s 6am here why am I awake?)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(input) =&amp;gt; input.split(/\\n/g).reduce((acc,
        change) =&amp;gt; acc + Number(change), 0);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(input) =&amp;gt; {\n    const deltas
        = input.split(/\\n/g);\n    const seen = {};\n    let frequency = 0;\n\n    while
        (true) {\n        for (const delta of deltas) {\n            frequency +=
        Number(delta);\n            if (seen[frequency]) {\n                return
        frequency;\n            }\n            seen[frequency] = true;\n        }\n    }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Ofcourse
        the logic itself is simple. Use &lt;code&gt;Number&lt;/code&gt; to parse the
        frequency deltas. Part 1 simply sums the deltas, while part 2 uses a simple
        map to keep track of frequencies as it applies deltas. A simple &lt;code&gt;while
        (true)&lt;/code&gt; ensures the algorithm can iterate the list of deltas multiple
        times.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt; &lt;a href=\"/u/daggerdragon\"&gt;/u/daggerdragon&lt;/a&gt;
        You may want to know that the link to &amp;quot;Advent of Code: The Party
        Game!&amp;quot; is a relative one and therefore links to a reddit 404; either
        it should be an absolute link or the page doesn&amp;#39;t exist (yet?).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit
        2:&lt;/strong&gt; I&amp;#39;ve since made a couple small changes to the code.
        If anyone&amp;#39;s interested they can be found &lt;a href=\"https://github.com/GeneralYouri/AOC/tree/master/src/2018/day1\"&gt;in
        my AoC project on GitHub&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau5zol/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543642034.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 6}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 8, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eau66w8", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_a20646", "score":
        8, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Haskell:\n\n    import qualified Data.IntSet as S\n    \n    readInts
        :: String -&gt; [Int]\n    readInts = map (read . filter (/= ''+'')) . lines\n    \n    part1
        :: String -&gt; Int\n    part1 = sum . readInts\n    \n    part2 :: String
        -&gt; Int\n    part2 = go S.empty . scanl (+) 0 . cycle . readInts\n        where
        go s (x:xs)\n                  | x `S.member` s = x\n                  | otherwise
        = go (S.insert x s) xs\n    \n    main = do\n      input &lt;- readFile \"input.txt\"\n      print
        $ part1 input\n      print $ part2 input\n", "edited": false, "downs": 0,
        "author_flair_css_class": null, "collapsed": false, "is_submitter": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Haskell:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        qualified Data.IntSet as S\n\nreadInts :: String -&amp;gt; [Int]\nreadInts
        = map (read . filter (/= &amp;#39;+&amp;#39;)) . lines\n\npart1 :: String
        -&amp;gt; Int\npart1 = sum . readInts\n\npart2 :: String -&amp;gt; Int\npart2
        = go S.empty . scanl (+) 0 . cycle . readInts\n    where go s (x:xs)\n              |
        x `S.member` s = x\n              | otherwise = go (S.insert x s) xs\n\nmain
        = do\n  input &amp;lt;- readFile &amp;quot;input.txt&amp;quot;\n  print $
        part1 input\n  print $ part2 input\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau66w8/",
        "num_reports": null, "locked": false, "name": "t1_eau66w8", "created": 1543642257.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1543642257.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "more",
        "data": {"count": 4, "name": "t1_eaurnp5", "id": "eaurnp5", "parent_id": "t1_eaupjaz",
        "depth": 3, "children": ["eaurnp5"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "eaupjaz", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "ExeuntTheDragon", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_eauiosz", "score": 2, "author_fullname": "t2_qw9xv",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "Interesting, I found Set quite fast enough", "edited": false,
        "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "name":
        "t1_eaupjaz", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Interesting,
        I found Set quite fast enough&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_a20646", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaupjaz/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543671505.0,
        "author_flair_text": null, "treatment_tags": [], "created_utc": 1543671505.0,
        "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0, "depth":
        2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "more",
        "data": {"count": 1, "name": "t1_eavkq8f", "id": "eavkq8f", "parent_id": "t1_eauiosz",
        "depth": 2, "children": ["eavkq8f"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "eauiosz", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        false, "author": "Tayacan", "can_mod_post": false, "created_utc": 1543662396.0,
        "send_replies": true, "parent_id": "t1_eau6u0q", "score": 5, "author_fullname":
        "t2_af201", "removal_reason": null, "approved_by": null, "mod_note": null,
        "all_awardings": [], "body": "Holy shit, using IntSet instead of Set speeds
        it up. Why didn''t I think of that? :D", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eauiosz", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Holy shit, using IntSet instead
        of Set speeds it up. Why didn&amp;#39;t I think of that? :D&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauiosz/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543662396.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 5}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 2, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eavntu7", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_eau6u0q", "score":
        2, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "&gt; Haskell\n\nI was using a regular old list to track
        looking for duplicates and it was so slow on the real input I never saw it
        finished. Using Set made it finish almost immediately lol", "edited": false,
        "author_flair_css_class": null, "collapsed": false, "downs": 0, "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Haskell&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I
        was using a regular old list to track looking for duplicates and it was so
        slow on the real input I never saw it finished. Using Set made it finish almost
        immediately lol&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "subreddit_type": "public",
        "can_gild": false, "top_awarded_type": null, "unrepliable_reason": null, "author_flair_text_color":
        "dark", "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavntu7/",
        "num_reports": null, "locked": false, "name": "t1_eavntu7", "created": 1543700047.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1543700047.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "eau6u0q", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "jorosp", "can_mod_post": false, "created_utc":
        1543642991.0, "send_replies": true, "parent_id": "t3_a20646", "score": 8,
        "author_fullname": "t2_1wnlsskr", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "###Haskell\n\nI initially used a list instead
        of a set and it slowed me down a lot. This runs rather quick.\n\n    import
        qualified Data.IntSet as S\n    import Data.IntSet (IntSet)\n    \n    solve1
        :: [Int] -&gt; Int\n    solve1 = sum\n    \n    solve2 :: [Int] -&gt; Int\n    solve2
        = go (S.fromList []) 0 . cycle \n      where\n        go :: IntSet -&gt; Int
        -&gt; [Int] -&gt; Int\n        go fs f (x:xs)\n          | f `S.member` fs
        = f\n          | otherwise       = go (S.insert f fs) (f + x) xs        \n    \n    main
        :: IO ()\n    main = do\n      input &lt;- readFile \"input.txt\"\n      let
        ints = read . map repl &lt;$&gt; lines input\n      print . solve1 $ ints\n      print
        . solve2 $ ints\n        where      \n          repl ''+'' = '' ''\n          repl
        c   = c", "edited": 1543643244.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eau6u0q", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h3&gt;Haskell&lt;/h3&gt;\n\n&lt;p&gt;I
        initially used a list instead of a set and it slowed me down a lot. This runs
        rather quick.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import qualified Data.IntSet
        as S\nimport Data.IntSet (IntSet)\n\nsolve1 :: [Int] -&amp;gt; Int\nsolve1
        = sum\n\nsolve2 :: [Int] -&amp;gt; Int\nsolve2 = go (S.fromList []) 0 . cycle
        \n  where\n    go :: IntSet -&amp;gt; Int -&amp;gt; [Int] -&amp;gt; Int\n    go
        fs f (x:xs)\n      | f `S.member` fs = f\n      | otherwise       = go (S.insert
        f fs) (f + x) xs        \n\nmain :: IO ()\nmain = do\n  input &amp;lt;- readFile
        &amp;quot;input.txt&amp;quot;\n  let ints = read . map repl &amp;lt;$&amp;gt;
        lines input\n  print . solve1 $ ints\n  print . solve2 $ ints\n    where      \n      repl
        &amp;#39;+&amp;#39; = &amp;#39; &amp;#39;\n      repl c   = c\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau6u0q/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543642991.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 8}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 8, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 1, "name": "t1_eawpn1e",
        "id": "eawpn1e", "parent_id": "t1_eawmvzi", "depth": 2, "children": ["eawpn1e"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "eawmvzi", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "rbjorklin", "can_mod_post": false, "created_utc":
        1543731536.0, "send_replies": true, "parent_id": "t1_eau6xb9", "score": 2,
        "author_fullname": "t2_uf0lw", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Thank you so much for this!
        I''m trying to learn OCaml and looking at your solution of part two exposed
        me to new parts of the Base package! Unfortunately the documentation on Base
        is sub-par and had it not been for your code and the Merlin auto-completion
        it would have completely passed me by that fold\\_until is a part of the Sequence
        module. Also how do I find out that I can do Int.Set? I can''t find any documentation
        on it... (My google-fu might be weak here...)", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eawmvzi", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thank you so much for this!
        I&amp;#39;m trying to learn OCaml and looking at your solution of part two
        exposed me to new parts of the Base package! Unfortunately the documentation
        on Base is sub-par and had it not been for your code and the Merlin auto-completion
        it would have completely passed me by that fold_until is a part of the Sequence
        module. Also how do I find out that I can do Int.Set? I can&amp;#39;t find
        any documentation on it... (My google-fu might be weak here...)&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eawmvzi/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543731536.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eau6xb9", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "[deleted]", "can_mod_post": false, "send_replies":
        true, "parent_id": "t3_a20646", "score": 8, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "Back with
        more OCaml fun!\n\n```open Core\n\nlet input = In_channel.read_lines \"input.txt\"\n            |&gt;
        List.map ~f:Int.of_string\n\nlet part_one = \n  input\n  |&gt; List.reduce
        ~f:(+)\n  |&gt; Option.value ~default:0\n\ntype t = { seen:Int.Set.t; current:Int.t
        }\n\nlet running_sum acc curr = \n  let open Container.Continue_or_stop in\n  let
        next = acc.current + curr in \n  if not (Int.Set.mem acc.seen next) then\n    let
        seen = Int.Set.add acc.seen next in \n    let current = next in \n    Continue
        {seen; current}\n  else Stop next\n\nlet finish t =\n  t.current\n\nlet part_two
        = \n  let seen = Int.Set.empty in \n  let current = 0 in \n  input\n  |&gt;
        Sequence.cycle_list_exn\n  |&gt; Sequence.fold_until ~init:{seen; current}
        ~f:running_sum ~finish\n\nlet _ = \n  printf \"%d\\n\" part_one;\n  printf
        \"%d\" part_two;\n```", "edited": false, "downs": 0, "author_flair_css_class":
        null, "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Back
        with more OCaml fun!&lt;/p&gt;\n\n&lt;p&gt;```open Core&lt;/p&gt;\n\n&lt;p&gt;let
        input = In_channel.read_lines &amp;quot;input.txt&amp;quot;\n            |&amp;gt;
        List.map ~f:Int.of_string&lt;/p&gt;\n\n&lt;p&gt;let part_one = \n  input\n  |&amp;gt;
        List.reduce ~f:(+)\n  |&amp;gt; Option.value ~default:0&lt;/p&gt;\n\n&lt;p&gt;type
        t = { seen:Int.Set.t; current:Int.t }&lt;/p&gt;\n\n&lt;p&gt;let running_sum
        acc curr = \n  let open Container.Continue_or_stop in\n  let next = acc.current
        + curr in \n  if not (Int.Set.mem acc.seen next) then\n    let seen = Int.Set.add
        acc.seen next in \n    let current = next in \n    Continue {seen; current}\n  else
        Stop next&lt;/p&gt;\n\n&lt;p&gt;let finish t =\n  t.current&lt;/p&gt;\n\n&lt;p&gt;let
        part_two = \n  let seen = Int.Set.empty in \n  let current = 0 in \n  input\n  |&amp;gt;
        Sequence.cycle_list_exn\n  |&amp;gt; Sequence.fold_until ~init:{seen; current}
        ~f:running_sum ~finish&lt;/p&gt;\n\n&lt;p&gt;let _ = \n  printf &amp;quot;%d\\n&amp;quot;
        part_one;\n  printf &amp;quot;%d&amp;quot; part_two;\n```&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau6xb9/",
        "num_reports": null, "locked": false, "name": "t1_eau6xb9", "created": 1543643095.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1543643095.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauhlai",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "DaDiscoBeat",
        "can_mod_post": false, "created_utc": 1543660449.0, "send_replies": true,
        "parent_id": "t1_eaug7vz", "score": 2, "author_fullname": "t2_107hwl", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Impressive! Nice work :)\n\n", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_eauhlai", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Impressive! Nice work :)&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauhlai/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543660449.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eaug7vz", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "mrhthepie", "can_mod_post": false, "created_utc":
        1543658010.0, "send_replies": true, "parent_id": "t3_a20646", "score": 9,
        "author_fullname": "t2_51m3y", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "So I''ve got kind of a unique post going:
        I''m doing this year in a language (compiler + bytecode VM) that I''ve been
        writing myself over the past few months. (Originally based on [this book](http://craftinginterpreters.com/)
        but it''s not really recognisable at this point). Have spent the last few
        weekends to get it functional enough in time for AoC. Anyway, here''s the
        code for d1:\n\n    fn main() {\n        let input = \"d1input.txt\":readFile();\n        let
        lines = input:split(\"\\n\");\n        let freqs = [];\n        for _, line
        in lines {\n            if line:len() == 0 {\n                continue;\n            }\n            let
        freq = line:parseNumber();\n            freqs:push(freq);\n        }\n\n        let
        total_freq = 0;\n        for _, freq in freqs {\n            total_freq +=
        freq;\n        }\n        print total_freq;\n\n        let reached_freqs =
        #{};\n        let f = -1;\n        let total_freq = 0;\n        loop {\n            f
        = (f + 1) % freqs:len();\n            let freq = freqs[f];\n            total_freq
        += freq;\n            if reached_freqs[total_freq] {\n                print
        total_freq;\n                break;\n            }\n            reached_freqs[total_freq]
        = true;\n        }\n    }\n", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eaug7vz", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;So
        I&amp;#39;ve got kind of a unique post going: I&amp;#39;m doing this year
        in a language (compiler + bytecode VM) that I&amp;#39;ve been writing myself
        over the past few months. (Originally based on &lt;a href=\"http://craftinginterpreters.com/\"&gt;this
        book&lt;/a&gt; but it&amp;#39;s not really recognisable at this point). Have
        spent the last few weekends to get it functional enough in time for AoC. Anyway,
        here&amp;#39;s the code for d1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fn main()
        {\n    let input = &amp;quot;d1input.txt&amp;quot;:readFile();\n    let lines
        = input:split(&amp;quot;\\n&amp;quot;);\n    let freqs = [];\n    for _, line
        in lines {\n        if line:len() == 0 {\n            continue;\n        }\n        let
        freq = line:parseNumber();\n        freqs:push(freq);\n    }\n\n    let total_freq
        = 0;\n    for _, freq in freqs {\n        total_freq += freq;\n    }\n    print
        total_freq;\n\n    let reached_freqs = #{};\n    let f = -1;\n    let total_freq
        = 0;\n    loop {\n        f = (f + 1) % freqs:len();\n        let freq = freqs[f];\n        total_freq
        += freq;\n        if reached_freqs[total_freq] {\n            print total_freq;\n            break;\n        }\n        reached_freqs[total_freq]
        = true;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaug7vz/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543658010.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 9}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eau6pt5", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "haqkm", "can_mod_post": false, "created_utc":
        1543642856.0, "send_replies": true, "parent_id": "t3_a20646", "score": 7,
        "author_fullname": "t2_8h41n", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Elixir\n\n    defmodule Aoc.Year2018.Day01.ChronalCalibration
        do\n      def part_1(input) do\n        input\n        |&gt; String.split(\"\\n\")\n        |&gt;
        Enum.reduce(0, fn x, acc -&gt;\n          {i, \"\"} = Integer.parse(x)\n          i
        + acc\n        end)\n      end\n\n      def part_2(input, start_freq \\\\
        0, prev_freqs \\\\ %{0 =&gt; true}) do\n        res =\n          input\n          |&gt;
        String.split(\"\\n\")\n          |&gt; Enum.reduce_while({start_freq, prev_freqs},
        fn x, {freq, prev_freqs} -&gt;\n            {i, \"\"} = Integer.parse(x)\n            freq
        = i + freq\n\n            if prev_freqs[freq] do\n              {:halt, {:succ,
        freq}}\n            else\n              {:cont, {freq, Map.put(prev_freqs,
        freq, true)}}\n            end\n          end)\n\n        case res do\n          {:succ,
        freq} -&gt; freq\n          {freq, prev_freqs} -&gt; part_2(input, freq, prev_freqs)\n        end\n      end\n    end\n\n",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eau6pt5", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Elixir&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;defmodule
        Aoc.Year2018.Day01.ChronalCalibration do\n  def part_1(input) do\n    input\n    |&amp;gt;
        String.split(&amp;quot;\\n&amp;quot;)\n    |&amp;gt; Enum.reduce(0, fn x,
        acc -&amp;gt;\n      {i, &amp;quot;&amp;quot;} = Integer.parse(x)\n      i
        + acc\n    end)\n  end\n\n  def part_2(input, start_freq \\\\ 0, prev_freqs
        \\\\ %{0 =&amp;gt; true}) do\n    res =\n      input\n      |&amp;gt; String.split(&amp;quot;\\n&amp;quot;)\n      |&amp;gt;
        Enum.reduce_while({start_freq, prev_freqs}, fn x, {freq, prev_freqs} -&amp;gt;\n        {i,
        &amp;quot;&amp;quot;} = Integer.parse(x)\n        freq = i + freq\n\n        if
        prev_freqs[freq] do\n          {:halt, {:succ, freq}}\n        else\n          {:cont,
        {freq, Map.put(prev_freqs, freq, true)}}\n        end\n      end)\n\n    case
        res do\n      {:succ, freq} -&amp;gt; freq\n      {freq, prev_freqs} -&amp;gt;
        part_2(input, freq, prev_freqs)\n    end\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau6pt5/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543642856.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 7}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "awarders": [], "mod_reason_by": null, "banned_by": null, "ups": 3, "removal_reason":
        null, "link_id": "t3_a20646", "author_flair_template_id": null, "likes": null,
        "replies": {"kind": "Listing", "data": {"after": null, "dist": null, "modhash":
        "", "geo_filter": "", "children": [{"kind": "more", "data": {"count": 1, "name":
        "t1_eaujkkd", "id": "eaujkkd", "parent_id": "t1_eaue055", "depth": 3, "children":
        ["eaujkkd"]}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "eaue055", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": false, "author": "[deleted]",
        "can_mod_post": false, "created_utc": 1543654086.0, "send_replies": true,
        "parent_id": "t1_eau618y", "score": 3, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "[deleted]",
        "edited": false, "author_flair_css_class": null, "downs": 0, "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaue055/",
        "num_reports": null, "locked": false, "name": "t1_eaue055", "created": 1543654086.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "collapsed": true, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "eau618y", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "Manhigh", "can_mod_post": false, "created_utc":
        1543642083.0, "send_replies": true, "parent_id": "t1_eau5dlk", "score": 7,
        "author_fullname": "t2_50b7q", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "itertool.cycle is useful for
        the second part, allowing you to do it without nested loops", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eau618y",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;itertool.cycle is useful
        for the second part, allowing you to do it without nested loops&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau618y/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543642083.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 7}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eau5n63", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "ButItMightJustWork", "can_mod_post":
        false, "created_utc": 1543641632.0, "send_replies": true, "parent_id": "t1_eau5dlk",
        "score": 5, "author_fullname": "t2_dq2fuzt", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "&gt; The sample was
        in a different format compared to the actual input (sample was separated by
        commas, actual input was separated by new lines)! It''d be nice if the two
        were consistent.\n\nYes! So much this!\n\nMy first thought was \"Oh no! Now
        I must unpack my regex-skills\". Then I opened the puzzle input and though
        \"Oh neat, no regex today :P\"\n\n", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eau5n63", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;The sample
        was in a different format compared to the actual input (sample was separated
        by commas, actual input was separated by new lines)! It&amp;#39;d be nice
        if the two were consistent.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Yes!
        So much this!&lt;/p&gt;\n\n&lt;p&gt;My first thought was &amp;quot;Oh no!
        Now I must unpack my regex-skills&amp;quot;. Then I opened the puzzle input
        and though &amp;quot;Oh neat, no regex today :P&amp;quot;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau5n63/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543641632.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 5}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "awarders": [], "mod_reason_by": null, "banned_by": null, "ups": 5, "removal_reason":
        null, "link_id": "t3_a20646", "author_flair_template_id": null, "likes": null,
        "replies": {"kind": "Listing", "data": {"after": null, "dist": null, "modhash":
        "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "distinguished": null, "likes": null, "replies": "", "user_reports":
        [], "saved": false, "id": "eauf6l3", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "FM-96", "can_mod_post": false, "send_replies": true, "parent_id":
        "t1_eauf0e8", "score": 3, "author_fullname": "t2_dkb7b", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Oh yeah, I totally missed that that would be 1 otherwise. Thanks.", "edited":
        false, "author_flair_css_class": null, "name": "t1_eauf6l3", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Oh yeah, I totally missed that
        that would be 1 otherwise. Thanks.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "link_id": "t3_a20646", "associated_award": null,
        "stickied": false, "author_premium": true, "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": null, "treatment_tags":
        [], "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauf6l3/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543656081.0, "author_flair_text": null, "collapsed": false, "created_utc":
        1543656081.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 4, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eauf0e8", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        "DELETED", "no_follow": false, "author": "[deleted]", "can_mod_post": false,
        "send_replies": true, "parent_id": "t1_eaudzsc", "score": 5, "approved_by":
        null, "report_reasons": null, "all_awardings": [], "subreddit_id": "t5_3b3wa",
        "body": "[deleted]", "edited": 1577913561.0, "downs": 0, "author_flair_css_class":
        null, "collapsed": true, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauf0e8/",
        "num_reports": null, "locked": false, "name": "t1_eauf0e8", "created": 1543655771.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1543655771.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 3, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "distinguished":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eaufylw", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "FM-96",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_eaufs0s", "score":
        3, "author_fullname": "t2_dkb7b", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Yep, you''re right. That''s
        what I get for not paying attention to the examples, I guess. \ud83d\ude05",
        "edited": false, "author_flair_css_class": null, "name": "t1_eaufylw", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yep, you&amp;#39;re right.
        That&amp;#39;s what I get for not paying attention to the examples, I guess.
        \ud83d\ude05&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "link_id": "t3_a20646", "associated_award": null, "stickied": false,
        "author_premium": true, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": null, "treatment_tags": [], "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaufylw/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543657545.0, "author_flair_text": null, "collapsed": false, "created_utc":
        1543657545.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 4, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eaufs0s", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "Na_rien", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_eaudzsc", "score": 5, "author_fullname": "t2_hy7i7",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Hmm... the first example is supposed to find
        0 as the recurring freq, if your first entry to your memory is 1 then the
        first reapeted freq will be 1.", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_eaufs0s", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Hmm... the first example is supposed to
        find 0 as the recurring freq, if your first entry to your memory is 1 then
        the first reapeted freq will be 1.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaufs0s/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543657205.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543657205.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 5}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eaudzsc", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "FM-96", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_eaubfxb", "score": 3, "author_fullname": "t2_dkb7b",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "Should you add the first 0? The puzzle says \"the first frequency
        it reaches twice\".\n\nThe starting frequency isn''t really *reached*, is
        it?", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_eaudzsc", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Should
        you add the first 0? The puzzle says &amp;quot;the first frequency it reaches
        twice&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;The starting frequency isn&amp;#39;t
        really &lt;em&gt;reached&lt;/em&gt;, is it?&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": true, "can_gild": false, "link_id": "t3_a20646",
        "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaudzsc/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543654069.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543654069.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eaubfxb", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "Na_rien", "can_mod_post": false, "created_utc":
        1543649538.0, "send_replies": true, "parent_id": "t1_eau5dlk", "score": 4,
        "author_fullname": "t2_hy7i7", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Don''t you have a bug in your
        code? You never add the first 0?", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_eaubfxb", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Don&amp;#39;t you have a bug in your code?
        You never add the first 0?&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_a20646", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaubfxb/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543649538.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 4}}, {"kind": "more", "data": {"count": 1, "name": "t1_eaujs76",
        "id": "eaujs76", "parent_id": "t1_eau5dlk", "depth": 1, "children": ["eaujs76"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "eau5dlk", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "mcpower_", "can_mod_post": false, "created_utc":
        1543641318.0, "send_replies": true, "parent_id": "t3_a20646", "score": 6,
        "author_fullname": "t2_5go91", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Python: The sample was in a different format
        compared to the actual input (sample was separated by commas, actual input
        was separated by new lines)! It''d be nice if the two were consistent.\n\nPart
        1:\n\n    lines = inp.splitlines()\n    print(sum(map(int, lines)))\n\nPart
        2:\n\n    lines = inp.splitlines()\n    o = []\n    s = 0\n    for _ in range(1000000):\n        for
        i in map(int, lines):\n            s += i\n            if s in o:\n                print(s)\n                return\n            sprint(s)  #
        prints s when debugging\n            o.append(s)\n\n", "edited": 1543656674.0,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eau5dlk",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python: The sample was
        in a different format compared to the actual input (sample was separated by
        commas, actual input was separated by new lines)! It&amp;#39;d be nice if
        the two were consistent.&lt;/p&gt;\n\n&lt;p&gt;Part 1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;lines
        = inp.splitlines()\nprint(sum(map(int, lines)))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;lines = inp.splitlines()\no = []\ns
        = 0\nfor _ in range(1000000):\n    for i in map(int, lines):\n        s +=
        i\n        if s in o:\n            print(s)\n            return\n        sprint(s)  #
        prints s when debugging\n        o.append(s)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau5dlk/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543641318.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 6}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eaw661m", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Marreliccious",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_eauuqal", "score":
        3, "author_fullname": "t2_ssobf", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "&gt; eval(document.querySelector(''pre'').textContent)\n\nWow,
        nice one :D", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_eaw661m", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;eval(document.querySelector(&amp;#39;pre&amp;#39;).textContent)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Wow,
        nice one :D&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_a20646", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaw661m/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543715122.0,
        "author_flair_text": null, "treatment_tags": [], "created_utc": 1543715122.0,
        "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0, "depth":
        2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eauuqal", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "Cliff122", "can_mod_post": false, "created_utc":
        1543676846.0, "send_replies": true, "parent_id": "t1_eau8o6a", "score": 4,
        "author_fullname": "t2_b4zou", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "`eval(document.querySelector(''pre'').textContent)`
        works as well!", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eauuqal", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;code&gt;eval(document.querySelector(&amp;#39;pre&amp;#39;).textContent)&lt;/code&gt;
        works as well!&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_a20646", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauuqal/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543676846.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauyejb",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "markussss",
        "can_mod_post": false, "created_utc": 1543680255.0, "send_replies": true,
        "parent_id": "t1_eau8o6a", "score": 3, "author_fullname": "t2_5yib8", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Best practices solutions are important! Thank you for providing this.", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eauyejb",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Best practices solutions
        are important! Thank you for providing this.&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauyejb/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543680255.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eau8o6a", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "Marreliccious", "can_mod_post": false,
        "created_utc": 1543645192.0, "send_replies": true, "parent_id": "t3_a20646",
        "score": 6, "author_fullname": "t2_ssobf", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Javascript: Best practices
        solution for solving part 1\n\n&amp;#x200B;\n\n    document.querySelector(''pre'').textContent.split(''\\n'').reduce((acc,
        curr) =&gt; eval(`acc ${curr}`), 0)", "edited": 1543647120.0, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eau8o6a", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Javascript: Best practices
        solution for solving part 1&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;document.querySelector(&amp;#39;pre&amp;#39;).textContent.split(&amp;#39;\\n&amp;#39;).reduce((acc,
        curr) =&amp;gt; eval(`acc ${curr}`), 0)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau8o6a/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543645192.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 6}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 5, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 2, "removal_reason": null, "link_id": "t3_a20646",
        "author_flair_template_id": null, "likes": null, "replies": "", "user_reports":
        [], "saved": false, "id": "eav6n3j", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "[deleted]", "can_mod_post": false, "created_utc": 1543686866.0,
        "send_replies": true, "parent_id": "t1_eauhm5m", "score": 2, "approved_by":
        null, "report_reasons": null, "all_awardings": [], "subreddit_id": "t5_3b3wa",
        "body": "Thanks! I changed it. One line less!", "edited": false, "author_flair_css_class":
        null, "downs": 0, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks!
        I changed it. One line less!&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "subreddit_type": "public",
        "can_gild": false, "top_awarded_type": null, "unrepliable_reason": null, "author_flair_text_color":
        "dark", "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eav6n3j/",
        "num_reports": null, "locked": false, "name": "t1_eav6n3j", "created": 1543686866.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "collapsed": false, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 4, "name": "t1_ebbq8y7", "id": "ebbq8y7", "parent_id":
        "t1_eauhm5m", "depth": 2, "children": ["ebbq8y7", "ebbqp7g"]}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "eauhm5m", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "tbuehlmann", "can_mod_post": false, "created_utc":
        1543660495.0, "send_replies": true, "parent_id": "t1_eau8pho", "score": 5,
        "author_fullname": "t2_ow6ng", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "There''s also Set#add? which
        will add the argument and return the set if it wasn''t included before. Returns
        \\`nil\\` if the argument was already included.", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eauhm5m", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There&amp;#39;s also Set#add?
        which will add the argument and return the set if it wasn&amp;#39;t included
        before. Returns `nil` if the argument was already included.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauhm5m/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543660495.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 5}}, {"kind": "more",
        "data": {"count": 4, "name": "t1_eav37m4", "id": "eav37m4", "parent_id": "t1_eau8pho",
        "depth": 1, "children": ["eav37m4"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "eau8pho", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        false, "author": "[deleted]", "can_mod_post": false, "send_replies": true,
        "parent_id": "t3_a20646", "score": 5, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "Another Ruby.\n\n    require
        ''set''\n    data = File.readlines(''input.txt'').map(&amp;:to_i)\n    puts
        data.sum\n    \n    freq = 0\n    seen = Set.new\n    data.cycle { |num|\n      freq
        += num\n      (puts freq; break) if not seen.add?(freq)\n    }\n", "edited":
        1543686832.0, "downs": 0, "author_flair_css_class": null, "collapsed": false,
        "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Another
        Ruby.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;require &amp;#39;set&amp;#39;\ndata
        = File.readlines(&amp;#39;input.txt&amp;#39;).map(&amp;amp;:to_i)\nputs data.sum\n\nfreq
        = 0\nseen = Set.new\ndata.cycle { |num|\n  freq += num\n  (puts freq; break)
        if not seen.add?(freq)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "subreddit_type": "public", "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau8pho/", "num_reports":
        null, "locked": false, "name": "t1_eau8pho", "created": 1543645245.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543645245.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauj8t1",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "mainhaxor",
        "can_mod_post": false, "created_utc": 1543663245.0, "send_replies": true,
        "parent_id": "t1_eau5lgi", "score": 3, "author_fullname": "t2_79059", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "You can use `HashSet&lt;int&gt;` and the return value of `Add` for part 2:\n\n    int
        cur = 0;\n    HashSet&lt;int&gt; results = new HashSet&lt;int&gt;();\n    for
        (int i = 0; ; i++)\n    {\n        cur += freqs[i % freqs.Length];\n        if
        (!results.Add(cur))\n        {\n            Console.WriteLine(cur);\n            break;\n        }\n    }\n\n\n",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eauj8t1", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You
        can use &lt;code&gt;HashSet&amp;lt;int&amp;gt;&lt;/code&gt; and the return
        value of &lt;code&gt;Add&lt;/code&gt; for part 2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;int
        cur = 0;\nHashSet&amp;lt;int&amp;gt; results = new HashSet&amp;lt;int&amp;gt;();\nfor
        (int i = 0; ; i++)\n{\n    cur += freqs[i % freqs.Length];\n    if (!results.Add(cur))\n    {\n        Console.WriteLine(cur);\n        break;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauj8t1/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543663245.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eau5lgi", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "ValdasTheUnique", "can_mod_post": false,
        "created_utc": 1543641575.0, "send_replies": true, "parent_id": "t3_a20646",
        "score": 6, "author_fullname": "t2_wi8es", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "C#.  No doubt that
        it can be made better, but I tried to go for leaderboard and I kind of did
        (way at the bottom) so I am happy with that.\n\n        public static void
        Part1()\n        {\n            var r = Input.Split(\"\\n\").Select(x =&gt;
        int.Parse(x)).Sum();\n            Console.WriteLine(r);\n        }\n\n        public
        static void Part2()\n        {\n            var list = Input.Split(\"\\n\").Select(x
        =&gt; int.Parse(x)).ToList();\n            var changeDict = new Dictionary&lt;int,
        int&gt;();\n            int i = 0;\n            var sum = 0;\n            while
        (true)\n            {\n                sum += list[i%list.Count];\n                if
        (changeDict.ContainsKey(sum))\n                {\n                    Console.WriteLine(sum);\n                    break;\n                }\n                changeDict.Add(sum,
        0);\n                i++;\n            }\n        }", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eau5lgi", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C#.  No doubt that it can be
        made better, but I tried to go for leaderboard and I kind of did (way at the
        bottom) so I am happy with that.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    public
        static void Part1()\n    {\n        var r = Input.Split(&amp;quot;\\n&amp;quot;).Select(x
        =&amp;gt; int.Parse(x)).Sum();\n        Console.WriteLine(r);\n    }\n\n    public
        static void Part2()\n    {\n        var list = Input.Split(&amp;quot;\\n&amp;quot;).Select(x
        =&amp;gt; int.Parse(x)).ToList();\n        var changeDict = new Dictionary&amp;lt;int,
        int&amp;gt;();\n        int i = 0;\n        var sum = 0;\n        while (true)\n        {\n            sum
        += list[i%list.Count];\n            if (changeDict.ContainsKey(sum))\n            {\n                Console.WriteLine(sum);\n                break;\n            }\n            changeDict.Add(sum,
        0);\n            i++;\n        }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau5lgi/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543641575.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 6}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaua0x9",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "spacetime_bender",
        "can_mod_post": false, "created_utc": 1543647196.0, "send_replies": true,
        "parent_id": "t1_eau5t29", "score": 2, "author_fullname": "t2_i6qaf", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "    std::vector&lt;int&gt; data;\n    std::copy (std::istream_iterator&lt;int&gt;
        (std::cin), {}, std::back_inserter (data));\ncould collpase to\n\n    std::vector&lt;int&gt;
        data {std::istream_iterator&lt;int&gt; {std::cin}, {}};\n\nlove that one-liner
        solution for part one :D", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eaua0x9", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;std::vector&amp;lt;int&amp;gt;
        data;\nstd::copy (std::istream_iterator&amp;lt;int&amp;gt; (std::cin), {},
        std::back_inserter (data));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;could collpase
        to&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;std::vector&amp;lt;int&amp;gt; data
        {std::istream_iterator&amp;lt;int&amp;gt; {std::cin}, {}};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;love
        that one-liner solution for part one :D&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaua0x9/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543647196.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eauv62i", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "antfarmar", "can_mod_post": false, "created_utc":
        1543677267.0, "send_replies": true, "parent_id": "t1_eau5t29", "score": 2,
        "author_fullname": "t2_s014w", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Nice. Did something similar,
        then \"golf\" refactored it a bit.\n\n    int part1(std::vector&lt;int&gt;
        &amp;data) { return std::accumulate(data.begin(), data.end(), 0); }\n    \n    int
        part2(std::vector&lt;int&gt; &amp;data) {\n      int i{0}, sum{0};\n      std::unordered_set&lt;int&gt;
        memo{};\n      while (memo.insert(sum += data[i++ % data.size()]).second);\n      return
        sum;\n    }\n    \n    int main() {\n      std::vector&lt;int&gt; data{std::istream_iterator&lt;int&gt;{std::cin},
        {}};\n      std::cout &lt;&lt; \"\\nPart 1: \" &lt;&lt; part1(data);\n      std::cout
        &lt;&lt; \"\\nPart 2: \" &lt;&lt; part2(data) &lt;&lt; std::endl;\n    }",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eauv62i", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nice.
        Did something similar, then &amp;quot;golf&amp;quot; refactored it a bit.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;int
        part1(std::vector&amp;lt;int&amp;gt; &amp;amp;data) { return std::accumulate(data.begin(),
        data.end(), 0); }\n\nint part2(std::vector&amp;lt;int&amp;gt; &amp;amp;data)
        {\n  int i{0}, sum{0};\n  std::unordered_set&amp;lt;int&amp;gt; memo{};\n  while
        (memo.insert(sum += data[i++ % data.size()]).second);\n  return sum;\n}\n\nint
        main() {\n  std::vector&amp;lt;int&amp;gt; data{std::istream_iterator&amp;lt;int&amp;gt;{std::cin},
        {}};\n  std::cout &amp;lt;&amp;lt; &amp;quot;\\nPart 1: &amp;quot; &amp;lt;&amp;lt;
        part1(data);\n  std::cout &amp;lt;&amp;lt; &amp;quot;\\nPart 2: &amp;quot;
        &amp;lt;&amp;lt; part2(data) &amp;lt;&amp;lt; std::endl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauv62i/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543677267.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "more",
        "data": {"count": 1, "name": "t1_edogscy", "id": "edogscy", "parent_id": "t1_eau5t29",
        "depth": 1, "children": ["edogscy"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "eau5t29", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        false, "author": "willkill07", "can_mod_post": false, "created_utc": 1543641829.0,
        "send_replies": true, "parent_id": "t3_a20646", "score": 6, "author_fullname":
        "t2_7j0ca", "approved_by": null, "mod_note": null, "all_awardings": [], "collapsed":
        false, "body": "### C++\n\n    #include &lt;iostream&gt;\n    #include &lt;iterator&gt;\n    #include
        &lt;numeric&gt;\n    #include &lt;unordered_set&gt;\n    #include &lt;vector&gt;\n    \n    constexpr
        static bool part2 = true;\n    \n    int main() {\n      int sum{0};\n      if
        constexpr (part2) {\n        std::unordered_set&lt;int&gt; uniq;\n        std::vector&lt;int&gt;
        data;\n        std::copy (std::istream_iterator&lt;int&gt; (std::cin), {},
        std::back_inserter (data));\n        int i {0};\n        while (uniq.insert
        (sum += data[i]).second) {\n          i = (i + 1) % data.size();;\n        }\n      }
        else {\n        sum = std::accumulate (std::istream_iterator&lt;int&gt; (std::cin),
        {}, 0);\n      }\n      std::cout &lt;&lt; sum &lt;&lt; ''\\n'';\n      return
        EXIT_SUCCESS;\n    }\n", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eau5t29", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h3&gt;C++&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;#include
        &amp;lt;iostream&amp;gt;\n#include &amp;lt;iterator&amp;gt;\n#include &amp;lt;numeric&amp;gt;\n#include
        &amp;lt;unordered_set&amp;gt;\n#include &amp;lt;vector&amp;gt;\n\nconstexpr
        static bool part2 = true;\n\nint main() {\n  int sum{0};\n  if constexpr (part2)
        {\n    std::unordered_set&amp;lt;int&amp;gt; uniq;\n    std::vector&amp;lt;int&amp;gt;
        data;\n    std::copy (std::istream_iterator&amp;lt;int&amp;gt; (std::cin),
        {}, std::back_inserter (data));\n    int i {0};\n    while (uniq.insert (sum
        += data[i]).second) {\n      i = (i + 1) % data.size();;\n    }\n  } else
        {\n    sum = std::accumulate (std::istream_iterator&amp;lt;int&amp;gt; (std::cin),
        {}, 0);\n  }\n  std::cout &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; &amp;#39;\\n&amp;#39;;\n  return
        EXIT_SUCCESS;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau5t29/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543641829.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 6}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 5, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eau62m9", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_a20646", "score":
        5, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Rust part 1 &amp; 2:\n\n    use std::collections::HashSet;\n\n    use
        utils;\n\n    fn p1(input: &amp;Vec&lt;String&gt;) -&gt; isize {\n        let
        mut sum = 0;\n\n        for freq in input.iter() {\n            let num =
        freq.parse::&lt;isize&gt;().unwrap();\n            sum += num;\n        }\n\n        sum\n    }\n\n    fn
        p2(input: &amp;Vec&lt;String&gt;) -&gt; isize {\n        let mut seen_set
        = HashSet::new();\n        let mut sum = 0;\n\n        for freq in input.iter().cycle()
        {\n            let num = freq.parse::&lt;isize&gt;().unwrap();\n            sum
        += num;\n\n            let was_not_present = seen_set.insert(sum);\n        \n            if
        was_not_present == false {\n                break;\n            }\n        }\n\n        sum\n    }\n\n    pub
        fn run() {\n        let input = utils::open_file_vector(\"inputs/frequency.txt\",
        \"\\r\\n\");\n\n        println!(\"Day 1\");\n        println!(\"p1: {}\",
        p1(&amp;input));\n        println!(\"p2: {}\", p2(&amp;input));\n    }", "edited":
        false, "downs": 0, "author_flair_css_class": null, "collapsed": false, "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Rust part 1 &amp;amp;
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use std::collections::HashSet;\n\nuse
        utils;\n\nfn p1(input: &amp;amp;Vec&amp;lt;String&amp;gt;) -&amp;gt; isize
        {\n    let mut sum = 0;\n\n    for freq in input.iter() {\n        let num
        = freq.parse::&amp;lt;isize&amp;gt;().unwrap();\n        sum += num;\n    }\n\n    sum\n}\n\nfn
        p2(input: &amp;amp;Vec&amp;lt;String&amp;gt;) -&amp;gt; isize {\n    let mut
        seen_set = HashSet::new();\n    let mut sum = 0;\n\n    for freq in input.iter().cycle()
        {\n        let num = freq.parse::&amp;lt;isize&amp;gt;().unwrap();\n        sum
        += num;\n\n        let was_not_present = seen_set.insert(sum);\n\n        if
        was_not_present == false {\n            break;\n        }\n    }\n\n    sum\n}\n\npub
        fn run() {\n    let input = utils::open_file_vector(&amp;quot;inputs/frequency.txt&amp;quot;,
        &amp;quot;\\r\\n&amp;quot;);\n\n    println!(&amp;quot;Day 1&amp;quot;);\n    println!(&amp;quot;p1:
        {}&amp;quot;, p1(&amp;amp;input));\n    println!(&amp;quot;p2: {}&amp;quot;,
        p2(&amp;amp;input));\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "subreddit_type": "public", "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau62m9/", "num_reports":
        null, "locked": false, "name": "t1_eau62m9", "created": 1543642126.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543642126.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eau7x38", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "StanleyMines", "can_mod_post": false,
        "created_utc": 1543644243.0, "send_replies": true, "parent_id": "t3_a20646",
        "score": 5, "author_fullname": "t2_y4m42", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "One does not simply
        \\[get a full night''s sleep\\] during Advent of Code.\n\n&amp;#x200B;\n\nJava:
        (data is an int\\[\\] that is an array initiated to a hardcoded array: {}
        around the input data where all the new lines are replaced with \",\"s.)\n\n    HashSet&lt;Long&gt;
        pastFrequencies = new HashSet&lt;&gt;();\n    \n    boolean partTwoAnswerFound
        = false;\n    long currentFrequency = 0;\n    \n    for (int cyclesComplete
        = 0; !partTwoAnswerFound; cyclesComplete++)\n    {\n      for (int i = 0;
        i &lt; data.length &amp;&amp; !partTwoAnswerFound; i++)\n      {\n        //
        First so we get that zero added.\n        pastFrequencies.add(currentFrequency);\n    \n        //
        The new frequency is the old one plus the change.\n        currentFrequency
        += data[i];\n    \n        // Part one answer. (Ending frequency)\n        if
        (cyclesComplete == 1 &amp;&amp; i == data.length - 1)\n          System.out.println(\"Part
        1: \" + currentFrequency);\n    \n        // Part two answer. (First repeating
        frequency)\n        if (pastFrequencies.contains(currentFrequency))\n        {\n          System.out.println(\"Part
        2: \" + currentFrequency);\n          // And quit cuz we''re done.\n          partTwoAnswerFound
        = true;\n        }\n    \n        // Add it to the list\n        pastFrequencies.add(currentFrequency);\n      }\n    }\n\n&amp;#x200B;",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eau7x38", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;One
        does not simply [get a full night&amp;#39;s sleep] during Advent of Code.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Java:
        (data is an int[] that is an array initiated to a hardcoded array: {} around
        the input data where all the new lines are replaced with &amp;quot;,&amp;quot;s.)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;HashSet&amp;lt;Long&amp;gt;
        pastFrequencies = new HashSet&amp;lt;&amp;gt;();\n\nboolean partTwoAnswerFound
        = false;\nlong currentFrequency = 0;\n\nfor (int cyclesComplete = 0; !partTwoAnswerFound;
        cyclesComplete++)\n{\n  for (int i = 0; i &amp;lt; data.length &amp;amp;&amp;amp;
        !partTwoAnswerFound; i++)\n  {\n    // First so we get that zero added.\n    pastFrequencies.add(currentFrequency);\n\n    //
        The new frequency is the old one plus the change.\n    currentFrequency +=
        data[i];\n\n    // Part one answer. (Ending frequency)\n    if (cyclesComplete
        == 1 &amp;amp;&amp;amp; i == data.length - 1)\n      System.out.println(&amp;quot;Part
        1: &amp;quot; + currentFrequency);\n\n    // Part two answer. (First repeating
        frequency)\n    if (pastFrequencies.contains(currentFrequency))\n    {\n      System.out.println(&amp;quot;Part
        2: &amp;quot; + currentFrequency);\n      // And quit cuz we&amp;#39;re done.\n      partTwoAnswerFound
        = true;\n    }\n\n    // Add it to the list\n    pastFrequencies.add(currentFrequency);\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau7x38/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543644243.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 5}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "more", "data": {"count":
        1, "name": "t1_eaugb5n", "id": "eaugb5n", "parent_id": "t1_eaubm02", "depth":
        2, "children": ["eaugb5n"]}}], "before": null}}, "user_reports": [], "saved":
        false, "id": "eaubm02", "banned_at_utc": null, "mod_reason_title": null, "gilded":
        0, "archived": true, "collapsed_reason_code": null, "no_follow": false, "author":
        "rabuf", "can_mod_post": false, "created_utc": 1543649840.0, "send_replies":
        true, "parent_id": "t1_eau867j", "score": 5, "author_fullname": "t2_38xc9",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "Your solution for part 2 has a subtle glitch that I also had
        in mine. It didn''t bite me with my input data, and probably not yours either.
        But consider the input \"+1, -1, +10\".\n\nYour solution will return \"10\".
        But it should be \"0\".", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eaubm02", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Your
        solution for part 2 has a subtle glitch that I also had in mine. It didn&amp;#39;t
        bite me with my input data, and probably not yours either. But consider the
        input &amp;quot;+1, -1, +10&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;Your solution
        will return &amp;quot;10&amp;quot;. But it should be &amp;quot;0&amp;quot;.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaubm02/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543649840.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 5}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eau867j", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "flaming_bird", "can_mod_post": false,
        "created_utc": 1543644536.0, "send_replies": true, "parent_id": "t3_a20646",
        "score": 5, "author_fullname": "t2_ptn2u", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Common Lisp (with
        Alexandria library loaded and used).\n\nInput:\n\n    (defvar *ints* (read-from-string
        (uiop:strcat \"(\" (read-file-into-string \"~/Downloads/input1\") \")\")))\n\nPart
        1:\n\n    (reduce #''+ *ints*)\n\nPart 2:\n\n    (let ((ints (copy-list *ints*)))\n      (setf
        (cdr (nthcdr (1- (length ints)) ints)) ints)\n      (loop for x in ints\n            with
        ht = (make-hash-table)\n            summing x into sum\n            when (gethash
        sum ht)\n              return sum\n            else\n              do (setf
        (gethash sum ht) t)))", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eau867j", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Common
        Lisp (with Alexandria library loaded and used).&lt;/p&gt;\n\n&lt;p&gt;Input:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(defvar
        *ints* (read-from-string (uiop:strcat &amp;quot;(&amp;quot; (read-file-into-string
        &amp;quot;~/Downloads/input1&amp;quot;) &amp;quot;)&amp;quot;)))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(reduce #&amp;#39;+ *ints*)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(let ((ints (copy-list *ints*)))\n  (setf
        (cdr (nthcdr (1- (length ints)) ints)) ints)\n  (loop for x in ints\n        with
        ht = (make-hash-table)\n        summing x into sum\n        when (gethash
        sum ht)\n          return sum\n        else\n          do (setf (gethash sum
        ht) t)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau867j/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543644536.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 5}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 2, "name": "t1_eaukdc6",
        "id": "eaukdc6", "parent_id": "t1_eaua3h3", "depth": 1, "children": ["eaukdc6",
        "eauf0in"]}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "eaua3h3", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "VikeStep",
        "can_mod_post": false, "created_utc": 1543647305.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 6, "author_fullname": "t2_bncww", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "F#\n\n[Repo](https://github.com/CameronAavik/AdventOfCode/blob/master/Program.fs#L500-L514)\n\nEDIT:
        I found a better algorithm, check my [other comment](https://www.reddit.com/r/adventofcode/comments/a20646/2018_day_1_solutions/eaukxu5/)
        for how it works.\n\nWhile the typical solution to part 2 would involve looping
        over the list multiple times and maintaining a set, it is important to notice
        that the the final solution will be one of the cumulative sums from the initial
        iteration of the frequency changes. Another iteration of the frequency changes
        will be the same cumulative sum list offset by the answer to part 1 (the sum).
        So, what we can do is only populate the set of the first iteration of sums
        and then loop over adding the answer to part 1 while checking if any elements
        are in the set.\n\n    // assume that the parameter is a sequence of deltas
        as integers\n    let solvePart1 = Seq.sum\n    let solvePart2 changes =\n        let
        cumulativeSum =\n            Seq.scan (+) 0 changes // get cumulative sums\n            |&gt;
        Seq.tail // ignore 0 at start\n            |&gt; Seq.toArray // convert to
        array for performance reasons\n        let sumSet = Set.ofArray cumulativeSum\n        let
        finalSum = Array.last cumulativeSum // the final element will be the resulting
        sum\n        let rec iterate sums =\n            let newSums = (Array.map
        ((+) finalSum) sums)\n            let firstMatch = Array.tryFind (fun i -&gt;
        Set.contains i sumSet) newSums\n            match firstMatch with\n            |
        Some x -&gt; x\n            | None -&gt; iterate newSums\n        iterate
        cumulativeSum\n\nOn the older naive algorithm it took about 350ms for me because
        Set.contains is O(log n) in F#. This better algorithm runs in 13ms.", "edited":
        1543672427.0, "top_awarded_type": null, "author_flair_css_class": null, "name":
        "t1_eaua3h3", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;F#&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/CameronAavik/AdventOfCode/blob/master/Program.fs#L500-L514\"&gt;Repo&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;EDIT:
        I found a better algorithm, check my &lt;a href=\"https://www.reddit.com/r/adventofcode/comments/a20646/2018_day_1_solutions/eaukxu5/\"&gt;other
        comment&lt;/a&gt; for how it works.&lt;/p&gt;\n\n&lt;p&gt;While the typical
        solution to part 2 would involve looping over the list multiple times and
        maintaining a set, it is important to notice that the the final solution will
        be one of the cumulative sums from the initial iteration of the frequency
        changes. Another iteration of the frequency changes will be the same cumulative
        sum list offset by the answer to part 1 (the sum). So, what we can do is only
        populate the set of the first iteration of sums and then loop over adding
        the answer to part 1 while checking if any elements are in the set.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;//
        assume that the parameter is a sequence of deltas as integers\nlet solvePart1
        = Seq.sum\nlet solvePart2 changes =\n    let cumulativeSum =\n        Seq.scan
        (+) 0 changes // get cumulative sums\n        |&amp;gt; Seq.tail // ignore
        0 at start\n        |&amp;gt; Seq.toArray // convert to array for performance
        reasons\n    let sumSet = Set.ofArray cumulativeSum\n    let finalSum = Array.last
        cumulativeSum // the final element will be the resulting sum\n    let rec
        iterate sums =\n        let newSums = (Array.map ((+) finalSum) sums)\n        let
        firstMatch = Array.tryFind (fun i -&amp;gt; Set.contains i sumSet) newSums\n        match
        firstMatch with\n        | Some x -&amp;gt; x\n        | None -&amp;gt; iterate
        newSums\n    iterate cumulativeSum\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;On
        the older naive algorithm it took about 350ms for me because Set.contains
        is O(log n) in F#. This better algorithm runs in 13ms.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": true, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaua3h3/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543647305.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 6}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eavitxv", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ZoDalek",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_eav9gnb", "score":
        2, "author_fullname": "t2_12jkz0", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "Thanks for benchmarking!
        I admit performance wasn''t on my mind here, just thought it would be a funny
        approach. Did something similar for last year''s assembly interpreter day
        - the 3 letter variable names made a fine 24-bit integer index into a huge
        array.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_eavitxv", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks
        for benchmarking! I admit performance wasn&amp;#39;t on my mind here, just
        thought it would be a funny approach. Did something similar for last year&amp;#39;s
        assembly interpreter day - the 3 letter variable names made a fine 24-bit
        integer index into a huge array.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavitxv/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543696221.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543696221.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eav9gnb", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "CryZe92", "can_mod_post": false, "created_utc":
        1543689019.0, "send_replies": true, "parent_id": "t1_eaufl7i", "score": 2,
        "author_fullname": "t2_f5xkf", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "That''s an interesting solution
        for part 2. However it seems like that''s still quite a lot slower than using
        a hashset (23.612ms vs. 4.264ms).", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_eav9gnb", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s an interesting solution for
        part 2. However it seems like that&amp;#39;s still quite a lot slower than
        using a hashset (23.612ms vs. 4.264ms).&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eav9gnb/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543689019.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eaufl7i", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "ZoDalek", "can_mod_post": false, "created_utc":
        1543656840.0, "send_replies": true, "parent_id": "t3_a20646", "score": 5,
        "author_fullname": "t2_12jkz0", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "C ([GitHub](https://github.com/sjmulder/aoc/blob/master/2018/day01/day01b.c)):\n\n    int
        accum = 0;\n    int change;\n    unsigned byte, bit;\n    char *bitfield;\n\n    if
        (!(bitfield = calloc(UINT_MAX / 8, 1)))\n    \terr(1, \"calloc\");\n\n    bitfield[0]
        = 1;\n\n    while (scanf(\" %d\", &amp;change) == 1) {\n    \taccum += change;\n\n    \tbyte
        = (unsigned)accum / 8;\n    \tbit = 1 &lt;&lt; ((unsigned)accum % 8);\n\n    \tif
        (bitfield[byte] &amp; bit) {\n    \t\tprintf(\"%d\\n\", accum);\n    \t\treturn
        0;\n    \t}\n\n    \tbitfield[byte] = bitfield[byte] | bit;\n    }\n\n    if
        (ferror(stdin))\n    \terr(1, NULL);\n\n    puts(\"no duplicates\");\n    return
        0;\n\nI cycle the input with my own tool:\n\n    $ cycle input | ./day02b",
        "edited": 1543657120.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eaufl7i", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C
        (&lt;a href=\"https://github.com/sjmulder/aoc/blob/master/2018/day01/day01b.c\"&gt;GitHub&lt;/a&gt;):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;int
        accum = 0;\nint change;\nunsigned byte, bit;\nchar *bitfield;\n\nif (!(bitfield
        = calloc(UINT_MAX / 8, 1)))\n    err(1, &amp;quot;calloc&amp;quot;);\n\nbitfield[0]
        = 1;\n\nwhile (scanf(&amp;quot; %d&amp;quot;, &amp;amp;change) == 1) {\n    accum
        += change;\n\n    byte = (unsigned)accum / 8;\n    bit = 1 &amp;lt;&amp;lt;
        ((unsigned)accum % 8);\n\n    if (bitfield[byte] &amp;amp; bit) {\n        printf(&amp;quot;%d\\n&amp;quot;,
        accum);\n        return 0;\n    }\n\n    bitfield[byte] = bitfield[byte] |
        bit;\n}\n\nif (ferror(stdin))\n    err(1, NULL);\n\nputs(&amp;quot;no duplicates&amp;quot;);\nreturn
        0;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I cycle the input with my own tool:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$
        cycle input | ./day02b\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaufl7i/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543656840.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 5}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eauhtle", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "mstksg", "can_mod_post": false, "created_utc":
        1543660899.0, "send_replies": true, "parent_id": "t3_a20646", "score": 4,
        "author_fullname": "t2_5cbmr", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Not too bad in Haskell :)\n\n    import Data.Set
        as S\n\n    parseStr :: String -&gt; Int\n    parseStr (''+'':cs) = read cs\n    parseStr
        cs       = read cs\n\n    part1 :: String -&gt; Int\n    part1 = sum . map
        parseStr . lines\n\n    part2 :: String -&gt; Int\n    part2 = firstRepeat
        . scanl (+) 0 . cycle . map parseStr . lines\n\n    firstRepeat :: [a] -&gt;
        a\n    firstRepeat = go S.empty\n      where\n        go s (x:xs)\n          |
        x `S.member` s = x\n          | otherwise = go (x `S.insert` s)\n\nMy solution
        repo is at https://github.com/mstksg/advent-of-code-2018", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eauhtle",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not too bad in Haskell
        :)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import Data.Set as S\n\nparseStr ::
        String -&amp;gt; Int\nparseStr (&amp;#39;+&amp;#39;:cs) = read cs\nparseStr
        cs       = read cs\n\npart1 :: String -&amp;gt; Int\npart1 = sum . map parseStr
        . lines\n\npart2 :: String -&amp;gt; Int\npart2 = firstRepeat . scanl (+)
        0 . cycle . map parseStr . lines\n\nfirstRepeat :: [a] -&amp;gt; a\nfirstRepeat
        = go S.empty\n  where\n    go s (x:xs)\n      | x `S.member` s = x\n      |
        otherwise = go (x `S.insert` s)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;My
        solution repo is at &lt;a href=\"https://github.com/mstksg/advent-of-code-2018\"&gt;https://github.com/mstksg/advent-of-code-2018&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauhtle/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543660899.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 2, "removal_reason": null, "link_id": "t3_a20646",
        "author_flair_template_id": null, "likes": null, "replies": {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "more", "data": {"count": 2, "name": "t1_ecdipr3", "id": "ecdipr3",
        "parent_id": "t1_eavew01", "depth": 2, "children": ["ecdipr3"]}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "eavew01", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "[deleted]", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_eaujsoq", "score": 2, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "your formatting
        is off (use four spaces for code) but upvoted for using a MapSet :)", "edited":
        false, "author_flair_css_class": null, "collapsed": false, "downs": 0, "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;your formatting is off
        (use four spaces for code) but upvoted for using a MapSet :)&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavew01/",
        "num_reports": null, "locked": false, "name": "t1_eavew01", "created": 1543693190.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1543693190.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "eaujsoq", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "shandley256", "can_mod_post": false,
        "created_utc": 1543664110.0, "send_replies": true, "parent_id": "t3_a20646",
        "score": 4, "author_fullname": "t2_sdubg", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "In Elixir\n\n# Part
        1\n\n    IO.read(:stdio, :all)\n    |&gt; String.split(\"\\n\")\n    |&gt;
        Enum.map(&amp;String.to_integer/1)\n    |&gt; Enum.sum()\n    |&gt; IO.inspect()\n\n#
        Part 2\n\n\n    IO.read(:stdio, :all)\n    |&gt; String.split(\"\\n\")\n    |&gt;
        Enum.map(&amp;String.to_integer/1)\n    |&gt; Stream.cycle()\n    |&gt; Enum.reduce_while({0,
        MapSet.new([0])}, fn i, {current, seen} -&gt;\n      frequency = current +
        i\n\n      if MapSet.member?(seen, frequency) do\n        {:halt, frequency}\n      else\n        {:cont,
        {frequency, MapSet.put(seen, frequency)}}\n      end\n    end)\n    |&gt;
        IO.inspect()", "edited": 1543795604.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eaujsoq", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In
        Elixir&lt;/p&gt;\n\n&lt;h1&gt;Part 1&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;IO.read(:stdio,
        :all)\n|&amp;gt; String.split(&amp;quot;\\n&amp;quot;)\n|&amp;gt; Enum.map(&amp;amp;String.to_integer/1)\n|&amp;gt;
        Enum.sum()\n|&amp;gt; IO.inspect()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Part
        2&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;IO.read(:stdio, :all)\n|&amp;gt; String.split(&amp;quot;\\n&amp;quot;)\n|&amp;gt;
        Enum.map(&amp;amp;String.to_integer/1)\n|&amp;gt; Stream.cycle()\n|&amp;gt;
        Enum.reduce_while({0, MapSet.new([0])}, fn i, {current, seen} -&amp;gt;\n  frequency
        = current + i\n\n  if MapSet.member?(seen, frequency) do\n    {:halt, frequency}\n  else\n    {:cont,
        {frequency, MapSet.put(seen, frequency)}}\n  end\nend)\n|&amp;gt; IO.inspect()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaujsoq/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543664110.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 3, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eau6v3j", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_a20646", "score":
        3, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Elixir(part1,part2 at bottom):\n\n\n    defmodule AdventOfCode2018.Day01
        do\n\tdef redu(arr,tup,loop) do\n\t\tnew_tup = Enum.reduce_while(arr,tup,fn(x,{val,map,_})
        -&gt; \n\t\t\tnew_freq = arit(x,val)\n\t\t\tis_val = Map.get(map, new_freq)\n\t\t\tif
        not is_nil(is_val) do\n\t\t\t\t{:halt,{new_freq,Map.put(map,new_freq,new_freq),is_val}}\t\n\t\t\telse\n\t\t\t\t{:cont,{new_freq,Map.put(map,new_freq,new_freq),nil}}\n\t\t\tend\n\t\tend)
        \n\n\t\t{_,_,val} = new_tup\n\n\t\tif loop == true and is_nil(val) do\n\t\t\tredu(arr,new_tup,true)\t\t\t\n\t\telse\n\t\t\tnew_tup\n\t\tend\n\t\t\n\tend\n\n\tdef
        arit(\"+\" &lt;&gt; rest, val), do: val + String.to_integer(rest)\n\tdef arit(\"-\"
        &lt;&gt; rest,val), do: val - String.to_integer(rest)\n\n      def part1(args)
        do\n\t\tString.split(args,\"\\n\", [trim: true])\n\t\t|&gt; redu({0,%{},nil},false)\n      end\n      def
        part2(args) do\n  \tString.split(args,\"\\n\", [trim: true])\n\t\t|&gt; redu({0,%{},nil},true)\n      end\n    end\n",
        "edited": false, "downs": 0, "author_flair_css_class": null, "collapsed":
        false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Elixir(part1,part2
        at bottom):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;defmodule AdventOfCode2018.Day01
        do\ndef redu(arr,tup,loop) do\n    new_tup = Enum.reduce_while(arr,tup,fn(x,{val,map,_})
        -&amp;gt; \n        new_freq = arit(x,val)\n        is_val = Map.get(map,
        new_freq)\n        if not is_nil(is_val) do\n            {:halt,{new_freq,Map.put(map,new_freq,new_freq),is_val}}    \n        else\n            {:cont,{new_freq,Map.put(map,new_freq,new_freq),nil}}\n        end\n    end)
        \n\n    {_,_,val} = new_tup\n\n    if loop == true and is_nil(val) do\n        redu(arr,new_tup,true)          \n    else\n        new_tup\n    end\n\nend\n\ndef
        arit(&amp;quot;+&amp;quot; &amp;lt;&amp;gt; rest, val), do: val + String.to_integer(rest)\ndef
        arit(&amp;quot;-&amp;quot; &amp;lt;&amp;gt; rest,val), do: val - String.to_integer(rest)\n\n  def
        part1(args) do\n    String.split(args,&amp;quot;\\n&amp;quot;, [trim: true])\n    |&amp;gt;
        redu({0,%{},nil},false)\n  end\n  def part2(args) do\nString.split(args,&amp;quot;\\n&amp;quot;,
        [trim: true])\n    |&amp;gt; redu({0,%{},nil},true)\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau6v3j/",
        "num_reports": null, "locked": false, "name": "t1_eau6v3j", "created": 1543643026.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1543643026.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "more", "data": {"count":
        1, "name": "t1_eazftd3", "id": "eazftd3", "parent_id": "t1_eavs0q5", "depth":
        2, "children": ["eazftd3"]}}], "before": null}}, "user_reports": [], "saved":
        false, "id": "eavs0q5", "banned_at_utc": null, "mod_reason_title": null, "gilded":
        0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author":
        "firecopy", "can_mod_post": false, "created_utc": 1543703391.0, "send_replies":
        true, "parent_id": "t1_eauajg6", "score": 3, "author_fullname": "t2_ackw6",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "Cool Java!\n\nInstead of doing dupList you could use\n\n    Set&lt;Integer&gt;
        dupSet = new HashSet&lt;&gt;();\n\nArraylist.contains is O(n), but HashSet.contains
        is O(1)", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eavs0q5", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Cool
        Java!&lt;/p&gt;\n\n&lt;p&gt;Instead of doing dupList you could use&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Set&amp;lt;Integer&amp;gt;
        dupSet = new HashSet&amp;lt;&amp;gt;();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Arraylist.contains
        is O(n), but HashSet.contains is O(1)&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavs0q5/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543703391.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eauajg6", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "klackerz", "can_mod_post": false, "created_utc":
        1543648012.0, "send_replies": true, "parent_id": "t3_a20646", "score": 4,
        "author_fullname": "t2_5se5x", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Java\n\n\tprivate static int partOne(List&lt;Integer&gt;
        frequncyList){\n\t\tint freq = 0;\n\t\tfor (Integer i: frequncyList) {\n\t\t\tfreq
        +=i;\n\t\t}\n\t\treturn freq;\n\t}\n\tprivate static int[] partTwo(List&lt;Integer&gt;
        frequncyList,List&lt;Integer&gt; list, int[] sum) {\n\t\tfor (Integer i: frequncyList)
        {\n\t\t\tsum[0] += i;\n\t\t\tif(list.contains(sum[0])){\n\t\t\t\tsum[1]=1;\n\t\t\t\treturn
        sum;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tlist.add(sum[0]);\n\t\t\t}\n\t\t}\n\t\treturn
        sum;\n\t}\n\tpublic static void main(String[] args) {\n\t\tList&lt;Integer&gt;
        frequncyList = readFile(\"day1.txt\");\n\t\tSystem.out.println(partOne(frequncyList));\n\t\tint
        sum[] = {0,0};\n\t\tList&lt;Integer&gt; dupList = new ArrayList&lt;&gt;();
        \n\t\twhile(sum[1]==0){\n\t\t\tsum = partTwo(frequncyList,dupList,sum);\n\t\t}\n\t\tSystem.out.println(sum[0]);\t\n\t}",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eauajg6", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Java&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;private
        static int partOne(List&amp;lt;Integer&amp;gt; frequncyList){\n    int freq
        = 0;\n    for (Integer i: frequncyList) {\n        freq +=i;\n    }\n    return
        freq;\n}\nprivate static int[] partTwo(List&amp;lt;Integer&amp;gt; frequncyList,List&amp;lt;Integer&amp;gt;
        list, int[] sum) {\n    for (Integer i: frequncyList) {\n        sum[0] +=
        i;\n        if(list.contains(sum[0])){\n            sum[1]=1;\n            return
        sum;\n        }\n        else{\n            list.add(sum[0]);\n        }\n    }\n    return
        sum;\n}\npublic static void main(String[] args) {\n    List&amp;lt;Integer&amp;gt;
        frequncyList = readFile(&amp;quot;day1.txt&amp;quot;);\n    System.out.println(partOne(frequncyList));\n    int
        sum[] = {0,0};\n    List&amp;lt;Integer&amp;gt; dupList = new ArrayList&amp;lt;&amp;gt;();
        \n    while(sum[1]==0){\n        sum = partTwo(frequncyList,dupList,sum);\n    }\n    System.out.println(sum[0]);
        \n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauajg6/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543648012.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaub7ta",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "alexmeli",
        "can_mod_post": false, "created_utc": 1543649151.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 4, "author_fullname": "t2_haod2", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "Clojure
        solution:\n\n    (ns clojure-solution.core\n      (:require [clojure.java.io
        :as io])\n      (:gen-class))\n    \n    (defn readInts [path] \n      (with-open
        [rdr (io/reader path)] \n        (doall (map #(Integer/parseInt %) (line-seq
        rdr)))))\n    \n    (defn part1 [changes] \n      (reduce + changes))\n    \n    (defn
        part2 [changes] \n      (let [freq (reductions + (cycle changes))] \n        (loop
        [[x &amp; xs] freq seen #{0}] \n          (if (seen x) \n            x \n            (recur
        xs (conj seen x))))))\n\n&amp;#x200B;", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eaub7ta", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Clojure solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(ns
        clojure-solution.core\n  (:require [clojure.java.io :as io])\n  (:gen-class))\n\n(defn
        readInts [path] \n  (with-open [rdr (io/reader path)] \n    (doall (map #(Integer/parseInt
        %) (line-seq rdr)))))\n\n(defn part1 [changes] \n  (reduce + changes))\n\n(defn
        part2 [changes] \n  (let [freq (reductions + (cycle changes))] \n    (loop
        [[x &amp;amp; xs] freq seen #{0}] \n      (if (seen x) \n        x \n        (recur
        xs (conj seen x))))))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaub7ta/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543649151.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eauc3up", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "tobiasvl", "can_mod_post": false, "created_utc":
        1543650741.0, "send_replies": true, "parent_id": "t3_a20646", "score": 4,
        "author_fullname": "t2_f1p33", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "[Here''s my card.](https://i.imgur.com/Qm8AS3z.png)\n\nAfter
        I actually read the question, I placed 172 for part 2. Not the best, but much
        better than last year!\n\n    freqs = []\n    with open(''input.txt'') as
        f:\n        freqs = [int(freq.strip()) for freq in f]\n\n    def calibrate(twice=False):\n        freq
        = 0\n        seen = set()\n        while True:\n            for f in freqs:\n                freq
        += f\n                if freq in seen:\n                    return freq\n                else:\n                    seen.add(freq)\n            if
        not twice:\n                return freq\n\n    print calibrate()\n    print
        calibrate(True)\n", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eauc3up", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a
        href=\"https://i.imgur.com/Qm8AS3z.png\"&gt;Here&amp;#39;s my card.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;After
        I actually read the question, I placed 172 for part 2. Not the best, but much
        better than last year!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;freqs = []\nwith
        open(&amp;#39;input.txt&amp;#39;) as f:\n    freqs = [int(freq.strip()) for
        freq in f]\n\ndef calibrate(twice=False):\n    freq = 0\n    seen = set()\n    while
        True:\n        for f in freqs:\n            freq += f\n            if freq
        in seen:\n                return freq\n            else:\n                seen.add(freq)\n        if
        not twice:\n            return freq\n\nprint calibrate()\nprint calibrate(True)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauc3up/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543650741.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "awarders": [], "mod_reason_by": null, "banned_by": null, "ups": 2, "removal_reason":
        null, "link_id": "t3_a20646", "author_flair_template_id": null, "likes": null,
        "replies": "", "user_reports": [], "saved": false, "id": "eavuiu0", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "[deleted]", "can_mod_post": false, "created_utc":
        1543705401.0, "send_replies": true, "parent_id": "t1_eaujcnv", "score": 2,
        "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Had a quite close solution to yours. But your is more
        elegant.\n\n      def firstFrequencyReachedTwice(fileName: String): Int =
        {\n        var isRunning = true\n        Stream\n          .continually(inputData(fileName))\n          .flatten\n          .scanLeft(0)(_
        + _)\n          .takeWhile(_ =&gt; isRunning)\n          .foldLeft(Set.empty[Int],
        0) {\n            case ((frequencies, _), num) if frequencies.contains(num)
        =&gt;\n              isRunning = false\n              (frequencies, num)\n            case
        ((frequencies, previous), num) =&gt; (frequencies + num, previous)\n          }\n          ._2\n      }\n    \n    That
        isRunning variable still grinds my gears. :(", "edited": false, "author_flair_css_class":
        null, "downs": 0, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Had
        a quite close solution to yours. But your is more elegant.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;  def
        firstFrequencyReachedTwice(fileName: String): Int = {\n    var isRunning =
        true\n    Stream\n      .continually(inputData(fileName))\n      .flatten\n      .scanLeft(0)(_
        + _)\n      .takeWhile(_ =&amp;gt; isRunning)\n      .foldLeft(Set.empty[Int],
        0) {\n        case ((frequencies, _), num) if frequencies.contains(num) =&amp;gt;\n          isRunning
        = false\n          (frequencies, num)\n        case ((frequencies, previous),
        num) =&amp;gt; (frequencies + num, previous)\n      }\n      ._2\n  }\n\nThat
        isRunning variable still grinds my gears. :(\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavuiu0/",
        "num_reports": null, "locked": false, "name": "t1_eavuiu0", "created": 1543705401.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "collapsed": false, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_eauli9f", "id": "eauli9f", "parent_id":
        "t1_eaujcnv", "depth": 2, "children": ["eauli9f"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "eaujcnv", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "xkufix", "can_mod_post": false, "created_utc": 1543663413.0,
        "send_replies": true, "parent_id": "t1_eaue6bu", "score": 3, "author_fullname":
        "t2_d541m", "removal_reason": null, "approved_by": null, "mod_note": null,
        "all_awardings": [], "body": "I did something quite similar in part 2, just
        without a mutable set. I did the same thing to loop endlessly, then just use
        the lazy property of stream to scan and drop all non-solutions until I find
        a frequency which is already in the set of existing frequencies.\n\n    Stream\n          .continually(frequencies.toStream)\n          .flatten\n          .scanLeft(Set[Int]()
        -&gt; 0) {\n            case ((existingFrequencies, lastFrequency), newFrequency)
        =&gt;\n              (existingFrequencies + lastFrequency) -&gt; (lastFrequency
        + newFrequency)\n          }\n          .dropWhile(frequencies =&gt; !frequencies._1.contains(frequencies._2))\n          .head\n          ._2\n          .toString",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eaujcnv", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        did something quite similar in part 2, just without a mutable set. I did the
        same thing to loop endlessly, then just use the lazy property of stream to
        scan and drop all non-solutions until I find a frequency which is already
        in the set of existing frequencies.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Stream\n      .continually(frequencies.toStream)\n      .flatten\n      .scanLeft(Set[Int]()
        -&amp;gt; 0) {\n        case ((existingFrequencies, lastFrequency), newFrequency)
        =&amp;gt;\n          (existingFrequencies + lastFrequency) -&amp;gt; (lastFrequency
        + newFrequency)\n      }\n      .dropWhile(frequencies =&amp;gt; !frequencies._1.contains(frequencies._2))\n      .head\n      ._2\n      .toString\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaujcnv/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543663413.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eaue6bu", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "sim642", "can_mod_post": false, "created_utc":
        1543654354.0, "send_replies": true, "parent_id": "t3_a20646", "score": 4,
        "author_fullname": "t2_49npq", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "[My **Scala** solution](https://github.com/sim642/adventofcode/blob/master/src/main/scala/eu/sim642/adventofcode2018/Day1.scala).\n\nGood
        that the first day was simple enough, I already panicked a bit in part 2.
        Found out that Scala doesn''t have the nice list cycle function so I had to
        add that. I thought I had already done that for last year but apparently not
        exactly that. It''s why reusing the project is good though: you can easily
        reuse some general purpose additions which were previously useful, I hope
        it''ll be useful at some point.\n\nAlso I thought way too long about detecting
        the repeat because a set-based solution seemed too dirty. Immediately remembered
        similar problems from last year and my Floyd cycle-finding algorithm implementation
        but since it didn''t directly admit to solving this task, I didn''t bother.
        Although I think it''d probably work too, only has to be modified to return
        the repeating value, not the usual cycle begin index and cycle length, as
        Floyd''s algorithm does. It''s a clever and useful algorithm to be aware of,
        been useful in AoC multiple times.\n\nRevived my repo from last year and am
        continuing with it now, reusing all the same organization structure. Also,
        as I did last year, I plan to do test-driven solving now as well.", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eaue6bu",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/sim642/adventofcode/blob/master/src/main/scala/eu/sim642/adventofcode2018/Day1.scala\"&gt;My
        &lt;strong&gt;Scala&lt;/strong&gt; solution&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Good
        that the first day was simple enough, I already panicked a bit in part 2.
        Found out that Scala doesn&amp;#39;t have the nice list cycle function so
        I had to add that. I thought I had already done that for last year but apparently
        not exactly that. It&amp;#39;s why reusing the project is good though: you
        can easily reuse some general purpose additions which were previously useful,
        I hope it&amp;#39;ll be useful at some point.&lt;/p&gt;\n\n&lt;p&gt;Also I
        thought way too long about detecting the repeat because a set-based solution
        seemed too dirty. Immediately remembered similar problems from last year and
        my Floyd cycle-finding algorithm implementation but since it didn&amp;#39;t
        directly admit to solving this task, I didn&amp;#39;t bother. Although I think
        it&amp;#39;d probably work too, only has to be modified to return the repeating
        value, not the usual cycle begin index and cycle length, as Floyd&amp;#39;s
        algorithm does. It&amp;#39;s a clever and useful algorithm to be aware of,
        been useful in AoC multiple times.&lt;/p&gt;\n\n&lt;p&gt;Revived my repo from
        last year and am continuing with it now, reusing all the same organization
        structure. Also, as I did last year, I plan to do test-driven solving now
        as well.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaue6bu/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543654354.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "more", "data": {"count":
        1, "name": "t1_eauvjxk", "id": "eauvjxk", "parent_id": "t1_eauj37e", "depth":
        1, "children": ["eauvjxk"]}}], "before": null}}, "user_reports": [], "saved":
        false, "id": "eauj37e", "banned_at_utc": null, "mod_reason_title": null, "gilded":
        0, "archived": true, "collapsed_reason_code": null, "no_follow": false, "author":
        "judofyr", "can_mod_post": false, "created_utc": 1543663016.0, "send_replies":
        true, "parent_id": "t3_a20646", "score": 5, "author_fullname": "t2_1ei7i",
        "approved_by": null, "mod_note": null, "all_awardings": [], "collapsed": false,
        "body": "Brainfuck: https://github.com/judofyr/aoc2018/blob/master/day1.bf",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eauj37e", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Brainfuck:
        &lt;a href=\"https://github.com/judofyr/aoc2018/blob/master/day1.bf\"&gt;https://github.com/judofyr/aoc2018/blob/master/day1.bf&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauj37e/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543663016.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 5}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaviu08",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "hpzr24w",
        "can_mod_post": false, "created_utc": 1543696222.0, "send_replies": true,
        "parent_id": "t1_eav1qvv", "score": 2, "author_fullname": "t2_8hcsy", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Here''s a slightly more stylish answer:\n\n    // Advent of Code 2018\n    //
        Day 01 - Chronal Calibration\n\n    #include &lt;iostream&gt;\n    #include
        &lt;fstream&gt;\n    #include &lt;vector&gt;\n    #include &lt;set&gt;\n    #include
        &lt;algorithm&gt;\n    #include \"../reader.hpp\"\n\n    using namespace std;\n\n    int
        main() \n    {\n        // read in the input\n        ifstream ifs(\"day_01.txt\",ifstream::in);    \n        auto
        lines = vector&lt;string&gt;(read_input(ifs));\n\n        // Part 1 - parse
        input lines to numbers and total\n        auto freq = int64_t(0);\n        auto
        values = vector&lt;int64_t&gt;();\n        transform(begin(lines),end(lines),back_inserter(values),\n                [&amp;](string
        s) -&gt; int64_t {int64_t val=stoi(s); freq+=val; return val;});\n\n        cout
        &lt;&lt; \"Part 1: \" &lt;&lt; freq &lt;&lt; endl;\n\n        // Part 2 -
        change frequencies until we see a duplicate frequency\n        //          freq
        needs to be reset so we catch first repeated freq\n        freq = 0;\n        auto
        freqs = set&lt;int64_t&gt;();\n        while (true) {\n            transform(begin(values),end(values),inserter(freqs,end(freqs)),\n                        [&amp;](int64_t
        v) -&gt; int64_t \n                        {\n                            freq+=v;\n                            if
        (freqs.count(freq)&gt;0) {\n                                cout &lt;&lt;
        \"Part 2: \" &lt;&lt; freq &lt;&lt; \"\\n\";\n                                exit(0);\n                            }\n                            return
        freq;\n                        });\n        }\n    }\n\n", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eaviu08",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s a slightly
        more stylish answer:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// Advent of Code
        2018\n// Day 01 - Chronal Calibration\n\n#include &amp;lt;iostream&amp;gt;\n#include
        &amp;lt;fstream&amp;gt;\n#include &amp;lt;vector&amp;gt;\n#include &amp;lt;set&amp;gt;\n#include
        &amp;lt;algorithm&amp;gt;\n#include &amp;quot;../reader.hpp&amp;quot;\n\nusing
        namespace std;\n\nint main() \n{\n    // read in the input\n    ifstream ifs(&amp;quot;day_01.txt&amp;quot;,ifstream::in);    \n    auto
        lines = vector&amp;lt;string&amp;gt;(read_input(ifs));\n\n    // Part 1 -
        parse input lines to numbers and total\n    auto freq = int64_t(0);\n    auto
        values = vector&amp;lt;int64_t&amp;gt;();\n    transform(begin(lines),end(lines),back_inserter(values),\n            [&amp;amp;](string
        s) -&amp;gt; int64_t {int64_t val=stoi(s); freq+=val; return val;});\n\n    cout
        &amp;lt;&amp;lt; &amp;quot;Part 1: &amp;quot; &amp;lt;&amp;lt; freq &amp;lt;&amp;lt;
        endl;\n\n    // Part 2 - change frequencies until we see a duplicate frequency\n    //          freq
        needs to be reset so we catch first repeated freq\n    freq = 0;\n    auto
        freqs = set&amp;lt;int64_t&amp;gt;();\n    while (true) {\n        transform(begin(values),end(values),inserter(freqs,end(freqs)),\n                    [&amp;amp;](int64_t
        v) -&amp;gt; int64_t \n                    {\n                        freq+=v;\n                        if
        (freqs.count(freq)&amp;gt;0) {\n                            cout &amp;lt;&amp;lt;
        &amp;quot;Part 2: &amp;quot; &amp;lt;&amp;lt; freq &amp;lt;&amp;lt; &amp;quot;\\n&amp;quot;;\n                            exit(0);\n                        }\n                        return
        freq;\n                    });\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaviu08/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543696222.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eav1qvv", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "hpzr24w", "can_mod_post": false, "created_utc":
        1543682985.0, "send_replies": true, "parent_id": "t3_a20646", "score": 4,
        "author_fullname": "t2_8hcsy", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Fantastic to be back to December and #adventofcode
        ! Thanks Eric and assistants for all you do!\n\nSadly I was right up there,
        but must have botched entering the answer, as I got locked out, event though
        the answer was correct first time. Gah! Then I misread the 2nd part and was
        lucky to be in the first 1000. \n\nI did manage to learn one thing, that STL
        generic find from algorithm is 1000x slower than the container count() or
        find() when using a set or unordered_set. \n\n    // Advent of Code 2018\n    //\n    //
        Day 01 - Chronal Calibration\n\n    // Jonathans-iMac:Advent-of-Code-2018
        jonathan$ ./day_01\n    // Part 1: Total: 472\n    // Part 2: First Duplicate:
        66932\n    // Jonathans-iMac:Advent-of-Code-2018 jonathan$\n\n    // Notes
        on performance: \n    // - using unordered_set\n    // - using find(it,it,val)
        vs. unordered_set.find(val)!=end(values)\n    //\n    // Jonathans-iMac:Advent-of-Code-2018
        jonathan$ ./day_01\n    // Part 1: Total: 472\n    // Part 1: Elapsed: 0.000666105\n    //
        Part 2: First Duplicate: 66932\n    // Part 2: Elapsed: 29.1529\n    //\n    //
        Jonathans-iMac:Advent-of-Code-2018 jonathan$ ./day_01\n    // Part 1: Total:
        472\n    // Part 1: Elapsed: 0.000145164\n    // Part 2: First Duplicate:
        66932\n    // Part 2: Elapsed: 0.0179688\n    // Jonathans-iMac:Advent-of-Code-2018
        jonathan$\n\n    #include &lt;iostream&gt;\n    #include &lt;fstream&gt;\n    #include
        &lt;sstream&gt;\n    #include &lt;string&gt;\n    #include &lt;iterator&gt;\n    #include
        &lt;vector&gt;\n    #include &lt;algorithm&gt;\n    #include &lt;map&gt;\n    #include
        &lt;set&gt;\n    #include &lt;unordered_set&gt;\n    #include &lt;queue&gt;\n    #include
        &lt;chrono&gt;\n    #include \"reader.hpp\"\n\n    using namespace std;\n\n    int
        main(int argc, char* argv[])\n    {\n        ifstream ifs(\"day_01.txt\",ifstream::in);\n        vector&lt;string&gt;
        input = read_input(ifs);\n\n        auto starttime = chrono::high_resolution_clock::now();\n        auto
        total = int64_t{0};\n        auto values = unordered_set&lt;int64_t&gt;();                                         //
        2x faster approc than set\n        auto firstloop = true;\n        auto found
        = false;\n\n        while (!found) {\n            for (auto l : input) {\n                total
        += stoi(l);\n    //            if (!found &amp;&amp; find(begin(values),end(values),total)!=end(values))
        {   // 1000x slower !!\n                if (!found &amp;&amp; values.find(total)!=end(values))
        {                        // equiv to using count(total)&gt;0\n                    cout
        &lt;&lt; \"Part 2: First Duplicate: \" &lt;&lt; total &lt;&lt; endl;\n                    cout
        &lt;&lt; \"Part 2: Elapsed: \" &lt;&lt; chrono::duration&lt;double&gt;(chrono::high_resolution_clock::now()-starttime).count()
        &lt;&lt; endl;\n                    found = true;\n                }\n                values.insert(total);\n            }\n            if
        (firstloop) {\n                cout &lt;&lt; \"Part 1: Total: \" &lt;&lt;
        total &lt;&lt; endl;\n                cout &lt;&lt; \"Part 1: Elapsed: \"
        &lt;&lt; chrono::duration&lt;double&gt;(chrono::high_resolution_clock::now()-starttime).count()
        &lt;&lt; endl;\n                firstloop = false;\n            }\n        }\n    }",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eav1qvv", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Fantastic
        to be back to December and #adventofcode ! Thanks Eric and assistants for
        all you do!&lt;/p&gt;\n\n&lt;p&gt;Sadly I was right up there, but must have
        botched entering the answer, as I got locked out, event though the answer
        was correct first time. Gah! Then I misread the 2nd part and was lucky to
        be in the first 1000. &lt;/p&gt;\n\n&lt;p&gt;I did manage to learn one thing,
        that STL generic find from algorithm is 1000x slower than the container count()
        or find() when using a set or unordered_set. &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;//
        Advent of Code 2018\n//\n// Day 01 - Chronal Calibration\n\n// Jonathans-iMac:Advent-of-Code-2018
        jonathan$ ./day_01\n// Part 1: Total: 472\n// Part 2: First Duplicate: 66932\n//
        Jonathans-iMac:Advent-of-Code-2018 jonathan$\n\n// Notes on performance: \n//
        - using unordered_set\n// - using find(it,it,val) vs. unordered_set.find(val)!=end(values)\n//\n//
        Jonathans-iMac:Advent-of-Code-2018 jonathan$ ./day_01\n// Part 1: Total: 472\n//
        Part 1: Elapsed: 0.000666105\n// Part 2: First Duplicate: 66932\n// Part 2:
        Elapsed: 29.1529\n//\n// Jonathans-iMac:Advent-of-Code-2018 jonathan$ ./day_01\n//
        Part 1: Total: 472\n// Part 1: Elapsed: 0.000145164\n// Part 2: First Duplicate:
        66932\n// Part 2: Elapsed: 0.0179688\n// Jonathans-iMac:Advent-of-Code-2018
        jonathan$\n\n#include &amp;lt;iostream&amp;gt;\n#include &amp;lt;fstream&amp;gt;\n#include
        &amp;lt;sstream&amp;gt;\n#include &amp;lt;string&amp;gt;\n#include &amp;lt;iterator&amp;gt;\n#include
        &amp;lt;vector&amp;gt;\n#include &amp;lt;algorithm&amp;gt;\n#include &amp;lt;map&amp;gt;\n#include
        &amp;lt;set&amp;gt;\n#include &amp;lt;unordered_set&amp;gt;\n#include &amp;lt;queue&amp;gt;\n#include
        &amp;lt;chrono&amp;gt;\n#include &amp;quot;reader.hpp&amp;quot;\n\nusing namespace
        std;\n\nint main(int argc, char* argv[])\n{\n    ifstream ifs(&amp;quot;day_01.txt&amp;quot;,ifstream::in);\n    vector&amp;lt;string&amp;gt;
        input = read_input(ifs);\n\n    auto starttime = chrono::high_resolution_clock::now();\n    auto
        total = int64_t{0};\n    auto values = unordered_set&amp;lt;int64_t&amp;gt;();                                         //
        2x faster approc than set\n    auto firstloop = true;\n    auto found = false;\n\n    while
        (!found) {\n        for (auto l : input) {\n            total += stoi(l);\n//            if
        (!found &amp;amp;&amp;amp; find(begin(values),end(values),total)!=end(values))
        {   // 1000x slower !!\n            if (!found &amp;amp;&amp;amp; values.find(total)!=end(values))
        {                        // equiv to using count(total)&amp;gt;0\n                cout
        &amp;lt;&amp;lt; &amp;quot;Part 2: First Duplicate: &amp;quot; &amp;lt;&amp;lt;
        total &amp;lt;&amp;lt; endl;\n                cout &amp;lt;&amp;lt; &amp;quot;Part
        2: Elapsed: &amp;quot; &amp;lt;&amp;lt; chrono::duration&amp;lt;double&amp;gt;(chrono::high_resolution_clock::now()-starttime).count()
        &amp;lt;&amp;lt; endl;\n                found = true;\n            }\n            values.insert(total);\n        }\n        if
        (firstloop) {\n            cout &amp;lt;&amp;lt; &amp;quot;Part 1: Total:
        &amp;quot; &amp;lt;&amp;lt; total &amp;lt;&amp;lt; endl;\n            cout
        &amp;lt;&amp;lt; &amp;quot;Part 1: Elapsed: &amp;quot; &amp;lt;&amp;lt; chrono::duration&amp;lt;double&amp;gt;(chrono::high_resolution_clock::now()-starttime).count()
        &amp;lt;&amp;lt; endl;\n            firstloop = false;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eav1qvv/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543682985.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eaudrno", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "sim642",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_eau5nwt", "score":
        3, "author_fullname": "t2_49npq", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "You mean `int(\"+1\")` and
        `int(\"-1\")`.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_eaudrno", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You
        mean &lt;code&gt;int(&amp;quot;+1&amp;quot;)&lt;/code&gt; and &lt;code&gt;int(&amp;quot;-1&amp;quot;)&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaudrno/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543653676.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543653676.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eau5nwt", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "mahousenshi", "can_mod_post": false,
        "created_utc": 1543641657.0, "send_replies": true, "parent_id": "t1_eau5bne",
        "score": 8, "author_fullname": "t2_bfvk9", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "Open a python console
        and try `int(+1)` or `int(-1)`.", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_eau5nwt", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Open a python console and try &lt;code&gt;int(+1)&lt;/code&gt;
        or &lt;code&gt;int(-1)&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau5nwt/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543641657.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 8}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eau5bne", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "DeveloperIan", "can_mod_post": false,
        "created_utc": 1543641254.0, "send_replies": true, "parent_id": "t3_a20646",
        "score": 7, "author_fullname": "t2_13blx5", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "In Python, going for
        the leaderboard so apologies for sloppiness\n\n    myfile = open(''input.txt'',
        ''r'')\n    contents = myfile.read().strip().split()\n    myfile.close()\n    \n    def
        solve():\n        ans = 0\n        old = set([ans])\n    \n        found =
        False\n        iter = 0\n        while not found:\n    \n            for i
        in contents:\n                if i[0] == ''-'':\n                    ans -=
        int(i[1:])\n                elif i[0] == ''+'':\n                    ans +=
        int(i[1:])\n    \n                if ans in old:\n                    print(\"Part
        Two:\", ans)\n                    found = True\n                    break\n    \n                old.add(ans)\n    \n            if
        iter == 0:\n                print(\"Part One:\", ans)\n    \n            iter
        += 1\n    \n    solve()\n\n**Edit:** Not sure why i didn''t take into account
        that `int()` would handle the signs in the input lol. That''s what I get for
        panicking.", "edited": 1543641638.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eau5bne", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In
        Python, going for the leaderboard so apologies for sloppiness&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;myfile
        = open(&amp;#39;input.txt&amp;#39;, &amp;#39;r&amp;#39;)\ncontents = myfile.read().strip().split()\nmyfile.close()\n\ndef
        solve():\n    ans = 0\n    old = set([ans])\n\n    found = False\n    iter
        = 0\n    while not found:\n\n        for i in contents:\n            if i[0]
        == &amp;#39;-&amp;#39;:\n                ans -= int(i[1:])\n            elif
        i[0] == &amp;#39;+&amp;#39;:\n                ans += int(i[1:])\n\n            if
        ans in old:\n                print(&amp;quot;Part Two:&amp;quot;, ans)\n                found
        = True\n                break\n\n            old.add(ans)\n\n        if iter
        == 0:\n            print(&amp;quot;Part One:&amp;quot;, ans)\n\n        iter
        += 1\n\nsolve()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt;
        Not sure why i didn&amp;#39;t take into account that &lt;code&gt;int()&lt;/code&gt;
        would handle the signs in the input lol. That&amp;#39;s what I get for panicking.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau5bne/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543641254.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 7}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "more", "data": {"count":
        5, "name": "t1_eb2j6ex", "id": "eb2j6ex", "parent_id": "t1_eb27ot2", "depth":
        2, "children": ["eb2j6ex"]}}], "before": null}}, "user_reports": [], "saved":
        false, "id": "eb27ot2", "banned_at_utc": null, "mod_reason_title": null, "gilded":
        0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author":
        "Cyanogen101", "can_mod_post": false, "created_utc": 1543920168.0, "send_replies":
        true, "parent_id": "t1_eau5j8f", "score": 2, "author_fullname": "t2_barg4",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "Hey I was doing something similiar but with an Array instead
        of a hash, can you look over mine and help explain why it didnt work? (I took
        out the breaks just to try get at least an output)\n\n    frequency = 0\n    duplicate_list
        = []\n    numbers = File.read(''input.txt'')\n    \n    loop do\n     numbers.each_line
        do |x|\n      frequency += x.to_i\n      puts frequency if duplicate_list.include?(frequency)\n      duplicate_list
        &lt;&lt; frequency\n      end\n    end\n    \n    #but using a hash like you
        works fine\n    \n    frequency = 0\n    duplicate_list = {}\n    numbers
        = File.read(''input.txt'')\n    \n    loop do\n     numbers.each_line do |x|\n      frequency
        += x.to_i\n      puts frequency if duplicate_list[frequency] == 1\n      duplicate_list[frequency]
        = 1\n      end\n    end", "edited": 1543920425.0, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_eb27ot2", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Hey I was doing something similiar but with
        an Array instead of a hash, can you look over mine and help explain why it
        didnt work? (I took out the breaks just to try get at least an output)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;frequency
        = 0\nduplicate_list = []\nnumbers = File.read(&amp;#39;input.txt&amp;#39;)\n\nloop
        do\n numbers.each_line do |x|\n  frequency += x.to_i\n  puts frequency if
        duplicate_list.include?(frequency)\n  duplicate_list &amp;lt;&amp;lt; frequency\n  end\nend\n\n#but
        using a hash like you works fine\n\nfrequency = 0\nduplicate_list = {}\nnumbers
        = File.read(&amp;#39;input.txt&amp;#39;)\n\nloop do\n numbers.each_line do
        |x|\n  frequency += x.to_i\n  puts frequency if duplicate_list[frequency]
        == 1\n  duplicate_list[frequency] = 1\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eb27ot2/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543920168.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "more",
        "data": {"count": 1, "name": "t1_eauu4rn", "id": "eauu4rn", "parent_id": "t1_eau5j8f",
        "depth": 1, "children": ["eauu4rn"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "eau5j8f", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "antigrapist", "can_mod_post": false, "created_utc": 1543641502.0,
        "send_replies": true, "parent_id": "t3_a20646", "score": 3, "author_fullname":
        "t2_4so9f", "approved_by": null, "mod_note": null, "all_awardings": [], "collapsed":
        false, "body": "Ruby, my puzzle input is in var a.\n\nPart 1:\n\n    freq
        = 0\n    a.each_line do |line|\n      freq += line.to_i\n    end\n    p freq    \n\nPart
        2:\n\n    freq = 0\n    counter = {}\n    loop do\n      a.each_line do |line|\n        freq
        += line.to_i\n        if counter[freq] == 1\n          p freq\n          return\n        end\n        counter[freq]
        = 1\n      end\n    end", "edited": 1543643192.0, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_eau5j8f", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Ruby, my puzzle input is in var a.&lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;freq = 0\na.each_line do |line|\n  freq
        += line.to_i\nend\np freq    \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;freq = 0\ncounter = {}\nloop do\n  a.each_line
        do |line|\n    freq += line.to_i\n    if counter[freq] == 1\n      p freq\n      return\n    end\n    counter[freq]
        = 1\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau5j8f/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543641502.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eav6i5e", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Jackim",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_eau8c4d", "score":
        2, "author_fullname": "t2_5byuw", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "The example input had commas,
        some people might have considered that before looking at their own input.",
        "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_eav6i5e", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The
        example input had commas, some people might have considered that before looking
        at their own input.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_a20646", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eav6i5e/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543686759.0,
        "author_flair_text": null, "treatment_tags": [], "created_utc": 1543686759.0,
        "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0, "depth":
        2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "more",
        "data": {"count": 1, "name": "t1_eav591q", "id": "eav591q", "parent_id": "t1_eau8c4d",
        "depth": 2, "children": ["eav591q"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "eau8c4d", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "LeCrushinator", "can_mod_post": false, "created_utc": 1543644738.0,
        "send_replies": true, "parent_id": "t1_eau5n8y", "score": 3, "author_fullname":
        "t2_8mf5r", "removal_reason": null, "approved_by": null, "mod_note": null,
        "all_awardings": [], "body": "How did you split by commas? My input had no
        commas in it. I guess the input format might be changed a bit per person to
        keep people from easily using posted solutions.\n\nOur programs were very
        similar though.", "edited": 1543646984.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eau8c4d", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;How
        did you split by commas? My input had no commas in it. I guess the input format
        might be changed a bit per person to keep people from easily using posted
        solutions.&lt;/p&gt;\n\n&lt;p&gt;Our programs were very similar though.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau8c4d/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543644738.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eausp22", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "jeroenheijmans", "can_mod_post": false,
        "created_utc": 1543674776.0, "send_replies": true, "parent_id": "t1_eau5n8y",
        "score": 2, "author_fullname": "t2_2aynbuw", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "Thx for sharing. I had
        somehow all forgotten about `HashSet` and friends, and `List&lt;long&gt;`
        was significantly slower. \ud83d\udc4d", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eausp22", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thx for sharing. I had somehow
        all forgotten about &lt;code&gt;HashSet&lt;/code&gt; and friends, and &lt;code&gt;List&amp;lt;long&amp;gt;&lt;/code&gt;
        was significantly slower. \ud83d\udc4d&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eausp22/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543674776.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eaut1b1", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "andrewboudreau", "can_mod_post": false,
        "created_utc": 1543675123.0, "send_replies": true, "parent_id": "t1_eau5n8y",
        "score": 2, "author_fullname": "t2_40fdv", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "```C#\n// Part 2\nvar
        freq = 0;\nvar step = 0;\nvar set = new Set&lt;int&gt;();\n\nwhile(set.Add(freq))\n\tfreq
        += input[step++ % input.Count];\n\nConsole.WriteLine($\"Part 2: {freq} after
        {step} iterations\");\n```\n\nhttps://github.com/andrewboudreau/AdventOfCode2018?files=1",
        "edited": 1543675343.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eaut1b1", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;```C#\n//
        Part 2\nvar freq = 0;\nvar step = 0;\nvar set = new Set&amp;lt;int&amp;gt;();&lt;/p&gt;\n\n&lt;p&gt;while(set.Add(freq))\n    freq
        += input[step++ % input.Count];&lt;/p&gt;\n\n&lt;p&gt;Console.WriteLine($&amp;quot;Part
        2: {freq} after {step} iterations&amp;quot;);\n```&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/andrewboudreau/AdventOfCode2018?files=1\"&gt;https://github.com/andrewboudreau/AdventOfCode2018?files=1&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaut1b1/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543675123.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eau5n8y", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "pattpass", "can_mod_post": false, "created_utc":
        1543641635.0, "send_replies": true, "parent_id": "t3_a20646", "score": 3,
        "author_fullname": "t2_hatzv", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "My C# solution:\n\n    void Main()\n    {\n    \tvar
        input = Console.ReadLine().Trim();\n    \tConsole.WriteLine(Part1(input));\n    \tConsole.WriteLine(Part2(input));\n    }\n\n    public
        int Part1(string input){\n    \tint sum = 0;\n    \tvar inp= input.Split('','');\n    \tforeach(string
        c in inp){\n    \t\tsum+= int.Parse(c);\n    \t}\n    \treturn sum;\n    }\n    \n    public
        int Part2(string input){\n    \tvar s = new HashSet&lt;int&gt;();\n    \tint
        sum = 0;\n    \tvar inp= input.Split('','');\n    \twhile(true){\n    \tforeach(string
        c in inp){\n    \t\tsum+= int.Parse(c);\n    \t\tif(s.Contains(sum))\n    \t\t\treturn
        sum;\n    \t\ts.Add(sum);\n    \t}\n    \t}\n    }", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eau5n8y", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My C# solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;void
        Main()\n{\n    var input = Console.ReadLine().Trim();\n    Console.WriteLine(Part1(input));\n    Console.WriteLine(Part2(input));\n}\n\npublic
        int Part1(string input){\n    int sum = 0;\n    var inp= input.Split(&amp;#39;,&amp;#39;);\n    foreach(string
        c in inp){\n        sum+= int.Parse(c);\n    }\n    return sum;\n}\n\npublic
        int Part2(string input){\n    var s = new HashSet&amp;lt;int&amp;gt;();\n    int
        sum = 0;\n    var inp= input.Split(&amp;#39;,&amp;#39;);\n    while(true){\n    foreach(string
        c in inp){\n        sum+= int.Parse(c);\n        if(s.Contains(sum))\n            return
        sum;\n        s.Add(sum);\n    }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau5n8y/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543641635.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "awarders": [], "mod_reason_by": null, "banned_by": null, "ups": 2, "removal_reason":
        null, "link_id": "t3_a20646", "author_flair_template_id": null, "likes": null,
        "replies": {"kind": "Listing", "data": {"after": null, "dist": null, "modhash":
        "", "geo_filter": "", "children": [{"kind": "more", "data": {"count": 1, "name":
        "t1_eavbwf5", "id": "eavbwf5", "parent_id": "t1_eavbols", "depth": 3, "children":
        ["eavbwf5"]}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "eavbols", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "created_utc": 1543690747.0, "send_replies": true,
        "parent_id": "t1_eau7urx", "score": 2, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "&gt; C++\n\nI
        prefer using `insert`''s second return value", "edited": false, "author_flair_css_class":
        null, "downs": 0, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;C++&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I
        prefer using &lt;code&gt;insert&lt;/code&gt;&amp;#39;s second return value&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavbols/",
        "num_reports": null, "locked": false, "name": "t1_eavbols", "created": 1543690747.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "collapsed": false, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "eau7urx", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "willkill07", "can_mod_post": false, "created_utc":
        1543644167.0, "send_replies": true, "parent_id": "t1_eau5qyq", "score": 2,
        "author_fullname": "t2_7j0ca", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "FYI, I prefer `count()` to
        check for set/map membership", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_eau7urx", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;FYI, I prefer &lt;code&gt;count()&lt;/code&gt;
        to check for set/map membership&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau7urx/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543644167.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eau5qyq", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "williewillus", "can_mod_post": false,
        "created_utc": 1543641760.0, "send_replies": true, "parent_id": "t3_a20646",
        "score": 3, "author_fullname": "t2_9rr54", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "simple C++. I inverted
        set membership check which threw me off for a good few minutes &gt;.&gt;\n\n\n    void
        run() {\n        std::ifstream f(\"d1_input.txt\");\n        std::string in;\n        std::vector&lt;long&gt;
        changes;\n\n        long p1_counter = 0;\n        while (std::getline(f, in))
        {\n            long l = std::stol(in);\n            changes.push_back(l);\n            p1_counter
        += l;\n        }\n        std::cout &lt;&lt; \"p1: \" &lt;&lt; p1_counter
        &lt;&lt; std::endl;\n\n        std::unordered_set&lt;long&gt; seen;\n        seen.insert(0);\n        long
        p2_counter = 0;\n        while (true) {\n            for (long l : changes)
        {\n                p2_counter += l;\n                if (seen.find(p2_counter)
        == seen.end()) {\n                    seen.insert(p2_counter);\n                }
        else {\n                    std::cout &lt;&lt; \"p2: \" &lt;&lt; p2_counter
        &lt;&lt; std::endl;\n                    return;\n                }\n            }\n        }\n    }",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eau5qyq", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;simple
        C++. I inverted set membership check which threw me off for a good few minutes
        &amp;gt;.&amp;gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;void run() {\n    std::ifstream
        f(&amp;quot;d1_input.txt&amp;quot;);\n    std::string in;\n    std::vector&amp;lt;long&amp;gt;
        changes;\n\n    long p1_counter = 0;\n    while (std::getline(f, in)) {\n        long
        l = std::stol(in);\n        changes.push_back(l);\n        p1_counter += l;\n    }\n    std::cout
        &amp;lt;&amp;lt; &amp;quot;p1: &amp;quot; &amp;lt;&amp;lt; p1_counter &amp;lt;&amp;lt;
        std::endl;\n\n    std::unordered_set&amp;lt;long&amp;gt; seen;\n    seen.insert(0);\n    long
        p2_counter = 0;\n    while (true) {\n        for (long l : changes) {\n            p2_counter
        += l;\n            if (seen.find(p2_counter) == seen.end()) {\n                seen.insert(p2_counter);\n            }
        else {\n                std::cout &amp;lt;&amp;lt; &amp;quot;p2: &amp;quot;
        &amp;lt;&amp;lt; p2_counter &amp;lt;&amp;lt; std::endl;\n                return;\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau5qyq/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543641760.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eau62dt", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "TheMuffinMan616", "can_mod_post": false,
        "created_utc": 1543642118.0, "send_replies": true, "parent_id": "t3_a20646",
        "score": 3, "author_fullname": "t2_3ubyu", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Card: Sleep\n\nSolution:\n\n    module
        Day01 where\n    \n    import Data.Set (Set)\n    import qualified Data.Set
        as S\n    \n    parse :: String -&gt; Int\n    parse = read . filter (/= ''+'')\n    \n    dupe
        :: Set Int -&gt; [Int] -&gt; Int\n    dupe seen (x:xs)\n        | x `S.member`
        seen = x\n        | otherwise         = dupe (S.insert x seen) xs\n    dupe
        _ _ = error \"duplicate not found\"\n    \n    part1 :: [Int] -&gt; Int\n    part1
        = sum\n    \n    part2 :: [Int] -&gt; Int\n    part2 = dupe S.empty . scanl
        (+) 0 . cycle\n    \n    main :: IO ()\n    main = do\n        input &lt;-
        map parse . lines &lt;$&gt; readFile \"input/Day01.txt\"\n        print .
        part1 $ input\n        print . part2 $ input", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eau62dt", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Card: Sleep&lt;/p&gt;\n\n&lt;p&gt;Solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;module
        Day01 where\n\nimport Data.Set (Set)\nimport qualified Data.Set as S\n\nparse
        :: String -&amp;gt; Int\nparse = read . filter (/= &amp;#39;+&amp;#39;)\n\ndupe
        :: Set Int -&amp;gt; [Int] -&amp;gt; Int\ndupe seen (x:xs)\n    | x `S.member`
        seen = x\n    | otherwise         = dupe (S.insert x seen) xs\ndupe _ _ =
        error &amp;quot;duplicate not found&amp;quot;\n\npart1 :: [Int] -&amp;gt;
        Int\npart1 = sum\n\npart2 :: [Int] -&amp;gt; Int\npart2 = dupe S.empty . scanl
        (+) 0 . cycle\n\nmain :: IO ()\nmain = do\n    input &amp;lt;- map parse .
        lines &amp;lt;$&amp;gt; readFile &amp;quot;input/Day01.txt&amp;quot;\n    print
        . part1 $ input\n    print . part2 $ input\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau62dt/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543642118.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "more", "data": {"count":
        2, "name": "t1_eaudm1b", "id": "eaudm1b", "parent_id": "t1_eaucqe1", "depth":
        2, "children": ["eaudm1b", "eauppge"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "eaucqe1", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "lukechampine", "can_mod_post": false, "created_utc": 1543651900.0,
        "send_replies": true, "parent_id": "t1_eau62ew", "score": 2, "author_fullname":
        "t2_124j5o", "removal_reason": null, "approved_by": null, "mod_note": null,
        "all_awardings": [], "body": "I highly recommend defining some helper functions
        for parsing the input files. In AoC you can pretty much always get away with
        reading the whole input into memory, so I have helper functions like `func
        FileLines(string) -&gt; []string`, `func IntList([]string) []int`, etc.",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eaucqe1", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        highly recommend defining some helper functions for parsing the input files.
        In AoC you can pretty much always get away with reading the whole input into
        memory, so I have helper functions like &lt;code&gt;func FileLines(string)
        -&amp;gt; []string&lt;/code&gt;, &lt;code&gt;func IntList([]string) []int&lt;/code&gt;,
        etc.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "link_id": "t3_a20646", "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaucqe1/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543651900.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 4, "name": "t1_eavjssz",
        "id": "eavjssz", "parent_id": "t1_eauyb4j", "depth": 2, "children": ["eavjssz",
        "eaw578f"]}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "eauyb4j", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "frenetix",
        "can_mod_post": false, "created_utc": 1543680171.0, "send_replies": true,
        "parent_id": "t1_eau62ew", "score": 2, "author_fullname": "t2_7pzi2", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "I''m using AoC to learn Go.  This naive implementation is my first Go program
        ever (omitting some of the boring file slurping); I want to set up some sort
        of runner framework, a library of useful functions (like Map, below)  and
        automated tests to validate the samples.  I''ll refactor this to be more idiomatic
        (for example, using range in the for statements) as I learn more about Go.\n\n    package
        main\n    \n    import (\n    \t\"fmt\"\n    \t\"io/ioutil\"\n    \t\"log\"\n    \t\"regexp\"\n    )\n    \n    func
        Map(vs []string, f func(string) int) []int {\n    \tvsm := make([]int, len(vs))\n    \tfor
        i, v := range vs {\n    \t\tvsm[i] = f(v)\n    \t}\n    \treturn vsm\n    }\n    \n    func
        parseToIntSlice(s string) []int {\n    \tre := regexp.MustCompile(`[+-]\\d+`)\n    \tss
        := re.FindAllString(s, -1)\n    \tis := Map(ss, func(s string) int {\n    \t\tvar
        i int\n    \t\tfmt.Sscanf(s, \"%d\", &amp;i)\n    \t\treturn i\n    \t})\n    \n    \treturn
        is\n    }\n    \n    /* Samples:\n    \"+1\\n-2\\n+3\\n+1\" -&gt; 3\n    \"+1\\n+1\\n+1\"
        -&gt; 3\n    \"+1\\n+1\\n-2\" -&gt; 0\n    \"-1\\n-2\\n-3\" -&gt; -6\n    */\n    func
        day1part1(in string) string {\n    \tvar acc int\n    \tis := parseToIntSlice(in)\n    \n    \tfor
        i := 0; i &lt; len(is); i++ {\n    \t\tacc += is[i]\n    \t}\n    \treturn
        fmt.Sprint(acc)\n    }\n    \n    /*\n      Samples:\n      \"+1\\n-1\\n\"
        -&gt; 0\n      \"+3\\n+3\\n+4\\n-2\\n-4\\n\" -&gt; 10\n      \"-6\\n,+3\\n,+8\\n,+5\\n+-6\\n\"
        -&gt; 5\n      \"+7\\n+7\\n-2\\n-7\\n-4\\n\" -&gt; 14\n    */\n    func day1part2(in
        string) string {\n    \tvar acc int\n    \tm := make(map[int]bool)\n    \tm[0]
        = true\n    \tis := parseToIntSlice(in)\n    \n    \ti := 0\n    \tfor {\n    \t\tif
        i == len(is) {\n    \t\t\ti = 0\n    \t\t}\n    \n    \t\tacc += is[i]\n    \t\t_,
        prs := m[acc]\n    \t\tif prs {\n    \t\t\tbreak\n    \t\t} else {\n    \t\t\tm[acc]
        = true\n    \t\t}\n    \n    \t\ti++\n    \t}\n    \treturn fmt.Sprint(acc)\n    }\n    \n    \n\n&amp;#x200B;",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eauyb4j", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m
        using AoC to learn Go.  This naive implementation is my first Go program ever
        (omitting some of the boring file slurping); I want to set up some sort of
        runner framework, a library of useful functions (like Map, below)  and automated
        tests to validate the samples.  I&amp;#39;ll refactor this to be more idiomatic
        (for example, using range in the for statements) as I learn more about Go.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package
        main\n\nimport (\n    &amp;quot;fmt&amp;quot;\n    &amp;quot;io/ioutil&amp;quot;\n    &amp;quot;log&amp;quot;\n    &amp;quot;regexp&amp;quot;\n)\n\nfunc
        Map(vs []string, f func(string) int) []int {\n    vsm := make([]int, len(vs))\n    for
        i, v := range vs {\n        vsm[i] = f(v)\n    }\n    return vsm\n}\n\nfunc
        parseToIntSlice(s string) []int {\n    re := regexp.MustCompile(`[+-]\\d+`)\n    ss
        := re.FindAllString(s, -1)\n    is := Map(ss, func(s string) int {\n        var
        i int\n        fmt.Sscanf(s, &amp;quot;%d&amp;quot;, &amp;amp;i)\n        return
        i\n    })\n\n    return is\n}\n\n/* Samples:\n&amp;quot;+1\\n-2\\n+3\\n+1&amp;quot;
        -&amp;gt; 3\n&amp;quot;+1\\n+1\\n+1&amp;quot; -&amp;gt; 3\n&amp;quot;+1\\n+1\\n-2&amp;quot;
        -&amp;gt; 0\n&amp;quot;-1\\n-2\\n-3&amp;quot; -&amp;gt; -6\n*/\nfunc day1part1(in
        string) string {\n    var acc int\n    is := parseToIntSlice(in)\n\n    for
        i := 0; i &amp;lt; len(is); i++ {\n        acc += is[i]\n    }\n    return
        fmt.Sprint(acc)\n}\n\n/*\n  Samples:\n  &amp;quot;+1\\n-1\\n&amp;quot; -&amp;gt;
        0\n  &amp;quot;+3\\n+3\\n+4\\n-2\\n-4\\n&amp;quot; -&amp;gt; 10\n  &amp;quot;-6\\n,+3\\n,+8\\n,+5\\n+-6\\n&amp;quot;
        -&amp;gt; 5\n  &amp;quot;+7\\n+7\\n-2\\n-7\\n-4\\n&amp;quot; -&amp;gt; 14\n*/\nfunc
        day1part2(in string) string {\n    var acc int\n    m := make(map[int]bool)\n    m[0]
        = true\n    is := parseToIntSlice(in)\n\n    i := 0\n    for {\n        if
        i == len(is) {\n            i = 0\n        }\n\n        acc += is[i]\n        _,
        prs := m[acc]\n        if prs {\n            break\n        } else {\n            m[acc]
        = true\n        }\n\n        i++\n    }\n    return fmt.Sprint(acc)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauyb4j/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543680171.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eau62ew", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "glassmountain", "can_mod_post": false,
        "created_utc": 1543642119.0, "send_replies": true, "parent_id": "t3_a20646",
        "score": 3, "author_fullname": "t2_964gi", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Doing it in Go again
        this year!\n\n\tpackage main\n\n\timport (\n\t\t\"bufio\"\n\t\t\"fmt\"\n\t\t\"log\"\n\t\t\"os\"\n\t\t\"strconv\"\n\t)\n\n\tconst
        (\n\t\tpuzzleInput = \"input.txt\"\n\t)\n\n\tfunc main() {\n\t\tfile, err
        := os.Open(puzzleInput)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tdefer
        func() {\n\t\t\tif err := file.Close(); err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t}()\n\n\t\tnumlist
        := []int{}\n\t\tincr := 0\n\t\tscanner := bufio.NewScanner(file)\n\t\tfor
        scanner.Scan() {\n\t\t\tnum, err := strconv.Atoi(scanner.Text())\n\t\t\tif
        err != nil {\n\t\t\t\tlog.Fatal(err)\n\t\t\t}\n\t\t\tnumlist = append(numlist,
        num)\n\t\t\tincr += num\n\t\t}\n\n\t\tif err := scanner.Err(); err != nil
        {\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\tfmt.Println(incr)\n\n\t\tvisited :=
        map[int]struct{}{}\n\t\tvisited[0] = struct{}{}\n\n\t\tcurrent := 0\n\t\tfor
        {\n\t\t\tfor _, i := range numlist {\n\t\t\t\tcurrent += i\n\t\t\t\tif _,
        ok := visited[current]; ok {\n\t\t\t\t\tfmt.Println(current)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tvisited[current]
        = struct{}{}\n\t\t\t}\n\t\t}\n\t}\n", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eau62ew", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Doing it in Go again this year!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package
        main\n\nimport (\n    &amp;quot;bufio&amp;quot;\n    &amp;quot;fmt&amp;quot;\n    &amp;quot;log&amp;quot;\n    &amp;quot;os&amp;quot;\n    &amp;quot;strconv&amp;quot;\n)\n\nconst
        (\n    puzzleInput = &amp;quot;input.txt&amp;quot;\n)\n\nfunc main() {\n    file,
        err := os.Open(puzzleInput)\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer
        func() {\n        if err := file.Close(); err != nil {\n            log.Fatal(err)\n        }\n    }()\n\n    numlist
        := []int{}\n    incr := 0\n    scanner := bufio.NewScanner(file)\n    for
        scanner.Scan() {\n        num, err := strconv.Atoi(scanner.Text())\n        if
        err != nil {\n            log.Fatal(err)\n        }\n        numlist = append(numlist,
        num)\n        incr += num\n    }\n\n    if err := scanner.Err(); err != nil
        {\n        log.Fatal(err)\n    }\n\n    fmt.Println(incr)\n\n    visited :=
        map[int]struct{}{}\n    visited[0] = struct{}{}\n\n    current := 0\n    for
        {\n        for _, i := range numlist {\n            current += i\n            if
        _, ok := visited[current]; ok {\n                fmt.Println(current)\n                return\n            }\n            visited[current]
        = struct{}{}\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau62ew/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543642119.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eau74fa", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "wlandry", "can_mod_post": false, "created_utc":
        1543643322.0, "send_replies": true, "parent_id": "t3_a20646", "score": 3,
        "author_fullname": "t2_810ls", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "# C++\n\n1774/1353\n\n50 ms for both solutions.  The
        first one I actually did with Emacs Calc.  I had to tell it to increase the
        evaluation depth :(\n\n    #include &lt;iostream&gt;\n    #include &lt;fstream&gt;\n    #include
        &lt;vector&gt;\n    #include &lt;set&gt;\n    #include &lt;numeric&gt;\n    \n    int
        main(int argc, char *argv[])\n    {\n      std::vector&lt;int64_t&gt; inputs;\n      std::ifstream
        infile(argv[1]);\n      int64_t element;\n      infile &gt;&gt; element;\n      while(infile)\n        {\n          inputs.push_back(element);\n          infile
        &gt;&gt; element;\n        }\n    \n      std::cout &lt;&lt; \"Part 1: \"
        &lt;&lt; std::accumulate(inputs.begin(), inputs.end(), 0)\n                &lt;&lt;
        \"\\n\";\n    \n      std::set&lt;int64_t&gt; history;\n      int64_t current_sum(0);\n      auto
        iterator(inputs.begin());\n      while(history.find(current_sum) == history.end())\n        {\n          history.insert(current_sum);\n          current_sum
        += *iterator;\n          ++iterator;\n          if(iterator == inputs.end())\n            {\n              iterator
        = inputs.begin();\n            }\n        }\n      std::cout &lt;&lt; \"Part
        2: \" &lt;&lt; current_sum &lt;&lt; \"\\n\";\n    }", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eau74fa", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;C++&lt;/h1&gt;\n\n&lt;p&gt;1774/1353&lt;/p&gt;\n\n&lt;p&gt;50
        ms for both solutions.  The first one I actually did with Emacs Calc.  I had
        to tell it to increase the evaluation depth :(&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include
        &amp;lt;iostream&amp;gt;\n#include &amp;lt;fstream&amp;gt;\n#include &amp;lt;vector&amp;gt;\n#include
        &amp;lt;set&amp;gt;\n#include &amp;lt;numeric&amp;gt;\n\nint main(int argc,
        char *argv[])\n{\n  std::vector&amp;lt;int64_t&amp;gt; inputs;\n  std::ifstream
        infile(argv[1]);\n  int64_t element;\n  infile &amp;gt;&amp;gt; element;\n  while(infile)\n    {\n      inputs.push_back(element);\n      infile
        &amp;gt;&amp;gt; element;\n    }\n\n  std::cout &amp;lt;&amp;lt; &amp;quot;Part
        1: &amp;quot; &amp;lt;&amp;lt; std::accumulate(inputs.begin(), inputs.end(),
        0)\n            &amp;lt;&amp;lt; &amp;quot;\\n&amp;quot;;\n\n  std::set&amp;lt;int64_t&amp;gt;
        history;\n  int64_t current_sum(0);\n  auto iterator(inputs.begin());\n  while(history.find(current_sum)
        == history.end())\n    {\n      history.insert(current_sum);\n      current_sum
        += *iterator;\n      ++iterator;\n      if(iterator == inputs.end())\n        {\n          iterator
        = inputs.begin();\n        }\n    }\n  std::cout &amp;lt;&amp;lt; &amp;quot;Part
        2: &amp;quot; &amp;lt;&amp;lt; current_sum &amp;lt;&amp;lt; &amp;quot;\\n&amp;quot;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau74fa/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543643322.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eau89xy", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "ramrunner0xff", "can_mod_post": false,
        "created_utc": 1543644660.0, "send_replies": true, "parent_id": "t3_a20646",
        "score": 3, "author_fullname": "t2_n66l8ma", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "    ;Let loose the
        recursive lispy chickens!\n    ;github.com/ramrunner/AOC2018\n    ;read the
        input as a list.\n    (define (read-list fname)\n      (with-input-from-file
        fname\n                           (lambda ()\n                             (letrec
        ((loop (lambda (line lst)\n                                        (if (eof-object?
        line)\n                                            lst\n                                            (loop
        (read-line) (append lst (list (string-&gt;number line))))))))\n                               (loop
        (read-line) ''())))))\n    \n    ;foldr over the reversed list to maintain
        order\n    (define (doit lst)\n      (define allfreq (make-hash-table))\n      (define
        loop (lambda (init)\n        (if (eq? #f (car init))\n        (loop (foldr
        (lambda (elem sum)\n               (let ((found #f))\n                 (cond
        ((eq? #t (car sum)) ''END)\n                       ((eq? #t (hash-table-exists?
        allfreq (+ (cdr sum) elem))) (begin (format #t \"FOUND:~A~%\"  (+ (cdr sum)
        elem)) (set! found #t) (cons found (+ (cdr sum) elem))))\n                       (else
        (hash-table-set! allfreq (+ (cdr sum) elem) #t) (cons found (+ (cdr sum) elem))))))\n                 init
        (reverse lst))))))\n      (loop (cons #f 0)))\n    ", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eau89xy", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;;Let loose the
        recursive lispy chickens!\n;github.com/ramrunner/AOC2018\n;read the input
        as a list.\n(define (read-list fname)\n  (with-input-from-file fname\n                       (lambda
        ()\n                         (letrec ((loop (lambda (line lst)\n                                    (if
        (eof-object? line)\n                                        lst\n                                        (loop
        (read-line) (append lst (list (string-&amp;gt;number line))))))))\n                           (loop
        (read-line) &amp;#39;())))))\n\n;foldr over the reversed list to maintain
        order\n(define (doit lst)\n  (define allfreq (make-hash-table))\n  (define
        loop (lambda (init)\n    (if (eq? #f (car init))\n    (loop (foldr (lambda
        (elem sum)\n           (let ((found #f))\n             (cond ((eq? #t (car
        sum)) &amp;#39;END)\n                   ((eq? #t (hash-table-exists? allfreq
        (+ (cdr sum) elem))) (begin (format #t &amp;quot;FOUND:~A~%&amp;quot;  (+
        (cdr sum) elem)) (set! found #t) (cons found (+ (cdr sum) elem))))\n                   (else
        (hash-table-set! allfreq (+ (cdr sum) elem) #t) (cons found (+ (cdr sum) elem))))))\n             init
        (reverse lst))))))\n  (loop (cons #f 0)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau89xy/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543644660.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eau8e60", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Smylers", "can_mod_post": false, "created_utc":
        1543644810.0, "send_replies": true, "parent_id": "t3_a20646", "score": 3,
        "author_fullname": "t2_13cudg", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "**Perl** \u2014 a one-liner for part 1:\n\n    $
        perl -wnE ''$t += $_; END {say $t }'' input\n\nPart 2:\n\n    use v5.14;\n    use
        warnings;\n    \n    my @change = &lt;&gt;;\n    my %seen = (my $frequency
        = 0 =&gt; 1);\n    push @change, shift @change until $seen{$frequency += $change[0]}++;\n    say
        $frequency;\n\n(Invoke by supplying the input file as the command-line argument
        to the program.)\n\nThe long line in the middle:\n\n* adds the head of the
        change array on to the current frequency\n* checks if that frequency has already
        been seen, ending the loop if so\n* marks the current frequency as having
        been seen\n* shifts the head off the change array and pushes it on to the
        tail\n* repeatedly, until the condition is met", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eau8e60", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Perl&lt;/strong&gt;
        \u2014 a one-liner for part 1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$ perl
        -wnE &amp;#39;$t += $_; END {say $t }&amp;#39; input\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use v5.14;\nuse warnings;\n\nmy @change
        = &amp;lt;&amp;gt;;\nmy %seen = (my $frequency = 0 =&amp;gt; 1);\npush @change,
        shift @change until $seen{$frequency += $change[0]}++;\nsay $frequency;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(Invoke
        by supplying the input file as the command-line argument to the program.)&lt;/p&gt;\n\n&lt;p&gt;The
        long line in the middle:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;adds the head
        of the change array on to the current frequency&lt;/li&gt;\n&lt;li&gt;checks
        if that frequency has already been seen, ending the loop if so&lt;/li&gt;\n&lt;li&gt;marks
        the current frequency as having been seen&lt;/li&gt;\n&lt;li&gt;shifts the
        head off the change array and pushes it on to the tail&lt;/li&gt;\n&lt;li&gt;repeatedly,
        until the condition is met&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau8e60/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543644810.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 3, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eau981b", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_a20646", "score":
        3, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Haskell, edited to fix an error in part2:\n\n    module
        Main where\n\n    import Data.Foldable (foldl'')\n    import qualified Data.IntSet
        as S\n\n    modify :: Int -&gt; String -&gt; Int\n    modify n change = case
        change of\n          (''+'': xs) -&gt; n + read xs\n          (''-'': xs)
        -&gt; n - read xs\n          _         -&gt; n\n\n    part1 :: [String] -&gt;
        Int\n    part1 = foldl'' modify 0\n\n    part2 :: [String] -&gt; Maybe Int\n    part2
        = go S.empty 0 . cycle\n      where\n        go set n changes\n          |
        S.member n set = Just n\n          | otherwise      = case changes of\n            []     -&gt;
        Nothing\n            (x:xs) -&gt; go (S.insert n set) (modify n x) xs\n\n    main
        :: IO ()\n    main = do\n      input &lt;- lines &lt;$&gt; readFile \"input1.txt\"\n      print
        $ part1 input\n      print $ part2 input", "edited": 1543646922.0, "downs":
        0, "author_flair_css_class": null, "collapsed": false, "is_submitter": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Haskell, edited to fix an error
        in part2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;module Main where\n\nimport
        Data.Foldable (foldl&amp;#39;)\nimport qualified Data.IntSet as S\n\nmodify
        :: Int -&amp;gt; String -&amp;gt; Int\nmodify n change = case change of\n      (&amp;#39;+&amp;#39;:
        xs) -&amp;gt; n + read xs\n      (&amp;#39;-&amp;#39;: xs) -&amp;gt; n - read
        xs\n      _         -&amp;gt; n\n\npart1 :: [String] -&amp;gt; Int\npart1
        = foldl&amp;#39; modify 0\n\npart2 :: [String] -&amp;gt; Maybe Int\npart2
        = go S.empty 0 . cycle\n  where\n    go set n changes\n      | S.member n
        set = Just n\n      | otherwise      = case changes of\n        []     -&amp;gt;
        Nothing\n        (x:xs) -&amp;gt; go (S.insert n set) (modify n x) xs\n\nmain
        :: IO ()\nmain = do\n  input &amp;lt;- lines &amp;lt;$&amp;gt; readFile &amp;quot;input1.txt&amp;quot;\n  print
        $ part1 input\n  print $ part2 input\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau981b/",
        "num_reports": null, "locked": false, "name": "t1_eau981b", "created": 1543645981.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1543645981.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eau9xuy", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "LeCrushinator", "can_mod_post": false,
        "created_utc": 1543647059.0, "send_replies": true, "parent_id": "t3_a20646",
        "score": 3, "author_fullname": "t2_8mf5r", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "C#. Started an hour
        late so no leaderboard for me. I''m going a bit more for cleanliness than
        leaderboard though.\n\nhttps://github.com/nfoste82/adventofcode2018/blob/master/Day1/Program.cs\n\n    public
        static void Main(string[] args)\n    {\n        Console.WriteLine($\"Part
        1 answer: {Part1()}\");\n        Console.WriteLine($\"Part 2 answer: {Part2()}\");\n    }\n    \n    private
        static int Part1()\n    {\n        var lines = _input.Split(''\\n'');\n        return
        lines.Sum(int.Parse);            \n    }\n    \n    private static int Part2()\n    {\n        var
        lines = _input.Split(''\\n'');\n        var total = 0;\n    \n        var
        frequenciesFound = new HashSet&lt;int&gt;();\n    \n        while (true)\n        {\n            foreach
        (var line in lines)\n            {\n                var number = int.Parse(line);\n                total
        += number;\n    \n                if (!frequenciesFound.Add(total))\n                {\n                    return
        total;\n                }\n            }\n        }\n    }\n    \n    private
        static string _input = @\"\";    // Paste your puzzle input here", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eau9xuy",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C#. Started an hour
        late so no leaderboard for me. I&amp;#39;m going a bit more for cleanliness
        than leaderboard though.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/nfoste82/adventofcode2018/blob/master/Day1/Program.cs\"&gt;https://github.com/nfoste82/adventofcode2018/blob/master/Day1/Program.cs&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public
        static void Main(string[] args)\n{\n    Console.WriteLine($&amp;quot;Part
        1 answer: {Part1()}&amp;quot;);\n    Console.WriteLine($&amp;quot;Part 2 answer:
        {Part2()}&amp;quot;);\n}\n\nprivate static int Part1()\n{\n    var lines =
        _input.Split(&amp;#39;\\n&amp;#39;);\n    return lines.Sum(int.Parse);            \n}\n\nprivate
        static int Part2()\n{\n    var lines = _input.Split(&amp;#39;\\n&amp;#39;);\n    var
        total = 0;\n\n    var frequenciesFound = new HashSet&amp;lt;int&amp;gt;();\n\n    while
        (true)\n    {\n        foreach (var line in lines)\n        {\n            var
        number = int.Parse(line);\n            total += number;\n\n            if
        (!frequenciesFound.Add(total))\n            {\n                return total;\n            }\n        }\n    }\n}\n\nprivate
        static string _input = @&amp;quot;&amp;quot;;    // Paste your puzzle input
        here\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau9xuy/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543647059.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "more",
        "data": {"count": 2, "name": "t1_eauhap0", "id": "eauhap0", "parent_id": "t1_eaugu9b",
        "depth": 2, "children": ["eauhap0"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "eaugu9b", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "OpposedTangent", "can_mod_post": false, "created_utc": 1543659102.0,
        "send_replies": true, "parent_id": "t1_eauag9c", "score": 3, "author_fullname":
        "t2_1ducczqx", "removal_reason": null, "approved_by": null, "mod_note": null,
        "all_awardings": [], "body": "```\np:\"I\"$read0[`:p1]except\\:\"+\"\n/ part
        1\nsum p\n/ part 2\nfirst where b[;1]=min (b:group sums 200000#p)[;1]\n```\n\nEDIT:
        simplified part 2", "edited": 1543919970.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eaugu9b", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;code&gt;\np:&amp;quot;I&amp;quot;$read0[`:p1]except\\:&amp;quot;+&amp;quot;\n/
        part 1\nsum p\n/ part 2\nfirst where b[;1]=min (b:group sums 200000#p)[;1]\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;EDIT:
        simplified part 2&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_a20646", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaugu9b/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543659102.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 3}}, {"kind": "more", "data": {"count": 2, "name": "t1_eb2kv5d",
        "id": "eb2kv5d", "parent_id": "t1_eauag9c", "depth": 1, "children": ["eb2kv5d"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "eauag9c", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "streetster_", "can_mod_post": false, "created_utc":
        1543647871.0, "send_replies": true, "parent_id": "t3_a20646", "score": 3,
        "author_fullname": "t2_smf31", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Day 01 in **Q/KDB+**\n\n    / Part 1\n    sum
        r:{value except[x;\"+\"]} each read0 `:input/01.txt\n    / Part 2\n    first
        where d=min d:{x[;0]+x[;1]-x[;0]} group 0,sums 200000#r\n\n[Github Repo](https://github.com/streetster/aoc)",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eauag9c", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Day
        01 in &lt;strong&gt;Q/KDB+&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;/
        Part 1\nsum r:{value except[x;&amp;quot;+&amp;quot;]} each read0 `:input/01.txt\n/
        Part 2\nfirst where d=min d:{x[;0]+x[;1]-x[;0]} group 0,sums 200000#r\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/streetster/aoc\"&gt;Github Repo&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauag9c/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543647871.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 4, "name": "t1_eaueyuu",
        "id": "eaueyuu", "parent_id": "t1_eauea1p", "depth": 1, "children": ["eaueyuu"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "eauea1p", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "chakravala", "can_mod_post": false, "created_utc":
        1543654523.0, "send_replies": true, "parent_id": "t3_a20646", "score": 3,
        "author_fullname": "t2_2f5qrafd", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "No need to cycle through the data hundreds
        of times - a single pass suffices.\n\n    import math\n    \n    data = [int(i)
        for i in open(\"input.txt\").readlines()]\n    \n    n = sum(data)\n    l
        = len(data)\n    \n    sums = set([])\n    sums_mod = set([])\n    sum = 0\n    \n    repeats
        = {}\n    fracs = {}\n    min_index = l*l\n    min_sum = None\n    for idx,
        val in enumerate(data):\n        sum += val\n        if (sum%n) in sums_mod:\n            if
        (l*math.floor(sum/n)+repeats[sum%n]-l*fracs[sum%n] &lt; min_index):\n                min_index
        = l*math.floor(sum/n)+repeats[sum%n]-l*fracs[sum%n]\n                min_sum
        = sum\n        else:\n            sums.add(sum)\n            sums_mod.add(sum%n)\n            repeats[sum%n]
        = idx\n            fracs[sum%n] = math.floor(sum/n)\n    \n    print(\"Total
        sum = %s\" %n)\n    print(\"First repeat = %s\" %min_sum)", "edited": 1543655194.0,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eauea1p",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No need to cycle through
        the data hundreds of times - a single pass suffices.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        math\n\ndata = [int(i) for i in open(&amp;quot;input.txt&amp;quot;).readlines()]\n\nn
        = sum(data)\nl = len(data)\n\nsums = set([])\nsums_mod = set([])\nsum = 0\n\nrepeats
        = {}\nfracs = {}\nmin_index = l*l\nmin_sum = None\nfor idx, val in enumerate(data):\n    sum
        += val\n    if (sum%n) in sums_mod:\n        if (l*math.floor(sum/n)+repeats[sum%n]-l*fracs[sum%n]
        &amp;lt; min_index):\n            min_index = l*math.floor(sum/n)+repeats[sum%n]-l*fracs[sum%n]\n            min_sum
        = sum\n    else:\n        sums.add(sum)\n        sums_mod.add(sum%n)\n        repeats[sum%n]
        = idx\n        fracs[sum%n] = math.floor(sum/n)\n\nprint(&amp;quot;Total sum
        = %s&amp;quot; %n)\nprint(&amp;quot;First repeat = %s&amp;quot; %min_sum)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauea1p/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543654523.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 3, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "more",
        "data": {"count": 1, "name": "t1_eavbvok", "id": "eavbvok", "parent_id": "t1_eaug9az",
        "depth": 1, "children": ["eavbvok"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "eaug9az", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": "DELETED", "no_follow":
        true, "author": "[deleted]", "can_mod_post": false, "send_replies": true,
        "parent_id": "t3_a20646", "score": 3, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "[deleted]",
        "edited": 1543721656.0, "downs": 0, "author_flair_css_class": null, "collapsed":
        true, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaug9az/",
        "num_reports": null, "locked": false, "name": "t1_eaug9az", "created": 1543658083.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1543658083.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauvhfo",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Nathan340",
        "can_mod_post": false, "created_utc": 1543677570.0, "send_replies": true,
        "parent_id": "t1_eaughfl", "score": 2, "author_fullname": "t2_3yt5s", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Part 1:\n\nI''m bringing a whole lot of tricks I learned from our Shortest
        Script Challenges to Advent of Code this year.\n\nStarting off with some cool
        use of Invoke-Expression.\n\n    gc .\\input.txt -join \"\" | iex\n\nPart
        2:\n\nFirst lesson of AoC for me this year is to read the instructions.  I
        spent a decent amount of time trying to figure out what was wrong with my
        code before realizing we were supposed to loop the list multiple times if
        needed.\n\nThen I was using arrays and the `-in` operator which was painfully
        slow.  Finally got around to switching to a hash table, and it went real quick.  Some
        diagnostic printing and extraneous info left here (tracking iteration count,
        storing where/when each result value was first found).  Pretty much the same
        idea of where you ended up.\n\n    $inList = gc .\\input.txt\n    $v = 0\n    $res
        = @{}\n    $loop = 0\n    $found = $false\n    while(!$found){\n    \t$loop++\n    \twrite-host
        \"Loop $loop\"\n    \tfor($i = 0;$i -lt $inList.length;$i++){\n    \t\t$v+=$inList[$i]\n    \t\tif($res[$v]){\n    \t\t\twrite-host
        $v\n    \t\t\t$found = $true\n    \t\t\tbreak\n    \t\t}else{\n    \t\t\t$res.add($v,\"$loop
        : $i\")\n    \t\t}\n    \t}\n    }\n", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eauvhfo", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Part 1:&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m
        bringing a whole lot of tricks I learned from our Shortest Script Challenges
        to Advent of Code this year.&lt;/p&gt;\n\n&lt;p&gt;Starting off with some
        cool use of Invoke-Expression.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;gc .\\input.txt
        -join &amp;quot;&amp;quot; | iex\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;p&gt;First lesson of AoC for me this year is to read the
        instructions.  I spent a decent amount of time trying to figure out what was
        wrong with my code before realizing we were supposed to loop the list multiple
        times if needed.&lt;/p&gt;\n\n&lt;p&gt;Then I was using arrays and the &lt;code&gt;-in&lt;/code&gt;
        operator which was painfully slow.  Finally got around to switching to a hash
        table, and it went real quick.  Some diagnostic printing and extraneous info
        left here (tracking iteration count, storing where/when each result value
        was first found).  Pretty much the same idea of where you ended up.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$inList
        = gc .\\input.txt\n$v = 0\n$res = @{}\n$loop = 0\n$found = $false\nwhile(!$found){\n    $loop++\n    write-host
        &amp;quot;Loop $loop&amp;quot;\n    for($i = 0;$i -lt $inList.length;$i++){\n        $v+=$inList[$i]\n        if($res[$v]){\n            write-host
        $v\n            $found = $true\n            break\n        }else{\n            $res.add($v,&amp;quot;$loop
        : $i&amp;quot;)\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauvhfo/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543677570.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 1, "name": "t1_ebbcj4n",
        "id": "ebbcj4n", "parent_id": "t1_ebb7z1h", "depth": 2, "children": ["ebbcj4n"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "ebb7z1h", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "craigontour", "can_mod_post": false, "created_utc":
        1544213696.0, "send_replies": true, "parent_id": "t1_eaughfl", "score": 2,
        "author_fullname": "t2_122b1e", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "&gt;$nums = \\[int\\[\\]\\](gc
        .\\\\data.txt)$lookup=@()$current=0while ($true) {$nums.foreach{ $current
        += $\\_;   if ($lookup.Contains($current)) {break}; $lookup\\[$current\\]++;
        }}$current\n\nI changed your code to use an array as that''s what I''d been
        using. It works with small set of test numbers but not the challenge set.
        It just loops forever (or until i give up). \n\nAlso, I have been struggling
        to understand hash tables. Please could you explain how `$lookup[$current]++`
        works.", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_ebb7z1h", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;$nums
        = [int[]](gc .\\data.txt)$lookup=@()$current=0while ($true) {$nums.foreach{
        $current += $_;   if ($lookup.Contains($current)) {break}; $lookup[$current]++;
        }}$current&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I changed your code
        to use an array as that&amp;#39;s what I&amp;#39;d been using. It works with
        small set of test numbers but not the challenge set. It just loops forever
        (or until i give up). &lt;/p&gt;\n\n&lt;p&gt;Also, I have been struggling
        to understand hash tables. Please could you explain how &lt;code&gt;$lookup[$current]++&lt;/code&gt;
        works.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null,
        "distinguished": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "link_id": "t3_a20646", "unrepliable_reason": null,
        "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/ebb7z1h/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1544213696.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "more",
        "data": {"count": 2, "name": "t1_eauzzl3", "id": "eauzzl3", "parent_id": "t1_eaughfl",
        "depth": 1, "children": ["eauzzl3", "eavl366"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "eaughfl", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "ka-splam", "can_mod_post": false, "created_utc": 1543658485.0,
        "send_replies": true, "parent_id": "t3_a20646", "score": 3, "author_fullname":
        "t2_furr1", "approved_by": null, "mod_note": null, "all_awardings": [], "collapsed":
        false, "body": "#####PowerShell\n\nI had an untidy script which was enough
        to get me 57th in the Part 1 leaderboard (first time! never made it last year!),
        here''s a neater version:\n\n    gc .\\data.txt |% { $r += [int]$_ }; $r\n\nThat''s
        get-content to read file lines, pipeline into a foreach loop, cast current
        line to integer and add to a running total variable (doesn''t need declaring
        first), then print the result.\n\n(PS doesn''t have a clean ''reduce'' operator;
        it''s possible to do it with Linq, but it doesn''t have first class Linq support
        either, so it''s not as nice:\n\n    [linq.enumerable]::Aggregate([int[]](gc
        .\\data.txt), [func[int,int,int]]{param($a,$b)$a+$b})\n\n)\n\nPart 2:\n\nI
        missed the bit where you have to keep running the calculation, so when I got
        no answer I thought my code was wrong; that delayed me to 6.5 minutes and
        180th. It ended up a less tidy version of this, which runs in 3-4 seconds:\n\n    $nums
        = [int[]](gc .\\data.txt)\n    $lookup=@{}\n    $current=0\n    while ($true)
        { \n        $nums.foreach{ $current += $_;   if ($lookup.ContainsKey($current))
        {break}; $lookup[$current]++; } \n    }\n    $current\n\nIt''s the previous
        loop done with .foreach to be a bit faster, then wrapped in a while loop with
        a break condition. $lookup is a hashtable.\n\n\n", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eaughfl", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;h5&gt;PowerShell&lt;/h5&gt;\n\n&lt;p&gt;I
        had an untidy script which was enough to get me 57th in the Part 1 leaderboard
        (first time! never made it last year!), here&amp;#39;s a neater version:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;gc
        .\\data.txt |% { $r += [int]$_ }; $r\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That&amp;#39;s
        get-content to read file lines, pipeline into a foreach loop, cast current
        line to integer and add to a running total variable (doesn&amp;#39;t need
        declaring first), then print the result.&lt;/p&gt;\n\n&lt;p&gt;(PS doesn&amp;#39;t
        have a clean &amp;#39;reduce&amp;#39; operator; it&amp;#39;s possible to do
        it with Linq, but it doesn&amp;#39;t have first class Linq support either,
        so it&amp;#39;s not as nice:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[linq.enumerable]::Aggregate([int[]](gc
        .\\data.txt), [func[int,int,int]]{param($a,$b)$a+$b})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;)&lt;/p&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;p&gt;I missed the bit where you have to keep running the
        calculation, so when I got no answer I thought my code was wrong; that delayed
        me to 6.5 minutes and 180th. It ended up a less tidy version of this, which
        runs in 3-4 seconds:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$nums = [int[]](gc
        .\\data.txt)\n$lookup=@{}\n$current=0\nwhile ($true) { \n    $nums.foreach{
        $current += $_;   if ($lookup.ContainsKey($current)) {break}; $lookup[$current]++;
        } \n}\n$current\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&amp;#39;s the previous
        loop done with .foreach to be a bit faster, then wrapped in a while loop with
        a break condition. $lookup is a hashtable.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaughfl/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543658485.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eaugvl3", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "xokas11", "can_mod_post": false, "created_utc":
        1543659166.0, "send_replies": true, "parent_id": "t3_a20646", "score": 3,
        "author_fullname": "t2_3bksx", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Well, I just did the first part....by copying
        and pasting the input to google. I think I could have made the leaderboard
        for the first star. Second one is a little harder to do this way", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eaugvl3",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well, I just did the
        first part....by copying and pasting the input to google. I think I could
        have made the leaderboard for the first star. Second one is a little harder
        to do this way&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaugvl3/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543659166.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 3}}, {"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 3, "removal_reason": null, "link_id": "t3_a20646",
        "author_flair_template_id": null, "likes": null, "replies": {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "more", "data": {"count": 1, "name": "t1_eavc9gb", "id": "eavc9gb",
        "parent_id": "t1_eauoaed", "depth": 1, "children": ["eavc9gb"]}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "eauoaed", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "[deleted]", "can_mod_post": false, "send_replies":
        true, "parent_id": "t3_a20646", "score": 3, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "Crystal! One
        does not simply write too much code during Advent of Code. \n\nPart 1:\n\n    input
        = File.read(\"#{__DIR__}/../../inputs/1.txt\")\n    puts input.split.map(&amp;.to_i).sum\n\nPart
        2:\n\n    input = File.read(\"#{__DIR__}/../../inputs/1.txt\")\n    frequencies
        = input.split.map(&amp;.to_i)\n\n    current_frequency = 0\n    seen_frequencies
        = Set{current_frequency}\n\n    frequencies.cycle.each do |frequency|\n      current_frequency
        += frequency\n\n      if seen_frequencies.includes?(current_frequency)\n        puts
        current_frequency\n        exit\n      end\n\n      seen_frequencies.add(current_frequency)\n    end",
        "edited": 1543683486.0, "downs": 0, "author_flair_css_class": null, "collapsed":
        false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Crystal!
        One does not simply write too much code during Advent of Code. &lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;input = File.read(&amp;quot;#{__DIR__}/../../inputs/1.txt&amp;quot;)\nputs
        input.split.map(&amp;amp;.to_i).sum\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;input = File.read(&amp;quot;#{__DIR__}/../../inputs/1.txt&amp;quot;)\nfrequencies
        = input.split.map(&amp;amp;.to_i)\n\ncurrent_frequency = 0\nseen_frequencies
        = Set{current_frequency}\n\nfrequencies.cycle.each do |frequency|\n  current_frequency
        += frequency\n\n  if seen_frequencies.includes?(current_frequency)\n    puts
        current_frequency\n    exit\n  end\n\n  seen_frequencies.add(current_frequency)\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauoaed/",
        "num_reports": null, "locked": false, "name": "t1_eauoaed", "created": 1543670119.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1543670119.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 1, "name": "t1_eavcc6i",
        "id": "eavcc6i", "parent_id": "t1_eaur2s2", "depth": 1, "children": ["eavcc6i"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "eaur2s2", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "qwertyuiop924", "can_mod_post": false,
        "created_utc": 1543673100.0, "send_replies": true, "parent_id": "t3_a20646",
        "score": 3, "author_fullname": "t2_ldiql", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Day 1 in AWK (maximally
        compacted for maximal confusion!):\n\nPart 1:\n\n    {c+=$0} END{print c}\n\nPart
        2:\n\n    BEGIN{h[0]=1}\n    {do{c+=$0;h[c]+=1;if(h[c]==2) exit;}while(getline);\n     ARGC++;ARGV[ARGIND+1]
        = FILENAME;nextfile;}\n    END{print c}\n\nWhitecard: One does not simply
        tell askalski no during Advent of Code.", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eaur2s2", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Day 1 in AWK (maximally compacted
        for maximal confusion!):&lt;/p&gt;\n\n&lt;p&gt;Part 1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{c+=$0}
        END{print c}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part 2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;BEGIN{h[0]=1}\n{do{c+=$0;h[c]+=1;if(h[c]==2)
        exit;}while(getline);\n ARGC++;ARGV[ARGIND+1] = FILENAME;nextfile;}\nEND{print
        c}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Whitecard: One does not simply tell
        askalski no during Advent of Code.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaur2s2/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543673100.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 3, "name": "t1_eavv3k3",
        "id": "eavv3k3", "parent_id": "t1_eav31wz", "depth": 1, "children": ["eavv3k3",
        "eawdht4"]}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "eav31wz", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Warbringer007",
        "can_mod_post": false, "created_utc": 1543684065.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 3, "author_fullname": "t2_87na2", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "Erlang:\n\n    first()
        -&gt;\n        Input = readlines(),\n        Lines = string:split(Input, \"\\n\",
        all),\n        io:format(\"~p~n\", [firstTask(Lines, 0)]),\n        io:format(\"~p~n\",
        [secondTask(Lines, [0], 0)]).\n\n    firstTask([], Acc) -&gt;\n        Acc;\n\n    firstTask([First
        | Rest], Acc) -&gt;\n        firstTask(Rest, Acc + list_to_integer(First)).\n\n    secondTask([First
        | Rest], Freq, Acc) -&gt;\n        FreqTotal = Acc + list_to_integer(First),\n        case
        [X || X &lt;- Freq, X =:= FreqTotal] of\n            [] -&gt; secondTask(Rest
        ++ [First], Freq ++ [FreqTotal], FreqTotal);\n            _ -&gt; FreqTotal\n        end.\n\nreadlines()
        function reads whole file, everything is concatenated with newline so I have
        to split it.", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eav31wz", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Erlang:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;first()
        -&amp;gt;\n    Input = readlines(),\n    Lines = string:split(Input, &amp;quot;\\n&amp;quot;,
        all),\n    io:format(&amp;quot;~p~n&amp;quot;, [firstTask(Lines, 0)]),\n    io:format(&amp;quot;~p~n&amp;quot;,
        [secondTask(Lines, [0], 0)]).\n\nfirstTask([], Acc) -&amp;gt;\n    Acc;\n\nfirstTask([First
        | Rest], Acc) -&amp;gt;\n    firstTask(Rest, Acc + list_to_integer(First)).\n\nsecondTask([First
        | Rest], Freq, Acc) -&amp;gt;\n    FreqTotal = Acc + list_to_integer(First),\n    case
        [X || X &amp;lt;- Freq, X =:= FreqTotal] of\n        [] -&amp;gt; secondTask(Rest
        ++ [First], Freq ++ [FreqTotal], FreqTotal);\n        _ -&amp;gt; FreqTotal\n    end.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;readlines()
        function reads whole file, everything is concatenated with newline so I have
        to split it.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eav31wz/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543684065.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eav6oid",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "pcman159",
        "can_mod_post": false, "created_utc": 1543686894.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 3, "author_fullname": "t2_gacpo", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "**I
        optimised my solutions,( but my code is not legible anymore)**  \n\n\nAfter
        solving the second part of todays challenge I noticed that the execution time
        was quite slow (1000 iterations took almost a minute).  \nI wanted to optimize
        this and quickly noticed the bottleneck being lookup in a set that quickly
        expands.  \n\n\nI decided to trade all my code legibility for performance
        and came up with [this](https://pastebin.com/wGwP3RJ8) solution which runs
        about 20 times faster because it does not require a container to store all
        solutions after the first iteration.   \nI usually don''t optimize these problems
        (if it works once I''m fine with it)  and the linked solution is by no means
        perfect but I had a lot of time on my hands and noticed a serious problem
        in the obvious solution.", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eav6oid", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;I
        optimised my solutions,( but my code is not legible anymore)&lt;/strong&gt;  &lt;/p&gt;\n\n&lt;p&gt;After
        solving the second part of todays challenge I noticed that the execution time
        was quite slow (1000 iterations took almost a minute).&lt;br/&gt;\nI wanted
        to optimize this and quickly noticed the bottleneck being lookup in a set
        that quickly expands.  &lt;/p&gt;\n\n&lt;p&gt;I decided to trade all my code
        legibility for performance and came up with &lt;a href=\"https://pastebin.com/wGwP3RJ8\"&gt;this&lt;/a&gt;
        solution which runs about 20 times faster because it does not require a container
        to store all solutions after the first iteration.&lt;br/&gt;\nI usually don&amp;#39;t
        optimize these problems (if it works once I&amp;#39;m fine with it)  and the
        linked solution is by no means perfect but I had a lot of time on my hands
        and noticed a serious problem in the obvious solution.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eav6oid/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543686894.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eawgrkr",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Zarel",
        "can_mod_post": false, "created_utc": 1543725022.0, "send_replies": true,
        "parent_id": "t1_eavav4j", "score": 2, "author_fullname": "t2_1mjoo", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "You actually don''t even need to add `0` to the front of the list; unary
        `+` is just ignored.\n\n`eval(input)` is definitely all you need; I''ve tested
        it and it works in at least JavaScript and PHP.", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eawgrkr", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You actually don&amp;#39;t
        even need to add &lt;code&gt;0&lt;/code&gt; to the front of the list; unary
        &lt;code&gt;+&lt;/code&gt; is just ignored.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;eval(input)&lt;/code&gt;
        is definitely all you need; I&amp;#39;ve tested it and it works in at least
        JavaScript and PHP.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_a20646", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eawgrkr/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543725022.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 2}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "eavav4j", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "rebane2001",
        "can_mod_post": false, "created_utc": 1543690122.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 3, "author_fullname": "t2_ba5lz", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "For
        the first challenge, I just added 0 to the front of the list and pasted it
        in my F12 (JS) console", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eavav4j", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;For
        the first challenge, I just added 0 to the front of the list and pasted it
        in my F12 (JS) console&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": true, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavav4j/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543690122.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eavb08z",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "proxpero42",
        "can_mod_post": false, "created_utc": 1543690229.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 3, "author_fullname": "t2_2mcpx2u3", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "##Swift\n```\n//
        part 1\n\n// prepare the puzzle input\nlet input = loadInput(named: \"day1\")\n    .split(separator:
        \"\\n\")\n    .map(String.init)\n    .compactMap(Int.init)\n\nlet part1 =
        input.reduce(0, +)\n\n// part 2\n\n// Make an infinite sequence from the input\nlet
        frequencies = sequence(state: input.startIndex) { (index) -&gt; Int? in\n    defer
        {\n        index = index.advanced(by: 1)\n    }\n    if index == input.endIndex
        {\n        index = input.startIndex\n    }\n    return input[index]\n}\n\nvar
        history = Set&lt;Int&gt;.init(arrayLiteral: 0)\nvar current = 0\n\nfor frequency
        in frequencies {\n    current += frequency\n    if history.contains(current)
        {\n        print(current)\n        abort()\n    }\n    history.insert(current)\n}\n```",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eavb08z", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h2&gt;Swift&lt;/h2&gt;\n\n&lt;p&gt;```\n//
        part 1&lt;/p&gt;\n\n&lt;p&gt;// prepare the puzzle input\nlet input = loadInput(named:
        &amp;quot;day1&amp;quot;)\n    .split(separator: &amp;quot;\\n&amp;quot;)\n    .map(String.init)\n    .compactMap(Int.init)&lt;/p&gt;\n\n&lt;p&gt;let
        part1 = input.reduce(0, +)&lt;/p&gt;\n\n&lt;p&gt;// part 2&lt;/p&gt;\n\n&lt;p&gt;//
        Make an infinite sequence from the input\nlet frequencies = sequence(state:
        input.startIndex) { (index) -&amp;gt; Int? in\n    defer {\n        index
        = index.advanced(by: 1)\n    }\n    if index == input.endIndex {\n        index
        = input.startIndex\n    }\n    return input[index]\n}&lt;/p&gt;\n\n&lt;p&gt;var
        history = Set&amp;lt;Int&amp;gt;.init(arrayLiteral: 0)\nvar current = 0&lt;/p&gt;\n\n&lt;p&gt;for
        frequency in frequencies {\n    current += frequency\n    if history.contains(current)
        {\n        print(current)\n        abort()\n    }\n    history.insert(current)\n}\n```&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavb08z/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543690229.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eavrtqg", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "kpingvin", "can_mod_post": false, "created_utc":
        1543703238.0, "send_replies": true, "parent_id": "t3_a20646", "score": 3,
        "author_fullname": "t2_7d59s", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Any love for   \n\n**SQLite** ?   \n\n    CREATE
        TABLE ''Changes'' (\n    \t''id''\tINTEGER NOT NULL PRIMARY KEY AUTOINCREMENT
        UNIQUE,\n    \t''frequency_change''\tINTEGER\n    )\n    \n    INSERT INTO
        Changes (frequency_change)\n    VALUES\n    (\"13\"),(\"-7\"),(\"-17\"),(\"12\"),(\"-11\"),(\"19\"),(\"18\"),(\"19\"),(\"-8\"),(\"11\"),(\"7\"),(\"-3\"),(\"7\"),(\"-1\"),(\"-16\"),(\"11\"),(\"-2\"),(\"-2\"),(\"20\"),(\"1\"),(\"17\"),(\"15\"),(\"4\"),(\"-1\"),(\"7\"),(\"3\"),(\"17\"),(\"13\"),(\"-8\"),(\"15\"),(\"18\"),(\"-12\"),(\"3\"),(\"-4\"),(\"-14\"),(\"6\"),(\"-7\"),(\"8\"),(\"-9\"),(\"12\"),(\"7\"),(\"2\"),(\"-8\"),(\"-19\"),(\"-12\"),(\"11\"),(\"13\"),(\"4\"),(\"13\"),(\"11\"),(\"19\"),(\"14\"),(\"-12\"),(\"-19\"),(\"1\"),(\"-10\"),(\"20\"),(\"-8\"),(\"-15\"),(\"2\"),(\"7\"),(\"-5\"),(\"10\"),(\"7\"),(\"19\"),(\"-5\"),(\"11\"),(\"-4\"),(\"15\"),(\"18\"),(\"13\"),(\"10\"),(\"1\"),(\"2\"),(\"6\"),(\"20\"),(\"5\"),(\"-10\"),(\"-2\"),(\"-2\"),(\"12\"),(\"-11\"),(\"-13\"),(\"-13\"),(\"16\"),(\"17\"),(\"17\"),(\"-18\"),(\"-13\"),(\"-17\"),(\"19\"),(\"-3\"),(\"-11\"),(\"-19\"),(\"1\"),(\"-13\"),(\"-6\"),(\"-5\"),(\"-19\"),(\"9\"),(\"1\"),(\"18\"),(\"-7\"),(\"-13\"),(\"3\"),(\"-14\"),(\"-10\"),(\"18\"),(\"17\"),(\"16\"),(\"9\"),(\"3\"),(\"7\"),(\"-12\"),(\"6\"),(\"7\"),(\"-19\"),(\"-5\"),(\"-8\"),(\"-1\"),(\"-13\"),(\"8\"),(\"-3\"),(\"-22\"),(\"-17\"),(\"-16\"),(\"-11\"),(\"18\"),(\"-14\"),(\"-15\"),(\"-17\"),(\"-18\"),(\"9\"),(\"-10\"),(\"14\"),(\"14\"),(\"4\"),(\"6\"),(\"2\"),(\"23\"),(\"18\"),(\"1\"),(\"20\"),(\"-4\"),(\"12\"),(\"1\"),(\"17\"),(\"-3\"),(\"4\"),(\"13\"),(\"7\"),(\"11\"),(\"-12\"),(\"-21\"),(\"-18\"),(\"3\"),(\"-27\"),(\"-21\"),(\"13\"),(\"13\"),(\"-1\"),(\"-16\"),(\"6\"),(\"15\"),(\"-7\"),(\"-11\"),(\"43\"),(\"12\"),(\"2\"),(\"3\"),(\"15\"),(\"8\"),(\"14\"),(\"15\"),(\"-16\"),(\"-5\"),(\"7\"),(\"18\"),(\"17\"),(\"11\"),(\"3\"),(\"17\"),(\"-14\"),(\"13\"),(\"16\"),(\"3\"),(\"19\"),(\"-5\"),(\"-7\"),(\"-12\"),(\"9\"),(\"-5\"),(\"-5\"),(\"4\"),(\"19\"),(\"9\"),(\"-6\"),(\"19\"),(\"1\"),(\"5\"),(\"15\"),(\"-10\"),(\"5\"),(\"14\"),(\"-4\"),(\"-16\"),(\"-1\"),(\"-12\"),(\"-12\"),(\"13\"),(\"-8\"),(\"1\"),(\"-14\"),(\"-8\"),(\"-6\"),(\"-16\"),(\"6\"),(\"13\"),(\"8\"),(\"-12\"),(\"8\"),(\"-3\"),(\"-16\"),(\"13\"),(\"-10\"),(\"-14\"),(\"-8\"),(\"-12\"),(\"-9\"),(\"4\"),(\"-1\"),(\"10\"),(\"15\"),(\"-3\"),(\"-15\"),(\"14\"),(\"3\"),(\"-22\"),(\"-17\"),(\"-2\"),(\"11\"),(\"-1\"),(\"-3\"),(\"-10\"),(\"11\"),(\"-12\"),(\"3\"),(\"5\"),(\"17\"),(\"7\"),(\"3\"),(\"-18\"),(\"-22\"),(\"-7\"),(\"-17\"),(\"19\"),(\"15\"),(\"19\"),(\"17\"),(\"-12\"),(\"9\"),(\"-1\"),(\"11\"),(\"11\"),(\"-6\"),(\"-2\"),(\"1\"),(\"27\"),(\"-15\"),(\"22\"),(\"10\"),(\"16\"),(\"10\"),(\"18\"),(\"-1\"),(\"-4\"),(\"9\"),(\"19\"),(\"15\"),(\"13\"),(\"-16\"),(\"-7\"),(\"18\"),(\"7\"),(\"-19\"),(\"-1\"),(\"-3\"),(\"-11\"),(\"-1\"),(\"-1\"),(\"14\"),(\"6\"),(\"-10\"),(\"16\"),(\"19\"),(\"4\"),(\"-18\"),(\"-22\"),(\"16\"),(\"18\"),(\"13\"),(\"-1\"),(\"-20\"),(\"16\"),(\"10\"),(\"13\"),(\"-2\"),(\"-5\"),(\"-15\"),(\"-2\"),(\"-4\"),(\"14\"),(\"-16\"),(\"-7\"),(\"-5\"),(\"-8\"),(\"6\"),(\"9\"),(\"2\"),(\"-14\"),(\"-8\"),(\"-4\"),(\"18\"),(\"9\"),(\"-4\"),(\"19\"),(\"30\"),(\"1\"),(\"-7\"),(\"11\"),(\"8\"),(\"5\"),(\"-8\"),(\"9\"),(\"-7\"),(\"16\"),(\"17\"),(\"5\"),(\"9\"),(\"-19\"),(\"14\"),(\"17\"),(\"-8\"),(\"13\"),(\"3\"),(\"-12\"),(\"10\"),(\"4\"),(\"-7\"),(\"-18\"),(\"12\"),(\"14\"),(\"16\"),(\"11\"),(\"8\"),(\"-1\"),(\"-8\"),(\"-17\"),(\"-6\"),(\"4\"),(\"10\"),(\"3\"),(\"-10\"),(\"5\"),(\"-9\"),(\"-24\"),(\"-4\"),(\"13\"),(\"-1\"),(\"3\"),(\"-14\"),(\"5\"),(\"4\"),(\"-12\"),(\"-6\"),(\"-6\"),(\"16\"),(\"-20\"),(\"-34\"),(\"-1\"),(\"-12\"),(\"19\"),(\"-18\"),(\"-8\"),(\"-13\"),(\"-4\"),(\"10\"),(\"16\"),(\"-4\"),(\"-2\"),(\"1\"),(\"7\"),(\"17\"),(\"-13\"),(\"6\"),(\"16\"),(\"14\"),(\"18\"),(\"21\"),(\"29\"),(\"-1\"),(\"-3\"),(\"-34\"),(\"-16\"),(\"-15\"),(\"-27\"),(\"-5\"),(\"-8\"),(\"19\"),(\"7\"),(\"10\"),(\"15\"),(\"2\"),(\"-7\"),(\"11\"),(\"-12\"),(\"-21\"),(\"-20\"),(\"19\"),(\"11\"),(\"3\"),(\"6\"),(\"-52\"),(\"-13\"),(\"3\"),(\"-43\"),(\"-19\"),(\"-6\"),(\"-4\"),(\"-20\"),(\"-6\"),(\"9\"),(\"-5\"),(\"3\"),(\"17\"),(\"-11\"),(\"-17\"),(\"-15\"),(\"-16\"),(\"-7\"),(\"12\"),(\"5\"),(\"11\"),(\"4\"),(\"-14\"),(\"-12\"),(\"10\"),(\"20\"),(\"7\"),(\"17\"),(\"-19\"),(\"-10\"),(\"6\"),(\"-18\"),(\"-9\"),(\"10\"),(\"24\"),(\"20\"),(\"-2\"),(\"1\"),(\"7\"),(\"-11\"),(\"10\"),(\"8\"),(\"-4\"),(\"-15\"),(\"-11\"),(\"-20\"),(\"-1\"),(\"-18\"),(\"-13\"),(\"2\"),(\"-25\"),(\"-21\"),(\"10\"),(\"12\"),(\"-49\"),(\"13\"),(\"-4\"),(\"-7\"),(\"17\"),(\"14\"),(\"17\"),(\"-85\"),(\"8\"),(\"-5\"),(\"16\"),(\"5\"),(\"17\"),(\"-59\"),(\"-4\"),(\"-17\"),(\"-28\"),(\"-47\"),(\"27\"),(\"-7\"),(\"16\"),(\"-66\"),(\"7\"),(\"-16\"),(\"-1\"),(\"-134\"),(\"22\"),(\"2\"),(\"-31\"),(\"8\"),(\"11\"),(\"-54\"),(\"7\"),(\"-5\"),(\"21\"),(\"-31\"),(\"-4\"),(\"-14\"),(\"12\"),(\"31\"),(\"-14\"),(\"-218\"),(\"-82\"),(\"-71530\"),(\"7\"),(\"11\"),(\"4\"),(\"-10\"),(\"-18\"),(\"5\"),(\"-19\"),(\"-4\"),(\"-11\"),(\"4\"),(\"9\"),(\"1\"),(\"-13\"),(\"7\"),(\"17\"),(\"16\"),(\"-8\"),(\"-6\"),(\"5\"),(\"14\"),(\"2\"),(\"2\"),(\"-1\"),(\"-9\"),(\"-19\"),(\"-19\"),(\"-4\"),(\"18\"),(\"14\"),(\"6\"),(\"-8\"),(\"3\"),(\"-8\"),(\"-1\"),(\"-3\"),(\"19\"),(\"17\"),(\"11\"),(\"14\"),(\"17\"),(\"6\"),(\"14\"),(\"-4\"),(\"15\"),(\"-7\"),(\"18\"),(\"10\"),(\"15\"),(\"-10\"),(\"1\"),(\"5\"),(\"-19\"),(\"7\"),(\"-16\"),(\"-18\"),(\"2\"),(\"-16\"),(\"18\"),(\"8\"),(\"-6\"),(\"10\"),(\"-1\"),(\"9\"),(\"5\"),(\"-19\"),(\"9\"),(\"13\"),(\"-6\"),(\"-18\"),(\"-12\"),(\"-14\"),(\"-7\"),(\"-15\"),(\"7\"),(\"-20\"),(\"-5\"),(\"11\"),(\"12\"),(\"3\"),(\"-20\"),(\"-18\"),(\"10\"),(\"17\"),(\"-3\"),(\"1\"),(\"-9\"),(\"15\"),(\"3\"),(\"-6\"),(\"-20\"),(\"13\"),(\"5\"),(\"-12\"),(\"-13\"),(\"-25\"),(\"-2\"),(\"-13\"),(\"1\"),(\"-16\"),(\"-17\"),(\"12\"),(\"18\"),(\"-11\"),(\"15\"),(\"19\"),(\"11\"),(\"2\"),(\"4\"),(\"16\"),(\"14\"),(\"26\"),(\"2\"),(\"-6\"),(\"-12\"),(\"2\"),(\"1\"),(\"5\"),(\"1\"),(\"1\"),(\"14\"),(\"4\"),(\"-13\"),(\"-21\"),(\"7\"),(\"3\"),(\"25\"),(\"19\"),(\"11\"),(\"-6\"),(\"-2\"),(\"19\"),(\"4\"),(\"6\"),(\"2\"),(\"-18\"),(\"11\"),(\"22\"),(\"16\"),(\"-10\"),(\"-3\"),(\"18\"),(\"8\"),(\"14\"),(\"15\"),(\"10\"),(\"8\"),(\"-3\"),(\"12\"),(\"-8\"),(\"-7\"),(\"-3\"),(\"-12\"),(\"2\"),(\"7\"),(\"16\"),(\"13\"),(\"-12\"),(\"15\"),(\"-18\"),(\"4\"),(\"-16\"),(\"-4\"),(\"-13\"),(\"10\"),(\"4\"),(\"20\"),(\"-4\"),(\"13\"),(\"-17\"),(\"-3\"),(\"-12\"),(\"-14\"),(\"-7\"),(\"9\"),(\"-3\"),(\"9\"),(\"-1\"),(\"3\"),(\"-24\"),(\"4\"),(\"2\"),(\"-10\"),(\"19\"),(\"24\"),(\"-10\"),(\"-11\"),(\"-6\"),(\"21\"),(\"-23\"),(\"-22\"),(\"-5\"),(\"10\"),(\"-7\"),(\"8\"),(\"-21\"),(\"7\"),(\"-13\"),(\"10\"),(\"13\"),(\"-18\"),(\"-6\"),(\"12\"),(\"1\"),(\"-4\"),(\"-5\"),(\"15\"),(\"-25\"),(\"-1\"),(\"-2\"),(\"6\"),(\"-2\"),(\"3\"),(\"27\"),(\"-22\"),(\"-4\"),(\"-62\"),(\"8\"),(\"12\"),(\"-29\"),(\"21\"),(\"-19\"),(\"-44\"),(\"-13\"),(\"12\"),(\"-68\"),(\"2\"),(\"12\"),(\"1\"),(\"-17\"),(\"-5\"),(\"-16\"),(\"-11\"),(\"-14\"),(\"5\"),(\"-8\"),(\"-8\"),(\"12\"),(\"-9\"),(\"-1\"),(\"-11\"),(\"-14\"),(\"6\"),(\"13\"),(\"-12\"),(\"14\"),(\"15\"),(\"-18\"),(\"10\"),(\"-4\"),(\"-4\"),(\"18\"),(\"7\"),(\"17\"),(\"4\"),(\"-13\"),(\"11\"),(\"9\"),(\"-2\"),(\"-6\"),(\"-13\"),(\"2\"),(\"15\"),(\"-13\"),(\"-19\"),(\"-8\"),(\"13\"),(\"1\"),(\"-2\"),(\"10\"),(\"-2\"),(\"-19\"),(\"-3\"),(\"-14\"),(\"-17\"),(\"14\"),(\"-18\"),(\"19\"),(\"-10\"),(\"-15\"),(\"-2\"),(\"6\"),(\"-1\"),(\"16\"),(\"-18\"),(\"-5\"),(\"-11\"),(\"4\"),(\"13\"),(\"-7\"),(\"-15\"),(\"-11\"),(\"-14\"),(\"6\"),(\"17\"),(\"3\"),(\"-7\"),(\"-16\"),(\"-2\"),(\"-7\"),(\"-7\"),(\"-1\"),(\"18\"),(\"20\"),(\"13\"),(\"-10\"),(\"-19\"),(\"-10\"),(\"12\"),(\"7\"),(\"-15\"),(\"7\"),(\"6\"),(\"3\"),(\"13\"),(\"1\"),(\"-4\"),(\"11\"),(\"-17\"),(\"-9\"),(\"-20\"),(\"-12\"),(\"-15\"),(\"10\"),(\"-1\"),(\"-5\"),(\"-12\"),(\"-15\"),(\"18\"),(\"-16\"),(\"19\"),(\"-17\"),(\"-10\"),(\"18\"),(\"2\"),(\"14\"),(\"-2\"),(\"-21\"),(\"-16\"),(\"-4\"),(\"-4\"),(\"-3\"),(\"2\"),(\"-9\"),(\"1\"),(\"5\"),(\"-19\"),(\"10\"),(\"6\"),(\"8\"),(\"-7\"),(\"-12\"),(\"-9\"),(\"11\"),(\"18\"),(\"18\"),(\"-5\"),(\"-20\"),(\"19\"),(\"-7\"),(\"10\"),(\"-5\"),(\"-7\"),(\"-17\"),(\"-5\"),(\"-4\"),(\"-3\"),(\"-5\"),(\"21\"),(\"18\"),(\"8\"),(\"-9\"),(\"-6\"),(\"3\"),(\"-8\"),(\"-17\"),(\"-15\"),(\"19\"),(\"-5\"),(\"-8\"),(\"-2\"),(\"-1\"),(\"20\"),(\"-38\"),(\"5\"),(\"12\"),(\"-34\"),(\"-17\"),(\"-16\"),(\"18\"),(\"-10\"),(\"7\"),(\"17\"),(\"-18\"),(\"7\"),(\"-16\"),(\"7\"),(\"10\"),(\"-33\"),(\"6\"),(\"-27\"),(\"1\"),(\"6\"),(\"-4\"),(\"-4\"),(\"-5\"),(\"-2\"),(\"-9\"),(\"-5\"),(\"-1\"),(\"18\"),(\"-6\"),(\"-19\"),(\"-18\"),(\"-14\"),(\"-29\"),(\"-64\"),(\"-25\"),(\"-16\"),(\"-11\"),(\"-3\"),(\"-11\"),(\"-11\"),(\"-23\"),(\"17\"),(\"-4\"),(\"-18\"),(\"3\"),(\"-4\"),(\"-14\"),(\"12\"),(\"18\"),(\"-5\"),(\"73044\");\n    \n    SELECT\n    \tSUM(frequency_change)\n    FROM
        Changes;\n\n&amp;#x200B;", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eavrtqg", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Any
        love for   &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;SQLite&lt;/strong&gt; ?   &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;CREATE
        TABLE &amp;#39;Changes&amp;#39; (\n    &amp;#39;id&amp;#39;    INTEGER NOT
        NULL PRIMARY KEY AUTOINCREMENT UNIQUE,\n    &amp;#39;frequency_change&amp;#39;  INTEGER\n)\n\nINSERT
        INTO Changes (frequency_change)\nVALUES\n(&amp;quot;13&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;-17&amp;quot;),(&amp;quot;12&amp;quot;),(&amp;quot;-11&amp;quot;),(&amp;quot;19&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;19&amp;quot;),(&amp;quot;-8&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;-3&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;-16&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;-2&amp;quot;),(&amp;quot;-2&amp;quot;),(&amp;quot;20&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;15&amp;quot;),(&amp;quot;4&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;-8&amp;quot;),(&amp;quot;15&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;-14&amp;quot;),(&amp;quot;6&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;8&amp;quot;),(&amp;quot;-9&amp;quot;),(&amp;quot;12&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;2&amp;quot;),(&amp;quot;-8&amp;quot;),(&amp;quot;-19&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;4&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;19&amp;quot;),(&amp;quot;14&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;-19&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;-10&amp;quot;),(&amp;quot;20&amp;quot;),(&amp;quot;-8&amp;quot;),(&amp;quot;-15&amp;quot;),(&amp;quot;2&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;19&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;15&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;2&amp;quot;),(&amp;quot;6&amp;quot;),(&amp;quot;20&amp;quot;),(&amp;quot;5&amp;quot;),(&amp;quot;-10&amp;quot;),(&amp;quot;-2&amp;quot;),(&amp;quot;-2&amp;quot;),(&amp;quot;12&amp;quot;),(&amp;quot;-11&amp;quot;),(&amp;quot;-13&amp;quot;),(&amp;quot;-13&amp;quot;),(&amp;quot;16&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;-18&amp;quot;),(&amp;quot;-13&amp;quot;),(&amp;quot;-17&amp;quot;),(&amp;quot;19&amp;quot;),(&amp;quot;-3&amp;quot;),(&amp;quot;-11&amp;quot;),(&amp;quot;-19&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;-13&amp;quot;),(&amp;quot;-6&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;-19&amp;quot;),(&amp;quot;9&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;-13&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;-14&amp;quot;),(&amp;quot;-10&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;16&amp;quot;),(&amp;quot;9&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;6&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;-19&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;-8&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;-13&amp;quot;),(&amp;quot;8&amp;quot;),(&amp;quot;-3&amp;quot;),(&amp;quot;-22&amp;quot;),(&amp;quot;-17&amp;quot;),(&amp;quot;-16&amp;quot;),(&amp;quot;-11&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;-14&amp;quot;),(&amp;quot;-15&amp;quot;),(&amp;quot;-17&amp;quot;),(&amp;quot;-18&amp;quot;),(&amp;quot;9&amp;quot;),(&amp;quot;-10&amp;quot;),(&amp;quot;14&amp;quot;),(&amp;quot;14&amp;quot;),(&amp;quot;4&amp;quot;),(&amp;quot;6&amp;quot;),(&amp;quot;2&amp;quot;),(&amp;quot;23&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;20&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;12&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;-3&amp;quot;),(&amp;quot;4&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;-21&amp;quot;),(&amp;quot;-18&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;-27&amp;quot;),(&amp;quot;-21&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;-16&amp;quot;),(&amp;quot;6&amp;quot;),(&amp;quot;15&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;-11&amp;quot;),(&amp;quot;43&amp;quot;),(&amp;quot;12&amp;quot;),(&amp;quot;2&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;15&amp;quot;),(&amp;quot;8&amp;quot;),(&amp;quot;14&amp;quot;),(&amp;quot;15&amp;quot;),(&amp;quot;-16&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;-14&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;16&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;19&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;9&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;4&amp;quot;),(&amp;quot;19&amp;quot;),(&amp;quot;9&amp;quot;),(&amp;quot;-6&amp;quot;),(&amp;quot;19&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;5&amp;quot;),(&amp;quot;15&amp;quot;),(&amp;quot;-10&amp;quot;),(&amp;quot;5&amp;quot;),(&amp;quot;14&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;-16&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;-8&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;-14&amp;quot;),(&amp;quot;-8&amp;quot;),(&amp;quot;-6&amp;quot;),(&amp;quot;-16&amp;quot;),(&amp;quot;6&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;8&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;8&amp;quot;),(&amp;quot;-3&amp;quot;),(&amp;quot;-16&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;-10&amp;quot;),(&amp;quot;-14&amp;quot;),(&amp;quot;-8&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;-9&amp;quot;),(&amp;quot;4&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;15&amp;quot;),(&amp;quot;-3&amp;quot;),(&amp;quot;-15&amp;quot;),(&amp;quot;14&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;-22&amp;quot;),(&amp;quot;-17&amp;quot;),(&amp;quot;-2&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;-3&amp;quot;),(&amp;quot;-10&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;5&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;-18&amp;quot;),(&amp;quot;-22&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;-17&amp;quot;),(&amp;quot;19&amp;quot;),(&amp;quot;15&amp;quot;),(&amp;quot;19&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;9&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;-6&amp;quot;),(&amp;quot;-2&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;27&amp;quot;),(&amp;quot;-15&amp;quot;),(&amp;quot;22&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;16&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;9&amp;quot;),(&amp;quot;19&amp;quot;),(&amp;quot;15&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;-16&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;-19&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;-3&amp;quot;),(&amp;quot;-11&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;14&amp;quot;),(&amp;quot;6&amp;quot;),(&amp;quot;-10&amp;quot;),(&amp;quot;16&amp;quot;),(&amp;quot;19&amp;quot;),(&amp;quot;4&amp;quot;),(&amp;quot;-18&amp;quot;),(&amp;quot;-22&amp;quot;),(&amp;quot;16&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;-20&amp;quot;),(&amp;quot;16&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;-2&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;-15&amp;quot;),(&amp;quot;-2&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;14&amp;quot;),(&amp;quot;-16&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;-8&amp;quot;),(&amp;quot;6&amp;quot;),(&amp;quot;9&amp;quot;),(&amp;quot;2&amp;quot;),(&amp;quot;-14&amp;quot;),(&amp;quot;-8&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;9&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;19&amp;quot;),(&amp;quot;30&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;8&amp;quot;),(&amp;quot;5&amp;quot;),(&amp;quot;-8&amp;quot;),(&amp;quot;9&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;16&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;5&amp;quot;),(&amp;quot;9&amp;quot;),(&amp;quot;-19&amp;quot;),(&amp;quot;14&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;-8&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;4&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;-18&amp;quot;),(&amp;quot;12&amp;quot;),(&amp;quot;14&amp;quot;),(&amp;quot;16&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;8&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;-8&amp;quot;),(&amp;quot;-17&amp;quot;),(&amp;quot;-6&amp;quot;),(&amp;quot;4&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;-10&amp;quot;),(&amp;quot;5&amp;quot;),(&amp;quot;-9&amp;quot;),(&amp;quot;-24&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;-14&amp;quot;),(&amp;quot;5&amp;quot;),(&amp;quot;4&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;-6&amp;quot;),(&amp;quot;-6&amp;quot;),(&amp;quot;16&amp;quot;),(&amp;quot;-20&amp;quot;),(&amp;quot;-34&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;19&amp;quot;),(&amp;quot;-18&amp;quot;),(&amp;quot;-8&amp;quot;),(&amp;quot;-13&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;16&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;-2&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;-13&amp;quot;),(&amp;quot;6&amp;quot;),(&amp;quot;16&amp;quot;),(&amp;quot;14&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;21&amp;quot;),(&amp;quot;29&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;-3&amp;quot;),(&amp;quot;-34&amp;quot;),(&amp;quot;-16&amp;quot;),(&amp;quot;-15&amp;quot;),(&amp;quot;-27&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;-8&amp;quot;),(&amp;quot;19&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;15&amp;quot;),(&amp;quot;2&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;-21&amp;quot;),(&amp;quot;-20&amp;quot;),(&amp;quot;19&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;6&amp;quot;),(&amp;quot;-52&amp;quot;),(&amp;quot;-13&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;-43&amp;quot;),(&amp;quot;-19&amp;quot;),(&amp;quot;-6&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;-20&amp;quot;),(&amp;quot;-6&amp;quot;),(&amp;quot;9&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;-11&amp;quot;),(&amp;quot;-17&amp;quot;),(&amp;quot;-15&amp;quot;),(&amp;quot;-16&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;12&amp;quot;),(&amp;quot;5&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;4&amp;quot;),(&amp;quot;-14&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;20&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;-19&amp;quot;),(&amp;quot;-10&amp;quot;),(&amp;quot;6&amp;quot;),(&amp;quot;-18&amp;quot;),(&amp;quot;-9&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;24&amp;quot;),(&amp;quot;20&amp;quot;),(&amp;quot;-2&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;-11&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;8&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;-15&amp;quot;),(&amp;quot;-11&amp;quot;),(&amp;quot;-20&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;-18&amp;quot;),(&amp;quot;-13&amp;quot;),(&amp;quot;2&amp;quot;),(&amp;quot;-25&amp;quot;),(&amp;quot;-21&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;12&amp;quot;),(&amp;quot;-49&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;14&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;-85&amp;quot;),(&amp;quot;8&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;16&amp;quot;),(&amp;quot;5&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;-59&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;-17&amp;quot;),(&amp;quot;-28&amp;quot;),(&amp;quot;-47&amp;quot;),(&amp;quot;27&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;16&amp;quot;),(&amp;quot;-66&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;-16&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;-134&amp;quot;),(&amp;quot;22&amp;quot;),(&amp;quot;2&amp;quot;),(&amp;quot;-31&amp;quot;),(&amp;quot;8&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;-54&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;21&amp;quot;),(&amp;quot;-31&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;-14&amp;quot;),(&amp;quot;12&amp;quot;),(&amp;quot;31&amp;quot;),(&amp;quot;-14&amp;quot;),(&amp;quot;-218&amp;quot;),(&amp;quot;-82&amp;quot;),(&amp;quot;-71530&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;4&amp;quot;),(&amp;quot;-10&amp;quot;),(&amp;quot;-18&amp;quot;),(&amp;quot;5&amp;quot;),(&amp;quot;-19&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;-11&amp;quot;),(&amp;quot;4&amp;quot;),(&amp;quot;9&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;-13&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;16&amp;quot;),(&amp;quot;-8&amp;quot;),(&amp;quot;-6&amp;quot;),(&amp;quot;5&amp;quot;),(&amp;quot;14&amp;quot;),(&amp;quot;2&amp;quot;),(&amp;quot;2&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;-9&amp;quot;),(&amp;quot;-19&amp;quot;),(&amp;quot;-19&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;14&amp;quot;),(&amp;quot;6&amp;quot;),(&amp;quot;-8&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;-8&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;-3&amp;quot;),(&amp;quot;19&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;14&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;6&amp;quot;),(&amp;quot;14&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;15&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;15&amp;quot;),(&amp;quot;-10&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;5&amp;quot;),(&amp;quot;-19&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;-16&amp;quot;),(&amp;quot;-18&amp;quot;),(&amp;quot;2&amp;quot;),(&amp;quot;-16&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;8&amp;quot;),(&amp;quot;-6&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;9&amp;quot;),(&amp;quot;5&amp;quot;),(&amp;quot;-19&amp;quot;),(&amp;quot;9&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;-6&amp;quot;),(&amp;quot;-18&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;-14&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;-15&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;-20&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;12&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;-20&amp;quot;),(&amp;quot;-18&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;-3&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;-9&amp;quot;),(&amp;quot;15&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;-6&amp;quot;),(&amp;quot;-20&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;5&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;-13&amp;quot;),(&amp;quot;-25&amp;quot;),(&amp;quot;-2&amp;quot;),(&amp;quot;-13&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;-16&amp;quot;),(&amp;quot;-17&amp;quot;),(&amp;quot;12&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;-11&amp;quot;),(&amp;quot;15&amp;quot;),(&amp;quot;19&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;2&amp;quot;),(&amp;quot;4&amp;quot;),(&amp;quot;16&amp;quot;),(&amp;quot;14&amp;quot;),(&amp;quot;26&amp;quot;),(&amp;quot;2&amp;quot;),(&amp;quot;-6&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;2&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;5&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;14&amp;quot;),(&amp;quot;4&amp;quot;),(&amp;quot;-13&amp;quot;),(&amp;quot;-21&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;25&amp;quot;),(&amp;quot;19&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;-6&amp;quot;),(&amp;quot;-2&amp;quot;),(&amp;quot;19&amp;quot;),(&amp;quot;4&amp;quot;),(&amp;quot;6&amp;quot;),(&amp;quot;2&amp;quot;),(&amp;quot;-18&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;22&amp;quot;),(&amp;quot;16&amp;quot;),(&amp;quot;-10&amp;quot;),(&amp;quot;-3&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;8&amp;quot;),(&amp;quot;14&amp;quot;),(&amp;quot;15&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;8&amp;quot;),(&amp;quot;-3&amp;quot;),(&amp;quot;12&amp;quot;),(&amp;quot;-8&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;-3&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;2&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;16&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;15&amp;quot;),(&amp;quot;-18&amp;quot;),(&amp;quot;4&amp;quot;),(&amp;quot;-16&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;-13&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;4&amp;quot;),(&amp;quot;20&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;-17&amp;quot;),(&amp;quot;-3&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;-14&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;9&amp;quot;),(&amp;quot;-3&amp;quot;),(&amp;quot;9&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;-24&amp;quot;),(&amp;quot;4&amp;quot;),(&amp;quot;2&amp;quot;),(&amp;quot;-10&amp;quot;),(&amp;quot;19&amp;quot;),(&amp;quot;24&amp;quot;),(&amp;quot;-10&amp;quot;),(&amp;quot;-11&amp;quot;),(&amp;quot;-6&amp;quot;),(&amp;quot;21&amp;quot;),(&amp;quot;-23&amp;quot;),(&amp;quot;-22&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;8&amp;quot;),(&amp;quot;-21&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;-13&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;-18&amp;quot;),(&amp;quot;-6&amp;quot;),(&amp;quot;12&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;15&amp;quot;),(&amp;quot;-25&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;-2&amp;quot;),(&amp;quot;6&amp;quot;),(&amp;quot;-2&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;27&amp;quot;),(&amp;quot;-22&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;-62&amp;quot;),(&amp;quot;8&amp;quot;),(&amp;quot;12&amp;quot;),(&amp;quot;-29&amp;quot;),(&amp;quot;21&amp;quot;),(&amp;quot;-19&amp;quot;),(&amp;quot;-44&amp;quot;),(&amp;quot;-13&amp;quot;),(&amp;quot;12&amp;quot;),(&amp;quot;-68&amp;quot;),(&amp;quot;2&amp;quot;),(&amp;quot;12&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;-17&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;-16&amp;quot;),(&amp;quot;-11&amp;quot;),(&amp;quot;-14&amp;quot;),(&amp;quot;5&amp;quot;),(&amp;quot;-8&amp;quot;),(&amp;quot;-8&amp;quot;),(&amp;quot;12&amp;quot;),(&amp;quot;-9&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;-11&amp;quot;),(&amp;quot;-14&amp;quot;),(&amp;quot;6&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;14&amp;quot;),(&amp;quot;15&amp;quot;),(&amp;quot;-18&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;4&amp;quot;),(&amp;quot;-13&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;9&amp;quot;),(&amp;quot;-2&amp;quot;),(&amp;quot;-6&amp;quot;),(&amp;quot;-13&amp;quot;),(&amp;quot;2&amp;quot;),(&amp;quot;15&amp;quot;),(&amp;quot;-13&amp;quot;),(&amp;quot;-19&amp;quot;),(&amp;quot;-8&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;-2&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;-2&amp;quot;),(&amp;quot;-19&amp;quot;),(&amp;quot;-3&amp;quot;),(&amp;quot;-14&amp;quot;),(&amp;quot;-17&amp;quot;),(&amp;quot;14&amp;quot;),(&amp;quot;-18&amp;quot;),(&amp;quot;19&amp;quot;),(&amp;quot;-10&amp;quot;),(&amp;quot;-15&amp;quot;),(&amp;quot;-2&amp;quot;),(&amp;quot;6&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;16&amp;quot;),(&amp;quot;-18&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;-11&amp;quot;),(&amp;quot;4&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;-15&amp;quot;),(&amp;quot;-11&amp;quot;),(&amp;quot;-14&amp;quot;),(&amp;quot;6&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;-16&amp;quot;),(&amp;quot;-2&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;20&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;-10&amp;quot;),(&amp;quot;-19&amp;quot;),(&amp;quot;-10&amp;quot;),(&amp;quot;12&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;-15&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;6&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;13&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;-17&amp;quot;),(&amp;quot;-9&amp;quot;),(&amp;quot;-20&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;-15&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;-15&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;-16&amp;quot;),(&amp;quot;19&amp;quot;),(&amp;quot;-17&amp;quot;),(&amp;quot;-10&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;2&amp;quot;),(&amp;quot;14&amp;quot;),(&amp;quot;-2&amp;quot;),(&amp;quot;-21&amp;quot;),(&amp;quot;-16&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;-3&amp;quot;),(&amp;quot;2&amp;quot;),(&amp;quot;-9&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;5&amp;quot;),(&amp;quot;-19&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;6&amp;quot;),(&amp;quot;8&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;-12&amp;quot;),(&amp;quot;-9&amp;quot;),(&amp;quot;11&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;-20&amp;quot;),(&amp;quot;19&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;-7&amp;quot;),(&amp;quot;-17&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;-3&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;21&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;8&amp;quot;),(&amp;quot;-9&amp;quot;),(&amp;quot;-6&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;-8&amp;quot;),(&amp;quot;-17&amp;quot;),(&amp;quot;-15&amp;quot;),(&amp;quot;19&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;-8&amp;quot;),(&amp;quot;-2&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;20&amp;quot;),(&amp;quot;-38&amp;quot;),(&amp;quot;5&amp;quot;),(&amp;quot;12&amp;quot;),(&amp;quot;-34&amp;quot;),(&amp;quot;-17&amp;quot;),(&amp;quot;-16&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;-10&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;-18&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;-16&amp;quot;),(&amp;quot;7&amp;quot;),(&amp;quot;10&amp;quot;),(&amp;quot;-33&amp;quot;),(&amp;quot;6&amp;quot;),(&amp;quot;-27&amp;quot;),(&amp;quot;1&amp;quot;),(&amp;quot;6&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;-2&amp;quot;),(&amp;quot;-9&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;-1&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;-6&amp;quot;),(&amp;quot;-19&amp;quot;),(&amp;quot;-18&amp;quot;),(&amp;quot;-14&amp;quot;),(&amp;quot;-29&amp;quot;),(&amp;quot;-64&amp;quot;),(&amp;quot;-25&amp;quot;),(&amp;quot;-16&amp;quot;),(&amp;quot;-11&amp;quot;),(&amp;quot;-3&amp;quot;),(&amp;quot;-11&amp;quot;),(&amp;quot;-11&amp;quot;),(&amp;quot;-23&amp;quot;),(&amp;quot;17&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;-18&amp;quot;),(&amp;quot;3&amp;quot;),(&amp;quot;-4&amp;quot;),(&amp;quot;-14&amp;quot;),(&amp;quot;12&amp;quot;),(&amp;quot;18&amp;quot;),(&amp;quot;-5&amp;quot;),(&amp;quot;73044&amp;quot;);\n\nSELECT\n    SUM(frequency_change)\nFROM
        Changes;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavrtqg/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543703238.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eaw4bmg", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "hoosierEE", "can_mod_post": false, "created_utc":
        1543713482.0, "send_replies": true, "parent_id": "t3_a20646", "score": 3,
        "author_fullname": "t2_g6ibf", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "# J\n\n\n    input =: \".''-_+ ''rplc~''
        ''joinstring cutLF fread''day01.txt''\n    part1 =: +/input\n    part2 =:
        ({~[:{.@I.-.@~:) +/\\1e6$input", "edited": 1543713755.0, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eaw4bmg", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;J&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;input
        =: &amp;quot;.&amp;#39;-_+ &amp;#39;rplc~&amp;#39; &amp;#39;joinstring cutLF
        fread&amp;#39;day01.txt&amp;#39;\npart1 =: +/input\npart2 =: ({~[:{.@I.-.@~:)
        +/\\1e6$input\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaw4bmg/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543713482.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eb1b5tj", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Powerofdoodles", "can_mod_post": false,
        "created_utc": 1543881873.0, "send_replies": true, "parent_id": "t3_a20646",
        "score": 3, "author_fullname": "t2_15mvs5r4", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Bit late to the party,
        but was hoping someone could give me some constructive criticism on anything
        code and readability related.\n\nPart 2.\n\nMade in **Java**:\n\n    Boolean[]
        posarray = new Boolean[200000];\n    Boolean[] negarray = new Boolean[200000];\n    Arrays.fill(posarray,
        Boolean.FALSE);\n    Arrays.fill(negarray, Boolean.FALSE);\n    Integer total
        = 0;\n    Integer poscon = 0;\n    \n    BufferedReader breader = null;\n    FileReader
        freader = null;\n    \n    try {\n    \tfor (int i = 1; ; i++) {\n    \n    \t\tfreader
        = new FileReader(\"Data.txt\");\n    \tbreader = new BufferedReader(freader);\n    \n    \tString
        currentline;\n    \n    \twhile ((currentline = breader.readLine()) != null)
        {\n    \t\t\n    \t\ttotal += Integer.parseInt(currentline);\n    \t\t\n    \t\tif
        (total &lt; 0) {\n    \t\t\t\n    \t\t\t//convert to positive for indexing\n    \t\t\tposcon
        = Math.abs(total);\n    \t\t\t\n    \t\t\tif (negarray[poscon] != true) {\n    \t\t\t\t\n    \t\t\t\t//Bool
        array with records of which total has been seen, cannot \n                                    have
        negative index.\n    \t\t\t\tnegarray[poscon] = true;\n    \t\t\t\t\n    \t\t\t}
        else if (negarray[poscon] == true) {\n    \t\t\t\t\n    \t\t\t\t//prints result
        when found and exits\n    \t\t\t\tSystem.out.println(total);\n    \t\t\t\tSystem.out.println(i);\n    \t\t\t\tSystem.exit(0);\n    \t\t\t\t\n    \t\t\t}\n    \t\t}
        else {\n    \t\t\tif (posarray[total] != true) {\n    \t\t\t\t\n    \t\t\t\t//Bool
        array with records of which total has been seen\n    \t\t\t\tposarray[total]
        = true;\n    \t\t\t\t\n    \t\t\t} else if (posarray[total] == true) {\n    \t\t\t\t\n    \t\t\t\t//prints
        result when found and exits\n    \t\t\t\tSystem.out.println(total);\n    \t\t\t\tSystem.out.println(i);\n    \t\t\t\tSystem.exit(0);\n    \t\t\t\t\n    \t\t\t}\n    \t\t}\n    \t}\n    \n    }\n\nWent
        with reading from file, and mapping the different totals to two separate arrays
        due to not being able to index negative numbers. Used a for loop instead of
        while so that I could check how many cycles I ended up doing.\n\n&amp;#x200B;\n\nEdit:
        Fixed indentation for readability", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_eb1b5tj", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Bit late to the party, but was hoping someone
        could give me some constructive criticism on anything code and readability
        related.&lt;/p&gt;\n\n&lt;p&gt;Part 2.&lt;/p&gt;\n\n&lt;p&gt;Made in &lt;strong&gt;Java&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Boolean[]
        posarray = new Boolean[200000];\nBoolean[] negarray = new Boolean[200000];\nArrays.fill(posarray,
        Boolean.FALSE);\nArrays.fill(negarray, Boolean.FALSE);\nInteger total = 0;\nInteger
        poscon = 0;\n\nBufferedReader breader = null;\nFileReader freader = null;\n\ntry
        {\n    for (int i = 1; ; i++) {\n\n        freader = new FileReader(&amp;quot;Data.txt&amp;quot;);\n    breader
        = new BufferedReader(freader);\n\n    String currentline;\n\n    while ((currentline
        = breader.readLine()) != null) {\n\n        total += Integer.parseInt(currentline);\n\n        if
        (total &amp;lt; 0) {\n\n            //convert to positive for indexing\n            poscon
        = Math.abs(total);\n\n            if (negarray[poscon] != true) {\n\n                //Bool
        array with records of which total has been seen, cannot \n                                have
        negative index.\n                negarray[poscon] = true;\n\n            }
        else if (negarray[poscon] == true) {\n\n                //prints result when
        found and exits\n                System.out.println(total);\n                System.out.println(i);\n                System.exit(0);\n\n            }\n        }
        else {\n            if (posarray[total] != true) {\n\n                //Bool
        array with records of which total has been seen\n                posarray[total]
        = true;\n\n            } else if (posarray[total] == true) {\n\n                //prints
        result when found and exits\n                System.out.println(total);\n                System.out.println(i);\n                System.exit(0);\n\n            }\n        }\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Went
        with reading from file, and mapping the different totals to two separate arrays
        due to not being able to index negative numbers. Used a for loop instead of
        while so that I could check how many cycles I ended up doing.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Edit:
        Fixed indentation for readability&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eb1b5tj/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543881873.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eau5tuk", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Vindaar", "can_mod_post": false, "created_utc":
        1543641853.0, "send_replies": true, "parent_id": "t3_a20646", "score": 2,
        "author_fullname": "t2_pod4l", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Quick and dirty solution in Nim:\n\n```\nimport
        sequtils, strutils, os\nimport sets\n\nproc main =\n  let file = readFile(\"day1Data.txt\").splitLines  \n  var\n    freq
        = 0\n    fSet = initSet[int]()\n    p1Res = 0\n    p1found = false\n    i
        = 0  \n  while true:\n    let l = file[i]\n    if l.len &gt; 0:\n      let
        f = l.strip(chars = Whitespace).parseInt\n      freq += f\n      if freq in
        fSet:\n        echo \"Found f \", freq\n        break\n      else:\n        fSet.incl
        freq\n    inc i\n    if i == file.len:\n      if not p1Found:\n        p1Res
        = freq\n      p1Found = true\n      i = 0\n      \n  echo \"res freq p1 \",
        p1Res\n  echo \"res freq p2 \", freq\n\nwhen isMainModule:\n  main()\n```",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eau5tuk", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Quick
        and dirty solution in Nim:&lt;/p&gt;\n\n&lt;p&gt;```\nimport sequtils, strutils,
        os\nimport sets&lt;/p&gt;\n\n&lt;p&gt;proc main =\n  let file = readFile(&amp;quot;day1Data.txt&amp;quot;).splitLines&lt;br/&gt;\n  var\n    freq
        = 0\n    fSet = initSet[int]()\n    p1Res = 0\n    p1found = false\n    i
        = 0&lt;br/&gt;\n  while true:\n    let l = file[i]\n    if l.len &amp;gt;
        0:\n      let f = l.strip(chars = Whitespace).parseInt\n      freq += f\n      if
        freq in fSet:\n        echo &amp;quot;Found f &amp;quot;, freq\n        break\n      else:\n        fSet.incl
        freq\n    inc i\n    if i == file.len:\n      if not p1Found:\n        p1Res
        = freq\n      p1Found = true\n      i = 0&lt;/p&gt;\n\n&lt;p&gt;echo &amp;quot;res
        freq p1 &amp;quot;, p1Res\n  echo &amp;quot;res freq p2 &amp;quot;, freq&lt;/p&gt;\n\n&lt;p&gt;when
        isMainModule:\n  main()\n```&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau5tuk/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543641853.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eau60mb", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "miguelos", "can_mod_post": false, "created_utc":
        1543642063.0, "send_replies": true, "parent_id": "t3_a20646", "score": 2,
        "author_fullname": "t2_58110", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "**C#**\n\nPart 1:\n\n    return input.Split(\"\\n\").Select(int.Parse).Sum();\n\nPart
        2:\n\n    var sums = new List&lt;int&gt;() { 0 };\n    var freqs = input.Split(\"\\n\").Select(int.Parse).ToArray();
        \n    for (int i = 0; i &lt; int.MaxValue; i++) \n    { \n        var next
        = sums.Last() + freqs[i % freqs.Length]; \n        if (sums.Contains(n)) \n        {
        \n            return next.ToString(); \n        } \n        sums.Add(next);
        \n    }", "edited": 1543658201.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eau60mb", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;C#&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;return input.Split(&amp;quot;\\n&amp;quot;).Select(int.Parse).Sum();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var sums = new List&amp;lt;int&amp;gt;()
        { 0 };\nvar freqs = input.Split(&amp;quot;\\n&amp;quot;).Select(int.Parse).ToArray();
        \nfor (int i = 0; i &amp;lt; int.MaxValue; i++) \n{ \n    var next = sums.Last()
        + freqs[i % freqs.Length]; \n    if (sums.Contains(n)) \n    { \n        return
        next.ToString(); \n    } \n    sums.Add(next); \n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau60mb/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543642063.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eau6x9u", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "roessland", "can_mod_post": false, "created_utc":
        1543643094.0, "send_replies": true, "parent_id": "t3_a20646", "score": 2,
        "author_fullname": "t2_c75c2", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Some hastily written golang:\n\n```\nfunc
        main() {\n\nfreq := 0\n\nreach := map[int]int{0: 1}\n\nfor {\n\nbuf, _ :=
        ioutil.ReadFile(\"input.txt\")\n\nfor _, line := range strings.Split(string(buf),
        \"\\n\") {\n\nif len(line) == 0 {\n\ncontinue\n\n}\n\nfreq += atoi(line)\n\nreach[freq]++\n\nif
        reach[freq] == 2 {\n\nfmt.Println(freq)\n\nlog.Fatal(\"yes!\")\n\n}\n\n}\n\n}\n```",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eau6x9u", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Some
        hastily written golang:&lt;/p&gt;\n\n&lt;p&gt;```\nfunc main() {&lt;/p&gt;\n\n&lt;p&gt;freq
        := 0&lt;/p&gt;\n\n&lt;p&gt;reach := map[int]int{0: 1}&lt;/p&gt;\n\n&lt;p&gt;for
        {&lt;/p&gt;\n\n&lt;p&gt;buf, _ := ioutil.ReadFile(&amp;quot;input.txt&amp;quot;)&lt;/p&gt;\n\n&lt;p&gt;for
        _, line := range strings.Split(string(buf), &amp;quot;\\n&amp;quot;) {&lt;/p&gt;\n\n&lt;p&gt;if
        len(line) == 0 {&lt;/p&gt;\n\n&lt;p&gt;continue&lt;/p&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n\n&lt;p&gt;freq
        += atoi(line)&lt;/p&gt;\n\n&lt;p&gt;reach[freq]++&lt;/p&gt;\n\n&lt;p&gt;if
        reach[freq] == 2 {&lt;/p&gt;\n\n&lt;p&gt;fmt.Println(freq)&lt;/p&gt;\n\n&lt;p&gt;log.Fatal(&amp;quot;yes!&amp;quot;)&lt;/p&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n\n&lt;p&gt;}\n```&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau6x9u/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543643094.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eav7ted", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "PositivelyLinda",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_eau94mx", "score":
        3, "author_fullname": "t2_5pla7", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Oh, thanks for sharing this!
        Did not know about Sets...so much faster!", "edited": false, "top_awarded_type":
        null, "downs": 0, "author_flair_css_class": null, "name": "t1_eav7ted", "is_submitter":
        false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Oh, thanks for sharing
        this! Did not know about Sets...so much faster!&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eav7ted/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543687766.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543687766.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 2, "name": "t1_eauce3j",
        "id": "eauce3j", "parent_id": "t1_eau9lvj", "depth": 3, "children": ["eauce3j",
        "eaurl86"]}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "eau9lvj", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "valtism",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_eau94mx", "score":
        2, "author_fullname": "t2_38u9g", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Thanks! It''s a shocking difference!
        I had no idea Sets were so much more efficient at this than arrays. Is it
        the `has()` being much faster than the `includes()` call?", "edited": false,
        "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "name":
        "t1_eau9lvj", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks!
        It&amp;#39;s a shocking difference! I had no idea Sets were so much more efficient
        at this than arrays. Is it the &lt;code&gt;has()&lt;/code&gt; being much faster
        than the &lt;code&gt;includes()&lt;/code&gt; call?&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau9lvj/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543646554.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543646554.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eau94mx", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "netcraft", "can_mod_post": false, "created_utc":
        1543645845.0, "send_replies": true, "parent_id": "t1_eau74by", "score": 4,
        "author_fullname": "t2_34btj", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "a \\`Set\\` would allow your
        part 2 to work much faster [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set)  for
        me the difference is 11s vs 0.4s", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_eau94mx", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;a `Set` would allow your part 2 to work
        much faster &lt;a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&lt;/a&gt;  for
        me the difference is 11s vs 0.4s&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau94mx/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543645845.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eau74by", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "valtism", "can_mod_post": false, "created_utc":
        1543643319.0, "send_replies": true, "parent_id": "t3_a20646", "score": 2,
        "author_fullname": "t2_38u9g", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Node JS / Javascript solution:\n\n```js\nconst
        aocLoader = require(\"aoc-loader\");\nrequire(\"dotenv\").config();\n\naocLoader(2018,
        1).then(data =&gt; {\n    console.log(day1part1(data));\n    console.log(day1part2(data));\n});\n\nfunction
        day1part1(data) {\n    const nums = data.split(\"\\n\").map(Number);\n    return
        nums.reduce((acc, curr) =&gt; acc + curr);\n}\n\nfunction day1part2(data)
        {\n    const nums = data.split(\"\\n\").map(Number);\n    const frequencies
        = [0];\n    var sum = 0;\n    while (1) {\n        for (let i = 0; i &lt;
        nums.length; i++) {\n            const num = nums[i];\n            sum +=
        num;\n            if (frequencies.includes(sum)) {\n                return
        sum;\n            }\n            frequencies.push(sum);\n        }\n    }\n}\n\nmodule.exports
        = {\n    day1part1: day1part1,\n    day1part2: day1part2,\n}\n```", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eau74by",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Node JS / Javascript
        solution:&lt;/p&gt;\n\n&lt;p&gt;```js\nconst aocLoader = require(&amp;quot;aoc-loader&amp;quot;);\nrequire(&amp;quot;dotenv&amp;quot;).config();&lt;/p&gt;\n\n&lt;p&gt;aocLoader(2018,
        1).then(data =&amp;gt; {\n    console.log(day1part1(data));\n    console.log(day1part2(data));\n});&lt;/p&gt;\n\n&lt;p&gt;function
        day1part1(data) {\n    const nums = data.split(&amp;quot;\\n&amp;quot;).map(Number);\n    return
        nums.reduce((acc, curr) =&amp;gt; acc + curr);\n}&lt;/p&gt;\n\n&lt;p&gt;function
        day1part2(data) {\n    const nums = data.split(&amp;quot;\\n&amp;quot;).map(Number);\n    const
        frequencies = [0];\n    var sum = 0;\n    while (1) {\n        for (let i
        = 0; i &amp;lt; nums.length; i++) {\n            const num = nums[i];\n            sum
        += num;\n            if (frequencies.includes(sum)) {\n                return
        sum;\n            }\n            frequencies.push(sum);\n        }\n    }\n}&lt;/p&gt;\n\n&lt;p&gt;module.exports
        = {\n    day1part1: day1part1,\n    day1part2: day1part2,\n}\n```&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau74by/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543643319.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eau7mi0", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "NeuroXc", "can_mod_post": false, "created_utc":
        1543643895.0, "send_replies": true, "parent_id": "t3_a20646", "score": 2,
        "author_fullname": "t2_da7nm", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "**Rust**\n\n    use std::collections::BTreeSet;\n    \n    #[aoc_generator(day1)]\n    pub
        fn day1_generator(input: &amp;str) -&gt; Vec&lt;i32&gt; {\n        input.lines().map(|l|
        l.parse().unwrap()).collect()\n    }\n    \n    #[aoc(day1, part1)]\n    pub
        fn day1_part1(input: &amp;[i32]) -&gt; i32 {\n        input.iter().sum()\n    }\n    \n    #[aoc(day1,
        part2)]\n    pub fn day1_part2(input: &amp;[i32]) -&gt; i32 {\n        let
        mut freq = 0;\n        let mut reached = BTreeSet::new();\n        reached.insert(0);\n        for
        &amp;i in input.iter().cycle() {\n            freq += i;\n            if !reached.insert(freq)
        {\n                return freq;\n            }\n        }\n        unreachable!()\n    }\n\n&amp;#x200B;",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eau7mi0", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use
        std::collections::BTreeSet;\n\n#[aoc_generator(day1)]\npub fn day1_generator(input:
        &amp;amp;str) -&amp;gt; Vec&amp;lt;i32&amp;gt; {\n    input.lines().map(|l|
        l.parse().unwrap()).collect()\n}\n\n#[aoc(day1, part1)]\npub fn day1_part1(input:
        &amp;amp;[i32]) -&amp;gt; i32 {\n    input.iter().sum()\n}\n\n#[aoc(day1,
        part2)]\npub fn day1_part2(input: &amp;amp;[i32]) -&amp;gt; i32 {\n    let
        mut freq = 0;\n    let mut reached = BTreeSet::new();\n    reached.insert(0);\n    for
        &amp;amp;i in input.iter().cycle() {\n        freq += i;\n        if !reached.insert(freq)
        {\n            return freq;\n        }\n    }\n    unreachable!()\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau7mi0/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543643895.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eau7sv5", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Atraii", "can_mod_post": false, "created_utc":
        1543644105.0, "send_replies": true, "parent_id": "t3_a20646", "score": 2,
        "author_fullname": "t2_g4rer", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Rust, got a late start already.\n\nPart 1:\n\n    let
        stdin = io::stdin();\n    let input: Vec&lt;isize&gt; = stdin\n        .lock()\n        .lines()\n        .filter_map(|line|
        line.ok())\n        .map(|line| line.parse::&lt;isize&gt;().unwrap())\n        .collect();\n    \n    let
        sum: isize = input.iter().sum();\n    \n    println!(\"[Day 01][Part 1] ANS
        is: {}\", sum.to_string());\n\nPart 2:\n    \n    let mut seen = HashSet::new();\n    let
        mut sum = 0;\n    \n    for freq in input.iter().cycle() {\n        sum +=
        freq;\n        let repeated = seen.insert(sum);\n        if !repeated {\n            break;\n        }\n    }\n    \n    println!(\"[Day
        01][Part 2] ANS is: {}\", sum.to_string());", "edited": 1543682547.0, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eau7sv5", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Rust, got a late start already.&lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let stdin = io::stdin();\nlet input:
        Vec&amp;lt;isize&amp;gt; = stdin\n    .lock()\n    .lines()\n    .filter_map(|line|
        line.ok())\n    .map(|line| line.parse::&amp;lt;isize&amp;gt;().unwrap())\n    .collect();\n\nlet
        sum: isize = input.iter().sum();\n\nprintln!(&amp;quot;[Day 01][Part 1] ANS
        is: {}&amp;quot;, sum.to_string());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let mut seen = HashSet::new();\nlet
        mut sum = 0;\n\nfor freq in input.iter().cycle() {\n    sum += freq;\n    let
        repeated = seen.insert(sum);\n    if !repeated {\n        break;\n    }\n}\n\nprintln!(&amp;quot;[Day
        01][Part 2] ANS is: {}&amp;quot;, sum.to_string());\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau7sv5/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543644105.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauz5be",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "djbft",
        "can_mod_post": false, "created_utc": 1543680885.0, "send_replies": true,
        "parent_id": "t1_eaua49j", "score": 2, "author_fullname": "t2_7abuh", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "`Set.add` returns false if the item was already in the list, so you can just
        do `if(!frequencies.add(frequency) return frequency`\n\nI didn''t know that
        toInt would parse the + chat, though. That simplifies things a lot!", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eauz5be",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;code&gt;Set.add&lt;/code&gt;
        returns false if the item was already in the list, so you can just do &lt;code&gt;if(!frequencies.add(frequency)
        return frequency&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;I didn&amp;#39;t know
        that toInt would parse the + chat, though. That simplifies things a lot!&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauz5be/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543680885.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eaua49j", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "nutrecht", "can_mod_post": false, "created_utc":
        1543647340.0, "send_replies": true, "parent_id": "t3_a20646", "score": 2,
        "author_fullname": "t2_dlu5l", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Kotlin: \n\n    //Utility function I wrote
        that reads input from /2018/day01.txt\n    private val numbers = resourceLines(2018,
        1).map { it.toInt() }\n\n    override fun part1() = numbers.sum().toString()\n    override
        fun part2() : String {\n        val set = mutableSetOf&lt;Int&gt;()\n        var
        freq = 0\n\n        while(true) {\n            for (i in numbers) {\n                freq
        += i\n\n                if (set.contains(freq)) {\n                    return
        freq.toString()\n                }\n\n                set += freq\n            }\n        }\n    }\n\nEdit:
        Rust version:\n\n    fn main() {\n        let numbers: Vec&lt;i32&gt; = read_lines(2018,
        1).iter().map(|n| n.parse::&lt;i32&gt;().unwrap()).collect();\n    \n        println!(\"{}\",
        numbers.iter().sum::&lt;i32&gt;());\n        println!{\"{}\", part2(&amp;numbers)}\n    }\n    \n    fn
        part2(numbers: &amp;[i32]) -&gt; String {\n        let mut freq = 0;\n        let
        mut set: HashSet&lt;i32&gt; = HashSet::new();\n    \n        loop {\n            for
        i in numbers.iter() {\n                freq += i;\n    \n                if
        !set.insert(freq){\n                    return freq.to_string();\n                }\n            }\n        }\n    }",
        "edited": 1543649485.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eaua49j", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Kotlin:
        &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;//Utility function I wrote that reads
        input from /2018/day01.txt\nprivate val numbers = resourceLines(2018, 1).map
        { it.toInt() }\n\noverride fun part1() = numbers.sum().toString()\noverride
        fun part2() : String {\n    val set = mutableSetOf&amp;lt;Int&amp;gt;()\n    var
        freq = 0\n\n    while(true) {\n        for (i in numbers) {\n            freq
        += i\n\n            if (set.contains(freq)) {\n                return freq.toString()\n            }\n\n            set
        += freq\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Edit:
        Rust version:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fn main() {\n    let numbers:
        Vec&amp;lt;i32&amp;gt; = read_lines(2018, 1).iter().map(|n| n.parse::&amp;lt;i32&amp;gt;().unwrap()).collect();\n\n    println!(&amp;quot;{}&amp;quot;,
        numbers.iter().sum::&amp;lt;i32&amp;gt;());\n    println!{&amp;quot;{}&amp;quot;,
        part2(&amp;amp;numbers)}\n}\n\nfn part2(numbers: &amp;amp;[i32]) -&amp;gt;
        String {\n    let mut freq = 0;\n    let mut set: HashSet&amp;lt;i32&amp;gt;
        = HashSet::new();\n\n    loop {\n        for i in numbers.iter() {\n            freq
        += i;\n\n            if !set.insert(freq){\n                return freq.to_string();\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaua49j/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543647340.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 2, "removal_reason": null, "link_id": "t3_a20646",
        "author_flair_template_id": null, "likes": null, "replies": {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "more", "data": {"count":
        4, "name": "t1_eawa8pz", "id": "eawa8pz", "parent_id": "t1_eavqbmx", "depth":
        3, "children": ["eawa8pz"]}}], "before": null}}, "user_reports": [], "saved":
        false, "id": "eavqbmx", "banned_at_utc": null, "mod_reason_title": null, "gilded":
        0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author":
        "chunes", "can_mod_post": false, "send_replies": true, "parent_id": "t1_eauv6rn",
        "score": 2, "author_fullname": "t2_7ybf8", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "Hey, you''re back, and
        you''re doing Factor like you said you might. Awesome!\n\nFrom an efficiency
        standpoint, it looks fine to me. (Aside from parsing the file twice, which
        I did as well -- it would be better to have `part1` and `get-circular` both
        accept a sequence as input and then do something like `get-content parse [
        part1 ] [ get-circular ] bi` )\n\nPresumably, you''re calling `but-last` on
        the sequence because the final element is an empty string? The `sequences`
        vocabulary has a word, `harvest`, that removes them from a sequence so you
        don''t have to think about positioning etc. The only reason it''s not in my
        code is because I remove trailing lines from my inputs manually (it''s a habit).\n\nThe
        other thing I noticed is that you''re calling `clear-set` on a hew hash-set,
        presumably because you''ve been bitten by mutation. You''ll want to get into
        the habit of `clone` ing new object-literals you plan to mutate so that future
        objects created in such a way are their own thing.\n\nOh, and if I may make
        a suggestion, learn how to use the walker really well. It makes your life
        so much easier when you know how to use it. Learn what every single command
        does, step, into, out, continue, back -- you''ll need them all. I wish I had
        invested the time into it earlier on.\n\nI''m glad you''re giving it a go!
        Feel free to drop by #concatenative on freenode if you have any questions.
        I''m usually there and there are plenty of folks who can answer your questions
        (eventually).", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_eavqbmx", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hey,
        you&amp;#39;re back, and you&amp;#39;re doing Factor like you said you might.
        Awesome!&lt;/p&gt;\n\n&lt;p&gt;From an efficiency standpoint, it looks fine
        to me. (Aside from parsing the file twice, which I did as well -- it would
        be better to have &lt;code&gt;part1&lt;/code&gt; and &lt;code&gt;get-circular&lt;/code&gt;
        both accept a sequence as input and then do something like &lt;code&gt;get-content
        parse [ part1 ] [ get-circular ] bi&lt;/code&gt; )&lt;/p&gt;\n\n&lt;p&gt;Presumably,
        you&amp;#39;re calling &lt;code&gt;but-last&lt;/code&gt; on the sequence because
        the final element is an empty string? The &lt;code&gt;sequences&lt;/code&gt;
        vocabulary has a word, &lt;code&gt;harvest&lt;/code&gt;, that removes them
        from a sequence so you don&amp;#39;t have to think about positioning etc.
        The only reason it&amp;#39;s not in my code is because I remove trailing lines
        from my inputs manually (it&amp;#39;s a habit).&lt;/p&gt;\n\n&lt;p&gt;The
        other thing I noticed is that you&amp;#39;re calling &lt;code&gt;clear-set&lt;/code&gt;
        on a hew hash-set, presumably because you&amp;#39;ve been bitten by mutation.
        You&amp;#39;ll want to get into the habit of &lt;code&gt;clone&lt;/code&gt;
        ing new object-literals you plan to mutate so that future objects created
        in such a way are their own thing.&lt;/p&gt;\n\n&lt;p&gt;Oh, and if I may
        make a suggestion, learn how to use the walker really well. It makes your
        life so much easier when you know how to use it. Learn what every single command
        does, step, into, out, continue, back -- you&amp;#39;ll need them all. I wish
        I had invested the time into it earlier on.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m
        glad you&amp;#39;re giving it a go! Feel free to drop by #concatenative on
        freenode if you have any questions. I&amp;#39;m usually there and there are
        plenty of folks who can answer your questions (eventually).&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavqbmx/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543702088.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543702088.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eauv6rn", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "[deleted]", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_eaubkk9", "score": 2, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "Wah, I''m
        a beginner with this, and it took me way longer than what I was planning,
        and I wouldn''t had managed without your &lt;circular&gt; tip, I''m probably
        doing loads of stuff subobtimally though, but I''m trying to grasp this thing,
        it''s a lot of fun though.\n    \n    USING: io.encodings.utf8 io.files splitting
        sequences formatting parser \n           circular sets kernel  math ;\n    IN:
        day1\n    \n    : get-content ( -- string )\n      \"C:\\\\Download\\\\aoc\\\\factor\\\\work\\\\day1\\\\input.txt\"
        utf8 file-contents ;\n    \n    : parse ( string -- [string] )\n      \"\\n\"
        split but-last \n       [ parse-number ] map ;\n    \n    : part1 ( -- )\n      get-content
        parse sum \"The final frequency is %d \\n\" printf ;\n    \n    : prepare-HS
        ( -- HS )\n      0 HS{ } dup clear-set tuck adjoin ;\n    \n    : get-circular
        ( -- circular )\n      get-content parse &lt;circular&gt; ;\n    \n    : part2
        ( -- )\n      0 prepare-HS get-circular\n      [ swap [ + ] dip 2dup in? not
        [ 2dup adjoin ] dip ]\n      circular-loop drop\n      \"The first duplicate
        frequency is %d \\n\" printf ;\n    \n    : main ( -- )\n      part1\n      part2
        ;\n", "edited": false, "author_flair_css_class": null, "collapsed": false,
        "downs": 0, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Wah,
        I&amp;#39;m a beginner with this, and it took me way longer than what I was
        planning, and I wouldn&amp;#39;t had managed without your &amp;lt;circular&amp;gt;
        tip, I&amp;#39;m probably doing loads of stuff subobtimally though, but I&amp;#39;m
        trying to grasp this thing, it&amp;#39;s a lot of fun though.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;USING:
        io.encodings.utf8 io.files splitting sequences formatting parser \n       circular
        sets kernel  math ;\nIN: day1\n\n: get-content ( -- string )\n  &amp;quot;C:\\\\Download\\\\aoc\\\\factor\\\\work\\\\day1\\\\input.txt&amp;quot;
        utf8 file-contents ;\n\n: parse ( string -- [string] )\n  &amp;quot;\\n&amp;quot;
        split but-last \n   [ parse-number ] map ;\n\n: part1 ( -- )\n  get-content
        parse sum &amp;quot;The final frequency is %d \\n&amp;quot; printf ;\n\n:
        prepare-HS ( -- HS )\n  0 HS{ } dup clear-set tuck adjoin ;\n\n: get-circular
        ( -- circular )\n  get-content parse &amp;lt;circular&amp;gt; ;\n\n: part2
        ( -- )\n  0 prepare-HS get-circular\n  [ swap [ + ] dip 2dup in? not [ 2dup
        adjoin ] dip ]\n  circular-loop drop\n  &amp;quot;The first duplicate frequency
        is %d \\n&amp;quot; printf ;\n\n: main ( -- )\n  part1\n  part2 ;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauv6rn/",
        "num_reports": null, "locked": false, "name": "t1_eauv6rn", "created": 1543677287.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1543677287.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "eaubkk9", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "chunes", "can_mod_post": false, "created_utc":
        1543649767.0, "send_replies": true, "parent_id": "t3_a20646", "score": 2,
        "author_fullname": "t2_7ybf8", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "**[Factor](https://factorcode.org)**\n\n    USING:
        circular io.encodings.utf8 io.files kernel math\n    math.parser prettyprint
        sequences sets ;\n    IN: aoc2018.day1\n    \n    : parse-input ( -- seq )\n        \"input.txt\"
        utf8 file-lines [ string&gt;number ] map ;\n\n    : part1 ( -- ) parse-input
        sum . ;\n\n    : part2 ( -- )\n        0 HS{ } clone parse-input &lt;circular&gt;
        [\n            [ 2dup adjoin ] dip rot + swap 2dup in? not\n        ] circular-loop
        drop . ;\n\nThis makes use of a really nice combinator `circular-loop` which
        puts the next element of the sequence on the data stack each iteration, looping
        around to the start as needed.", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_eaubkk9", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=\"https://factorcode.org\"&gt;Factor&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;USING:
        circular io.encodings.utf8 io.files kernel math\nmath.parser prettyprint sequences
        sets ;\nIN: aoc2018.day1\n\n: parse-input ( -- seq )\n    &amp;quot;input.txt&amp;quot;
        utf8 file-lines [ string&amp;gt;number ] map ;\n\n: part1 ( -- ) parse-input
        sum . ;\n\n: part2 ( -- )\n    0 HS{ } clone parse-input &amp;lt;circular&amp;gt;
        [\n        [ 2dup adjoin ] dip rot + swap 2dup in? not\n    ] circular-loop
        drop . ;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This makes use of a really
        nice combinator &lt;code&gt;circular-loop&lt;/code&gt; which puts the next
        element of the sequence on the data stack each iteration, looping around to
        the start as needed.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaubkk9/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543649767.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaugqs9",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ElektroKotte",
        "can_mod_post": false, "created_utc": 1543658932.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 2, "author_fullname": "t2_12e0oc", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "One
        does not simply stop coding during advent of code\n\nRust solution:\n```rust\nuse
        std::collections::HashSet;\nuse std::collections::VecDeque;\n\nfn solve_p1(input:
        &amp;str) -&gt; i32 {\n    input.lines().map(|t| t.parse::&lt;i32&gt;().unwrap()).sum()\n}\n\nfn
        solve_p2(input: &amp;str) -&gt; i32 {\n    let mods = input\n        .split_whitespace()\n        .map(|t|
        t.parse::&lt;i32&gt;().unwrap())\n        .collect::&lt;Vec&lt;i32&gt;&gt;();\n    let
        mut seen: HashSet&lt;i32&gt; = HashSet::new();\n    let mut back = 0;\n\n    loop
        {\n        let freqs = mods.iter().fold(VecDeque::new(), |mut fs, m| {\n            let
        back = *fs.back().unwrap_or(&amp;back);\n            fs.push_back(back + m);\n            fs\n        });\n        back
        = *freqs.back().unwrap();\n\n        for f in freqs.iter() {\n            if
        seen.contains(f) {\n                return *f;\n            }\n            seen.insert(*f);\n        }\n    }\n}\n\nfn
        main() {\n    let input = include_str!(\"input\");\n    println!(\"{}\", solve_p1(input));\n    println!(\"{}\",
        solve_p2(input));\n}\n```", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eaugqs9", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;One
        does not simply stop coding during advent of code&lt;/p&gt;\n\n&lt;p&gt;Rust
        solution:\n```rust\nuse std::collections::HashSet;\nuse std::collections::VecDeque;&lt;/p&gt;\n\n&lt;p&gt;fn
        solve_p1(input: &amp;amp;str) -&amp;gt; i32 {\n    input.lines().map(|t| t.parse::&amp;lt;i32&amp;gt;().unwrap()).sum()\n}&lt;/p&gt;\n\n&lt;p&gt;fn
        solve_p2(input: &amp;amp;str) -&amp;gt; i32 {\n    let mods = input\n        .split_whitespace()\n        .map(|t|
        t.parse::&amp;lt;i32&amp;gt;().unwrap())\n        .collect::&amp;lt;Vec&amp;lt;i32&amp;gt;&amp;gt;();\n    let
        mut seen: HashSet&amp;lt;i32&amp;gt; = HashSet::new();\n    let mut back =
        0;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;loop {\n    let freqs = mods.iter().fold(VecDeque::new(),
        |mut fs, m| {\n        let back = *fs.back().unwrap_or(&amp;amp;back);\n        fs.push_back(back
        + m);\n        fs\n    });\n    back = *freqs.back().unwrap();\n\n    for
        f in freqs.iter() {\n        if seen.contains(f) {\n            return *f;\n        }\n        seen.insert(*f);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n\n&lt;p&gt;fn
        main() {\n    let input = include_str!(&amp;quot;input&amp;quot;);\n    println!(&amp;quot;{}&amp;quot;,
        solve_p1(input));\n    println!(&amp;quot;{}&amp;quot;, solve_p2(input));\n}\n```&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaugqs9/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543658932.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 2, "removal_reason": null, "link_id": "t3_a20646",
        "author_flair_template_id": null, "likes": null, "replies": {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eawy4qi",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "wjholden",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_eavouk5", "score":
        2, "author_fullname": "t2_pbiewcp", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "Cool, thank you!", "edited":
        false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null,
        "name": "t1_eawy4qi", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Cool,
        thank you!&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null,
        "distinguished": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "link_id": "t3_a20646", "unrepliable_reason": null,
        "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eawy4qi/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543748809.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543748809.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "more",
        "data": {"count": 1, "name": "t1_eax4n23", "id": "eax4n23", "parent_id": "t1_eavouk5",
        "depth": 2, "children": ["eax4n23"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "eavouk5", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "[deleted]", "can_mod_post": false, "send_replies": true,
        "parent_id": "t1_eauh2b1", "score": 2, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "You could
        speed it up with an [Association](http://reference.wolfram.com/language/ref/Association.html).\n\n    input
        = Import[NotebookDirectory[] &lt;&gt; \"day1.txt\", \"List\"];\n\n    Total[input]\n\n    Catch@Block[{freq
        = 0, seen = &lt;|0 -&gt; 1|&gt;},\n       While[True,\n        Do[\n         freq
        += x;\n         If[KeyExistsQ[seen, freq], Throw[freq]];\n         seen[freq]
        = 1,\n         {x, input}]]]", "edited": false, "author_flair_css_class":
        null, "collapsed": false, "downs": 0, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;You could speed it up with an &lt;a href=\"http://reference.wolfram.com/language/ref/Association.html\"&gt;Association&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;input
        = Import[NotebookDirectory[] &amp;lt;&amp;gt; &amp;quot;day1.txt&amp;quot;,
        &amp;quot;List&amp;quot;];\n\nTotal[input]\n\nCatch@Block[{freq = 0, seen
        = &amp;lt;|0 -&amp;gt; 1|&amp;gt;},\n   While[True,\n    Do[\n     freq +=
        x;\n     If[KeyExistsQ[seen, freq], Throw[freq]];\n     seen[freq] = 1,\n     {x,
        input}]]]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "subreddit_type": "public",
        "can_gild": false, "top_awarded_type": null, "unrepliable_reason": null, "author_flair_text_color":
        "dark", "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavouk5/",
        "num_reports": null, "locked": false, "name": "t1_eavouk5", "created": 1543700893.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1543700893.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "eauh2b1", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "wjholden", "can_mod_post": false, "created_utc":
        1543659494.0, "send_replies": true, "parent_id": "t3_a20646", "score": 2,
        "author_fullname": "t2_pbiewcp", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Mathematica. This code is painfully slow
        -- so slow that I worry there might be some language/data structure problem
        in this code that I don''t know about (such O(n) lookups in MemberQ of a basic
        {} list). If anyone is strong on WolfLang please let me know if I''m doing
        something wrong!\n\n    In[1]:= data = {7, 7, -2, -7, -4};\n    In[2]:= day1total
        = 0;\n    In[3]:= day1frequencies = {};\n    In[4]:= i = 1;\n    In[5]:= While[Not[MemberQ[day1frequencies,
        day1total]],\n             day1frequencies = Append[day1frequencies, day1total];\n             day1total
        += data[[i]];\n             i = Mod[i, Length[data]] + 1]\n    In[6]:= day1frequencies\n    Out[6]=
        {0, 7, 14, 12, 5, 1, 8, 15, 13, 6, 2, 9, 16}\n    In[7]:= day1total\n    Out[7]=
        14\n\n&amp;#x200B;", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eauh2b1", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Mathematica.
        This code is painfully slow -- so slow that I worry there might be some language/data
        structure problem in this code that I don&amp;#39;t know about (such O(n)
        lookups in MemberQ of a basic {} list). If anyone is strong on WolfLang please
        let me know if I&amp;#39;m doing something wrong!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;In[1]:=
        data = {7, 7, -2, -7, -4};\nIn[2]:= day1total = 0;\nIn[3]:= day1frequencies
        = {};\nIn[4]:= i = 1;\nIn[5]:= While[Not[MemberQ[day1frequencies, day1total]],\n         day1frequencies
        = Append[day1frequencies, day1total];\n         day1total += data[[i]];\n         i
        = Mod[i, Length[data]] + 1]\nIn[6]:= day1frequencies\nOut[6]= {0, 7, 14, 12,
        5, 1, 8, 15, 13, 6, 2, 9, 16}\nIn[7]:= day1total\nOut[7]= 14\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauh2b1/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543659494.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eaukmh3", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "aoc2018", "can_mod_post": false, "created_utc":
        1543665430.0, "send_replies": true, "parent_id": "t3_a20646", "score": 2,
        "author_fullname": "t2_2pa6wo50", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "In [05AB1E](https://github.com/Adriandmen/05AB1E),
        2 bytes:\n\n```\n|O\n```\n\n```\n|    Read input\n O   Sum\n```", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eaukmh3",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In &lt;a href=\"https://github.com/Adriandmen/05AB1E\"&gt;05AB1E&lt;/a&gt;,
        2 bytes:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\n|O\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\n|    Read
        input\n O   Sum\n&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaukmh3/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543665430.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eaum5pm", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "rkachowski", "can_mod_post": false, "created_utc":
        1543667550.0, "send_replies": true, "parent_id": "t3_a20646", "score": 2,
        "author_fullname": "t2_4rfym", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "One does not simply lie in bed with a hangover
        during Advent of Code.\n\nhttps://github.com/rkachowski/advent-of-code2018/blob/master/01/solution.rb",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eaum5pm", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;One
        does not simply lie in bed with a hangover during Advent of Code.&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/rkachowski/advent-of-code2018/blob/master/01/solution.rb\"&gt;https://github.com/rkachowski/advent-of-code2018/blob/master/01/solution.rb&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaum5pm/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543667550.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaw7kqy",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "wzkx",
        "can_mod_post": false, "created_utc": 1543716420.0, "send_replies": true,
        "parent_id": "t1_eaundqg", "score": 2, "author_fullname": "t2_t1qbo", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Duh, forgot about ~:\n\n    f=:3 :''try. ([{~i.&amp;0@~:) +/\\ y catch. f
        y,y end.'' NB. need name for recursion\n    echo f t\n\nAnd finally all this
        as tacit J\n\n    echo ([{~i.&amp;0@~:)@(+/\\) ::($:@(],])) t", "edited":
        1543718248.0, "top_awarded_type": null, "author_flair_css_class": null, "name":
        "t1_eaw7kqy", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Duh,
        forgot about ~:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;f=:3 :&amp;#39;try. ([{~i.&amp;amp;0@~:)
        +/\\ y catch. f y,y end.&amp;#39; NB. need name for recursion\necho f t\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And
        finally all this as tacit J&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;echo ([{~i.&amp;amp;0@~:)@(+/\\)
        ::($:@(],])) t\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaw7kqy/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543716420.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "more",
        "data": {"count": 1, "name": "t1_eaw98pb", "id": "eaw98pb", "parent_id": "t1_eaundqg",
        "depth": 1, "children": ["eaw98pb"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "eaundqg", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "wzkx", "can_mod_post": false, "created_utc": 1543669051.0,
        "send_replies": true, "parent_id": "t3_a20646", "score": 2, "author_fullname":
        "t2_t1qbo", "approved_by": null, "mod_note": null, "all_awardings": [], "collapsed":
        false, "body": "**J**\n\nNothing wise but loops.\n\n    echo +/t=:\".&amp;&gt;cutLF
        CR-.~fread''01.dat''\n    echo 3 : 0 t\n      d =. ,s =. 0\n      while. do.\n        for_e.
        y do.\n          s =. s+e\n          if. (#d)&gt;d i. s do. s return. end.\n          d
        =. d,s\n        end.\n      end.\n    )\n    exit 0\n\nThere was a solution
        with = and ~.\n\n    ({.@(I.@(1&amp;&lt;@(+/\"1)@=))){~.)+/\\($~140*#)t\n\nbut
        130+k items is too much for it.", "edited": 1543670870.0, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eaundqg", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;J&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Nothing
        wise but loops.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;echo +/t=:&amp;quot;.&amp;amp;&amp;gt;cutLF
        CR-.~fread&amp;#39;01.dat&amp;#39;\necho 3 : 0 t\n  d =. ,s =. 0\n  while.
        do.\n    for_e. y do.\n      s =. s+e\n      if. (#d)&amp;gt;d i. s do. s
        return. end.\n      d =. d,s\n    end.\n  end.\n)\nexit 0\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There
        was a solution with = and ~.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;({.@(I.@(1&amp;amp;&amp;lt;@(+/&amp;quot;1)@=))){~.)+/\\($~140*#)t\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;but
        130+k items is too much for it.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaundqg/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543669051.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaw9kf3",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Accensor",
        "can_mod_post": false, "created_utc": 1543718293.0, "send_replies": true,
        "parent_id": "t1_eauo6ad", "score": 2, "author_fullname": "t2_w6hyn", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Your solution is very similar to my part one solution... so I modified your
        part 2 solution to fit mine as I was desperately stuck fiddling with a `do{}while();`
        loop because I''m still very new to JavaScript, and it''s the only language
        I am even somewhat intimate with.   \nFollows is my part one solution:\n\n    const
        calibrator = () =&gt; {\n      let freq = 0;\n      let freqArr = [];\n      calibrationArr.forEach(cur
        =&gt; { \n          if (Math.sign(cur) === -1) {\n            freq -= Math.abs(cur);\n            freqArr.push(freq);\n    \n          }
        else {\n            freq += cur;\n            freqArr.push(freq);\n          }\n    \n        });\n      return
        freqArr;\n    }\n    \n    console.log(calibrator());\n\n&amp;#x200B;", "edited":
        1543718639.0, "top_awarded_type": null, "author_flair_css_class": null, "name":
        "t1_eaw9kf3", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Your
        solution is very similar to my part one solution... so I modified your part
        2 solution to fit mine as I was desperately stuck fiddling with a &lt;code&gt;do{}while();&lt;/code&gt;
        loop because I&amp;#39;m still very new to JavaScript, and it&amp;#39;s the
        only language I am even somewhat intimate with.&lt;br/&gt;\nFollows is my
        part one solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const calibrator =
        () =&amp;gt; {\n  let freq = 0;\n  let freqArr = [];\n  calibrationArr.forEach(cur
        =&amp;gt; { \n      if (Math.sign(cur) === -1) {\n        freq -= Math.abs(cur);\n        freqArr.push(freq);\n\n      }
        else {\n        freq += cur;\n        freqArr.push(freq);\n      }\n\n    });\n  return
        freqArr;\n}\n\nconsole.log(calibrator());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaw9kf3/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543718293.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "eauo6ad", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Thatzachary", "can_mod_post": false, "created_utc":
        1543669989.0, "send_replies": true, "parent_id": "t3_a20646", "score": 2,
        "author_fullname": "t2_gmj2b", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Here''s my **Javascript** solution. You''re
        all much better at this than me. This is my solution to part 2, took me 45
        minutes to crack oh boy.\n\n                \n    var data = document.querySelector(''pre'').innerText.split(''\\n'');
        // get the an array of elements to work with [''+13'', ''-2'', ''+1'', ...]\n    //
        Set a bunch of variables\n    var total = 0;\n    var frequencyList = [];\n    var
        weGotEm = null;\n    \n    function loopTime() {\n        data.forEach(function(item){\n            if
        (weGotEm === null &amp;&amp; item !== '''') { //Has this been cracked yet,
        and make sure this isn''t a blank item in the array\n                var item
        = item.split(''''); \n                var modifier = item[0];\n                item.shift('''');
        // just snip the modifer off the array now we''ve got it\n                var
        number = item.join('''');\n                // there is definitely a more graceful
        way to do this, at least a ternary, but there''s no points given for looks
        here.\n                if (modifier === ''-'') {\n                    total
        = total - parseInt(number);\n                } else if (modifier === ''+'')
        {\n                    total = total + parseInt(number);\n                }\n                var
        found = frequencyList.find(function findFirstLargeNumber(element) { // check
        for a repeat\n                    return element === total;\n                });\n                frequencyList.push(total);\n    \n                if
        (found &gt; -1) {\n                    weGotEm = total;\n                    return
        total;\n                };\n            }\n           \n        });\n    };\n    \n    function
        loopRepeatChecker() {\n        // Redo the loop if no duplicate has been found
        yet\n        if (weGotEm === null) {\n            loopTime();\n            loopRepeatChecker();\n        }\n    }\n    \n    loopRepeatChecker();\n    ",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eauo6ad", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s
        my &lt;strong&gt;Javascript&lt;/strong&gt; solution. You&amp;#39;re all much
        better at this than me. This is my solution to part 2, took me 45 minutes
        to crack oh boy.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var data = document.querySelector(&amp;#39;pre&amp;#39;).innerText.split(&amp;#39;\\n&amp;#39;);
        // get the an array of elements to work with [&amp;#39;+13&amp;#39;, &amp;#39;-2&amp;#39;,
        &amp;#39;+1&amp;#39;, ...]\n// Set a bunch of variables\nvar total = 0;\nvar
        frequencyList = [];\nvar weGotEm = null;\n\nfunction loopTime() {\n    data.forEach(function(item){\n        if
        (weGotEm === null &amp;amp;&amp;amp; item !== &amp;#39;&amp;#39;) { //Has
        this been cracked yet, and make sure this isn&amp;#39;t a blank item in the
        array\n            var item = item.split(&amp;#39;&amp;#39;); \n            var
        modifier = item[0];\n            item.shift(&amp;#39;&amp;#39;); // just snip
        the modifer off the array now we&amp;#39;ve got it\n            var number
        = item.join(&amp;#39;&amp;#39;);\n            // there is definitely a more
        graceful way to do this, at least a ternary, but there&amp;#39;s no points
        given for looks here.\n            if (modifier === &amp;#39;-&amp;#39;) {\n                total
        = total - parseInt(number);\n            } else if (modifier === &amp;#39;+&amp;#39;)
        {\n                total = total + parseInt(number);\n            }\n            var
        found = frequencyList.find(function findFirstLargeNumber(element) { // check
        for a repeat\n                return element === total;\n            });\n            frequencyList.push(total);\n\n            if
        (found &amp;gt; -1) {\n                weGotEm = total;\n                return
        total;\n            };\n        }\n\n    });\n};\n\nfunction loopRepeatChecker()
        {\n    // Redo the loop if no duplicate has been found yet\n    if (weGotEm
        === null) {\n        loopTime();\n        loopRepeatChecker();\n    }\n}\n\nloopRepeatChecker();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauo6ad/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543669989.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 2, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "more",
        "data": {"count": 1, "name": "t1_eav37vd", "id": "eav37vd", "parent_id": "t1_eauodbj",
        "depth": 1, "children": ["eav37vd"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "eauodbj", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "[deleted]", "can_mod_post": false, "send_replies": true,
        "parent_id": "t3_a20646", "score": 2, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "**Common Lisp**:\n\n    (defun
        freq-repetition (freq-changes)\n      (let ((freq-changes (copy-seq freq-changes))\n            (seen-freqs
        (make-hash-table)))\n        (setf (cdr (last freq-changes)) freq-changes)\n        (setf
        (gethash 0 seen-freqs) t)\n        (loop for x in freq-changes\n           sum
        x into freq\n           if (gethash freq seen-freqs) return freq\n           else
        do (setf (gethash freq seen-freqs) t))))\n    \n    (defun main ()\n      (let*
        ((freq-changes (with-open-file (in \"day01-input.txt\")\n                             (loop
        for x = (read in nil) while x collect x)))\n             (result-p1 (reduce
        #''+ freq-changes))\n             (result-p2 (freq-repetition freq-changes)))\n        (format
        t \"Result 1a: ~d~%Result 1b: ~d\" result-p1 result-p2)))\n\n**Dlang**\n\n    auto
        freq_repetition(const int[] freq_changes) {\n        import std.range, std.algorithm;\n    \n        auto
        seen_freqs = [ 0: true ];\n        foreach (freq; freq_changes.cycle.cumulativeFold!\"a+b\")
        {\n            if (freq in seen_freqs)\n                return freq;\n            else\n                seen_freqs[freq]
        = true;\n        }\n        assert(0);\n    }\n    \n    void main() {\n        import
        std.stdio, std.algorithm, std.conv, std.array;\n    \n        const freq_changes
        = File(\"day01-input.txt\").byLine.map!(a =&gt; a.to!int).array;\n        auto
        result_p1 = freq_changes.sum;\n        auto result_p2 = freq_repetition(freq_changes);\n        writefln(\"Result
        1a: %d\\nResult 1b: %d\", result_p1, result_p2);\n    }\n", "edited": false,
        "downs": 0, "author_flair_css_class": null, "collapsed": false, "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Common
        Lisp&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(defun freq-repetition
        (freq-changes)\n  (let ((freq-changes (copy-seq freq-changes))\n        (seen-freqs
        (make-hash-table)))\n    (setf (cdr (last freq-changes)) freq-changes)\n    (setf
        (gethash 0 seen-freqs) t)\n    (loop for x in freq-changes\n       sum x into
        freq\n       if (gethash freq seen-freqs) return freq\n       else do (setf
        (gethash freq seen-freqs) t))))\n\n(defun main ()\n  (let* ((freq-changes
        (with-open-file (in &amp;quot;day01-input.txt&amp;quot;)\n                         (loop
        for x = (read in nil) while x collect x)))\n         (result-p1 (reduce #&amp;#39;+
        freq-changes))\n         (result-p2 (freq-repetition freq-changes)))\n    (format
        t &amp;quot;Result 1a: ~d~%Result 1b: ~d&amp;quot; result-p1 result-p2)))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Dlang&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;auto
        freq_repetition(const int[] freq_changes) {\n    import std.range, std.algorithm;\n\n    auto
        seen_freqs = [ 0: true ];\n    foreach (freq; freq_changes.cycle.cumulativeFold!&amp;quot;a+b&amp;quot;)
        {\n        if (freq in seen_freqs)\n            return freq;\n        else\n            seen_freqs[freq]
        = true;\n    }\n    assert(0);\n}\n\nvoid main() {\n    import std.stdio,
        std.algorithm, std.conv, std.array;\n\n    const freq_changes = File(&amp;quot;day01-input.txt&amp;quot;).byLine.map!(a
        =&amp;gt; a.to!int).array;\n    auto result_p1 = freq_changes.sum;\n    auto
        result_p2 = freq_repetition(freq_changes);\n    writefln(&amp;quot;Result
        1a: %d\\nResult 1b: %d&amp;quot;, result_p1, result_p2);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauodbj/",
        "num_reports": null, "locked": false, "name": "t1_eauodbj", "created": 1543670208.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1543670208.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eb0ynql",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "sdiepend",
        "can_mod_post": false, "created_utc": 1543872058.0, "send_replies": true,
        "parent_id": "t1_eauvauk", "score": 2, "author_fullname": "t2_kdto1", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "If your input starts with a +5 for example your part one won''t work :) try
        this one:  \n    \n    cat input | xargs | sed ''s/^+//'' | bc", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eb0ynql",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If your input starts
        with a +5 for example your part one won&amp;#39;t work :) try this one:  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;cat
        input | xargs | sed &amp;#39;s/^+//&amp;#39; | bc\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eb0ynql/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543872058.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "more",
        "data": {"count": 2, "name": "t1_eb7w6xm", "id": "eb7w6xm", "parent_id": "t1_eauvauk",
        "depth": 1, "children": ["eb7w6xm", "eaxiyby"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "eauvauk", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "vypxl", "can_mod_post": false, "created_utc": 1543677397.0,
        "send_replies": true, "parent_id": "t3_a20646", "score": 2, "author_fullname":
        "t2_2pbhezcb", "approved_by": null, "mod_note": null, "all_awardings": [],
        "collapsed": false, "body": "Bash anyone? I''m trying to complete the polyglot
        challenge and started with it.\n\nHere''s my solution:\n\n    # Part 1 - Just
        add them together with bc\n    echo \"Solution for part 1:\"\n    cat input1.txt
        | xargs | bc\n    \n    \n    # Part 2 - Put all new frequencies into an associative
        array until a duplicate is encountered\n    freq=0\n    iters=0\n    declare
        -A seen\n    \n    # Loop until solution is found\n    while true; do\n        #
        Read every line\n        while read f; do\n            # Update current Frequency\n            freq=$(($freq+$f))\n            \n            #
        Check if already encountered\n            if [ ${seen[\"$freq\"]} ]; then\n                #
        Print solution and exit\n                echo \"Solution for part 2:\"\n                echo
        $freq\n                echo \"Took $iters iterations.\"\n                exit
        0\n            else\n                # Add frequency to seen\n                seen[\"$freq\"]=1\n            fi\n            iters=$(($iters+1))\n        done
        &lt; input1.txt\n    done\n\n&amp;#x200B;", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_eauvauk", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Bash anyone? I&amp;#39;m trying
        to complete the polyglot challenge and started with it.&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s
        my solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# Part 1 - Just add them
        together with bc\necho &amp;quot;Solution for part 1:&amp;quot;\ncat input1.txt
        | xargs | bc\n\n\n# Part 2 - Put all new frequencies into an associative array
        until a duplicate is encountered\nfreq=0\niters=0\ndeclare -A seen\n\n# Loop
        until solution is found\nwhile true; do\n    # Read every line\n    while
        read f; do\n        # Update current Frequency\n        freq=$(($freq+$f))\n\n        #
        Check if already encountered\n        if [ ${seen[&amp;quot;$freq&amp;quot;]}
        ]; then\n            # Print solution and exit\n            echo &amp;quot;Solution
        for part 2:&amp;quot;\n            echo $freq\n            echo &amp;quot;Took
        $iters iterations.&amp;quot;\n            exit 0\n        else\n            #
        Add frequency to seen\n            seen[&amp;quot;$freq&amp;quot;]=1\n        fi\n        iters=$(($iters+1))\n    done
        &amp;lt; input1.txt\ndone\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauvauk/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543677397.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eaux0xb", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "jonathrg", "can_mod_post": false, "created_utc":
        1543679042.0, "send_replies": true, "parent_id": "t3_a20646", "score": 2,
        "author_fullname": "t2_4h7v285", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "This Python code prints the answer to part
        1 as the first line and the answer to part 2 as the second line\n\n    import
        functools as f,itertools as i\n    c=list(map(int,open(\"input.txt\").readlines()))\n    print(sum(c))\n    s=set()\n    f.reduce(lambda
        a,b:print(a+b),exit() if a+b in s else a+b+(s.add(a+b)&lt;1),i.cycle(c))\n\n&amp;#x200B;",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eaux0xb", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This
        Python code prints the answer to part 1 as the first line and the answer to
        part 2 as the second line&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import functools
        as f,itertools as i\nc=list(map(int,open(&amp;quot;input.txt&amp;quot;).readlines()))\nprint(sum(c))\ns=set()\nf.reduce(lambda
        a,b:print(a+b),exit() if a+b in s else a+b+(s.add(a+b)&amp;lt;1),i.cycle(c))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaux0xb/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543679042.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 2, "name": "t1_eayz5hn",
        "id": "eayz5hn", "parent_id": "t1_eaux7ft", "depth": 1, "children": ["eayz5hn"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "eaux7ft", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "hahainternet", "can_mod_post": false,
        "created_utc": 1543679207.0, "send_replies": true, "parent_id": "t3_a20646",
        "score": 2, "author_fullname": "t2_3zdkk", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Perl 6 again, updating
        after a nice IRC chat, absurdly terse now:\n\n    # For part 1 we just sum
        the list we''re given\n    sub part1 is export {[+] @_}\n    \n    # For part
        2 we make an infinite sequence adding as we go, then return a list of those
        elements\n    # that repeat. Because it''s lazy and the caller only gets the
        first element, only that is calculated\n    sub part2 is export {([\\+] |@_
        xx *).repeated}", "edited": 1543679468.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eaux7ft", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Perl
        6 again, updating after a nice IRC chat, absurdly terse now:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#
        For part 1 we just sum the list we&amp;#39;re given\nsub part1 is export {[+]
        @_}\n\n# For part 2 we make an infinite sequence adding as we go, then return
        a list of those elements\n# that repeat. Because it&amp;#39;s lazy and the
        caller only gets the first element, only that is calculated\nsub part2 is
        export {([\\+] |@_ xx *).repeated}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaux7ft/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543679207.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 2, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eavcko4", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "daggerdragon", "can_mod_post": false,
        "created_utc": 1543691442.0, "send_replies": true, "parent_id": "t1_eauz5y0",
        "score": 2, "author_fullname": "t2_60niu", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "&gt; (No clue how to
        make code look readable in the code blocks)\n\nInstructions and some examples
        are on the sidebar:\n\n***\n**How do I format code?**\n\nUse [reddit''s Markdown
        syntax](/cw70q).  Inline code can be surrounded with \\``backticks`\\` or
        entire code blocks posted with four (or more) spaces to start each line.\n\n    public
        static void main() {\n        # just like this!\n    }\n\n***\nYou can edit
        your post and give it a try.  :)", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_eavcko4", "is_submitter": true,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;(No clue how to make
        code look readable in the code blocks)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Instructions
        and some examples are on the sidebar:&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;&lt;strong&gt;How
        do I format code?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Use &lt;a href=\"/cw70q\"&gt;reddit&amp;#39;s
        Markdown syntax&lt;/a&gt;.  Inline code can be surrounded with `&lt;code&gt;backticks&lt;/code&gt;`
        or entire code blocks posted with four (or more) spaces to start each line.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public
        static void main() {\n    # just like this!\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;You
        can edit your post and give it a try.  :)&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": "moderator", "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_a20646", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavcko4/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543691442.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "more",
        "data": {"count": 2, "name": "t1_eax6jq2", "id": "eax6jq2", "parent_id": "t1_eauz5y0",
        "depth": 1, "children": ["eax6jq2"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "eauz5y0", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "[deleted]", "can_mod_post": false, "send_replies": true,
        "parent_id": "t3_a20646", "score": 2, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "In PHP ;)\n\nPart
        1: [https://pastebin.com/fAYx8TrB](https://pastebin.com/fAYx8TrB)\n\nPart
        2: [https://pastebin.com/6xy9kExE](https://pastebin.com/6xy9kExE)\n\n(No clue
        how to make code look readable in the code blocks)", "edited": false, "downs":
        0, "author_flair_css_class": null, "collapsed": false, "is_submitter": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In PHP ;)&lt;/p&gt;\n\n&lt;p&gt;Part
        1: &lt;a href=\"https://pastebin.com/fAYx8TrB\"&gt;https://pastebin.com/fAYx8TrB&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Part
        2: &lt;a href=\"https://pastebin.com/6xy9kExE\"&gt;https://pastebin.com/6xy9kExE&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;(No
        clue how to make code look readable in the code blocks)&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauz5y0/",
        "num_reports": null, "locked": false, "name": "t1_eauz5y0", "created": 1543680899.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1543680899.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eauzogq", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "loskutak-the-ptak", "can_mod_post": false,
        "created_utc": 1543681323.0, "send_replies": true, "parent_id": "t3_a20646",
        "score": 2, "author_fullname": "t2_ke7apcf", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Emacs part 1:\n\n1)
        select the whole file (using evil-mode: `ggvG`)\n\n2) M-x `calc-grab-sum-down`",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_eauzogq", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Emacs
        part 1:&lt;/p&gt;\n\n&lt;p&gt;1) select the whole file (using evil-mode: &lt;code&gt;ggvG&lt;/code&gt;)&lt;/p&gt;\n\n&lt;p&gt;2)
        M-x &lt;code&gt;calc-grab-sum-down&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauzogq/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543681323.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 2, "name": "t1_eawbfbu",
        "id": "eawbfbu", "parent_id": "t1_eauzurl", "depth": 1, "children": ["eawbfbu",
        "eavcu4z"]}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "eauzurl", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "SuyashD95",
        "can_mod_post": false, "created_utc": 1543681473.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 2, "author_fullname": "t2_21cfzmyw", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "While
        my solution is not as elegant as some of the others here... But, considering
        this is the first time that I am participating in AoC... So, here''s my solution
        for the first 2 puzzles....\n\n**Puzzle 1:**\n\n    resulting_frequency =
        0\n    input_file = open(\"input.txt\")\n    \n    for frequency in input_file:\n        frequency
        = int(frequency[:-1])\n        resulting_frequency += frequency\n    \n    print(\"Resulting
        frequency:\", resulting_frequency)\n    input_file.close()\n\n**Puzzle 2:**\n\n    def
        createFrequencyList():\n        frequencies = []\n        input_file = open(\"input.txt\")\n        for
        frequency in input_file:\n            frequency = int(frequency[:-1])\n            frequencies.append(frequency)\n        input_file.close()\n        return
        frequencies\n    \n    \n    def findRepeatedFrequency(frequencies):\n        total_freq
        = 0\n        resultant_freqs = set([0]\n        while True:\n            for
        freq in frequencies:\n                total_freq += freq\n                if
        total_freq not in resultant_freqs:\n                    resultant_freqs.add(total_freq)\n                else:\n                    print(\"The
        first frequency that has been repeated twice:\", total_freq)\n                    return\n    \n    \n    if
        __name__ == ''__main__'':\n        frequencies = createFrequencyList()\n        findRepeatedFrequency(frequencies)\n    \n\n**P.S:**
        Thanks to /u/zirtec for pointing about initializing the set with 0 as the
        first entry....", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eauzurl", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;While
        my solution is not as elegant as some of the others here... But, considering
        this is the first time that I am participating in AoC... So, here&amp;#39;s
        my solution for the first 2 puzzles....&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Puzzle
        1:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;resulting_frequency
        = 0\ninput_file = open(&amp;quot;input.txt&amp;quot;)\n\nfor frequency in
        input_file:\n    frequency = int(frequency[:-1])\n    resulting_frequency
        += frequency\n\nprint(&amp;quot;Resulting frequency:&amp;quot;, resulting_frequency)\ninput_file.close()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Puzzle
        2:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def createFrequencyList():\n    frequencies
        = []\n    input_file = open(&amp;quot;input.txt&amp;quot;)\n    for frequency
        in input_file:\n        frequency = int(frequency[:-1])\n        frequencies.append(frequency)\n    input_file.close()\n    return
        frequencies\n\n\ndef findRepeatedFrequency(frequencies):\n    total_freq =
        0\n    resultant_freqs = set([0]\n    while True:\n        for freq in frequencies:\n            total_freq
        += freq\n            if total_freq not in resultant_freqs:\n                resultant_freqs.add(total_freq)\n            else:\n                print(&amp;quot;The
        first frequency that has been repeated twice:&amp;quot;, total_freq)\n                return\n\n\nif
        __name__ == &amp;#39;__main__&amp;#39;:\n    frequencies = createFrequencyList()\n    findRepeatedFrequency(frequencies)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;P.S:&lt;/strong&gt;
        Thanks to &lt;a href=\"/u/zirtec\"&gt;/u/zirtec&lt;/a&gt; for pointing about
        initializing the set with 0 as the first entry....&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauzurl/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543681473.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eav2mwq", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "udoprog", "can_mod_post": false, "created_utc":
        1543683723.0, "send_replies": true, "parent_id": "t3_a20646", "score": 2,
        "author_fullname": "t2_4eur7", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Another solution in Rust. It''s really cool
        how popular it has become this year!\n\nLink to repo: https://github.com/udoprog/rust-advent-of-code-2018\n\n```rust\nuse
        aoc2018::*;\n\nfn part2(mods: &amp;[i64]) -&gt; Option&lt;i64&gt; {\n    let
        mut seen = HashSet::new();\n    seen.insert(0);\n\n    mods.iter()\n        .cloned()\n        .cycle()\n        .scan(0,
        |a, b| {\n            *a += b;\n            Some(*a)\n        })\n        .filter(|f|
        !seen.insert(*f))\n        .next()\n}\n\nfn main() -&gt; Result&lt;(), Error&gt;
        {\n    let mods = columns!(\"day1.txt\", char::is_whitespace, i64);\n\n    assert_eq!(497,
        mods.iter().cloned().sum::&lt;i64&gt;());\n    assert_eq!(Some(558), part2(&amp;mods));\n    Ok(())\n}\n```\n\nEdit:
        One does not simply score in Europe during Advent of Code.", "edited": 1543684090.0,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eav2mwq",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Another solution in
        Rust. It&amp;#39;s really cool how popular it has become this year!&lt;/p&gt;\n\n&lt;p&gt;Link
        to repo: &lt;a href=\"https://github.com/udoprog/rust-advent-of-code-2018\"&gt;https://github.com/udoprog/rust-advent-of-code-2018&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;```rust\nuse
        aoc2018::*;&lt;/p&gt;\n\n&lt;p&gt;fn part2(mods: &amp;amp;[i64]) -&amp;gt;
        Option&amp;lt;i64&amp;gt; {\n    let mut seen = HashSet::new();\n    seen.insert(0);&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;mods.iter()\n    .cloned()\n    .cycle()\n    .scan(0,
        |a, b| {\n        *a += b;\n        Some(*a)\n    })\n    .filter(|f| !seen.insert(*f))\n    .next()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n\n&lt;p&gt;fn
        main() -&amp;gt; Result&amp;lt;(), Error&amp;gt; {\n    let mods = columns!(&amp;quot;day1.txt&amp;quot;,
        char::is_whitespace, i64);&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;assert_eq!(497,
        mods.iter().cloned().sum::&amp;lt;i64&amp;gt;());\nassert_eq!(Some(558), part2(&amp;amp;mods));\nOk(())\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}\n```&lt;/p&gt;\n\n&lt;p&gt;Edit:
        One does not simply score in Europe during Advent of Code.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eav2mwq/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543683723.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 4, "name": "t1_eaw2iu3",
        "id": "eaw2iu3", "parent_id": "t1_eavyl0d", "depth": 1, "children": ["eaw2iu3"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "eavyl0d", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Hikaru755", "can_mod_post": false, "created_utc":
        1543708658.0, "send_replies": true, "parent_id": "t3_a20646", "score": 2,
        "author_fullname": "t2_qz5ws", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "**Kotlin**\n\nPart 1 was trivial with Kotlin''s
        stdlib (although I have to admit I initially didn''t remember you could just
        use `sum()` and did a custom `fold(0, Int::add)` instead...)\n\nFor part 2,
        I tried to keep it as functional as possible, with no side effects except
        for the set to keep track of visited frequencies, and hid that away in a general
        purpose extension function. Nice exercise in using different ways to construct
        and combine sequences, I think I haven''t used all of `sequence {}`, `generateSequence
        {}`, `.asSequence()` and `sequenceOf()` at once in such close proximity.\n\n    fun
        solvePart1(input: String) =\n        parse(input).sum().toString()\n    \n    fun
        solvePart2(input: String): String =\n        parse(input)\n            .repeat()\n            .accumulating(0,
        Int::plus)\n            .firstRepeated()\n            .toString()\n    \n    fun
        parse(input: String) = input.split(''\\n'').map(String::toInt)\n    \n    fun
        &lt;T : Any&gt; Iterable&lt;T&gt;.repeat(): Sequence&lt;T&gt; =\n        when
        {\n            !iterator().hasNext() -&gt; sequenceOf()\n            else
        -&gt; generateSequence { asSequence() }.flatten()\n        }\n    \n    /**\n     *
        Works exactly like [Sequence.fold], except it doesn''t return only the end
        result, but a sequence of all intermediary\n     * results after each application
        of the accumulator function.\n     */\n    fun &lt;R, T&gt; Sequence&lt;T&gt;.accumulating(initial:
        R, accumulator: (R, T) -&gt; R): Sequence&lt;R&gt; =\n        sequence {\n            var
        accumulated = initial\n            yield(accumulated)\n            forEach
        { elem -&gt;\n                accumulated = accumulator(accumulated, elem)\n                yield(accumulated)\n            }\n        }\n    \n    fun
        &lt;T : Any&gt; Sequence&lt;T&gt;.firstRepeated(): T? {\n        val known
        = mutableSetOf&lt;T&gt;()\n        return this.firstOrNull { !known.add(it)
        }\n    }", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eavyl0d", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Kotlin&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Part
        1 was trivial with Kotlin&amp;#39;s stdlib (although I have to admit I initially
        didn&amp;#39;t remember you could just use &lt;code&gt;sum()&lt;/code&gt;
        and did a custom &lt;code&gt;fold(0, Int::add)&lt;/code&gt; instead...)&lt;/p&gt;\n\n&lt;p&gt;For
        part 2, I tried to keep it as functional as possible, with no side effects
        except for the set to keep track of visited frequencies, and hid that away
        in a general purpose extension function. Nice exercise in using different
        ways to construct and combine sequences, I think I haven&amp;#39;t used all
        of &lt;code&gt;sequence {}&lt;/code&gt;, &lt;code&gt;generateSequence {}&lt;/code&gt;,
        &lt;code&gt;.asSequence()&lt;/code&gt; and &lt;code&gt;sequenceOf()&lt;/code&gt;
        at once in such close proximity.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fun solvePart1(input:
        String) =\n    parse(input).sum().toString()\n\nfun solvePart2(input: String):
        String =\n    parse(input)\n        .repeat()\n        .accumulating(0, Int::plus)\n        .firstRepeated()\n        .toString()\n\nfun
        parse(input: String) = input.split(&amp;#39;\\n&amp;#39;).map(String::toInt)\n\nfun
        &amp;lt;T : Any&amp;gt; Iterable&amp;lt;T&amp;gt;.repeat(): Sequence&amp;lt;T&amp;gt;
        =\n    when {\n        !iterator().hasNext() -&amp;gt; sequenceOf()\n        else
        -&amp;gt; generateSequence { asSequence() }.flatten()\n    }\n\n/**\n * Works
        exactly like [Sequence.fold], except it doesn&amp;#39;t return only the end
        result, but a sequence of all intermediary\n * results after each application
        of the accumulator function.\n */\nfun &amp;lt;R, T&amp;gt; Sequence&amp;lt;T&amp;gt;.accumulating(initial:
        R, accumulator: (R, T) -&amp;gt; R): Sequence&amp;lt;R&amp;gt; =\n    sequence
        {\n        var accumulated = initial\n        yield(accumulated)\n        forEach
        { elem -&amp;gt;\n            accumulated = accumulator(accumulated, elem)\n            yield(accumulated)\n        }\n    }\n\nfun
        &amp;lt;T : Any&amp;gt; Sequence&amp;lt;T&amp;gt;.firstRepeated(): T? {\n    val
        known = mutableSetOf&amp;lt;T&amp;gt;()\n    return this.firstOrNull { !known.add(it)
        }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavyl0d/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1543708658.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaw2yc9",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "HokieGeek",
        "can_mod_post": false, "created_utc": 1543712284.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 2, "author_fullname": "t2_vdtx", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "Like
        many, apparently, I decided to learn Rust with AoC this year. Today''s challenge
        I did most of it in car ride so might not be the most idiomatic solution.\n\n    fn
        last_frequency(input: Vec&lt;i64&gt;) -&gt; i64 {\n        input.iter().sum()\n    }\n    \n    fn
        repeated_frequency(input: Vec&lt;i64&gt;) -&gt; i64 {\n        let mut freq_sum:
        i64 = 0;\n        let mut freqs: Vec&lt;i64&gt; = vec![0];\n        let mut
        done = false;\n    \n        while !done {\n            for change in input.iter()
        {\n                freq_sum += change;\n                if freqs.contains(&amp;freq_sum)
        {\n                    done = true;\n                    break;\n                }
        else {\n                    freqs.push(freq_sum);\n                }\n            }\n        }\n        freq_sum\n    }\n    \n    fn
        s2i(input: &amp;[String]) -&gt; Vec&lt;i64&gt; {\n        input.iter().map(|s|
        s.replace(\"+\", \"\").parse::&lt;i64&gt;().unwrap()).collect()\n    }\n    \n    fn
        main() {\n        let args: Vec&lt;_&gt; = env::args().collect();\n    \n        println!(\"Last
        frequency: {:?}\", last_frequency(s2i(&amp;args[1..])));\n        println!(\"Repeated
        frequency: {:?}\", repeated_frequency(s2i(&amp;args[1..])));\n    }\n\n[https://gitlab.com/HokieGeek/aoc2018/blob/master/one/src/main.rs](https://gitlab.com/HokieGeek/aoc2018/blob/master/one/src/main.rs)\n\n&amp;#x200B;\n\nEDIT:
        Ok, after reading a few responses here, particularly''s /u/zSync1, I updated
        my part 2 solution. I like this much better.\n\n    fn repeated_frequency(input:
        Vec&lt;i64&gt;) -&gt; i64 {\n        let mut freq_sum = 0;\n        let mut
        freqs: HashSet&lt;_&gt; = [0i64].iter().cloned().collect();\n    \n        input.iter()\n             .cycle()
        // well this is convenient!\n             .find_map(|change| { // maps on
        elems and returns first non-none, breaking the cycle\n                 freq_sum
        += change;\n                 freqs.replace(freq_sum)\n             })\n             .unwrap()
        // from an Option it either returns a value or panics if none\n    }\n\nI
        learned:\n\n* [https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.cycle](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.cycle)
        Yeah, much cleaner but then led me to needing to break the loop which lead
        to...\n* [https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.find\\_map](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.find_map)
        Ok, that''s a useful take on the map function, but not being familiar with
        Rust, I would have never gotten there myself. Thank''s zSync2!\n* `unwrap`
        ohhh! so that''s what that is for.\n\n&amp;#x200B;", "edited": 1543722175.0,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_eaw2yc9",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Like many, apparently,
        I decided to learn Rust with AoC this year. Today&amp;#39;s challenge I did
        most of it in car ride so might not be the most idiomatic solution.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fn
        last_frequency(input: Vec&amp;lt;i64&amp;gt;) -&amp;gt; i64 {\n    input.iter().sum()\n}\n\nfn
        repeated_frequency(input: Vec&amp;lt;i64&amp;gt;) -&amp;gt; i64 {\n    let
        mut freq_sum: i64 = 0;\n    let mut freqs: Vec&amp;lt;i64&amp;gt; = vec![0];\n    let
        mut done = false;\n\n    while !done {\n        for change in input.iter()
        {\n            freq_sum += change;\n            if freqs.contains(&amp;amp;freq_sum)
        {\n                done = true;\n                break;\n            } else
        {\n                freqs.push(freq_sum);\n            }\n        }\n    }\n    freq_sum\n}\n\nfn
        s2i(input: &amp;amp;[String]) -&amp;gt; Vec&amp;lt;i64&amp;gt; {\n    input.iter().map(|s|
        s.replace(&amp;quot;+&amp;quot;, &amp;quot;&amp;quot;).parse::&amp;lt;i64&amp;gt;().unwrap()).collect()\n}\n\nfn
        main() {\n    let args: Vec&amp;lt;_&amp;gt; = env::args().collect();\n\n    println!(&amp;quot;Last
        frequency: {:?}&amp;quot;, last_frequency(s2i(&amp;amp;args[1..])));\n    println!(&amp;quot;Repeated
        frequency: {:?}&amp;quot;, repeated_frequency(s2i(&amp;amp;args[1..])));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://gitlab.com/HokieGeek/aoc2018/blob/master/one/src/main.rs\"&gt;https://gitlab.com/HokieGeek/aoc2018/blob/master/one/src/main.rs&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;EDIT:
        Ok, after reading a few responses here, particularly&amp;#39;s &lt;a href=\"/u/zSync1\"&gt;/u/zSync1&lt;/a&gt;,
        I updated my part 2 solution. I like this much better.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fn
        repeated_frequency(input: Vec&amp;lt;i64&amp;gt;) -&amp;gt; i64 {\n    let
        mut freq_sum = 0;\n    let mut freqs: HashSet&amp;lt;_&amp;gt; = [0i64].iter().cloned().collect();\n\n    input.iter()\n         .cycle()
        // well this is convenient!\n         .find_map(|change| { // maps on elems
        and returns first non-none, breaking the cycle\n             freq_sum += change;\n             freqs.replace(freq_sum)\n         })\n         .unwrap()
        // from an Option it either returns a value or panics if none\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I
        learned:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.cycle\"&gt;https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.cycle&lt;/a&gt;
        Yeah, much cleaner but then led me to needing to break the loop which lead
        to...&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.find_map\"&gt;https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.find_map&lt;/a&gt;
        Ok, that&amp;#39;s a useful take on the map function, but not being familiar
        with Rust, I would have never gotten there myself. Thank&amp;#39;s zSync2!&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;unwrap&lt;/code&gt;
        ohhh! so that&amp;#39;s what that is for.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaw2yc9/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543712284.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 1, "name": "t1_eb84j87",
        "id": "eb84j87", "parent_id": "t1_eawcrxd", "depth": 1, "children": ["eb84j87"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "eawcrxd", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "tehjimmeh", "can_mod_post": false, "created_utc":
        1543721216.0, "send_replies": true, "parent_id": "t3_a20646", "score": 2,
        "author_fullname": "t2_49ft0", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "PowerShell\n\n1:\n\n    gc in.txt | measure
        -sum\n\n2:\n\n    &amp;{for(){gc in.txt}}|%{$x=0;$h=@{}}{$x+=$_;if(++$h[$x]-eq2){break}}{$x}",
        "edited": 1543721503.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_eawcrxd", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;PowerShell&lt;/p&gt;\n\n&lt;p&gt;1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;gc
        in.txt | measure -sum\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;amp;{for(){gc
        in.txt}}|%{$x=0;$h=@{}}{$x+=$_;if(++$h[$x]-eq2){break}}{$x}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eawcrxd/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1543721216.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eba6a7e", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "vini_2003", "can_mod_post": false, "created_utc":
        1544183612.0, "send_replies": true, "parent_id": "t3_a20646", "score": 2,
        "author_fullname": "t2_odiqh", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "C++ (Part II):\n\n    #include &lt;iostream&gt;\n    #include
        &lt;string&gt;\n    #include &lt;fstream&gt;\n    #include &lt;set&gt;\n    \n    using
        namespace std;\n    \n    string inpath = \"C:\\\\Users\\\\vini2003\\\\Documents\\\\Advent
        of Code\\\\Day 1\\\\input\";\n    \n    int result;\n    \n    set&lt;int&gt;
        storage;\n    \n    void read() {\n    \tifstream input(inpath);\n    \tstring
        line;\n    \twhile (getline(input, line)) {\n    \t\tif (!line.empty()) {\n    \t\t\tresult
        += stoi(line);\n    \t\t\tif (!storageB.insert(result).second) {\n    \t\t\t\tcout
        &lt;&lt; \"Duplicate: \" &lt;&lt; result;\n    \t\t\t\tsystem(\"PAUSE\");\n    \t\t\t}\n    \t\t}\n    \t}\n    \tread();\n    }    \n\n    int
        main() {\n    \tread();\n    }\n\nWas stuck in this for way too long, until
        I discovered sets themselves don''t accept duplicates and return false if
        the value being inserted is a duplicate. Worked like a charm.", "edited":
        1544190875.0, "top_awarded_type": null, "author_flair_css_class": null, "name":
        "t1_eba6a7e", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C++
        (Part II):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;\n#include
        &amp;lt;string&amp;gt;\n#include &amp;lt;fstream&amp;gt;\n#include &amp;lt;set&amp;gt;\n\nusing
        namespace std;\n\nstring inpath = &amp;quot;C:\\\\Users\\\\vini2003\\\\Documents\\\\Advent
        of Code\\\\Day 1\\\\input&amp;quot;;\n\nint result;\n\nset&amp;lt;int&amp;gt;
        storage;\n\nvoid read() {\n    ifstream input(inpath);\n    string line;\n    while
        (getline(input, line)) {\n        if (!line.empty()) {\n            result
        += stoi(line);\n            if (!storageB.insert(result).second) {\n                cout
        &amp;lt;&amp;lt; &amp;quot;Duplicate: &amp;quot; &amp;lt;&amp;lt; result;\n                system(&amp;quot;PAUSE&amp;quot;);\n            }\n        }\n    }\n    read();\n}    \n\nint
        main() {\n    read();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Was stuck
        in this for way too long, until I discovered sets themselves don&amp;#39;t
        accept duplicates and return false if the value being inserted is a duplicate.
        Worked like a charm.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eba6a7e/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1544183612.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ebfwkzk",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "qqbre",
        "can_mod_post": false, "created_utc": 1544379299.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 2, "author_fullname": "t2_k3hha", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "**C
        Day 1 Part 1**\nSince i''m newb with reddit formatting and indenting here
        is paste bin link https://pastebin.com/69qKzHbr", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_ebfwkzk", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;C Day 1 Part
        1&lt;/strong&gt;\nSince i&amp;#39;m newb with reddit formatting and indenting
        here is paste bin link &lt;a href=\"https://pastebin.com/69qKzHbr\"&gt;https://pastebin.com/69qKzHbr&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/ebfwkzk/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1544379299.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "more",
        "data": {"count": 273, "name": "t1_eau65h2", "id": "eau65h2", "parent_id":
        "t3_a20646", "depth": 0, "children": ["eau65h2", "eau60qe", "eau874a", "eau6859",
        "eau7hwh", "eau73lc", "eaucq13", "eaua7d7", "eau8n6a", "eau6n11", "eau6171",
        "eau5vkn", "eau866p", "eau7zjt", "eauixdp", "eau7m1y", "eaudut4", "eaufze2",
        "eaudrdp", "eaue3dj", "eauaetp", "eauh3pn", "eau91oo", "eau6rj9", "eau810z",
        "eau8l2r", "eaubeas", "eausevj", "eau5x8v", "eau8s6f", "eaufn6h", "eauqwrn",
        "eauv9xr", "eau85sd", "eaun10g", "ebi3k6f", "eaujyw2", "eayexvu", "eau9dbw",
        "eauhusu", "eaujx6k", "eauh689", "eauul84", "eaufwrm", "eavijqj", "eauei50",
        "eaukyn7", "eauy2b2", "eauas22", "eavo7lt", "eauhvkr", "eauslbf", "eauhq2q",
        "eau6wdu", "eau7djt", "eauekk3", "eauhf9p", "eaujd20", "eauaryw", "eauj31a",
        "eauwvxm", "eav45x9", "eavum92", "eau60sh", "eaubge7", "eaul2cw", "eauic33",
        "eaukgyy", "eavgv3w", "eav7ht0", "eauw6ni", "eaucqa4", "eaun733", "eaun9nr",
        "eauk06c", "eavxq3s", "eavgy5q", "eauy6tv", "eaupc1j", "eavd548", "eaupdkj",
        "eb2ybtj", "eauxmgr", "eav9dru", "eav3und", "eaunrqb", "eaujyy5", "eavs5eb",
        "eawxtvm", "eauhvyh", "eawlwtk", "eauwr4j", "eav35hx", "eav71zb", "eaw57te",
        "eawsr3i", "eavko75", "ebo5h84", "eaw07k1", "eaui1je", "eav4npl", "eavulp5",
        "eavgcz2", "eauq2s9", "eauq9k8", "eaudrl8", "eau7nrx", "eauxdjb", "eavab0v",
        "eavapu5", "eauznje", "ebqh2us", "eavrlkv", "ebad6id", "eavtdpe", "eaudsiw",
        "eaulhg7", "eauj4gb", "eawvahl", "ebbq2nh", "eav68wo", "eaw1i3z", "eayarcr",
        "eaumyaa", "eau7cui", "eauoodt", "eaus1s2", "eavdlij", "eauja6q", "eaw4s3l",
        "eauoxp4", "eaukxid", "eb724w7", "eavpbya", "eavbjea", "eavo2s6", "eauzo1v",
        "eauxpch", "eazm07y", "eax7kwh", "eayp728", "eawjz4q", "eavk971", "eauxv0w",
        "eavnks9", "eb3bxwl", "eaw8c0z", "eb2ss04", "eb0ytjv", "eavbp7h", "eavxd26",
        "eavpjb0", "eav6ivo", "eaurf99", "eaxi2o5", "eawnkti", "eau6362", "eb0nhk6",
        "eaxia69", "eavi0um", "eav9ion", "eb057u0", "eavrj80", "eayrr8u", "eay3qee",
        "eax6yvg", "eawadl9", "eawiqeu", "eaw0rwz", "eazquo1", "eb84elp", "ebqhbfx",
        "eboyobz", "eb353sd", "eauq1ik", "eav7br5", "eb7prl5", "eavezws", "eaw83ko",
        "eaw6vng", "ebddk53", "eb8ltj1", "eb1v3fd", "eaxtle6", "eb3q84i", "eaux31y",
        "eaykqhd", "eaw8fpa", "eawbkkd", "eb82izv", "ec9dysx", "eazhd9t", "eavkiam",
        "eb9y4sj", "eauni4r", "eavka6a", "eay7fst", "eb3kasd", "eb5theq", "eazrcov",
        "eavje9e", "eav92fa", "eavgdd9", "ebfuouy", "eayqzud", "eaxcfyt"]}}], "before":
        null}}]'
  recorded_at: Sat, 08 Mar 2025 23:21:33 GMT
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:21:34 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=EAT5XdSXTkcM8ChAUY; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sat, 08 Mar 2025 23:21:34 GMT
- request:
    method: post
    uri: https://oauth.reddit.com/api/morechildren.json
    body:
      encoding: UTF-8
      string: link_id=t3_a20646&children=eau65h2,eau60qe,eau874a,eau6859,eau7hwh,eau73lc,eaucq13,eaua7d7,eau8n6a,eau6n11,eau6171,eau5vkn,eau866p,eau7zjt,eauixdp,eau7m1y,eaudut4,eaufze2,eaudrdp,eaue3dj,eauaetp,eauh3pn,eau91oo,eau6rj9,eau810z,eau8l2r,eaubeas,eausevj,eau5x8v,eau8s6f,eaufn6h,eauqwrn,eauv9xr,eau85sd,eaun10g,ebi3k6f,eaujyw2,eayexvu,eau9dbw,eauhusu,eaujx6k,eauh689,eauul84,eaufwrm,eavijqj,eauei50,eaukyn7,eauy2b2,eauas22,eavo7lt,eauhvkr,eauslbf,eauhq2q,eau6wdu,eau7djt,eauekk3,eauhf9p,eaujd20,eauaryw,eauj31a,eauwvxm,eav45x9,eavum92,eau60sh,eaubge7,eaul2cw,eauic33,eaukgyy,eavgv3w,eav7ht0,eauw6ni,eaucqa4,eaun733,eaun9nr,eauk06c,eavxq3s,eavgy5q,eauy6tv,eaupc1j,eavd548,eaupdkj,eb2ybtj,eauxmgr,eav9dru,eav3und,eaunrqb,eaujyy5,eavs5eb,eawxtvm,eauhvyh,eawlwtk,eauwr4j,eav35hx,eav71zb,eaw57te,eawsr3i,eavko75,ebo5h84,eaw07k1,eaui1je,eav4npl,eavulp5,eavgcz2,eauq2s9,eauq9k8,eaudrl8,eau7nrx,eauxdjb,eavab0v,eavapu5,eauznje,ebqh2us,eavrlkv,ebad6id,eavtdpe,eaudsiw,eaulhg7,eauj4gb,eawvahl,ebbq2nh,eav68wo,eaw1i3z,eayarcr,eaumyaa,eau7cui,eauoodt,eaus1s2,eavdlij,eauja6q,eaw4s3l,eauoxp4,eaukxid,eb724w7,eavpbya,eavbjea,eavo2s6,eauzo1v,eauxpch,eazm07y,eax7kwh,eayp728,eawjz4q,eavk971,eauxv0w,eavnks9,eb3bxwl,eaw8c0z,eb2ss04,eb0ytjv,eavbp7h,eavxd26,eavpjb0,eav6ivo,eaurf99,eaxi2o5,eawnkti,eau6362,eb0nhk6,eaxia69,eavi0um,eav9ion,eb057u0,eavrj80,eayrr8u,eay3qee,eax6yvg,eawadl9,eawiqeu,eaw0rwz,eazquo1,eb84elp,ebqhbfx,eboyobz,eb353sd,eauq1ik,eav7br5,eb7prl5,eavezws,eaw83ko,eaw6vng,ebddk53,eb8ltj1,eb1v3fd,eaxtle6,eb3q84i,eaux31y,eaykqhd,eaw8fpa,eawbkkd,eb82izv,ec9dysx,eazhd9t,eavkiam,eb9y4sj,eauni4r,eavka6a,eay7fst,eb3kasd,eb5theq,eazrcov,eavje9e,eav92fa,eavgdd9,ebfuouy,eayqzud,eaxcfyt
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '38689'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      set-cookie:
      - loid=000000001ksjdmgw79.2.1741476094543.Z0FBQUFBQm56TkQtbms0MENKV0N6OENyb1pWclJ5QUVEYzhKX2NoU0xGLUs5NXlwN3JfeHF1MGs0bjZWVjZKVnlvdnY0aUFsSDVPWmk2N29xcEd3N2NZX2pFakE2eUJiQ2ZGWEwwMzJsUWcwTTVabVlDLTM0amJOelR5LU1ERFQtV0R1QUJsS2Rzc0I;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Mon, 08-Mar-2027 23:21:34
        GMT; secure, session_tracker=gropnopncdfrqmbghl.0.1741476094555.Z0FBQUFBQm56TkQtMmlxTktLWUJSbHpucWxXUjl3N20wWVIxQkRIVFNfMy1RTTYybjdmNV90SzAxZG1RRm04b09vMnVhbS1TdWdWUUN4WmFSYzBYUzdObHgzcmJVdl9naVlHcnRUMG9uTUsybFVZbk4tSFA5T0VXWTZQdmZKd0Q5ZFhzem5DaWlqX3A;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 01:21:34
        GMT; secure, edgebucket=brJHiJ2L0mvnCQPVhY; Domain=reddit.com; Max-Age=63071999;
        Path=/;  secure
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '7'
      x-ratelimit-remaining:
      - '93.0'
      x-ratelimit-reset:
      - '505'
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:21:34 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"jquery": [[0, 1, "call", ["body"]], [1, 2, "attr", "find"], [2, 3,
        "call", [".status"]], [3, 4, "attr", "hide"], [4, 5, "call", []], [5, 6, "attr",
        "html"], [6, 7, "call", [""]], [7, 8, "attr", "end"], [8, 9, "call", []],
        [0, 10, "attr", "insert_things"], [10, 11, "call", [[{"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eau5vkn",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "custom_user",
        "can_mod_post": false, "created_utc": 1543641907.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_11tqyd", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My **Python 3** solution for day 1:\n\n1:\n\n    with open(''input.txt'',
        ''r'') as f:\n        start = 0\n        for line in f:\n            sign
        = line[0]\n            number = int(line[1:])\n            if sign == ''-'':\n                start
        -= number\n            elif sign == ''+'':\n                start += number\n    \n        print(start)\n    \n\n2:\n\n&amp;#x200B;\n\n    lines
        = f.read().strip().split()\n    f.close()\n    \n    answer = 0\n    frequencies
        = {answer}\n    found = False\n    \n    while not found:\n        for line
        in lines:\n            sign = line[0]\n            number = int(line[1:])\n            if
        sign == ''-'':\n                answer -= number\n            elif sign ==
        ''+'':\n                answer += number\n            if answer in frequencies:\n                print(answer)\n                found
        = True\n                break\n            frequencies.add(answer)", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;My &lt;strong&gt;Python 3&lt;/strong&gt;
        solution for day 1:&lt;/p&gt;\n\n&lt;p&gt;1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with
        open(&amp;#39;input.txt&amp;#39;, &amp;#39;r&amp;#39;) as f:\n    start =
        0\n    for line in f:\n        sign = line[0]\n        number = int(line[1:])\n        if
        sign == &amp;#39;-&amp;#39;:\n            start -= number\n        elif sign
        == &amp;#39;+&amp;#39;:\n            start += number\n\n    print(start)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;2:&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;lines
        = f.read().strip().split()\nf.close()\n\nanswer = 0\nfrequencies = {answer}\nfound
        = False\n\nwhile not found:\n    for line in lines:\n        sign = line[0]\n        number
        = int(line[1:])\n        if sign == &amp;#39;-&amp;#39;:\n            answer
        -= number\n        elif sign == &amp;#39;+&amp;#39;:\n            answer +=
        number\n        if answer in frequencies:\n            print(answer)\n            found
        = True\n            break\n        frequencies.add(answer)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau5vkn/",
        "subreddit_type": "public", "locked": false, "name": "t1_eau5vkn", "created":
        1543641907.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543676809.0, "mod_reason_by": null,
        "banned_by": null, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eau8xfy", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_eau5vkn", "score":
        3, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_eau8xfy", "collapsed": true, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau8xfy/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1543645557.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543645557.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 3}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_eaukqyw", "id": "eaukqyw", "parent_id":
        "t1_eau8xfy", "depth": 2, "children": ["eaukqyw"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaukiu3",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "zirtec",
        "can_mod_post": false, "created_utc": 1543665280.0, "send_replies": true,
        "parent_id": "t1_eau5vkn", "score": 2, "author_fullname": "t2_f2pmc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "May i suggest simple improvements to your solution:\n\n* You can iterate
        on the file content in one line (granted, it''s all loaded in memory, acceptable
        for AoC): `for line in open(''input.txt'')`\n* String to int conversion can
        be done with `int(line)`\n* Once you manage to have the list of ints, you
        can `sum(...)` it\n\nHTH", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;May
        i suggest simple improvements to your solution:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;You
        can iterate on the file content in one line (granted, it&amp;#39;s all loaded
        in memory, acceptable for AoC): &lt;code&gt;for line in open(&amp;#39;input.txt&amp;#39;)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;String
        to int conversion can be done with &lt;code&gt;int(line)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Once
        you manage to have the list of ints, you can &lt;code&gt;sum(...)&lt;/code&gt;
        it&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;HTH&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaukiu3/", "subreddit_type":
        "public", "locked": false, "name": "t1_eaukiu3", "created": 1543665280.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 1, "name":
        "t1_eavqgcc", "id": "eavqgcc", "parent_id": "t1_eaukiu3", "depth": 2, "children":
        ["eavqgcc"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": 1543642492.0,
        "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eau60qe", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "dylanfromwinnipeg",
        "can_mod_post": false, "created_utc": 1543642067.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_7524szs", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "in C# (https://dylansmith.visualstudio.com/_git/AdventOfCode2018?path=%2Fsrc%2FDay01.cs)\n\n    public
        static string PartOne(string input)\n    {\n        var result = input.Lines().Select(x
        =&gt; int.Parse(x)).Sum();\n\n        return result.ToString();\n    }\n\n    public
        static string PartTwo(string input)\n    {\n        var frequency = 0;\n        var
        changes = input.Lines().Select(x =&gt; int.Parse(x)).ToList();\n        var
        seen = new HashSet&lt;int&gt;();\n\n        seen.Add(frequency);\n\n        while
        (true)\n        {\n            foreach (var c in changes)\n            {\n                frequency
        += c;\n\n                if (seen.Contains(frequency))\n                {\n                    return
        frequency.ToString();\n                }\n\n                seen.Add(frequency);\n            }\n        }\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;in C# (&lt;a href=\"https://dylansmith.visualstudio.com/_git/AdventOfCode2018?path=%2Fsrc%2FDay01.cs\"&gt;https://dylansmith.visualstudio.com/_git/AdventOfCode2018?path=%2Fsrc%2FDay01.cs&lt;/a&gt;)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public
        static string PartOne(string input)\n{\n    var result = input.Lines().Select(x
        =&amp;gt; int.Parse(x)).Sum();\n\n    return result.ToString();\n}\n\npublic
        static string PartTwo(string input)\n{\n    var frequency = 0;\n    var changes
        = input.Lines().Select(x =&amp;gt; int.Parse(x)).ToList();\n    var seen =
        new HashSet&amp;lt;int&amp;gt;();\n\n    seen.Add(frequency);\n\n    while
        (true)\n    {\n        foreach (var c in changes)\n        {\n            frequency
        += c;\n\n            if (seen.Contains(frequency))\n            {\n                return
        frequency.ToString();\n            }\n\n            seen.Add(frequency);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau60qe/",
        "subreddit_type": "public", "locked": false, "name": "t1_eau60qe", "created":
        1543642067.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eau65h2",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Mystical_Mage1113",
        "can_mod_post": false, "created_utc": 1543642214.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_x6jue", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Did mine in python, did some really lazy stuff to get it out quick\n\n    val
        = 0\n    vals = [0]*1000000\n    \n    with open(\"in.txt\") as file:\n        data
        = file.readlines();\n        \n    while True:\n        for line in data:\n            if
        line[0] == ''-'':\n                val -= int(line[1:])\n            elif
        line[0] == ''+'':\n                val += int(line[1:])\n            if (vals[val]
        == 1):\n                print(val)\n            vals[val] = 1\n\nI could''ve
        done it infinitely better (notably not `[0]*1000000` ) but whatever", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Did mine in python, did some really lazy
        stuff to get it out quick&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;val = 0\nvals
        = [0]*1000000\n\nwith open(&amp;quot;in.txt&amp;quot;) as file:\n    data
        = file.readlines();\n\nwhile True:\n    for line in data:\n        if line[0]
        == &amp;#39;-&amp;#39;:\n            val -= int(line[1:])\n        elif line[0]
        == &amp;#39;+&amp;#39;:\n            val += int(line[1:])\n        if (vals[val]
        == 1):\n            print(val)\n        vals[val] = 1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I
        could&amp;#39;ve done it infinitely better (notably not &lt;code&gt;[0]*1000000&lt;/code&gt;
        ) but whatever&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau65h2/",
        "subreddit_type": "public", "locked": false, "name": "t1_eau65h2", "created":
        1543642214.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_eaudqdj", "id": "eaudqdj", "parent_id":
        "t1_eau65h2", "depth": 1, "children": ["eaudqdj"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eau6859",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Jay__Money",
        "can_mod_post": false, "created_utc": 1543642296.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_nu6t1", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Using this year''s puzzles to learn Go\n\n\tfunc Day1Part2() {\n\t\tvar result
        = 0\n\t\tvisitedCoords := make(map[int]bool)\n\t\tvar input = utils.GetInputFileAsString(\"day1input.txt\")\n\t\tvar
        freqChanges = strings.Split(input, \"\\n\")\n\t\tfor true {\n\t\t\tfor _,
        fq := range freqChanges {\n\t\t\t\tvar plusMinus = fq[0]\n\t\t\t\tvar amtStr
        = fq[1:]\n\t\t\t\tamt, err := strconv.Atoi(amtStr)\n\t\t\t\tif err != nil
        {\n\t\t\t\t\tpanic(err)\n\t\t\t\t}\n\t\t\t\tif plusMinus == ''+'' {\n\t\t\t\t\tresult
        += amt\n\t\t\t\t} else {\n\t\t\t\t\tresult -= amt\n\t\t\t\t}\n\t\t\t\tif visitedCoords[result]
        == true {\n\t\t\t\t\tfmt.Println(result)\n\t\t\t\t\treturn\n\t\t\t\t} else
        {\n\t\t\t\t\tvisitedCoords[result] = true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Using this year&amp;#39;s
        puzzles to learn Go&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func Day1Part2() {\n    var
        result = 0\n    visitedCoords := make(map[int]bool)\n    var input = utils.GetInputFileAsString(&amp;quot;day1input.txt&amp;quot;)\n    var
        freqChanges = strings.Split(input, &amp;quot;\\n&amp;quot;)\n    for true
        {\n        for _, fq := range freqChanges {\n            var plusMinus = fq[0]\n            var
        amtStr = fq[1:]\n            amt, err := strconv.Atoi(amtStr)\n            if
        err != nil {\n                panic(err)\n            }\n            if plusMinus
        == &amp;#39;+&amp;#39; {\n                result += amt\n            } else
        {\n                result -= amt\n            }\n            if visitedCoords[result]
        == true {\n                fmt.Println(result)\n                return\n            }
        else {\n                visitedCoords[result] = true\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau6859/",
        "subreddit_type": "public", "locked": false, "name": "t1_eau6859", "created":
        1543642296.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaucwc5",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "lukechampine",
        "can_mod_post": false, "created_utc": 1543652170.0, "send_replies": true,
        "parent_id": "t1_eau6859", "score": 3, "author_fullname": "t2_124j5o", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Some tips:\n\n- `x := 0` is more idiomatic than `var x = 0`\n- `for` is more
        idiomatic than `for true`\n- `strconv.Atoi` will handle `+x` and `-x` just
        fine; you don''t need to do it manually\n- `map[int]struct{}` is *technically*
        more idiomatic than `map[int]bool`, but in this case it''s not worth worrying
        about.\n\nHave fun learning Go!\n", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Some tips:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;x
        := 0&lt;/code&gt; is more idiomatic than &lt;code&gt;var x = 0&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;for&lt;/code&gt;
        is more idiomatic than &lt;code&gt;for true&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;strconv.Atoi&lt;/code&gt;
        will handle &lt;code&gt;+x&lt;/code&gt; and &lt;code&gt;-x&lt;/code&gt; just
        fine; you don&amp;#39;t need to do it manually&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;map[int]struct{}&lt;/code&gt;
        is &lt;em&gt;technically&lt;/em&gt; more idiomatic than &lt;code&gt;map[int]bool&lt;/code&gt;,
        but in this case it&amp;#39;s not worth worrying about.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Have
        fun learning Go!&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaucwc5/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaucwc5", "created":
        1543652170.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaukvdp",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "zirtec",
        "can_mod_post": false, "created_utc": 1543665791.0, "send_replies": true,
        "parent_id": "t1_eaucwc5", "score": 2, "author_fullname": "t2_f2pmc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Good advise.\n\n* `map[int]bool` is used a lot if you google \"golang set\"
        this being said. I tend to prefer it too.\n* `== true` can be omitted.\n*
        `else { visitedCoords[result] = true }` - the else can be dropped as you return
        from the if. Idiomatic practice too (you keep the `visitedCoords[result] =
        true` of course).\n* I''d drop the final err processing as *arguably* what''s
        the point in a controlled environment like AoC (?)", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Good advise.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;map[int]bool&lt;/code&gt;
        is used a lot if you google &amp;quot;golang set&amp;quot; this being said.
        I tend to prefer it too.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;== true&lt;/code&gt;
        can be omitted.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;else { visitedCoords[result]
        = true }&lt;/code&gt; - the else can be dropped as you return from the if.
        Idiomatic practice too (you keep the &lt;code&gt;visitedCoords[result] = true&lt;/code&gt;
        of course).&lt;/li&gt;\n&lt;li&gt;I&amp;#39;d drop the final err processing
        as &lt;em&gt;arguably&lt;/em&gt; what&amp;#39;s the point in a controlled
        environment like AoC (?)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaukvdp/", "subreddit_type":
        "public", "locked": false, "name": "t1_eaukvdp", "created": 1543665791.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 2, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 4, "name":
        "t1_eaut0k4", "id": "eaut0k4", "parent_id": "t1_eaukvdp", "depth": 3, "children":
        ["eaut0k4"]}}, {"kind": "more", "data": {"count": 3, "name": "t1_eaust5x",
        "id": "eaust5x", "parent_id": "t1_eaucwc5", "depth": 2, "children": ["eaust5x"]}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eau6n11", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "FogLander",
        "can_mod_post": false, "created_utc": 1543642768.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_iy44x", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Made it onto the problem leaderboard for the very first time, by the skin
        of my teeth! (squeaked in by two seconds on part 2)\n\nLast year I got within
        6 seconds of making it (part 13) but never quite came through in time.\n\nPython:\n\n    with
        open(''input.txt'') as f:\n        lines = f.readlines()\n    \n    count
        = 0\n    for line in lines:\n        count += int(line)\n    \n    print(\"Part
        1: \" + str(count))\n    \n    counts = set()\n    count = 0\n    ind = 0\n    while
        (True):\n        count += int(lines[ind % len(lines)])\n        if (count
        in counts):\n            break\n        counts.add(count)\n        ind +=
        1\n    \n    print(\"Part 2: \" + str(count))\n    ", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Made it onto the problem leaderboard for the very
        first time, by the skin of my teeth! (squeaked in by two seconds on part 2)&lt;/p&gt;\n\n&lt;p&gt;Last
        year I got within 6 seconds of making it (part 13) but never quite came through
        in time.&lt;/p&gt;\n\n&lt;p&gt;Python:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with
        open(&amp;#39;input.txt&amp;#39;) as f:\n    lines = f.readlines()\n\ncount
        = 0\nfor line in lines:\n    count += int(line)\n\nprint(&amp;quot;Part 1:
        &amp;quot; + str(count))\n\ncounts = set()\ncount = 0\nind = 0\nwhile (True):\n    count
        += int(lines[ind % len(lines)])\n    if (count in counts):\n        break\n    counts.add(count)\n    ind
        += 1\n\nprint(&amp;quot;Part 2: &amp;quot; + str(count))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau6n11/",
        "subreddit_type": "public", "locked": false, "name": "t1_eau6n11", "created":
        1543642768.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_eau8lwz", "id": "eau8lwz", "parent_id":
        "t1_eau6n11", "depth": 1, "children": ["eau8lwz"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543643395.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eau6rj9", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "WellEndowedBK",
        "can_mod_post": false, "created_utc": 1543642910.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_cdjv0", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Yet another python solution.\n\n\n    with open(''input.txt'', ''r'') as
        f:\n        input_freq = [int(line) for line in f.readlines()]\n\n        #
        Part 1:\n        print(\"Part 1: \" + str(sum(input_freq)))\n\n        # Part
        2:\n        cur_sum = 0\n        seen = set()\n        index = 0\n        while
        not cur_sum in seen:\n            seen.add(cur_sum)\n            cur_sum +=
        input_freq[index]\n            index = (index + 1) % len(input_freq)\n        print(\"Part
        2: \" + str(cur_sum))\n\n", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yet
        another python solution.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with open(&amp;#39;input.txt&amp;#39;,
        &amp;#39;r&amp;#39;) as f:\n    input_freq = [int(line) for line in f.readlines()]\n\n    #
        Part 1:\n    print(&amp;quot;Part 1: &amp;quot; + str(sum(input_freq)))\n\n    #
        Part 2:\n    cur_sum = 0\n    seen = set()\n    index = 0\n    while not cur_sum
        in seen:\n        seen.add(cur_sum)\n        cur_sum += input_freq[index]\n        index
        = (index + 1) % len(input_freq)\n    print(&amp;quot;Part 2: &amp;quot; +
        str(cur_sum))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau6rj9/", "subreddit_type":
        "public", "locked": false, "name": "t1_eau6rj9", "created": 1543642910.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": 1543643322.0, "mod_reason_by": null, "banned_by": null, "ups": 1,
        "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eau6wdu",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "darkterbear",
        "can_mod_post": false, "created_utc": 1543643066.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_1mmlkd1q", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Hey guys! Here are my JS solutions (ranked 126 &amp; 322)\n\n&amp;#x200B;\n\nPart
        1\n```\nconst input = require(''fs'').readFileSync(''./input'', ''utf8'')\nconst
        instructions = input.split(''\\n'')\n\nconsole.log(instructions.reduce((a,
        b) =&gt; a + parseInt(b), 0))\n```\n&amp;#x200B;\nPart 2\n```\nconst input
        = require(''fs'').readFileSync(''./input'', ''utf8'')\nconst deltas = input.split(''\\n'')\n\nlet
        freqs = [0]\n\nwhile (true) {\n\tfor (i of deltas) {\n\t\tconst newFreq =
        freqs[freqs.length - 1] + parseInt(i)\n\n\t\tif (freqs.includes(newFreq))
        {\n\t\t\tconsole.log(newFreq)\n\t\t\treturn\n\t\t}\n\n\t\tfreqs.push(newFreq)\n\t}\n}\n```\nEDIT:\nRealized
        I should''ve used a dictionary for part two; takes way too long to run xD",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hey guys! Here are my
        JS solutions (ranked 126 &amp;amp; 322)&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Part
        1\n```\nconst input = require(&amp;#39;fs&amp;#39;).readFileSync(&amp;#39;./input&amp;#39;,
        &amp;#39;utf8&amp;#39;)\nconst instructions = input.split(&amp;#39;\\n&amp;#39;)&lt;/p&gt;\n\n&lt;p&gt;console.log(instructions.reduce((a,
        b) =&amp;gt; a + parseInt(b), 0))\n&lt;code&gt;\n&amp;amp;#x200B;\nPart 2\n&lt;/code&gt;\nconst
        input = require(&amp;#39;fs&amp;#39;).readFileSync(&amp;#39;./input&amp;#39;,
        &amp;#39;utf8&amp;#39;)\nconst deltas = input.split(&amp;#39;\\n&amp;#39;)&lt;/p&gt;\n\n&lt;p&gt;let
        freqs = [0]&lt;/p&gt;\n\n&lt;p&gt;while (true) {\n    for (i of deltas) {\n        const
        newFreq = freqs[freqs.length - 1] + parseInt(i)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    if
        (freqs.includes(newFreq)) {\n        console.log(newFreq)\n        return\n    }\n\n    freqs.push(newFreq)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}\n```\nEDIT:\nRealized
        I should&amp;#39;ve used a dictionary for part two; takes way too long to
        run xD&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau6wdu/",
        "subreddit_type": "public", "locked": false, "name": "t1_eau6wdu", "created":
        1543643066.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eau8zvq",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "netcraft",
        "can_mod_post": false, "created_utc": 1543645656.0, "send_replies": true,
        "parent_id": "t1_eau6wdu", "score": 2, "author_fullname": "t2_34btj", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "fyi you can use \\`Number()\\` instead of \\`parseInt\\`.  And a Set rather
        than a dict would be even better.\n\nBut you beat my placement so maybe dont
        listen to me :)", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;fyi
        you can use `Number()` instead of `parseInt`.  And a Set rather than a dict
        would be even better.&lt;/p&gt;\n\n&lt;p&gt;But you beat my placement so maybe
        dont listen to me :)&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau8zvq/",
        "subreddit_type": "public", "locked": false, "name": "t1_eau8zvq", "created":
        1543645656.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaugw00",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "AndrewGreenh",
        "can_mod_post": false, "created_utc": 1543659185.0, "send_replies": true,
        "parent_id": "t1_eau8zvq", "score": 2, "author_fullname": "t2_i67fc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "If you really want to codegolf, `x =&gt; +x` is much shorter than `x =&gt;
        Number(x)` and has more or less the same effect :P", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;If you really want to codegolf, &lt;code&gt;x =&amp;gt;
        +x&lt;/code&gt; is much shorter than &lt;code&gt;x =&amp;gt; Number(x)&lt;/code&gt;
        and has more or less the same effect :P&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaugw00/", "subreddit_type":
        "public", "locked": false, "name": "t1_eaugw00", "created": 1543659185.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 2, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eau7cui", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "ericls", "can_mod_post": false, "created_utc":
        1543643588.0, "send_replies": true, "parent_id": "t3_a20646", "score": 1,
        "author_fullname": "t2_j19s5", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "Some extraneous imports
        because that''s the template I''m using\n\n    import functools\n    import
        itertools\n    import operator\n    import os\n    \n    input = open(os.path.join(os.path.dirname(__file__),
        ''input'')).read().strip()\n    \n    input = [int(i) for i in input.splitlines()]\n    \n    \n    res
        = functools.reduce(operator.add, input)\n    print(res)\n    \n    r = 0\n    db
        = {0: 1}\n    \n    for i in itertools.cycle(input):\n        r += i\n        res
        = db[r] = db.setdefault(r, 0) + 1\n        if res == 2:\n            print(r)\n            break",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Some extraneous imports
        because that&amp;#39;s the template I&amp;#39;m using&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        functools\nimport itertools\nimport operator\nimport os\n\ninput = open(os.path.join(os.path.dirname(__file__),
        &amp;#39;input&amp;#39;)).read().strip()\n\ninput = [int(i) for i in input.splitlines()]\n\n\nres
        = functools.reduce(operator.add, input)\nprint(res)\n\nr = 0\ndb = {0: 1}\n\nfor
        i in itertools.cycle(input):\n    r += i\n    res = db[r] = db.setdefault(r,
        0) + 1\n    if res == 2:\n        print(r)\n        break\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau7cui/",
        "subreddit_type": "public", "locked": false, "name": "t1_eau7cui", "created":
        1543643588.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eau7djt",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Ephilates100",
        "can_mod_post": false, "created_utc": 1543643610.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_13awt1", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "[Hello again AoC](https://imgur.com/a/ackJMkm)\n\nDoing it in Go again this
        year.\n\n```\nfunc getData(input string) []int {\n\tvals := make([]int, 0)\n\n\tfor
        _, val := range strings.Split(input, \"\\n\") {\n\t\ttestVal, _ := strconv.Atoi(val)\n\t\tvals
        = append(vals, testVal)\n\t}\n\n\treturn vals\n}\n\nfunc (td dayEntry) PartOne(inputData
        string, updateChan chan []string) string {\n\tretVal := 0\n\tfor _, value
        := range getData(inputData) {\n\t\tretVal += value\n\t}\n\treturn fmt.Sprintf(\"%v\",
        retVal)\n}\n\nfunc (td dayEntry) PartTwo(inputData string, updateChan chan
        []string) string {\n\tfreqs := make(map[int]bool)\n\n\tretVal := 0\n\tfound
        := false\n\n\tfor !found {\n\t\tfor _, value := range getData(inputData) {\n\t\t\tretVal
        += value\n\n\t\t\tif _, ok := freqs[retVal]; ok {\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tfreqs[retVal]
        = true\n\t\t}\n\t}\n\treturn fmt.Sprintf(\"%v\", retVal)\n}\n```\n\nEdit:
        Just realised I''m building the array each loop ... doh!", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://imgur.com/a/ackJMkm\"&gt;Hello
        again AoC&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Doing it in Go again this year.&lt;/p&gt;\n\n&lt;p&gt;```\nfunc
        getData(input string) []int {\n    vals := make([]int, 0)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for
        _, val := range strings.Split(input, &amp;quot;\\n&amp;quot;) {\n    testVal,
        _ := strconv.Atoi(val)\n    vals = append(vals, testVal)\n}\n\nreturn vals\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n\n&lt;p&gt;func
        (td dayEntry) PartOne(inputData string, updateChan chan []string) string {\n    retVal
        := 0\n    for _, value := range getData(inputData) {\n        retVal += value\n    }\n    return
        fmt.Sprintf(&amp;quot;%v&amp;quot;, retVal)\n}&lt;/p&gt;\n\n&lt;p&gt;func
        (td dayEntry) PartTwo(inputData string, updateChan chan []string) string {\n    freqs
        := make(map[int]bool)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;retVal := 0\nfound
        := false\n\nfor !found {\n    for _, value := range getData(inputData) {\n        retVal
        += value\n\n        if _, ok := freqs[retVal]; ok {\n            found = true\n            break\n        }\n\n        freqs[retVal]
        = true\n    }\n}\nreturn fmt.Sprintf(&amp;quot;%v&amp;quot;, retVal)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}\n```&lt;/p&gt;\n\n&lt;p&gt;Edit:
        Just realised I&amp;#39;m building the array each loop ... doh!&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau7djt/",
        "subreddit_type": "public", "locked": false, "name": "t1_eau7djt", "created":
        1543643610.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_eau7dls", "id": "eau7dls", "parent_id":
        "t1_eau7djt", "depth": 1, "children": ["eau7dls"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543644434.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eau7hwh", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "thejpster",
        "can_mod_post": false, "created_utc": 1543643749.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_xkzrl", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I''m doing them all in Rust again this year. Definitely a bit rusty (ahem)
        on my first attempt. I could probably use some helper methods for parsing
        input to avoid hesitation trying to remember the syntax for `collect`.\n\nSee
        [https://github.com/thejpster/rust-advent-of-code/blob/master/src/m2018/problem\\_1.rs](https://github.com/thejpster/rust-advent-of-code/blob/master/src/m2018/problem_1.rs)\n\n    use
        std::collections::HashSet;\n    \n    use failure::Error;\n    pub fn run(contents:
        &amp;[Vec&lt;String&gt;]) -&gt; Result&lt;(), Error&gt; {\n        // Big
        one line string\n        let number_line = &amp;contents[0];\n        let
        numbers: Vec&lt;i32&gt; = number_line.iter().map(|x| x.parse()).collect::&lt;Result&lt;_,
        _&gt;&gt;()?;\n        let sum = numbers.iter().cloned().sum::&lt;i32&gt;();\n        println!(\"First
        sum {:?}\", sum);\n        let mut map = HashSet::new();\n        let mut
        sum = 0;\n        for freq in numbers.iter().cycle() {\n            sum =
        sum + freq;\n            if map.contains(&amp;sum) {\n                println!(\"Duplicate:
        {}\", sum);\n                break;\n            } else {\n                map.insert(sum);\n            }\n        }\n        Ok(())\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m doing them
        all in Rust again this year. Definitely a bit rusty (ahem) on my first attempt.
        I could probably use some helper methods for parsing input to avoid hesitation
        trying to remember the syntax for &lt;code&gt;collect&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;See
        &lt;a href=\"https://github.com/thejpster/rust-advent-of-code/blob/master/src/m2018/problem_1.rs\"&gt;https://github.com/thejpster/rust-advent-of-code/blob/master/src/m2018/problem_1.rs&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use
        std::collections::HashSet;\n\nuse failure::Error;\npub fn run(contents: &amp;amp;[Vec&amp;lt;String&amp;gt;])
        -&amp;gt; Result&amp;lt;(), Error&amp;gt; {\n    // Big one line string\n    let
        number_line = &amp;amp;contents[0];\n    let numbers: Vec&amp;lt;i32&amp;gt;
        = number_line.iter().map(|x| x.parse()).collect::&amp;lt;Result&amp;lt;_,
        _&amp;gt;&amp;gt;()?;\n    let sum = numbers.iter().cloned().sum::&amp;lt;i32&amp;gt;();\n    println!(&amp;quot;First
        sum {:?}&amp;quot;, sum);\n    let mut map = HashSet::new();\n    let mut
        sum = 0;\n    for freq in numbers.iter().cycle() {\n        sum = sum + freq;\n        if
        map.contains(&amp;amp;sum) {\n            println!(&amp;quot;Duplicate: {}&amp;quot;,
        sum);\n            break;\n        } else {\n            map.insert(sum);\n        }\n    }\n    Ok(())\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau7hwh/",
        "subreddit_type": "public", "locked": false, "name": "t1_eau7hwh", "created":
        1543643749.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 6, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eau9blu",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "Dutch_Gh0st",
        "can_mod_post": false, "created_utc": 1543646130.0, "send_replies": true,
        "parent_id": "t1_eau7hwh", "score": 6, "author_fullname": "t2_rwwpkp", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Did you know, HashSet''s insert returns a boolean?\nhttps://doc.rust-lang.org/std/collections/struct.HashSet.html#method.insert\n\nIf
        the value is present on insert, it returns true, false otherwise.\n\nAnd for
        the part where you collect into a `Result&lt;Vec&lt;_&gt;, _&gt;`, thats good,
        but you could also call `.flat_map(|x| x.parse().ok()).collect::&lt;Vec&lt;_&gt;&gt;()`,
        which will discard all value''s that could not be parsed correctly.", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Did you know, HashSet&amp;#39;s insert returns
        a boolean?\n&lt;a href=\"https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.insert\"&gt;https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.insert&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;If
        the value is present on insert, it returns true, false otherwise.&lt;/p&gt;\n\n&lt;p&gt;And
        for the part where you collect into a &lt;code&gt;Result&amp;lt;Vec&amp;lt;_&amp;gt;,
        _&amp;gt;&lt;/code&gt;, thats good, but you could also call &lt;code&gt;.flat_map(|x|
        x.parse().ok()).collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;()&lt;/code&gt;,
        which will discard all value&amp;#39;s that could not be parsed correctly.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau9blu/",
        "subreddit_type": "public", "locked": false, "name": "t1_eau9blu", "created":
        1543646130.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_eau9wyy", "id": "eau9wyy", "parent_id":
        "t1_eau9blu", "depth": 2, "children": ["eau9wyy"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eau7m1y",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Frizkie",
        "can_mod_post": false, "created_utc": 1543643881.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_4ptdg", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Ruby\n\n    data = File.read(''data.txt'').chomp.split(\"\\n\")\n\n**Part
        1**\n\n    puts data.sum(&amp;:to_i)\n    \n**Part 2**\n\n    found = nil\n    list
        = [0]\n    f = 0\n    \n    until found\n      data.each do |d|\n        f
        += d.to_i\n        found = f if list.include? f\n        break if found\n    \n        list
        &lt;&lt; f\n      end\n    end\n    \n    puts found\n    ", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Ruby&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;data
        = File.read(&amp;#39;data.txt&amp;#39;).chomp.split(&amp;quot;\\n&amp;quot;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Part
        1&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;puts data.sum(&amp;amp;:to_i)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Part
        2&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;found = nil\nlist = [0]\nf
        = 0\n\nuntil found\n  data.each do |d|\n    f += d.to_i\n    found = f if
        list.include? f\n    break if found\n\n    list &amp;lt;&amp;lt; f\n  end\nend\n\nputs
        found\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau7m1y/",
        "subreddit_type": "public", "locked": false, "name": "t1_eau7m1y", "created":
        1543643881.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eau7nrx",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Overseer12",
        "can_mod_post": false, "created_utc": 1543643938.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_jf4x9", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Python 3**\n\n```Py\nfrom aocd import get_data\n\npuzzle_input = get_data(day=1,
        year=2018)\ninput = puzzle_input.split(''\\n'')\n\n\ndef part_1():\n    return
        sum(map(int, input))\n\n\nanswer = part_1()\nprint(\"Part 1 answer =  %s\"
        % answer)\n\n\ndef part_2(f):\n    frequency = f\n    for line in input:\n        change
        = int(line)\n        frequency += change\n        if frequency in seen_frequencies:\n            return
        frequency\n        seen_frequencies.add(frequency)\n    return part_2(frequency)\n\n\nseen_frequencies
        = set()\nanswer = part_2(0)\nprint(\"Part 2 answer =  %s\" % answer)\n```",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python
        3&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;```Py\nfrom aocd import get_data&lt;/p&gt;\n\n&lt;p&gt;puzzle_input
        = get_data(day=1, year=2018)\ninput = puzzle_input.split(&amp;#39;\\n&amp;#39;)&lt;/p&gt;\n\n&lt;p&gt;def
        part_1():\n    return sum(map(int, input))&lt;/p&gt;\n\n&lt;p&gt;answer =
        part_1()\nprint(&amp;quot;Part 1 answer =  %s&amp;quot; % answer)&lt;/p&gt;\n\n&lt;p&gt;def
        part_2(f):\n    frequency = f\n    for line in input:\n        change = int(line)\n        frequency
        += change\n        if frequency in seen_frequencies:\n            return frequency\n        seen_frequencies.add(frequency)\n    return
        part_2(frequency)&lt;/p&gt;\n\n&lt;p&gt;seen_frequencies = set()\nanswer =
        part_2(0)\nprint(&amp;quot;Part 2 answer =  %s&amp;quot; % answer)\n```&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau7nrx/",
        "subreddit_type": "public", "locked": false, "name": "t1_eau7nrx", "created":
        1543643938.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_eaubd0f", "id": "eaubd0f", "parent_id":
        "t1_eau7nrx", "depth": 1, "children": ["eaubd0f"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eau7zjt",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Rustywolf",
        "can_mod_post": false, "created_utc": 1543644322.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_59psq", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Due to a frustrating bug I didn''t even come close to placing, so I figured
        I''d see if I could make a functional oneliner.\n\n```(input = new String(require(''fs'').readFileSync(\"./input.txt\")).trim().split(\"\\n\"))
        &amp;&amp; (t = 1) &amp;&amp; (x = []) &amp;&amp; (n = new Array(1000000)).fill().forEach(()
        =&gt; input.forEach((s) =&gt; ((t += new Number(s)) &amp;&amp; (x.push(t))
        &amp;&amp; (x.indexOf(t) !== x.length - 1)) &amp;&amp; (console.log(t - 1)
        || process.exit(0))));```\n\n&amp;#x200B;\n\nIf anyone has a way to replace
        the hardcoded million iterations with a more elegant loop, please let me know.",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Due to a frustrating
        bug I didn&amp;#39;t even come close to placing, so I figured I&amp;#39;d
        see if I could make a functional oneliner.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;(input
        = new String(require(&amp;#39;fs&amp;#39;).readFileSync(&amp;quot;./input.txt&amp;quot;)).trim().split(&amp;quot;\\n&amp;quot;))
        &amp;amp;&amp;amp; (t = 1) &amp;amp;&amp;amp; (x = []) &amp;amp;&amp;amp;
        (n = new Array(1000000)).fill().forEach(() =&amp;gt; input.forEach((s) =&amp;gt;
        ((t += new Number(s)) &amp;amp;&amp;amp; (x.push(t)) &amp;amp;&amp;amp; (x.indexOf(t)
        !== x.length - 1)) &amp;amp;&amp;amp; (console.log(t - 1) || process.exit(0))));&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;If
        anyone has a way to replace the hardcoded million iterations with a more elegant
        loop, please let me know.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau7zjt/",
        "subreddit_type": "public", "locked": false, "name": "t1_eau7zjt", "created":
        1543644322.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543644767.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eau85sd", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "mariotacke",
        "can_mod_post": false, "created_utc": 1543644522.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_8lk32w", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Node.js/Javascript ([repo](https://github.com/mariotacke/advent-of-code-2018/tree/master/day-01-chronal-calibration)):\n\nPart
        1:\n\n    const calibration = (input) =&gt; {\n      return input\n        .split(''\\n'')\n        .map((x)
        =&gt; parseInt(x))\n        .reduce((a, b) =&gt; a + b, 0);\n    };\n    \n    module.exports
        = calibration;\n\nPart 2\n\n    const calibration = (input) =&gt; {\n      const
        frequencies = new Set([0]);\n    \n      const changes = input\n        .split(''\\n'')\n        .map((x)
        =&gt; parseInt(x));\n    \n      let frequency = 0;\n      let i = 0;\n    \n      while
        (true) {\n        if (i === changes.length) {\n          i = 0;\n    \n          continue;\n        }\n    \n        frequency
        += changes[i];\n    \n        if (frequencies.has(frequency)) {\n          break;\n        }\n    \n        frequencies.add(frequency);\n    \n        i++;\n      }\n    \n      return
        frequency;\n    };\n    \n    module.exports = calibration;", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Node.js/Javascript (&lt;a href=\"https://github.com/mariotacke/advent-of-code-2018/tree/master/day-01-chronal-calibration\"&gt;repo&lt;/a&gt;):&lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const calibration = (input) =&amp;gt;
        {\n  return input\n    .split(&amp;#39;\\n&amp;#39;)\n    .map((x) =&amp;gt;
        parseInt(x))\n    .reduce((a, b) =&amp;gt; a + b, 0);\n};\n\nmodule.exports
        = calibration;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part 2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const
        calibration = (input) =&amp;gt; {\n  const frequencies = new Set([0]);\n\n  const
        changes = input\n    .split(&amp;#39;\\n&amp;#39;)\n    .map((x) =&amp;gt;
        parseInt(x));\n\n  let frequency = 0;\n  let i = 0;\n\n  while (true) {\n    if
        (i === changes.length) {\n      i = 0;\n\n      continue;\n    }\n\n    frequency
        += changes[i];\n\n    if (frequencies.has(frequency)) {\n      break;\n    }\n\n    frequencies.add(frequency);\n\n    i++;\n  }\n\n  return
        frequency;\n};\n\nmodule.exports = calibration;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau85sd/",
        "subreddit_type": "public", "locked": false, "name": "t1_eau85sd", "created":
        1543644522.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eau866p",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "aoc-fan",
        "can_mod_post": false, "created_utc": 1543644535.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_13cqpt", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "JavaScript/TypeScript using dotless library\n\n\\*\\* first, mapWithLast,
        query are functions from dotless library \n\n        const sum = (f: number,
        i: number) =&gt; f + i;\n    \n        const findResultingFrequency = (input:
        number[]) =&gt; input.reduce(sum, 0);\n    \n        const reachedTwice =
        () =&gt; {\n            const seen: any = { \"0\" : true };\n            return
        (n: number) =&gt; {\n                if (seen[n]) {\n                    return
        true;\n                } else {\n                    seen[n] = true;\n                    return
        false;\n                }\n            };\n        };\n    \n        function*
        repeat(input: number[]) {\n            while (true) {\n                yield*
        input;\n            }\n        }\n    \n        const firstFrequencyReachesTwice
        = (input: number[]) =&gt; query(\n            repeat(input),\n            mapWithLast(sum,
        0),\n            first(reachedTwice())\n        );\n    \n\n&amp;#x200B;",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;JavaScript/TypeScript
        using dotless library&lt;/p&gt;\n\n&lt;p&gt;** first, mapWithLast, query are
        functions from dotless library &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    const
        sum = (f: number, i: number) =&amp;gt; f + i;\n\n    const findResultingFrequency
        = (input: number[]) =&amp;gt; input.reduce(sum, 0);\n\n    const reachedTwice
        = () =&amp;gt; {\n        const seen: any = { &amp;quot;0&amp;quot; : true
        };\n        return (n: number) =&amp;gt; {\n            if (seen[n]) {\n                return
        true;\n            } else {\n                seen[n] = true;\n                return
        false;\n            }\n        };\n    };\n\n    function* repeat(input: number[])
        {\n        while (true) {\n            yield* input;\n        }\n    }\n\n    const
        firstFrequencyReachesTwice = (input: number[]) =&amp;gt; query(\n        repeat(input),\n        mapWithLast(sum,
        0),\n        first(reachedTwice())\n    );\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau866p/",
        "subreddit_type": "public", "locked": false, "name": "t1_eau866p", "created":
        1543644535.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eau874a",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "beached",
        "can_mod_post": false, "created_utc": 1543644566.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_37n9g", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "C++\n\n    template&lt;typename Container&gt;\n    intmax_t part_01( Container
        &amp;&amp; values ) {\n        return std::accumulate( values.begin( ), values.end(
        ), static_cast&lt;intmax_t&gt;( 0 ) );\n    }\n\n    template&lt;typename
        Container&gt;\n    intmax_t part_02( Container &amp;&amp; values ) {\n        std::unordered_set&lt;intmax_t&gt;
        sums{};\n        intmax_t sum = 0;\n        sums.insert( sum );\n        while(
        true ) {\n            for (auto i: values) {\n                sum += i;\n                if(
        sums.count( sum ) &gt; 0 ) {\n                    return sum;\n                }\n                sums.insert(
        sum );\n            }\n        }\n        std::terminate( );\n    }\n\n",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C++&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;template&amp;lt;typename
        Container&amp;gt;\nintmax_t part_01( Container &amp;amp;&amp;amp; values )
        {\n    return std::accumulate( values.begin( ), values.end( ), static_cast&amp;lt;intmax_t&amp;gt;(
        0 ) );\n}\n\ntemplate&amp;lt;typename Container&amp;gt;\nintmax_t part_02(
        Container &amp;amp;&amp;amp; values ) {\n    std::unordered_set&amp;lt;intmax_t&amp;gt;
        sums{};\n    intmax_t sum = 0;\n    sums.insert( sum );\n    while( true )
        {\n        for (auto i: values) {\n            sum += i;\n            if(
        sums.count( sum ) &amp;gt; 0 ) {\n                return sum;\n            }\n            sums.insert(
        sum );\n        }\n    }\n    std::terminate( );\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau874a/",
        "subreddit_type": "public", "locked": false, "name": "t1_eau874a", "created":
        1543644566.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543645873.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eau8s6f", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "scul86",
        "can_mod_post": false, "created_utc": 1543645354.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_ehijy", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python 3\n\n    with open(''input'') as f:\n        puzzle_input = [int(line)
        for line in f.readlines()]\n    \n    \n    def freq_delta(l):\n        return
        sum(l)\n    \n    \n    def find_first_dupe(l):\n        seen = set()\n        s
        = 0\n        while True:\n            for i in l:\n                if s in
        seen:\n                    return s\n                seen.add(s)\n                s
        += i\n    \n    \n    assert freq_delta([1, 1, 1]) == 3\n    assert freq_delta([1,
        1, -2]) == 0\n    assert freq_delta([-1, -2, -3]) == -6\n    \n    print(freq_delta(puzzle_input))\n    \n    assert
        find_first_dupe([1, -1]) == 0\n    assert find_first_dupe([+3, +3, +4, -2,
        -4]) == 10\n    assert find_first_dupe([-6, +3, +8, +5, -6]) == 5\n    assert
        find_first_dupe([+7, +7, -2, -7, -4]) == 14\n    \n    print(find_first_dupe(puzzle_input))\n\n",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python 3&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with
        open(&amp;#39;input&amp;#39;) as f:\n    puzzle_input = [int(line) for line
        in f.readlines()]\n\n\ndef freq_delta(l):\n    return sum(l)\n\n\ndef find_first_dupe(l):\n    seen
        = set()\n    s = 0\n    while True:\n        for i in l:\n            if s
        in seen:\n                return s\n            seen.add(s)\n            s
        += i\n\n\nassert freq_delta([1, 1, 1]) == 3\nassert freq_delta([1, 1, -2])
        == 0\nassert freq_delta([-1, -2, -3]) == -6\n\nprint(freq_delta(puzzle_input))\n\nassert
        find_first_dupe([1, -1]) == 0\nassert find_first_dupe([+3, +3, +4, -2, -4])
        == 10\nassert find_first_dupe([-6, +3, +8, +5, -6]) == 5\nassert find_first_dupe([+7,
        +7, -2, -7, -4]) == 14\n\nprint(find_first_dupe(puzzle_input))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau8s6f/",
        "subreddit_type": "public", "locked": false, "name": "t1_eau8s6f", "created":
        1543645354.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543645948.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eau91oo", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ttapu",
        "can_mod_post": false, "created_utc": 1543645727.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_n0a7h9s", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "so early morning...\n\nMy solution of part2 is very slow. Any idea how to
        make it faster in python?\n\n    with open(\"1.input\", \"r\") as allomany:\n        inp=allomany.readlines()\n    #1\n    res=0\n    for
        i in inp:\n        res+=int(i)\n    print(res)\n    \n    #2            \n    def
        calibrate(inp):\n        res=0\n        was=[0]\n        while True:\n            for
        i in inp:\n                res+=int(i)\n                if res in was:\n                    return
        res\n                else:\n                    was.append(res)\n    \n    print(calibrate(inp))\n\n&amp;#x200B;",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;so early morning...&lt;/p&gt;\n\n&lt;p&gt;My
        solution of part2 is very slow. Any idea how to make it faster in python?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with
        open(&amp;quot;1.input&amp;quot;, &amp;quot;r&amp;quot;) as allomany:\n    inp=allomany.readlines()\n#1\nres=0\nfor
        i in inp:\n    res+=int(i)\nprint(res)\n\n#2            \ndef calibrate(inp):\n    res=0\n    was=[0]\n    while
        True:\n        for i in inp:\n            res+=int(i)\n            if res
        in was:\n                return res\n            else:\n                was.append(res)\n\nprint(calibrate(inp))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau91oo/",
        "subreddit_type": "public", "locked": false, "name": "t1_eau91oo", "created":
        1543645727.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 5, "name": "t1_eaucpw8", "id": "eaucpw8", "parent_id":
        "t1_eau91oo", "depth": 1, "children": ["eaucpw8", "eaua4xw", "eaua0o2", "eauavq5"]}},
        {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eau9dbw", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "call23re",
        "can_mod_post": false, "created_utc": 1543646200.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_165mby", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Lua (ran in Roblox)\n\nPart 1:\n\n    local input = require(script.Input)\n    \n    local
        total = 0\n    \n    for value,_ in input:gmatch(\"[^\\n]+\") do\n\t    total
        = total + tonumber(value)\n    end\n\n    print(total)\n\nPart 2:\n\n    local
        input = require(script.Input)\n    \n    local total = 0\n    local seen =
        {}\n    \n    while wait() do\n\t    for value,_ in input:gmatch(\"[^\\n]+\")
        do\n\t\t    total = total + tonumber(value)\n\t\t    if seen[total] then\n\t\t\t    print(total)\n\t\t\t    return\n\t\t    end\n\t\t    seen[total]
        = true\n\t    end\n    end", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Lua
        (ran in Roblox)&lt;/p&gt;\n\n&lt;p&gt;Part 1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;local
        input = require(script.Input)\n\nlocal total = 0\n\nfor value,_ in input:gmatch(&amp;quot;[^\\n]+&amp;quot;)
        do\n    total = total + tonumber(value)\nend\n\nprint(total)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;local input = require(script.Input)\n\nlocal
        total = 0\nlocal seen = {}\n\nwhile wait() do\n    for value,_ in input:gmatch(&amp;quot;[^\\n]+&amp;quot;)
        do\n        total = total + tonumber(value)\n        if seen[total] then\n            print(total)\n            return\n        end\n        seen[total]
        = true\n    end\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau9dbw/", "subreddit_type":
        "public", "locked": false, "name": "t1_eau9dbw", "created": 1543646200.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "removal_reason":
        null, "link_id": "t3_a20646", "author_flair_template_id": null, "likes": null,
        "replies": "", "user_reports": [], "saved": false, "id": "eaua7d7", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "[deleted]", "can_mod_post": false, "send_replies":
        true, "parent_id": "t3_a20646", "score": 1, "approved_by": null, "mod_note":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "Copy+paste
        the input into vim. 99999J to put them all on the same line. \"+yy to copy
        the line to system clipboard. spawn a python repl. paste.", "awarders": [],
        "downs": 0, "author_flair_css_class": null, "name": "t1_eaua7d7", "collapsed":
        false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Copy+paste
        the input into vim. 99999J to put them all on the same line. &amp;quot;+yy
        to copy the line to system clipboard. spawn a python repl. paste.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaua7d7/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1543647477.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543647477.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543653042.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eauaetp", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Jimpi27",
        "can_mod_post": false, "created_utc": 1543647808.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_biccd", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# Javascript\n\n&amp;#x200B;\n\nPart 1:\n\n    const input = require(\"fs\")\n        .readFileSync(require(\"path\")\n            .resolve(__dirname,
        \"input\"), \"utf8\");\n    \n    console.log(input.split(\"\\n\")\n        .map(x
        =&gt; parseInt(x)).slice(0, -1)\n        .reduce((acc, curr) =&gt; acc + curr,
        0));\n\n&amp;#x200B;\n\nPart 2:\n\n    const input = require(\"fs\")\n        .readFileSync(require(\"path\")\n            .resolve(__dirname,
        \"input\"), \"utf8\");\n    \n    const freqChanges = input.split(\"\\n\")\n        .map(x
        =&gt; parseInt(x)).slice(0, -1);\n    \n    const baseFreqs = freqChanges.reduce((acc,
        curr) =&gt; {\n        const newFreq = acc[acc.length - 1] + curr;\n        acc.push(newFreq);\n        return
        acc;\n    }, [0]);\n    \n    const baseOffset = baseFreqs.pop();\n    \n    let
        minOffset = Infinity;\n    let minIndex = Infinity;\n    let minRepeat = null;\n    for
        (let i = 0; i &lt; baseFreqs.length; i++) {\n        const freqA = baseFreqs[i];\n        for
        (let j = i + 1; j &lt; baseFreqs.length; j++) {\n            const freqB =
        baseFreqs[j];\n            if ((freqA % baseOffset + baseOffset) % baseOffset
        ===\n                (freqB % baseOffset + baseOffset) % baseOffset) {\n                const
        offset = Math.abs(freqA - freqB);\n                if (offset &lt;= minOffset)
        {\n                    const index = baseOffset &gt; 0 ? (freqA &gt; freqB
        ? j : i) : (freqA &gt; freqB ? i : j)\n                    if (offset &lt;
        minOffset || index &lt; minIndex) {\n                        minOffset = offset;\n                        minIndex
        = index;\n                        minRepeat = baseOffset &gt; 0 ? Math.max(freqA,
        freqB) : Math.min(freqA, freqB);\n                    }\n                }\n            }\n        }\n    }\n    \n    console.log(minRepeat);\n\nI
        optimized part 2 since it was running slow by realizing that all you had to
        do was generate the original list of frequencies after applying the frequency
        changes once, then since every repetition of the changes was just going to
        be the same plus some multiple of the offset after completing the changes
        once, I just took the final value and checked which pairs in the list of generated
        frequencies were offset by each other by a multiple of that final offset and
        took the upper number from the pair that was closest together in the list.",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Javascript&lt;/h1&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const input = require(&amp;quot;fs&amp;quot;)\n    .readFileSync(require(&amp;quot;path&amp;quot;)\n        .resolve(__dirname,
        &amp;quot;input&amp;quot;), &amp;quot;utf8&amp;quot;);\n\nconsole.log(input.split(&amp;quot;\\n&amp;quot;)\n    .map(x
        =&amp;gt; parseInt(x)).slice(0, -1)\n    .reduce((acc, curr) =&amp;gt; acc
        + curr, 0));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const input = require(&amp;quot;fs&amp;quot;)\n    .readFileSync(require(&amp;quot;path&amp;quot;)\n        .resolve(__dirname,
        &amp;quot;input&amp;quot;), &amp;quot;utf8&amp;quot;);\n\nconst freqChanges
        = input.split(&amp;quot;\\n&amp;quot;)\n    .map(x =&amp;gt; parseInt(x)).slice(0,
        -1);\n\nconst baseFreqs = freqChanges.reduce((acc, curr) =&amp;gt; {\n    const
        newFreq = acc[acc.length - 1] + curr;\n    acc.push(newFreq);\n    return
        acc;\n}, [0]);\n\nconst baseOffset = baseFreqs.pop();\n\nlet minOffset = Infinity;\nlet
        minIndex = Infinity;\nlet minRepeat = null;\nfor (let i = 0; i &amp;lt; baseFreqs.length;
        i++) {\n    const freqA = baseFreqs[i];\n    for (let j = i + 1; j &amp;lt;
        baseFreqs.length; j++) {\n        const freqB = baseFreqs[j];\n        if
        ((freqA % baseOffset + baseOffset) % baseOffset ===\n            (freqB %
        baseOffset + baseOffset) % baseOffset) {\n            const offset = Math.abs(freqA
        - freqB);\n            if (offset &amp;lt;= minOffset) {\n                const
        index = baseOffset &amp;gt; 0 ? (freqA &amp;gt; freqB ? j : i) : (freqA &amp;gt;
        freqB ? i : j)\n                if (offset &amp;lt; minOffset || index &amp;lt;
        minIndex) {\n                    minOffset = offset;\n                    minIndex
        = index;\n                    minRepeat = baseOffset &amp;gt; 0 ? Math.max(freqA,
        freqB) : Math.min(freqA, freqB);\n                }\n            }\n        }\n    }\n}\n\nconsole.log(minRepeat);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I
        optimized part 2 since it was running slow by realizing that all you had to
        do was generate the original list of frequencies after applying the frequency
        changes once, then since every repetition of the changes was just going to
        be the same plus some multiple of the offset after completing the changes
        once, I just took the final value and checked which pairs in the list of generated
        frequencies were offset by each other by a multiple of that final offset and
        took the upper number from the pair that was closest together in the list.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauaetp/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauaetp", "created":
        1543647808.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaubzii",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "oantolin",
        "can_mod_post": false, "created_utc": 1543650515.0, "send_replies": true,
        "parent_id": "t1_eauaetp", "score": 3, "author_fullname": "t2_3fxjo", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I think this doesn''t always work: by minimizing `Math.abs(freqA - freqB)`,
        you are minimizing the number of full cycles before the repetition, but in
        case of a tie, you need to break it by using *where* in the cycle the repetition
        happens.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        think this doesn&amp;#39;t always work: by minimizing &lt;code&gt;Math.abs(freqA
        - freqB)&lt;/code&gt;, you are minimizing the number of full cycles before
        the repetition, but in case of a tie, you need to break it by using &lt;em&gt;where&lt;/em&gt;
        in the cycle the repetition happens.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaubzii/", "subreddit_type":
        "public", "locked": false, "name": "t1_eaubzii", "created": 1543650515.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "more", "data": {"count": 1, "name":
        "t1_eaudg7t", "id": "eaudg7t", "parent_id": "t1_eaubzii", "depth": 2, "children":
        ["eaudg7t"]}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "edited": false, "mod_reason_by":
        null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eaubthe", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "oantolin",
        "can_mod_post": false, "created_utc": 1543650211.0, "send_replies": true,
        "parent_id": "t1_eauaetp", "score": 2, "author_fullname": "t2_3fxjo", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "TIL JavaScript''s `a%b` doesn''t return a number between 0 and `b-1` if `a&lt;0`.
        That''s crazy.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;TIL
        JavaScript&amp;#39;s &lt;code&gt;a%b&lt;/code&gt; doesn&amp;#39;t return a
        number between 0 and &lt;code&gt;b-1&lt;/code&gt; if &lt;code&gt;a&amp;lt;0&lt;/code&gt;.
        That&amp;#39;s crazy.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaubthe/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaubthe", "created":
        1543650211.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaudj0w",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Jimpi27",
        "can_mod_post": false, "created_utc": 1543653249.0, "send_replies": true,
        "parent_id": "t1_eaubthe", "score": 3, "author_fullname": "t2_biccd", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "It''s cause % in javascript means remainder, not modulo like in some other
        languages. It''s a perfectly fine implementation of remainder (since remainder
        is just the amount left over after dividing one number into another as much
        as possible), but I wish js had both remainder and modulo functions since
        modulo is also quite useful, like in this case.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;It&amp;#39;s cause % in javascript means remainder,
        not modulo like in some other languages. It&amp;#39;s a perfectly fine implementation
        of remainder (since remainder is just the amount left over after dividing
        one number into another as much as possible), but I wish js had both remainder
        and modulo functions since modulo is also quite useful, like in this case.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaudj0w/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaudj0w", "created":
        1543653249.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaudc2r",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "chunes",
        "can_mod_post": false, "created_utc": 1543652908.0, "send_replies": true,
        "parent_id": "t1_eaubthe", "score": 2, "author_fullname": "t2_7ybf8", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Languages are incredibly inconsistent with this.\n\nA lot of them have another
        function, often called `rem()` or `remainder()`, that performs the complement
        behavior to `%` for negative numbers.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Languages are incredibly inconsistent with this.&lt;/p&gt;\n\n&lt;p&gt;A
        lot of them have another function, often called &lt;code&gt;rem()&lt;/code&gt;
        or &lt;code&gt;remainder()&lt;/code&gt;, that performs the complement behavior
        to &lt;code&gt;%&lt;/code&gt; for negative numbers.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaudc2r/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaudc2r", "created":
        1543652908.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_eaucowc", "id": "eaucowc", "parent_id":
        "t1_eaubthe", "depth": 2, "children": ["eaucowc"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauaryw",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Ryuujinx",
        "can_mod_post": false, "created_utc": 1543648401.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_4rw7v", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Trying to learn Go, so trying it out in that this year. \n\nCode on GH: https://github.com/Ryuujinx/aoc2018/tree/master/day1",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Trying to learn Go,
        so trying it out in that this year. &lt;/p&gt;\n\n&lt;p&gt;Code on GH: &lt;a
        href=\"https://github.com/Ryuujinx/aoc2018/tree/master/day1\"&gt;https://github.com/Ryuujinx/aoc2018/tree/master/day1&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauaryw/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauaryw", "created":
        1543648401.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543684588.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eauas22", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "fourgbram",
        "can_mod_post": false, "created_utc": 1543648405.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_7gvrn", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Kotlin:\n\n**Part One:**\n\n\n```\n    fun partOne(input: String): Int =
        input.split(\"\\n\").map { it.toIntOrNull() ?: 0 }.sum()\n```\n\n**Part Two:**\n\n    fun
        partTwo(input: String): Int {\n            val lines = input.split(\"\\n\").map
        { it.toIntOrNull() ?: 0 }\n            val frequencies = mutableSetOf&lt;Int&gt;()\n\n            var
        frequency = 0\n            for (i in 0..Int.MAX_VALUE) {\n                frequency
        += lines[i % lines.count()]\n                if (!frequencies.add(frequency))
        break\n            }\n            return frequency\n      }", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Kotlin:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Part
        One:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\n    fun partOne(input:
        String): Int = input.split(&amp;quot;\\n&amp;quot;).map { it.toIntOrNull()
        ?: 0 }.sum()\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Part Two:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fun
        partTwo(input: String): Int {\n        val lines = input.split(&amp;quot;\\n&amp;quot;).map
        { it.toIntOrNull() ?: 0 }\n        val frequencies = mutableSetOf&amp;lt;Int&amp;gt;()\n\n        var
        frequency = 0\n        for (i in 0..Int.MAX_VALUE) {\n            frequency
        += lines[i % lines.count()]\n            if (!frequencies.add(frequency))
        break\n        }\n        return frequency\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauas22/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauas22", "created":
        1543648405.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauyxo1",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "djbft",
        "can_mod_post": false, "created_utc": 1543680704.0, "send_replies": true,
        "parent_id": "t1_eauas22", "score": 2, "author_fullname": "t2_7abuh", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "`Set.add` returns false if the item was already in the list, so you can just
        do `if(!frequencies.add(frequency) break `", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;code&gt;Set.add&lt;/code&gt; returns false if
        the item was already in the list, so you can just do &lt;code&gt;if(!frequencies.add(frequency)
        break&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauyxo1/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauyxo1", "created":
        1543680704.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_eauz8cw", "id": "eauz8cw", "parent_id":
        "t1_eauyxo1", "depth": 2, "children": ["eauz8cw"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaubge7",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "alienpirate5",
        "can_mod_post": false, "created_utc": 1543649561.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_cli3y", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Ruby part 2:\n\n    #!/usr/bin/env ruby\n    \n    s = \"\"\n    i = \"\"\n    while
        (i = gets)\n      s += i\n    end\n    \n    a = s.split.map(&amp;:to_i)\n    \n    r
        = 0\n    h = Hash.new(0)\n    found = false\n    \n    until found do\n      a.each
        do |i|\n        r += i\n        h[r] += 1\n        if h[r] &gt; 1\n          puts
        r\n          found = true\n          break\n        end\n      end\n    end\n",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ruby part 2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/usr/bin/env
        ruby\n\ns = &amp;quot;&amp;quot;\ni = &amp;quot;&amp;quot;\nwhile (i = gets)\n  s
        += i\nend\n\na = s.split.map(&amp;amp;:to_i)\n\nr = 0\nh = Hash.new(0)\nfound
        = false\n\nuntil found do\n  a.each do |i|\n    r += i\n    h[r] += 1\n    if
        h[r] &amp;gt; 1\n      puts r\n      found = true\n      break\n    end\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaubge7/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaubge7", "created":
        1543649561.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaucq13",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "aurele",
        "can_mod_post": false, "created_utc": 1543651883.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_1w2b", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "In Rust:\n\n    use std::collections::HashSet;\n    use std::iter;\n    \n    fn
        main() {\n        let numbers = include_str!(\"../input\")\n            .lines()\n            .map(|s|
        s.parse::&lt;i32&gt;().unwrap())\n            .collect::&lt;Vec&lt;_&gt;&gt;();\n        println!(\"P1:
        {}\", numbers.iter().sum::&lt;i32&gt;());\n        let mut seen = HashSet::new();\n        let
        mut cur = 0;\n        for n in iter::repeat(&amp;numbers).flat_map(|x| x.iter())
        {\n            cur += *n;\n            if !seen.insert(cur) {\n                break;\n            }\n        }\n        println!(\"P2:
        {}\", cur);\n    }\n", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In
        Rust:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use std::collections::HashSet;\nuse
        std::iter;\n\nfn main() {\n    let numbers = include_str!(&amp;quot;../input&amp;quot;)\n        .lines()\n        .map(|s|
        s.parse::&amp;lt;i32&amp;gt;().unwrap())\n        .collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;();\n    println!(&amp;quot;P1:
        {}&amp;quot;, numbers.iter().sum::&amp;lt;i32&amp;gt;());\n    let mut seen
        = HashSet::new();\n    let mut cur = 0;\n    for n in iter::repeat(&amp;amp;numbers).flat_map(|x|
        x.iter()) {\n        cur += *n;\n        if !seen.insert(cur) {\n            break;\n        }\n    }\n    println!(&amp;quot;P2:
        {}&amp;quot;, cur);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaucq13/", "subreddit_type":
        "public", "locked": false, "name": "t1_eaucq13", "created": 1543651883.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "removal_reason":
        null, "link_id": "t3_a20646", "author_flair_template_id": null, "likes": null,
        "replies": "", "user_reports": [], "saved": false, "id": "eaucqa4", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "[deleted]", "can_mod_post": false, "send_replies":
        true, "parent_id": "t3_a20646", "score": 1, "approved_by": null, "mod_note":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "Going with
        python3 like every other year. First time posting my solutions.\n\n    def
        load_input(filename: str) -&gt; list:\n        with open(filename, ''r'')
        as input_file:\n            data = [int(row.strip()) for row in input_file]\n\n            return
        data\n\n    def solve_a(data: list) -&gt; int:\n        return sum(data)\n\n    def
        solve_b(data: list) -&gt; int:\n        visited = [0]\n        frequency =
        0\n        index = 0\n\n        while True:\n            new_frequency = frequency
        + data[index % len(data)]\n\n            if new_frequency in visited:\n                return
        new_frequency\n            \n            frequency = new_frequency\n            \n            visited.append(new_frequency)\n\n            index
        += 1\n\n    if __name__ == ''__main__'':\n        data = load_input(''2018/day_01/input.txt'')\n\n        #
        Part A tests\n        assert solve_a([1, -2, 3, 1]) == 3\n        assert solve_a([1,
        1, -2]) == 0\n        assert solve_a([-1, -2, -3]) == -6\n\n        # Part
        B tests\n        assert solve_b([1, -2, 3, 1]) == 2\n        assert solve_b([1,
        -1]) == 0\n        assert solve_b([3, 3, 4, -2, -4]) == 10\n        assert
        solve_b([-6, 3, 8, 5, -6]) == 5\n        assert solve_b([7, 7, -2, -7, -4])
        == 14\n\n        answer_a = solve_a(data)\n        answer_b = solve_b(data)\n\n        print(f''Part
        A answer: {answer_a}   Part B answer: {answer_b}'')\n", "awarders": [], "downs":
        0, "author_flair_css_class": null, "name": "t1_eaucqa4", "collapsed": false,
        "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Going
        with python3 like every other year. First time posting my solutions.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        load_input(filename: str) -&amp;gt; list:\n    with open(filename, &amp;#39;r&amp;#39;)
        as input_file:\n        data = [int(row.strip()) for row in input_file]\n\n        return
        data\n\ndef solve_a(data: list) -&amp;gt; int:\n    return sum(data)\n\ndef
        solve_b(data: list) -&amp;gt; int:\n    visited = [0]\n    frequency = 0\n    index
        = 0\n\n    while True:\n        new_frequency = frequency + data[index % len(data)]\n\n        if
        new_frequency in visited:\n            return new_frequency\n\n        frequency
        = new_frequency\n\n        visited.append(new_frequency)\n\n        index
        += 1\n\nif __name__ == &amp;#39;__main__&amp;#39;:\n    data = load_input(&amp;#39;2018/day_01/input.txt&amp;#39;)\n\n    #
        Part A tests\n    assert solve_a([1, -2, 3, 1]) == 3\n    assert solve_a([1,
        1, -2]) == 0\n    assert solve_a([-1, -2, -3]) == -6\n\n    # Part B tests\n    assert
        solve_b([1, -2, 3, 1]) == 2\n    assert solve_b([1, -1]) == 0\n    assert
        solve_b([3, 3, 4, -2, -4]) == 10\n    assert solve_b([-6, 3, 8, 5, -6]) ==
        5\n    assert solve_b([7, 7, -2, -7, -4]) == 14\n\n    answer_a = solve_a(data)\n    answer_b
        = solve_b(data)\n\n    print(f&amp;#39;Part A answer: {answer_a}   Part B
        answer: {answer_b}&amp;#39;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaucqa4/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1543651895.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543651895.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaudrl8",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Philboyd_Studge",
        "can_mod_post": false, "created_utc": 1543653673.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_5xc8m", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "One does not simply *use lambdas for both parts* during advent of code!\n\nJava:\n\n    public
        class Day1 extends AdventOfCode {\n    \n        private List&lt;Integer&gt;
        intInput;\n    \n        public Day1(List&lt;String&gt; input) {\n            super(input);\n        }\n    \n        @Override\n        public
        Object part1() {\n            return intInput.stream()\n                    .mapToInt(x
        -&gt; x) // why, Java, why\n                    .sum();\n    \n        }\n    \n        @Override\n        public
        Object part2() {\n            int f = 0;\n            Set&lt;Integer&gt; seen
        = new HashSet&lt;&gt;();\n            while (true) {\n                for
        (Integer each : intInput) {\n                    f += each;\n                    if
        (!seen.add(f)) {\n                        return f;\n                    }\n                }\n            }\n        }\n    \n        @Override\n        public
        void parse() {\n            intInput = input.stream()\n                    .mapToInt(Integer::parseInt)\n                    .boxed()\n                    .collect(Collectors.toList());\n        }\n    \n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;One does not simply
        &lt;em&gt;use lambdas for both parts&lt;/em&gt; during advent of code!&lt;/p&gt;\n\n&lt;p&gt;Java:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public
        class Day1 extends AdventOfCode {\n\n    private List&amp;lt;Integer&amp;gt;
        intInput;\n\n    public Day1(List&amp;lt;String&amp;gt; input) {\n        super(input);\n    }\n\n    @Override\n    public
        Object part1() {\n        return intInput.stream()\n                .mapToInt(x
        -&amp;gt; x) // why, Java, why\n                .sum();\n\n    }\n\n    @Override\n    public
        Object part2() {\n        int f = 0;\n        Set&amp;lt;Integer&amp;gt; seen
        = new HashSet&amp;lt;&amp;gt;();\n        while (true) {\n            for
        (Integer each : intInput) {\n                f += each;\n                if
        (!seen.add(f)) {\n                    return f;\n                }\n            }\n        }\n    }\n\n    @Override\n    public
        void parse() {\n        intInput = input.stream()\n                .mapToInt(Integer::parseInt)\n                .boxed()\n                .collect(Collectors.toList());\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaudrl8/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaudrl8", "created":
        1543653673.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaudsiw",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Abab9579",
        "can_mod_post": false, "created_utc": 1543653721.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_yqvo8", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Obligatory Spreadsheet solution for Day1 Part2! (O(klnk) when k is the size
        of the given input)\n\n[The solution spreadsheet](https://www.dropbox.com/s/9amou84f00vlhg1/First%20one%20in%20spreadsheet.ods?dl=0)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Obligatory Spreadsheet
        solution for Day1 Part2! (O(klnk) when k is the size of the given input)&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://www.dropbox.com/s/9amou84f00vlhg1/First%20one%20in%20spreadsheet.ods?dl=0\"&gt;The
        solution spreadsheet&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaudsiw/", "subreddit_type":
        "public", "locked": false, "name": "t1_eaudsiw", "created": 1543653721.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eaudut4", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Valefant", "can_mod_post": false, "created_utc":
        1543653829.0, "send_replies": true, "parent_id": "t3_a20646", "score": 1,
        "author_fullname": "t2_idf55oq", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "In Kotlin. Every advice
        is appreciated :-)\n\n&amp;#x200B;\n\n    fun main(args: Array&lt;String&gt;)
        {\n        val lines = File(\"src/day1/input.txt\").readLines()\n        val
        frequencies = lines\n            .map { it.toInt() }\n    \n        frequencies\n            .sum()\n            .let
        { println(\"Puzzle 1: $it\") }\n    \n        val seenFrequencies = mutableSetOf&lt;Int&gt;()\n        var
        initialValue = 0\n        var found = false\n        \n        while (!found)
        {\n            initialValue =\n                frequencies.fold(initialValue)
        { acc, frequency -&gt;\n                    if (seenFrequencies.contains(acc))
        {\n                        println(\"Puzzle 2: $acc\")\n                        found
        = true\n                        return\n                    }\n    \n                    seenFrequencies.add(acc)\n                    acc
        + frequency\n                }\n        }\n    }\n\n&amp;#x200B;", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;In Kotlin. Every advice is appreciated :-)&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fun
        main(args: Array&amp;lt;String&amp;gt;) {\n    val lines = File(&amp;quot;src/day1/input.txt&amp;quot;).readLines()\n    val
        frequencies = lines\n        .map { it.toInt() }\n\n    frequencies\n        .sum()\n        .let
        { println(&amp;quot;Puzzle 1: $it&amp;quot;) }\n\n    val seenFrequencies
        = mutableSetOf&amp;lt;Int&amp;gt;()\n    var initialValue = 0\n    var found
        = false\n\n    while (!found) {\n        initialValue =\n            frequencies.fold(initialValue)
        { acc, frequency -&amp;gt;\n                if (seenFrequencies.contains(acc))
        {\n                    println(&amp;quot;Puzzle 2: $acc&amp;quot;)\n                    found
        = true\n                    return\n                }\n\n                seenFrequencies.add(acc)\n                acc
        + frequency\n            }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaudut4/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaudut4", "created":
        1543653829.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eav0mms",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "djbft",
        "can_mod_post": false, "created_utc": 1543682098.0, "send_replies": true,
        "parent_id": "t1_eaudut4", "score": 2, "author_fullname": "t2_7abuh", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "`Set.add` returns false if the item was already in the list, so you can just
        do `if(!frequencies.add(frequency) println... `\n\nCool use of fold, though",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;code&gt;Set.add&lt;/code&gt;
        returns false if the item was already in the list, so you can just do &lt;code&gt;if(!frequencies.add(frequency)
        println...&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Cool use of fold, though&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eav0mms/",
        "subreddit_type": "public", "locked": false, "name": "t1_eav0mms", "created":
        1543682098.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_eawxwte", "id": "eawxwte", "parent_id":
        "t1_eav0mms", "depth": 2, "children": ["eawxwte"]}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543654451.0, "mod_reason_by": null,
        "banned_by": null, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eaue3dj", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_a20646", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Second year for me. Gave up around day 8 last time, but
        hopefully I can at least try every challenge this year.\n\nPython3\n\n\n    with
        open(''input.txt'', ''r'') as input_file:\n        data = [int(row.strip())
        for row in input_file]\n\n    print(f''Part A answer: {sum(data)}'')\n\n    visited
        = [0]\n    frequency = 0\n    index = 0\n\n    while True:\n        new_frequency
        = frequency + data[index % len(data)]\n\n        if new_frequency in visited:\n            print(f''Part
        B answer: {new_frequency}'')\n            break\n\n        frequency = new_frequency\n\n        visited.append(new_frequency)\n\n        index
        += 1\n\n[Github](https://github.com/JanneJP/Advent-of-Code-2018/blob/master/Challenges/day_01/solution.py)",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_eaue3dj",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Second
        year for me. Gave up around day 8 last time, but hopefully I can at least
        try every challenge this year.&lt;/p&gt;\n\n&lt;p&gt;Python3&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with
        open(&amp;#39;input.txt&amp;#39;, &amp;#39;r&amp;#39;) as input_file:\n    data
        = [int(row.strip()) for row in input_file]\n\nprint(f&amp;#39;Part A answer:
        {sum(data)}&amp;#39;)\n\nvisited = [0]\nfrequency = 0\nindex = 0\n\nwhile
        True:\n    new_frequency = frequency + data[index % len(data)]\n\n    if new_frequency
        in visited:\n        print(f&amp;#39;Part B answer: {new_frequency}&amp;#39;)\n        break\n\n    frequency
        = new_frequency\n\n    visited.append(new_frequency)\n\n    index += 1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/JanneJP/Advent-of-Code-2018/blob/master/Challenges/day_01/solution.py\"&gt;Github&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaue3dj/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1543654227.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543654227.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauei50",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "captainkari",
        "can_mod_post": false, "created_utc": 1543654890.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_141bh5", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Solution in Ruby for part one:\n\n`santa = Array[] #I put my array here in
        plain text, not going to do that on reddit though`\n\n`curntfrq = 0`  \n`santa.each
        do |n|`  \n`curntfrq += n`  \n`end`  \n`print \"\\n\\n#{curntfrq}\"`\n\nSolution
        for part 2:\n\n`santa = Array[]`\n\n`freq = Array[]`  \n   `curntfrq = 0`\n\n`match
        = 0`  \n`interations = 0`  \n`while (match == 0)`  \n  `santa.each do |n|`  \n`curntfrq
        += n`  \n`freq.each do |t|`  \n `if (t == curntfrq)`  \n`match = curntfrq`  \n
        `break`  \n `end`  \n `end`  \n`freq &lt;&lt; curntfrq`  \n `end`  \n  `print
        \"#{interations+=1}, \"`  \n`end`  \n`print \"\\n\\n#{match}\"`\n\n(pardon
        formatting issues, idk how to do formatting and it''s 4am)", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Solution in Ruby for part one:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;santa
        = Array[] #I put my array here in plain text, not going to do that on reddit
        though&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;curntfrq = 0&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;santa.each
        do |n|&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;curntfrq += n&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;end&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;print
        &amp;quot;\\n\\n#{curntfrq}&amp;quot;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Solution
        for part 2:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;santa = Array[]&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;freq
        = Array[]&lt;/code&gt;&lt;br/&gt;\n   &lt;code&gt;curntfrq = 0&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;match
        = 0&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;interations = 0&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;while
        (match == 0)&lt;/code&gt;&lt;br/&gt;\n  &lt;code&gt;santa.each do |n|&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;curntfrq
        += n&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;freq.each do |t|&lt;/code&gt;&lt;br/&gt;\n
        &lt;code&gt;if (t == curntfrq)&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;match
        = curntfrq&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;break&lt;/code&gt;&lt;br/&gt;\n
        &lt;code&gt;end&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;end&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;freq
        &amp;lt;&amp;lt; curntfrq&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;end&lt;/code&gt;&lt;br/&gt;\n  &lt;code&gt;print
        &amp;quot;#{interations+=1}, &amp;quot;&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;end&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;print
        &amp;quot;\\n\\n#{match}&amp;quot;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;(pardon
        formatting issues, idk how to do formatting and it&amp;#39;s 4am)&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauei50/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauei50", "created":
        1543654890.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_eauhjk2", "id": "eauhjk2", "parent_id":
        "t1_eauei50", "depth": 1, "children": ["eauhjk2"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauekk3",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "6dNx1RSd2WNgUDHHo8FS",
        "can_mod_post": false, "created_utc": 1543655005.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_mmm9vok", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Solution in Julia\n\n    using DelimitedFiles\n    parta() = println(\"a:
        \", sum(readdlm(\"input\")))\n\n    function partb()\n        input = Int.(readdlm(\"input\")[:])\n        freqs
        = Set(0)\n        freq = 0\n        for change in Iterators.cycle(input)\n            freq
        += change\n            if freq in freqs\n                println(\"b: $freq\")\n                break\n            end\n            push!(freqs,
        freq)\n        end\n    end\n    parta()\n    partb()", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Solution in Julia&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;using
        DelimitedFiles\nparta() = println(&amp;quot;a: &amp;quot;, sum(readdlm(&amp;quot;input&amp;quot;)))\n\nfunction
        partb()\n    input = Int.(readdlm(&amp;quot;input&amp;quot;)[:])\n    freqs
        = Set(0)\n    freq = 0\n    for change in Iterators.cycle(input)\n        freq
        += change\n        if freq in freqs\n            println(&amp;quot;b: $freq&amp;quot;)\n            break\n        end\n        push!(freqs,
        freq)\n    end\nend\nparta()\npartb()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauekk3/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauekk3", "created":
        1543655005.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543657991.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eaufze2", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "windlessStorm",
        "can_mod_post": false, "created_utc": 1543657585.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_odygn", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Learning Go. Inputs appreciated :D \n\n\tpackage main\n\n\timport (\n\t\t\"bufio\"\n\t\t\"fmt\"\n\t\t\"os\"\n\t\t\"strconv\"\n\t)\n\n\t/*
        path of file containing puzzle input*/\n\tconst inputFile string = \"input1.txt\"\n\n\tfunc
        check(e error) {\n\t\tif e != nil {\n\t\t\tpanic(e)\n\t\t}\n\t}\n\n\tfunc
        readLines(path string) ([]string, error) {\n\t\tfile, err := os.Open(path)\n\t\tif
        err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tdefer file.Close()\n\n\t\tvar
        lines []string\n\t\tscanner := bufio.NewScanner(file)\n\n\t\tfor scanner.Scan()
        {\n\t\t\tlines = append(lines, scanner.Text())\n\t\t}\n\n\t\treturn lines,
        scanner.Err()\n\t}\n\n\tfunc calculateFinalFrequency(lines []string, initialFrequency
        int) int {\n\t\tcurrentFrequency := initialFrequency\n\t\tfor i := range lines
        {\n\t\t\tfrequencyDrift, err := strconv.Atoi(lines[i])\n\t\t\tcheck(err)\n\t\t\tcurrentFrequency
        += frequencyDrift\n\t\t}\n\n\t\treturn currentFrequency\n\t}\n\n\tfunc findFirstRepeatingFrequency(lines
        []string, initialFrequency int) (int, bool) {\n\t\t/* make a map of integers,
        integer key-value. Will store freq count of sums in each steps */\n\t\thistory
        := make(map[int]int, 0)\n\n\t\tcurrentFrequency := initialFrequency\n\t\tfound
        := false\n\n\t\ti := 0\n\t\tfor i &lt; len(lines) { /* loop till the end of
        the frequency change list*/\n\t\t\tfrequencyDrift, err := strconv.Atoi(lines[i])\n\t\t\tcheck(err)\n\t\t\tif
        len(lines[i]) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tcurrentFrequency
        += frequencyDrift\n\n\t\t\thistory[currentFrequency]++\n\t\t\tif history[currentFrequency]
        == 2 { /* Found our first repeating sum! break out and return */\n\t\t\t\tfound
        = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif i == (len(lines) - 1) { /* restart
        the loop until we get our repeating sum */\n\t\t\t\ti = 0\n\t\t\t} else {\n\t\t\t\ti++\n\t\t\t}\n\t\t}\n\n\t\treturn
        currentFrequency, found\n\t}\n\n\tfunc main() {\n\t\tlines, err := readLines(inputFile)\n\t\tcheck(err)\n\t\tfmt.Println(\"Resulting
        frequency after all fluctuations: \", calculateFinalFrequency(lines, 0))\n\t\tfirstRepeatingFrequency,
        found := findFirstRepeatingFrequency(lines, 0)\n\t\tif found {\n\t\t\tfmt.Println(\"Correct
        frequency after callibration: \", firstRepeatingFrequency)\n\t\t} else {\n\t\t\tfmt.Println(\"No
        repeating numbers\")\n\t\t}\n\t}\n", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Learning Go. Inputs appreciated :D &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package
        main\n\nimport (\n    &amp;quot;bufio&amp;quot;\n    &amp;quot;fmt&amp;quot;\n    &amp;quot;os&amp;quot;\n    &amp;quot;strconv&amp;quot;\n)\n\n/*
        path of file containing puzzle input*/\nconst inputFile string = &amp;quot;input1.txt&amp;quot;\n\nfunc
        check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}\n\nfunc readLines(path
        string) ([]string, error) {\n    file, err := os.Open(path)\n    if err !=
        nil {\n        return nil, err\n    }\n    defer file.Close()\n\n    var lines
        []string\n    scanner := bufio.NewScanner(file)\n\n    for scanner.Scan()
        {\n        lines = append(lines, scanner.Text())\n    }\n\n    return lines,
        scanner.Err()\n}\n\nfunc calculateFinalFrequency(lines []string, initialFrequency
        int) int {\n    currentFrequency := initialFrequency\n    for i := range lines
        {\n        frequencyDrift, err := strconv.Atoi(lines[i])\n        check(err)\n        currentFrequency
        += frequencyDrift\n    }\n\n    return currentFrequency\n}\n\nfunc findFirstRepeatingFrequency(lines
        []string, initialFrequency int) (int, bool) {\n    /* make a map of integers,
        integer key-value. Will store freq count of sums in each steps */\n    history
        := make(map[int]int, 0)\n\n    currentFrequency := initialFrequency\n    found
        := false\n\n    i := 0\n    for i &amp;lt; len(lines) { /* loop till the end
        of the frequency change list*/\n        frequencyDrift, err := strconv.Atoi(lines[i])\n        check(err)\n        if
        len(lines[i]) == 0 {\n            continue\n        }\n\n        currentFrequency
        += frequencyDrift\n\n        history[currentFrequency]++\n        if history[currentFrequency]
        == 2 { /* Found our first repeating sum! break out and return */\n            found
        = true\n            break\n        }\n        if i == (len(lines) - 1) { /*
        restart the loop until we get our repeating sum */\n            i = 0\n        }
        else {\n            i++\n        }\n    }\n\n    return currentFrequency,
        found\n}\n\nfunc main() {\n    lines, err := readLines(inputFile)\n    check(err)\n    fmt.Println(&amp;quot;Resulting
        frequency after all fluctuations: &amp;quot;, calculateFinalFrequency(lines,
        0))\n    firstRepeatingFrequency, found := findFirstRepeatingFrequency(lines,
        0)\n    if found {\n        fmt.Println(&amp;quot;Correct frequency after
        callibration: &amp;quot;, firstRepeatingFrequency)\n    } else {\n        fmt.Println(&amp;quot;No
        repeating numbers&amp;quot;)\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaufze2/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaufze2", "created":
        1543657585.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543659997.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eauh689", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daedius",
        "can_mod_post": false, "created_utc": 1543659687.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_2ocej", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Rust user. I am confused why this works:\n\n    use std::collections::HashSet;\n    use
        std::env;\n    use std::fs::File;\n    use std::io::{BufRead, BufReader};\n    \n    fn
        main() {\n        let mut numset = HashSet::new();\n    \n        let mut
        freq = 0;\n    \n        numset.insert(0);\n    \n        let args: Vec&lt;String&gt;
        = env::args().collect();\n    \n        ''outer: loop {\n            let file
        = BufReader::new(File::open(&amp;args[1]).unwrap());\n    \n            for
        line in file.lines() {\n                let l = line.unwrap();\n    \n                let
        num = l.parse::&lt;i32&gt;().unwrap();\n    \n                freq += num;\n    \n                if
        !numset.insert(freq) {\n                    println!(\"dupe found {}\", freq);\n    \n                    break
        ''outer;\n                }\n            }\n        }\n    }\n\nbut this infinite
        loops ( even though it solves short list inputs )\n\n    use std::env;\n    use
        std::io::{BufRead, BufReader};\n    use std::fs::File;\n    \n    fn main()
        {\n        let mut seen_freq = Vec::new();\n        let mut freq = 0;\n        seen_freq.push(0);\n        let
        args: Vec&lt;String&gt; = env::args().collect();\n    \n        ''outer:loop
        {\n            let file = BufReader::new(File::open(&amp;args[1]).unwrap());\n            for
        line in file.lines() {\n                let l = line.unwrap();\n                let
        num = l.parse::&lt;i32&gt;().unwrap();\n                freq += num;\n                if
        seen_freq.iter().any(|&amp;x| x==freq) {\n                    println!(\"dupe
        found {}\", freq);\n                    break ''outer;\n                }\n                seen_freq.push(freq);\n            }\n        }\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Rust user. I am confused
        why this works:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use std::collections::HashSet;\nuse
        std::env;\nuse std::fs::File;\nuse std::io::{BufRead, BufReader};\n\nfn main()
        {\n    let mut numset = HashSet::new();\n\n    let mut freq = 0;\n\n    numset.insert(0);\n\n    let
        args: Vec&amp;lt;String&amp;gt; = env::args().collect();\n\n    &amp;#39;outer:
        loop {\n        let file = BufReader::new(File::open(&amp;amp;args[1]).unwrap());\n\n        for
        line in file.lines() {\n            let l = line.unwrap();\n\n            let
        num = l.parse::&amp;lt;i32&amp;gt;().unwrap();\n\n            freq += num;\n\n            if
        !numset.insert(freq) {\n                println!(&amp;quot;dupe found {}&amp;quot;,
        freq);\n\n                break &amp;#39;outer;\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;but
        this infinite loops ( even though it solves short list inputs )&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use
        std::env;\nuse std::io::{BufRead, BufReader};\nuse std::fs::File;\n\nfn main()
        {\n    let mut seen_freq = Vec::new();\n    let mut freq = 0;\n    seen_freq.push(0);\n    let
        args: Vec&amp;lt;String&amp;gt; = env::args().collect();\n\n    &amp;#39;outer:loop
        {\n        let file = BufReader::new(File::open(&amp;amp;args[1]).unwrap());\n        for
        line in file.lines() {\n            let l = line.unwrap();\n            let
        num = l.parse::&amp;lt;i32&amp;gt;().unwrap();\n            freq += num;\n            if
        seen_freq.iter().any(|&amp;amp;x| x==freq) {\n                println!(&amp;quot;dupe
        found {}&amp;quot;, freq);\n                break &amp;#39;outer;\n            }\n            seen_freq.push(freq);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauh689/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauh689", "created":
        1543659687.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543701529.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eavovmk", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "tclent",
        "can_mod_post": false, "created_utc": 1543700918.0, "send_replies": true,
        "parent_id": "t1_eauh689", "score": 2, "author_fullname": "t2_2pd8vmg5", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Your second solution is not actually infinitely looping! It does eventually
        get the right answer after enough time. The problem is for each frequency
        change you iterate through every already seen frequency, which with enough
        already seen frequencies becomes very slow.\n\nIn Big O notation your first
        solution is O(n): for each of the n frequency changes before a duplicate is
        found it checks if the current frequency is in the HashSet of seen frequencies.
        Checking a HashSet is very quick and can be considered to take 1 instruction
        (O(1)). This takes (on the order of) n \\* 1 = n instructions.\n\nYour second
        solution is O(n^(2)): for each of the n frequency changes before a duplicate
        is found it compares the current frequency to each of the already seen frequencies
        (which in the worst case would be n - 1 other frequencies). This takes (on
        the order of) n \\* n = n^(2) instructions.\n\nYour second solution scales
        much worse with an increase in n.\n\nTo see this first hand (and this is how
        I realized it wasn''t infinitely looping myself), you could run this modified
        version of your first solution to get the number of frequency changes before
        the duplicate appears (which would be unique to your specific input file):\n\n    use
        std::collections::HashSet;\n    use std::env;\n    use std::fs::File;\n    use
        std::io::{BufRead, BufReader};\n    \n    fn main() {\n        let mut numset
        = HashSet::new();\n        let mut freq = 0;\n        numset.insert(0);\n        let
        args: Vec&lt;String&gt; = env::args().collect();\n        let mut count =
        0;\n        ''outer: loop {\n            let file = BufReader::new(File::open(&amp;args[1]).unwrap());\n            for
        line in file.lines() {\n                let l = line.unwrap();\n                let
        num = l.parse::&lt;i32&gt;().unwrap();\n                freq += num;\n                count
        += 1;\n                if !numset.insert(freq) {\n                    println!(\"dupe
        found {} after {} changes\", freq, count);\n                    break ''outer;\n                }\n            }\n        }\n    }\n\nAnd
        then run this modified version of your second solution that will print its
        progress as it goes. It should give you the correct answer when it reaches
        the change count given by the above code, and you can see it get progressively
        slower as seen\\_freq contains more and more past frequencies:\n\n    use
        std::env;\n    use std::fs::File;\n    use std::io::{BufRead, BufReader};\n    \n    fn
        main() {\n        let mut seen_freq = Vec::new();\n        let mut freq =
        0;\n        seen_freq.push(0);\n        let args: Vec&lt;String&gt; = env::args().collect();\n    \n        let
        mut count = 0;\n        ''outer: loop {\n            let file = BufReader::new(File::open(&amp;args[1]).unwrap());\n            for
        line in file.lines() {\n                let l = line.unwrap();\n                let
        num = l.parse::&lt;i32&gt;().unwrap();\n                if count % 1000 ==
        0 {\n                    println!(\"{}\", count);\n                }\n                freq
        += num;\n                if seen_freq.iter().any(|&amp;x| x == freq) {\n                    println!(\"dupe
        found {}\", freq);\n                    break ''outer;\n                }\n                seen_freq.push(freq);\n                count
        += 1;\n            }\n        }\n    }\n\n&amp;#x200B;", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Your second solution is not actually infinitely looping!
        It does eventually get the right answer after enough time. The problem is
        for each frequency change you iterate through every already seen frequency,
        which with enough already seen frequencies becomes very slow.&lt;/p&gt;\n\n&lt;p&gt;In
        Big O notation your first solution is O(n): for each of the n frequency changes
        before a duplicate is found it checks if the current frequency is in the HashSet
        of seen frequencies. Checking a HashSet is very quick and can be considered
        to take 1 instruction (O(1)). This takes (on the order of) n * 1 = n instructions.&lt;/p&gt;\n\n&lt;p&gt;Your
        second solution is O(n&lt;sup&gt;2&lt;/sup&gt;): for each of the n frequency
        changes before a duplicate is found it compares the current frequency to each
        of the already seen frequencies (which in the worst case would be n - 1 other
        frequencies). This takes (on the order of) n * n = n&lt;sup&gt;2&lt;/sup&gt;
        instructions.&lt;/p&gt;\n\n&lt;p&gt;Your second solution scales much worse
        with an increase in n.&lt;/p&gt;\n\n&lt;p&gt;To see this first hand (and this
        is how I realized it wasn&amp;#39;t infinitely looping myself), you could
        run this modified version of your first solution to get the number of frequency
        changes before the duplicate appears (which would be unique to your specific
        input file):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use std::collections::HashSet;\nuse
        std::env;\nuse std::fs::File;\nuse std::io::{BufRead, BufReader};\n\nfn main()
        {\n    let mut numset = HashSet::new();\n    let mut freq = 0;\n    numset.insert(0);\n    let
        args: Vec&amp;lt;String&amp;gt; = env::args().collect();\n    let mut count
        = 0;\n    &amp;#39;outer: loop {\n        let file = BufReader::new(File::open(&amp;amp;args[1]).unwrap());\n        for
        line in file.lines() {\n            let l = line.unwrap();\n            let
        num = l.parse::&amp;lt;i32&amp;gt;().unwrap();\n            freq += num;\n            count
        += 1;\n            if !numset.insert(freq) {\n                println!(&amp;quot;dupe
        found {} after {} changes&amp;quot;, freq, count);\n                break
        &amp;#39;outer;\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And
        then run this modified version of your second solution that will print its
        progress as it goes. It should give you the correct answer when it reaches
        the change count given by the above code, and you can see it get progressively
        slower as seen_freq contains more and more past frequencies:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use
        std::env;\nuse std::fs::File;\nuse std::io::{BufRead, BufReader};\n\nfn main()
        {\n    let mut seen_freq = Vec::new();\n    let mut freq = 0;\n    seen_freq.push(0);\n    let
        args: Vec&amp;lt;String&amp;gt; = env::args().collect();\n\n    let mut count
        = 0;\n    &amp;#39;outer: loop {\n        let file = BufReader::new(File::open(&amp;amp;args[1]).unwrap());\n        for
        line in file.lines() {\n            let l = line.unwrap();\n            let
        num = l.parse::&amp;lt;i32&amp;gt;().unwrap();\n            if count % 1000
        == 0 {\n                println!(&amp;quot;{}&amp;quot;, count);\n            }\n            freq
        += num;\n            if seen_freq.iter().any(|&amp;amp;x| x == freq) {\n                println!(&amp;quot;dupe
        found {}&amp;quot;, freq);\n                break &amp;#39;outer;\n            }\n            seen_freq.push(freq);\n            count
        += 1;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavovmk/",
        "subreddit_type": "public", "locked": false, "name": "t1_eavovmk", "created":
        1543700918.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eavtaso",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "daedius",
        "can_mod_post": false, "created_utc": 1543704401.0, "send_replies": true,
        "parent_id": "t1_eavovmk", "score": 2, "author_fullname": "t2_2ocej", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Thanks man! I was wondering if it was something like that :)", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks man! I was wondering if it was something
        like that :)&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavtaso/",
        "subreddit_type": "public", "locked": false, "name": "t1_eavtaso", "created":
        1543704401.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543662235.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eauhf9p", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "DaDiscoBeat",
        "can_mod_post": false, "created_utc": 1543660141.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_107hwl", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Java:\n\n    public class Main {\n        static public void main(String[]
        args) {\n            partOne();\n            partTwo();\n        }\n\n        static
        private void partOne() {\n            List&lt;Integer&gt; ints = readInput(\"Day
        1 - Input part one.txt\");\n            int result = ints.stream().mapToInt(Integer::intValue).sum();\n            System.out.println(\"Part
        one result: \" + result);\n        }\n    \n        static private void partTwo(){\n            List&lt;Integer&gt;
        ints = readInput(\"Day 1 - Input part two.txt\");\n            Set&lt;Integer&gt;
        m = new HashSet&lt;&gt;();\n            int i = 0;\n            int sum =
        0;\n            while(m.add(sum)) {\n                sum += ints.get(i);\n                i
        = (i+1)%ints.size();\n            };\n    \n            System.out.println(\"Part
        two result: \" + sum);\n        }\n    \n        static private List&lt;Integer&gt;
        readInput(String filename){\n            List&lt;Integer&gt; result = new
        ArrayList&lt;&gt;();\n            try {\n                Path p = Paths.get(filename);\n                List&lt;String&gt;
        input = Files.readAllLines(p);\n                input.stream().map(Integer::valueOf).forEach(result::add);\n            }
        catch(IOException e) {\n                e.printStackTrace();\n            }
        \n            return result;\n        }\n    }", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Java:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public
        class Main {\n    static public void main(String[] args) {\n        partOne();\n        partTwo();\n    }\n\n    static
        private void partOne() {\n        List&amp;lt;Integer&amp;gt; ints = readInput(&amp;quot;Day
        1 - Input part one.txt&amp;quot;);\n        int result = ints.stream().mapToInt(Integer::intValue).sum();\n        System.out.println(&amp;quot;Part
        one result: &amp;quot; + result);\n    }\n\n    static private void partTwo(){\n        List&amp;lt;Integer&amp;gt;
        ints = readInput(&amp;quot;Day 1 - Input part two.txt&amp;quot;);\n        Set&amp;lt;Integer&amp;gt;
        m = new HashSet&amp;lt;&amp;gt;();\n        int i = 0;\n        int sum =
        0;\n        while(m.add(sum)) {\n            sum += ints.get(i);\n            i
        = (i+1)%ints.size();\n        };\n\n        System.out.println(&amp;quot;Part
        two result: &amp;quot; + sum);\n    }\n\n    static private List&amp;lt;Integer&amp;gt;
        readInput(String filename){\n        List&amp;lt;Integer&amp;gt; result =
        new ArrayList&amp;lt;&amp;gt;();\n        try {\n            Path p = Paths.get(filename);\n            List&amp;lt;String&amp;gt;
        input = Files.readAllLines(p);\n            input.stream().map(Integer::valueOf).forEach(result::add);\n        }
        catch(IOException e) {\n            e.printStackTrace();\n        } \n        return
        result;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauhf9p/", "subreddit_type":
        "public", "locked": false, "name": "t1_eauhf9p", "created": 1543660141.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eauhq2q", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "CCC_037", "can_mod_post": false, "created_utc":
        1543660702.0, "send_replies": true, "parent_id": "t3_a20646", "score": 1,
        "author_fullname": "t2_b1sp7", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "A lot of people have posted
        solutions to Part 2 that run through the list of inputs multiple times. And
        I can see why - my original solution, the one that I used to generate the
        number I entered on the site, did exactly that.\n\nBut a little further thought
        showed that it''s not necessary. Knowing the total from part 1 (solved with
        copy-paste, emacs to get rid of the end-of-lines, and bc) allows you to find
        the solution after running through the entire list *once*.\n\nI''m not defining
        INPUTS and TOTAL in the following code; to run it, you''ll need to \\#define
        INPUTS as the number of lines in your input file and TOTAL as your answer
        from part 1. Aside from that, there''s probably a dozen ways to improve the
        code. (For one thing, there''s the implicit assumption that your total from
        Part 1 is positive; if your total from Part 1 is negative, you''ll need to
        make some slight adjustments). But it does only parse the list of inputs once
        and gets the same answer for positive TOTAL...\n\n     #include &lt;iostream&gt;\n    using
        namespace std;\n    \n    int main()\n    {\n      int Mods[INPUTS] = {0};\n      int
        Checks[INPUTS] = {0};\n      int BestRound, NumInRound, MatchingNum, ThisRound;\n      int
        Total = 0;\n      int Next, Count, InnerCount, OuterCount;\n      BestRound=-1;\n      for
        (Count=0;Count&lt;INPUTS;Count++)\n        {\n          cin &gt;&gt; Next;\n          Total
        += Next;\n          Checks[Count] = Total;\n          Mods[Count] = Total
        % TOTAL;\n          for (InnerCount = 0;InnerCount &lt; Count; InnerCount++)\n    \t{\n    \t  if
        (Checks[InnerCount] == Checks[Count])\n    \t    cout &lt;&lt; Count &lt;&lt;
        \":\" &lt;&lt; InnerCount &lt;&lt; \":\" &lt;&lt; Checks[InnerCount] &lt;&lt;
        endl;\n    \t  if (Mods[InnerCount] == Mods[Count])\n    \t    {\n    \t      ThisRound
        = ((Checks[Count]/TOTAL) - (Checks[InnerCount]/TOTAL));\n    \t      if ((BestRound&lt;0)
        || (ThisRound &lt; BestRound))\n    \t\t{\n    \t\t  BestRound = ((Checks[Count]/TOTAL)
        - (Checks[InnerCount]/TOTAL));\n    \t\t  NumInRound = InnerCount;\n    \t\t  MatchingNum
        = Count;\n    \t\t}\n    \t      else if ((BestRound == ThisRound) &amp;&amp;
        (InnerCount &lt; NumInRound))\n    \t\t{\n    \t\t  NumInRound = InnerCount;\n    \t\t  MatchingNum=
        Count;\n    \t\t}\n    \t    }\n    \t}\n        }\n      cout &lt;&lt; \"Total:\"
        &lt;&lt; Total &lt;&lt; \"Duplicate:\" &lt;&lt; Checks[MatchingNum] &lt;&lt;
        endl;\n    }\n    ", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;A
        lot of people have posted solutions to Part 2 that run through the list of
        inputs multiple times. And I can see why - my original solution, the one that
        I used to generate the number I entered on the site, did exactly that.&lt;/p&gt;\n\n&lt;p&gt;But
        a little further thought showed that it&amp;#39;s not necessary. Knowing the
        total from part 1 (solved with copy-paste, emacs to get rid of the end-of-lines,
        and bc) allows you to find the solution after running through the entire list
        &lt;em&gt;once&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m not defining
        INPUTS and TOTAL in the following code; to run it, you&amp;#39;ll need to
        #define INPUTS as the number of lines in your input file and TOTAL as your
        answer from part 1. Aside from that, there&amp;#39;s probably a dozen ways
        to improve the code. (For one thing, there&amp;#39;s the implicit assumption
        that your total from Part 1 is positive; if your total from Part 1 is negative,
        you&amp;#39;ll need to make some slight adjustments). But it does only parse
        the list of inputs once and gets the same answer for positive TOTAL...&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;
        #include &amp;lt;iostream&amp;gt;\nusing namespace std;\n\nint main()\n{\n  int
        Mods[INPUTS] = {0};\n  int Checks[INPUTS] = {0};\n  int BestRound, NumInRound,
        MatchingNum, ThisRound;\n  int Total = 0;\n  int Next, Count, InnerCount,
        OuterCount;\n  BestRound=-1;\n  for (Count=0;Count&amp;lt;INPUTS;Count++)\n    {\n      cin
        &amp;gt;&amp;gt; Next;\n      Total += Next;\n      Checks[Count] = Total;\n      Mods[Count]
        = Total % TOTAL;\n      for (InnerCount = 0;InnerCount &amp;lt; Count; InnerCount++)\n    {\n      if
        (Checks[InnerCount] == Checks[Count])\n        cout &amp;lt;&amp;lt; Count
        &amp;lt;&amp;lt; &amp;quot;:&amp;quot; &amp;lt;&amp;lt; InnerCount &amp;lt;&amp;lt;
        &amp;quot;:&amp;quot; &amp;lt;&amp;lt; Checks[InnerCount] &amp;lt;&amp;lt;
        endl;\n      if (Mods[InnerCount] == Mods[Count])\n        {\n          ThisRound
        = ((Checks[Count]/TOTAL) - (Checks[InnerCount]/TOTAL));\n          if ((BestRound&amp;lt;0)
        || (ThisRound &amp;lt; BestRound))\n        {\n          BestRound = ((Checks[Count]/TOTAL)
        - (Checks[InnerCount]/TOTAL));\n          NumInRound = InnerCount;\n          MatchingNum
        = Count;\n        }\n          else if ((BestRound == ThisRound) &amp;amp;&amp;amp;
        (InnerCount &amp;lt; NumInRound))\n        {\n          NumInRound = InnerCount;\n          MatchingNum=
        Count;\n        }\n        }\n    }\n    }\n  cout &amp;lt;&amp;lt; &amp;quot;Total:&amp;quot;
        &amp;lt;&amp;lt; Total &amp;lt;&amp;lt; &amp;quot;Duplicate:&amp;quot; &amp;lt;&amp;lt;
        Checks[MatchingNum] &amp;lt;&amp;lt; endl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauhq2q/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauhq2q", "created":
        1543660702.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543666458.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eauhusu", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "CatpainCalamari",
        "can_mod_post": false, "created_utc": 1543660966.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_6ubv69j", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My solution in Scala. I went a little overboard and used much heavier weapons
        than needed, but it was fun :-)\n\n&amp;#x200B;\n\n    package de.calamari.adventofcode.y2018.day1\n    \n    import
        scala.io.Source\n    import scala.util.matching.Regex\n    import scala.util.parsing.combinator.RegexParsers\n    \n    object
        Day1 extends App {\n      val input: List[FrequencyShift] = parseData(getData(\"2018/1/input.txt\"))\n      assert(input.length
        == 1029)\n    \n      assert(sumFrequencyShifts(parseData(\"+1, +1, +1\"))
        == 3)\n      assert(sumFrequencyShifts(parseData(\"+1, +1, -2\")) == 0)\n      assert(sumFrequencyShifts(parseData(\"-1,
        -2, -3\")) == -6)\n    \n      assert(findFirstRevisitedFrequency(parseData(\"+1,
        -1\")) == 0)\n      assert(findFirstRevisitedFrequency(parseData(\"+3, +3,
        +4, -2, -4\")) == 10)\n      assert(findFirstRevisitedFrequency(parseData(\"-6,
        +3, +8, +5, -6\")) == 5)\n      assert(findFirstRevisitedFrequency(parseData(\"+7,
        +7, -2, -7, -4\")) == 14)\n    \n      val firstStar = sumFrequencyShifts(input)\n      println(s\"firstStar:
        $firstStar\")\n      assert(firstStar == 536)\n    \n      val secondStar
        = findFirstRevisitedFrequency(input)\n      println(s\"secondStar: $secondStar\")\n      assert(secondStar
        == 75108)\n    \n      def sumFrequencyShifts(data: List[FrequencyShift]):
        Int = data.foldRight(0){case (fs, acc) \u21d2 acc + fs.shift}\n    \n      def
        findFirstRevisitedFrequency(data: List[FrequencyShift]): Int = {\n    \n        def
        step(partialList: List[FrequencyShift], current: Int, storage: Set[Int]):
        Int = {\n          if (partialList.isEmpty) step(data, current, storage)\n          else
        {\n            val nextFrequency: Int = current + partialList.head.shift\n    \n            if
        (storage.contains(nextFrequency)) nextFrequency\n            else {\n              val
        newStorage = storage + nextFrequency\n              step(partialList.tail,
        nextFrequency, newStorage)\n            }\n          }\n        }\n    \n        step(data,
        0,Set(0))\n      }\n    \n      def getData(path: String): String = Source.fromResource(path).getLines().toList.mkString(\",
        \")\n      def parseData(data: String): List[FrequencyShift] = TextParser.parse(TextParser.freqShifts,
        data).get\n    }\n    \n    case class FrequencyShift(shift: Int)\n    \n    object
        TextParser extends RegexParsers {\n      override val whiteSpace: Regex =
        \"\"\"[\\t ]+\"\"\".r\n    \n      def freqShift: Parser[FrequencyShift] =
        \"[-+][0-9]+\".r ^^ (fs \u21d2 FrequencyShift(fs.toInt))\n      def freqShifts:
        Parser[List[FrequencyShift]] = rep(freqShift &lt;~ \",\".r.?)\n    }\n\n&amp;#x200B;",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My solution in Scala.
        I went a little overboard and used much heavier weapons than needed, but it
        was fun :-)&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package
        de.calamari.adventofcode.y2018.day1\n\nimport scala.io.Source\nimport scala.util.matching.Regex\nimport
        scala.util.parsing.combinator.RegexParsers\n\nobject Day1 extends App {\n  val
        input: List[FrequencyShift] = parseData(getData(&amp;quot;2018/1/input.txt&amp;quot;))\n  assert(input.length
        == 1029)\n\n  assert(sumFrequencyShifts(parseData(&amp;quot;+1, +1, +1&amp;quot;))
        == 3)\n  assert(sumFrequencyShifts(parseData(&amp;quot;+1, +1, -2&amp;quot;))
        == 0)\n  assert(sumFrequencyShifts(parseData(&amp;quot;-1, -2, -3&amp;quot;))
        == -6)\n\n  assert(findFirstRevisitedFrequency(parseData(&amp;quot;+1, -1&amp;quot;))
        == 0)\n  assert(findFirstRevisitedFrequency(parseData(&amp;quot;+3, +3, +4,
        -2, -4&amp;quot;)) == 10)\n  assert(findFirstRevisitedFrequency(parseData(&amp;quot;-6,
        +3, +8, +5, -6&amp;quot;)) == 5)\n  assert(findFirstRevisitedFrequency(parseData(&amp;quot;+7,
        +7, -2, -7, -4&amp;quot;)) == 14)\n\n  val firstStar = sumFrequencyShifts(input)\n  println(s&amp;quot;firstStar:
        $firstStar&amp;quot;)\n  assert(firstStar == 536)\n\n  val secondStar = findFirstRevisitedFrequency(input)\n  println(s&amp;quot;secondStar:
        $secondStar&amp;quot;)\n  assert(secondStar == 75108)\n\n  def sumFrequencyShifts(data:
        List[FrequencyShift]): Int = data.foldRight(0){case (fs, acc) \u21d2 acc +
        fs.shift}\n\n  def findFirstRevisitedFrequency(data: List[FrequencyShift]):
        Int = {\n\n    def step(partialList: List[FrequencyShift], current: Int, storage:
        Set[Int]): Int = {\n      if (partialList.isEmpty) step(data, current, storage)\n      else
        {\n        val nextFrequency: Int = current + partialList.head.shift\n\n        if
        (storage.contains(nextFrequency)) nextFrequency\n        else {\n          val
        newStorage = storage + nextFrequency\n          step(partialList.tail, nextFrequency,
        newStorage)\n        }\n      }\n    }\n\n    step(data, 0,Set(0))\n  }\n\n  def
        getData(path: String): String = Source.fromResource(path).getLines().toList.mkString(&amp;quot;,
        &amp;quot;)\n  def parseData(data: String): List[FrequencyShift] = TextParser.parse(TextParser.freqShifts,
        data).get\n}\n\ncase class FrequencyShift(shift: Int)\n\nobject TextParser
        extends RegexParsers {\n  override val whiteSpace: Regex = &amp;quot;&amp;quot;&amp;quot;[\\t
        ]+&amp;quot;&amp;quot;&amp;quot;.r\n\n  def freqShift: Parser[FrequencyShift]
        = &amp;quot;[-+][0-9]+&amp;quot;.r ^^ (fs \u21d2 FrequencyShift(fs.toInt))\n  def
        freqShifts: Parser[List[FrequencyShift]] = rep(freqShift &amp;lt;~ &amp;quot;,&amp;quot;.r.?)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": true, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauhusu/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauhusu", "created":
        1543660966.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543663939.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eauhvkr", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "fornwall",
        "can_mod_post": false, "created_utc": 1543661009.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_4h8x1", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My solution in rust, available at [https://github.com/fornwall/advent-of-code-2018-rs](https://github.com/fornwall/advent-of-code-2018-rs):\n\n    use
        std::collections::HashSet;\n    \n    fn evaluate_part1(input_string: &amp;str)
        -&gt; i32 {\n        input_string\n            .lines()\n            .map(|w|
        w.parse::&lt;i32&gt;().unwrap())\n            .sum()\n    }\n    \n    fn
        evaluate_part2(input_string: &amp;str) -&gt; i32 {\n        let input: Vec&lt;i32&gt;
        = input_string\n            .lines()\n            .map(|w| w.parse::&lt;i32&gt;().unwrap())\n            .collect();\n    \n        let
        mut i = 0;\n        let mut frequency = 0;\n        let mut seen_frequencies
        = HashSet::new();\n    \n        while seen_frequencies.insert(frequency)
        {\n            frequency += input[i];\n            i = (i + 1) % input.len();\n        }\n    \n        frequency\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My solution in rust,
        available at &lt;a href=\"https://github.com/fornwall/advent-of-code-2018-rs\"&gt;https://github.com/fornwall/advent-of-code-2018-rs&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use
        std::collections::HashSet;\n\nfn evaluate_part1(input_string: &amp;amp;str)
        -&amp;gt; i32 {\n    input_string\n        .lines()\n        .map(|w| w.parse::&amp;lt;i32&amp;gt;().unwrap())\n        .sum()\n}\n\nfn
        evaluate_part2(input_string: &amp;amp;str) -&amp;gt; i32 {\n    let input:
        Vec&amp;lt;i32&amp;gt; = input_string\n        .lines()\n        .map(|w|
        w.parse::&amp;lt;i32&amp;gt;().unwrap())\n        .collect();\n\n    let mut
        i = 0;\n    let mut frequency = 0;\n    let mut seen_frequencies = HashSet::new();\n\n    while
        seen_frequencies.insert(frequency) {\n        frequency += input[i];\n        i
        = (i + 1) % input.len();\n    }\n\n    frequency\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauhvkr/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauhvkr", "created":
        1543661009.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauhvyh",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "tbuehlmann",
        "can_mod_post": false, "created_utc": 1543661030.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_ow6ng", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Ruby:\n\nPart 1:\n\n```ruby\nchanges = File.read(''changes.txt'')\nputs eval(changes.delete(\"\\n\"))\n```\n\nPart
        2:\n\n```ruby\nrequire ''set''\n\nchanges = File.read(''changes.txt'').strip.lines.map(&amp;:to_i)\nfrequencies
        = Set[0]\nfrequency = 0\n\nchanges.cycle do |change|\n  frequency = frequency
        + change\n\n  unless frequencies.add?(frequency)\n    puts frequency\n    exit\n  end\nend\n```",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ruby:&lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;ruby\nchanges = File.read(&amp;#39;changes.txt&amp;#39;)\nputs
        eval(changes.delete(&amp;quot;\\n&amp;quot;))\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;p&gt;```ruby\nrequire &amp;#39;set&amp;#39;&lt;/p&gt;\n\n&lt;p&gt;changes
        = File.read(&amp;#39;changes.txt&amp;#39;).strip.lines.map(&amp;amp;:to_i)\nfrequencies
        = Set[0]\nfrequency = 0&lt;/p&gt;\n\n&lt;p&gt;changes.cycle do |change|\n  frequency
        = frequency + change&lt;/p&gt;\n\n&lt;p&gt;unless frequencies.add?(frequency)\n    puts
        frequency\n    exit\n  end\nend\n```&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauhvyh/", "subreddit_type":
        "public", "locked": false, "name": "t1_eauhvyh", "created": 1543661030.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eauic33", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "ThreeFinger", "can_mod_post": false, "created_utc":
        1543661842.0, "send_replies": true, "parent_id": "t3_a20646", "score": 1,
        "author_fullname": "t2_8bmvc", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "**Kotlin**\n\nPart1:\n\n    fun
        changeFrequency(current: Int = 0, changes: List&lt;Int&gt;): Int = current
        + changes.sum()\n\nPart2 (Short but slower):\n\n    fun frequencyRachesTwice
        (current: Int = 0, changes: List&lt;Int&gt;): Int {\n        val results:
        MutableSet&lt;Int&gt; = mutableSetOf(current)\n        while (true) {\n          changes.forEach
        {\n            if(!results.add(results.last() + it))\n              return
        results.last() + it\n          }\n        }\n      }\n\nPart 2 (Long but faster)\n\n    fun
        frequencyRachesTwice (current: Int = 0, changes: List&lt;Int&gt;): Int {\n        val
        results = arrayListOf(current)\n    \n        while (true) {\n          changes.forEach
        {\n            val newResult = results.last() + it\n            when (newResult
        in results){\n              true -&gt; return newResult\n              else
        -&gt; results.add(newResult)\n            }\n          }\n        }\n      }\n\n&amp;#x200B;",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Kotlin&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Part1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fun
        changeFrequency(current: Int = 0, changes: List&amp;lt;Int&amp;gt;): Int =
        current + changes.sum()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part2 (Short
        but slower):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fun frequencyRachesTwice
        (current: Int = 0, changes: List&amp;lt;Int&amp;gt;): Int {\n    val results:
        MutableSet&amp;lt;Int&amp;gt; = mutableSetOf(current)\n    while (true) {\n      changes.forEach
        {\n        if(!results.add(results.last() + it))\n          return results.last()
        + it\n      }\n    }\n  }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part 2 (Long
        but faster)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fun frequencyRachesTwice (current:
        Int = 0, changes: List&amp;lt;Int&amp;gt;): Int {\n    val results = arrayListOf(current)\n\n    while
        (true) {\n      changes.forEach {\n        val newResult = results.last()
        + it\n        when (newResult in results){\n          true -&amp;gt; return
        newResult\n          else -&amp;gt; results.add(newResult)\n        }\n      }\n    }\n  }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauic33/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauic33", "created":
        1543661842.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543663508.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eauixdp", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ProTechShark",
        "can_mod_post": false, "created_utc": 1543662771.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_r86au", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Part 2 took so long to run I was convinced my code wasn''t working, I need
        to figure out how to optimise this a bit.\nEdit: Jesus christ I just realised
        I massively overengineered part 1\n\nPart 1:\n\n    f=open(\"input.txt\",\"r\")\n    f1=f.readlines()\n    count=0\n    for
        i in range(0,len(f1)):\n        tempcount=0\n        p=0\n        if f1[i][0]==\"+\":\n            for
        j in range(len(f1[i])-2,0,-1):\n                tempcount+=int(f1[i][j])*(10**(p))\n                p+=1\n            \n        if
        f1[i][0]==\"-\":\n            for j in range(len(f1[i])-2,0,-1):\n                tempcount-=int(f1[i][j])*(10**(p))\n                p+=1\n        count+=tempcount\n    print(tempcount)\n    print(count)\n\nPart
        2:\n    \n    previouscounts=[0]\n    solved=False\n    f=open(\"input.txt\",\"r\")\n    f1=f.readlines()\n    count=0\n    while
        solved!=True:\n        for i in range(0,len(f1)):\n                tempcount=0\n                p=0\n                if
        f1[i][0]==\"+\":\n                    for j in range(len(f1[i])-2,0,-1):\n                        tempcount+=int(f1[i][j])*(10**(p))\n                        p+=1\n                    \n                if
        f1[i][0]==\"-\":\n                    for j in range(len(f1[i])-2,0,-1):\n                        tempcount-=int(f1[i][j])*(10**(p))\n                        p+=1\n                count+=tempcount\n                for
        q in range(0,len(previouscounts)):\n                    if count==previouscounts[q]:\n                        solved==True\n                        print(\"solved!\")\n                        print(count)\n                        input()\n                previouscounts.append(count)\n\n\n\n\n    \n\n\n    \n\n\n    \n        \n\n    \n        \n\n",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Part 2 took so long
        to run I was convinced my code wasn&amp;#39;t working, I need to figure out
        how to optimise this a bit.\nEdit: Jesus christ I just realised I massively
        overengineered part 1&lt;/p&gt;\n\n&lt;p&gt;Part 1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;f=open(&amp;quot;input.txt&amp;quot;,&amp;quot;r&amp;quot;)\nf1=f.readlines()\ncount=0\nfor
        i in range(0,len(f1)):\n    tempcount=0\n    p=0\n    if f1[i][0]==&amp;quot;+&amp;quot;:\n        for
        j in range(len(f1[i])-2,0,-1):\n            tempcount+=int(f1[i][j])*(10**(p))\n            p+=1\n\n    if
        f1[i][0]==&amp;quot;-&amp;quot;:\n        for j in range(len(f1[i])-2,0,-1):\n            tempcount-=int(f1[i][j])*(10**(p))\n            p+=1\n    count+=tempcount\nprint(tempcount)\nprint(count)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;previouscounts=[0]\nsolved=False\nf=open(&amp;quot;input.txt&amp;quot;,&amp;quot;r&amp;quot;)\nf1=f.readlines()\ncount=0\nwhile
        solved!=True:\n    for i in range(0,len(f1)):\n            tempcount=0\n            p=0\n            if
        f1[i][0]==&amp;quot;+&amp;quot;:\n                for j in range(len(f1[i])-2,0,-1):\n                    tempcount+=int(f1[i][j])*(10**(p))\n                    p+=1\n\n            if
        f1[i][0]==&amp;quot;-&amp;quot;:\n                for j in range(len(f1[i])-2,0,-1):\n                    tempcount-=int(f1[i][j])*(10**(p))\n                    p+=1\n            count+=tempcount\n            for
        q in range(0,len(previouscounts)):\n                if count==previouscounts[q]:\n                    solved==True\n                    print(&amp;quot;solved!&amp;quot;)\n                    print(count)\n                    input()\n            previouscounts.append(count)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauixdp/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauixdp", "created":
        1543662771.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543663314.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eauj4gb", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Gnidleif",
        "can_mod_post": false, "created_utc": 1543663069.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_xdr49", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "These are my solutions for day1, written in Python:\n\n    import os\n    \n    def
        part1(nums):\n        return sum(nums)\n    \n    def part2(nums):\n        found
        = False\n        current = 0\n        freqs = {\n            current: True\n        }\n        i
        = 0\n        while(not found):\n            current += nums[i % len(nums)]\n            if
        current in freqs:\n                found = True\n            else:\n                freqs[current]
        = True\n            i += 1\n        return current\n    \n    def readFile(filename):\n        path
        = os.path.abspath(__file__)\n        scr_name = os.path.basename(__file__)\n        with
        open(path.replace(scr_name, filename), ''r'') as f:\n            nums = f.read().splitlines()\n        return
        [int(n) for n in nums]\n    \n    if __name__ == \"__main__\":\n        nums
        = readFile(\"Day01.txt\")\n        print(part1(nums))\n        print(part2(nums))\n\nPart1
        is pretty straight forward. Just read the file, create the int list and sum
        all the elements.\n\nPart2 was slightly more tricky though. Here I make use
        of a dictionary to determine if the current frequency has been seen before
        or not. I also iterate the list in a while loop and make use of modulus when
        accessing elements in the list to handle cases where i &gt;= len(nums).",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;These are my solutions
        for day1, written in Python:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import os\n\ndef
        part1(nums):\n    return sum(nums)\n\ndef part2(nums):\n    found = False\n    current
        = 0\n    freqs = {\n        current: True\n    }\n    i = 0\n    while(not
        found):\n        current += nums[i % len(nums)]\n        if current in freqs:\n            found
        = True\n        else:\n            freqs[current] = True\n        i += 1\n    return
        current\n\ndef readFile(filename):\n    path = os.path.abspath(__file__)\n    scr_name
        = os.path.basename(__file__)\n    with open(path.replace(scr_name, filename),
        &amp;#39;r&amp;#39;) as f:\n        nums = f.read().splitlines()\n    return
        [int(n) for n in nums]\n\nif __name__ == &amp;quot;__main__&amp;quot;:\n    nums
        = readFile(&amp;quot;Day01.txt&amp;quot;)\n    print(part1(nums))\n    print(part2(nums))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part1
        is pretty straight forward. Just read the file, create the int list and sum
        all the elements.&lt;/p&gt;\n\n&lt;p&gt;Part2 was slightly more tricky though.
        Here I make use of a dictionary to determine if the current frequency has
        been seen before or not. I also iterate the list in a while loop and make
        use of modulus when accessing elements in the list to handle cases where i
        &amp;gt;= len(nums).&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauj4gb/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauj4gb", "created":
        1543663069.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauja6q",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "wzkx",
        "can_mod_post": false, "created_utc": 1543663304.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_t1qbo", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "SweetRust\n\n    use std::io::{BufRead,BufReader}; // lines() is in BufRead\n    use
        std::collections::HashSet;\n\n    fn main():\n      let reader = BufReader::new(
        std::fs::File::open( \"01.dat\" ).unwrap() );\n      let changes: Vec&lt;i32&gt;
        = reader.lines().filter_map( |x| x.unwrap().parse().ok() ).collect();\n      println!(
        \"{}\", changes.iter().fold( 0, |sum,x| sum+x) );\n      let mut seen: HashSet&lt;i32&gt;
        = HashSet::new(); seen.insert(0);\n      let mut freq = 0;\n      loop:\n        for
        chg in &amp;changes:\n          freq += chg;\n          if !seen.insert( freq
        ):\n            println!( \"{}\", freq );\n            return;\n", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;SweetRust&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use
        std::io::{BufRead,BufReader}; // lines() is in BufRead\nuse std::collections::HashSet;\n\nfn
        main():\n  let reader = BufReader::new( std::fs::File::open( &amp;quot;01.dat&amp;quot;
        ).unwrap() );\n  let changes: Vec&amp;lt;i32&amp;gt; = reader.lines().filter_map(
        |x| x.unwrap().parse().ok() ).collect();\n  println!( &amp;quot;{}&amp;quot;,
        changes.iter().fold( 0, |sum,x| sum+x) );\n  let mut seen: HashSet&amp;lt;i32&amp;gt;
        = HashSet::new(); seen.insert(0);\n  let mut freq = 0;\n  loop:\n    for chg
        in &amp;amp;changes:\n      freq += chg;\n      if !seen.insert( freq ):\n        println!(
        &amp;quot;{}&amp;quot;, freq );\n        return;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauja6q/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauja6q", "created":
        1543663304.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_eautksi", "id": "eautksi", "parent_id":
        "t1_eauja6q", "depth": 1, "children": ["eautksi"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaujd20",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "BOT-Brad",
        "can_mod_post": false, "created_utc": 1543663429.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_h01sq", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My first attempt at Nim\n\n```nim\nimport sequtils\nimport sets\nimport strutils\n\nconst
        input = map(\n  slurp\"../inputs/input-1.txt\".splitWhitespace,\n  proc(i:string):int
        = i.parseInt\n)\n\nproc part1():string = $foldl(input, a + b)\n\nproc part2():string
        =\n  var\n    cache = initSet[int]()\n    c = 0\n  while true:\n    for n
        in input:\n      c = c + n\n      if c in cache:\n        return $c\n      cache.incl
        c\n  return \"Not Found\"\n\necho part1()\necho part2()\n```", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;My first attempt at Nim&lt;/p&gt;\n\n&lt;p&gt;```nim\nimport
        sequtils\nimport sets\nimport strutils&lt;/p&gt;\n\n&lt;p&gt;const input =
        map(\n  slurp&amp;quot;../inputs/input-1.txt&amp;quot;.splitWhitespace,\n  proc(i:string):int
        = i.parseInt\n)&lt;/p&gt;\n\n&lt;p&gt;proc part1():string = $foldl(input,
        a + b)&lt;/p&gt;\n\n&lt;p&gt;proc part2():string =\n  var\n    cache = initSet[int]()\n    c
        = 0\n  while true:\n    for n in input:\n      c = c + n\n      if c in cache:\n        return
        $c\n      cache.incl c\n  return &amp;quot;Not Found&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;echo
        part1()\necho part2()\n```&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaujd20/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaujd20", "created":
        1543663429.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaujx6k",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "laiot_",
        "can_mod_post": false, "created_utc": 1543664306.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_14vk6j0r", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python 3\n\nPart 1:\n\n    with open(''file_input'', ''r'') as f:\n        lines
        = f.readlines()\n        changes = list(map(int, lines))\n        print(sum(changes))\n\nPart
        2:\n\n    with open(''file_input'', ''r'') as f:\n        lines = f.readlines()\n        changes
        = list(map(int, lines))\n        res = 0\n        freq = set()\n        for
        x in range(1000):\n            for i in changes:\n                res = res
        + i\n                if res in freq:\n                    print(res)\n                    break\n                freq.add(res)\n\n&amp;#x200B;",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python 3&lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with open(&amp;#39;file_input&amp;#39;,
        &amp;#39;r&amp;#39;) as f:\n    lines = f.readlines()\n    changes = list(map(int,
        lines))\n    print(sum(changes))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with open(&amp;#39;file_input&amp;#39;,
        &amp;#39;r&amp;#39;) as f:\n    lines = f.readlines()\n    changes = list(map(int,
        lines))\n    res = 0\n    freq = set()\n    for x in range(1000):\n        for
        i in changes:\n            res = res + i\n            if res in freq:\n                print(res)\n                break\n            freq.add(res)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaujx6k/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaujx6k", "created":
        1543664306.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eaujyw2", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_a20646", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Elixir\n\n    #!/usr/bin/env elixir\n    defmodule ChronalCalibration
        do\n      def solve_b(freq_changes) do\n        freq_changes\n        |&gt;
        Stream.cycle()\n        |&gt; Enum.reduce_while({0, %{0 =&gt; 1}}, fn freq_change,
        {prev_freq, reached_freqs} = _acc -&gt;\n          freq = prev_freq + freq_change\n    \n          if
        reached_freqs[freq] do\n            {:halt, freq}\n          else\n            reached_freqs
        = Map.put(reached_freqs, freq, 1)\n            {:cont, {freq, reached_freqs}}\n          end\n        end)\n      end\n    \n      def
        read_file(filename) do\n        filename\n        |&gt; File.stream!()\n        |&gt;
        Stream.map(&amp;String.trim/1)\n        |&gt; Stream.map(&amp;String.to_integer/1)\n      end\n    end\n    \n    \"../1\"
        |&gt; ChronalCalibration.read_file() |&gt; Enum.sum() |&gt; IO.puts()\n    \"../1\"
        |&gt; ChronalCalibration.read_file() |&gt; ChronalCalibration.solve_b() |&gt;
        IO.puts()\n", "awarders": [], "downs": 0, "author_flair_css_class": null,
        "name": "t1_eaujyw2", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Elixir&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/usr/bin/env
        elixir\ndefmodule ChronalCalibration do\n  def solve_b(freq_changes) do\n    freq_changes\n    |&amp;gt;
        Stream.cycle()\n    |&amp;gt; Enum.reduce_while({0, %{0 =&amp;gt; 1}}, fn
        freq_change, {prev_freq, reached_freqs} = _acc -&amp;gt;\n      freq = prev_freq
        + freq_change\n\n      if reached_freqs[freq] do\n        {:halt, freq}\n      else\n        reached_freqs
        = Map.put(reached_freqs, freq, 1)\n        {:cont, {freq, reached_freqs}}\n      end\n    end)\n  end\n\n  def
        read_file(filename) do\n    filename\n    |&amp;gt; File.stream!()\n    |&amp;gt;
        Stream.map(&amp;amp;String.trim/1)\n    |&amp;gt; Stream.map(&amp;amp;String.to_integer/1)\n  end\nend\n\n&amp;quot;../1&amp;quot;
        |&amp;gt; ChronalCalibration.read_file() |&amp;gt; Enum.sum() |&amp;gt; IO.puts()\n&amp;quot;../1&amp;quot;
        |&amp;gt; ChronalCalibration.read_file() |&amp;gt; ChronalCalibration.solve_b()
        |&amp;gt; IO.puts()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaujyw2/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1543664389.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543664389.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaujyy5",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "azatol",
        "can_mod_post": false, "created_utc": 1543664391.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_1v3ph", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "     let freqChangesLines fn = \n        File.ReadAllLines(fn)\n\n    let
        getChange (s : string) = \n        if s = \"\" then 0L\n        else\n            match
        s with\n            | Int64 i -&gt; i\n            | _ -&gt; failwith \"Unrecognized
        line\"\n\n    let arrFreqs = \n        \"Day1input.txt\"\n        |&gt; freqChangesLines\n        |&gt;
        Array.map getChange\n        \n    // Answer 1\n    let endingFreq = \n        arrFreqs\n        |&gt;
        Array.sum\n    \n    let len = arrFreqs.Length\n\n    let rec getFirstRepeater
        (hs : HashSet&lt;int64&gt;) (index : int) (freq : int64) =\n        if index
        &gt;= len then getFirstRepeater hs (index - len) freq\n        else\n            let
        v = freq + arrFreqs.[index]\n\n            if hs.Contains(v) then v\n            else\n                hs.Add(v)\n                getFirstRepeater
        hs (index + 1) v\n\n    let hs = new HashSet&lt;int64&gt;()\n    hs.Add(0L)\n\n    let
        repFreq = getFirstRepeater hs 0 0L", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;pre&gt;&lt;code&gt; let freqChangesLines fn = \n    File.ReadAllLines(fn)\n\nlet
        getChange (s : string) = \n    if s = &amp;quot;&amp;quot; then 0L\n    else\n        match
        s with\n        | Int64 i -&amp;gt; i\n        | _ -&amp;gt; failwith &amp;quot;Unrecognized
        line&amp;quot;\n\nlet arrFreqs = \n    &amp;quot;Day1input.txt&amp;quot;\n    |&amp;gt;
        freqChangesLines\n    |&amp;gt; Array.map getChange\n\n// Answer 1\nlet endingFreq
        = \n    arrFreqs\n    |&amp;gt; Array.sum\n\nlet len = arrFreqs.Length\n\nlet
        rec getFirstRepeater (hs : HashSet&amp;lt;int64&amp;gt;) (index : int) (freq
        : int64) =\n    if index &amp;gt;= len then getFirstRepeater hs (index - len)
        freq\n    else\n        let v = freq + arrFreqs.[index]\n\n        if hs.Contains(v)
        then v\n        else\n            hs.Add(v)\n            getFirstRepeater
        hs (index + 1) v\n\nlet hs = new HashSet&amp;lt;int64&amp;gt;()\nhs.Add(0L)\n\nlet
        repFreq = getFirstRepeater hs 0 0L\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaujyy5/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaujyy5", "created":
        1543664391.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543670225.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eauk06c", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "mornymorny",
        "can_mod_post": false, "created_utc": 1543664450.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_6dgx69", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "CPP, using a ring iterator that was useful last year (wraps)\n\n    using
        IntItr = RingIterator&lt;int, std::vector&lt;int&gt;&gt;;\n    \n    auto
        input = utils_get_integers(file_read(PRACTICE_ROOT \"/advent_of_code/2018/inputs/day_1.txt\"));\n    \n    LOG(INFO)
        &lt;&lt; \"Part1: \" &lt;&lt; std::accumulate(input.begin(), input.end(),
        0, [&amp;](int total, int val) { return total += val; });\n    \n    int result
        = 0;\n    IntItr itr(input);\n    std::set&lt;int&gt; visited;\n    while(visited.insert(result).second)\n    {\n        result
        += \\*itr++;\n    }\n    \n    LOG(INFO) &lt;&lt; \"Part2: \" &lt;&lt; result;\n    \n    }\n\n&amp;#x200B;",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;CPP, using a ring iterator
        that was useful last year (wraps)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;using
        IntItr = RingIterator&amp;lt;int, std::vector&amp;lt;int&amp;gt;&amp;gt;;\n\nauto
        input = utils_get_integers(file_read(PRACTICE_ROOT &amp;quot;/advent_of_code/2018/inputs/day_1.txt&amp;quot;));\n\nLOG(INFO)
        &amp;lt;&amp;lt; &amp;quot;Part1: &amp;quot; &amp;lt;&amp;lt; std::accumulate(input.begin(),
        input.end(), 0, [&amp;amp;](int total, int val) { return total += val; });\n\nint
        result = 0;\nIntItr itr(input);\nstd::set&amp;lt;int&amp;gt; visited;\nwhile(visited.insert(result).second)\n{\n    result
        += \\*itr++;\n}\n\nLOG(INFO) &amp;lt;&amp;lt; &amp;quot;Part2: &amp;quot;
        &amp;lt;&amp;lt; result;\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauk06c/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauk06c", "created":
        1543664450.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaukgyy",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "khalido",
        "can_mod_post": false, "created_utc": 1543665203.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_6j9p", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python 3 solution [as a jupyter notebook with plots](https://github.com/khalido/adventofcode/blob/master/advent2018/Day%201%20-%20Chronal%20Calibration.ipynb).\n\nI
        tried to visualise the frequency changes using plotly, but even for a relatively
        simple chart it blew up the notebook to 122MB, which though it ran on my laptop
        was too big to upload to github. \n\nTrying out plotly (which is new and shiny)
        gave me a new found respect for good old matplotlib, which just draws an image
        and doesn''t suck up all the memory in the world trying to hold oodles of
        objects in memory.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python
        3 solution &lt;a href=\"https://github.com/khalido/adventofcode/blob/master/advent2018/Day%201%20-%20Chronal%20Calibration.ipynb\"&gt;as
        a jupyter notebook with plots&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;I tried to
        visualise the frequency changes using plotly, but even for a relatively simple
        chart it blew up the notebook to 122MB, which though it ran on my laptop was
        too big to upload to github. &lt;/p&gt;\n\n&lt;p&gt;Trying out plotly (which
        is new and shiny) gave me a new found respect for good old matplotlib, which
        just draws an image and doesn&amp;#39;t suck up all the memory in the world
        trying to hold oodles of objects in memory.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaukgyy/", "subreddit_type":
        "public", "locked": false, "name": "t1_eaukgyy", "created": 1543665203.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eaukyn7", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "TheGermanDoctor", "can_mod_post": false,
        "created_utc": 1543665910.0, "send_replies": true, "parent_id": "t3_a20646",
        "score": 1, "author_fullname": "t2_bmk46", "report_reasons": null, "approved_by":
        null, "all_awardings": [], "collapsed": false, "body": "Get ready...\n\nDay
        1 Part 1 ... in x64 assembly (only with malloc and free from C library)\n\nhttps://github.com/fstolzcode/AoC2018_x64/blob/master/Day1/frequency_1.asm",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Get ready...&lt;/p&gt;\n\n&lt;p&gt;Day
        1 Part 1 ... in x64 assembly (only with malloc and free from C library)&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/fstolzcode/AoC2018_x64/blob/master/Day1/frequency_1.asm\"&gt;https://github.com/fstolzcode/AoC2018_x64/blob/master/Day1/frequency_1.asm&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaukyn7/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaukyn7", "created":
        1543665910.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1713952058.0, "mod_reason_by": null,
        "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eav5et4", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ephemient",
        "can_mod_post": false, "created_utc": 1543685925.0, "send_replies": true,
        "parent_id": "t1_eaukyn7", "score": 2, "author_fullname": "t2_3y2dr", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "This space intentionally left blank.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;This space intentionally left blank.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eav5et4/",
        "subreddit_type": "public", "locked": false, "name": "t1_eav5et4", "created":
        1543685925.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_eav5wa2", "id": "eav5wa2", "parent_id":
        "t1_eav5et4", "depth": 2, "children": ["eav5wa2"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1686471383.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eaul2cw", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Alfyboy",
        "can_mod_post": false, "created_utc": 1543666050.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_8d0l9", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "This comment/post has been deleted as an act of protest to Reddit killing
        3rd Party Apps such as Apollo.", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;This comment/post has been deleted as an act of protest
        to Reddit killing 3rd Party Apps such as Apollo.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaul2cw/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaul2cw", "created":
        1543666050.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaulhg7",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "muffa",
        "can_mod_post": false, "created_utc": 1543666610.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_5gpux", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "This year I tried to write it in Go/golang. Part 2 was really hard for me
        because there was an empty line in the input file that I downloaded that took
        a while to find :( If you have any feedback on the code feel free since I
        am new to Go.\n\n    package main\n    \n    import (\n    \t\"fmt\"\n    \t\"io/ioutil\"\n    \t\"os\"\n    \t\"strconv\"\n    \t\"strings\"\n    )\n    \n    func
        main() {\n    \tfile, _ := ioutil.ReadFile(\"input_day1.txt\")\n    \tanswer
        := 0\n    \tvar freqList []int\n    \t// Solution to first part\n    \tfor
        _, line := range strings.Split(string(file), \"\\n\") {\n    \t\tnum, _ :=
        strconv.Atoi(line)\n    \t\tanswer += num\n    \t\tfreqList = append(freqList,
        num)\n    \t}\n    \tfmt.Println(answer)\n    \t// Solution to second part\n    \tfrequency
        := 0\n    \tfreqMemory := make(map[int]int)\n    \tfreqMemory[0] = 0\n    \tfor
        {\n    \t\tfor _, num := range freqList {\n    \t\t\tfrequency += num\n    \t\t\tif
        _, exists := freqMemory[frequency]; exists {\n    \t\t\t\tfmt.Println(frequency)\n    \t\t\t\tos.Exit(0)\n    \t\t\t}\n    \t\t\tfreqMemory[frequency]
        = 0\n    \t\t}\n    \t}\n    }\n    ", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;This year I tried to write it in Go/golang. Part
        2 was really hard for me because there was an empty line in the input file
        that I downloaded that took a while to find :( If you have any feedback on
        the code feel free since I am new to Go.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package
        main\n\nimport (\n    &amp;quot;fmt&amp;quot;\n    &amp;quot;io/ioutil&amp;quot;\n    &amp;quot;os&amp;quot;\n    &amp;quot;strconv&amp;quot;\n    &amp;quot;strings&amp;quot;\n)\n\nfunc
        main() {\n    file, _ := ioutil.ReadFile(&amp;quot;input_day1.txt&amp;quot;)\n    answer
        := 0\n    var freqList []int\n    // Solution to first part\n    for _, line
        := range strings.Split(string(file), &amp;quot;\\n&amp;quot;) {\n        num,
        _ := strconv.Atoi(line)\n        answer += num\n        freqList = append(freqList,
        num)\n    }\n    fmt.Println(answer)\n    // Solution to second part\n    frequency
        := 0\n    freqMemory := make(map[int]int)\n    freqMemory[0] = 0\n    for
        {\n        for _, num := range freqList {\n            frequency += num\n            if
        _, exists := freqMemory[frequency]; exists {\n                fmt.Println(frequency)\n                os.Exit(0)\n            }\n            freqMemory[frequency]
        = 0\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaulhg7/", "subreddit_type":
        "public", "locked": false, "name": "t1_eaulhg7", "created": 1543666610.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eavojx6", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Gommle", "can_mod_post": false, "created_utc":
        1543700647.0, "send_replies": true, "parent_id": "t1_eaulhg7", "score": 2,
        "author_fullname": "t2_375b5", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "The code would look better
        if you made freqMemory into a map[int]bool and avoided using `if ...;exists.`\n\nAlternatively
        keep it as map[int]int and use `freqMemory[frequency]++` and `if freqMemory[frequency]
        == 1`.\n\nUse/abuse default values when possible (i.e. non-existent map[T]int
        value is always 0).\n", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The
        code would look better if you made freqMemory into a map[int]bool and avoided
        using &lt;code&gt;if ...;exists.&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Alternatively
        keep it as map[int]int and use &lt;code&gt;freqMemory[frequency]++&lt;/code&gt;
        and &lt;code&gt;if freqMemory[frequency] == 1&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Use/abuse
        default values when possible (i.e. non-existent map[T]int value is always
        0).&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavojx6/",
        "subreddit_type": "public", "locked": false, "name": "t1_eavojx6", "created":
        1543700647.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543672491.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eaun10g", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ShroudedEUW",
        "can_mod_post": false, "created_utc": 1543668630.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_9fdc4", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Quickie in Python3, part 2 was easy enough to do with a cycle or a while
        loop, but basically begged for a disgusting recursive solution instead ;)\n\n\n    def
        run_through_list(start, reached, changes):\n        frequency = start\n        for
        change in changes:\n            frequency += int(change)\n            if frequency
        in reached:\n                print(frequency)\n                exit()\n            else:\n                reached.add(frequency)\n            print(change,
        frequency)\n        run_through_list(frequency, reached, changes)\n\n\n    with
        open(\"inputs/day1.txt\", \"r\") as file:\n        lines = file.readlines()\n    run_through_list(0,
        {0}, lines)", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Quickie
        in Python3, part 2 was easy enough to do with a cycle or a while loop, but
        basically begged for a disgusting recursive solution instead ;)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        run_through_list(start, reached, changes):\n    frequency = start\n    for
        change in changes:\n        frequency += int(change)\n        if frequency
        in reached:\n            print(frequency)\n            exit()\n        else:\n            reached.add(frequency)\n        print(change,
        frequency)\n    run_through_list(frequency, reached, changes)\n\n\nwith open(&amp;quot;inputs/day1.txt&amp;quot;,
        &amp;quot;r&amp;quot;) as file:\n    lines = file.readlines()\nrun_through_list(0,
        {0}, lines)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaun10g/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaun10g", "created":
        1543668630.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaun733",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Sampsc",
        "can_mod_post": false, "created_utc": 1543668834.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_10y4ot", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Hey guys, i had no problem with part 1 but i can''t understand why my code
        doesn''t work for part 2, i get no match when doing this (in MATLAB):\n\n    %Counter
        is used to get frquencies with by looping again the input shifts\n    %A is
        the vector of frequency shifts\n    counter=0;\n    while counter &lt; 10\n        for
        i=1:length(A)\n            if i+counter &gt; 1 &amp;&amp; i &lt;= length(A)\n                sum(i+counter*length(A))=sum(i-1+counter*length(A))+A(i);  \n            else\n                sum(i+counter*length(A))=A(i);\n        end\n        counter=counter+1;\n    end\n    \n    %Compare
        each frequency with the others\n    \n    for i=1:length(sum)\n        for
        j=1:length(sum)\n            if sum(i) == sum(j) &amp;&amp; i~=j\n                result=sum(i);\n                break\n            end\n        end\n    end\n\nThe
        problem is the function never enters in the last if. If i raise the counter
        enough i get al frequencies shifted from each other by one (can see this by
        plotting) but no matching frquencies...  \n\n&amp;#x200B;", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Hey guys, i had no problem with part 1 but
        i can&amp;#39;t understand why my code doesn&amp;#39;t work for part 2, i
        get no match when doing this (in MATLAB):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;%Counter
        is used to get frquencies with by looping again the input shifts\n%A is the
        vector of frequency shifts\ncounter=0;\nwhile counter &amp;lt; 10\n    for
        i=1:length(A)\n        if i+counter &amp;gt; 1 &amp;amp;&amp;amp; i &amp;lt;=
        length(A)\n            sum(i+counter*length(A))=sum(i-1+counter*length(A))+A(i);  \n        else\n            sum(i+counter*length(A))=A(i);\n    end\n    counter=counter+1;\nend\n\n%Compare
        each frequency with the others\n\nfor i=1:length(sum)\n    for j=1:length(sum)\n        if
        sum(i) == sum(j) &amp;amp;&amp;amp; i~=j\n            result=sum(i);\n            break\n        end\n    end\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The
        problem is the function never enters in the last if. If i raise the counter
        enough i get al frequencies shifted from each other by one (can see this by
        plotting) but no matching frquencies...  &lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaun733/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaun733", "created":
        1543668834.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauon11",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "CCC_037",
        "can_mod_post": false, "created_utc": 1543670514.0, "send_replies": true,
        "parent_id": "t1_eaun733", "score": 2, "author_fullname": "t2_b1sp7", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "You''re only looping through the list of frequencies ten times. There''s
        nothing in the problem that says you''ll find a matching frequency in the
        first ten runs through the list...", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;You&amp;#39;re only looping through the list of frequencies
        ten times. There&amp;#39;s nothing in the problem that says you&amp;#39;ll
        find a matching frequency in the first ten runs through the list...&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauon11/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauon11", "created":
        1543670514.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 6, "name": "t1_eauqf08", "id": "eauqf08", "parent_id":
        "t1_eauon11", "depth": 2, "children": ["eauqf08"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaun9nr",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "jabbalaci",
        "can_mod_post": false, "created_utc": 1543668917.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_525gd", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "In Nim, Part 1:\n    \n    import strutils, sequtils, math\n    echo readFile(\"input.txt\").strip.splitlines.map(parseInt).sum",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In Nim, Part 1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        strutils, sequtils, math\necho readFile(&amp;quot;input.txt&amp;quot;).strip.splitlines.map(parseInt).sum\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaun9nr/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaun9nr", "created":
        1543668917.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaunrqb",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "omegaxLoL",
        "can_mod_post": false, "created_utc": 1543669527.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_7330b", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "[My solution in Ruby](https://github.com/aosousa/AdventOfCode2018/blob/master/day1.rb).
        Using Advent of Code to learn Ruby this year so any tips are welcome!", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/aosousa/AdventOfCode2018/blob/master/day1.rb\"&gt;My
        solution in Ruby&lt;/a&gt;. Using Advent of Code to learn Ruby this year so
        any tips are welcome!&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaunrqb/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaunrqb", "created":
        1543669527.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauoodt",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "nezzcarth",
        "can_mod_post": false, "created_utc": 1543670555.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_lc8tf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "For the record, a solution in awk:\n\n    #!/usr/bin/awk -f\n    {\n        sum
        += $1\n        buffer[NR-1] = $1\n    }\n    \n    END {\n        print \"Sum:\",
        sum\n        frequency = 0\n        i = 0\n        size = length(buffer)\n        while
        (1) {\n            frequency += buffer[i]\n            if (frequency in seen)
        {\n                print \"Repeat:\", frequency\n                break\n            }\n            seen[frequency]
        = 1\n            i = (i+1) % size\n        }\n    }\n", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;For the record, a solution in awk:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/usr/bin/awk
        -f\n{\n    sum += $1\n    buffer[NR-1] = $1\n}\n\nEND {\n    print &amp;quot;Sum:&amp;quot;,
        sum\n    frequency = 0\n    i = 0\n    size = length(buffer)\n    while (1)
        {\n        frequency += buffer[i]\n        if (frequency in seen) {\n            print
        &amp;quot;Repeat:&amp;quot;, frequency\n            break\n        }\n        seen[frequency]
        = 1\n        i = (i+1) % size\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauoodt/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauoodt", "created":
        1543670555.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauoxp4",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "equd",
        "can_mod_post": false, "created_utc": 1543670852.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_j7v6l", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "c# \nhttps://pastebin.com/ku0JDgai", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;c# \n&lt;a href=\"https://pastebin.com/ku0JDgai\"&gt;https://pastebin.com/ku0JDgai&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauoxp4/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauoxp4", "created":
        1543670852.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543671525.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eaupdkj", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Kritzware",
        "can_mod_post": false, "created_utc": 1543671335.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_b22q8", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My solutions in Golang - [https://github.com/kritzware/advent-of-code-2018/blob/master/day1/day1.go#L1000](https://github.com/kritzware/advent-of-code-2018/blob/master/day1/day1.go#L1000)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My solutions in Golang
        - &lt;a href=\"https://github.com/kritzware/advent-of-code-2018/blob/master/day1/day1.go#L1000\"&gt;https://github.com/kritzware/advent-of-code-2018/blob/master/day1/day1.go#L1000&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaupdkj/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaupdkj", "created":
        1543671335.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543672680.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eauq1ik", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "TheSheepGuy1",
        "can_mod_post": false, "created_utc": 1543672047.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_xdgv6", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python 3, part 1:\n\n    #This is where the lines will be saved.\n    operations
        = []\n    \n    #Temporarily open the text file, and keep it as the variable
        ''data''. Once the program exits the ''with'' block, the file is closed. The
        ''r'' is for ''r''eading the file.\n    with open(\"day1Input.txt\", \"r\")
        as data:\n        #Add every line to the the array.\n        for line in data:\n            operations.append(line)\n    \n    #Remove
        \"\\n\" from array items.\n    operations = [x.strip(\"\\n\") for x in operations]\n    #Create
        the variable that will save the final frequency.\n    frequency = 0\n    \n    #Apply
        each operation\n    for item in operations:\n        frequency = frequency
        + int(item)\n    \n    print(frequency)\n\nPart 2:\n\n    #This is where the
        lines will be saved.\n    operations = []\n    \n    #Temporarily open the
        text file, and keep it as the variable ''data''. Once the program exits the
        ''with'' block, the file is closed. The ''r'' is for ''r''eading the file.\n    with
        open(\"day1Input.txt\", \"r\") as data:\n        #Add every line to the the
        array.\n        for line in data:\n            operations.append(line)\n    \n    operations
        = [x.strip(\"\\n\") for x in operations]\n    finalFrequency = 0\n    #Save
        the already reached frequencies.\n    frequencies = []\n    #Get the double
        frequency.\n    doubleFrequency = 0\n    frequencyFound = False\n    \n    while(frequencyFound
        = False):\n        #Loops over the array operations,\n        for item in
        operations:\n            #And apply each of them.\n            finalFrequency
        = finalFrequency + int(item)\n            #If the frequency already occured,
        then stop.\n            if (finalFrequency in frequencies):\n                doubleFrequency
        = finalFrequency\n                frequencyFound = True\n            else:\n                frequencies.append(finalFrequency)\n        #If
        the frequency didn''t occur yet, loop again using the ''while'' loop.\n    \n    print(doubleFrequency)\n",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python 3, part 1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#This
        is where the lines will be saved.\noperations = []\n\n#Temporarily open the
        text file, and keep it as the variable &amp;#39;data&amp;#39;. Once the program
        exits the &amp;#39;with&amp;#39; block, the file is closed. The &amp;#39;r&amp;#39;
        is for &amp;#39;r&amp;#39;eading the file.\nwith open(&amp;quot;day1Input.txt&amp;quot;,
        &amp;quot;r&amp;quot;) as data:\n    #Add every line to the the array.\n    for
        line in data:\n        operations.append(line)\n\n#Remove &amp;quot;\\n&amp;quot;
        from array items.\noperations = [x.strip(&amp;quot;\\n&amp;quot;) for x in
        operations]\n#Create the variable that will save the final frequency.\nfrequency
        = 0\n\n#Apply each operation\nfor item in operations:\n    frequency = frequency
        + int(item)\n\nprint(frequency)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#This is where the lines will be saved.\noperations
        = []\n\n#Temporarily open the text file, and keep it as the variable &amp;#39;data&amp;#39;.
        Once the program exits the &amp;#39;with&amp;#39; block, the file is closed.
        The &amp;#39;r&amp;#39; is for &amp;#39;r&amp;#39;eading the file.\nwith open(&amp;quot;day1Input.txt&amp;quot;,
        &amp;quot;r&amp;quot;) as data:\n    #Add every line to the the array.\n    for
        line in data:\n        operations.append(line)\n\noperations = [x.strip(&amp;quot;\\n&amp;quot;)
        for x in operations]\nfinalFrequency = 0\n#Save the already reached frequencies.\nfrequencies
        = []\n#Get the double frequency.\ndoubleFrequency = 0\nfrequencyFound = False\n\nwhile(frequencyFound
        = False):\n    #Loops over the array operations,\n    for item in operations:\n        #And
        apply each of them.\n        finalFrequency = finalFrequency + int(item)\n        #If
        the frequency already occured, then stop.\n        if (finalFrequency in frequencies):\n            doubleFrequency
        = finalFrequency\n            frequencyFound = True\n        else:\n            frequencies.append(finalFrequency)\n    #If
        the frequency didn&amp;#39;t occur yet, loop again using the &amp;#39;while&amp;#39;
        loop.\n\nprint(doubleFrequency)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauq1ik/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauq1ik", "created":
        1543672047.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauq2s9",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "NeilNjae",
        "can_mod_post": false, "created_utc": 1543672081.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_6836y", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Haskell. All very pedestrian, but that''s fine. I thought it was easier to
        read by pulling out and naming the `merge` and `unRepeated` functions. Solution
        [on Github](https://github.com/NeilNjae/advent-of-code-18/blob/master/src/advent01/advent01.hs)\n\n    {-#
        LANGUAGE NegativeLiterals #-}\n    {-# LANGUAGE OverloadedStrings #-}\n\n    import
        Data.Text (Text)\n    import qualified Data.Text.IO as TIO\n\n    import Data.Void
        (Void)\n    import Text.Megaparsec\n    import Text.Megaparsec.Char\n    import
        qualified Text.Megaparsec.Char.Lexer as L\n    import qualified Control.Applicative
        as CA\n\n    import Data.IntSet (IntSet)\n    import qualified Data.IntSet
        as S\n\n    main :: IO ()\n    main = do \n            text &lt;- TIO.readFile
        \"data/advent01.txt\"\n            let changes = successfulParse text\n            print
        $ part1 changes\n            print $ part2 changes\n\n    part1 :: [Int] -&gt;
        Int\n    part1 = sum \n\n    part2 :: [Int] -&gt; Int\n    part2 = snd . head
        . dropWhile unRepeated . scanl merge (S.empty, 0) . cycle \n\n    merge ::
        (IntSet, Int) -&gt; Int -&gt; (IntSet, Int)\n    merge (frequencies, frequency)
        change = (S.insert frequency frequencies, frequency + change)\n\n    unRepeated
        :: (IntSet, Int) -&gt; Bool\n    unRepeated (frequencies, frequency) = frequency
        `S.notMember` frequencies\n\n    -- Parse the input file\n    type Parser
        = Parsec Void Text\n\n    sc :: Parser ()\n    sc = L.space (skipSome spaceChar)
        CA.empty CA.empty\n\n    lexeme  = L.lexeme sc\n    integer = lexeme L.decimal\n    signedInteger
        = L.signed sc integer\n\n    changesP = many signedInteger\n\n    successfulParse
        :: Text -&gt; [Int]\n    successfulParse input = \n            case parse
        changesP \"input\" input of\n                    Left  _err -&gt; [] -- TIO.putStr
        $ T.pack $ parseErrorPretty err\n                    Right changes -&gt; changes     ",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Haskell. All very pedestrian,
        but that&amp;#39;s fine. I thought it was easier to read by pulling out and
        naming the &lt;code&gt;merge&lt;/code&gt; and &lt;code&gt;unRepeated&lt;/code&gt;
        functions. Solution &lt;a href=\"https://github.com/NeilNjae/advent-of-code-18/blob/master/src/advent01/advent01.hs\"&gt;on
        Github&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{-# LANGUAGE NegativeLiterals
        #-}\n{-# LANGUAGE OverloadedStrings #-}\n\nimport Data.Text (Text)\nimport
        qualified Data.Text.IO as TIO\n\nimport Data.Void (Void)\nimport Text.Megaparsec\nimport
        Text.Megaparsec.Char\nimport qualified Text.Megaparsec.Char.Lexer as L\nimport
        qualified Control.Applicative as CA\n\nimport Data.IntSet (IntSet)\nimport
        qualified Data.IntSet as S\n\nmain :: IO ()\nmain = do \n        text &amp;lt;-
        TIO.readFile &amp;quot;data/advent01.txt&amp;quot;\n        let changes =
        successfulParse text\n        print $ part1 changes\n        print $ part2
        changes\n\npart1 :: [Int] -&amp;gt; Int\npart1 = sum \n\npart2 :: [Int] -&amp;gt;
        Int\npart2 = snd . head . dropWhile unRepeated . scanl merge (S.empty, 0)
        . cycle \n\nmerge :: (IntSet, Int) -&amp;gt; Int -&amp;gt; (IntSet, Int)\nmerge
        (frequencies, frequency) change = (S.insert frequency frequencies, frequency
        + change)\n\nunRepeated :: (IntSet, Int) -&amp;gt; Bool\nunRepeated (frequencies,
        frequency) = frequency `S.notMember` frequencies\n\n-- Parse the input file\ntype
        Parser = Parsec Void Text\n\nsc :: Parser ()\nsc = L.space (skipSome spaceChar)
        CA.empty CA.empty\n\nlexeme  = L.lexeme sc\ninteger = lexeme L.decimal\nsignedInteger
        = L.signed sc integer\n\nchangesP = many signedInteger\n\nsuccessfulParse
        :: Text -&amp;gt; [Int]\nsuccessfulParse input = \n        case parse changesP
        &amp;quot;input&amp;quot; input of\n                Left  _err -&amp;gt; []
        -- TIO.putStr $ T.pack $ parseErrorPretty err\n                Right changes
        -&amp;gt; changes     \n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauq2s9/", "subreddit_type":
        "public", "locked": false, "name": "t1_eauq2s9", "created": 1543672081.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eauq9k8", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Martiniis", "can_mod_post": false, "created_utc":
        1543672272.0, "send_replies": true, "parent_id": "t3_a20646", "score": 1,
        "author_fullname": "t2_l4y7q64", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "In C#:\n\n        static
        void Main()\n        {\n            string[] lines = System.IO.File.ReadAllLines(\"numbers.txt\");\n            Part1(lines);\n            Part2(lines);\n        }\n    \n        static
        void Part1(string[] lines)\n        {\n            int answer = 0;\n            foreach
        (var line in lines)\n            {\n                answer += int.Parse(line);\n            }\n            Console.WriteLine(answer);\n        }\n    \n        static
        void Part2(string[] lines)\n        {\n            HashSet&lt;int&gt; frequencies
        = new HashSet&lt;int&gt;();\n            var answer = 0;\n            int
        i = 0;\n            while (true)\n            {\n                if (!frequencies.Add(answer))\n                {\n                    Console.WriteLine(answer);\n                    break;\n                }\n                answer
        += int.Parse(lines[i % lines.Length]);\n                i++;\n            }\n        }\n\n&amp;#x200B;",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In C#:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    static
        void Main()\n    {\n        string[] lines = System.IO.File.ReadAllLines(&amp;quot;numbers.txt&amp;quot;);\n        Part1(lines);\n        Part2(lines);\n    }\n\n    static
        void Part1(string[] lines)\n    {\n        int answer = 0;\n        foreach
        (var line in lines)\n        {\n            answer += int.Parse(line);\n        }\n        Console.WriteLine(answer);\n    }\n\n    static
        void Part2(string[] lines)\n    {\n        HashSet&amp;lt;int&amp;gt; frequencies
        = new HashSet&amp;lt;int&amp;gt;();\n        var answer = 0;\n        int
        i = 0;\n        while (true)\n        {\n            if (!frequencies.Add(answer))\n            {\n                Console.WriteLine(answer);\n                break;\n            }\n            answer
        += int.Parse(lines[i % lines.Length]);\n            i++;\n        }\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauq9k8/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauq9k8", "created":
        1543672272.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauqwrn",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "cr5315",
        "can_mod_post": false, "created_utc": 1543672927.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_5l6ou", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Kotlin:\n\n    fun partOne(input: String): Int = inputAsIntList(input).sum()\n\n    fun
        partTwo(input: String): Int {\n        val frequencies = inputAsIntList(input)\n        var
        currentFrequency = 0\n        val pastFrequencies = HashSet&lt;Int&gt;()\n        pastFrequencies.add(currentFrequency)
        // The first frequency counts I guess\n\n        while (true) {\n            for
        (frequency in frequencies) {\n                currentFrequency += frequency\n\n                if
        (pastFrequencies.contains(currentFrequency)) return currentFrequency\n                else
        pastFrequencies.add(currentFrequency)\n            }\n        }\n    }\n\n    private
        fun inputAsIntList(input: String): List&lt;Int&gt; {\n        return input.replace(\"+\",
        \"\").split(\"\\n\").map { it.trim().toInt() }\n    }", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Kotlin:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fun partOne(input:
        String): Int = inputAsIntList(input).sum()\n\nfun partTwo(input: String):
        Int {\n    val frequencies = inputAsIntList(input)\n    var currentFrequency
        = 0\n    val pastFrequencies = HashSet&amp;lt;Int&amp;gt;()\n    pastFrequencies.add(currentFrequency)
        // The first frequency counts I guess\n\n    while (true) {\n        for (frequency
        in frequencies) {\n            currentFrequency += frequency\n\n            if
        (pastFrequencies.contains(currentFrequency)) return currentFrequency\n            else
        pastFrequencies.add(currentFrequency)\n        }\n    }\n}\n\nprivate fun
        inputAsIntList(input: String): List&amp;lt;Int&amp;gt; {\n    return input.replace(&amp;quot;+&amp;quot;,
        &amp;quot;&amp;quot;).split(&amp;quot;\\n&amp;quot;).map { it.trim().toInt()
        }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauqwrn/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauqwrn", "created":
        1543672927.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaurf99",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "leente",
        "can_mod_post": false, "created_utc": 1543673462.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_3n4a1", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Elixir:\n\n    def find_repeat_frequency(numbers) when is_list(numbers) do\n      starting_frequency
        = 0\n      iterate(numbers, [], starting_frequency, MapSet.new([starting_frequency]))\n    end\n\n    def
        iterate(original_list, current_list, current_frequency, seen_frequencies)
        do\n      {current_change, current_list} = next_change(current_list, original_list)\n      current_frequency
        = current_frequency + current_change\n      if MapSet.member?(seen_frequencies,
        current_frequency) do\n        current_frequency\n      else\n        seen_frequencies
        = MapSet.put(seen_frequencies, current_frequency)\n        iterate(original_list,
        current_list, current_frequency, seen_frequencies)\n      end\n    end\n\n    defp
        next_change([], [head | rest]), do: {head, rest}\n    defp next_change([head
        | rest], _), do: {head, rest}\n\n[Complete solution](https://github.com/bagilevi/adventofcode2018/blob/master/lib/day1.ex)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Elixir:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        find_repeat_frequency(numbers) when is_list(numbers) do\n  starting_frequency
        = 0\n  iterate(numbers, [], starting_frequency, MapSet.new([starting_frequency]))\nend\n\ndef
        iterate(original_list, current_list, current_frequency, seen_frequencies)
        do\n  {current_change, current_list} = next_change(current_list, original_list)\n  current_frequency
        = current_frequency + current_change\n  if MapSet.member?(seen_frequencies,
        current_frequency) do\n    current_frequency\n  else\n    seen_frequencies
        = MapSet.put(seen_frequencies, current_frequency)\n    iterate(original_list,
        current_list, current_frequency, seen_frequencies)\n  end\nend\n\ndefp next_change([],
        [head | rest]), do: {head, rest}\ndefp next_change([head | rest], _), do:
        {head, rest}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/bagilevi/adventofcode2018/blob/master/lib/day1.ex\"&gt;Complete
        solution&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaurf99/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaurf99", "created":
        1543673462.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 138, "name": "t1_eaus1s2", "id": "eaus1s2", "parent_id":
        "t3_a20646", "depth": 0, "children": ["eaus1s2", "eausevj", "eauslbf", "eauxv0w",
        "eauw6ni", "eauul84", "eauv9xr", "eav45x9", "eauznje", "eauwvxm", "eaux31y",
        "eauwr4j", "eav4npl", "eauxpch", "eauxdjb", "eaw0rwz", "eav71zb", "eav6ivo",
        "eav92fa", "eav35hx", "eav68wo", "eauy2b2", "eav3und", "eauzo1v", "eauxmgr",
        "eavpjb0", "eavk971", "eavka6a", "eauy6tv", "eavezws", "eavapu5", "eaw4s3l",
        "eaw83ko", "eawnkti", "eavbp7h", "eax7kwh", "eavijqj", "eavd548", "eavbjea",
        "eav7br5", "eav9ion", "eaw6vng", "eaw8fpa", "eaw8c0z", "eav7ht0", "eavpbya",
        "eavi0um", "eavab0v", "eavgy5q", "eavgv3w", "eav9dru", "eayarcr", "eavrlkv",
        "eavtdpe", "eaxtle6", "eax6yvg", "eavrj80", "eazrcov", "eavkiam", "eawsr3i",
        "eavum92", "eavdlij", "eawadl9", "eayp728", "eb0ytjv", "eb2ss04", "eazquo1",
        "eay3qee", "eb5theq", "eavgcz2", "eavgdd9", "eb3bxwl", "eayqzud", "eavxq3s",
        "eavje9e", "ebad6id", "eavko75", "eavo7lt", "eavulp5", "eaxcfyt", "eaw57te",
        "eawxtvm", "eawvahl", "eawbkkd", "eb353sd", "eay7fst", "eazm07y", "eawlwtk",
        "eawiqeu", "ec9dysx", "eb057u0", "ebddk53", "eavnks9", "eb7prl5", "eayrr8u",
        "eb1v3fd", "eb82izv", "eazhd9t", "eaxia69", "eaxi2o5", "eaw07k1", "eayexvu",
        "eb724w7", "ebqhbfx", "eb84elp", "eaykqhd", "eb9y4sj", "eau6362", "eavo2s6",
        "ebo5h84", "eawjz4q", "eb3kasd", "ebi3k6f", "eb3q84i", "eb8ltj1", "ebbq2nh",
        "eb0nhk6", "ebqh2us", "ebfuouy", "eb2ybtj", "eavs5eb", "eaw1i3z", "eavxd26",
        "eboyobz"]}}], true]], [0, 12, "attr", "things"], [12, 13, "call", ["t1_eau5vkn"]],
        [13, 14, "attr", "focus"], [14, 15, "call", []], [0, 16, "attr", "things"],
        [16, 17, "call", ["None"]], [17, 18, "attr", "filter"], [18, 19, "call", [".morechildren"]],
        [19, 20, "attr", "remove"], [20, 21, "call", []]], "success": true}'
  recorded_at: Sat, 08 Mar 2025 23:21:34 GMT
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:21:35 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=W9dTGjLhzsEBhlkj4O; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sat, 08 Mar 2025 23:21:35 GMT
- request:
    method: post
    uri: https://oauth.reddit.com/api/morechildren.json
    body:
      encoding: UTF-8
      string: link_id=t3_a20646&children=eaus1s2,eausevj,eauslbf,eauxv0w,eauw6ni,eauul84,eauv9xr,eav45x9,eauznje,eauwvxm,eaux31y,eauwr4j,eav4npl,eauxpch,eauxdjb,eaw0rwz,eav71zb,eav6ivo,eav92fa,eav35hx,eav68wo,eauy2b2,eav3und,eauzo1v,eauxmgr,eavpjb0,eavk971,eavka6a,eauy6tv,eavezws,eavapu5,eaw4s3l,eaw83ko,eawnkti,eavbp7h,eax7kwh,eavijqj,eavd548,eavbjea,eav7br5,eav9ion,eaw6vng,eaw8fpa,eaw8c0z,eav7ht0,eavpbya,eavi0um,eavab0v,eavgy5q,eavgv3w,eav9dru,eayarcr,eavrlkv,eavtdpe,eaxtle6,eax6yvg,eavrj80,eazrcov,eavkiam,eawsr3i,eavum92,eavdlij,eawadl9,eayp728,eb0ytjv,eb2ss04,eazquo1,eay3qee,eb5theq,eavgcz2,eavgdd9,eb3bxwl,eayqzud,eavxq3s,eavje9e,ebad6id,eavko75,eavo7lt,eavulp5,eaxcfyt,eaw57te,eawxtvm,eawvahl,eawbkkd,eb353sd,eay7fst,eazm07y,eawlwtk,eawiqeu,ec9dysx,eb057u0,ebddk53,eavnks9,eb7prl5,eayrr8u,eb1v3fd,eb82izv,eazhd9t,eaxia69,eaxi2o5,eaw07k1,eayexvu,eb724w7,ebqhbfx,eb84elp,eaykqhd,eb9y4sj,eau6362,eavo2s6,ebo5h84,eawjz4q,eb3kasd,ebi3k6f,eb3q84i,eb8ltj1,ebbq2nh,eb0nhk6,ebqh2us,ebfuouy,eb2ybtj,eavs5eb,eaw1i3z,eavxd26,eboyobz
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '50099'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      set-cookie:
      - loid=000000001ksjdmr340.2.1741476095867.Z0FBQUFBQm56TkVBb204SVRUaGpZWEdKVWJwVGdTNDJGZmpmS01YUHRteU9ucVgxcEU4OHZuV09WN09XZmUzV2pkMDF0RzJTS2Y3cFRIeENhVElLOE1KdHJWTzcwbVAtajVWSzdHU3BiazlaMXJpSzFKSjBIdWxaRVlRTmhKbHJJMzI2TTAtbVVlV1g;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Mon, 08-Mar-2027 23:21:36
        GMT; secure, session_tracker=mmqiagoeqegglefgao.0.1741476095882.Z0FBQUFBQm56TkVBQWpicDAyNmgzbExzQVo0R0lKTWdOZXhEVk9SSTFDdmdtYnFsLUphQUU4WXBtdGI1R0VRVXpfYW13bFRjMnhUandqZXNzNHhmSGI5cTlUbUp1ZkFWZmRGZzA3RlYxY1dqVmlnMTFuSGRBNVloTjVLS1dSRHNIZWRxcEhIZ19XS2I;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 01:21:36
        GMT; secure, edgebucket=7uFhe0GJBM3bIkNeC1; Domain=reddit.com; Max-Age=63071999;
        Path=/;  secure
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '8'
      x-ratelimit-remaining:
      - '92.0'
      x-ratelimit-reset:
      - '504'
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:21:36 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"jquery": [[0, 1, "call", ["body"]], [1, 2, "attr", "find"], [2, 3,
        "call", [".status"]], [3, 4, "attr", "hide"], [4, 5, "call", []], [5, 6, "attr",
        "html"], [6, 7, "call", [""]], [7, 8, "attr", "end"], [8, 9, "call", []],
        [0, 10, "attr", "insert_things"], [10, 11, "call", [[{"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543682300.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eaus1s2", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "geko123",
        "can_mod_post": false, "created_utc": 1543674113.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_7qx0z", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Python 3**\n\nPart 1:\n\n    input = open(\"input.txt\").read().split(\"\\n\")[:-1]\n    \n    print(sum([int(i)
        for i in input]))\n\nPart 2:\n\n    input = open(\"input.txt\").read().split(\"\\n\")[:-1]\n    \n    numbers
        = [int(i) for i in input]\n    \n    f = 0\n    freqs = [0]\n    i = 1\n    \n    for
        n in numbers:\n        f += n\n        freqs.append(f)\n    \n    final =
        freqs[-1]\n    \n    rmin = 999999999\n    imin = len(freqs)\n    fj = 0 \n    \n    for
        i in range(1, len(freqs)):\n        for j in range(len(freqs)):\n            if
        i != j and (freqs[j] - freqs[i]) % final == 0:\n                reps = int((freqs[j]
        - freqs[i]) / final)\n                if 0 &lt;= reps &lt;= rmin:\n                    if
        (reps == rmin and i &lt; imin) or reps &lt; rmin:\n                        rmin,
        imin, fj = reps, i, freqs[j]\n    \n    print(fj) \n\nEdit: I was getting
        impatient getting part two to run just by looping until I found a duplicate,
        so I decided to just work out what the first duplicate I would see would be.\n\n&amp;#x200B;\n\nEdit
        2: So my initial mistake was using a list instead of a set for the seen values.
        Here is my solution using a set, but I still like my initial solution.\n\n    input
        = open(\"input.txt\").read().split(\"\\n\")[:-1]\n    \n    numbers = [int(i)
        for i in input]\n    \n    f, i, freqs = 0, 0, set()\n    \n    while f not
        in freqs:\n        freqs.add(f)\n        f += numbers[i%len(numbers)]\n        i
        += 1\n    \n    print(f)\n\n&amp;#x200B;", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python 3&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;input = open(&amp;quot;input.txt&amp;quot;).read().split(&amp;quot;\\n&amp;quot;)[:-1]\n\nprint(sum([int(i)
        for i in input]))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part 2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;input
        = open(&amp;quot;input.txt&amp;quot;).read().split(&amp;quot;\\n&amp;quot;)[:-1]\n\nnumbers
        = [int(i) for i in input]\n\nf = 0\nfreqs = [0]\ni = 1\n\nfor n in numbers:\n    f
        += n\n    freqs.append(f)\n\nfinal = freqs[-1]\n\nrmin = 999999999\nimin =
        len(freqs)\nfj = 0 \n\nfor i in range(1, len(freqs)):\n    for j in range(len(freqs)):\n        if
        i != j and (freqs[j] - freqs[i]) % final == 0:\n            reps = int((freqs[j]
        - freqs[i]) / final)\n            if 0 &amp;lt;= reps &amp;lt;= rmin:\n                if
        (reps == rmin and i &amp;lt; imin) or reps &amp;lt; rmin:\n                    rmin,
        imin, fj = reps, i, freqs[j]\n\nprint(fj) \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Edit:
        I was getting impatient getting part two to run just by looping until I found
        a duplicate, so I decided to just work out what the first duplicate I would
        see would be.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Edit
        2: So my initial mistake was using a list instead of a set for the seen values.
        Here is my solution using a set, but I still like my initial solution.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;input
        = open(&amp;quot;input.txt&amp;quot;).read().split(&amp;quot;\\n&amp;quot;)[:-1]\n\nnumbers
        = [int(i) for i in input]\n\nf, i, freqs = 0, 0, set()\n\nwhile f not in freqs:\n    freqs.add(f)\n    f
        += numbers[i%len(numbers)]\n    i += 1\n\nprint(f)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaus1s2/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaus1s2", "created":
        1543674113.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543675770.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eausevj", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Vonyx",
        "can_mod_post": false, "created_utc": 1543674497.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_5tab8", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I feel retarded, why is this not working for part 2? Python 2.7\n\nGot it
        working now, I missed that you need to do several passes! Updated code to
        working solution.\n\n    from itertools import cycle\n    freq = 0\n    seen
        = set([0])\n    \n    with open(\"input/1.txt\", \"r\") as input_file:\n        for
        line in cycle(input_file):\n            freq += int(line)\n            if
        freq in seen:\n                print freq\n                break\n            seen.add(freq)    ",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I feel retarded, why
        is this not working for part 2? Python 2.7&lt;/p&gt;\n\n&lt;p&gt;Got it working
        now, I missed that you need to do several passes! Updated code to working
        solution.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from itertools import cycle\nfreq
        = 0\nseen = set([0])\n\nwith open(&amp;quot;input/1.txt&amp;quot;, &amp;quot;r&amp;quot;)
        as input_file:\n    for line in cycle(input_file):\n        freq += int(line)\n        if
        freq in seen:\n            print freq\n            break\n        seen.add(freq)    \n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eausevj/",
        "subreddit_type": "public", "locked": false, "name": "t1_eausevj", "created":
        1543674497.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eausy8f", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_eausevj", "score":
        2, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Read the instructions carefully. There\u2019s a part
        you\u2019re missing.", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_eausy8f", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Read the instructions carefully. There\u2019s
        a part you\u2019re missing.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "can_gild": false, "top_awarded_type": null, "unrepliable_reason": null, "author_flair_text_color":
        "dark", "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eausy8f/",
        "num_reports": null, "locked": false, "report_reasons": null, "created": 1543675033.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1543675033.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaut8cl",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Vonyx",
        "can_mod_post": false, "created_utc": 1543675328.0, "send_replies": true,
        "parent_id": "t1_eausy8f", "score": 2, "author_fullname": "t2_5tab8", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Ah, missed that you might need to do several passes. D''oh.", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Ah, missed that you might need to do several
        passes. D&amp;#39;oh.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaut8cl/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaut8cl", "created":
        1543675328.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eautoo6", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_eaut8cl", "score":
        2, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": ":) ", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_eautoo6", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;:) &lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eautoo6/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1543675812.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543675812.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauslbf",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "pakraaaw",
        "can_mod_post": false, "created_utc": 1543674674.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_2fvbh0sg", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "In Julia:\n\nSet-up: \n\n    file = open(\"input1.txt\")\n    lines = readlines(file)\n    lines
        = parse.(Float64,lines)\n\nPart 1:\n\n    sum(lines)\n\nPart 2:\n\n    function
        part2()\n        freq_array = Float64[]\n        freq_found = 0\n        run_sum
        = 0\n        while freq_found == 0\n            for freq in lines\n                run_sum
        += freq\n                if run_sum in freq_array\n                    return
        run_sum\n                    freq_found += 1\n                    break\n                else\n                    push!(freq_array,
        run_sum)\n                end\n            end\n        end\n    end\n    \n    part2()\n\nPart
        2 should take around 5 seconds to run.\n\n&amp;#x200B;", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;In Julia:&lt;/p&gt;\n\n&lt;p&gt;Set-up: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;file
        = open(&amp;quot;input1.txt&amp;quot;)\nlines = readlines(file)\nlines = parse.(Float64,lines)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;sum(lines)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function part2()\n    freq_array =
        Float64[]\n    freq_found = 0\n    run_sum = 0\n    while freq_found == 0\n        for
        freq in lines\n            run_sum += freq\n            if run_sum in freq_array\n                return
        run_sum\n                freq_found += 1\n                break\n            else\n                push!(freq_array,
        run_sum)\n            end\n        end\n    end\nend\n\npart2()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2 should take around 5 seconds to run.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauslbf/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauslbf", "created":
        1543674674.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauul84",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "passsy",
        "can_mod_post": false, "created_utc": 1543676710.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_b233o", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Solution in Dart. Porting pythons `cycle` was super easy in Dart with a sync*
        function\n\n```dart\nimport ''dart:io'';\n\nint changeFrequency(List&lt;int&gt;
        list) =&gt; list.reduce((a, b) =&gt; a + b);\n\nint frequencyReachedTwice(List&lt;int&gt;
        list) {\n  final found = [0];\n  var freq = 0;\n  for (var next in _cycle(list))
        {\n    freq += next;\n    if (found.contains(freq)) {\n      return freq;\n    }
        else {\n      found.add(freq);\n    }\n  }\n}\n\nIterable&lt;T&gt; _cycle&lt;T&gt;(List&lt;T&gt;
        list) sync* {\n  while (true) {\n    yield* list;\n  }\n}\n\nmain() {\n  List&lt;int&gt;
        frequencies = File(\"input.txt\")\n      .readAsStringSync()\n      .trim()\n      .split(\"\\n\")\n      .map((it)
        =&gt; int.parse(it))\n      .toList();\n\n  print(changeFrequency(frequencies));\n  print(frequencyReachedTwice(frequencies));\n}\n```",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Solution in Dart. Porting
        pythons &lt;code&gt;cycle&lt;/code&gt; was super easy in Dart with a sync*
        function&lt;/p&gt;\n\n&lt;p&gt;```dart\nimport &amp;#39;dart:io&amp;#39;;&lt;/p&gt;\n\n&lt;p&gt;int
        changeFrequency(List&amp;lt;int&amp;gt; list) =&amp;gt; list.reduce((a, b)
        =&amp;gt; a + b);&lt;/p&gt;\n\n&lt;p&gt;int frequencyReachedTwice(List&amp;lt;int&amp;gt;
        list) {\n  final found = [0];\n  var freq = 0;\n  for (var next in _cycle(list))
        {\n    freq += next;\n    if (found.contains(freq)) {\n      return freq;\n    }
        else {\n      found.add(freq);\n    }\n  }\n}&lt;/p&gt;\n\n&lt;p&gt;Iterable&amp;lt;T&amp;gt;
        _cycle&amp;lt;T&amp;gt;(List&amp;lt;T&amp;gt; list) sync* {\n  while (true)
        {\n    yield* list;\n  }\n}&lt;/p&gt;\n\n&lt;p&gt;main() {\n  List&amp;lt;int&amp;gt;
        frequencies = File(&amp;quot;input.txt&amp;quot;)\n      .readAsStringSync()\n      .trim()\n      .split(&amp;quot;\\n&amp;quot;)\n      .map((it)
        =&amp;gt; int.parse(it))\n      .toList();&lt;/p&gt;\n\n&lt;p&gt;print(changeFrequency(frequencies));\n  print(frequencyReachedTwice(frequencies));\n}\n```&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauul84/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauul84", "created":
        1543676710.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eauv9xr", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_a20646", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "In Python3\n\nPart 1:\n    \n    with open(\"input.txt\",\"r\")
        as file:\n        lines = file.readlines()\n    \n    counter = 0\n    \n    for
        line in lines:\n        counter += int(line)\n    print(counter)\n\nPart 2:\n\n    with
        open(\"input.txt\",\"r\") as file:\n        lines = file.readlines()\n    \n    counter
        = 0\n    counterList = []\n    cont = True\n    i = 0\n    \n    def returnDupeFrequency(counter,
        counterList):\n        cont = True\n        for line in lines:\n            counter
        += int(line)\n            if counter in counterList:\n                cont
        = False\n                return (counter, counterList, cont)\n            counterList.append(counter)\n        return
        (counter, counterList, cont)\n    while(cont == True):\n        i+=1\n        counter,
        counterList, cont = returnDupeFrequency(counter, counterList)\n    \n    print(counter)",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_eauv9xr",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In
        Python3&lt;/p&gt;\n\n&lt;p&gt;Part 1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with
        open(&amp;quot;input.txt&amp;quot;,&amp;quot;r&amp;quot;) as file:\n    lines
        = file.readlines()\n\ncounter = 0\n\nfor line in lines:\n    counter += int(line)\nprint(counter)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with open(&amp;quot;input.txt&amp;quot;,&amp;quot;r&amp;quot;)
        as file:\n    lines = file.readlines()\n\ncounter = 0\ncounterList = []\ncont
        = True\ni = 0\n\ndef returnDupeFrequency(counter, counterList):\n    cont
        = True\n    for line in lines:\n        counter += int(line)\n        if counter
        in counterList:\n            cont = False\n            return (counter, counterList,
        cont)\n        counterList.append(counter)\n    return (counter, counterList,
        cont)\nwhile(cont == True):\n    i+=1\n    counter, counterList, cont = returnDupeFrequency(counter,
        counterList)\n\nprint(counter)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauv9xr/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1543677372.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543677372.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauw6ni",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "damarus999",
        "can_mod_post": false, "created_utc": 1543678249.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_i5w83", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My solution in Kotlin\n\n```\nfun main(args: Array&lt;String&gt;) {\n    print(\"Enter
        your input: \")\n    val scanner = Scanner(System.`in`).useDelimiter(\"\\n\")\n    val
        frequencyChanges = mutableListOf&lt;Long&gt;()\n    while (scanner.hasNext())
        {\n        frequencyChanges.add(scanner.next().toLong())\n    }\n\n    println(\"The
        resulting frequency is ${frequencyChanges.sum()}\")\n    val frequenciesReached
        = mutableSetOf&lt;Long&gt;()\n\n    frequencyChanges.repeatIndefinitely().fold(0L)
        { sumSoFar, nextValue -&gt;\n        if (!frequenciesReached.add(sumSoFar))
        {\n            println(\"The first frequency reached twice is $sumSoFar\")\n            return\n        }\n        sumSoFar
        + nextValue\n    }\n}\n\nfun &lt;T&gt; List&lt;T&gt;.repeatIndefinitely():
        Sequence&lt;T&gt; =\n    generateSequence { this }.flatten()\n```\n\n&amp;#x200B;",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My solution in Kotlin&lt;/p&gt;\n\n&lt;p&gt;``&lt;code&gt;\nfun
        main(args: Array&amp;lt;String&amp;gt;) {\n    print(&amp;quot;Enter your
        input: &amp;quot;)\n    val scanner = Scanner(System.&lt;/code&gt;in`).useDelimiter(&amp;quot;\\n&amp;quot;)\n    val
        frequencyChanges = mutableListOf&amp;lt;Long&amp;gt;()\n    while (scanner.hasNext())
        {\n        frequencyChanges.add(scanner.next().toLong())\n    }&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;println(&amp;quot;The
        resulting frequency is ${frequencyChanges.sum()}&amp;quot;)\nval frequenciesReached
        = mutableSetOf&amp;lt;Long&amp;gt;()\n\nfrequencyChanges.repeatIndefinitely().fold(0L)
        { sumSoFar, nextValue -&amp;gt;\n    if (!frequenciesReached.add(sumSoFar))
        {\n        println(&amp;quot;The first frequency reached twice is $sumSoFar&amp;quot;)\n        return\n    }\n    sumSoFar
        + nextValue\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n\n&lt;p&gt;fun
        &amp;lt;T&amp;gt; List&amp;lt;T&amp;gt;.repeatIndefinitely(): Sequence&amp;lt;T&amp;gt;
        =\n    generateSequence { this }.flatten()\n```&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauw6ni/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauw6ni", "created":
        1543678249.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauwr4j",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "freeducks",
        "can_mod_post": false, "created_utc": 1543678796.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_f3p29", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Solution in Rust - would like to know if there''s a better way to do the
        work loop in part 2. Feels icky to do the logic in the take\\_while(), and
        to have to consume the iterator with an unused variable. Any ideas (other
        than a for loop, obviously :) )?\n\n    use std::collections::HashSet;\n    \n    fn
        part_1_solve(input_str: &amp;str) -&gt; i32 {\n        input_str.lines().map(|x|
        x.parse::&lt;i32&gt;().unwrap()).sum()\n    }\n    \n    fn part_2_solve(input_str:
        &amp;str) -&gt; i32 {\n        let mut frequencies = HashSet::new();\n        let
        mut frequency = 0;\n     \n        let _ = input_str.lines().cycle().map(|x|
        x.parse::&lt;i32&gt;().unwrap()).take_while(|x| {\n            frequency +=
        x;\n            frequencies.insert(frequency)\n        }).count();\n    \n        frequency\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Solution in Rust - would
        like to know if there&amp;#39;s a better way to do the work loop in part 2.
        Feels icky to do the logic in the take_while(), and to have to consume the
        iterator with an unused variable. Any ideas (other than a for loop, obviously
        :) )?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use std::collections::HashSet;\n\nfn
        part_1_solve(input_str: &amp;amp;str) -&amp;gt; i32 {\n    input_str.lines().map(|x|
        x.parse::&amp;lt;i32&amp;gt;().unwrap()).sum()\n}\n\nfn part_2_solve(input_str:
        &amp;amp;str) -&amp;gt; i32 {\n    let mut frequencies = HashSet::new();\n    let
        mut frequency = 0;\n\n    let _ = input_str.lines().cycle().map(|x| x.parse::&amp;lt;i32&amp;gt;().unwrap()).take_while(|x|
        {\n        frequency += x;\n        frequencies.insert(frequency)\n    }).count();\n\n    frequency\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauwr4j/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauwr4j", "created":
        1543678796.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauwvxm",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "yorgle",
        "can_mod_post": false, "created_utc": 1543678913.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_x719", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Spent a good 15 minutes trying to figure out why my #2 wasn''t working...
        turns out i had an extra line in my input file that was messing it up.  blagh!  hehe.  I
        did day 1 in Perl for no real reason other than it was easy to get it working
        quickly with reading in lines and doing something with the lines.... and my
        code is my standard perl code... so it looks like C, and isn''t very perl-ish...
        so no reason to post it here. ;D", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Spent a good 15 minutes trying to figure out why
        my #2 wasn&amp;#39;t working... turns out i had an extra line in my input
        file that was messing it up.  blagh!  hehe.  I did day 1 in Perl for no real
        reason other than it was easy to get it working quickly with reading in lines
        and doing something with the lines.... and my code is my standard perl code...
        so it looks like C, and isn&amp;#39;t very perl-ish... so no reason to post
        it here. ;D&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauwvxm/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauwvxm", "created":
        1543678913.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaux31y",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "harirarules",
        "can_mod_post": false, "created_utc": 1543679094.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_2pboqjp6", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "D (dlang), both parts :\n\n    import std.stdio;\n    import std.range;\n    import
        std.conv;\n    import std.algorithm;\n    import std.array;\n\n    void main()\n    {\n        auto
        input = stdin.byLine.map!(to!int).array;\n        input.sum.writeln;\n\n        int[int]
        frequencies;\n        int frequency;\n        foreach(n; input.cycle)\n        {\n            frequency
        += n;\n            if(frequency in frequencies)\n            {\n                frequency.writeln;\n                return;\n            }\n            frequencies[frequency]
        = 0;\n        }\n    }", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;D
        (dlang), both parts :&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import std.stdio;\nimport
        std.range;\nimport std.conv;\nimport std.algorithm;\nimport std.array;\n\nvoid
        main()\n{\n    auto input = stdin.byLine.map!(to!int).array;\n    input.sum.writeln;\n\n    int[int]
        frequencies;\n    int frequency;\n    foreach(n; input.cycle)\n    {\n        frequency
        += n;\n        if(frequency in frequencies)\n        {\n            frequency.writeln;\n            return;\n        }\n        frequencies[frequency]
        = 0;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaux31y/", "subreddit_type":
        "public", "locked": false, "name": "t1_eaux31y", "created": 1543679094.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eauxdjb", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "wlockiv", "can_mod_post": false, "created_utc":
        1543679362.0, "send_replies": true, "parent_id": "t3_a20646", "score": 1,
        "author_fullname": "t2_v90g9", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "learned about JavaScript''s
        `some` array function!\n\n```javascript\nfunction findFirstDuplicate(freqChanges)
        {\n  let freqs = [0]\n  let freqs_idx = 0\n  let firstDuplicate\n\n  while
        (!freqs.includes(firstDuplicate)) {\n    freqChanges.some(freqChange =&gt;
        {\n      let newFreq = freqs[freqs_idx] + freqChange\n      if (freqs.includes(newFreq))
        {\n        firstDuplicate = newFreq\n        return true\n      } else {\n        freqs.push(newFreq)\n        freqs_idx++\n        return
        false\n      }\n    })\n  }\n\n  return firstDuplicate\n}\n```", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;learned about JavaScript&amp;#39;s &lt;code&gt;some&lt;/code&gt;
        array function!&lt;/p&gt;\n\n&lt;p&gt;```javascript\nfunction findFirstDuplicate(freqChanges)
        {\n  let freqs = [0]\n  let freqs_idx = 0\n  let firstDuplicate&lt;/p&gt;\n\n&lt;p&gt;while
        (!freqs.includes(firstDuplicate)) {\n    freqChanges.some(freqChange =&amp;gt;
        {\n      let newFreq = freqs[freqs_idx] + freqChange\n      if (freqs.includes(newFreq))
        {\n        firstDuplicate = newFreq\n        return true\n      } else {\n        freqs.push(newFreq)\n        freqs_idx++\n        return
        false\n      }\n    })\n  }&lt;/p&gt;\n\n&lt;p&gt;return firstDuplicate\n}\n```&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauxdjb/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauxdjb", "created":
        1543679362.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauxmgr",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "L72_Elite_Kraken",
        "can_mod_post": false, "created_utc": 1543679585.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_16r83m", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "OCaml ([GitHub](https://github.com/leviroth/advent-of-code-2018/blob/master/src/day01.ml)):\n\n    open
        Core\n\n    module Part01 = struct\n      let solve input =\n        List.fold
        input ~init:0 ~f:(+)\n    end\n\n    module Part02 = struct\n      let solve
        input =\n        let input_cycle = Sequence.cycle_list_exn input in\n        Sequence.delayed_fold\n          input_cycle\n          ~init:(0,
        Int.Set.empty)\n          ~f:(fun (current_frequency, seen_frequencies) change
        ~k -&gt;\n              match Set.mem seen_frequencies current_frequency with\n              |
        true -&gt; current_frequency\n              | false -&gt;\n                let
        next_frequency = current_frequency + change in\n                let next_seen
        = Set.add seen_frequencies current_frequency in\n                k (next_frequency,
        next_seen))\n          ~finish:fst\n    end\n", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;OCaml (&lt;a href=\"https://github.com/leviroth/advent-of-code-2018/blob/master/src/day01.ml\"&gt;GitHub&lt;/a&gt;):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;open
        Core\n\nmodule Part01 = struct\n  let solve input =\n    List.fold input ~init:0
        ~f:(+)\nend\n\nmodule Part02 = struct\n  let solve input =\n    let input_cycle
        = Sequence.cycle_list_exn input in\n    Sequence.delayed_fold\n      input_cycle\n      ~init:(0,
        Int.Set.empty)\n      ~f:(fun (current_frequency, seen_frequencies) change
        ~k -&amp;gt;\n          match Set.mem seen_frequencies current_frequency with\n          |
        true -&amp;gt; current_frequency\n          | false -&amp;gt;\n            let
        next_frequency = current_frequency + change in\n            let next_seen
        = Set.add seen_frequencies current_frequency in\n            k (next_frequency,
        next_seen))\n      ~finish:fst\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauxmgr/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauxmgr", "created":
        1543679585.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauxpch",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "iLoveAGoodIDea",
        "can_mod_post": false, "created_utc": 1543679654.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_kfzes", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "my solutions in c#\n\n&amp;#x200B;\n\npublic int problem1A(List&lt;int&gt;
        listOfFrequencies)\n\n{\n\n//just go through the list and add up the numbers\n\nint
        sum = 0;\n\nsum = listOfFrequencies.Sum();\n\nreturn sum; \n\n}\n\n&amp;#x200B;\n\npublic
        int problem1B(List&lt;int&gt; listOfFrequencies)\n\n{\n\nHashSet&lt;int&gt;
        listOfFreqeunciesCount = new HashSet&lt;int&gt;();\n\nlistOfFreqeunciesCount.Add(0);\n\nint
        currentFreqeuncy = 0;\n\nfor (long i = 0; true; i++)\n\n{\n\ncurrentFreqeuncy
        += listOfFrequencies\\[(int)i % listOfFrequencies.Count\\];\n\nif (listOfFreqeunciesCount.Contains(currentFreqeuncy))\n\n{\n\nreturn
        currentFreqeuncy;\n\n}\n\nelse\n\n{\n\nlistOfFreqeunciesCount.Add(currentFreqeuncy);\n\n}\n\n}\n\n}\n\n&amp;#x200B;",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;my solutions in c#&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;public
        int problem1A(List&amp;lt;int&amp;gt; listOfFrequencies)&lt;/p&gt;\n\n&lt;p&gt;{&lt;/p&gt;\n\n&lt;p&gt;//just
        go through the list and add up the numbers&lt;/p&gt;\n\n&lt;p&gt;int sum =
        0;&lt;/p&gt;\n\n&lt;p&gt;sum = listOfFrequencies.Sum();&lt;/p&gt;\n\n&lt;p&gt;return
        sum; &lt;/p&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;public
        int problem1B(List&amp;lt;int&amp;gt; listOfFrequencies)&lt;/p&gt;\n\n&lt;p&gt;{&lt;/p&gt;\n\n&lt;p&gt;HashSet&amp;lt;int&amp;gt;
        listOfFreqeunciesCount = new HashSet&amp;lt;int&amp;gt;();&lt;/p&gt;\n\n&lt;p&gt;listOfFreqeunciesCount.Add(0);&lt;/p&gt;\n\n&lt;p&gt;int
        currentFreqeuncy = 0;&lt;/p&gt;\n\n&lt;p&gt;for (long i = 0; true; i++)&lt;/p&gt;\n\n&lt;p&gt;{&lt;/p&gt;\n\n&lt;p&gt;currentFreqeuncy
        += listOfFrequencies[(int)i % listOfFrequencies.Count];&lt;/p&gt;\n\n&lt;p&gt;if
        (listOfFreqeunciesCount.Contains(currentFreqeuncy))&lt;/p&gt;\n\n&lt;p&gt;{&lt;/p&gt;\n\n&lt;p&gt;return
        currentFreqeuncy;&lt;/p&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n\n&lt;p&gt;else&lt;/p&gt;\n\n&lt;p&gt;{&lt;/p&gt;\n\n&lt;p&gt;listOfFreqeunciesCount.Add(currentFreqeuncy);&lt;/p&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauxpch/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauxpch", "created":
        1543679654.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauy2b2",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "faxo1192",
        "can_mod_post": false, "created_utc": 1543679959.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_kpk4z", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Common Lisp\n```\n(defun part1 (file)\n  (with-open-file (s file)\n    (loop
        :for x = 0 :then (read s nil) :while x :sum x)))\n```\nHash tables should
        be faster than set-lists.\n```\n(defun part2 (file)\n  (with-open-file (s
        file)\n    (loop\n       :with freq = 0 :and history = nil\n       :for diff
        = (read s nil)\n       :when (null diff) :do (progn (file-position s 0)\n\t\t\t\t    (setq
        diff (read s nil)))\n       :do (incf freq diff)\n       :when (member freq
        history) :return freq\n       :do (pushnew freq history))))\n```\n", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Common Lisp\n&lt;code&gt;\n(defun part1
        (file)\n  (with-open-file (s file)\n    (loop :for x = 0 :then (read s nil)
        :while x :sum x)))\n&lt;/code&gt;\nHash tables should be faster than set-lists.\n&lt;code&gt;\n(defun
        part2 (file)\n  (with-open-file (s file)\n    (loop\n       :with freq = 0
        :and history = nil\n       :for diff = (read s nil)\n       :when (null diff)
        :do (progn (file-position s 0)\n                    (setq diff (read s nil)))\n       :do
        (incf freq diff)\n       :when (member freq history) :return freq\n       :do
        (pushnew freq history))))\n&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauy2b2/", "subreddit_type":
        "public", "locked": false, "name": "t1_eauy2b2", "created": 1543679959.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eauy6tv", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "markussss", "can_mod_post": false, "created_utc":
        1543680069.0, "send_replies": true, "parent_id": "t3_a20646", "score": 1,
        "author_fullname": "t2_5yib8", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "I did it in Javascript.
        Fun puzzle!\n\nFirst:\n\n    document\n        .body\n        .textContent\n        .trim()\n        .split(''\\n'')\n        .map(i
        =&gt; parseInt(i))\n        .reduce((car, cur) =&gt; car += cur, 0)\n\nSecond:\n\n    (function
        (car) {\n        car = document\n            .body\n            .textContent\n            .trim()\n            .split(''\\n'')\n            .map(i
        =&gt; parseInt(i))\n            .reduce((car, cur) =&gt; {\n                if
        (!car.seen[car.car]) car.seen[car.car] = 0\n                car.seen[car.car]++\n                if
        (car.seen[car.car] &gt; 1) return car\n                car.car += cur\n                return
        car\n            }, car)\n        if (Object.keys(car.seen).filter(k =&gt;
        car.seen[k] &gt; 1).length === 0) return arguments.callee(car)\n        else
        return car\n    })({car: 0, seen: {}}).car", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;I did it in Javascript. Fun puzzle!&lt;/p&gt;\n\n&lt;p&gt;First:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;document\n    .body\n    .textContent\n    .trim()\n    .split(&amp;#39;\\n&amp;#39;)\n    .map(i
        =&amp;gt; parseInt(i))\n    .reduce((car, cur) =&amp;gt; car += cur, 0)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Second:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(function
        (car) {\n    car = document\n        .body\n        .textContent\n        .trim()\n        .split(&amp;#39;\\n&amp;#39;)\n        .map(i
        =&amp;gt; parseInt(i))\n        .reduce((car, cur) =&amp;gt; {\n            if
        (!car.seen[car.car]) car.seen[car.car] = 0\n            car.seen[car.car]++\n            if
        (car.seen[car.car] &amp;gt; 1) return car\n            car.car += cur\n            return
        car\n        }, car)\n    if (Object.keys(car.seen).filter(k =&amp;gt; car.seen[k]
        &amp;gt; 1).length === 0) return arguments.callee(car)\n    else return car\n})({car:
        0, seen: {}}).car\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauy6tv/", "subreddit_type":
        "public", "locked": false, "name": "t1_eauy6tv", "created": 1543680069.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": 1543761325.0, "mod_reason_by": null, "banned_by": null, "ups": 1,
        "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauznje",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "rjsberry",
        "can_mod_post": false, "created_utc": 1543681301.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_mr3bvt4", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**RUST**\n\nPart 1:\n\n    const INPUT: &amp;str = include_str!(\"input/01.txt\");\n\n    fn
        main() {\n        println!(\n            \"{}\",\n            INPUT\n                .lines()\n                .map(|freq|
        freq.parse::&lt;i32&gt;().expect(\"Bad input data\"))\n                .sum::&lt;i32&gt;(),\n        );\n    }\n\nPart
        2:\n\n    #![feature(generators, generator_trait)]\n\n    use std::collections::HashSet;\n    use
        std::ops::{Generator, GeneratorState};\n\n    const INPUT: &amp;str = include_str!(\"input/01.txt\");\n\n    fn
        main() {\n        let mut accumulator = || {\n            let mut acc = 0_i32;\n            for
        f in INPUT.lines().cycle() {\n                acc += f.parse::&lt;i32&gt;().expect(\"Bad
        input data\");\n                yield acc;\n            }\n        };\n\n        let
        mut cache = HashSet::new();\n\n        while let GeneratorState::Yielded(f)
        = unsafe { accumulator.resume() } {\n            if !cache.insert(f) {\n                println!(\"{}\",
        f);\n                return;\n            }\n        }\n    }", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;RUST&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const INPUT: &amp;amp;str = include_str!(&amp;quot;input/01.txt&amp;quot;);\n\nfn
        main() {\n    println!(\n        &amp;quot;{}&amp;quot;,\n        INPUT\n            .lines()\n            .map(|freq|
        freq.parse::&amp;lt;i32&amp;gt;().expect(&amp;quot;Bad input data&amp;quot;))\n            .sum::&amp;lt;i32&amp;gt;(),\n    );\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#![feature(generators, generator_trait)]\n\nuse
        std::collections::HashSet;\nuse std::ops::{Generator, GeneratorState};\n\nconst
        INPUT: &amp;amp;str = include_str!(&amp;quot;input/01.txt&amp;quot;);\n\nfn
        main() {\n    let mut accumulator = || {\n        let mut acc = 0_i32;\n        for
        f in INPUT.lines().cycle() {\n            acc += f.parse::&amp;lt;i32&amp;gt;().expect(&amp;quot;Bad
        input data&amp;quot;);\n            yield acc;\n        }\n    };\n\n    let
        mut cache = HashSet::new();\n\n    while let GeneratorState::Yielded(f) =
        unsafe { accumulator.resume() } {\n        if !cache.insert(f) {\n            println!(&amp;quot;{}&amp;quot;,
        f);\n            return;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauznje/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauznje", "created":
        1543681301.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1606879177.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eauzo1v", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "MaxDeviant",
        "can_mod_post": false, "created_utc": 1543681313.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_5fe79", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Rust**\n\n    use std::collections::{HashSet, VecDeque};\n\n    #[derive(Debug,
        Clone)]\n    enum FrequencyChange {\n        Increase(i32),\n        Decrease(i32),\n    }\n\n    impl
        FrequencyChange {\n        pub fn from_str(input: &amp;str) -&gt; Self {\n            let
        mut characters = input.chars();\n            let sign = characters.next().unwrap();\n            let
        number = characters.collect::&lt;String&gt;().parse::&lt;i32&gt;().unwrap();\n            match
        sign {\n                ''+'' =&gt; FrequencyChange::Increase(number),\n                ''-''
        =&gt; FrequencyChange::Decrease(number),\n                c =&gt; panic!(\"Unexpected
        character ''{}''\", c),\n            }\n        }\n\n        pub fn apply(&amp;self,
        value: i32) -&gt; i32 {\n            match self {\n                FrequencyChange::Increase(n)
        =&gt; value + n,\n                FrequencyChange::Decrease(n) =&gt; value
        - n,\n            }\n        }\n    }\n\n    fn read_frequency_changes_from_input(input:
        &amp;str) -&gt; Vec&lt;FrequencyChange&gt; {\n        input.lines().map(FrequencyChange::from_str).collect()\n    }\n\n    fn
        calculate_frequency(changes: Vec&lt;FrequencyChange&gt;) -&gt; i32 {\n        changes.into_iter().fold(0,
        |acc, change| change.apply(acc))\n    }\n\n    fn find_first_repeated_frequency(changes:
        Vec&lt;FrequencyChange&gt;) -&gt; i32 {\n        let mut already_seen = HashSet::&lt;i32&gt;::new();\n        let
        mut pending_changes = VecDeque::from(changes.clone());\n\n        let mut
        frequency = 0;\n        already_seen.insert(frequency);\n\n        loop {\n            if
        pending_changes.is_empty() {\n                pending_changes.clone_from(&amp;VecDeque::from(changes.clone()));\n            }\n\n            let
        next_frequency = pending_changes.pop_front().unwrap().apply(frequency);\n\n            if
        already_seen.contains(&amp;next_frequency) {\n                break next_frequency;\n            }\n\n            already_seen.insert(next_frequency);\n            frequency
        = next_frequency;\n        }\n    }\n\n    fn part_one(input: &amp;str) -&gt;
        i32 {\n        calculate_frequency(read_frequency_changes_from_input(input))\n    }\n\n    fn
        part_two(input: &amp;str) -&gt; i32 {\n        find_first_repeated_frequency(read_frequency_changes_from_input(input))\n    }\n\n[source](https://github.com/maxdeviant/advent-of-code/tree/master/2018/src/01)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use
        std::collections::{HashSet, VecDeque};\n\n#[derive(Debug, Clone)]\nenum FrequencyChange
        {\n    Increase(i32),\n    Decrease(i32),\n}\n\nimpl FrequencyChange {\n    pub
        fn from_str(input: &amp;amp;str) -&amp;gt; Self {\n        let mut characters
        = input.chars();\n        let sign = characters.next().unwrap();\n        let
        number = characters.collect::&amp;lt;String&amp;gt;().parse::&amp;lt;i32&amp;gt;().unwrap();\n        match
        sign {\n            &amp;#39;+&amp;#39; =&amp;gt; FrequencyChange::Increase(number),\n            &amp;#39;-&amp;#39;
        =&amp;gt; FrequencyChange::Decrease(number),\n            c =&amp;gt; panic!(&amp;quot;Unexpected
        character &amp;#39;{}&amp;#39;&amp;quot;, c),\n        }\n    }\n\n    pub
        fn apply(&amp;amp;self, value: i32) -&amp;gt; i32 {\n        match self {\n            FrequencyChange::Increase(n)
        =&amp;gt; value + n,\n            FrequencyChange::Decrease(n) =&amp;gt; value
        - n,\n        }\n    }\n}\n\nfn read_frequency_changes_from_input(input: &amp;amp;str)
        -&amp;gt; Vec&amp;lt;FrequencyChange&amp;gt; {\n    input.lines().map(FrequencyChange::from_str).collect()\n}\n\nfn
        calculate_frequency(changes: Vec&amp;lt;FrequencyChange&amp;gt;) -&amp;gt;
        i32 {\n    changes.into_iter().fold(0, |acc, change| change.apply(acc))\n}\n\nfn
        find_first_repeated_frequency(changes: Vec&amp;lt;FrequencyChange&amp;gt;)
        -&amp;gt; i32 {\n    let mut already_seen = HashSet::&amp;lt;i32&amp;gt;::new();\n    let
        mut pending_changes = VecDeque::from(changes.clone());\n\n    let mut frequency
        = 0;\n    already_seen.insert(frequency);\n\n    loop {\n        if pending_changes.is_empty()
        {\n            pending_changes.clone_from(&amp;amp;VecDeque::from(changes.clone()));\n        }\n\n        let
        next_frequency = pending_changes.pop_front().unwrap().apply(frequency);\n\n        if
        already_seen.contains(&amp;amp;next_frequency) {\n            break next_frequency;\n        }\n\n        already_seen.insert(next_frequency);\n        frequency
        = next_frequency;\n    }\n}\n\nfn part_one(input: &amp;amp;str) -&amp;gt;
        i32 {\n    calculate_frequency(read_frequency_changes_from_input(input))\n}\n\nfn
        part_two(input: &amp;amp;str) -&amp;gt; i32 {\n    find_first_repeated_frequency(read_frequency_changes_from_input(input))\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/maxdeviant/advent-of-code/tree/master/2018/src/01\"&gt;source&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauzo1v/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauzo1v", "created":
        1543681313.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eav35hx",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "bongobeans",
        "can_mod_post": false, "created_utc": 1543684147.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_d3l90", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Javascript**\n\n    function partOne(input) {\n      let total = 0;\n      input.split(\"\\n\").forEach(val
        =&gt; {\n          total = eval(`${total} ${val}`);\n      });\n      return
        total;\n    }\n\n    function partTwo(input, currentVal = 0, frequencies =
        {}) {\n      let total = currentVal;\n      for (let val of input.split(\"\\n\"))
        {\n        total = eval(`${total} ${val}`);\n        if (!frequencies[total])
        {\n          frequencies[total] = total;\n        } else {\n          return
        total;\n        }\n      }\n      return partTwo(input, total, frequencies);\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function
        partOne(input) {\n  let total = 0;\n  input.split(&amp;quot;\\n&amp;quot;).forEach(val
        =&amp;gt; {\n      total = eval(`${total} ${val}`);\n  });\n  return total;\n}\n\nfunction
        partTwo(input, currentVal = 0, frequencies = {}) {\n  let total = currentVal;\n  for
        (let val of input.split(&amp;quot;\\n&amp;quot;)) {\n    total = eval(`${total}
        ${val}`);\n    if (!frequencies[total]) {\n      frequencies[total] = total;\n    }
        else {\n      return total;\n    }\n  }\n  return partTwo(input, total, frequencies);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eav35hx/",
        "subreddit_type": "public", "locked": false, "name": "t1_eav35hx", "created":
        1543684147.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eav3und",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "fp_weenie",
        "can_mod_post": false, "created_utc": 1543684706.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_2e56j0fa", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "For the second part of the puzzle, I used Haskell.\n\nI converted the input
        to a list literal using vim, to get\n\n    [ -6, -1, -18, -10, 5, 18, 19,
        11, -6, 13, 16, -15, 8, -10, 9, 12, 1, -9, -6, 16, 6, 13, 5, 18, -15, -1,
        14, -2, 6, 12, -7, 5, -19, 2, 16, -5, -3, 6, 8, 18, -3, 9, 14, -10, 9, -5,
        4, -1, 11, 10, 15, 12, -16, -12, 17, -2, -16, -11, 15, -11, 12, 14, -5, 10,
        -12, -6, 21, 19, -12, -6, 9, -4, -18, 15, 10, 3, 12, -17, -6, -11, 5, 10,
        15, 9, -19, 3, 15, 2, 13, 15, -13, 7, 5, 19, 10, 14, 10, 9, 1, 13, 4, -5,
        17, -14, 3, -8, -3, -3, -13, 6, -3, -11, -7, 17, 9, 4, -14, -19, -15, 7, -14,
        19, -3, 11, 9, 16, 17, -6, 12, 12, 14, -7, 18, 8, 7, 7, -10, 5, 11, 15, 10,
        -2, -2, -5, -12, -7, 4, 10, 19, 11, -19, -10, -16, 11, -19, -2, -20, -10,
        15, 8, -2, -12, 17, -14, -17, -18, -2, 1, 16, -12, -19, -13, -18, -3, 15,
        9, 18, 16, 8, -9, -22, -4, 20, -6, 14, 1, 7, 10, 7, -4, 11, 11, -16, -5, 9,
        22, 10, 12, -9, -17, 15, -8, 4, -3, -6, -3, 2, 11, 7, 9, 13, 11, -14, 11,
        -2, -2, -9, -1, -17, 15, 4, -14, 4, 16, 20, -4, 18, 8, -11, -18, 4, 19, -18,
        -15, -4, 9, 21, -8, 5, 6, 3, 6, -11, 14, 11, 4, -7, 18, 3, -2, -6, 9, -16,
        3, 2, -9, 2, 6, -12, -11, -6, -9, 19, -18, 3, -9, -18, 10, 11, -7, -1, -9,
        -19, 26, 26, 10, 21, 18, 2, -6, 9, 8, -3, -12, 6, 10, -17, -5, -15, -7, -6,
        -14, 9, 7, 13, 10, 6, 17, 13, 1, 17, 10, 2, 2, 20, -5, 2, 11, -18, 9, -18,
        -13, 14, -5, 17, -6, -15, 20, 5, 3, -12, 16, -13, 11, 15, 8, -12, 14, 7, -19,
        -9, 3, 5, 4, 21, -3, 6, 11, -8, -14, 15, -5, 15, -6, 19, 4, -16, 3, 23, -9,
        -9, -18, 8, 7, -8, 12, -18, -4, 19, 9, 5, 8, 19, 13, 22, 14, -9, 18, 6, -8,
        -1, 16, -9, 13, 17, 9, -13, 10, -19, -9, -10, 20, 13, 6, 4, -14, 2, -19, -13,
        18, 6, -18, -19, -1, -7, 12, 11, -14, -19, 4, -8, 19, -1, -27, 3, -14, -2,
        -10, -14, 2, 16, -7, 14, -15, -4, -1, -11, -12, 6, -2, -17, -2, 42, 4, -1,
        51, 22, 11, 4, 12, -3, 10, 7, 19, -16, 23, 15, -16, -3, -20, -10, 19, 4, -35,
        2, -18, -2, -9, -6, 34, -12, 43, -8, 5, -19, 18, 16, 4, 23, 10, 14, 14, -13,
        25, -11, -4, -2, -1, -6, 29, -36, 23, 14, -19, -20, -32, -35, -89, -97, -22,
        -16, 10, -26, -9, -14, -18, 11, 17, -2, -11, 14, 16, -22, 7, -8, -10, 2, -1,
        25, -21, 8, 11, -5, -43, -13, 10, -18, 15, 11, 17, -15, 6, 4, 19, 34, -106,
        2, -20, 22, -9, -30, 13, -26, -53, 5, -2, 32, 206, -15, 7, 18, 22, -36, 43,
        46, -190, 314, 76479, 13, -19, -3, 13, 4, 16, 9, 7, 10, -13, 6, -15, -17,
        10, 17, -7, -11, -11, 7, 16, -18, -18, -20, -14, 12, 18, 20, 15, -17, -4,
        -1, 20, 17, -19, -8, -14, -14, 1, -7, 18, 23, -4, -1, 31, 18, -11, -2, -4,
        15, -12, 10, 14, -2, 13, 6, 5, 8, 16, 18, 19, -18, -2, 16, 16, 8, 10, -6,
        -13, 10, 8, -14, -17, -13, -8, 7, -16, 4, 18, 1, -13, 15, -1, -5, -4, -16,
        -17, 7, -9, 18, -15, -19, 6, -11, -9, 18, 8, -19, -6, 4, -15, -9, -11, -3,
        -8, -6, 5, 10, 18, 17, -15, 8, -5, 4, 7, 11, -20, -1, 2, -12, 1, -3, -6, 10,
        27, 4, 19, 7, 6, -3, 2, 10, 2, -3, -20, -16, 19, 14, 18, 15, 4, 6, -16, -11,
        -7, -18, -7, 4, -17, 2, 3, -16, 10, -16, -2, -6, 29, 15, -25, 7, 13, 16, -2,
        25, 7, 4, 17, -20, 17, 6, -7, -4, 9, 14, -6, 11, -8, 11, -5, 6, 2, 3, 8, -12,
        15, -9, -3, 6, 11, -6, 10, 10, -13, 7, 11, 2, -15, 14, 11, 3, 10, -18, -17,
        15, 14, -13, 10, 1, 7, -15, -10, -13, -9, 7, -15, -1, 6, -21, 19, 16, 10,
        13, 15, -3, -13, 8, 19, 1, 19, -7, 4, -1, 3, -1, -14, 7, -1, 12, 3, -1, 12,
        17, 8, -11, -16, 17, 11, -14, -19, 15, 20, 2, -17, -7, -11, 12, -8, 3, 18,
        -9, -1, 11, 15, 6, 8, 4, -10, 8, -19, 7, -11, -10, -18, 2, 13, 16, -5, -4,
        8, 7, 7, -11, 5, 19, 19, 19, -8, 14, -11, -9, -12, 11, 12, 18, 1, 3, 18, 17,
        -16, 8, 7, -10, 1, 11, 1, 5, 7, 4, 3, -13, 14, -16, 17, 7, 9, 1, -7, -13,
        17, 11, -19, 7, -19, -13, -6, -16, -13, 1, 5, 18, -17, -12, -10, 2, 15, -4,
        -12, -13, 5, 10, 15, 14, 9, -10, -8, 2, 15, 9, 2, 4, -13, -16, 1, 6, 4, -17,
        -21, -20, 4, 8, -11, 17, -3, 12, -10, 13, -14, -19, 10, -19, 4, -1, 11, 4,
        20, -1, 8, 22, 9, -19, -5, -5, 42, 15, 16, -7, -15, 9, 10, 4, 14, 9, -16,
        -14, 8, 7, 9, 4, 5, -15, -1, 2, 1, -8, -20, -12, 1, -4, 1, 13, 5, 14, -21,
        36, 12, 1, 26, 12, 5, 10, -2, -20, -8, -19, -10, 42, -20, 150, 6, 11, 9, 2,
        5, -11, 20, -8, -27, -11, -17, 6, 31, 2, 7, 22, 12, 13, 25, -7, -11, 19, -9,
        18, 1, 7, 6, 15, 7, 11, -9, -17, -10, -6, 10, 3, -19, 14, 19, -12, -18, 2,
        5, -13, -19, -11, -19, 1, 12, -11, -77534 ]\n\nMy program was\n\n    module
        TakeDuplicate (getAnswer) where\n \n    import qualified Data.Set as S\n\n    getAnswer
        :: (Ord a, Num a) =&gt; [a] -&gt; a\n    getAnswer = last . cycleUntilDuplicate\n\n    cycleUntilDuplicate
        :: (Ord a, Num a) =&gt; [a] -&gt; [a]\n    cycleUntilDuplicate = takeToDuplicate
        . scanl (+) 0 . cycle\n\n    takeToDuplicate :: Ord a =&gt; [a] -&gt; [a]\n    takeToDuplicate
        xs = foldr go (pure []) xs mempty\n      where\n        go x cont set\n          |
        x `S.member` set = [x]\n          | otherwise        = x : cont (S.insert
        x set)", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;For
        the second part of the puzzle, I used Haskell.&lt;/p&gt;\n\n&lt;p&gt;I converted
        the input to a list literal using vim, to get&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[
        -6, -1, -18, -10, 5, 18, 19, 11, -6, 13, 16, -15, 8, -10, 9, 12, 1, -9, -6,
        16, 6, 13, 5, 18, -15, -1, 14, -2, 6, 12, -7, 5, -19, 2, 16, -5, -3, 6, 8,
        18, -3, 9, 14, -10, 9, -5, 4, -1, 11, 10, 15, 12, -16, -12, 17, -2, -16, -11,
        15, -11, 12, 14, -5, 10, -12, -6, 21, 19, -12, -6, 9, -4, -18, 15, 10, 3,
        12, -17, -6, -11, 5, 10, 15, 9, -19, 3, 15, 2, 13, 15, -13, 7, 5, 19, 10,
        14, 10, 9, 1, 13, 4, -5, 17, -14, 3, -8, -3, -3, -13, 6, -3, -11, -7, 17,
        9, 4, -14, -19, -15, 7, -14, 19, -3, 11, 9, 16, 17, -6, 12, 12, 14, -7, 18,
        8, 7, 7, -10, 5, 11, 15, 10, -2, -2, -5, -12, -7, 4, 10, 19, 11, -19, -10,
        -16, 11, -19, -2, -20, -10, 15, 8, -2, -12, 17, -14, -17, -18, -2, 1, 16,
        -12, -19, -13, -18, -3, 15, 9, 18, 16, 8, -9, -22, -4, 20, -6, 14, 1, 7, 10,
        7, -4, 11, 11, -16, -5, 9, 22, 10, 12, -9, -17, 15, -8, 4, -3, -6, -3, 2,
        11, 7, 9, 13, 11, -14, 11, -2, -2, -9, -1, -17, 15, 4, -14, 4, 16, 20, -4,
        18, 8, -11, -18, 4, 19, -18, -15, -4, 9, 21, -8, 5, 6, 3, 6, -11, 14, 11,
        4, -7, 18, 3, -2, -6, 9, -16, 3, 2, -9, 2, 6, -12, -11, -6, -9, 19, -18, 3,
        -9, -18, 10, 11, -7, -1, -9, -19, 26, 26, 10, 21, 18, 2, -6, 9, 8, -3, -12,
        6, 10, -17, -5, -15, -7, -6, -14, 9, 7, 13, 10, 6, 17, 13, 1, 17, 10, 2, 2,
        20, -5, 2, 11, -18, 9, -18, -13, 14, -5, 17, -6, -15, 20, 5, 3, -12, 16, -13,
        11, 15, 8, -12, 14, 7, -19, -9, 3, 5, 4, 21, -3, 6, 11, -8, -14, 15, -5, 15,
        -6, 19, 4, -16, 3, 23, -9, -9, -18, 8, 7, -8, 12, -18, -4, 19, 9, 5, 8, 19,
        13, 22, 14, -9, 18, 6, -8, -1, 16, -9, 13, 17, 9, -13, 10, -19, -9, -10, 20,
        13, 6, 4, -14, 2, -19, -13, 18, 6, -18, -19, -1, -7, 12, 11, -14, -19, 4,
        -8, 19, -1, -27, 3, -14, -2, -10, -14, 2, 16, -7, 14, -15, -4, -1, -11, -12,
        6, -2, -17, -2, 42, 4, -1, 51, 22, 11, 4, 12, -3, 10, 7, 19, -16, 23, 15,
        -16, -3, -20, -10, 19, 4, -35, 2, -18, -2, -9, -6, 34, -12, 43, -8, 5, -19,
        18, 16, 4, 23, 10, 14, 14, -13, 25, -11, -4, -2, -1, -6, 29, -36, 23, 14,
        -19, -20, -32, -35, -89, -97, -22, -16, 10, -26, -9, -14, -18, 11, 17, -2,
        -11, 14, 16, -22, 7, -8, -10, 2, -1, 25, -21, 8, 11, -5, -43, -13, 10, -18,
        15, 11, 17, -15, 6, 4, 19, 34, -106, 2, -20, 22, -9, -30, 13, -26, -53, 5,
        -2, 32, 206, -15, 7, 18, 22, -36, 43, 46, -190, 314, 76479, 13, -19, -3, 13,
        4, 16, 9, 7, 10, -13, 6, -15, -17, 10, 17, -7, -11, -11, 7, 16, -18, -18,
        -20, -14, 12, 18, 20, 15, -17, -4, -1, 20, 17, -19, -8, -14, -14, 1, -7, 18,
        23, -4, -1, 31, 18, -11, -2, -4, 15, -12, 10, 14, -2, 13, 6, 5, 8, 16, 18,
        19, -18, -2, 16, 16, 8, 10, -6, -13, 10, 8, -14, -17, -13, -8, 7, -16, 4,
        18, 1, -13, 15, -1, -5, -4, -16, -17, 7, -9, 18, -15, -19, 6, -11, -9, 18,
        8, -19, -6, 4, -15, -9, -11, -3, -8, -6, 5, 10, 18, 17, -15, 8, -5, 4, 7,
        11, -20, -1, 2, -12, 1, -3, -6, 10, 27, 4, 19, 7, 6, -3, 2, 10, 2, -3, -20,
        -16, 19, 14, 18, 15, 4, 6, -16, -11, -7, -18, -7, 4, -17, 2, 3, -16, 10, -16,
        -2, -6, 29, 15, -25, 7, 13, 16, -2, 25, 7, 4, 17, -20, 17, 6, -7, -4, 9, 14,
        -6, 11, -8, 11, -5, 6, 2, 3, 8, -12, 15, -9, -3, 6, 11, -6, 10, 10, -13, 7,
        11, 2, -15, 14, 11, 3, 10, -18, -17, 15, 14, -13, 10, 1, 7, -15, -10, -13,
        -9, 7, -15, -1, 6, -21, 19, 16, 10, 13, 15, -3, -13, 8, 19, 1, 19, -7, 4,
        -1, 3, -1, -14, 7, -1, 12, 3, -1, 12, 17, 8, -11, -16, 17, 11, -14, -19, 15,
        20, 2, -17, -7, -11, 12, -8, 3, 18, -9, -1, 11, 15, 6, 8, 4, -10, 8, -19,
        7, -11, -10, -18, 2, 13, 16, -5, -4, 8, 7, 7, -11, 5, 19, 19, 19, -8, 14,
        -11, -9, -12, 11, 12, 18, 1, 3, 18, 17, -16, 8, 7, -10, 1, 11, 1, 5, 7, 4,
        3, -13, 14, -16, 17, 7, 9, 1, -7, -13, 17, 11, -19, 7, -19, -13, -6, -16,
        -13, 1, 5, 18, -17, -12, -10, 2, 15, -4, -12, -13, 5, 10, 15, 14, 9, -10,
        -8, 2, 15, 9, 2, 4, -13, -16, 1, 6, 4, -17, -21, -20, 4, 8, -11, 17, -3, 12,
        -10, 13, -14, -19, 10, -19, 4, -1, 11, 4, 20, -1, 8, 22, 9, -19, -5, -5, 42,
        15, 16, -7, -15, 9, 10, 4, 14, 9, -16, -14, 8, 7, 9, 4, 5, -15, -1, 2, 1,
        -8, -20, -12, 1, -4, 1, 13, 5, 14, -21, 36, 12, 1, 26, 12, 5, 10, -2, -20,
        -8, -19, -10, 42, -20, 150, 6, 11, 9, 2, 5, -11, 20, -8, -27, -11, -17, 6,
        31, 2, 7, 22, 12, 13, 25, -7, -11, 19, -9, 18, 1, 7, 6, 15, 7, 11, -9, -17,
        -10, -6, 10, 3, -19, 14, 19, -12, -18, 2, 5, -13, -19, -11, -19, 1, 12, -11,
        -77534 ]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;My program was&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;module
        TakeDuplicate (getAnswer) where\n\nimport qualified Data.Set as S\n\ngetAnswer
        :: (Ord a, Num a) =&amp;gt; [a] -&amp;gt; a\ngetAnswer = last . cycleUntilDuplicate\n\ncycleUntilDuplicate
        :: (Ord a, Num a) =&amp;gt; [a] -&amp;gt; [a]\ncycleUntilDuplicate = takeToDuplicate
        . scanl (+) 0 . cycle\n\ntakeToDuplicate :: Ord a =&amp;gt; [a] -&amp;gt;
        [a]\ntakeToDuplicate xs = foldr go (pure []) xs mempty\n  where\n    go x
        cont set\n      | x `S.member` set = [x]\n      | otherwise        = x : cont
        (S.insert x set)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eav3und/", "subreddit_type":
        "public", "locked": false, "name": "t1_eav3und", "created": 1543684706.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eav45x9", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "deds_the_scrub", "can_mod_post": false,
        "created_utc": 1543684953.0, "send_replies": true, "parent_id": "t3_a20646",
        "score": 1, "author_fullname": "t2_62pan", "report_reasons": null, "approved_by":
        null, "all_awardings": [], "collapsed": false, "body": "**Scala**\n\n    import
        scala.io.Source \n    \n    object Day1 {\n    \n      def part1(nums:List[Int]):Int
        = {\n        nums.sum\n      }\n    \n    \n      def part2(nums:List[Int]):
        Int = {\n    \n        val adjustments:Stream[Int] = Stream.continually(nums.toStream).flatten\n    \n        val
        freqs: Stream[Int] = \n          adjustments.scanLeft(0) { \n            case
        (sum:Int, num:Int) =&gt; \n              sum + num\n        }\n    \n        def
        firstDupe(nums: Stream[Int], seen:Set[Int]=Set.empty):Option[Int] = {\n          nums
        match {\n            case x#::xs if (seen.contains(x)) =&gt; Some(x)\n            case
        x#::xs =&gt; firstDupe(xs, seen + x)\n            case _ =&gt; None\n          }\n        }\n    \n        firstDupe(freqs).getOrElse(0)\n      }\n    \n      def
        main(args: Array[String]): Unit = {\n        val lines = Source.fromFile(\"./src/main/scala/1.input\").getLines.toList.map(_.toInt)\n        println(\"Part
        One : \" + part1(lines))\n        println(\"Part Two : \" + part2(lines))\n      }\n      \n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Scala&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        scala.io.Source \n\nobject Day1 {\n\n  def part1(nums:List[Int]):Int = {\n    nums.sum\n  }\n\n\n  def
        part2(nums:List[Int]): Int = {\n\n    val adjustments:Stream[Int] = Stream.continually(nums.toStream).flatten\n\n    val
        freqs: Stream[Int] = \n      adjustments.scanLeft(0) { \n        case (sum:Int,
        num:Int) =&amp;gt; \n          sum + num\n    }\n\n    def firstDupe(nums:
        Stream[Int], seen:Set[Int]=Set.empty):Option[Int] = {\n      nums match {\n        case
        x#::xs if (seen.contains(x)) =&amp;gt; Some(x)\n        case x#::xs =&amp;gt;
        firstDupe(xs, seen + x)\n        case _ =&amp;gt; None\n      }\n    }\n\n    firstDupe(freqs).getOrElse(0)\n  }\n\n  def
        main(args: Array[String]): Unit = {\n    val lines = Source.fromFile(&amp;quot;./src/main/scala/1.input&amp;quot;).getLines.toList.map(_.toInt)\n    println(&amp;quot;Part
        One : &amp;quot; + part1(lines))\n    println(&amp;quot;Part Two : &amp;quot;
        + part2(lines))\n  }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eav45x9/", "subreddit_type":
        "public", "locked": false, "name": "t1_eav45x9", "created": 1543684953.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "removal_reason":
        null, "link_id": "t3_a20646", "author_flair_template_id": null, "likes": null,
        "replies": "", "user_reports": [], "saved": false, "id": "eav4npl", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        "DELETED", "no_follow": true, "author": "[deleted]", "can_mod_post": false,
        "send_replies": true, "parent_id": "t3_a20646", "score": 1, "approved_by":
        null, "mod_note": null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body":
        "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class": null, "name":
        "t1_eav4npl", "collapsed": false, "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eav4npl/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1543685348.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543685348.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eavcffh",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "jramaswami",
        "can_mod_post": false, "created_utc": 1543691328.0, "send_replies": true,
        "parent_id": "t1_eav4npl", "score": 2, "author_fullname": "t2_hko9c", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "1.  If you want help, you shouldn''t ask in the solution thread.  Your request
        gets lost in all the solutions.  You''d be better off starting a new thread.\n\n2.  I
        had the same issue on my first attempt to solve the problem.  Read the problem
        statement carefully; you are missing something important.\n\n3.  Since you''re
        a beginner, here is a performance hint: it would be more efficient to use
        a dictionary for appeared rather than a list.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;If you want help, you shouldn&amp;#39;t
        ask in the solution thread.  Your request gets lost in all the solutions.  You&amp;#39;d
        be better off starting a new thread.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;I
        had the same issue on my first attempt to solve the problem.  Read the problem
        statement carefully; you are missing something important.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Since
        you&amp;#39;re a beginner, here is a performance hint: it would be more efficient
        to use a dictionary for appeared rather than a list.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavcffh/",
        "subreddit_type": "public", "locked": false, "name": "t1_eavcffh", "created":
        1543691328.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_eavfa4t", "id": "eavfa4t", "parent_id":
        "t1_eavcffh", "depth": 2, "children": ["eavfa4t"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543686987.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eav6ivo", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "boast03",
        "can_mod_post": false, "created_utc": 1543686775.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_9pv3s", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# C# (LINQ as much as possible)\n\nThis year I use AoC to get a refresher
        in C# and especially get more into LINQ.\n\n**Small helpers for both parts**\n\n    //
        Read file content which I will be using the next days as well\n    protected
        IEnumerable&lt;string&gt; InputLines()\n    {\n        return File.ReadLines(InputFileName());\n    }\n    \n    //
        Convert lines (strings) into integers\n    protected IEnumerable&lt;int&gt;
        Frequencies()\n    {\n        return InputLines().Select(int.Parse);\n    }\n    \n    //
        Extends LINQ with an endless Cycle() method\n    public static class LINQUtility\n    {\n        public
        static IEnumerable&lt;T&gt; Cycle&lt;T&gt;(this IEnumerable&lt;T&gt; collection)\n        {\n            while
        (true)\n            {\n                foreach (var item in collection)\n                {\n                    yield
        return item;\n                }\n            }\n        }\n    }\n\n**Part1**\n\n    public
        void SolvePart1()\n    {\n        Console.WriteLine(Frequencies().Sum());\n    }\n\n**Part
        2**\n\n    public void SolvePart2()\n    {\n        int frequencyAggregate
        = 0;\n           \n        // Code with List&lt;int&gt; runs for 18 SECONDS\n        //
        with HashSet&lt;int&gt; it runs for 18 MILISECONDS :)\n        var frequencyMemory
        = new HashSet&lt;int&gt;\n        {\n            frequencyAggregate\n        };\n    \n        Frequencies()\n            .Cycle()\n            .TakeWhile(f
        =&gt; frequencyMemory.Add(frequencyAggregate += f))\n            .Last();
        // Runs TakeWhile() \n\n        Console.WriteLine(frequencyAggregate);\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;C# (LINQ as much as
        possible)&lt;/h1&gt;\n\n&lt;p&gt;This year I use AoC to get a refresher in
        C# and especially get more into LINQ.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Small
        helpers for both parts&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;//
        Read file content which I will be using the next days as well\nprotected IEnumerable&amp;lt;string&amp;gt;
        InputLines()\n{\n    return File.ReadLines(InputFileName());\n}\n\n// Convert
        lines (strings) into integers\nprotected IEnumerable&amp;lt;int&amp;gt; Frequencies()\n{\n    return
        InputLines().Select(int.Parse);\n}\n\n// Extends LINQ with an endless Cycle()
        method\npublic static class LINQUtility\n{\n    public static IEnumerable&amp;lt;T&amp;gt;
        Cycle&amp;lt;T&amp;gt;(this IEnumerable&amp;lt;T&amp;gt; collection)\n    {\n        while
        (true)\n        {\n            foreach (var item in collection)\n            {\n                yield
        return item;\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Part1&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public
        void SolvePart1()\n{\n    Console.WriteLine(Frequencies().Sum());\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Part
        2&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public void SolvePart2()\n{\n    int
        frequencyAggregate = 0;\n\n    // Code with List&amp;lt;int&amp;gt; runs for
        18 SECONDS\n    // with HashSet&amp;lt;int&amp;gt; it runs for 18 MILISECONDS
        :)\n    var frequencyMemory = new HashSet&amp;lt;int&amp;gt;\n    {\n        frequencyAggregate\n    };\n\n    Frequencies()\n        .Cycle()\n        .TakeWhile(f
        =&amp;gt; frequencyMemory.Add(frequencyAggregate += f))\n        .Last();
        // Runs TakeWhile() \n\n    Console.WriteLine(frequencyAggregate);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eav6ivo/",
        "subreddit_type": "public", "locked": false, "name": "t1_eav6ivo", "created":
        1543686775.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543704480.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eav71zb", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Markavian",
        "can_mod_post": false, "created_utc": 1543687182.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_7uy5y", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Spent a bunch of time retemplating my AoC project from last year, but am
        super happy with the result. My completely over engineered node.js solution
        for Day 1 parts 1&amp;2 can be found here:\nhttps://github.com/johnbeech/advent-of-code-2018/blob/master/solutions/day1/solution.js\n\nI
        read a long thread about not using Sets for part two. Agreed, that sounds
        slow. I effectively used a sparse index to track duplicates. I might modify
        my runner to measure and log average execution time for each day. Anyhow,
        nice straightforward problem to start the year :)\n\nEdit: One does not simply
        [npm install] during Advent of Code.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Spent a bunch of time retemplating my AoC project
        from last year, but am super happy with the result. My completely over engineered
        node.js solution for Day 1 parts 1&amp;amp;2 can be found here:\n&lt;a href=\"https://github.com/johnbeech/advent-of-code-2018/blob/master/solutions/day1/solution.js\"&gt;https://github.com/johnbeech/advent-of-code-2018/blob/master/solutions/day1/solution.js&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I
        read a long thread about not using Sets for part two. Agreed, that sounds
        slow. I effectively used a sparse index to track duplicates. I might modify
        my runner to measure and log average execution time for each day. Anyhow,
        nice straightforward problem to start the year :)&lt;/p&gt;\n\n&lt;p&gt;Edit:
        One does not simply [npm install] during Advent of Code.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eav71zb/",
        "subreddit_type": "public", "locked": false, "name": "t1_eav71zb", "created":
        1543687182.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543687879.0, "mod_reason_by": null,
        "banned_by": null, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eav7br5", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_a20646", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "F# - this is my first brush with F# and .NET in general,
        so pointers are more''n welcome!\n\nCommon code:\n\n\n    let getFrequencies
        fileName =\n      let lines = IO.File.ReadLines(fileName)\n      lines\n        |&gt;
        Seq.map Convert.ToInt32\n        |&gt; Seq.toList\n\n\nPart 1:\n\n\n    let
        rec addFreq acc s =\n      match s with\n        | [] -&gt; acc\n        |
        freq::freqs -&gt; addFreq (acc + freq) freqs\n    \n    let day1Part1 fileName
        =\n      getFrequencies fileName |&gt; addFreq 0\n\n\npart 2:\n\n\n    let
        rec addFreqWithState acc visited whole remaining =\n      match remaining
        with\n        | [] -&gt; addFreqWithState acc visited whole whole\n        |
        head::tail -&gt;\n          let newval = acc + head\n          if Set.contains
        newval visited then\n            newval\n          else\n            addFreqWithState
        newval (Set.add newval visited) whole tail\n\n    let day1Part2 fileName =\n      let
        freqs = getFrequencies fileName\n      addFreqWithState 0 (new Set&lt;int&gt;
        (Seq.empty)) freqs freqs\n\nEntry point:\n\n    open System\n    open Library\n    \n    [&lt;EntryPoint&gt;]\n    let
        main argv =\n        day1Part1 argv.[0] |&gt; printfn \"Part 1 result: %i\"\n        day1Part2
        argv.[0] |&gt; printfn \"Part 2 result: %i\"\n\n        0 // return an integer
        exit code", "awarders": [], "downs": 0, "author_flair_css_class": null, "name":
        "t1_eav7br5", "collapsed": false, "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;F# - this is my first brush with F# and .NET in general,
        so pointers are more&amp;#39;n welcome!&lt;/p&gt;\n\n&lt;p&gt;Common code:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let
        getFrequencies fileName =\n  let lines = IO.File.ReadLines(fileName)\n  lines\n    |&amp;gt;
        Seq.map Convert.ToInt32\n    |&amp;gt; Seq.toList\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let rec addFreq acc s =\n  match s
        with\n    | [] -&amp;gt; acc\n    | freq::freqs -&amp;gt; addFreq (acc + freq)
        freqs\n\nlet day1Part1 fileName =\n  getFrequencies fileName |&amp;gt; addFreq
        0\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;part 2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let
        rec addFreqWithState acc visited whole remaining =\n  match remaining with\n    |
        [] -&amp;gt; addFreqWithState acc visited whole whole\n    | head::tail -&amp;gt;\n      let
        newval = acc + head\n      if Set.contains newval visited then\n        newval\n      else\n        addFreqWithState
        newval (Set.add newval visited) whole tail\n\nlet day1Part2 fileName =\n  let
        freqs = getFrequencies fileName\n  addFreqWithState 0 (new Set&amp;lt;int&amp;gt;
        (Seq.empty)) freqs freqs\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Entry point:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;open
        System\nopen Library\n\n[&amp;lt;EntryPoint&amp;gt;]\nlet main argv =\n    day1Part1
        argv.[0] |&amp;gt; printfn &amp;quot;Part 1 result: %i&amp;quot;\n    day1Part2
        argv.[0] |&amp;gt; printfn &amp;quot;Part 2 result: %i&amp;quot;\n\n    0
        // return an integer exit code\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eav7br5/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1543687388.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543687388.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543696185.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eav7ht0", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "egze",
        "can_mod_post": false, "created_utc": 1543687511.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_4capg", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Elixir:\n    \n    defmodule Day1 do\n    \n      @path \"input.txt\"\n    \n      def
        part1 do\n        all_integers()\n        |&gt; Enum.sum\n      end\n    \n      def
        part2 do\n        all_integers()\n        |&gt; Stream.cycle\n        |&gt;
        Enum.reduce_while({0, %{0 =&gt; true}}, fn(change, {frequency, reached_frequencies})
        -&gt;\n          frequency = frequency + change\n          if reached_frequencies[frequency]
        do\n            {:halt, frequency}\n          else\n            {:cont, {frequency,
        Map.put(reached_frequencies, frequency, true)}}\n          end\n        end)\n      end\n    \n      defp
        all_integers do\n        @path\n        |&gt; File.stream!\n        |&gt;
        Stream.map(&amp;String.trim/1)\n        |&gt; Stream.map(&amp;String.to_integer/1)\n      end\n    end\n\nEdit:
        cleaned up a bit", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Elixir:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;defmodule
        Day1 do\n\n  @path &amp;quot;input.txt&amp;quot;\n\n  def part1 do\n    all_integers()\n    |&amp;gt;
        Enum.sum\n  end\n\n  def part2 do\n    all_integers()\n    |&amp;gt; Stream.cycle\n    |&amp;gt;
        Enum.reduce_while({0, %{0 =&amp;gt; true}}, fn(change, {frequency, reached_frequencies})
        -&amp;gt;\n      frequency = frequency + change\n      if reached_frequencies[frequency]
        do\n        {:halt, frequency}\n      else\n        {:cont, {frequency, Map.put(reached_frequencies,
        frequency, true)}}\n      end\n    end)\n  end\n\n  defp all_integers do\n    @path\n    |&amp;gt;
        File.stream!\n    |&amp;gt; Stream.map(&amp;amp;String.trim/1)\n    |&amp;gt;
        Stream.map(&amp;amp;String.to_integer/1)\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Edit:
        cleaned up a bit&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eav7ht0/",
        "subreddit_type": "public", "locked": false, "name": "t1_eav7ht0", "created":
        1543687511.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eav92fa", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_a20646", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Not sure what to say, but here''s what i did for part
        1: [here](https://github.com/qewc/advent_of_code_2018/blob/master/day_1/part_1/p1.go)",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_eav92fa",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not
        sure what to say, but here&amp;#39;s what i did for part 1: &lt;a href=\"https://github.com/qewc/advent_of_code_2018/blob/master/day_1/part_1/p1.go\"&gt;here&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eav92fa/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1543688707.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543688707.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543689302.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eav9dru", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Raspbianlike",
        "can_mod_post": false, "created_utc": 1543688956.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_13zo0j", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Pretty fast way of solving part one and two in C++17\n\n(compiled with optimization
        flags)\n\n[GitHub](https://github.com/raspbianlike/Advent-of-Code-2018/blob/master/src/Day-1/day1.cpp)\n\n    $
        time ./AoC2018 \n    Part 1: 408\n    Part 2: 55267\n    real    0m0.015s\n    user    0m0.009s\n    sys     0m0.005s\n",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Pretty fast way of solving
        part one and two in C++17&lt;/p&gt;\n\n&lt;p&gt;(compiled with optimization
        flags)&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/raspbianlike/Advent-of-Code-2018/blob/master/src/Day-1/day1.cpp\"&gt;GitHub&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$
        time ./AoC2018 \nPart 1: 408\nPart 2: 55267\nreal    0m0.015s\nuser    0m0.009s\nsys     0m0.005s\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eav9dru/",
        "subreddit_type": "public", "locked": false, "name": "t1_eav9dru", "created":
        1543688956.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eav9ion",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Shubbler",
        "can_mod_post": false, "created_utc": 1543689058.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_hamrn", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Less Pythonic, **Python 3** solution:\n\n\timport operator\n\tops = { \"+\":
        operator.add, \"-\": operator.sub }\n\t\n\twith open(\"input.txt\", ''r'')
        as f:\n\t\ttotal = 0\n\t\n\t\tfor line in f.readlines():\n\t\t\tline = line.rstrip()\n\t\t\top,
        *value = line\n\t\t\tvalue = int(''''.join(value))\n\t\t\ttotal = ops[op](total,
        value)\n\t\n\tprint(total)\n\n\n", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Less Pythonic, &lt;strong&gt;Python 3&lt;/strong&gt;
        solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import operator\nops = { &amp;quot;+&amp;quot;:
        operator.add, &amp;quot;-&amp;quot;: operator.sub }\n\nwith open(&amp;quot;input.txt&amp;quot;,
        &amp;#39;r&amp;#39;) as f:\n    total = 0\n\n    for line in f.readlines():\n        line
        = line.rstrip()\n        op, *value = line\n        value = int(&amp;#39;&amp;#39;.join(value))\n        total
        = ops[op](total, value)\n\nprint(total)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eav9ion/",
        "subreddit_type": "public", "locked": false, "name": "t1_eav9ion", "created":
        1543689058.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543689858.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eavab0v", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "qiman3",
        "can_mod_post": false, "created_utc": 1543689675.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_jobfc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I''ve been trying to maximise readability in my code, so this is a good exercise.\n\nPython
        3.7\n\n\n    from itertools import cycle\n    \n    \n    frequencies = [int(x)
        for x in open(\"input\").readlines()]  # Loading from input file\n\n    previous_frequencies
        = {0}  # Set of all previously visited frequencies. Order doesn''t matter,
        so we can use a set.\n\n    current_frequency = 0\n    for freq in cycle(frequencies):  #
        Cycles over my the frequencies (i.e. A, B, C, A, B, C, ...)\n\n        current_frequency
        += freq  # Change the current frequency\n\n         if current_frequency in
        previous_frequencies:  # If we have visited this frequency, we have found
        the answer\n            break\n        else:\n            previous_frequencies.add(current_frequency)  #
        Else, we add out current frequencies to our set\n\n    print(\"Sum of frequencies:
        {0}\".format(sum(frequencies)))\n    print(\"First repeated frequency: {0}\".format(current_frequency))",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been trying
        to maximise readability in my code, so this is a good exercise.&lt;/p&gt;\n\n&lt;p&gt;Python
        3.7&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from itertools import cycle\n\n\nfrequencies
        = [int(x) for x in open(&amp;quot;input&amp;quot;).readlines()]  # Loading
        from input file\n\nprevious_frequencies = {0}  # Set of all previously visited
        frequencies. Order doesn&amp;#39;t matter, so we can use a set.\n\ncurrent_frequency
        = 0\nfor freq in cycle(frequencies):  # Cycles over my the frequencies (i.e.
        A, B, C, A, B, C, ...)\n\n    current_frequency += freq  # Change the current
        frequency\n\n     if current_frequency in previous_frequencies:  # If we have
        visited this frequency, we have found the answer\n        break\n    else:\n        previous_frequencies.add(current_frequency)  #
        Else, we add out current frequencies to our set\n\nprint(&amp;quot;Sum of
        frequencies: {0}&amp;quot;.format(sum(frequencies)))\nprint(&amp;quot;First
        repeated frequency: {0}&amp;quot;.format(current_frequency))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavab0v/",
        "subreddit_type": "public", "locked": false, "name": "t1_eavab0v", "created":
        1543689675.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eavapu5",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "the_jester",
        "can_mod_post": false, "created_utc": 1543690009.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_3s11k", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Javascript:\n```javascript\n(function() {\n\tvar rez = new Set();\n\tvar
        winner = false;\n\tvar freq = [...];\n\tfunction fc(acc, cur) { var c = acc+cur;
        if(rez.has(c)){winner = true; console.log(''winner: '' + c)} rez.add(c); return
        c};\n\tvar old = freq.reduce(fc);\n\n\twhile (winner != true) {\n\t\tconsole.log(''Starting
        Frequency: '' + old);\n\t\told = freq.reduce(fc, old);\n\t}\n})();\n```",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Javascript:\n```javascript\n(function()
        {\n    var rez = new Set();\n    var winner = false;\n    var freq = [...];\n    function
        fc(acc, cur) { var c = acc+cur; if(rez.has(c)){winner = true; console.log(&amp;#39;winner:
        &amp;#39; + c)} rez.add(c); return c};\n    var old = freq.reduce(fc);&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;while
        (winner != true) {\n    console.log(&amp;#39;Starting Frequency: &amp;#39;
        + old);\n    old = freq.reduce(fc, old);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;})();\n```&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavapu5/",
        "subreddit_type": "public", "locked": false, "name": "t1_eavapu5", "created":
        1543690009.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eavbjea",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "chicagocode",
        "can_mod_post": false, "created_utc": 1543690635.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_mtcx04l", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Kotlin - \\[**[Blog/Commentary](https://todd.ginsberg.com/post/advent-of-code/2018/day1/)**\\]
        | \\[**[**GitHub Day 1**](https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day01.kt)**\\]
        | \\[**[**GitHub Repo**](https://github.com/tginsberg/advent-2018-kotlin)**\\]**\n\n&amp;#x200B;\n\nThanks
        to Kotlin''s stdlib, part 1 was pretty easy:\n\n&amp;#x200B;\n\n    class
        Day01(rawInput: List&lt;String&gt;) {\n    \n        private val input: List&lt;Int&gt;
        = rawInput.map { it.toInt() }\n    \n        fun solvePart1(): Int =\n            input.sum()\n    }\n\nFor
        part two I wrote an extension to turn a List into an infinite sequence:\n\n    fun
        &lt;T&gt; List&lt;T&gt;.toInfiniteSequence(): Sequence&lt;T&gt; = sequence
        {\n        if (this@toInfiniteSequence.isEmpty()) {\n            return@sequence\n        }\n        while
        (true) {\n            yieldAll(this@toInfiniteSequence)\n        }\n    }\n\nOnce
        that was done, the solution was pretty compact. I''m not happy about the side
        effects but the alternatives weren''t pleasing (my recursive solution was
        VERY slow, the early-aborted fold looked ugly). But it works, and quickly,
        and earned me a star:\n\n&amp;#x200B;\n\n    fun solvePart2(): Int {\n        val
        frequencies = mutableSetOf(0)\n        var sum = 0\n        return input.toInfiniteSequence()\n            .map
        {\n                sum += it\n                sum\n            }\n            .first
        { !frequencies.add(it) }\n    }\n\n&amp;#x200B;", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Kotlin - [&lt;/strong&gt;&lt;a href=\"https://todd.ginsberg.com/post/advent-of-code/2018/day1/\"&gt;Blog/Commentary&lt;/a&gt;&lt;strong&gt;]
        | [&lt;/strong&gt;&lt;a href=\"https://github.com/tginsberg/advent-2018-kotlin/blob/master/src/main/kotlin/com/ginsberg/advent2018/Day01.kt\"&gt;&lt;strong&gt;GitHub
        Day 1&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;] | [&lt;/strong&gt;&lt;a href=\"https://github.com/tginsberg/advent-2018-kotlin\"&gt;&lt;strong&gt;GitHub
        Repo&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;]&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Thanks
        to Kotlin&amp;#39;s stdlib, part 1 was pretty easy:&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class
        Day01(rawInput: List&amp;lt;String&amp;gt;) {\n\n    private val input: List&amp;lt;Int&amp;gt;
        = rawInput.map { it.toInt() }\n\n    fun solvePart1(): Int =\n        input.sum()\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For
        part two I wrote an extension to turn a List into an infinite sequence:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fun
        &amp;lt;T&amp;gt; List&amp;lt;T&amp;gt;.toInfiniteSequence(): Sequence&amp;lt;T&amp;gt;
        = sequence {\n    if (this@toInfiniteSequence.isEmpty()) {\n        return@sequence\n    }\n    while
        (true) {\n        yieldAll(this@toInfiniteSequence)\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Once
        that was done, the solution was pretty compact. I&amp;#39;m not happy about
        the side effects but the alternatives weren&amp;#39;t pleasing (my recursive
        solution was VERY slow, the early-aborted fold looked ugly). But it works,
        and quickly, and earned me a star:&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fun
        solvePart2(): Int {\n    val frequencies = mutableSetOf(0)\n    var sum =
        0\n    return input.toInfiniteSequence()\n        .map {\n            sum
        += it\n            sum\n        }\n        .first { !frequencies.add(it) }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavbjea/",
        "subreddit_type": "public", "locked": false, "name": "t1_eavbjea", "created":
        1543690635.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eavbp7h", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_a20646", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "TCL:\n\nPart 1\n\n`set flist [read -nonewline stdin]`\n\n`puts
        \"part1 [expr [join $flist \"\"]]\"`\n\n&amp;#x200B;\n\nPart 2\n\n`set freq
        0`\n\n`set seen(0) 1`\n\n`set done 0`\n\n`while {!$done} {`\n\n`foreach elt
        $flist {`\n\n\t`incr freq $elt`\n\n\t`if {[info exist seen($freq)]} {`\n\n`set
        done 1`\n\n`break`\n\n\t`}`\n\n\t`set seen($freq) 1`\n\n`}`\n\n`}`\n\n`puts
        \"part 2 first dup freq $freq, [array size seen] freqs total \"`\n\n&amp;#x200B;\n\n&amp;#x200B;",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_eavbp7h",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;TCL:&lt;/p&gt;\n\n&lt;p&gt;Part
        1&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;set flist [read -nonewline stdin]&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;puts
        &amp;quot;part1 [expr [join $flist &amp;quot;&amp;quot;]]&amp;quot;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Part
        2&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;set freq 0&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;set
        seen(0) 1&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;set done 0&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;while
        {!$done} {&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;foreach elt $flist
        {&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;`incr freq $elt`\n\n`if
        {[info exist seen($freq)]} {`\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;set
        done 1&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;break&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;`}`\n\n`set
        seen($freq) 1`\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;puts
        &amp;quot;part 2 first dup freq $freq, [array size seen] freqs total &amp;quot;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavbp7h/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1543690759.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543690759.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eavd548",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "tofflos",
        "can_mod_post": false, "created_utc": 1543691872.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_14gdz4", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I may have an input that is unsolvable for part 2. I don''t know what the
        odds are but I''d appreciate a sanity check: http://jsbin.com/nimemuluwa/1/edit?js,console.
        ;-)", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        may have an input that is unsolvable for part 2. I don&amp;#39;t know what
        the odds are but I&amp;#39;d appreciate a sanity check: &lt;a href=\"http://jsbin.com/nimemuluwa/1/edit?js,console\"&gt;http://jsbin.com/nimemuluwa/1/edit?js,console&lt;/a&gt;.
        ;-)&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavd548/",
        "subreddit_type": "public", "locked": false, "name": "t1_eavd548", "created":
        1543691872.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eavdsi3",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "CryZe92",
        "can_mod_post": false, "created_utc": 1543692362.0, "send_replies": true,
        "parent_id": "t1_eavd548", "score": 2, "author_fullname": "t2_f5xkf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "You need to start from the beginning of the list again if you don''t find
        it. Part 2 should therefore either find a value or infinitely loop (although
        at some point you exhaust all the numbers and find a duplicate or run out
        of available memory), so it shouldn''t ever return null.", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;You need to start from the beginning of
        the list again if you don&amp;#39;t find it. Part 2 should therefore either
        find a value or infinitely loop (although at some point you exhaust all the
        numbers and find a duplicate or run out of available memory), so it shouldn&amp;#39;t
        ever return null.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavdsi3/",
        "subreddit_type": "public", "locked": false, "name": "t1_eavdsi3", "created":
        1543692362.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eavdlij",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "CowInDavis",
        "can_mod_post": false, "created_utc": 1543692218.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_zdplv", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Go\n\tpackage main\n\n\timport (\n\t\t\"bufio\"\n\t\t\"fmt\"\n\t\t\"os\"\n\t\t\"strconv\"\n\t)\n\n\tfunc
        check(e error) {\n\t\tif e != nil {\n\t\t\tpanic(e)\n\t\t}\n\t}\n\n\tfunc
        readLines(path string) []string {\n\t\tf, err := os.Open(path)\n\t\tcheck(err)\n\t\tdefer
        f.Close()\n\t\tvar lines []string\n\t\tscanner := bufio.NewScanner(f)\n\t\tfor
        scanner.Scan() {\n\t\t\tlines = append(lines, scanner.Text())\n\t\t}\n\t\tcheck(scanner.Err())\n\t\treturn
        lines\n\t}\n\n\tfunc add(s string, sum int) int {\n\t\ti, err := strconv.Atoi(s)\n\t\tcheck(err)\n\t\tsum
        += i\n\t\treturn sum\n\t}\n\n\tfunc problem1(lines []string) int {\n\t\tvar
        sum int\n\t\tfor _, s := range lines {\n\t\t\tsum = add(s, sum)\n\t\t}\n\t\treturn
        sum\n\t}\n\n\tfunc problem2(lines []string) int {\n\t\tvar sum, i int\n\t\tsumSeen
        := map[int]struct{}{0: struct{}{}}\n\t\tfor true {\n\t\t\ts := lines[i]\n\t\t\ti
        = (i + 1) % len(lines)\n\t\t\tsum = add(s, sum)\n\t\t\tif _, ok := sumSeen[sum];
        ok {\n\t\t\t\treturn sum\n\t\t\t}\n\t\t\tsumSeen[sum] = struct{}{}\n\t\t}\n\t\treturn
        -1\n\t}\n\n\tfunc main() {\n\t\tlines := readLines(\"input.txt\")\n\t\tfmt.Println(\"Answer
        to problem 1 is: \", problem1(lines))\n\t\tfmt.Println(\"Answer to problem
        2 is: \", problem2(lines))\n\t}\n\n", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Go\n    package main&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        (\n    &amp;quot;bufio&amp;quot;\n    &amp;quot;fmt&amp;quot;\n    &amp;quot;os&amp;quot;\n    &amp;quot;strconv&amp;quot;\n)\n\nfunc
        check(e error) {\n    if e != nil {\n        panic(e)\n    }\n}\n\nfunc readLines(path
        string) []string {\n    f, err := os.Open(path)\n    check(err)\n    defer
        f.Close()\n    var lines []string\n    scanner := bufio.NewScanner(f)\n    for
        scanner.Scan() {\n        lines = append(lines, scanner.Text())\n    }\n    check(scanner.Err())\n    return
        lines\n}\n\nfunc add(s string, sum int) int {\n    i, err := strconv.Atoi(s)\n    check(err)\n    sum
        += i\n    return sum\n}\n\nfunc problem1(lines []string) int {\n    var sum
        int\n    for _, s := range lines {\n        sum = add(s, sum)\n    }\n    return
        sum\n}\n\nfunc problem2(lines []string) int {\n    var sum, i int\n    sumSeen
        := map[int]struct{}{0: struct{}{}}\n    for true {\n        s := lines[i]\n        i
        = (i + 1) % len(lines)\n        sum = add(s, sum)\n        if _, ok := sumSeen[sum];
        ok {\n            return sum\n        }\n        sumSeen[sum] = struct{}{}\n    }\n    return
        -1\n}\n\nfunc main() {\n    lines := readLines(&amp;quot;input.txt&amp;quot;)\n    fmt.Println(&amp;quot;Answer
        to problem 1 is: &amp;quot;, problem1(lines))\n    fmt.Println(&amp;quot;Answer
        to problem 2 is: &amp;quot;, problem2(lines))\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavdlij/",
        "subreddit_type": "public", "locked": false, "name": "t1_eavdlij", "created":
        1543692218.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543693686.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eavezws", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "CryZe92",
        "can_mod_post": false, "created_utc": 1543693276.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_f5xkf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Here''s my part 1 and 2 in Rust. The HashSet is a swiss table from the hashbrown
        crate.\n\n    /// Turn the input into an iterator of integers.\n    pub fn
        lines(input: &amp;str) -&gt; impl Iterator&lt;Item = i32&gt; + Clone + ''_
        {\n        input.lines().flat_map(|s| s.parse().ok())\n    }\n\n    /// Accumulate
        an iterator of integers into an iterator of frequencies.\n    fn frequencies&lt;''a&gt;(\n        input:
        impl Iterator&lt;Item = i32&gt; + Clone + ''a,\n    ) -&gt; impl Iterator&lt;Item
        = i32&gt; + Clone + ''a {\n        input.scan(0, |freq, val| {\n            *freq
        += val;\n            Some(*freq)\n        })\n    }\n\n    /// Takes an iterator
        of input integers and calculates part 1.\n    pub fn part1(input: impl Iterator&lt;Item
        = i32&gt; + Clone) -&gt; i32 {\n        frequencies(input).last().unwrap_or_default()\n    }\n\n    ///
        Takes an iterator of input integers and calculates part 2.\n    pub fn part2(input:
        impl Iterator&lt;Item = i32&gt;) -&gt; i32 {\n        let mut found_frequencies
        = HashSet::new();\n        found_frequencies.insert(0);\n\n        // Caching
        the parsed input is faster than reparsing it for real world \n        // inputs
        with multiple cycles.\n        let input = input.collect::&lt;Vec&lt;_&gt;&gt;();\n\n        let
        res = frequencies(input.iter().cloned().cycle())\n            .find(|&amp;freq|
        !found_frequencies.insert(freq))\n            .unwrap_or_default();\n\n        res\n    }\n\nHere''s
        the performance measurements:\n\n    Part 1                  time:   [25.322
        us 25.587 us 25.899 us]\n    Found 12 outliers among 100 measurements (12.00%)\n    2
        (2.00%) high mild\n    10 (10.00%) high severe\n\n    Part 2                  time:   [4.1338
        ms 4.1912 ms 4.2640 ms]\n    Found 6 outliers among 100 measurements (6.00%)\n    2
        (2.00%) high mild\n    4 (4.00%) high severe", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s my part 1 and 2 in Rust. The HashSet
        is a swiss table from the hashbrown crate.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;///
        Turn the input into an iterator of integers.\npub fn lines(input: &amp;amp;str)
        -&amp;gt; impl Iterator&amp;lt;Item = i32&amp;gt; + Clone + &amp;#39;_ {\n    input.lines().flat_map(|s|
        s.parse().ok())\n}\n\n/// Accumulate an iterator of integers into an iterator
        of frequencies.\nfn frequencies&amp;lt;&amp;#39;a&amp;gt;(\n    input: impl
        Iterator&amp;lt;Item = i32&amp;gt; + Clone + &amp;#39;a,\n) -&amp;gt; impl
        Iterator&amp;lt;Item = i32&amp;gt; + Clone + &amp;#39;a {\n    input.scan(0,
        |freq, val| {\n        *freq += val;\n        Some(*freq)\n    })\n}\n\n///
        Takes an iterator of input integers and calculates part 1.\npub fn part1(input:
        impl Iterator&amp;lt;Item = i32&amp;gt; + Clone) -&amp;gt; i32 {\n    frequencies(input).last().unwrap_or_default()\n}\n\n///
        Takes an iterator of input integers and calculates part 2.\npub fn part2(input:
        impl Iterator&amp;lt;Item = i32&amp;gt;) -&amp;gt; i32 {\n    let mut found_frequencies
        = HashSet::new();\n    found_frequencies.insert(0);\n\n    // Caching the
        parsed input is faster than reparsing it for real world \n    // inputs with
        multiple cycles.\n    let input = input.collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;();\n\n    let
        res = frequencies(input.iter().cloned().cycle())\n        .find(|&amp;amp;freq|
        !found_frequencies.insert(freq))\n        .unwrap_or_default();\n\n    res\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here&amp;#39;s
        the performance measurements:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Part 1                  time:   [25.322
        us 25.587 us 25.899 us]\nFound 12 outliers among 100 measurements (12.00%)\n2
        (2.00%) high mild\n10 (10.00%) high severe\n\nPart 2                  time:   [4.1338
        ms 4.1912 ms 4.2640 ms]\nFound 6 outliers among 100 measurements (6.00%)\n2
        (2.00%) high mild\n4 (4.00%) high severe\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavezws/",
        "subreddit_type": "public", "locked": false, "name": "t1_eavezws", "created":
        1543693276.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eavgcz2",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Sentreen",
        "can_mod_post": false, "created_utc": 1543694338.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_5ou81", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# Elixir\n\n    defmodule Y18.D1 do\n      @path \"input/2018_1.txt\"\n    \n      def
        p1 do\n        @path\n        |&gt; Path.expand()\n        |&gt; File.stream!()\n        |&gt;
        Stream.map(&amp;String.trim/1)\n        |&gt; Stream.map(&amp;String.to_integer/1)\n        |&gt;
        Enum.sum()\n      end\n    \n      def p2 do\n        @path\n        |&gt;
        Path.expand()\n        |&gt; File.stream!()\n        |&gt; Stream.map(&amp;String.trim/1)\n        |&gt;
        Stream.map(&amp;String.to_integer/1)\n        |&gt; Stream.cycle()\n        |&gt;
        Enum.reduce_while({0, MapSet.new([0])}, fn val, {sum , set} -&gt;\n          sum
        = sum + val\n          if sum in set, do: {:halt, sum}, else: {:cont, {sum,
        MapSet.put(set, sum)}}\n        end)\n      end\n    end\n    ", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;h1&gt;Elixir&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;defmodule
        Y18.D1 do\n  @path &amp;quot;input/2018_1.txt&amp;quot;\n\n  def p1 do\n    @path\n    |&amp;gt;
        Path.expand()\n    |&amp;gt; File.stream!()\n    |&amp;gt; Stream.map(&amp;amp;String.trim/1)\n    |&amp;gt;
        Stream.map(&amp;amp;String.to_integer/1)\n    |&amp;gt; Enum.sum()\n  end\n\n  def
        p2 do\n    @path\n    |&amp;gt; Path.expand()\n    |&amp;gt; File.stream!()\n    |&amp;gt;
        Stream.map(&amp;amp;String.trim/1)\n    |&amp;gt; Stream.map(&amp;amp;String.to_integer/1)\n    |&amp;gt;
        Stream.cycle()\n    |&amp;gt; Enum.reduce_while({0, MapSet.new([0])}, fn val,
        {sum , set} -&amp;gt;\n      sum = sum + val\n      if sum in set, do: {:halt,
        sum}, else: {:cont, {sum, MapSet.put(set, sum)}}\n    end)\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavgcz2/",
        "subreddit_type": "public", "locked": false, "name": "t1_eavgcz2", "created":
        1543694338.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eavgdd9",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "dag7dev",
        "can_mod_post": false, "created_utc": 1543694347.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_2pc8bs3x", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**C**\n1) Save the file given with the problem, I have called my file \"num\".\n2)
        Modify fopen if your filename is not equal to mine.\n3) Compile it...\n4)
        ???\n5) Profit\n\n```\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include
        &lt;iostream&gt;\nusing namespace std;\n\nint main(void) {\n    FILE *fp;\n    char
        car;\n    int num = 0;\n    int ris = 0;\n\n    fp = fopen(\"num\", \"r\");\n    \n    while(fscanf
        (fp, \"%c%d\", &amp;car, &amp;num) &gt; 0) {\n        ris += num;\n        cout
        &lt;&lt; \"Num: \" &lt;&lt; num &lt;&lt; endl;\n        cout &lt;&lt; \"Res:
        \" &lt;&lt; ris &lt;&lt; endl;\n        cout &lt;&lt; endl;\n    }\n\n    cout
        &lt;&lt; \"So the right answer is: \" &lt;&lt; ris &lt;&lt; endl &lt;&lt;
        endl;\n\n    fclose(fp);\n}\n```\n\nHere it is how I did, a possible solution
        in C/C++ mixed language! :)", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt;\n1)
        Save the file given with the problem, I have called my file &amp;quot;num&amp;quot;.\n2)
        Modify fopen if your filename is not equal to mine.\n3) Compile it...\n4)
        ???\n5) Profit&lt;/p&gt;\n\n&lt;p&gt;```&lt;/p&gt;\n\n&lt;h1&gt;include &amp;lt;stdio.h&amp;gt;&lt;/h1&gt;\n\n&lt;h1&gt;include
        &amp;lt;stdlib.h&amp;gt;&lt;/h1&gt;\n\n&lt;h1&gt;include &amp;lt;iostream&amp;gt;&lt;/h1&gt;\n\n&lt;p&gt;using
        namespace std;&lt;/p&gt;\n\n&lt;p&gt;int main(void) {\n    FILE *fp;\n    char
        car;\n    int num = 0;\n    int ris = 0;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fp
        = fopen(&amp;quot;num&amp;quot;, &amp;quot;r&amp;quot;);\n\nwhile(fscanf (fp,
        &amp;quot;%c%d&amp;quot;, &amp;amp;car, &amp;amp;num) &amp;gt; 0) {\n    ris
        += num;\n    cout &amp;lt;&amp;lt; &amp;quot;Num: &amp;quot; &amp;lt;&amp;lt;
        num &amp;lt;&amp;lt; endl;\n    cout &amp;lt;&amp;lt; &amp;quot;Res: &amp;quot;
        &amp;lt;&amp;lt; ris &amp;lt;&amp;lt; endl;\n    cout &amp;lt;&amp;lt; endl;\n}\n\ncout
        &amp;lt;&amp;lt; &amp;quot;So the right answer is: &amp;quot; &amp;lt;&amp;lt;
        ris &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; endl;\n\nfclose(fp);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}\n```&lt;/p&gt;\n\n&lt;p&gt;Here
        it is how I did, a possible solution in C/C++ mixed language! :)&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavgdd9/",
        "subreddit_type": "public", "locked": false, "name": "t1_eavgdd9", "created":
        1543694347.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543699442.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eavgv3w", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Cancer000",
        "can_mod_post": false, "created_utc": 1543694754.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_10w0jubt", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Solution (Python 3):**\n\n**Part 1 (Around half a second):**\n\nInput =
        \\[0\\]\n\nwhile Input\\[-1\\] != \"+121412\":\n\nInput.append(input(\"\"))\n\noutput
        = 0\n\nfor i in range(1,len(Input)):\n\nif Input\\[i\\]\\[0\\] == \"+\":\n\noutput
        += int(Input\\[i\\]\\[1:\\])\n\nelse:\n\noutput -= int(Input\\[i\\]\\[1:\\])\n\nprint(output)\n\n**Part
        2 (Around a minute):**\n\nprevious = \\[0\\]\n\nInput = \\[0\\]\n\noutput
        = 0\n\nBreak = False\n\nwhile Input\\[-1\\] != \"\":\n\nInput.append(input(\"\"))\n\ndel(Input\\[0\\])\n\ndel(Input\\[-1\\])\n\nwhile
        1:\n\nfor i in range(0,len(Input)):\n\nif Input\\[i\\]\\[0\\] == \"+\":\n\noutput
        += int(Input\\[i\\]\\[1:\\])\n\nelse:\n\noutput -= int(Input\\[i\\]\\[1:\\])\n\nif
        output in previous:\n\nprint(\"Repetition found at value \"+str(output))\n\nBreak
        = True\n\nbreak\n\nelse:\n\nprevious.append(output)\n\nif Break == True:\n\nbreak",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Solution
        (Python 3):&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Part 1 (Around
        half a second):&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Input = [0]&lt;/p&gt;\n\n&lt;p&gt;while
        Input[-1] != &amp;quot;+121412&amp;quot;:&lt;/p&gt;\n\n&lt;p&gt;Input.append(input(&amp;quot;&amp;quot;))&lt;/p&gt;\n\n&lt;p&gt;output
        = 0&lt;/p&gt;\n\n&lt;p&gt;for i in range(1,len(Input)):&lt;/p&gt;\n\n&lt;p&gt;if
        Input[i][0] == &amp;quot;+&amp;quot;:&lt;/p&gt;\n\n&lt;p&gt;output += int(Input[i][1:])&lt;/p&gt;\n\n&lt;p&gt;else:&lt;/p&gt;\n\n&lt;p&gt;output
        -= int(Input[i][1:])&lt;/p&gt;\n\n&lt;p&gt;print(output)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Part
        2 (Around a minute):&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;previous = [0]&lt;/p&gt;\n\n&lt;p&gt;Input
        = [0]&lt;/p&gt;\n\n&lt;p&gt;output = 0&lt;/p&gt;\n\n&lt;p&gt;Break = False&lt;/p&gt;\n\n&lt;p&gt;while
        Input[-1] != &amp;quot;&amp;quot;:&lt;/p&gt;\n\n&lt;p&gt;Input.append(input(&amp;quot;&amp;quot;))&lt;/p&gt;\n\n&lt;p&gt;del(Input[0])&lt;/p&gt;\n\n&lt;p&gt;del(Input[-1])&lt;/p&gt;\n\n&lt;p&gt;while
        1:&lt;/p&gt;\n\n&lt;p&gt;for i in range(0,len(Input)):&lt;/p&gt;\n\n&lt;p&gt;if
        Input[i][0] == &amp;quot;+&amp;quot;:&lt;/p&gt;\n\n&lt;p&gt;output += int(Input[i][1:])&lt;/p&gt;\n\n&lt;p&gt;else:&lt;/p&gt;\n\n&lt;p&gt;output
        -= int(Input[i][1:])&lt;/p&gt;\n\n&lt;p&gt;if output in previous:&lt;/p&gt;\n\n&lt;p&gt;print(&amp;quot;Repetition
        found at value &amp;quot;+str(output))&lt;/p&gt;\n\n&lt;p&gt;Break = True&lt;/p&gt;\n\n&lt;p&gt;break&lt;/p&gt;\n\n&lt;p&gt;else:&lt;/p&gt;\n\n&lt;p&gt;previous.append(output)&lt;/p&gt;\n\n&lt;p&gt;if
        Break == True:&lt;/p&gt;\n\n&lt;p&gt;break&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavgv3w/", "subreddit_type":
        "public", "locked": false, "name": "t1_eavgv3w", "created": 1543694754.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eavgy5q", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "CrazyEyezKillah", "can_mod_post": false,
        "created_utc": 1543694822.0, "send_replies": true, "parent_id": "t3_a20646",
        "score": 1, "author_fullname": "t2_46gf8", "report_reasons": null, "approved_by":
        null, "all_awardings": [], "collapsed": false, "body": "**Python3:**\n\nSimilar
        to what other came up with.\n\n    from itertools import cycle\n    \n    def
        calibrate(puzzle_input):\n        return sum((int(i) for i in puzzle_input))\n    \n    def
        repeat_frequency(puzzle_input):\n        unique_frequencies = {0}\n        running_frequency
        = 0\n        frequencies = (int(i) for i in puzzle_input)\n        for frequency
        in cycle(frequencies):\n            running_frequency += frequency\n            if
        running_frequency in unique_frequencies:\n                return running_frequency\n            else:\n                unique_frequencies.add(running_frequency)\n    \n    if
        __name__ == \"__main__\":\n        with open(''input.txt'', ''r'') as f:\n            puzzle_input
        = f.read().splitlines()\n            print(\"Part 1: {}\".format(calibrate(puzzle_input)))\n            print(\"Part
        2: {}\".format(repeat_frequency(puzzle_input)))", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python3:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Similar
        to what other came up with.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from itertools
        import cycle\n\ndef calibrate(puzzle_input):\n    return sum((int(i) for i
        in puzzle_input))\n\ndef repeat_frequency(puzzle_input):\n    unique_frequencies
        = {0}\n    running_frequency = 0\n    frequencies = (int(i) for i in puzzle_input)\n    for
        frequency in cycle(frequencies):\n        running_frequency += frequency\n        if
        running_frequency in unique_frequencies:\n            return running_frequency\n        else:\n            unique_frequencies.add(running_frequency)\n\nif
        __name__ == &amp;quot;__main__&amp;quot;:\n    with open(&amp;#39;input.txt&amp;#39;,
        &amp;#39;r&amp;#39;) as f:\n        puzzle_input = f.read().splitlines()\n        print(&amp;quot;Part
        1: {}&amp;quot;.format(calibrate(puzzle_input)))\n        print(&amp;quot;Part
        2: {}&amp;quot;.format(repeat_frequency(puzzle_input)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavgy5q/",
        "subreddit_type": "public", "locked": false, "name": "t1_eavgy5q", "created":
        1543694822.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eavijqj",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "__Abigail__",
        "can_mod_post": false, "created_utc": 1543696019.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_13exmr", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# Perl\n\nFirst day is always really easy.\n\n    #!/opt/perl/bin/perl\n\n    use
        5.028;\n\n    use strict;\n    use warnings;\n    no  warnings ''syntax'';\n\n    use
        experimental ''signatures'';\n    use experimental ''lexical_subs'';\n\n    my
        $input = \"input\";\n    open my $fh, \"&lt;\", $input or die \"Failed to
        open $input: $!\";\n    my @steps = &lt;$fh&gt;;\n    chomp (@steps);\n\n    #\n    #
        Part 1\n    #\n    my  $frequency = 0;\n        $frequency += $_ for @steps;\n    say
        \"Part 1: $frequency\";\n\n    #\n    # Part 2\n    #\n    $frequency = 0;\n    my
        %seen = ($frequency =&gt; 1);\n    while (1) {\n        foreach my $step (@steps)
        {\n            $frequency += $step;\n            if ($seen {$frequency} ++)
        {\n                say \"Part 2: $frequency\";\n                exit;\n            }\n        }\n    }\n\n\n    __END__\n",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Perl&lt;/h1&gt;\n\n&lt;p&gt;First
        day is always really easy.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/opt/perl/bin/perl\n\nuse
        5.028;\n\nuse strict;\nuse warnings;\nno  warnings &amp;#39;syntax&amp;#39;;\n\nuse
        experimental &amp;#39;signatures&amp;#39;;\nuse experimental &amp;#39;lexical_subs&amp;#39;;\n\nmy
        $input = &amp;quot;input&amp;quot;;\nopen my $fh, &amp;quot;&amp;lt;&amp;quot;,
        $input or die &amp;quot;Failed to open $input: $!&amp;quot;;\nmy @steps =
        &amp;lt;$fh&amp;gt;;\nchomp (@steps);\n\n#\n# Part 1\n#\nmy  $frequency =
        0;\n    $frequency += $_ for @steps;\nsay &amp;quot;Part 1: $frequency&amp;quot;;\n\n#\n#
        Part 2\n#\n$frequency = 0;\nmy %seen = ($frequency =&amp;gt; 1);\nwhile (1)
        {\n    foreach my $step (@steps) {\n        $frequency += $step;\n        if
        ($seen {$frequency} ++) {\n            say &amp;quot;Part 2: $frequency&amp;quot;;\n            exit;\n        }\n    }\n}\n\n\n__END__\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavijqj/",
        "subreddit_type": "public", "locked": false, "name": "t1_eavijqj", "created":
        1543696019.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eavje9e",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "gwillicoder",
        "can_mod_post": false, "created_utc": 1543696625.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_arru05z", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Python 3**\n\n    # Part 1\n    from functools import reduce\n    print(reduce(lambda
        x,y: eval(str(x)+y), open(''data.txt'').read().splitlines()))\n    \n    #
        part 2\n    from itertools import cycle, accumulate\n    \n    s = set([0])
        \n    print(next(res for res in accumulate(cycle(map(int,open(''data.txt'').read().splitlines())))
        if res in s or s.add(res))\n\n&amp;#x200B;", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python 3&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#
        Part 1\nfrom functools import reduce\nprint(reduce(lambda x,y: eval(str(x)+y),
        open(&amp;#39;data.txt&amp;#39;).read().splitlines()))\n\n# part 2\nfrom itertools
        import cycle, accumulate\n\ns = set([0]) \nprint(next(res for res in accumulate(cycle(map(int,open(&amp;#39;data.txt&amp;#39;).read().splitlines())))
        if res in s or s.add(res))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavje9e/",
        "subreddit_type": "public", "locked": false, "name": "t1_eavje9e", "created":
        1543696625.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543725197.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eavk971", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "lindgrenj6",
        "can_mod_post": false, "created_utc": 1543697258.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_gatu9", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "This is my first time doing advent of code. I''m a bit rusty as I''ve been
        doing consulting rather than coding for the last year, nevertheless heres
        my implmentation in ruby:\n\n\n    #!/usr/bin/env ruby\n    input = STDIN.each_line.map(&amp;:to_i)\n    \n    #
        Part One\n    puts ''Part One: '' + input.reduce(0, :+).to_s\n    \n    #
        Part Two\n    nums = {}\n    accumulator = 0\n    \n    input.cycle do |e|\n      accumulator
        += e\n      # use a hash because a list is way too slow\n      break unless
        nums[accumulator].nil?\n    \n      nums[accumulator] = true\n    end\n    puts
        ''Part Two: '' + accumulator.to_s\n    \n\naaand in Java (in case any students
        are around):\n\n    import java.io.IOException;\n    import java.util.ArrayList;\n    import
        java.util.HashSet;\n    import java.util.List;\n    import java.util.Scanner;\n    import
        java.util.Set;\n    \n    public class One {\n    \tpublic static void main(String[]
        args) throws IOException {\n    \t\tList&lt;Integer&gt; input = readInput();\n    \n    \t\tSystem.out.println(\"Part
        one: \" + p1(input));\n    \t\tSystem.out.println(\"Part two: \" + p2(input));\n    \t}\n    \n    \tprivate
        static Integer p2(List&lt;Integer&gt; input) {\n    \t\tSet&lt;Integer&gt;
        nums = new HashSet&lt;&gt;();\n    \t\tInteger accumulator = 0;\n    \n    \t\tBoolean
        found = false;\n    \t\twhile (!found) {\n    \t\t\tfor(Integer i : input)
        {\n    \t\t\t\taccumulator += i;\n    \t\t\t\tif(!nums.add(accumulator)) {\n    \t\t\t\t\tfound
        = true;\n    \t\t\t\t\tbreak;\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t\treturn
        accumulator;\n    \t}\n    \n    \tprivate static int p1(List&lt;Integer&gt;
        input) {\n    \t\tint p1 = input.stream().mapToInt(Integer::intValue).sum();\n    \t\treturn
        p1;\n    \t}\n    \n    \tprivate static List&lt;Integer&gt; readInput() {\n    \t\tList&lt;Integer&gt;
        input = new ArrayList&lt;&gt;();\n    \t\tScanner sc = new Scanner(System.in);\n    \t\twhile
        (sc.hasNextLine()) {\n    \t\t\tinput.add(sc.nextInt());\n    \t\t}\n    \t\tsc.close();\n    \t\treturn
        input;\n    \t}\n    }\n                ", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;This is my first time doing advent of code. I&amp;#39;m
        a bit rusty as I&amp;#39;ve been doing consulting rather than coding for the
        last year, nevertheless heres my implmentation in ruby:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/usr/bin/env
        ruby\ninput = STDIN.each_line.map(&amp;amp;:to_i)\n\n# Part One\nputs &amp;#39;Part
        One: &amp;#39; + input.reduce(0, :+).to_s\n\n# Part Two\nnums = {}\naccumulator
        = 0\n\ninput.cycle do |e|\n  accumulator += e\n  # use a hash because a list
        is way too slow\n  break unless nums[accumulator].nil?\n\n  nums[accumulator]
        = true\nend\nputs &amp;#39;Part Two: &amp;#39; + accumulator.to_s\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;aaand
        in Java (in case any students are around):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport
        java.util.List;\nimport java.util.Scanner;\nimport java.util.Set;\n\npublic
        class One {\n    public static void main(String[] args) throws IOException
        {\n        List&amp;lt;Integer&amp;gt; input = readInput();\n\n        System.out.println(&amp;quot;Part
        one: &amp;quot; + p1(input));\n        System.out.println(&amp;quot;Part two:
        &amp;quot; + p2(input));\n    }\n\n    private static Integer p2(List&amp;lt;Integer&amp;gt;
        input) {\n        Set&amp;lt;Integer&amp;gt; nums = new HashSet&amp;lt;&amp;gt;();\n        Integer
        accumulator = 0;\n\n        Boolean found = false;\n        while (!found)
        {\n            for(Integer i : input) {\n                accumulator += i;\n                if(!nums.add(accumulator))
        {\n                    found = true;\n                    break;\n                }\n            }\n        }\n        return
        accumulator;\n    }\n\n    private static int p1(List&amp;lt;Integer&amp;gt;
        input) {\n        int p1 = input.stream().mapToInt(Integer::intValue).sum();\n        return
        p1;\n    }\n\n    private static List&amp;lt;Integer&amp;gt; readInput() {\n        List&amp;lt;Integer&amp;gt;
        input = new ArrayList&amp;lt;&amp;gt;();\n        Scanner sc = new Scanner(System.in);\n        while
        (sc.hasNextLine()) {\n            input.add(sc.nextInt());\n        }\n        sc.close();\n        return
        input;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavk971/", "subreddit_type":
        "public", "locked": false, "name": "t1_eavk971", "created": 1543697258.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eavka6a", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "kubukoz", "can_mod_post": false, "created_utc":
        1543697279.0, "send_replies": true, "parent_id": "t3_a20646", "score": 1,
        "author_fullname": "t2_8vjfl", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "My solution in Scala (resource
        safe and purely functional): [https://github.com/kubukoz/advent-of-code-2018/blob/master/src/main/scala/com/kubukoz/adventofcode2017/Day1.scala](https://github.com/kubukoz/advent-of-code-2018/blob/master/src/main/scala/com/kubukoz/adventofcode2017/Day1.scala)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My solution in Scala
        (resource safe and purely functional): &lt;a href=\"https://github.com/kubukoz/advent-of-code-2018/blob/master/src/main/scala/com/kubukoz/adventofcode2017/Day1.scala\"&gt;https://github.com/kubukoz/advent-of-code-2018/blob/master/src/main/scala/com/kubukoz/adventofcode2017/Day1.scala&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavka6a/",
        "subreddit_type": "public", "locked": false, "name": "t1_eavka6a", "created":
        1543697279.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543699952.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eavkiam", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "PitykePadavan",
        "can_mod_post": false, "created_utc": 1543697450.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_g7ube", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**PHP**\n\nIf you have anything that bother you please write it down, I want
        to learn. Also I chose PHP because I got a job recently and I need to use
        it. \n\n    #Part 1\n    &lt;?php\n    \tclass Summary {\n    \t\tprivate
        $_lines;\n    \t\t\n    \t\tpublic function load_the_lines($filename) { $this
        -&gt; _lines = file($filename); }\n    \t\tpublic function sum_the_lines()
        {\n    \t\t\t$sum = 0;\n    \t\t\tforeach ($this -&gt; _lines as $line) $sum
        += $line;\n    \t\t\treturn $sum;\n    \t\t}\n    \t}\n    ?&gt;\n\n    \n    #Part2\n    &lt;?php\n    \tclass
        SumPart {\n    \t\tprivate $_part_results = array(0);\n    \t\tprivate $_lines;\n    \t\t\n    \t\tpublic
        function load_the_lines($filename) { $this -&gt; _lines = file($filename);
        }\n    \t\tpublic function get_first_repeat() {\n    \t\t\t$this -&gt; check_reaching_twice_loop();\n    \t\t\treturn
        end($this -&gt; _part_results); \n    \t\t}\n    \t\tprivate function check_reaching_twice_once()
        {\n    \t\t\t$found = False;\n    \t\t\tforeach ($this -&gt; _lines as $line)
        {\n    \t\t\t\t$next_result = end($this -&gt; _part_results) + $line;\n    \t\t\t\tif
        (in_array($next_result, $this -&gt; _part_results)) {\n    \t\t\t\t\t$found
        = True;\n    \t\t\t\t\tarray_push($this -&gt; _part_results,$next_result);\n    \t\t\t\t\tbreak;\n    \t\t\t\t}\n    \t\t\t\tarray_push($this
        -&gt; _part_results,$next_result);\n    \t\t\t}\n    \t\t\treturn $found;\n    \t\t}\n    \t\tprivate
        function check_reaching_twice_loop() {\n    \t\t\t$found = False;\n    \t\t\twhile
        (boolval ($found) == False) $found = $this -&gt; check_reaching_twice_once();\n    \t\t}\n    \t}\n    ?&gt;\n    \n",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;PHP&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;If
        you have anything that bother you please write it down, I want to learn. Also
        I chose PHP because I got a job recently and I need to use it. &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#Part
        1\n&amp;lt;?php\n    class Summary {\n        private $_lines;\n\n        public
        function load_the_lines($filename) { $this -&amp;gt; _lines = file($filename);
        }\n        public function sum_the_lines() {\n            $sum = 0;\n            foreach
        ($this -&amp;gt; _lines as $line) $sum += $line;\n            return $sum;\n        }\n    }\n?&amp;gt;\n\n\n#Part2\n&amp;lt;?php\n    class
        SumPart {\n        private $_part_results = array(0);\n        private $_lines;\n\n        public
        function load_the_lines($filename) { $this -&amp;gt; _lines = file($filename);
        }\n        public function get_first_repeat() {\n            $this -&amp;gt;
        check_reaching_twice_loop();\n            return end($this -&amp;gt; _part_results);
        \n        }\n        private function check_reaching_twice_once() {\n            $found
        = False;\n            foreach ($this -&amp;gt; _lines as $line) {\n                $next_result
        = end($this -&amp;gt; _part_results) + $line;\n                if (in_array($next_result,
        $this -&amp;gt; _part_results)) {\n                    $found = True;\n                    array_push($this
        -&amp;gt; _part_results,$next_result);\n                    break;\n                }\n                array_push($this
        -&amp;gt; _part_results,$next_result);\n            }\n            return
        $found;\n        }\n        private function check_reaching_twice_loop() {\n            $found
        = False;\n            while (boolval ($found) == False) $found = $this -&amp;gt;
        check_reaching_twice_once();\n        }\n    }\n?&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavkiam/",
        "subreddit_type": "public", "locked": false, "name": "t1_eavkiam", "created":
        1543697450.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eavko75",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Levivig",
        "can_mod_post": false, "created_utc": 1543697566.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_i4j9k", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Swift -** [Check it out on Github](https://github.com/Levivig/AdventOfCode2018)\n\n    import
        Foundation\n    \n    // MARK: Get the input data\n    let input = read(file:
        \"data\", of: \"txt\")\n    let numberInput = input.compactMap({Int($0)})\n    \n    //
        MARK: - Part 1\n    let result1 = numberInput.reduce(0, +)\n    print(\"Part
        1: \\(result1)\")\n    \n    // MARK: - Part 2\n    var currentFreq = 0\n    var
        seen: Set = [currentFreq]\n    \n    var index = 0\n    while true {\n        let
        change = numberInput[index]\n        currentFreq += change\n    \n        if
        seen.insert(currentFreq).inserted {\n            // New frequency value\n        }
        else {\n            print(\"Part 2: \\(currentFreq)\")\n            break\n        }\n        index
        = (index + 1) % numberInput.count\n    }\n\nThe [Set insert(\\_:)](https://developer.apple.com/documentation/swift/set/1541375-insert)  function
        returns a bool indication wether it was successful, using this helped a lot.",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Swift
        -&lt;/strong&gt; &lt;a href=\"https://github.com/Levivig/AdventOfCode2018\"&gt;Check
        it out on Github&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import Foundation\n\n//
        MARK: Get the input data\nlet input = read(file: &amp;quot;data&amp;quot;,
        of: &amp;quot;txt&amp;quot;)\nlet numberInput = input.compactMap({Int($0)})\n\n//
        MARK: - Part 1\nlet result1 = numberInput.reduce(0, +)\nprint(&amp;quot;Part
        1: \\(result1)&amp;quot;)\n\n// MARK: - Part 2\nvar currentFreq = 0\nvar seen:
        Set = [currentFreq]\n\nvar index = 0\nwhile true {\n    let change = numberInput[index]\n    currentFreq
        += change\n\n    if seen.insert(currentFreq).inserted {\n        // New frequency
        value\n    } else {\n        print(&amp;quot;Part 2: \\(currentFreq)&amp;quot;)\n        break\n    }\n    index
        = (index + 1) % numberInput.count\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The
        &lt;a href=\"https://developer.apple.com/documentation/swift/set/1541375-insert\"&gt;Set
        insert(_:)&lt;/a&gt;  function returns a bool indication wether it was successful,
        using this helped a lot.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavko75/",
        "subreddit_type": "public", "locked": false, "name": "t1_eavko75", "created":
        1543697566.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_ebb4m1t", "id": "ebb4m1t", "parent_id":
        "t1_eavko75", "depth": 1, "children": ["ebb4m1t"]}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eavnks9", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_a20646", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "**Haskell**\n    \n    import Data.Set\n    \n    data
        FrequencyChange = Add Integer | Subtract Integer deriving Show\n    \n    stringToFrequencyChange
        :: String -&gt; FrequencyChange\n    stringToFrequencyChange (''+'':s) = Add
        $ read s\n    stringToFrequencyChange (''-'':s) = Subtract $ read s\n    stringToFrequencyChange
        _ = error \"Expecting ''+'' or ''-'' at start of input string\"\n    \n    applyFrequencyChange
        :: Integer -&gt; FrequencyChange -&gt; Integer\n    applyFrequencyChange frequency
        (Add i) = frequency + i\n    applyFrequencyChange frequency (Subtract i) =
        frequency - i\n    \n    calculateFrequency :: Integer -&gt; [FrequencyChange]
        -&gt; Integer\n    calculateFrequency initial changes = Prelude.foldl applyFrequencyChange
        initial changes\n    \n    findDuplicate :: [FrequencyChange] -&gt; Set Integer
        -&gt; Integer -&gt; Integer\n    findDuplicate changes frequencies current\n      |
        member newFrequency frequencies = newFrequency\n      | otherwise = findDuplicate
        newChanges updatedFrequencies newFrequency\n      where (change:newChanges)
        = changes\n            newFrequency = applyFrequencyChange current change\n            updatedFrequencies
        = insert newFrequency frequencies\n    \n    solveProblemOne :: String -&gt;
        String\n    solveProblemOne = show . calculateFrequency 0 . Prelude.map stringToFrequencyChange
        . words\n    \n    solveProblemTwo :: String -&gt; String\n    solveProblemTwo
        input = show $ findDuplicate changes empty 0\n      where changes = cycle
        $ Prelude.map stringToFrequencyChange $ words input\n", "awarders": [], "downs":
        0, "author_flair_css_class": null, "name": "t1_eavnks9", "collapsed": false,
        "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Haskell&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        Data.Set\n\ndata FrequencyChange = Add Integer | Subtract Integer deriving
        Show\n\nstringToFrequencyChange :: String -&amp;gt; FrequencyChange\nstringToFrequencyChange
        (&amp;#39;+&amp;#39;:s) = Add $ read s\nstringToFrequencyChange (&amp;#39;-&amp;#39;:s)
        = Subtract $ read s\nstringToFrequencyChange _ = error &amp;quot;Expecting
        &amp;#39;+&amp;#39; or &amp;#39;-&amp;#39; at start of input string&amp;quot;\n\napplyFrequencyChange
        :: Integer -&amp;gt; FrequencyChange -&amp;gt; Integer\napplyFrequencyChange
        frequency (Add i) = frequency + i\napplyFrequencyChange frequency (Subtract
        i) = frequency - i\n\ncalculateFrequency :: Integer -&amp;gt; [FrequencyChange]
        -&amp;gt; Integer\ncalculateFrequency initial changes = Prelude.foldl applyFrequencyChange
        initial changes\n\nfindDuplicate :: [FrequencyChange] -&amp;gt; Set Integer
        -&amp;gt; Integer -&amp;gt; Integer\nfindDuplicate changes frequencies current\n  |
        member newFrequency frequencies = newFrequency\n  | otherwise = findDuplicate
        newChanges updatedFrequencies newFrequency\n  where (change:newChanges) =
        changes\n        newFrequency = applyFrequencyChange current change\n        updatedFrequencies
        = insert newFrequency frequencies\n\nsolveProblemOne :: String -&amp;gt; String\nsolveProblemOne
        = show . calculateFrequency 0 . Prelude.map stringToFrequencyChange . words\n\nsolveProblemTwo
        :: String -&amp;gt; String\nsolveProblemTwo input = show $ findDuplicate changes
        empty 0\n  where changes = cycle $ Prelude.map stringToFrequencyChange $ words
        input\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "can_gild": false, "top_awarded_type": null, "unrepliable_reason": null, "author_flair_text_color":
        "dark", "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavnks9/",
        "num_reports": null, "locked": false, "report_reasons": null, "created": 1543699839.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1543699839.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eavo7lt",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "quackyrabbit",
        "can_mod_post": false, "created_utc": 1543700358.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_361qiak", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Racket**\n\n    #lang racket\n\n    (define  (soround fn pre post)\n      (eval
        (read (open-input-string\n                   (string-append pre\n                                  (port-&gt;string
        (open-input-file fn))\n                                  post))))) \n    \n    (define
        (solve1 fn)\n      (soround fn \"(+ \" \")\"))\n    \n    (define (solve2
        fn)\n      (define data (soround fn \"(list \" \")\"))\n      (define inf
        (delay (append data inf))) ; construct the infinite list\n      (set! seen
        (make-hash)) ; clear seen\n      (proc inf 0))\n    \n    (define seen (make-hash))\n    \n    (define
        (proc lst sum)\n      (match (force lst)\n        [(cons next promise)\n         (let*
        [(new (+ sum next))]\n           (if (hash-has-key? seen new)\n               new\n               (begin\n                 (hash-set!
        seen new #t)\n                 (proc promise new))))]))\n    ", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Racket&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#lang
        racket\n\n(define  (soround fn pre post)\n  (eval (read (open-input-string\n               (string-append
        pre\n                              (port-&amp;gt;string (open-input-file fn))\n                              post)))))
        \n\n(define (solve1 fn)\n  (soround fn &amp;quot;(+ &amp;quot; &amp;quot;)&amp;quot;))\n\n(define
        (solve2 fn)\n  (define data (soround fn &amp;quot;(list &amp;quot; &amp;quot;)&amp;quot;))\n  (define
        inf (delay (append data inf))) ; construct the infinite list\n  (set! seen
        (make-hash)) ; clear seen\n  (proc inf 0))\n\n(define seen (make-hash))\n\n(define
        (proc lst sum)\n  (match (force lst)\n    [(cons next promise)\n     (let*
        [(new (+ sum next))]\n       (if (hash-has-key? seen new)\n           new\n           (begin\n             (hash-set!
        seen new #t)\n             (proc promise new))))]))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavo7lt/",
        "subreddit_type": "public", "locked": false, "name": "t1_eavo7lt", "created":
        1543700358.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eavpbya",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "nosblod",
        "can_mod_post": false, "created_utc": 1543701310.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_10sjjz9w", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Verilog** with testbench: [https://github.com/LetsAdventOfCode/AdventOfCode2018/tree/master/bambi/01](https://github.com/LetsAdventOfCode/AdventOfCode2018/tree/master/bambi/01)\n\nI
        would really like some feedback!\n\nCould the inputs be sent to the calibration
        module in a better way? And how about solving part 2?", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Verilog&lt;/strong&gt; with testbench:
        &lt;a href=\"https://github.com/LetsAdventOfCode/AdventOfCode2018/tree/master/bambi/01\"&gt;https://github.com/LetsAdventOfCode/AdventOfCode2018/tree/master/bambi/01&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I
        would really like some feedback!&lt;/p&gt;\n\n&lt;p&gt;Could the inputs be
        sent to the calibration module in a better way? And how about solving part
        2?&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason": null,
        "associated_award": null, "stickied": false, "author_premium": false, "can_gild":
        false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavpbya/",
        "subreddit_type": "public", "locked": false, "name": "t1_eavpbya", "created":
        1543701310.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 2, "name": "t1_eaw4712", "id": "eaw4712", "parent_id":
        "t1_eavpbya", "depth": 1, "children": ["eaw4712"]}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eavrj80",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Dreyri",
        "can_mod_post": false, "created_utc": 1543703019.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_bxlf4", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Obligatory template metaprogramming since constexpr alone wasn''t optimizing
        everything away.\n\nI''m pretty sure this would work but my computer doesn''t
        have enough memory to handle all the recursion.\n\n    #include &lt;limits&gt;\n    #include
        &lt;utility&gt;\n    \n    // first problem, sum all numbers\n    \n    template
        &lt;typename...&gt; struct sum;\n    \n    template &lt;typename T&gt;\n    struct
        sum&lt;std::integer_sequence&lt;T&gt;&gt; : std::integral_constant&lt;T, 0&gt;
        {};\n    \n    template &lt;typename T, T i&gt;\n    struct sum&lt;std::integer_sequence&lt;T,
        i&gt;&gt; : std::integral_constant&lt;T, i&gt; {};\n    \n    template &lt;typename
        T, T lhs, T rhs&gt;\n    struct sum&lt;std::integer_sequence&lt;T, lhs, rhs&gt;&gt;\n        :
        sum&lt;std::integer_sequence&lt;T, (lhs + rhs)&gt;&gt; {};\n    \n    template
        &lt;typename T, T lhs, T rhs, T... rest&gt;\n    struct sum&lt;std::integer_sequence&lt;T,
        lhs, rhs, rest...&gt;&gt;\n        : sum&lt;std::integer_sequence&lt;T, (lhs
        + rhs), rest...&gt;&gt; {};\n    \n    // second problem, find first sum that
        occurs twice\n    \n    // check if a list contains a value\n    template
        &lt;typename T, T val, T... list&gt; struct contains;\n    \n    template
        &lt;typename T, T val&gt; struct contains&lt;T, val&gt; : std::false_type
        {};\n    \n    template &lt;typename T, T val, T test, T... rest&gt;\n    struct
        contains&lt;T, val, test, rest...&gt;\n        : std::conditional_t&lt;(val
        == test), std::true_type,\n                             contains&lt;T, val,
        rest...&gt;&gt; {};\n    \n    template &lt;typename...&gt; struct find_first_duplicate_help;\n    \n    //
        when we ran out\n    template &lt;typename T, T... test, T curr&gt;\n    struct
        find_first_duplicate_help&lt;std::integer_sequence&lt;T, test...&gt;,\n                                     std::integral_constant&lt;T,
        curr&gt;&gt;\n        : std::conditional_t&lt;\n              contains&lt;T,
        curr, test...&gt;::value, std::integral_constant&lt;T, curr&gt;,\n              std::integral_constant&lt;T,
        std::numeric_limits&lt;T&gt;::max()&gt;&gt; {};\n    \n    template &lt;typename
        T, T... test, T curr, T next, T... rest&gt;\n    struct find_first_duplicate_help&lt;std::integer_sequence&lt;T,
        test...&gt;,\n                                     std::integral_constant&lt;T,
        curr&gt;,\n                                     std::integer_sequence&lt;T,
        next, rest...&gt;&gt;\n        : std::conditional_t&lt;\n              contains&lt;T,
        curr, test...&gt;::value, std::integral_constant&lt;T, curr&gt;,\n              find_first_duplicate_help&lt;std::integer_sequence&lt;T,
        test..., curr&gt;,\n                                        std::integral_constant&lt;T,
        next&gt;,\n                                        std::integer_sequence&lt;T,
        rest...&gt;&gt;&gt; {};\n    \n    template &lt;typename T, T...&gt; struct
        find_first_duplicate_splitter;\n    \n    template &lt;typename T, T first,
        T... rest&gt;\n    struct find_first_duplicate_splitter&lt;T, first, rest...&gt;\n        :
        find_first_duplicate_help&lt;std::integer_sequence&lt;T&gt;,\n                                    std::integral_constant&lt;T,
        first&gt;,\n                                    std::integer_sequence&lt;T,
        rest...&gt;&gt; {};\n    \n    template &lt;typename...&gt; struct find_first_duplicate;\n    \n    template
        &lt;typename T, T... Is&gt;\n    struct find_first_duplicate&lt;std::integer_sequence&lt;T,
        Is...&gt;&gt;\n        : find_first_duplicate_splitter&lt;T, Is...&gt; {};\n    \n    template
        &lt;typename T, std::size_t N, T...&gt; struct nth;\n    \n    template &lt;typename
        T, std::size_t N&gt;\n    struct nth&lt;T, N&gt; : std::integral_constant&lt;T,
        0&gt; {};\n    \n    template &lt;typename T, std::size_t N, T val, T... Rest&gt;\n    struct
        nth&lt;T, N, val, Rest...&gt;\n        : std::conditional_t&lt;(N == 0), std::integral_constant&lt;T,
        val&gt;,\n                             nth&lt;T, (N - 1), Rest...&gt;&gt;
        {};\n    \n    template &lt;typename T, T... vals&gt; struct first : nth&lt;T,
        0, vals...&gt; {};\n    \n    template &lt;typename T, T... vals&gt;\n    struct
        last : nth&lt;T, (sizeof...(vals) - 1), vals...&gt; {};\n    \n    template
        &lt;typename In, typename Out&gt; struct cum_sum_help;\n    \n    template
        &lt;typename T, T val, T... Is, T... Os&gt;\n    struct cum_sum_help&lt;std::integer_sequence&lt;T,
        val, Is...&gt;,\n                        std::integer_sequence&lt;T, Os...&gt;&gt;\n        :
        std::conditional_t&lt;\n              (sizeof...(Is) == 0), // when we run
        out of values\n              std::integer_sequence&lt;T, Os..., (last&lt;T,
        Os...&gt;::value + val)&gt;,\n              cum_sum_help&lt;\n                  std::integer_sequence&lt;T,
        Is...&gt;,\n                  std::integer_sequence&lt;T, Os..., last&lt;T,
        Os...&gt;::value + val&gt;&gt;&gt; {};\n    \n    template &lt;typename...&gt;
        struct cum_sum;\n    \n    template &lt;typename T, T... Is&gt; struct cum_sum&lt;std::integer_sequence&lt;T,
        Is...&gt;&gt; {\n      using type = typename cum_sum_help&lt;std::integer_sequence&lt;T,
        Is...&gt;,\n                                         std::integer_sequence&lt;T&gt;&gt;::type;\n    };\n    \n    int
        main() {\n      using numbers = std::integer_sequence&lt;your_numbers&gt;;\n    \n      return
        find_first_duplicate&lt;typename cum_sum&lt;numbers&gt;::type&gt;::value;\n      //
        return sum&lt;numbers&gt;::value;\n    }", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Obligatory template metaprogramming since constexpr
        alone wasn&amp;#39;t optimizing everything away.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m
        pretty sure this would work but my computer doesn&amp;#39;t have enough memory
        to handle all the recursion.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include
        &amp;lt;limits&amp;gt;\n#include &amp;lt;utility&amp;gt;\n\n// first problem,
        sum all numbers\n\ntemplate &amp;lt;typename...&amp;gt; struct sum;\n\ntemplate
        &amp;lt;typename T&amp;gt;\nstruct sum&amp;lt;std::integer_sequence&amp;lt;T&amp;gt;&amp;gt;
        : std::integral_constant&amp;lt;T, 0&amp;gt; {};\n\ntemplate &amp;lt;typename
        T, T i&amp;gt;\nstruct sum&amp;lt;std::integer_sequence&amp;lt;T, i&amp;gt;&amp;gt;
        : std::integral_constant&amp;lt;T, i&amp;gt; {};\n\ntemplate &amp;lt;typename
        T, T lhs, T rhs&amp;gt;\nstruct sum&amp;lt;std::integer_sequence&amp;lt;T,
        lhs, rhs&amp;gt;&amp;gt;\n    : sum&amp;lt;std::integer_sequence&amp;lt;T,
        (lhs + rhs)&amp;gt;&amp;gt; {};\n\ntemplate &amp;lt;typename T, T lhs, T rhs,
        T... rest&amp;gt;\nstruct sum&amp;lt;std::integer_sequence&amp;lt;T, lhs,
        rhs, rest...&amp;gt;&amp;gt;\n    : sum&amp;lt;std::integer_sequence&amp;lt;T,
        (lhs + rhs), rest...&amp;gt;&amp;gt; {};\n\n// second problem, find first
        sum that occurs twice\n\n// check if a list contains a value\ntemplate &amp;lt;typename
        T, T val, T... list&amp;gt; struct contains;\n\ntemplate &amp;lt;typename
        T, T val&amp;gt; struct contains&amp;lt;T, val&amp;gt; : std::false_type {};\n\ntemplate
        &amp;lt;typename T, T val, T test, T... rest&amp;gt;\nstruct contains&amp;lt;T,
        val, test, rest...&amp;gt;\n    : std::conditional_t&amp;lt;(val == test),
        std::true_type,\n                         contains&amp;lt;T, val, rest...&amp;gt;&amp;gt;
        {};\n\ntemplate &amp;lt;typename...&amp;gt; struct find_first_duplicate_help;\n\n//
        when we ran out\ntemplate &amp;lt;typename T, T... test, T curr&amp;gt;\nstruct
        find_first_duplicate_help&amp;lt;std::integer_sequence&amp;lt;T, test...&amp;gt;,\n                                 std::integral_constant&amp;lt;T,
        curr&amp;gt;&amp;gt;\n    : std::conditional_t&amp;lt;\n          contains&amp;lt;T,
        curr, test...&amp;gt;::value, std::integral_constant&amp;lt;T, curr&amp;gt;,\n          std::integral_constant&amp;lt;T,
        std::numeric_limits&amp;lt;T&amp;gt;::max()&amp;gt;&amp;gt; {};\n\ntemplate
        &amp;lt;typename T, T... test, T curr, T next, T... rest&amp;gt;\nstruct find_first_duplicate_help&amp;lt;std::integer_sequence&amp;lt;T,
        test...&amp;gt;,\n                                 std::integral_constant&amp;lt;T,
        curr&amp;gt;,\n                                 std::integer_sequence&amp;lt;T,
        next, rest...&amp;gt;&amp;gt;\n    : std::conditional_t&amp;lt;\n          contains&amp;lt;T,
        curr, test...&amp;gt;::value, std::integral_constant&amp;lt;T, curr&amp;gt;,\n          find_first_duplicate_help&amp;lt;std::integer_sequence&amp;lt;T,
        test..., curr&amp;gt;,\n                                    std::integral_constant&amp;lt;T,
        next&amp;gt;,\n                                    std::integer_sequence&amp;lt;T,
        rest...&amp;gt;&amp;gt;&amp;gt; {};\n\ntemplate &amp;lt;typename T, T...&amp;gt;
        struct find_first_duplicate_splitter;\n\ntemplate &amp;lt;typename T, T first,
        T... rest&amp;gt;\nstruct find_first_duplicate_splitter&amp;lt;T, first, rest...&amp;gt;\n    :
        find_first_duplicate_help&amp;lt;std::integer_sequence&amp;lt;T&amp;gt;,\n                                std::integral_constant&amp;lt;T,
        first&amp;gt;,\n                                std::integer_sequence&amp;lt;T,
        rest...&amp;gt;&amp;gt; {};\n\ntemplate &amp;lt;typename...&amp;gt; struct
        find_first_duplicate;\n\ntemplate &amp;lt;typename T, T... Is&amp;gt;\nstruct
        find_first_duplicate&amp;lt;std::integer_sequence&amp;lt;T, Is...&amp;gt;&amp;gt;\n    :
        find_first_duplicate_splitter&amp;lt;T, Is...&amp;gt; {};\n\ntemplate &amp;lt;typename
        T, std::size_t N, T...&amp;gt; struct nth;\n\ntemplate &amp;lt;typename T,
        std::size_t N&amp;gt;\nstruct nth&amp;lt;T, N&amp;gt; : std::integral_constant&amp;lt;T,
        0&amp;gt; {};\n\ntemplate &amp;lt;typename T, std::size_t N, T val, T... Rest&amp;gt;\nstruct
        nth&amp;lt;T, N, val, Rest...&amp;gt;\n    : std::conditional_t&amp;lt;(N
        == 0), std::integral_constant&amp;lt;T, val&amp;gt;,\n                         nth&amp;lt;T,
        (N - 1), Rest...&amp;gt;&amp;gt; {};\n\ntemplate &amp;lt;typename T, T...
        vals&amp;gt; struct first : nth&amp;lt;T, 0, vals...&amp;gt; {};\n\ntemplate
        &amp;lt;typename T, T... vals&amp;gt;\nstruct last : nth&amp;lt;T, (sizeof...(vals)
        - 1), vals...&amp;gt; {};\n\ntemplate &amp;lt;typename In, typename Out&amp;gt;
        struct cum_sum_help;\n\ntemplate &amp;lt;typename T, T val, T... Is, T...
        Os&amp;gt;\nstruct cum_sum_help&amp;lt;std::integer_sequence&amp;lt;T, val,
        Is...&amp;gt;,\n                    std::integer_sequence&amp;lt;T, Os...&amp;gt;&amp;gt;\n    :
        std::conditional_t&amp;lt;\n          (sizeof...(Is) == 0), // when we run
        out of values\n          std::integer_sequence&amp;lt;T, Os..., (last&amp;lt;T,
        Os...&amp;gt;::value + val)&amp;gt;,\n          cum_sum_help&amp;lt;\n              std::integer_sequence&amp;lt;T,
        Is...&amp;gt;,\n              std::integer_sequence&amp;lt;T, Os..., last&amp;lt;T,
        Os...&amp;gt;::value + val&amp;gt;&amp;gt;&amp;gt; {};\n\ntemplate &amp;lt;typename...&amp;gt;
        struct cum_sum;\n\ntemplate &amp;lt;typename T, T... Is&amp;gt; struct cum_sum&amp;lt;std::integer_sequence&amp;lt;T,
        Is...&amp;gt;&amp;gt; {\n  using type = typename cum_sum_help&amp;lt;std::integer_sequence&amp;lt;T,
        Is...&amp;gt;,\n                                     std::integer_sequence&amp;lt;T&amp;gt;&amp;gt;::type;\n};\n\nint
        main() {\n  using numbers = std::integer_sequence&amp;lt;your_numbers&amp;gt;;\n\n  return
        find_first_duplicate&amp;lt;typename cum_sum&amp;lt;numbers&amp;gt;::type&amp;gt;::value;\n  //
        return sum&amp;lt;numbers&amp;gt;::value;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavrj80/",
        "subreddit_type": "public", "locked": false, "name": "t1_eavrj80", "created":
        1543703019.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eavs5eb",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Betterthangoku",
        "can_mod_post": false, "created_utc": 1543703486.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_cy9vk", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "PowerShell\n\nMy solution is similar to one already posted, but I used constructs
        rather than the pipeline.\n\nPart 1\n\n    [int[]]$data = get-content ''PS:\\AdventofCode2018\\Day
        1\\PuzzleInput.txt''\n\n    $value = 0\n\n    Foreach ($number in $data) {\n        $value
        += $number\n    }\n    $value\n\nPart 2\n\n    [int[]]$data = get-content
        ''PS:\\AdventofCode2018\\Day 1\\PuzzleInput.txt''\n\n    $value = 0\n    $Values
        = New-Object -TypeName System.Collections.Generic.List[int]\n    $Values.add($value)\n    $stop
        = $true\n    Do {\n        Foreach ($number in $data) {\n            $value
        += $number\n            If ($Values.Contains($value)) {\n                \"dup
        found: $value\" \n                $Values.count\n                $stop = $False\n                Break\n            }\n            $Values.add($value)\n    \n        }\n    \n    }\n    While
        ($stop)", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;PowerShell&lt;/p&gt;\n\n&lt;p&gt;My
        solution is similar to one already posted, but I used constructs rather than
        the pipeline.&lt;/p&gt;\n\n&lt;p&gt;Part 1&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[int[]]$data
        = get-content &amp;#39;PS:\\AdventofCode2018\\Day 1\\PuzzleInput.txt&amp;#39;\n\n$value
        = 0\n\nForeach ($number in $data) {\n    $value += $number\n}\n$value\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[int[]]$data = get-content &amp;#39;PS:\\AdventofCode2018\\Day
        1\\PuzzleInput.txt&amp;#39;\n\n$value = 0\n$Values = New-Object -TypeName
        System.Collections.Generic.List[int]\n$Values.add($value)\n$stop = $true\nDo
        {\n    Foreach ($number in $data) {\n        $value += $number\n        If
        ($Values.Contains($value)) {\n            &amp;quot;dup found: $value&amp;quot;
        \n            $Values.count\n            $stop = $False\n            Break\n        }\n        $Values.add($value)\n\n    }\n\n}\nWhile
        ($stop)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavs5eb/",
        "subreddit_type": "public", "locked": false, "name": "t1_eavs5eb", "created":
        1543703486.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543749389.0, "mod_reason_by": null,
        "banned_by": null, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eavtdpe", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_a20646", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "# Forth (gforth)\n\nI had to edit the input and remove
        the + signs.\n\nPart 1\n\n    : sumstack ( n1 n2 n3 ... nN -- sum )\n       begin
        + depth 1 = until ;\n\n    sumstack . cr&lt;/code&gt;\n\nSample run\n\n    $
        time gforth-fast day01.txt day01a.fs -e bye\n    real    0m0.010s\n    user    0m0.008s\n    sys     0m0.000s\n\n--------\n\nPart
        2\n\n    10000000 constant LIMIT\n    : 2LIMIT LIMIT 2 * ;\n\n    variable
        freq 0 freq !\n    variable index 1 index !\n\n    create c!freqs 2LIMIT chars
        allot\n    create seq 1000 cells allot\n\n    \\ zero all elements of freqs
        (including freqs itself)\n    : clear-freqs ( -- )\n       0 c!freqs !\n       2LIMIT
        1 do 0 c!freqs i chars + c! loop\n    ;\n\n    \\ fill seq with stack in reverse
        order\n    \\ seq[1] = bottom of stack; seq[n] = top of stack\n    \\ seq
        itself gets the number of items\n    : fill-seq ( n1 n2 ... nN -- )\n       depth
        seq !\n       depth 1 swap do\n          seq i cells + !\n       -1 +loop\n    ;\n\n    :
        seq-fetch ( index -- seq[index] )\n       seq swap cells + @\n    ;\n\n    :
        markseen ( n -- )\n       1 swap c!freqs swap LIMIT + chars + c!\n    ;\n\n    :
        unseen? ( n -- f )\n       c!freqs swap LIMIT + chars + c@ 0 =\n    ;\n\n    :
        update-freq ( index -- ) \\ update frequency with value at index\n          seq-fetch
        freq @ + freq !\n    ;\n\n    : wraparound-inc ( limit n1 -- n2 ) \\ 1 &lt;=
        n2 &lt;= limit\n       1 + dup rot\n       &gt; if drop 1 then\n    ;\n\n    :
        find-1st\n       fill-seq\n       clear-freqs\n       0 markseen\n       begin\n          index
        @ update-freq\n       freq @ unseen? while\n          freq @ markseen\n          seq
        @ index @ wraparound-inc index !\n       repeat\n    ;\n\n    find-1st freq
        @ . cr\n\nSample run with increased dictionary size\n\n    $ time gforth -m50M
        day01.txt day01b.fs -e bye\n    real    0m0.165s\n    user    0m0.152s\n    sys     0m0.008s\n\n",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_eavtdpe",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Forth
        (gforth)&lt;/h1&gt;\n\n&lt;p&gt;I had to edit the input and remove the + signs.&lt;/p&gt;\n\n&lt;p&gt;Part
        1&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;: sumstack ( n1 n2 n3 ... nN -- sum
        )\n   begin + depth 1 = until ;\n\nsumstack . cr&amp;lt;/code&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Sample
        run&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$ time gforth-fast day01.txt day01a.fs
        -e bye\nreal    0m0.010s\nuser    0m0.008s\nsys     0m0.000s\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;Part
        2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;10000000 constant LIMIT\n: 2LIMIT LIMIT
        2 * ;\n\nvariable freq 0 freq !\nvariable index 1 index !\n\ncreate c!freqs
        2LIMIT chars allot\ncreate seq 1000 cells allot\n\n\\ zero all elements of
        freqs (including freqs itself)\n: clear-freqs ( -- )\n   0 c!freqs !\n   2LIMIT
        1 do 0 c!freqs i chars + c! loop\n;\n\n\\ fill seq with stack in reverse order\n\\
        seq[1] = bottom of stack; seq[n] = top of stack\n\\ seq itself gets the number
        of items\n: fill-seq ( n1 n2 ... nN -- )\n   depth seq !\n   depth 1 swap
        do\n      seq i cells + !\n   -1 +loop\n;\n\n: seq-fetch ( index -- seq[index]
        )\n   seq swap cells + @\n;\n\n: markseen ( n -- )\n   1 swap c!freqs swap
        LIMIT + chars + c!\n;\n\n: unseen? ( n -- f )\n   c!freqs swap LIMIT + chars
        + c@ 0 =\n;\n\n: update-freq ( index -- ) \\ update frequency with value at
        index\n      seq-fetch freq @ + freq !\n;\n\n: wraparound-inc ( limit n1 --
        n2 ) \\ 1 &amp;lt;= n2 &amp;lt;= limit\n   1 + dup rot\n   &amp;gt; if drop
        1 then\n;\n\n: find-1st\n   fill-seq\n   clear-freqs\n   0 markseen\n   begin\n      index
        @ update-freq\n   freq @ unseen? while\n      freq @ markseen\n      seq @
        index @ wraparound-inc index !\n   repeat\n;\n\nfind-1st freq @ . cr\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Sample
        run with increased dictionary size&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$ time
        gforth -m50M day01.txt day01b.fs -e bye\nreal    0m0.165s\nuser    0m0.152s\nsys     0m0.008s\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavtdpe/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1543704468.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543704468.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eavulp5",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ribenaboy15",
        "can_mod_post": false, "created_utc": 1543705463.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_jjpdu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**F# part one**\n\n`Seq.sumBy int System.IO.File.ReadAllLines \"input.txt\"`",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;F# part
        one&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Seq.sumBy int System.IO.File.ReadAllLines
        &amp;quot;input.txt&amp;quot;&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavulp5/", "subreddit_type":
        "public", "locked": false, "name": "t1_eavulp5", "created": 1543705463.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": 1543707857.0, "mod_reason_by": null, "banned_by": null, "ups": 1,
        "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eavxd26",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "dpeckett",
        "can_mod_post": false, "created_utc": 1543707624.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_lshw3", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "This year I''ve set the goal of completing all of the challenges using only
        awk, lets see how far I can go: \n\n**Today''s solution:**\n\n```\n{offset
        += $1} END {print offset}\n```\n\n*and*\n\n```\n{drift[NR] = $1} END { \n  while(1)
        {\n    for(value in drift) {\n      offset += drift[value];\n      if(seen[offset]++
        &gt; 0) {\n        print offset;\n        exit\n      }}}}\n```", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;This year I&amp;#39;ve set the goal of completing
        all of the challenges using only awk, lets see how far I can go: &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Today&amp;#39;s
        solution:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\n{offset += $1}
        END {print offset}\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;and&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\n{drift[NR]
        = $1} END { \n  while(1) {\n    for(value in drift) {\n      offset += drift[value];\n      if(seen[offset]++
        &amp;gt; 0) {\n        print offset;\n        exit\n      }}}}\n&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavxd26/",
        "subreddit_type": "public", "locked": false, "name": "t1_eavxd26", "created":
        1543707624.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eavxq3s",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "compdog",
        "can_mod_post": false, "created_utc": 1543707926.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_9575q", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Ruby**\n\nNot the most concise, but they''re clear and easy to follow.\n\nPart
        1:\n\n    # Make sure that we have a filename\n    if !ARGV.empty?\n        #
        Final solution\n        frequency = 0\n    \n        # Read each line from
        input file\n        File.readlines(ARGV[0]).each {|line|\n            drift
        = line.to_i\n            \n            frequency += drift\n        }\n        \n        #
        print solution\n        puts \"Final frequency is #{frequency}\"\n    else\n        puts
        \"Please specify file to read\"\n    end\n\nPart 2:\n\n    # Make sure that
        we have a filename\n    if (!ARGV.empty?)\n    \n        # List of seen frequencies\n        frequencies
        = [0]\n        \n        # current frequency value\n        frequency = 0\n        \n        #
        Loop until we find a duplicate\n        while true\n    \n            # Read
        each line from input file\n            File.readlines(ARGV[0]).each {|line|\n                drift
        = line.to_i\n                \n                frequency += drift\n                \n                #
        Check if we have seen this frequency before\n                if (frequencies.include?
        frequency)\n                    puts \"Found solution: #{frequency}\"\n                    return\n                else
        \n                    frequencies.push frequency\n                end\n            }\n        end\n    else\n        puts
        \"Please specify file to read\"\n    end", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Not
        the most concise, but they&amp;#39;re clear and easy to follow.&lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# Make sure that we have a filename\nif
        !ARGV.empty?\n    # Final solution\n    frequency = 0\n\n    # Read each line
        from input file\n    File.readlines(ARGV[0]).each {|line|\n        drift =
        line.to_i\n\n        frequency += drift\n    }\n\n    # print solution\n    puts
        &amp;quot;Final frequency is #{frequency}&amp;quot;\nelse\n    puts &amp;quot;Please
        specify file to read&amp;quot;\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# Make sure that we have a filename\nif
        (!ARGV.empty?)\n\n    # List of seen frequencies\n    frequencies = [0]\n\n    #
        current frequency value\n    frequency = 0\n\n    # Loop until we find a duplicate\n    while
        true\n\n        # Read each line from input file\n        File.readlines(ARGV[0]).each
        {|line|\n            drift = line.to_i\n\n            frequency += drift\n\n            #
        Check if we have seen this frequency before\n            if (frequencies.include?
        frequency)\n                puts &amp;quot;Found solution: #{frequency}&amp;quot;\n                return\n            else
        \n                frequencies.push frequency\n            end\n        }\n    end\nelse\n    puts
        &amp;quot;Please specify file to read&amp;quot;\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eavxq3s/",
        "subreddit_type": "public", "locked": false, "name": "t1_eavxq3s", "created":
        1543707926.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaw07k1",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "bruceadowns",
        "can_mod_post": false, "created_utc": 1543710001.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_tbh68", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "## simple idiomatic golang/go solution\n\n    func main() {\n    \tis :=
        in(os.Stdin)\n    \tlog.Printf(\"resulting freq: %d\", part1(is))\n    \tlog.Printf(\"first
        duplicate freq: %d\", part2(is))\n    }\n    \n    func in(r io.Reader) (res
        []int) {\n    \tscanner := bufio.NewScanner(r)\n    \tfor scanner.Scan() {\n    \t\tnum,
        err := strconv.Atoi(scanner.Text())\n    \t\tif err != nil {\n    \t\t\tlog.Fatal(err)\n    \t\t}\n    \t\tres
        = append(res, num)\n    \t}\n    \n    \treturn\n    }\n    \n    func part1(is
        []int) (res int) {\n    \tfor _, v := range is {\n    \t\tres += v\n    \t}\n    \n    \treturn\n    }\n    \n    func
        part2(is []int) (res int) {\n    \tm := make(map[int]struct{})\n    \tm[res]
        = struct{}{}\n    \n    \tfor {\n    \t\tfor _, v := range is {\n    \t\t\tres
        += v\n    \t\t\tif _, ok := m[res]; ok {\n    \t\t\t\treturn\n    \t\t\t}\n    \t\t\tm[res]
        = struct{}{}\n    \t\t}\n    \t}\n    }", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;h2&gt;simple idiomatic golang/go solution&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;func
        main() {\n    is := in(os.Stdin)\n    log.Printf(&amp;quot;resulting freq:
        %d&amp;quot;, part1(is))\n    log.Printf(&amp;quot;first duplicate freq: %d&amp;quot;,
        part2(is))\n}\n\nfunc in(r io.Reader) (res []int) {\n    scanner := bufio.NewScanner(r)\n    for
        scanner.Scan() {\n        num, err := strconv.Atoi(scanner.Text())\n        if
        err != nil {\n            log.Fatal(err)\n        }\n        res = append(res,
        num)\n    }\n\n    return\n}\n\nfunc part1(is []int) (res int) {\n    for
        _, v := range is {\n        res += v\n    }\n\n    return\n}\n\nfunc part2(is
        []int) (res int) {\n    m := make(map[int]struct{})\n    m[res] = struct{}{}\n\n    for
        {\n        for _, v := range is {\n            res += v\n            if _,
        ok := m[res]; ok {\n                return\n            }\n            m[res]
        = struct{}{}\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaw07k1/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaw07k1", "created":
        1543710001.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaw0rwz",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Dartmouth17",
        "can_mod_post": false, "created_utc": 1543710474.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_e0gsk", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Julia:\n```\n# Part 1\nusing DelimitedFiles\nopen(\"day1/input.txt\") do
        f\n    global inputs = readdlm(f, Int64)\nend\n\npos = sum(inputs)\nprint(\"Final
        resulting frequency: $pos\") \n\n# Part 2\nusing Base.Iterators\n\nvisited
        = Set{Int64}()\npos = 0\npush!(visited, pos)\n\nfor input in cycle(inputs)\n    pos
        += input\n    if in(pos, visited)\n        break\n    end\n    push!(visited,
        pos)\nend\nprint(\"First frequency reached twice is: $pos\")\n```", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Julia:\n```&lt;/p&gt;\n\n&lt;h1&gt;Part
        1&lt;/h1&gt;\n\n&lt;p&gt;using DelimitedFiles\nopen(&amp;quot;day1/input.txt&amp;quot;)
        do f\n    global inputs = readdlm(f, Int64)\nend&lt;/p&gt;\n\n&lt;p&gt;pos
        = sum(inputs)\nprint(&amp;quot;Final resulting frequency: $pos&amp;quot;)
        &lt;/p&gt;\n\n&lt;h1&gt;Part 2&lt;/h1&gt;\n\n&lt;p&gt;using Base.Iterators&lt;/p&gt;\n\n&lt;p&gt;visited
        = Set{Int64}()\npos = 0\npush!(visited, pos)&lt;/p&gt;\n\n&lt;p&gt;for input
        in cycle(inputs)\n    pos += input\n    if in(pos, visited)\n        break\n    end\n    push!(visited,
        pos)\nend\nprint(&amp;quot;First frequency reached twice is: $pos&amp;quot;)\n```&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaw0rwz/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaw0rwz", "created":
        1543710474.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaw1i3z",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "CryZe92",
        "can_mod_post": false, "created_utc": 1543711064.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_f5xkf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Part 2 in 58.855 \u00b5s by skipping the whole HashSet:\n\n    pub fn part2_fast(input:
        impl Iterator&lt;Item = i32&gt; + Clone) -&gt; i32 {\n        fn mod_euc(lhs:
        i32, rhs: i32) -&gt; i32 {\n            let r = lhs % rhs;\n            if
        r &lt; 0 {\n                if rhs &lt; 0 {\n                    r - rhs\n                }
        else {\n                    r + rhs\n                }\n            } else
        {\n                r\n            }\n        }\n\n        let frequencies
        = frequencies(input).collect::&lt;Vec&lt;_&gt;&gt;();\n        let shift_value
        = frequencies.last().cloned().unwrap_or_default();\n\n        if shift_value
        == 0 {\n            return 0;\n        }\n\n        let mut collision_lines
        = frequencies\n            .iter()\n            .cloned()\n            .enumerate()\n            .map(|(i,
        f)| (mod_euc(f, shift_value), f, i))\n            .collect::&lt;Vec&lt;_&gt;&gt;();\n        collision_lines.sort_unstable_by_key(|(line,
        _, _)| *line);\n\n        let mut min_cycles = (i32::max_value(), usize::max_value());\n        let
        mut min_cycles_val = 0;\n\n        let mut index = 0;\n        while index
        &lt; collision_lines.len() {\n            let remaining = &amp;collision_lines[index..];\n            let
        (first, _, _) = remaining[0];\n            let end_index = remaining\n                .iter()\n                .skip(1)\n                .take_while(|&amp;&amp;(second,
        _, _)| first == second)\n                .count()\n                + 1;\n            let
        group = &amp;remaining[..end_index];\n\n            if group.len() &gt; 1
        {\n                for ((a, ai), (b, bi)) in group.iter().map(|&amp;(_, f,
        i)| (f, i)).tuple_combinations() {\n                    let (min, max, index)
        = if a &lt; b { (a, b, ai) } else { (b, a, bi) };\n                    let
        cycles = ((max - min) / shift_value, index);\n                    if cycles
        &lt; min_cycles {\n                        min_cycles = cycles;\n                        min_cycles_val
        = max;\n                    }\n                }\n            }\n\n            index
        += group.len();\n        }\n\n        min_cycles_val\n    }", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Part 2 in 58.855 \u00b5s by skipping the
        whole HashSet:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;pub fn part2_fast(input:
        impl Iterator&amp;lt;Item = i32&amp;gt; + Clone) -&amp;gt; i32 {\n    fn mod_euc(lhs:
        i32, rhs: i32) -&amp;gt; i32 {\n        let r = lhs % rhs;\n        if r &amp;lt;
        0 {\n            if rhs &amp;lt; 0 {\n                r - rhs\n            }
        else {\n                r + rhs\n            }\n        } else {\n            r\n        }\n    }\n\n    let
        frequencies = frequencies(input).collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;();\n    let
        shift_value = frequencies.last().cloned().unwrap_or_default();\n\n    if shift_value
        == 0 {\n        return 0;\n    }\n\n    let mut collision_lines = frequencies\n        .iter()\n        .cloned()\n        .enumerate()\n        .map(|(i,
        f)| (mod_euc(f, shift_value), f, i))\n        .collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;();\n    collision_lines.sort_unstable_by_key(|(line,
        _, _)| *line);\n\n    let mut min_cycles = (i32::max_value(), usize::max_value());\n    let
        mut min_cycles_val = 0;\n\n    let mut index = 0;\n    while index &amp;lt;
        collision_lines.len() {\n        let remaining = &amp;amp;collision_lines[index..];\n        let
        (first, _, _) = remaining[0];\n        let end_index = remaining\n            .iter()\n            .skip(1)\n            .take_while(|&amp;amp;&amp;amp;(second,
        _, _)| first == second)\n            .count()\n            + 1;\n        let
        group = &amp;amp;remaining[..end_index];\n\n        if group.len() &amp;gt;
        1 {\n            for ((a, ai), (b, bi)) in group.iter().map(|&amp;amp;(_,
        f, i)| (f, i)).tuple_combinations() {\n                let (min, max, index)
        = if a &amp;lt; b { (a, b, ai) } else { (b, a, bi) };\n                let
        cycles = ((max - min) / shift_value, index);\n                if cycles &amp;lt;
        min_cycles {\n                    min_cycles = cycles;\n                    min_cycles_val
        = max;\n                }\n            }\n        }\n\n        index += group.len();\n    }\n\n    min_cycles_val\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaw1i3z/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaw1i3z", "created":
        1543711064.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaw57te",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Santiniis",
        "can_mod_post": false, "created_utc": 1543714271.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_ku8rb", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "``` python3\nimport os  \n\ndef sol_p1():  \n    with open(''../input.txt'',
        ''r'') as f:  \n        lines = [int(x) for x in f.readlines()]  \n    return
        sum(lines)  \n\ndef sol_p2():  \n    with open(''../input.txt'', ''r'') as
        f:  \n        lines = [int(x) for x in f.readlines()]  \n    freq = 0  \n    index
        = 0  \n    seen = set()  \n    while freq not in seen:  \n        seen.add(freq)  \n        freq
        += lines[index % len(lines)]  \n        index += 1  \n    return freq, index  \n\nprint(sol_p1())  \nprint(''Result
        found is {0} at iteration {1}''.format(*sol_p2()))\n```\n\nBruteforced my
        way out in python3", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;```
        python3\nimport os  &lt;/p&gt;\n\n&lt;p&gt;def sol_p1():&lt;br/&gt;\n    with
        open(&amp;#39;../input.txt&amp;#39;, &amp;#39;r&amp;#39;) as f:&lt;br/&gt;\n        lines
        = [int(x) for x in f.readlines()]&lt;br/&gt;\n    return sum(lines)  &lt;/p&gt;\n\n&lt;p&gt;def
        sol_p2():&lt;br/&gt;\n    with open(&amp;#39;../input.txt&amp;#39;, &amp;#39;r&amp;#39;)
        as f:&lt;br/&gt;\n        lines = [int(x) for x in f.readlines()]&lt;br/&gt;\n    freq
        = 0&lt;br/&gt;\n    index = 0&lt;br/&gt;\n    seen = set()&lt;br/&gt;\n    while
        freq not in seen:&lt;br/&gt;\n        seen.add(freq)&lt;br/&gt;\n        freq
        += lines[index % len(lines)]&lt;br/&gt;\n        index += 1&lt;br/&gt;\n    return
        freq, index  &lt;/p&gt;\n\n&lt;p&gt;print(sol_p1())&lt;br/&gt;\nprint(&amp;#39;Result
        found is {0} at iteration {1}&amp;#39;.format(*sol_p2()))\n```&lt;/p&gt;\n\n&lt;p&gt;Bruteforced
        my way out in python3&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaw57te/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaw57te", "created":
        1543714271.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaw6vng",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "LichtMacher",
        "can_mod_post": false, "created_utc": 1543715781.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_7zpfi9", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**First Time, Sol in Rust**\n\nNeed to work on better iteractions though...\n\nSuggestions
        on studying are welcome...\n\n    // Advent of code 2018\n    // Day 1 - Chronal
        Calibration\n    \n    use std::collections::HashSet;\n    use std::fs::File;\n    use
        std::io::prelude::*;\n    \n    const INPUT_FILE: &amp;''static str = \"./day1_input.txt\";\n    \n    fn
        part1() -&gt; Result&lt;i32, Box&lt;std::error::Error + ''static&gt;&gt; {\n        let
        mut operational_frequency: i32 = 0;\n    \n        let mut freq_file =\n            File::open(INPUT_FILE).expect(format!(\"Cannot
        open {}\", INPUT_FILE).as_str());\n    \n        let mut freq_list = String::new();\n    \n        freq_file\n            .read_to_string(&amp;mut
        freq_list)\n            .expect(format!(\"Cannot READ {}\", INPUT_FILE).as_str());\n    \n        for
        line in freq_list.lines() {\n            operational_frequency = operational_frequency
        + line.parse::&lt;i32&gt;()?;\n        }\n    \n        println!(\"Part1:
        {}\", operational_frequency);\n    \n        Ok(operational_frequency)\n    }\n    \n    fn
        part2() -&gt; Result&lt;i32, Box&lt;std::error::Error + ''static&gt;&gt; {\n        let
        mut operational_frequency: i32 = 0;\n        let mut recurr: HashSet&lt;i32&gt;
        = HashSet::new();\n    \n        let mut freq_file =\n            File::open(INPUT_FILE).expect(format!(\"Cannot
        open {}\", INPUT_FILE).as_str());\n    \n        let mut freq_list = String::new();\n    \n        freq_file\n            .read_to_string(&amp;mut
        freq_list)\n            .expect(format!(\"Cannot READ {}\", INPUT_FILE).as_str());\n    \n        for
        line in freq_list.lines().cycle() {\n            operational_frequency = operational_frequency
        + line.parse::&lt;i32&gt;()?;\n            if !recurr.insert(operational_frequency)
        {\n                println!(\"Part2: {}\", operational_frequency);\n                break;\n            }\n        }\n    \n        Ok(operational_frequency)\n    }\n    \n    fn
        main() -&gt; Result&lt;(), Box&lt;std::error::Error + ''static&gt;&gt; {\n        part1()?;\n        part2()?;\n    \n        Ok(())\n    }\n\n&amp;#x200B;",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;First
        Time, Sol in Rust&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Need to work on better
        iteractions though...&lt;/p&gt;\n\n&lt;p&gt;Suggestions on studying are welcome...&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;//
        Advent of code 2018\n// Day 1 - Chronal Calibration\n\nuse std::collections::HashSet;\nuse
        std::fs::File;\nuse std::io::prelude::*;\n\nconst INPUT_FILE: &amp;amp;&amp;#39;static
        str = &amp;quot;./day1_input.txt&amp;quot;;\n\nfn part1() -&amp;gt; Result&amp;lt;i32,
        Box&amp;lt;std::error::Error + &amp;#39;static&amp;gt;&amp;gt; {\n    let
        mut operational_frequency: i32 = 0;\n\n    let mut freq_file =\n        File::open(INPUT_FILE).expect(format!(&amp;quot;Cannot
        open {}&amp;quot;, INPUT_FILE).as_str());\n\n    let mut freq_list = String::new();\n\n    freq_file\n        .read_to_string(&amp;amp;mut
        freq_list)\n        .expect(format!(&amp;quot;Cannot READ {}&amp;quot;, INPUT_FILE).as_str());\n\n    for
        line in freq_list.lines() {\n        operational_frequency = operational_frequency
        + line.parse::&amp;lt;i32&amp;gt;()?;\n    }\n\n    println!(&amp;quot;Part1:
        {}&amp;quot;, operational_frequency);\n\n    Ok(operational_frequency)\n}\n\nfn
        part2() -&amp;gt; Result&amp;lt;i32, Box&amp;lt;std::error::Error + &amp;#39;static&amp;gt;&amp;gt;
        {\n    let mut operational_frequency: i32 = 0;\n    let mut recurr: HashSet&amp;lt;i32&amp;gt;
        = HashSet::new();\n\n    let mut freq_file =\n        File::open(INPUT_FILE).expect(format!(&amp;quot;Cannot
        open {}&amp;quot;, INPUT_FILE).as_str());\n\n    let mut freq_list = String::new();\n\n    freq_file\n        .read_to_string(&amp;amp;mut
        freq_list)\n        .expect(format!(&amp;quot;Cannot READ {}&amp;quot;, INPUT_FILE).as_str());\n\n    for
        line in freq_list.lines().cycle() {\n        operational_frequency = operational_frequency
        + line.parse::&amp;lt;i32&amp;gt;()?;\n        if !recurr.insert(operational_frequency)
        {\n            println!(&amp;quot;Part2: {}&amp;quot;, operational_frequency);\n            break;\n        }\n    }\n\n    Ok(operational_frequency)\n}\n\nfn
        main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;std::error::Error + &amp;#39;static&amp;gt;&amp;gt;
        {\n    part1()?;\n    part2()?;\n\n    Ok(())\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaw6vng/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaw6vng", "created":
        1543715781.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaw83ko",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "nowlena",
        "can_mod_post": false, "created_utc": 1543716912.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_2itt5ote", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My solution in JS / Javascript aka reduce all the things.\n\n [https://gist.github.com/nowlena/d7a7acb727054596bb4ee11b9b1faa8d](https://gist.github.com/nowlena/d7a7acb727054596bb4ee11b9b1faa8d)\n\n&amp;#x200B;",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My solution in JS /
        Javascript aka reduce all the things.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://gist.github.com/nowlena/d7a7acb727054596bb4ee11b9b1faa8d\"&gt;https://gist.github.com/nowlena/d7a7acb727054596bb4ee11b9b1faa8d&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaw83ko/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaw83ko", "created":
        1543716912.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543717429.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eaw8fpa", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "fay-jai",
        "can_mod_post": false, "created_utc": 1543717236.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_gca0s", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My solution in Elixir as well:\n\n    defmodule AdventOfCode2018.Day1 do\n      @input_path
        Path.join(File.cwd!(), \"assets/day1_input.txt\")\n    \n      def part1 do\n        @input_path\n        |&gt;
        process_file\n        |&gt; Enum.sum\n      end\n    \n      def part2(num)
        do\n        @input_path\n        |&gt; create_stream\n        |&gt; process_stream(num)\n        |&gt;
        find_duplicate\n      end\n    \n      defp process_file(file) do\n        file\n        |&gt;
        File.read!()\n        |&gt; String.split(~r/\\n/)\n        |&gt; Enum.map(&amp;String.to_integer/1)\n      end\n    \n      defp
        create_stream(file) do\n        file\n        |&gt; process_file\n        |&gt;
        Stream.cycle\n      end\n    \n      defp process_stream(stream, num) do\n        stream\n        |&gt;
        Stream.scan(0, &amp;(&amp;1 + &amp;2))\n        |&gt; Stream.take(num)\n        |&gt;
        Enum.to_list\n      end\n    \n      defp find_duplicate(list), do: find_duplicate(list,
        MapSet.new([0]))\n    \n      defp find_duplicate([], _), do: false\n      defp
        find_duplicate([h|t], map_set) do\n        case MapSet.member?(map_set, h)
        do\n          true -&gt; h\n          false -&gt; find_duplicate(t, MapSet.put(map_set,
        h))\n        end\n      end\n    end\n\n&amp;#x200B;", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;My solution in Elixir as well:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;defmodule
        AdventOfCode2018.Day1 do\n  @input_path Path.join(File.cwd!(), &amp;quot;assets/day1_input.txt&amp;quot;)\n\n  def
        part1 do\n    @input_path\n    |&amp;gt; process_file\n    |&amp;gt; Enum.sum\n  end\n\n  def
        part2(num) do\n    @input_path\n    |&amp;gt; create_stream\n    |&amp;gt;
        process_stream(num)\n    |&amp;gt; find_duplicate\n  end\n\n  defp process_file(file)
        do\n    file\n    |&amp;gt; File.read!()\n    |&amp;gt; String.split(~r/\\n/)\n    |&amp;gt;
        Enum.map(&amp;amp;String.to_integer/1)\n  end\n\n  defp create_stream(file)
        do\n    file\n    |&amp;gt; process_file\n    |&amp;gt; Stream.cycle\n  end\n\n  defp
        process_stream(stream, num) do\n    stream\n    |&amp;gt; Stream.scan(0, &amp;amp;(&amp;amp;1
        + &amp;amp;2))\n    |&amp;gt; Stream.take(num)\n    |&amp;gt; Enum.to_list\n  end\n\n  defp
        find_duplicate(list), do: find_duplicate(list, MapSet.new([0]))\n\n  defp
        find_duplicate([], _), do: false\n  defp find_duplicate([h|t], map_set) do\n    case
        MapSet.member?(map_set, h) do\n      true -&amp;gt; h\n      false -&amp;gt;
        find_duplicate(t, MapSet.put(map_set, h))\n    end\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaw8fpa/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaw8fpa", "created":
        1543717236.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eawadl9",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "MuumiJumala",
        "can_mod_post": false, "created_utc": 1543719055.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_9hygu", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Part 1 in JavaScript console:\n\n    eval(document.body.innerText)", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Part 1 in JavaScript console:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;eval(document.body.innerText)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eawadl9/",
        "subreddit_type": "public", "locked": false, "name": "t1_eawadl9", "created":
        1543719055.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eawbkkd", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_a20646", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Wanted to brush up on Ruby and compare with Perl (which
        I don''t know yet)\n\nRuby:  \n\nPart 1:  \n```\ntotal = 0\nFile.open(''./raw_nums.txt'',
        ''r'') do |f|\n  f.each_line do |line|\n    puts line\n    total += line.chomp.to_i\n  end\nend\n\nputs
        \"total: #{total}\"\n```\n\nPart 2:\n```\nrequire ''set''\n\nfrequencies =
        Set.new\ntotal = 0\n\nfrequencies.add(total)\n\nanswer = nil\nfile = ''./raw_nums.txt''\nanswer
        = nil\nchanges = []\n\nFile.open(file, ''r'') do |f|\n  f.each_line do |line|\n    change
        = line.chomp.to_i\n    changes &lt;&lt; change\n  end\nend\n\nloop do\n  changes.each
        do |c|\n    total += c\n    if frequencies.add?(total).nil? then\n      answer
        = total\n      break\n    end\n  end\n\n  break unless answer.nil?\nend\n\nputs
        \"First reached twice #{answer}\"\n```\n\nPerl:\n\nPart 1:  \n```\n#/bin/env
        perl\nuse v5.28;\nuse warnings;\nuse strict;\n\nmy $handle = \"./raw_nums.txt\";\nopen
        my $file, \"&lt;\", $handle or die \"Could not open file: $handle\";\nmy @lines
        = &lt;$file&gt;;\nclose $file;\n\nmy $total = 0;\n\nchomp @lines;\nfor my
        $line (@lines) {\n    say \"line: $line\";\n    $total += $line;\n}\n\nsay
        \"Total: $total\";\n```\n\nPart 2:\n```\n#/bin/env perl\nuse v5.28;\nuse warnings;\nuse
        strict;\n\nuse Set::Scalar;\n\nmy $handle = \"./raw_nums.txt\";\nopen my $file,
        \"&lt;\", $handle or die \"Could not open file: $handle\";\nmy @lines = &lt;$file&gt;;\nclose
        $file;\n\nmy $total = 0;\nmy @changes;\nmy $frequencies = Set::Scalar-&gt;new;\nmy
        $answer;\n\nchomp @lines;\nfor my $line (@lines) {\n    push @changes, $line;\n}\n\nOUTER:
        {\n    while(1) {\n        for my $change (@changes) {\n            $total
        += $change;\n\n            if ($frequencies-&gt;has($total)) {\n                $answer
        = $total;\n                last OUTER;\n            } else {\n                $frequencies-&gt;insert($total)\n            }\n        }\n\n        last
        OUTER if (defined($answer));\n    }\n}\n\nsay \"First reached twice $answer\";\n```\n",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_eawbkkd",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Wanted
        to brush up on Ruby and compare with Perl (which I don&amp;#39;t know yet)&lt;/p&gt;\n\n&lt;p&gt;Ruby:  &lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;br/&gt;\n```\ntotal = 0\nFile.open(&amp;#39;./raw_nums.txt&amp;#39;,
        &amp;#39;r&amp;#39;) do |f|\n  f.each_line do |line|\n    puts line\n    total
        += line.chomp.to_i\n  end\nend&lt;/p&gt;\n\n&lt;p&gt;puts &amp;quot;total:
        #{total}&amp;quot;\n```&lt;/p&gt;\n\n&lt;p&gt;Part 2:\n```\nrequire &amp;#39;set&amp;#39;&lt;/p&gt;\n\n&lt;p&gt;frequencies
        = Set.new\ntotal = 0&lt;/p&gt;\n\n&lt;p&gt;frequencies.add(total)&lt;/p&gt;\n\n&lt;p&gt;answer
        = nil\nfile = &amp;#39;./raw_nums.txt&amp;#39;\nanswer = nil\nchanges = []&lt;/p&gt;\n\n&lt;p&gt;File.open(file,
        &amp;#39;r&amp;#39;) do |f|\n  f.each_line do |line|\n    change = line.chomp.to_i\n    changes
        &amp;lt;&amp;lt; change\n  end\nend&lt;/p&gt;\n\n&lt;p&gt;loop do\n  changes.each
        do |c|\n    total += c\n    if frequencies.add?(total).nil? then\n      answer
        = total\n      break\n    end\n  end&lt;/p&gt;\n\n&lt;p&gt;break unless answer.nil?\nend&lt;/p&gt;\n\n&lt;p&gt;puts
        &amp;quot;First reached twice #{answer}&amp;quot;\n```&lt;/p&gt;\n\n&lt;p&gt;Perl:&lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;br/&gt;\n```&lt;/p&gt;\n\n&lt;h1&gt;/bin/env perl&lt;/h1&gt;\n\n&lt;p&gt;use
        v5.28;\nuse warnings;\nuse strict;&lt;/p&gt;\n\n&lt;p&gt;my $handle = &amp;quot;./raw_nums.txt&amp;quot;;\nopen
        my $file, &amp;quot;&amp;lt;&amp;quot;, $handle or die &amp;quot;Could not
        open file: $handle&amp;quot;;\nmy @lines = &amp;lt;$file&amp;gt;;\nclose $file;&lt;/p&gt;\n\n&lt;p&gt;my
        $total = 0;&lt;/p&gt;\n\n&lt;p&gt;chomp @lines;\nfor my $line (@lines) {\n    say
        &amp;quot;line: $line&amp;quot;;\n    $total += $line;\n}&lt;/p&gt;\n\n&lt;p&gt;say
        &amp;quot;Total: $total&amp;quot;;\n```&lt;/p&gt;\n\n&lt;p&gt;Part 2:\n```&lt;/p&gt;\n\n&lt;h1&gt;/bin/env
        perl&lt;/h1&gt;\n\n&lt;p&gt;use v5.28;\nuse warnings;\nuse strict;&lt;/p&gt;\n\n&lt;p&gt;use
        Set::Scalar;&lt;/p&gt;\n\n&lt;p&gt;my $handle = &amp;quot;./raw_nums.txt&amp;quot;;\nopen
        my $file, &amp;quot;&amp;lt;&amp;quot;, $handle or die &amp;quot;Could not
        open file: $handle&amp;quot;;\nmy @lines = &amp;lt;$file&amp;gt;;\nclose $file;&lt;/p&gt;\n\n&lt;p&gt;my
        $total = 0;\nmy @changes;\nmy $frequencies = Set::Scalar-&amp;gt;new;\nmy
        $answer;&lt;/p&gt;\n\n&lt;p&gt;chomp @lines;\nfor my $line (@lines) {\n    push
        @changes, $line;\n}&lt;/p&gt;\n\n&lt;p&gt;OUTER: {\n    while(1) {\n        for
        my $change (@changes) {\n            $total += $change;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;        if
        ($frequencies-&amp;gt;has($total)) {\n            $answer = $total;\n            last
        OUTER;\n        } else {\n            $frequencies-&amp;gt;insert($total)\n        }\n    }\n\n    last
        OUTER if (defined($answer));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n\n&lt;p&gt;say
        &amp;quot;First reached twice $answer&amp;quot;;\n```&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eawbkkd/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1543720134.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543720134.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eawiqeu",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "rolandtritsch",
        "can_mod_post": false, "created_utc": 1543726964.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_6vtvjs", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Eta (Haskell on the JVM)\n\n[https://github.com/rolandtritsch/haskell-aoc-2018](https://github.com/rolandtritsch/haskell-aoc-2018)\n\nPart1:\n\n    solve
        :: [Frequency] -&gt; Integer\n    solve fs = foldl (+) 0 fs\n\nPart2:\n\n    solve
        :: [Frequency] -&gt; Integer\n    solve fs = go S.empty $ scanl (+) 0 (cycle
        fs) where\n      go seenFrequencySums (fsum:rest)\n        | S.member fsum
        seenFrequencySums = fsum\n        | otherwise = go (S.insert fsum seenFrequencySums)
        rest\n      go _ [] = error \"Infinite list cannot be empty.\"", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Eta (Haskell on the JVM)&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/rolandtritsch/haskell-aoc-2018\"&gt;https://github.com/rolandtritsch/haskell-aoc-2018&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Part1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;solve
        :: [Frequency] -&amp;gt; Integer\nsolve fs = foldl (+) 0 fs\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;solve
        :: [Frequency] -&amp;gt; Integer\nsolve fs = go S.empty $ scanl (+) 0 (cycle
        fs) where\n  go seenFrequencySums (fsum:rest)\n    | S.member fsum seenFrequencySums
        = fsum\n    | otherwise = go (S.insert fsum seenFrequencySums) rest\n  go
        _ [] = error &amp;quot;Infinite list cannot be empty.&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eawiqeu/",
        "subreddit_type": "public", "locked": false, "name": "t1_eawiqeu", "created":
        1543726964.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eawjz4q",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "jchook",
        "can_mod_post": false, "created_utc": 1543728321.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_6hh1v", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "# PHP\n\nPart 1 is a nice PHP one-liner:\n\n```\n\n&lt;?php echo array_sum(explode(\"\\n\",
        file_get_contents(''./01a.txt'')));\n\n```\n\nPart 2 was also easy with imperative
        language:\n\n```\n\n&lt;?php\n\n$memo = [0 =&gt; true];\n$sum = 0;\n$list
        = explode(\"\\n\", file_get_contents(''./01a.txt''));\nwhile (1) foreach ($list
        as $n) {\n  if (isset($memo[$sum += $n])) {\n    echo ''Found it: '' . $sum;\n    exit;\n  }\n  $memo[$sum]
        = true;\n}\n\n```\n\n# Haskell\n\n\nI decided to learn Haskell this year.
        Here''s my solution to Part 1:\n\n```\nsignedInt :: String -&gt; Integer\nsignedInt
        s = if (head s) == ''-''\n  then read s :: Integer\n  else read(tail s) ::
        Integer\n\n\nmain = do\n  s &lt;- readFile(\"./01a.txt\")\n  print (sum (map
        signedInt (lines s)))\n```", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;PHP&lt;/h1&gt;\n\n&lt;p&gt;Part
        1 is a nice PHP one-liner:&lt;/p&gt;\n\n&lt;p&gt;```&lt;/p&gt;\n\n&lt;p&gt;&amp;lt;?php
        echo array_sum(explode(&amp;quot;\\n&amp;quot;, file_get_contents(&amp;#39;./01a.txt&amp;#39;)));&lt;/p&gt;\n\n&lt;p&gt;```&lt;/p&gt;\n\n&lt;p&gt;Part
        2 was also easy with imperative language:&lt;/p&gt;\n\n&lt;p&gt;```&lt;/p&gt;\n\n&lt;p&gt;&amp;lt;?php&lt;/p&gt;\n\n&lt;p&gt;$memo
        = [0 =&amp;gt; true];\n$sum = 0;\n$list = explode(&amp;quot;\\n&amp;quot;,
        file_get_contents(&amp;#39;./01a.txt&amp;#39;));\nwhile (1) foreach ($list
        as $n) {\n  if (isset($memo[$sum += $n])) {\n    echo &amp;#39;Found it: &amp;#39;
        . $sum;\n    exit;\n  }\n  $memo[$sum] = true;\n}&lt;/p&gt;\n\n&lt;p&gt;```&lt;/p&gt;\n\n&lt;h1&gt;Haskell&lt;/h1&gt;\n\n&lt;p&gt;I
        decided to learn Haskell this year. Here&amp;#39;s my solution to Part 1:&lt;/p&gt;\n\n&lt;p&gt;```\nsignedInt
        :: String -&amp;gt; Integer\nsignedInt s = if (head s) == &amp;#39;-&amp;#39;\n  then
        read s :: Integer\n  else read(tail s) :: Integer&lt;/p&gt;\n\n&lt;p&gt;main
        = do\n  s &amp;lt;- readFile(&amp;quot;./01a.txt&amp;quot;)\n  print (sum
        (map signedInt (lines s)))\n```&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eawjz4q/", "subreddit_type":
        "public", "locked": false, "name": "t1_eawjz4q", "created": 1543728321.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eawlwtk", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "DrinkinBird", "can_mod_post": false, "created_utc":
        1543730374.0, "send_replies": true, "parent_id": "t3_a20646", "score": 1,
        "author_fullname": "t2_n5j28", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "Im one day late because
        I only now decided to actually post my solutions, but for completeness sake
        my solution in nim:\n\nPart1:\n\n    import rdstdin\n    import strutils\n    import
        sequtils\n    \n    var changes = newSeq[int]()\n    \n    var line: TaintedString\n    while
        readlineFromStdin(\"\", line):\n      changes.add(parseInt(line))\n    \n    echo
        changes.foldl(a + b)\n    \n\nPart2:\n\n    import rdstdin\n    import strutils\n    import
        sequtils\n    \n    var changes = newSeq[int]()\n    var frequency = 0\n    var
        history = @[0]\n    \n    var line: TaintedString\n    while readlineFromStdin(\"\",
        line):\n      changes.add(parseInt(line))\n    \n    while true:\n      for
        change in changes:\n        frequency += change\n    \n        if history.find(frequency)
        != -1:\n          echo frequency\n          system.quit()\n    \n        history.add(frequency)\n\nOnly
        realized later that I could probably have vastly improved the performance
        of part 2 by using a set instead of iterating over the whole sequence for
        every single loop iteration", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Im
        one day late because I only now decided to actually post my solutions, but
        for completeness sake my solution in nim:&lt;/p&gt;\n\n&lt;p&gt;Part1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        rdstdin\nimport strutils\nimport sequtils\n\nvar changes = newSeq[int]()\n\nvar
        line: TaintedString\nwhile readlineFromStdin(&amp;quot;&amp;quot;, line):\n  changes.add(parseInt(line))\n\necho
        changes.foldl(a + b)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        rdstdin\nimport strutils\nimport sequtils\n\nvar changes = newSeq[int]()\nvar
        frequency = 0\nvar history = @[0]\n\nvar line: TaintedString\nwhile readlineFromStdin(&amp;quot;&amp;quot;,
        line):\n  changes.add(parseInt(line))\n\nwhile true:\n  for change in changes:\n    frequency
        += change\n\n    if history.find(frequency) != -1:\n      echo frequency\n      system.quit()\n\n    history.add(frequency)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Only
        realized later that I could probably have vastly improved the performance
        of part 2 by using a set instead of iterating over the whole sequence for
        every single loop iteration&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eawlwtk/",
        "subreddit_type": "public", "locked": false, "name": "t1_eawlwtk", "created":
        1543730374.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eawnkti", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_a20646", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "My first year with AoC; I''m trying to learn Rust so
        [here it is](https://git.sr.ht/%7Eacdw/advent-of-code-2018/tree/master/d01/src/main.rs):\n\n    use
        std::env;\n    use std::fs::File;\n    use std::io::prelude::*;\n\n    fn
        main() {\n        let args: Vec&lt;String&gt; = env::args().collect();\n        let
        input = &amp;args[1];\n\n        let freq_deltas = read_file_to_vec(input).unwrap();\n        let
        freq_deltas = parse_numbers(freq_deltas);\n        println!(\"{:?}\", freq_deltas);\n\n        let
        mut res = 0;\n        let mut found: Vec&lt;i32&gt; = Vec::new();\n        let
        mut counter = 0;\n\n        ''outer: loop {\n            for n in freq_deltas.iter()
        {\n                res += n;\n                for i in found.iter() {\n                    if
        *i == res {\n                        break ''outer;\n                    }\n                }\n                found.push(res);\n            }\n            counter
        += 1;\n            print!(\"{}, \", counter);\n        }\n\n        println!(\"\\n{:?}\",
        res);\n    }\n\n    fn read_file_to_vec(f: &amp;str) -&gt; std::io::Result&lt;Vec&lt;String&gt;&gt;
        {\n        let mut file = File::open(f)?;\n\n        let mut contents = String::new();\n        file.read_to_string(&amp;mut
        contents)?;\n\n        let ret: Vec&lt;String&gt; = contents.lines().map(|s|
        s.to_string()).collect();\n\n        Ok(ret)\n    }\n\n    fn parse_numbers(v:
        Vec&lt;String&gt;) -&gt; Vec&lt;i32&gt; {\n        let mut res = Vec::new();\n\n        for
        s in v.iter() {\n            let n: i32 = s.parse().unwrap();\n            res.push(n);\n        }\n\n        res\n    }\n\nObviously,
        this isn''t great, but it works!  I''m telling myself to be okay with\nthat
        :)", "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_eawnkti",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My
        first year with AoC; I&amp;#39;m trying to learn Rust so &lt;a href=\"https://git.sr.ht/%7Eacdw/advent-of-code-2018/tree/master/d01/src/main.rs\"&gt;here
        it is&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use std::env;\nuse std::fs::File;\nuse
        std::io::prelude::*;\n\nfn main() {\n    let args: Vec&amp;lt;String&amp;gt;
        = env::args().collect();\n    let input = &amp;amp;args[1];\n\n    let freq_deltas
        = read_file_to_vec(input).unwrap();\n    let freq_deltas = parse_numbers(freq_deltas);\n    println!(&amp;quot;{:?}&amp;quot;,
        freq_deltas);\n\n    let mut res = 0;\n    let mut found: Vec&amp;lt;i32&amp;gt;
        = Vec::new();\n    let mut counter = 0;\n\n    &amp;#39;outer: loop {\n        for
        n in freq_deltas.iter() {\n            res += n;\n            for i in found.iter()
        {\n                if *i == res {\n                    break &amp;#39;outer;\n                }\n            }\n            found.push(res);\n        }\n        counter
        += 1;\n        print!(&amp;quot;{}, &amp;quot;, counter);\n    }\n\n    println!(&amp;quot;\\n{:?}&amp;quot;,
        res);\n}\n\nfn read_file_to_vec(f: &amp;amp;str) -&amp;gt; std::io::Result&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;
        {\n    let mut file = File::open(f)?;\n\n    let mut contents = String::new();\n    file.read_to_string(&amp;amp;mut
        contents)?;\n\n    let ret: Vec&amp;lt;String&amp;gt; = contents.lines().map(|s|
        s.to_string()).collect();\n\n    Ok(ret)\n}\n\nfn parse_numbers(v: Vec&amp;lt;String&amp;gt;)
        -&amp;gt; Vec&amp;lt;i32&amp;gt; {\n    let mut res = Vec::new();\n\n    for
        s in v.iter() {\n        let n: i32 = s.parse().unwrap();\n        res.push(n);\n    }\n\n    res\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Obviously,
        this isn&amp;#39;t great, but it works!  I&amp;#39;m telling myself to be
        okay with\nthat :)&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "can_gild": false, "top_awarded_type": null, "unrepliable_reason": null, "author_flair_text_color":
        "dark", "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eawnkti/",
        "num_reports": null, "locked": false, "report_reasons": null, "created": 1543732387.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1543732387.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eawvahl",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "aoc2018",
        "can_mod_post": false, "created_utc": 1543744382.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_2pa6wo50", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Befunge!\n\n```\nv@v&lt;+&lt;\n&gt;0&gt;&amp;:|\n@@@@.&lt;\n```", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Befunge!&lt;/p&gt;\n\n&lt;p&gt;```\nv@v&amp;lt;+&amp;lt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;0&amp;gt;&amp;amp;:|\n@@@@.&amp;lt;\n```&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eawvahl/",
        "subreddit_type": "public", "locked": false, "name": "t1_eawvahl", "created":
        1543744382.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543748744.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eawxtvm", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "miguelos",
        "can_mod_post": false, "created_utc": 1543748285.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_58110", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Prolog**\n\nPart 1:\n\n```prolog\npart1(Input, Output) :-\n    atomic_list_concat(Atoms,''\\n'',
        Input), \n    maplist(atom_number, Atoms, Numbers), \n    sum_list(Numbers,
        Sum),\n    number_string(Sum, Output).\n```", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Prolog&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;prolog\npart1(Input, Output) :-\n    atomic_list_concat(Atoms,&amp;#39;\\n&amp;#39;,
        Input), \n    maplist(atom_number, Atoms, Numbers), \n    sum_list(Numbers,
        Sum),\n    number_string(Sum, Output).\n&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eawxtvm/",
        "subreddit_type": "public", "locked": false, "name": "t1_eawxtvm", "created":
        1543748285.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eax6yvg",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "fire1299",
        "can_mod_post": false, "created_utc": 1543760063.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_fnlc1", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "###Haskell\n    module Aoc18.Day1 where\n    \n    import           Data.Foldable                  (
        foldl'' )\n    import qualified Data.HashSet                  as S\n    import
        qualified Data.Text                     as T\n    import qualified Data.Text.IO                  as
        T\n    import qualified Data.Text.Read                as T\n    \n    main
        :: ([Integer] -&gt; a) -&gt; IO a\n    main f =\n      either error (f . fmap
        fst)\n        .   traverse (T.signed T.decimal)\n        .   T.lines\n        &lt;$&gt;
        T.readFile \"day1.txt\"\n    \n    part1 :: [Integer] -&gt; Integer\n    part1
        = foldl'' (+) 0\n    \n    part2 :: [Integer] -&gt; Integer\n    part2 = flip
        (foldr go $ const undefined) S.empty . scanl (+) 0 . cycle\n     where\n      go
        n f s | n `S.member` s = n\n               | otherwise      = f $ n `S.insert`
        s", "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h3&gt;Haskell&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;module
        Aoc18.Day1 where\n\nimport           Data.Foldable                  ( foldl&amp;#39;
        )\nimport qualified Data.HashSet                  as S\nimport qualified Data.Text                     as
        T\nimport qualified Data.Text.IO                  as T\nimport qualified Data.Text.Read                as
        T\n\nmain :: ([Integer] -&amp;gt; a) -&amp;gt; IO a\nmain f =\n  either error
        (f . fmap fst)\n    .   traverse (T.signed T.decimal)\n    .   T.lines\n    &amp;lt;$&amp;gt;
        T.readFile &amp;quot;day1.txt&amp;quot;\n\npart1 :: [Integer] -&amp;gt; Integer\npart1
        = foldl&amp;#39; (+) 0\n\npart2 :: [Integer] -&amp;gt; Integer\npart2 = flip
        (foldr go $ const undefined) S.empty . scanl (+) 0 . cycle\n where\n  go n
        f s | n `S.member` s = n\n           | otherwise      = f $ n `S.insert` s\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eax6yvg/",
        "subreddit_type": "public", "locked": false, "name": "t1_eax6yvg", "created":
        1543760063.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543763553.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eax7kwh", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Money_on_the_table",
        "can_mod_post": false, "created_utc": 1543760699.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_9xk7h", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Late to the part, but here''s my implementation in C of Day 1 Puzzle 2. I
        first used a linked list, which took 51 seconds, but improved this 10 fold
        to 5 seconds, using a binary tree:\n\n    #include &lt;stdio.h&gt;\n    #include
        &lt;stdlib.h&gt;\n    #include &lt;time.h&gt;\n    \n    struct tnode\n    {\n    \tint
        iterfreq;\n    \tstruct tnode *left;\n    \tstruct tnode *right;\n    };\n    \n    struct
        tnode *talloc(void)\n    {\n    \treturn (struct tnode *) malloc(sizeof(struct
        tnode));\n    }\n    \n    int findfreq(FILE *frequencies);\n    struct tnode
        *addtree(struct tnode *, int);\n    FILE *frequencies;\n    void main(void)\n    {\n    \tint
        stored_freq;\n   \n    \tfrequencies = fopen(\"frequencies.txt\", \"r\");\n    \tif(frequencies
        == NULL)\n    \t{\n    \t\tprintf(\"File not found\\n\");\n    \t\treturn
        1;\n    \t}\n    \n    \ttime(&amp;now);\n    \tstored_freq = findfreq(frequencies);\n    \n    }\n    time_t
        now, then;\n    \n    int findfreq(FILE *frequencies)\n    {\n    \tint freq
        = 0, iread;\n    \t\n    \tstruct tnode * root = NULL;\n    \ttime(&amp;now);\n    \twhile(1)\n    \t{\n    \t\twhile(fscanf(frequencies,
        \"%d\", &amp;iread) != EOF)\n    \t\t{\n    \t\t\tfreq += iread;\n    \t\t\troot
        = addtree(root, freq);\n    \t\t}\n    \t\tfseek(frequencies, 0, SEEK_SET);\n    \t}\n    }\n    \n    \n    struct
        tnode *addtree(struct tnode *p, int freq)\n    {\n    \tif(p == NULL)\n    \t{\n    \t\tp
        = talloc();\n    \t\tp-&gt;iterfreq = freq;\n    \t\tp-&gt; left = p-&gt;right
        = NULL;\n    \t}\n    \telse if(p-&gt;iterfreq == freq)\n    \t{\n    \t\ttime(&amp;then);\n    \t\tprintf(\"Found:
        %d in %ld\\n\", freq, then - now);\n                fclose(frequencies);\n    \t\texit(1);\n    \t}\n    \telse
        if (p-&gt; iterfreq &lt; freq)\n    \t\tp-&gt;left = addtree(p-&gt;left, freq);\n    \telse\n    \t\tp-&gt;right
        = addtree(p-&gt;right, freq);\n    \treturn p;\n    \n    }\n            \n
        \nEDIT: And now I''ve implemented the second stage in Java too. This time,
        using sets I''ve brought it down to 93 milliseconds!\n\n       static public
        void puzzle2() {\n            FileReader fr;\n            int freq = 0;\n            String
        s;\n            Set&lt;Integer&gt; hash_Set = new HashSet&lt;Integer&gt;();\n    \n            try{\n    \n               //
        BufferedReader bufferedReader = new BufferedReader(fr);\n                while(true)
        {\n                    fr = new FileReader(\"frequencies.txt\");\n                    BufferedReader
        bufferedReader = new BufferedReader(fr);\n                    while ((s =
        bufferedReader.readLine()) != null) {\n                        freq += Integer.parseInt(s);\n                        boolean
        result = hash_Set.add(freq);\n                        if(!result)\n                        {\n                            System.out.println(freq);\n                            return;\n                        }\n                    }\n                    fr.close();\n                }\n            }\n            catch(IOException
        e)\n            {\n                System.out.println(e);\n            }\n    \n        }\n",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Late to the part, but
        here&amp;#39;s my implementation in C of Day 1 Puzzle 2. I first used a linked
        list, which took 51 seconds, but improved this 10 fold to 5 seconds, using
        a binary tree:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;\n#include
        &amp;lt;stdlib.h&amp;gt;\n#include &amp;lt;time.h&amp;gt;\n\nstruct tnode\n{\n    int
        iterfreq;\n    struct tnode *left;\n    struct tnode *right;\n};\n\nstruct
        tnode *talloc(void)\n{\n    return (struct tnode *) malloc(sizeof(struct tnode));\n}\n\nint
        findfreq(FILE *frequencies);\nstruct tnode *addtree(struct tnode *, int);\nFILE
        *frequencies;\nvoid main(void)\n{\n    int stored_freq;\n\n    frequencies
        = fopen(&amp;quot;frequencies.txt&amp;quot;, &amp;quot;r&amp;quot;);\n    if(frequencies
        == NULL)\n    {\n        printf(&amp;quot;File not found\\n&amp;quot;);\n        return
        1;\n    }\n\n    time(&amp;amp;now);\n    stored_freq = findfreq(frequencies);\n\n}\ntime_t
        now, then;\n\nint findfreq(FILE *frequencies)\n{\n    int freq = 0, iread;\n\n    struct
        tnode * root = NULL;\n    time(&amp;amp;now);\n    while(1)\n    {\n        while(fscanf(frequencies,
        &amp;quot;%d&amp;quot;, &amp;amp;iread) != EOF)\n        {\n            freq
        += iread;\n            root = addtree(root, freq);\n        }\n        fseek(frequencies,
        0, SEEK_SET);\n    }\n}\n\n\nstruct tnode *addtree(struct tnode *p, int freq)\n{\n    if(p
        == NULL)\n    {\n        p = talloc();\n        p-&amp;gt;iterfreq = freq;\n        p-&amp;gt;
        left = p-&amp;gt;right = NULL;\n    }\n    else if(p-&amp;gt;iterfreq == freq)\n    {\n        time(&amp;amp;then);\n        printf(&amp;quot;Found:
        %d in %ld\\n&amp;quot;, freq, then - now);\n            fclose(frequencies);\n        exit(1);\n    }\n    else
        if (p-&amp;gt; iterfreq &amp;lt; freq)\n        p-&amp;gt;left = addtree(p-&amp;gt;left,
        freq);\n    else\n        p-&amp;gt;right = addtree(p-&amp;gt;right, freq);\n    return
        p;\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;EDIT: And now I&amp;#39;ve
        implemented the second stage in Java too. This time, using sets I&amp;#39;ve
        brought it down to 93 milliseconds!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;   static
        public void puzzle2() {\n        FileReader fr;\n        int freq = 0;\n        String
        s;\n        Set&amp;lt;Integer&amp;gt; hash_Set = new HashSet&amp;lt;Integer&amp;gt;();\n\n        try{\n\n           //
        BufferedReader bufferedReader = new BufferedReader(fr);\n            while(true)
        {\n                fr = new FileReader(&amp;quot;frequencies.txt&amp;quot;);\n                BufferedReader
        bufferedReader = new BufferedReader(fr);\n                while ((s = bufferedReader.readLine())
        != null) {\n                    freq += Integer.parseInt(s);\n                    boolean
        result = hash_Set.add(freq);\n                    if(!result)\n                    {\n                        System.out.println(freq);\n                        return;\n                    }\n                }\n                fr.close();\n            }\n        }\n        catch(IOException
        e)\n        {\n            System.out.println(e);\n        }\n\n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eax7kwh/",
        "subreddit_type": "public", "locked": false, "name": "t1_eax7kwh", "created":
        1543760699.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaxcfyt",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ordepdev",
        "can_mod_post": false, "created_utc": 1543765024.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_qyhkg", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Elixir!\n\n```\ndefmodule Puzzle do\n  def compute_1(input) do\n    input\n    |&gt;
        Enum.map(&amp;String.to_integer(&amp;1))\n    |&gt; Enum.sum\n  end\n\n  def
        compute_2(input) do\n    input\n    |&gt; Enum.map(&amp;String.to_integer(&amp;1))
        \n    |&gt; Stream.cycle()\n    |&gt; Enum.reduce_while(\n      {0, MapSet.new([0])},\n      fn
        x, {current, seen} -&gt; \n        freq = current + x\n        case MapSet.member?(seen,
        freq) do\n          true -&gt; {:halt, freq}\n          _    -&gt; {:cont,
        {freq, MapSet.put(seen, freq)}}\n        end\n      end\n    )\n  end\nend\n```\n\nIn
        order to execute inside `iex`:\n```\n\"input.txt\"\n|&gt; File.stream!\n|&gt;
        Stream.map(&amp;String.trim/1)\n|&gt; Enum.to_list\n|&gt; Puzzle.compute_1\n```",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Elixir!&lt;/p&gt;\n\n&lt;p&gt;```\ndefmodule
        Puzzle do\n  def compute_1(input) do\n    input\n    |&amp;gt; Enum.map(&amp;amp;String.to_integer(&amp;amp;1))\n    |&amp;gt;
        Enum.sum\n  end&lt;/p&gt;\n\n&lt;p&gt;def compute_2(input) do\n    input\n    |&amp;gt;
        Enum.map(&amp;amp;String.to_integer(&amp;amp;1)) \n    |&amp;gt; Stream.cycle()\n    |&amp;gt;
        Enum.reduce_while(\n      {0, MapSet.new([0])},\n      fn x, {current, seen}
        -&amp;gt; \n        freq = current + x\n        case MapSet.member?(seen,
        freq) do\n          true -&amp;gt; {:halt, freq}\n          _    -&amp;gt;
        {:cont, {freq, MapSet.put(seen, freq)}}\n        end\n      end\n    )\n  end\nend\n```&lt;/p&gt;\n\n&lt;p&gt;In
        order to execute inside &lt;code&gt;iex&lt;/code&gt;:\n&lt;code&gt;\n&amp;quot;input.txt&amp;quot;\n|&amp;gt;
        File.stream!\n|&amp;gt; Stream.map(&amp;amp;String.trim/1)\n|&amp;gt; Enum.to_list\n|&amp;gt;
        Puzzle.compute_1\n&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaxcfyt/", "subreddit_type":
        "public", "locked": false, "name": "t1_eaxcfyt", "created": 1543765024.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "removal_reason":
        null, "link_id": "t3_a20646", "author_flair_template_id": null, "likes": null,
        "replies": "", "user_reports": [], "saved": false, "id": "eaxia69", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "[deleted]", "can_mod_post": false, "send_replies":
        true, "parent_id": "t3_a20646", "score": 1, "approved_by": null, "mod_note":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "php:\n\n    &lt;?php\n    \n    function
        findFrequency()\n    {\n        $rawInput = file_get_contents(''input.txt'');\n        $input
        = explode(PHP_EOL, $rawInput);\n        $result = 0;\n        $resultArr =
        [];\n        while (true) { \n            foreach ($input as $i) {\n                $result
        += intval($i);\n                if (in_array($result, $resultArr)) {\n                    print_r($result);\n                    return
        false;\n                } else {\n                    $resultArr[] = $result;\n                }\n                \n            }\n        }\n    \n    }\n    \n    findFrequency();\n\n&amp;#x200B;",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_eaxia69",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;php:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;?php\n\nfunction
        findFrequency()\n{\n    $rawInput = file_get_contents(&amp;#39;input.txt&amp;#39;);\n    $input
        = explode(PHP_EOL, $rawInput);\n    $result = 0;\n    $resultArr = [];\n    while
        (true) { \n        foreach ($input as $i) {\n            $result += intval($i);\n            if
        (in_array($result, $resultArr)) {\n                print_r($result);\n                return
        false;\n            } else {\n                $resultArr[] = $result;\n            }\n\n        }\n    }\n\n}\n\nfindFrequency();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaxia69/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1543769013.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543769013.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaxtle6",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "RockyAstro",
        "can_mod_post": false, "created_utc": 1543775319.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_rd35u", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Here is the Icon solution for Day 1\nPart 1\n\n    procedure main()\n        freq
        := 0\n        while freq +:= trim(read())\n        write(freq)\n    end\n\nPart
        2\n\n    procedure main()\n    \n        freq := 0\n        inputs := []\n        seen
        := set([0])\n    \n        while put(inputs,trim(read()))\n    \n        repeat
        {\n            every freq +:= !inputs do {\n                if member(seen,freq)
        then break break\n                insert(seen,freq)\n            }\n        }\n    \n        write(freq)\n    end",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here is the Icon solution
        for Day 1\nPart 1&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;procedure main()\n    freq
        := 0\n    while freq +:= trim(read())\n    write(freq)\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;procedure main()\n\n    freq := 0\n    inputs
        := []\n    seen := set([0])\n\n    while put(inputs,trim(read()))\n\n    repeat
        {\n        every freq +:= !inputs do {\n            if member(seen,freq) then
        break break\n            insert(seen,freq)\n        }\n    }\n\n    write(freq)\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaxtle6/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaxtle6", "created":
        1543775319.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eay3qee",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "not_really_cool",
        "can_mod_post": false, "created_utc": 1543781330.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_11nu1y", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Python 3**\n\n    def part1(input_list):\n        return sum(input_list)\n\n    def
        part2(input_list):\n        current_freq = 0\n        cycle = itertools.cycle(input_list)\n        prev_freqs
        = set()\n        duplicate_found = False\n        while not duplicate_found:\n            prev_freqs.add(current_freq)\n            current_freq
        += next(cycle)\n            if current_freq in prev_freqs:\n                duplicate_found
        = True\n        return current_freq\n\nOne does not simply **write a perfect
        solution on the first try** during Advent of Code.\n", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python 3&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        part1(input_list):\n    return sum(input_list)\n\ndef part2(input_list):\n    current_freq
        = 0\n    cycle = itertools.cycle(input_list)\n    prev_freqs = set()\n    duplicate_found
        = False\n    while not duplicate_found:\n        prev_freqs.add(current_freq)\n        current_freq
        += next(cycle)\n        if current_freq in prev_freqs:\n            duplicate_found
        = True\n    return current_freq\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;One
        does not simply &lt;strong&gt;write a perfect solution on the first try&lt;/strong&gt;
        during Advent of Code.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eay3qee/",
        "subreddit_type": "public", "locked": false, "name": "t1_eay3qee", "created":
        1543781330.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eay7fst",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Wolfchin",
        "can_mod_post": false, "created_utc": 1543783278.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_1d3ztbkb", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Here is my solution in [Ballerina](https://ballerina.io). \n\n\n```ballerina\nimport
        ballerina/io;\n\nfunction fileToLines(io:ReadableCharacterChannel c) returns
        (string[]|error) {\n    string[] lines;\n    var end = false;\n    var curLine
        = \"\";\n\n    while (!end) {\n        match c.read(1) {\n            string
        char =&gt; {\n                if (char == \"\\n\") {\n                    lines[lengthof
        lines] = curLine;\n                    curLine = \"\";\n                }
        else {\n                    curLine += char;\n                }\n            }\n            error
        err =&gt; {\n                if err.message != \"io.EOF\" {\n                    return
        err;\n                }\n                end = true;\n            }\n        }\n    }\n    return
        lines;\n}\n\n\nfunction count(string[] lines) returns (int) {\n    int c;\n\n    foreach
        l in lines {\n        var tmp = &lt;int&gt;l;\n        match &lt;int&gt;l
        {\n            int i =&gt; {\n                c += i;\n            }\n            error
        err =&gt; {\n                throw err;\n            }\n        }\n    }\n    return
        c;\n}\n\npublic function main() {\n    io:ReadableCharacterChannel c = new
        (io:openReadableFile(\"d01/input.txt\"), \"UTF-8\");\n\n    match fileToLines(c)
        {\n        string[] lines =&gt; {\n            io:println(count(lines));\n            io:println(matchfreq(lines));\n        }\n        error
        err =&gt; {\n            io:println(\"An error occured : \" + err.message);\n        }\n    }\n}```",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here is my solution
        in &lt;a href=\"https://ballerina.io\"&gt;Ballerina&lt;/a&gt;. &lt;/p&gt;\n\n&lt;p&gt;```ballerina\nimport
        ballerina/io;&lt;/p&gt;\n\n&lt;p&gt;function fileToLines(io:ReadableCharacterChannel
        c) returns (string[]|error) {\n    string[] lines;\n    var end = false;\n    var
        curLine = &amp;quot;&amp;quot;;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;while
        (!end) {\n    match c.read(1) {\n        string char =&amp;gt; {\n            if
        (char == &amp;quot;\\n&amp;quot;) {\n                lines[lengthof lines]
        = curLine;\n                curLine = &amp;quot;&amp;quot;;\n            }
        else {\n                curLine += char;\n            }\n        }\n        error
        err =&amp;gt; {\n            if err.message != &amp;quot;io.EOF&amp;quot;
        {\n                return err;\n            }\n            end = true;\n        }\n    }\n}\nreturn
        lines;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n\n&lt;p&gt;function
        count(string[] lines) returns (int) {\n    int c;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;foreach
        l in lines {\n    var tmp = &amp;lt;int&amp;gt;l;\n    match &amp;lt;int&amp;gt;l
        {\n        int i =&amp;gt; {\n            c += i;\n        }\n        error
        err =&amp;gt; {\n            throw err;\n        }\n    }\n}\nreturn c;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n\n&lt;p&gt;public
        function main() {\n    io:ReadableCharacterChannel c = new (io:openReadableFile(&amp;quot;d01/input.txt&amp;quot;),
        &amp;quot;UTF-8&amp;quot;);&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;match fileToLines(c)
        {\n    string[] lines =&amp;gt; {\n        io:println(count(lines));\n        io:println(matchfreq(lines));\n    }\n    error
        err =&amp;gt; {\n        io:println(&amp;quot;An error occured : &amp;quot;
        + err.message);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}```&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eay7fst/",
        "subreddit_type": "public", "locked": false, "name": "t1_eay7fst", "created":
        1543783278.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eayarcr",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "matusbzk",
        "can_mod_post": false, "created_utc": 1543785018.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_1zgrks", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Haskell for today\n\nthough part 2 is not really efficient and definitely
        could be done better\n\n    import Data.List\n    \n    input :: String\n    input
        = \"+1 -2 +3 +1\"\n    \n    inputInts :: [Int]\n    inputInts = map read
        . words $ filter (/= ''+'') input\n    \n    result1 :: Int\n    result1 =
        foldl (+) 0 inputInts\n    \n    inputRepeated :: [Int]\n    inputRepeated
        = cycle inputInts\n    \n    foundFrequencies :: [Int]\n    foundFrequencies
        = scanl (+) 0 inputRepeated\n    \n    firstDifferent :: Eq a =&gt; [a] -&gt;
        [a] -&gt; (a,a)\n    firstDifferent (x:xs) (y:ys) = if x == y then firstDifferent
        xs ys else (x,y)\n    \n    result2 :: Int\n    result2 = fst $ firstDifferent
        foundFrequencies (nub foundFrequencies)\n\n[Link](https://github.com/matusbzk/AoC2018)
        to my github.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Haskell
        for today&lt;/p&gt;\n\n&lt;p&gt;though part 2 is not really efficient and
        definitely could be done better&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        Data.List\n\ninput :: String\ninput = &amp;quot;+1 -2 +3 +1&amp;quot;\n\ninputInts
        :: [Int]\ninputInts = map read . words $ filter (/= &amp;#39;+&amp;#39;) input\n\nresult1
        :: Int\nresult1 = foldl (+) 0 inputInts\n\ninputRepeated :: [Int]\ninputRepeated
        = cycle inputInts\n\nfoundFrequencies :: [Int]\nfoundFrequencies = scanl (+)
        0 inputRepeated\n\nfirstDifferent :: Eq a =&amp;gt; [a] -&amp;gt; [a] -&amp;gt;
        (a,a)\nfirstDifferent (x:xs) (y:ys) = if x == y then firstDifferent xs ys
        else (x,y)\n\nresult2 :: Int\nresult2 = fst $ firstDifferent foundFrequencies
        (nub foundFrequencies)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/matusbzk/AoC2018\"&gt;Link&lt;/a&gt;
        to my github.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eayarcr/",
        "subreddit_type": "public", "locked": false, "name": "t1_eayarcr", "created":
        1543785018.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eayexvu",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Alex_Mckey",
        "can_mod_post": false, "created_utc": 1543787299.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_bnv6c9p", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My Solution in Scala\n\n    import scala.io.Source.fromFile\n    \n    object
        Sol_01 extends App {\n    \n      val freqChanges = fromFile(\"input01.txt\")\n        .getLines().map(_.toInt).toSeq\n    \n      val
        res1 = freqChanges.sum\n    \n      println(s\"$res1\")\n    \n      implicit
        class CycleSeqs[T](val seq: Seq[T]) extends AnyVal {\n        def cycle: Stream[T]
        = Stream.continually(seq).flatten\n      }\n    \n      val res2 = freqChanges.cycle\n        .scanLeft((0,
        Set.empty[Int], false))\n        {case ((curFreq, set, _), freqDiff) =&gt;\n          val
        newFreq = curFreq + freqDiff\n          val check = set.contains(newFreq)\n          (newFreq,
        set + newFreq, check)\n        }.dropWhile(!_._3).head._1\n    \n      println(s\"$res2\")\n    }\n\n&amp;#x200B;",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My Solution in Scala&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        scala.io.Source.fromFile\n\nobject Sol_01 extends App {\n\n  val freqChanges
        = fromFile(&amp;quot;input01.txt&amp;quot;)\n    .getLines().map(_.toInt).toSeq\n\n  val
        res1 = freqChanges.sum\n\n  println(s&amp;quot;$res1&amp;quot;)\n\n  implicit
        class CycleSeqs[T](val seq: Seq[T]) extends AnyVal {\n    def cycle: Stream[T]
        = Stream.continually(seq).flatten\n  }\n\n  val res2 = freqChanges.cycle\n    .scanLeft((0,
        Set.empty[Int], false))\n    {case ((curFreq, set, _), freqDiff) =&amp;gt;\n      val
        newFreq = curFreq + freqDiff\n      val check = set.contains(newFreq)\n      (newFreq,
        set + newFreq, check)\n    }.dropWhile(!_._3).head._1\n\n  println(s&amp;quot;$res2&amp;quot;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eayexvu/",
        "subreddit_type": "public", "locked": false, "name": "t1_eayexvu", "created":
        1543787299.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543791356.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eaykqhd", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "lib20",
        "can_mod_post": false, "created_utc": 1543790907.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_60tjs", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Using **Red**\n\nPart 1:\n\n    Red [Title:  \"Advent of Code 2018 - Day
        01 - Part 01\"]\n    \n    input-txt: load read %input.txt\n    \n    sum:
        0\n    foreach i input-txt [ sum: sum + i]\n    print sum\n\n&amp;#x200B;\n\nPart
        2:\n\n    Red [Title:  \"Advent of Code 2018 - Day 01 - Part 02\"]\n    \n    input-txt:
        load read %input.txt\n    \n    ; takes more than five minutes using a normal
        block\n    ; but only one second when stored in a hash!\n    frequencies-seen:
        make hash! []\n    number-inputs: length? input-txt \n    sum: 0\n    found:
        false\n    loops: 0\n    time-start: now/time\n    \n    while [not found]
        [\n    \ti: first input-txt\n    \tsum: sum + i\n    \tif find frequencies-seen
        sum [found: true]\n    \tappend frequencies-seen sum\n    \tinput-txt: next
        input-txt\n    \tif tail? input-txt [input-txt: head input-txt loops: loops
        + 1]\n    ]\n    print rejoin [\"found frequency: \" sum newline \"number
        of inputs: \" number-inputs newline \"number of loops: \" loops]\n    print
        rejoin [\"spent: \" now/time - time-start]\n\n&amp;#x200B;\n\n&amp;#x200B;",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Using &lt;strong&gt;Red&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Red [Title:  &amp;quot;Advent of Code
        2018 - Day 01 - Part 01&amp;quot;]\n\ninput-txt: load read %input.txt\n\nsum:
        0\nforeach i input-txt [ sum: sum + i]\nprint sum\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Red [Title:  &amp;quot;Advent of Code
        2018 - Day 01 - Part 02&amp;quot;]\n\ninput-txt: load read %input.txt\n\n;
        takes more than five minutes using a normal block\n; but only one second when
        stored in a hash!\nfrequencies-seen: make hash! []\nnumber-inputs: length?
        input-txt \nsum: 0\nfound: false\nloops: 0\ntime-start: now/time\n\nwhile
        [not found] [\n    i: first input-txt\n    sum: sum + i\n    if find frequencies-seen
        sum [found: true]\n    append frequencies-seen sum\n    input-txt: next input-txt\n    if
        tail? input-txt [input-txt: head input-txt loops: loops + 1]\n]\nprint rejoin
        [&amp;quot;found frequency: &amp;quot; sum newline &amp;quot;number of inputs:
        &amp;quot; number-inputs newline &amp;quot;number of loops: &amp;quot; loops]\nprint
        rejoin [&amp;quot;spent: &amp;quot; now/time - time-start]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaykqhd/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaykqhd", "created":
        1543790907.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543824271.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eayp728", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "apdc",
        "can_mod_post": false, "created_utc": 1543793683.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_3jnhp2", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Chibi Scheme, first part, supplying the input as stdin:\n\n```lisp\n(import
        (chibi io))  ; For port-fold\n(display (port-fold + 0 read))\n```\n\nNote
        that `read` will happily read and parse one *value* at a time. Coincidentally,
        the input files are integer values compatible with Scheme''s representation
        separated by spaces, so the above starts at zero, and adds each value returned
        by `read` from the standard input until the end of the input is reached; then
        displays the result.\n\nEdit: Here goes part two, though unfortunately is
        not as compact:\n\n```lisp\n(import (chibi io)\n        (scheme set))\n\n(define
        (find-calibration-frequency change-list)\n  (define (run-list cur-freq seen-freqs
        items)\n    (if (null? items)\n      (run-list cur-freq seen-freqs change-list)  ;
        Restart list.\n      (if (set-contains? seen-freqs cur-freq)\n        cur-freq  ;
        Found!\n        (run-list (+ cur-freq (car items))\n                  (set-adjoin!
        seen-freqs cur-freq)\n                  (cdr items)))))\n  (run-list 0 (set
        =) change-list))\n\n(display (find-calibration-frequency\n           (port-&gt;list
        read (current-input-port))))\n```\n\nAgain, this takes advantage of the input
        being just valid Scheme literals to `read` them directly. I am still learning
        the language, so I didn''t know whether there is something readily available
        to cycle through it and instead I added the cycling with recursion. I kind
        of like it how one can use `set-adjoin!` instead of `set-adjoin` to indicate
        that a set may be mutated in-place (it''s up to the implementation), which
        in this case is clearly safe because `run-list` being tail-recusive it is
        quite clear indeed that no other code can reference the set.\n\nBoth solutions
        are quite fast:\n\n```\n% time -p ./day01a &lt; inputs/day01 &gt; /dev/null\nreal
        0.07\nuser 0.07\nsys 0.00\n% time -p ./day01b &lt; inputs/day01 &gt; /dev/null\nreal
        0.80\nuser 0.78\nsys 0.01\n%\n```", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Chibi Scheme, first part, supplying the input as
        stdin:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;lisp\n(import (chibi io))  ; For
        port-fold\n(display (port-fold + 0 read))\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Note
        that &lt;code&gt;read&lt;/code&gt; will happily read and parse one &lt;em&gt;value&lt;/em&gt;
        at a time. Coincidentally, the input files are integer values compatible with
        Scheme&amp;#39;s representation separated by spaces, so the above starts at
        zero, and adds each value returned by &lt;code&gt;read&lt;/code&gt; from the
        standard input until the end of the input is reached; then displays the result.&lt;/p&gt;\n\n&lt;p&gt;Edit:
        Here goes part two, though unfortunately is not as compact:&lt;/p&gt;\n\n&lt;p&gt;```lisp\n(import
        (chibi io)\n        (scheme set))&lt;/p&gt;\n\n&lt;p&gt;(define (find-calibration-frequency
        change-list)\n  (define (run-list cur-freq seen-freqs items)\n    (if (null?
        items)\n      (run-list cur-freq seen-freqs change-list)  ; Restart list.\n      (if
        (set-contains? seen-freqs cur-freq)\n        cur-freq  ; Found!\n        (run-list
        (+ cur-freq (car items))\n                  (set-adjoin! seen-freqs cur-freq)\n                  (cdr
        items)))))\n  (run-list 0 (set =) change-list))&lt;/p&gt;\n\n&lt;p&gt;(display
        (find-calibration-frequency\n           (port-&amp;gt;list read (current-input-port))))\n```&lt;/p&gt;\n\n&lt;p&gt;Again,
        this takes advantage of the input being just valid Scheme literals to &lt;code&gt;read&lt;/code&gt;
        them directly. I am still learning the language, so I didn&amp;#39;t know
        whether there is something readily available to cycle through it and instead
        I added the cycling with recursion. I kind of like it how one can use &lt;code&gt;set-adjoin!&lt;/code&gt;
        instead of &lt;code&gt;set-adjoin&lt;/code&gt; to indicate that a set may
        be mutated in-place (it&amp;#39;s up to the implementation), which in this
        case is clearly safe because &lt;code&gt;run-list&lt;/code&gt; being tail-recusive
        it is quite clear indeed that no other code can reference the set.&lt;/p&gt;\n\n&lt;p&gt;Both
        solutions are quite fast:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\n% time -p ./day01a
        &amp;lt; inputs/day01 &amp;gt; /dev/null\nreal 0.07\nuser 0.07\nsys 0.00\n%
        time -p ./day01b &amp;lt; inputs/day01 &amp;gt; /dev/null\nreal 0.80\nuser
        0.78\nsys 0.01\n%\n&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eayp728/", "subreddit_type":
        "public", "locked": false, "name": "t1_eayp728", "created": 1543793683.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eayqzud", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "shruber-", "can_mod_post": false, "created_utc":
        1543794839.0, "send_replies": true, "parent_id": "t3_a20646", "score": 1,
        "author_fullname": "t2_4bvuuy", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "Since I haven''t seen any
        solutions in m4, I thought I''d post mine for the second part. It is terribly
        slow and inefficient, but hey, it''s m4.\n```\n    divert(`-1'')\n    define(`input'',
        `include(`day1.in'')'')\n    define(`input_list'', `patsubst((patsubst(input,
        `\n    '', `, '')), `, )'', `)'')'')\n    define(`ifl'', `ifdef(`brk'', `'',
        `$1`''$0(`$1'')'')'')\n    define(`wfl'', `pushdef(`$1'')fl($@)popdef(`$1'')'')\n    define(`a1'',
        `$1'')\n    define(`fl'', `ifdef(`brk'', `'', `ifelse(`$2'', `()'', `'',\n    `define(`$1'',
        a1$2)$3`''$0(`$1'', (shift$2), `$3'')'')'')'')\n    define(`cont'', 0)\n    ifl(`wfl(x,
        input_list,\n      `define(`cont'', eval(cont x))\n      ifdef(format(`seen[%d]'',
        cont), `define(`brk'')'')\n      define(format(`seen[%d]'', cont))'')'')\n    divert`''dnl\n    cont\n```",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Since I haven&amp;#39;t
        seen any solutions in m4, I thought I&amp;#39;d post mine for the second part.
        It is terribly slow and inefficient, but hey, it&amp;#39;s m4.\n&lt;code&gt;\n    divert(`-1&amp;#39;)\n    define(`input&amp;#39;,
        `include(`day1.in&amp;#39;)&amp;#39;)\n    define(`input_list&amp;#39;, `patsubst((patsubst(input,
        `\n    &amp;#39;, `, &amp;#39;)), `, )&amp;#39;, `)&amp;#39;)&amp;#39;)\n    define(`ifl&amp;#39;,
        `ifdef(`brk&amp;#39;, `&amp;#39;, `$1`&amp;#39;$0(`$1&amp;#39;)&amp;#39;)&amp;#39;)\n    define(`wfl&amp;#39;,
        `pushdef(`$1&amp;#39;)fl($@)popdef(`$1&amp;#39;)&amp;#39;)\n    define(`a1&amp;#39;,
        `$1&amp;#39;)\n    define(`fl&amp;#39;, `ifdef(`brk&amp;#39;, `&amp;#39;,
        `ifelse(`$2&amp;#39;, `()&amp;#39;, `&amp;#39;,\n    `define(`$1&amp;#39;,
        a1$2)$3`&amp;#39;$0(`$1&amp;#39;, (shift$2), `$3&amp;#39;)&amp;#39;)&amp;#39;)&amp;#39;)\n    define(`cont&amp;#39;,
        0)\n    ifl(`wfl(x, input_list,\n      `define(`cont&amp;#39;, eval(cont x))\n      ifdef(format(`seen[%d]&amp;#39;,
        cont), `define(`brk&amp;#39;)&amp;#39;)\n      define(format(`seen[%d]&amp;#39;,
        cont))&amp;#39;)&amp;#39;)\n    divert`&amp;#39;dnl\n    cont\n&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eayqzud/",
        "subreddit_type": "public", "locked": false, "name": "t1_eayqzud", "created":
        1543794839.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eayrr8u",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "hcm444",
        "can_mod_post": false, "created_utc": 1543795328.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_2idq8top", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I need some help with part 2 lads\n\n# [Day 1 Part 1](https://raw.githubusercontent.com/hcm444/AOC18/master/Day1Part1)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I need some help with
        part 2 lads&lt;/p&gt;\n\n&lt;h1&gt;&lt;a href=\"https://raw.githubusercontent.com/hcm444/AOC18/master/Day1Part1\"&gt;Day
        1 Part 1&lt;/a&gt;&lt;/h1&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eayrr8u/",
        "subreddit_type": "public", "locked": false, "name": "t1_eayrr8u", "created":
        1543795328.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eazhd9t",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "banteg",
        "can_mod_post": false, "created_utc": 1543817093.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_9ie69", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Python 3\n\n```Python\nfrom itertools import cycle\nimport aoc\n\n\n@aoc.test({\n    ''+1\\n-2\\n+3\\n+1'':
        3,\n    ''+1\\n+1\\n+1'': 3,\n    ''+1\\n+1\\n-2'': 0,\n    ''-1\\n-2\\n-3'':
        -6,\n})\ndef part_1(data: aoc.Data):\n    value = 0\n    for adj in data.int_lines:\n        value
        += adj\n    return value\n\n\n@aoc.test({\n    ''+1\\n-2\\n+3\\n+1'': 2,\n    ''+1\\n-1'':
        0,\n    ''+3\\n+3\\n+4\\n-2\\n-4'': 10,\n    ''-6\\n+3\\n+8\\n+5\\n-6'': 5,\n    ''+7\\n+7\\n-2\\n-7\\n-4'':
        14,\n})\ndef part_2(data):\n    value = 0\n    seen = {0}\n    for adj in
        cycle(data.int_lines):\n        value += adj\n        if value in seen:\n            break\n        seen.add(value)\n    return
        value\n```", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python
        3&lt;/p&gt;\n\n&lt;p&gt;```Python\nfrom itertools import cycle\nimport aoc&lt;/p&gt;\n\n&lt;p&gt;@aoc.test({\n    &amp;#39;+1\\n-2\\n+3\\n+1&amp;#39;:
        3,\n    &amp;#39;+1\\n+1\\n+1&amp;#39;: 3,\n    &amp;#39;+1\\n+1\\n-2&amp;#39;:
        0,\n    &amp;#39;-1\\n-2\\n-3&amp;#39;: -6,\n})\ndef part_1(data: aoc.Data):\n    value
        = 0\n    for adj in data.int_lines:\n        value += adj\n    return value&lt;/p&gt;\n\n&lt;p&gt;@aoc.test({\n    &amp;#39;+1\\n-2\\n+3\\n+1&amp;#39;:
        2,\n    &amp;#39;+1\\n-1&amp;#39;: 0,\n    &amp;#39;+3\\n+3\\n+4\\n-2\\n-4&amp;#39;:
        10,\n    &amp;#39;-6\\n+3\\n+8\\n+5\\n-6&amp;#39;: 5,\n    &amp;#39;+7\\n+7\\n-2\\n-7\\n-4&amp;#39;:
        14,\n})\ndef part_2(data):\n    value = 0\n    seen = {0}\n    for adj in
        cycle(data.int_lines):\n        value += adj\n        if value in seen:\n            break\n        seen.add(value)\n    return
        value\n```&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eazhd9t/",
        "subreddit_type": "public", "locked": false, "name": "t1_eazhd9t", "created":
        1543817093.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eazm07y",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "mhaecker",
        "can_mod_post": false, "created_utc": 1543823958.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_3j69o", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I like my python solution. So nice and readable. :-)\n\n```python\nimport
        fluentpy as _\n\n(\n    _(open(''input.txt''))\n    .read()\n    .replace(''+'',
        '''') # + before positive numbers confuse int()\n    .strip() # get rid of
        last empty line\n    .split(''\\n'')\n    .map(int)\n    .sum()\n    .print()\n)\n```",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I like my python solution.
        So nice and readable. :-)&lt;/p&gt;\n\n&lt;p&gt;```python\nimport fluentpy
        as _&lt;/p&gt;\n\n&lt;p&gt;(\n    _(open(&amp;#39;input.txt&amp;#39;))\n    .read()\n    .replace(&amp;#39;+&amp;#39;,
        &amp;#39;&amp;#39;) # + before positive numbers confuse int()\n    .strip()
        # get rid of last empty line\n    .split(&amp;#39;\\n&amp;#39;)\n    .map(int)\n    .sum()\n    .print()\n)\n```&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eazm07y/",
        "subreddit_type": "public", "locked": false, "name": "t1_eazm07y", "created":
        1543823958.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eazquo1",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "japanuspus",
        "can_mod_post": false, "created_utc": 1543833513.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_e34zj", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "## Rust newbie implementation\n\nSo far I am really liking how Rust let''s
        me mix functional and declarative style. To me, this is much more readable
        than having to include state management directly in the pipeline:\n\n    pub
        fn part2_01(d: &amp;str) -&gt; i64 {\n        let mut fs = HashSet::new();\n        let
        mut s: i64 = 0;\n        d\n            .lines()\n            .map(|a| a.parse::&lt;i64&gt;().unwrap())\n            .cycle()\n            .map(|a|
        {s=s+a; s})\n            .skip_while(|s| fs.insert(*s))\n            .next().unwrap()\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h2&gt;Rust newbie implementation&lt;/h2&gt;\n\n&lt;p&gt;So
        far I am really liking how Rust let&amp;#39;s me mix functional and declarative
        style. To me, this is much more readable than having to include state management
        directly in the pipeline:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;pub fn part2_01(d:
        &amp;amp;str) -&amp;gt; i64 {\n    let mut fs = HashSet::new();\n    let mut
        s: i64 = 0;\n    d\n        .lines()\n        .map(|a| a.parse::&amp;lt;i64&amp;gt;().unwrap())\n        .cycle()\n        .map(|a|
        {s=s+a; s})\n        .skip_while(|s| fs.insert(*s))\n        .next().unwrap()\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eazquo1/",
        "subreddit_type": "public", "locked": false, "name": "t1_eazquo1", "created":
        1543833513.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 34, "name": "t1_eazrcov", "id": "eazrcov", "parent_id":
        "t3_a20646", "depth": 0, "children": ["eazrcov", "eb0nhk6", "eb057u0", "eb1v3fd",
        "eb0ytjv", "eb3kasd", "eb353sd", "eb2ss04", "eb84elp", "eb3bxwl", "eb2ybtj",
        "ebfuouy", "eb9y4sj", "eb3q84i", "eb724w7", "eb8ltj1", "ebddk53", "ec9dysx",
        "ebo5h84", "ebad6id", "eb7prl5", "ebi3k6f", "ebqhbfx", "ebqh2us", "ebbq2nh",
        "eb5theq", "eboyobz", "eb82izv", "eau6362"]}}], true]], [0, 12, "attr", "things"],
        [12, 13, "call", ["t1_eaus1s2"]], [13, 14, "attr", "focus"], [14, 15, "call",
        []], [0, 16, "attr", "things"], [16, 17, "call", ["None"]], [17, 18, "attr",
        "filter"], [18, 19, "call", [".morechildren"]], [19, 20, "attr", "remove"],
        [20, 21, "call", []]], "success": true}'
  recorded_at: Sat, 08 Mar 2025 23:21:36 GMT
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:21:37 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=jpYCSVFgKqiXqlATsQ; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sat, 08 Mar 2025 23:21:37 GMT
- request:
    method: post
    uri: https://oauth.reddit.com/api/morechildren.json
    body:
      encoding: UTF-8
      string: link_id=t3_a20646&children=eazrcov,eb0nhk6,eb057u0,eb1v3fd,eb0ytjv,eb3kasd,eb353sd,eb2ss04,eb84elp,eb3bxwl,eb2ybtj,ebfuouy,eb9y4sj,eb3q84i,eb724w7,eb8ltj1,ebddk53,ec9dysx,ebo5h84,ebad6id,eb7prl5,ebi3k6f,ebqhbfx,ebqh2us,ebbq2nh,eb5theq,eboyobz,eb82izv,eau6362
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '14613'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      set-cookie:
      - loid=000000001ksjdn3j40.2.1741476097311.Z0FBQUFBQm56TkVCY3BpV3pjU1g5dVR4VFg5U3NFenhPYXAxU3VSbXA3NWJLSnNBRGhBWTllTzVva0luREJkVlAwY1gyWlNkYlpRS0tRYVlQeTNIY0NweU92dXZKQzY5eW1KN2JsNEJ3NnJDRk5EbXUxMHk4U0FCT09NT1R0Qm1Ga3ZDVnlWM1pqSE0;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Mon, 08-Mar-2027 23:21:37
        GMT; secure, session_tracker=bcnarkirodlbmljmdh.0.1741476097323.Z0FBQUFBQm56TkVCOGwzWW9sak9SUXdscnN4VWJ5TVpZMzVmbFZ6WXJsTy1uN0NZcHFKdHFVR2s5b2lQTUlrNk5DR05ua2t0WWN5ZUM4eVZjcjFPcks1V0ZrR0xqcFhMUTBzQllwV1RQMUt5XzVGZXRPOWduVEswZFMzcC15NkJfWFJSemkwZkJKTzU;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 01:21:37
        GMT; secure, edgebucket=vKc5CxcCXCYl8gdPW2; Domain=reddit.com; Max-Age=63071999;
        Path=/;  secure
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '9'
      x-ratelimit-remaining:
      - '91.0'
      x-ratelimit-reset:
      - '502'
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:21:37 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"jquery": [[0, 1, "call", ["body"]], [1, 2, "attr", "find"], [2, 3,
        "call", [".status"]], [3, 4, "attr", "hide"], [4, 5, "call", []], [5, 6, "attr",
        "html"], [6, 7, "call", [""]], [7, 8, "attr", "end"], [8, 9, "call", []],
        [0, 10, "attr", "insert_things"], [10, 11, "call", [[{"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eazrcov",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "D3m4i",
        "can_mod_post": false, "created_utc": 1543834549.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_2l28zlac", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Java Part 2\n\nCan someone explain my mistake ?  \n\n    String wyn=\"\";\n    \t\tScanner
        sc = new Scanner(file);\n    \t\twhile(sc.hasNextLine()) {\n    \t\t\twyn=sc.nextLine();\n    \t\t\tif(wyn.charAt(0)==''+'')
        {\t\t\t\t\n    \t\t\t\tfreq=freq+Integer.parseInt(wyn.substring(1, wyn.length()));\t\t\n    \t\t\t}else
        {\n    \t\t\t\tfreq=freq-Integer.parseInt(wyn.substring(1, wyn.length()));\n    \t\t\t}\n    \t\t\t\n    \t\t\tif(!list.contains(freq))
        {\t\n    \t\t\t\tlist.add(freq);\n    \t\t\t}else {\n    \t\t\t\tseeking=freq;
        //here my answer incorrect\n    \t\t\t\tbreak;\n    \t\t\t} \n    \t\t\t\t\t\n    \t\t}\n\n&amp;#x200B;",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Java Part 2&lt;/p&gt;\n\n&lt;p&gt;Can
        someone explain my mistake ?  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;String
        wyn=&amp;quot;&amp;quot;;\n        Scanner sc = new Scanner(file);\n        while(sc.hasNextLine())
        {\n            wyn=sc.nextLine();\n            if(wyn.charAt(0)==&amp;#39;+&amp;#39;)
        {                \n                freq=freq+Integer.parseInt(wyn.substring(1,
        wyn.length()));     \n            }else {\n                freq=freq-Integer.parseInt(wyn.substring(1,
        wyn.length()));\n            }\n\n            if(!list.contains(freq)) {  \n                list.add(freq);\n            }else
        {\n                seeking=freq; //here my answer incorrect\n                break;\n            }
        \n\n        }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eazrcov/",
        "subreddit_type": "public", "locked": false, "name": "t1_eazrcov", "created":
        1543834549.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eb05rzb",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Waddy101",
        "can_mod_post": false, "created_utc": 1543851537.0, "send_replies": true,
        "parent_id": "t1_eazrcov", "score": 2, "author_fullname": "t2_8vpw0", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "If you re-read the question it states that the sequence can loop multiple
        times until it hits a duplicate frequency, it potentially looks like that''s
        what you''re missing?", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If
        you re-read the question it states that the sequence can loop multiple times
        until it hits a duplicate frequency, it potentially looks like that&amp;#39;s
        what you&amp;#39;re missing?&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eb05rzb/",
        "subreddit_type": "public", "locked": false, "name": "t1_eb05rzb", "created":
        1543851537.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eb0t9nb",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "D3m4i",
        "can_mod_post": false, "created_utc": 1543868388.0, "send_replies": true,
        "parent_id": "t1_eb05rzb", "score": 1, "author_fullname": "t2_2l28zlac", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Yeah, my bad thank you ", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yeah,
        my bad thank you &lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eb0t9nb/",
        "subreddit_type": "public", "locked": false, "name": "t1_eb0t9nb", "created":
        1543868388.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eb057u0",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "wayneio",
        "can_mod_post": false, "created_utc": 1543851079.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_zbtkv", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Is it possible that for part 2 of day one, there is never a frequency repeated?
        ", "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Is it possible that
        for part 2 of day one, there is never a frequency repeated? &lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eb057u0/",
        "subreddit_type": "public", "locked": false, "name": "t1_eb057u0", "created":
        1543851079.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eba1wz0",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "karthickg",
        "can_mod_post": false, "created_utc": 1544175599.0, "send_replies": true,
        "parent_id": "t1_eb057u0", "score": 1, "author_fullname": "t2_1fif87p9", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Possible in general - for example, `+3, +4, -2, +6, -6`, but not sure if
        any of the puzzle inputs are of that form.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Possible in general - for example, &lt;code&gt;+3,
        +4, -2, +6, -6&lt;/code&gt;, but not sure if any of the puzzle inputs are
        of that form.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eba1wz0/",
        "subreddit_type": "public", "locked": false, "name": "t1_eba1wz0", "created":
        1544175599.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543864736.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eb0nhk6", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "blacksqr",
        "can_mod_post": false, "created_utc": 1543864376.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_4nylf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Tcl:\n\nPart 1:\n\n    expr $input\n\nPart 2:\n\n    proc freq {input} {\n        lappend
        results\n        set freq 0\n        while {$freq ni $results} {\n            lappend
        results $freq\n            set input [lassign $input x]\n            incr
        freq $x\n            lappend input $x\n        }\n        set freq\n    }\n\n    freq
        $input\n", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Tcl:&lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;expr $input\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;proc freq {input} {\n    lappend results\n    set
        freq 0\n    while {$freq ni $results} {\n        lappend results $freq\n        set
        input [lassign $input x]\n        incr freq $x\n        lappend input $x\n    }\n    set
        freq\n}\n\nfreq $input\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eb0nhk6/", "subreddit_type":
        "public", "locked": false, "name": "t1_eb0nhk6", "created": 1543864376.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eb0ytjv", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "sdiepend", "can_mod_post": false, "created_utc":
        1543872165.0, "send_replies": true, "parent_id": "t3_a20646", "score": 1,
        "author_fullname": "t2_kdto1", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "Pharo 6:\n\n    ((StandardFileStream
        oldFileNamed: ''input.txt'') contents lines collect: #asInteger) sum\n", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Pharo 6:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;((StandardFileStream
        oldFileNamed: &amp;#39;input.txt&amp;#39;) contents lines collect: #asInteger)
        sum\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eb0ytjv/",
        "subreddit_type": "public", "locked": false, "name": "t1_eb0ytjv", "created":
        1543872165.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eb1v3fd",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Hashbrown777",
        "can_mod_post": false, "created_utc": 1543899692.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_78jpf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Javascript\n\n0.5ms\n\n    function day1(input) {\n    \tday1.output = 0;\n    \tfor
        (let tmp of input.split(''\\n''))\n            day1.output += parseInt(tmp);\n    }\n\nCan
        actually hack it instead, 0.3ms\n\n    day1 = (input) =&gt; (day1.output =
        eval(''0'' + input))\n\nPart 2, 117ms\n\n    function day1_1(input) {\n        day1_1.output
        = 0;\n        day1_1.map = {};\n        input = input.split(''\\n'');\n        for
        (\n            let index = 0;\n            index &lt; 1 ||\n            !day1_1.map[day1_1.output];\n            ++index\n        )
        {\n            day1_1.map[day1_1.output] = true;\n            day1_1.output
        += parseInt(input[index % input.length]);\n        }\n    }", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Javascript&lt;/p&gt;\n\n&lt;p&gt;0.5ms&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function
        day1(input) {\n    day1.output = 0;\n    for (let tmp of input.split(&amp;#39;\\n&amp;#39;))\n        day1.output
        += parseInt(tmp);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Can actually hack
        it instead, 0.3ms&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;day1 = (input) =&amp;gt;
        (day1.output = eval(&amp;#39;0&amp;#39; + input))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2, 117ms&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function day1_1(input) {\n    day1_1.output
        = 0;\n    day1_1.map = {};\n    input = input.split(&amp;#39;\\n&amp;#39;);\n    for
        (\n        let index = 0;\n        index &amp;lt; 1 ||\n        !day1_1.map[day1_1.output];\n        ++index\n    )
        {\n        day1_1.map[day1_1.output] = true;\n        day1_1.output += parseInt(input[index
        % input.length]);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eb1v3fd/", "subreddit_type":
        "public", "locked": false, "name": "t1_eb1v3fd", "created": 1543899692.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eb2ss04", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "dlamblin", "can_mod_post": false, "created_utc":
        1543942527.0, "send_replies": true, "parent_id": "t3_a20646", "score": 1,
        "author_fullname": "t2_q01d3", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "[Card]\n&gt; One does not
        simply just write code during Advent of Code.\n\n    # starts with +num\n    echo
        \"0 `pbpaste | paste -s`\" | bc\n    # or longer input that starts with -num\n    pbpaste
        | paste -s | bc\n\nalso\n\n    echo \"0\"&gt;zero &amp;&amp; pbpaste|cat zero
        -|paste -s|bc \n", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[Card]&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;One
        does not simply just write code during Advent of Code.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;pre&gt;&lt;code&gt;#
        starts with +num\necho &amp;quot;0 `pbpaste | paste -s`&amp;quot; | bc\n#
        or longer input that starts with -num\npbpaste | paste -s | bc\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;also&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;echo
        &amp;quot;0&amp;quot;&amp;gt;zero &amp;amp;&amp;amp; pbpaste|cat zero -|paste
        -s|bc \n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eb2ss04/",
        "subreddit_type": "public", "locked": false, "name": "t1_eb2ss04", "created":
        1543942527.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eb2ybtj",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "andrewsredditstuff",
        "can_mod_post": false, "created_utc": 1543946491.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_2h5225av", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "C#\n\nUses the output from part 1 to short circuit most of the work in part
        2.  Doing that cut it from 12s down to 0.02s (and completes /u/VikeStep''s
        evil example in under a second).\n\n    public override void DoWork()\n    {\n        int
        total = 0; int doubleValue = 0;\n        bool doubleFound = false;\n        List&lt;int&gt;
        totals = new List&lt;int&gt;();\n        HashSet&lt;int&gt; found = new HashSet&lt;int&gt;();\n    \n        foreach
        (string numString in InputSplit)\n        {\n            if ((doubleFound
        = found.Contains(doubleValue = total += int.Parse(numString))) &amp;&amp;
        WhichPart == 2) break;\n            totals.Add(total);\n            found.Add(total);\n        }\n    \n        if
        (WhichPart == 2)\n            do\n                for (int pos = 0; !doubleFound
        &amp;&amp; pos &lt; totals.Count; pos++)\n                    if (!(doubleFound
        = found.Contains(doubleValue = totals[pos] += total)))\n                        found.Add(totals[pos]);\n            while
        (!doubleFound);\n    \n        Output = (WhichPart == 1 ? total : doubleValue).ToString();\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C#&lt;/p&gt;\n\n&lt;p&gt;Uses
        the output from part 1 to short circuit most of the work in part 2.  Doing
        that cut it from 12s down to 0.02s (and completes &lt;a href=\"/u/VikeStep\"&gt;/u/VikeStep&lt;/a&gt;&amp;#39;s
        evil example in under a second).&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public
        override void DoWork()\n{\n    int total = 0; int doubleValue = 0;\n    bool
        doubleFound = false;\n    List&amp;lt;int&amp;gt; totals = new List&amp;lt;int&amp;gt;();\n    HashSet&amp;lt;int&amp;gt;
        found = new HashSet&amp;lt;int&amp;gt;();\n\n    foreach (string numString
        in InputSplit)\n    {\n        if ((doubleFound = found.Contains(doubleValue
        = total += int.Parse(numString))) &amp;amp;&amp;amp; WhichPart == 2) break;\n        totals.Add(total);\n        found.Add(total);\n    }\n\n    if
        (WhichPart == 2)\n        do\n            for (int pos = 0; !doubleFound &amp;amp;&amp;amp;
        pos &amp;lt; totals.Count; pos++)\n                if (!(doubleFound = found.Contains(doubleValue
        = totals[pos] += total)))\n                    found.Add(totals[pos]);\n        while
        (!doubleFound);\n\n    Output = (WhichPart == 1 ? total : doubleValue).ToString();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eb2ybtj/",
        "subreddit_type": "public", "locked": false, "name": "t1_eb2ybtj", "created":
        1543946491.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eb353sd",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "minichado",
        "can_mod_post": false, "created_utc": 1543951654.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_76b3a", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Day 1 in VBA\n\nhttps://github.com/minichado/AdventOfCode-2018/blob/master/AoC%202018%20D1.txt",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Day 1 in VBA&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/minichado/AdventOfCode-2018/blob/master/AoC%202018%20D1.txt\"&gt;https://github.com/minichado/AdventOfCode-2018/blob/master/AoC%202018%20D1.txt&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eb353sd/",
        "subreddit_type": "public", "locked": false, "name": "t1_eb353sd", "created":
        1543951654.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eb3bxwl",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Fletch_to_99",
        "can_mod_post": false, "created_utc": 1543956799.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_cen8r", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Day 1 in Brainfuck\n\n&amp;#x200B;\n\n[https://github.com/fletchto99/advent-of-code/tree/master/2018/Day%201](https://github.com/fletchto99/advent-of-code/tree/master/2018/Day%201)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Day 1 in Brainfuck&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/fletchto99/advent-of-code/tree/master/2018/Day%201\"&gt;https://github.com/fletchto99/advent-of-code/tree/master/2018/Day%201&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": true, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eb3bxwl/",
        "subreddit_type": "public", "locked": false, "name": "t1_eb3bxwl", "created":
        1543956799.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543963244.0, "mod_reason_by": null,
        "banned_by": null, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eb3kasd", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_a20646", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "A little late to the party, but I love this ones!!!\n\nSimple
        JS here\n\n    // PART 1\n    var frequncies = `+13\n    +9\n    +8\n    +1\n    -15\n    ....
        long input .....\n    -221\n    -6\n    +30\n    -51\n    +470\n    -67792\n    +3\n    +135555`.split(''\\n'').map(f
        =&gt; parseInt(f))\n    console.log(frequncies.reduce((f, f1) =&gt; f + f1))\n    //
        PART 2\n    var changes = [];\n    var j = 0;\n    while (j === 0) {\n        for
        (var i = 0; i &lt; frequncies.length; i++) {\n            var currentValue
        = changes.length &gt; 0 ? changes\\[changes.length-1\\] : 0;\n            currentValue
        += frequncies[i];\n            if (changes.indexOf(currentValue) === -1)\n                changes.push(currentValue)\n            else
        {\n                console.log(currentValue);\n                j = 1;\n                break;\n            }\n        }\n    }\n\n&amp;#x200B;",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_eb3kasd",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;A
        little late to the party, but I love this ones!!!&lt;/p&gt;\n\n&lt;p&gt;Simple
        JS here&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// PART 1\nvar frequncies = `+13\n+9\n+8\n+1\n-15\n....
        long input .....\n-221\n-6\n+30\n-51\n+470\n-67792\n+3\n+135555`.split(&amp;#39;\\n&amp;#39;).map(f
        =&amp;gt; parseInt(f))\nconsole.log(frequncies.reduce((f, f1) =&amp;gt; f
        + f1))\n// PART 2\nvar changes = [];\nvar j = 0;\nwhile (j === 0) {\n    for
        (var i = 0; i &amp;lt; frequncies.length; i++) {\n        var currentValue
        = changes.length &amp;gt; 0 ? changes\\[changes.length-1\\] : 0;\n        currentValue
        += frequncies[i];\n        if (changes.indexOf(currentValue) === -1)\n            changes.push(currentValue)\n        else
        {\n            console.log(currentValue);\n            j = 1;\n            break;\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eb3kasd/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1543962979.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543962979.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eb3q84i",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "kylelove41",
        "can_mod_post": false, "created_utc": 1543967464.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_srpoo7j", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Haven''t had to do much serious programming for 5 years or so. Doing stuff
        in access for work so I figured I''d do it with an Excel VBA Macro so anyone
        with Office could plug it in and give it a shot. Didn''t spend a lot if time
        to make it elegant but it works thought it might be fun for some beginners
        who don''t have compiler, put some stuff to show in the immediate window to
        make it a little more fun to execute.\n\nPaste special as text in column A.
        Did part one with the spreadsheet. Part 2: \n\n    Sub GetRepeater()\n    \n    Application.Calculation
        = xlCalculationManual\n    Application.ScreenUpdating = False\n    Application.DisplayStatusBar
        = False\n    Application.EnableEvents = False\n    ActiveSheet.DisplayPageBreaks
        = False\n    \n    Dim i As Long\n    Dim k As Long\n    \n    Dim currentfreq
        As Long\n    Dim gotit As Boolean\n    Dim list As Variant\n    Dim dict As
        New Scripting.Dictionary\n    \n    list = Range(\"a1:a958\").Value\n    \n    dict.Add
        \"Holder\", 1\n    currentfreq = 0\n    While gotit &lt;&gt; True\n    \n    For
        i = 1 To 958\n    currentfreq = currentfreq + list(i, 1)\n    \n    \n    If
        dict.Exists(currentfreq) Then\n    gotit = True\n    GoTo nextpart\n    End
        If\n    \n    dict.Add currentfreq, 1\n    \n    Next i\n    nextpart:\n    k
        = k + 1\n    Debug.Print k\n    DoEvents\n    \n    Wend\n    MsgBox \"the
        answer is \" &amp; currentfreq\n    \n    Application.Calculation = xlCalculationAutomatic\n    Application.ScreenUpdating
        = True\n    Application.DisplayStatusBar = True\n    Application.EnableEvents
        = True\n    ActiveSheet.DisplayPageBreaks = True\n    \n    End Sub\n\n&amp;#x200B;",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Haven&amp;#39;t had
        to do much serious programming for 5 years or so. Doing stuff in access for
        work so I figured I&amp;#39;d do it with an Excel VBA Macro so anyone with
        Office could plug it in and give it a shot. Didn&amp;#39;t spend a lot if
        time to make it elegant but it works thought it might be fun for some beginners
        who don&amp;#39;t have compiler, put some stuff to show in the immediate window
        to make it a little more fun to execute.&lt;/p&gt;\n\n&lt;p&gt;Paste special
        as text in column A. Did part one with the spreadsheet. Part 2: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Sub
        GetRepeater()\n\nApplication.Calculation = xlCalculationManual\nApplication.ScreenUpdating
        = False\nApplication.DisplayStatusBar = False\nApplication.EnableEvents =
        False\nActiveSheet.DisplayPageBreaks = False\n\nDim i As Long\nDim k As Long\n\nDim
        currentfreq As Long\nDim gotit As Boolean\nDim list As Variant\nDim dict As
        New Scripting.Dictionary\n\nlist = Range(&amp;quot;a1:a958&amp;quot;).Value\n\ndict.Add
        &amp;quot;Holder&amp;quot;, 1\ncurrentfreq = 0\nWhile gotit &amp;lt;&amp;gt;
        True\n\nFor i = 1 To 958\ncurrentfreq = currentfreq + list(i, 1)\n\n\nIf dict.Exists(currentfreq)
        Then\ngotit = True\nGoTo nextpart\nEnd If\n\ndict.Add currentfreq, 1\n\nNext
        i\nnextpart:\nk = k + 1\nDebug.Print k\nDoEvents\n\nWend\nMsgBox &amp;quot;the
        answer is &amp;quot; &amp;amp; currentfreq\n\nApplication.Calculation = xlCalculationAutomatic\nApplication.ScreenUpdating
        = True\nApplication.DisplayStatusBar = True\nApplication.EnableEvents = True\nActiveSheet.DisplayPageBreaks
        = True\n\nEnd Sub\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eb3q84i/",
        "subreddit_type": "public", "locked": false, "name": "t1_eb3q84i", "created":
        1543967464.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eb5theq",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "pindab0ter",
        "can_mod_post": false, "created_utc": 1544039535.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_48pol", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "A bit late to the party, but here''s my solution in **Kotlin:**\n\n    val
        input: List&lt;Int&gt; = ClassLoader\n        .getSystemResource(\"input\")\n        .readText(Charsets.UTF_8)\n        .lines()\n        .map(String::toInt)\n    \n    fun
        main(args: Array&lt;String&gt;) {\n        println(\"Part one: ${findFinalFrequency(input)}\")\n        println(\"Part
        two: ${findFirstRepeatedFrequency(input)}\")\n    }\n    \n    fun findFinalFrequency(input:
        List&lt;Int&gt;): Int = input.sum()\n    \n    fun findFirstRepeatedFrequency(input:
        List&lt;Int&gt;): Int {\n        var previousFrequency = 0\n        val seen
        = mutableSetOf(previousFrequency)\n        while (true) {\n            for
        (i in 0 until input.size) {\n                val newFrequency = input[i] +
        previousFrequency\n                if (seen.contains(newFrequency)) return
        newFrequency\n                else {\n                    seen.add(newFrequency)\n                    previousFrequency
        = newFrequency\n                }\n            }\n        }\n    }\n\nFeedback
        and suggestions for part two are welcome.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;A bit late to the party, but here&amp;#39;s my solution
        in &lt;strong&gt;Kotlin:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;val
        input: List&amp;lt;Int&amp;gt; = ClassLoader\n    .getSystemResource(&amp;quot;input&amp;quot;)\n    .readText(Charsets.UTF_8)\n    .lines()\n    .map(String::toInt)\n\nfun
        main(args: Array&amp;lt;String&amp;gt;) {\n    println(&amp;quot;Part one:
        ${findFinalFrequency(input)}&amp;quot;)\n    println(&amp;quot;Part two: ${findFirstRepeatedFrequency(input)}&amp;quot;)\n}\n\nfun
        findFinalFrequency(input: List&amp;lt;Int&amp;gt;): Int = input.sum()\n\nfun
        findFirstRepeatedFrequency(input: List&amp;lt;Int&amp;gt;): Int {\n    var
        previousFrequency = 0\n    val seen = mutableSetOf(previousFrequency)\n    while
        (true) {\n        for (i in 0 until input.size) {\n            val newFrequency
        = input[i] + previousFrequency\n            if (seen.contains(newFrequency))
        return newFrequency\n            else {\n                seen.add(newFrequency)\n                previousFrequency
        = newFrequency\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Feedback
        and suggestions for part two are welcome.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eb5theq/", "subreddit_type":
        "public", "locked": false, "name": "t1_eb5theq", "created": 1544039535.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eb724w7", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Kevinrocks7777", "can_mod_post": false,
        "created_utc": 1544074297.0, "send_replies": true, "parent_id": "t3_a20646",
        "score": 1, "author_fullname": "t2_e7lc5", "report_reasons": null, "approved_by":
        null, "all_awardings": [], "collapsed": false, "body": "Can i still ask questions
        in this thread? I''m trying to do this in c (visual studio 2017)  because
        that''s what I''m learning to use. C doesn''t have vectors so I''m trying
        to put my sum in a giant array but I get a stack overflow (?) which I think
        means I''m out allocated memory. Here''s my code: https://hastebin.com/okecafudej.cpp",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Can i still ask questions
        in this thread? I&amp;#39;m trying to do this in c (visual studio 2017)  because
        that&amp;#39;s what I&amp;#39;m learning to use. C doesn&amp;#39;t have vectors
        so I&amp;#39;m trying to put my sum in a giant array but I get a stack overflow
        (?) which I think means I&amp;#39;m out allocated memory. Here&amp;#39;s my
        code: &lt;a href=\"https://hastebin.com/okecafudej.cpp\"&gt;https://hastebin.com/okecafudej.cpp&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eb724w7/",
        "subreddit_type": "public", "locked": false, "name": "t1_eb724w7", "created":
        1544074297.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eb73n1k",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Kevinrocks7777",
        "can_mod_post": false, "created_utc": 1544076119.0, "send_replies": true,
        "parent_id": "t1_eb724w7", "score": 1, "author_fullname": "t2_e7lc5", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I noticed that the sums never converge so I figured it would do a big loop
        so I just compared the sum to the first 1000 sums instead all of the sums
        that ever existed. Got around the problem. ", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;I noticed that the sums never converge so I figured
        it would do a big loop so I just compared the sum to the first 1000 sums instead
        all of the sums that ever existed. Got around the problem. &lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eb73n1k/",
        "subreddit_type": "public", "locked": false, "name": "t1_eb73n1k", "created":
        1544076119.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eb7prl5",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "LongStrongAndWrong",
        "can_mod_post": false, "created_utc": 1544106684.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_mzwbf", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "\\[CARD\\] One does not simply ignore ones spouse during Advent of Code.  \n\n\nHere''s
        my solution in C++. There''s nothing really special about it. I just like
        the party game. This is the somewhat prettied-up version of my original rushed
        spaghetti code.  \n\n\n    #include \"advent.h\"\n    \n    static void part1();\n    static
        void part2();\n    static bool isInVector(IntVector vec, int val);\n    static
        IntVector freqChange;\n    \n    void\n    Day01()\n    {\n    \tpart1();\n    \tpart2();\n    }\n    \n    static
        void\n    part1() {\n    \n    \tint freq = 0;\n    \tFILE *fp = fopen(\"input01.txt\",
        \"rb\");\n    \twhile (1) {\n    \t\tint change;\n    \n    \t\tfscanf(fp,
        \"%d\", &amp;change);\n    \t\tif (feof(fp)) break;\n    \n    \t\tfreq +=
        change;\n    \t\tfreqChange.push_back(change);\n    \t}\n    \n    \tfclose(fp);\n    \n    \tprintf
        (\"Frequency: %d\\n\", freq);\n    \tfflush(stdout);\n    }\n    \n    \n    void\n    part2()\n    {\n    \tint
        changeListSize = freqChange.size();\n    \tint i = 0, freq = 0;\n    \tIntVector
        freqVector;\n    \n    \twhile(1) {\n    \n    \t\tfreq += freqChange[i %
        changeListSize];\n    \t\tif (isInVector(freqVector, freq)) {\n    \t\t\tprintf
        (\"Repeated Frequency: %d\\n\", freq);\n    \t\t\tfflush(stdout);\n    \t\t\tbreak;\n    \t\t}\n    \t\telse
        {\n    \t\t\tfreqVector.push_back(freq);\n    \t\t}\n    \n    \t\t++i;\n    \t}\n    }\n    \n    static
        bool\n    isInVector(IntVector vec, int val) {\n    \tif(std::find(vec.begin(),
        vec.end(), val) == vec.end()) {\n    \t\treturn false;\n    \t}\n    \n    \treturn
        true;\n    }\n\n\n&amp;#x200B;", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;[CARD] One does not simply ignore ones spouse during
        Advent of Code.  &lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s my solution in C++.
        There&amp;#39;s nothing really special about it. I just like the party game.
        This is the somewhat prettied-up version of my original rushed spaghetti code.  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include
        &amp;quot;advent.h&amp;quot;\n\nstatic void part1();\nstatic void part2();\nstatic
        bool isInVector(IntVector vec, int val);\nstatic IntVector freqChange;\n\nvoid\nDay01()\n{\n    part1();\n    part2();\n}\n\nstatic
        void\npart1() {\n\n    int freq = 0;\n    FILE *fp = fopen(&amp;quot;input01.txt&amp;quot;,
        &amp;quot;rb&amp;quot;);\n    while (1) {\n        int change;\n\n        fscanf(fp,
        &amp;quot;%d&amp;quot;, &amp;amp;change);\n        if (feof(fp)) break;\n\n        freq
        += change;\n        freqChange.push_back(change);\n    }\n\n    fclose(fp);\n\n    printf
        (&amp;quot;Frequency: %d\\n&amp;quot;, freq);\n    fflush(stdout);\n}\n\n\nvoid\npart2()\n{\n    int
        changeListSize = freqChange.size();\n    int i = 0, freq = 0;\n    IntVector
        freqVector;\n\n    while(1) {\n\n        freq += freqChange[i % changeListSize];\n        if
        (isInVector(freqVector, freq)) {\n            printf (&amp;quot;Repeated Frequency:
        %d\\n&amp;quot;, freq);\n            fflush(stdout);\n            break;\n        }\n        else
        {\n            freqVector.push_back(freq);\n        }\n\n        ++i;\n    }\n}\n\nstatic
        bool\nisInVector(IntVector vec, int val) {\n    if(std::find(vec.begin(),
        vec.end(), val) == vec.end()) {\n        return false;\n    }\n\n    return
        true;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eb7prl5/",
        "subreddit_type": "public", "locked": false, "name": "t1_eb7prl5", "created":
        1544106684.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eb82izv",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "karthickg",
        "can_mod_post": false, "created_utc": 1544115698.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_1fif87p9", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My approach was also not brute-force and a bit different from VikeStep.\n\nLet
        the frequency shifts (puzzle input) be `F1, F2, ... Fn`. Let the total sum
        be: `S = F1 + F2 + .. + Fn`\n\nThe frequency that gets computed after every
        shift will then be: `F1, F1 + F2, ..., S, S + F1, S + F1 + F2, ..., 2*S, 2*S
        + F1, ...`\n\nAny term in this sequence is just `k*S + F1 + F2 + .. Fi` where
        integers `k` and `i` satisfy `0 &lt;= k` and `0 &lt;= i &lt;= n`. If `i =
        0`, no further terms are added to `k*S`. Both `i = 0` and `k = 0` represents
        the starting frequency of 0.\n\nSo, any frequency that repeats will satisfy
        the equality:\n\n   `k1*S + F1 + F2 + .. Fi = k2*S + F1 + F2 + .. Fj`\n\nWith
        no loss of generality, we can assume `k1 &gt; k2`. So we get:\n\n   `k*S +
        F1 + F2 + .. Fi = F1 + F2 + .. Fj` (`k = k1 - k2`)\n\nAn insight there - the
        frequency that will eventually repeat must occur within the first iteration
        itself.\n\n   `k*S = Fi+1 + Fi+2 + .. + Fj` (if `i &lt; j`), or `k*S = Fj+1
        + Fj+2 + .. + Fi` (if `i &gt; j`)\n\nFor the *first* repeating frequency,
        `k` must be minimal, and for a given `k`, `i` must be minimal.\n\nSo that
        is what I did - look at sub-sequence sums and determine which is the least
        multiple of `S`", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My
        approach was also not brute-force and a bit different from VikeStep.&lt;/p&gt;\n\n&lt;p&gt;Let
        the frequency shifts (puzzle input) be &lt;code&gt;F1, F2, ... Fn&lt;/code&gt;.
        Let the total sum be: &lt;code&gt;S = F1 + F2 + .. + Fn&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;The
        frequency that gets computed after every shift will then be: &lt;code&gt;F1,
        F1 + F2, ..., S, S + F1, S + F1 + F2, ..., 2*S, 2*S + F1, ...&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Any
        term in this sequence is just &lt;code&gt;k*S + F1 + F2 + .. Fi&lt;/code&gt;
        where integers &lt;code&gt;k&lt;/code&gt; and &lt;code&gt;i&lt;/code&gt; satisfy
        &lt;code&gt;0 &amp;lt;= k&lt;/code&gt; and &lt;code&gt;0 &amp;lt;= i &amp;lt;=
        n&lt;/code&gt;. If &lt;code&gt;i = 0&lt;/code&gt;, no further terms are added
        to &lt;code&gt;k*S&lt;/code&gt;. Both &lt;code&gt;i = 0&lt;/code&gt; and &lt;code&gt;k
        = 0&lt;/code&gt; represents the starting frequency of 0.&lt;/p&gt;\n\n&lt;p&gt;So,
        any frequency that repeats will satisfy the equality:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;k1*S
        + F1 + F2 + .. Fi = k2*S + F1 + F2 + .. Fj&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;With
        no loss of generality, we can assume &lt;code&gt;k1 &amp;gt; k2&lt;/code&gt;.
        So we get:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;k*S + F1 + F2 + .. Fi = F1 +
        F2 + .. Fj&lt;/code&gt; (&lt;code&gt;k = k1 - k2&lt;/code&gt;)&lt;/p&gt;\n\n&lt;p&gt;An
        insight there - the frequency that will eventually repeat must occur within
        the first iteration itself.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;k*S = Fi+1 +
        Fi+2 + .. + Fj&lt;/code&gt; (if &lt;code&gt;i &amp;lt; j&lt;/code&gt;), or
        &lt;code&gt;k*S = Fj+1 + Fj+2 + .. + Fi&lt;/code&gt; (if &lt;code&gt;i &amp;gt;
        j&lt;/code&gt;)&lt;/p&gt;\n\n&lt;p&gt;For the &lt;em&gt;first&lt;/em&gt; repeating
        frequency, &lt;code&gt;k&lt;/code&gt; must be minimal, and for a given &lt;code&gt;k&lt;/code&gt;,
        &lt;code&gt;i&lt;/code&gt; must be minimal.&lt;/p&gt;\n\n&lt;p&gt;So that
        is what I did - look at sub-sequence sums and determine which is the least
        multiple of &lt;code&gt;S&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eb82izv/", "subreddit_type":
        "public", "locked": false, "name": "t1_eb82izv", "created": 1544115698.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "eb84elp", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "MattSteelblade", "can_mod_post": false,
        "created_utc": 1544116949.0, "send_replies": true, "parent_id": "t3_a20646",
        "score": 1, "author_fullname": "t2_4wtik", "report_reasons": null, "approved_by":
        null, "all_awardings": [], "collapsed": false, "body": "First time. **PowerShell**\n\n**Part
        1**  \n\n    [int]$Frequency = 0\n    foreach ($Line in (Get-Content .\\day1.input))
        {\n        if ($Line[0] -eq \"+\") {\n            $Frequency = $Frequency
        + [int]$Line.trim(\"+\")\n        }\n        else {\n            $Frequency
        = $Frequency + [int]$Line\n        }\n    }\n    $Frequency\n\n**Part 2**
        \n\n    [int]$Frequency = 0\n    $ListOfFrequencies = New-Object ''System.Collections.Generic.HashSet[int]''\n    $ListOfFrequencies.Add(0)
        | Out-Null\n    while ($true) {\n        foreach ($Line in (Get-Content .\\day1.input))
        {\n            if ($Line[0] -eq \"+\") {\n                $Frequency = $Frequency
        + [int]$Line.trim(\"+\")\n            }\n            else {\n                $Frequency
        = $Frequency + [int]$Line\n            }\n            if (-not ($ListOfFrequencies.Add($Frequency)))
        {\n                Write-Output $Frequency\n                exit\n            }\n        }\n    }\n\n&amp;#x200B;",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;First time. &lt;strong&gt;PowerShell&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Part
        1&lt;/strong&gt;  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[int]$Frequency = 0\nforeach
        ($Line in (Get-Content .\\day1.input)) {\n    if ($Line[0] -eq &amp;quot;+&amp;quot;)
        {\n        $Frequency = $Frequency + [int]$Line.trim(&amp;quot;+&amp;quot;)\n    }\n    else
        {\n        $Frequency = $Frequency + [int]$Line\n    }\n}\n$Frequency\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Part
        2&lt;/strong&gt; &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[int]$Frequency = 0\n$ListOfFrequencies
        = New-Object &amp;#39;System.Collections.Generic.HashSet[int]&amp;#39;\n$ListOfFrequencies.Add(0)
        | Out-Null\nwhile ($true) {\n    foreach ($Line in (Get-Content .\\day1.input))
        {\n        if ($Line[0] -eq &amp;quot;+&amp;quot;) {\n            $Frequency
        = $Frequency + [int]$Line.trim(&amp;quot;+&amp;quot;)\n        }\n        else
        {\n            $Frequency = $Frequency + [int]$Line\n        }\n        if
        (-not ($ListOfFrequencies.Add($Frequency))) {\n            Write-Output $Frequency\n            exit\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eb84elp/",
        "subreddit_type": "public", "locked": false, "name": "t1_eb84elp", "created":
        1544116949.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eb8ltj1",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "I_Am_Hollow",
        "can_mod_post": false, "created_utc": 1544128567.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_11zay9", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "https://github.com/kevinniland97/Advent-of-Code-2018/blob/master/Day1.java\n\nThis
        worked for me (Pretty long winded though, imo)", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/kevinniland97/Advent-of-Code-2018/blob/master/Day1.java\"&gt;https://github.com/kevinniland97/Advent-of-Code-2018/blob/master/Day1.java&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This
        worked for me (Pretty long winded though, imo)&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eb8ltj1/", "subreddit_type":
        "public", "locked": false, "name": "t1_eb8ltj1", "created": 1544128567.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"author_cakeday": true,
        "subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eb9y4sj",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "AllanTaylor314",
        "can_mod_post": false, "created_utc": 1544168570.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_u59prxs", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My solution for part 1\n\nopen input in browser\n\nctrl+a\n\nctrl+c\n\nctrl+shift+j\n\nctrl+v\n\nenter\n\n&amp;#x200B;\n\nbasically
        eval()ed in the javascript console", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;My solution for part 1&lt;/p&gt;\n\n&lt;p&gt;open
        input in browser&lt;/p&gt;\n\n&lt;p&gt;ctrl+a&lt;/p&gt;\n\n&lt;p&gt;ctrl+c&lt;/p&gt;\n\n&lt;p&gt;ctrl+shift+j&lt;/p&gt;\n\n&lt;p&gt;ctrl+v&lt;/p&gt;\n\n&lt;p&gt;enter&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;basically
        eval()ed in the javascript console&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eb9y4sj/", "subreddit_type":
        "public", "locked": false, "name": "t1_eb9y4sj", "created": 1544168570.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_a20646", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "ebad6id", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "toomasv", "can_mod_post": false, "created_utc":
        1544190732.0, "send_replies": true, "parent_id": "t3_a20646", "score": 1,
        "author_fullname": "t2_11sy0059", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "**Red**\n\nPart 1\n\n    Red
        [Day: 1 Part: 1]\n    sum load %day1.input\n\nPart 2\n\n    Red [Day: 1 Part:
        2]\n    input: load %day1.input \n    nums: make hash! [0] \n    sum: 0 \n    until
        [\n        res: no \n        input: head input \n        forall input [\n            either
        found: find nums sum: sum + input/1 [\n                res: found/1 break\n            ][\n                append
        nums sum\n            ]\n        ] \n        res\n    ]\n", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Red&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Part
        1&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Red [Day: 1 Part: 1]\nsum load %day1.input\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Red [Day: 1 Part: 2]\ninput: load %day1.input
        \nnums: make hash! [0] \nsum: 0 \nuntil [\n    res: no \n    input: head input
        \n    forall input [\n        either found: find nums sum: sum + input/1 [\n            res:
        found/1 break\n        ][\n            append nums sum\n        ]\n    ] \n    res\n]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/ebad6id/",
        "subreddit_type": "public", "locked": false, "name": "t1_ebad6id", "created":
        1544190732.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ebbq2nh",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "shvetsovdm",
        "can_mod_post": false, "created_utc": 1544228356.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_fomctse", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Day 1 Part 2** solution in **Ruby**\n\n```ruby\ndef day1part2(input)\n  seen
        = Set.new([0])\n\n  sum = 0\n  input.cycle.each do |n|\n    sum += n\n    return
        sum if seen.include?(sum)\n    seen.add(sum)\n  end\n  # Benchmark:   user
        3.923110   system 0.096206   user and system 4.019316 (elapsed  4.040252)
        time\nend\n```\n", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Day
        1 Part 2&lt;/strong&gt; solution in &lt;strong&gt;Ruby&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;```ruby\ndef
        day1part2(input)\n  seen = Set.new([0])&lt;/p&gt;\n\n&lt;p&gt;sum = 0\n  input.cycle.each
        do |n|\n    sum += n\n    return sum if seen.include?(sum)\n    seen.add(sum)\n  end\n  #
        Benchmark:   user 3.923110   system 0.096206   user and system 4.019316 (elapsed  4.040252)
        time\nend\n```&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/ebbq2nh/",
        "subreddit_type": "public", "locked": false, "name": "t1_ebbq2nh", "created":
        1544228356.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ebddk53",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "blackzver",
        "can_mod_post": false, "created_utc": 1544293893.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_hmliz", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Scala with** [**Cats**](https://typelevel.org/cats/)**, Cats effect and**
        [**fs2**](https://fs2.io)**.**\n\n    package aoc.day01\n    \n    import
        java.nio.file.{Path, Paths}\n    import java.util.concurrent.Executors\n    \n    import
        cats.data._\n    import cats.effect._\n    import fs2.{Stream, io, text}\n    \n    import
        scala.concurrent.{ExecutionContext, ExecutionContextExecutorService}\n    \n    object
        Main extends IOApp {\n      val blockingExecutionContext: Resource[IO, ExecutionContextExecutorService]
        = Resource.make(IO(ExecutionContext\n        .fromExecutorService(Executors.newFixedThreadPool(2))))(ec
        =&gt; IO(ec.shutdown()))\n    \n      def pathFromArgs(args: Seq[String]):
        IO[Path] =\n        OptionT(IO(args.headOption.map(Paths.get(_))))\n          .getOrElseF(IO.raiseError(new
        Exception(\"Missing input path!\")))\n    \n      def linesToNumbers(path:
        Path): Stream[IO, Int] =\n        Stream.resource(blockingExecutionContext).flatMap
        { ec =&gt;\n          io.file.readAll[IO](path, ec, 4000)\n            .through(text.utf8Decode)\n            .through(text.lines)\n            .filter(!_.isEmpty)\n            .map(s
        =&gt; Integer.parseInt(s))\n        }\n    \n      override def run(args:
        List[String]): IO[ExitCode] = for {\n        n &lt;- pathFromArgs(args).flatMap(p
        =&gt; linesToNumbers(p).compile.fold(0)(_ + _))\n        _ &lt;- IO(println(n))\n      }
        yield ExitCode.Success\n    }\n    \n\nI was aiming for a nice modern FP solution.
        Comments are welcome;... Cheers! \ud83d\udc4b", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Scala with&lt;/strong&gt; &lt;a href=\"https://typelevel.org/cats/\"&gt;&lt;strong&gt;Cats&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;,
        Cats effect and&lt;/strong&gt; &lt;a href=\"https://fs2.io\"&gt;&lt;strong&gt;fs2&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package
        aoc.day01\n\nimport java.nio.file.{Path, Paths}\nimport java.util.concurrent.Executors\n\nimport
        cats.data._\nimport cats.effect._\nimport fs2.{Stream, io, text}\n\nimport
        scala.concurrent.{ExecutionContext, ExecutionContextExecutorService}\n\nobject
        Main extends IOApp {\n  val blockingExecutionContext: Resource[IO, ExecutionContextExecutorService]
        = Resource.make(IO(ExecutionContext\n    .fromExecutorService(Executors.newFixedThreadPool(2))))(ec
        =&amp;gt; IO(ec.shutdown()))\n\n  def pathFromArgs(args: Seq[String]): IO[Path]
        =\n    OptionT(IO(args.headOption.map(Paths.get(_))))\n      .getOrElseF(IO.raiseError(new
        Exception(&amp;quot;Missing input path!&amp;quot;)))\n\n  def linesToNumbers(path:
        Path): Stream[IO, Int] =\n    Stream.resource(blockingExecutionContext).flatMap
        { ec =&amp;gt;\n      io.file.readAll[IO](path, ec, 4000)\n        .through(text.utf8Decode)\n        .through(text.lines)\n        .filter(!_.isEmpty)\n        .map(s
        =&amp;gt; Integer.parseInt(s))\n    }\n\n  override def run(args: List[String]):
        IO[ExitCode] = for {\n    n &amp;lt;- pathFromArgs(args).flatMap(p =&amp;gt;
        linesToNumbers(p).compile.fold(0)(_ + _))\n    _ &amp;lt;- IO(println(n))\n  }
        yield ExitCode.Success\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I was aiming
        for a nice modern FP solution. Comments are welcome;... Cheers! \ud83d\udc4b&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/ebddk53/",
        "subreddit_type": "public", "locked": false, "name": "t1_ebddk53", "created":
        1544293893.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "ebo5h84", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_a20646", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "**Common lisp**:\n\n    (defun make-circular (list)\n      (setf
        (cdr (last list)) list))\n    \n    (defun freq-repetition (freqs)\n      (loop
        with freqs = (make-circular freqs)\n            with seen = (make-hash-table)\n              initially
        (setf (gethash 0 seen) t)\n            for x in freqs\n            sum x into
        freq\n            if (gethash freq seen)\n              return freq\n            else
        do\n              (setf (gethash freq seen) t)))\n    \n    (defun main ()\n      (let
        ((freqs (with-open-file (in \"01.input\")\n                     (loop for
        x = (read in nil) while x collect x))))\n        (format t \"Result 1a: ~d~%\"
        (reduce #''+ freqs))\n        (format t \"Result 1b: ~d~%\" (freq-repetition
        freqs))))\n    \n    ;; CL-USER&gt; (time (main))\n    ;; Result 1a: 508\n    ;;
        Result 1b: 549\n    ;; Evaluation took:\n    ;;   0.078 seconds of real time\n    ;;   0.075828
        seconds of total run time (0.075538 user, 0.000290 system)\n    ;;   97.44%
        CPU\n    ;;   167,173,370 processor cycles\n    ;;   20,950,480 bytes consed\n    ",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_ebo5h84",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Common
        lisp&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(defun make-circular
        (list)\n  (setf (cdr (last list)) list))\n\n(defun freq-repetition (freqs)\n  (loop
        with freqs = (make-circular freqs)\n        with seen = (make-hash-table)\n          initially
        (setf (gethash 0 seen) t)\n        for x in freqs\n        sum x into freq\n        if
        (gethash freq seen)\n          return freq\n        else do\n          (setf
        (gethash freq seen) t)))\n\n(defun main ()\n  (let ((freqs (with-open-file
        (in &amp;quot;01.input&amp;quot;)\n                 (loop for x = (read in
        nil) while x collect x))))\n    (format t &amp;quot;Result 1a: ~d~%&amp;quot;
        (reduce #&amp;#39;+ freqs))\n    (format t &amp;quot;Result 1b: ~d~%&amp;quot;
        (freq-repetition freqs))))\n\n;; CL-USER&amp;gt; (time (main))\n;; Result
        1a: 508\n;; Result 1b: 549\n;; Evaluation took:\n;;   0.078 seconds of real
        time\n;;   0.075828 seconds of total run time (0.075538 user, 0.000290 system)\n;;   97.44%
        CPU\n;;   167,173,370 processor cycles\n;;   20,950,480 bytes consed\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/ebo5h84/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1544664554.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1544664554.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eboyobz",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "machalvan",
        "can_mod_post": false, "created_utc": 1544702993.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_2lp6jtca", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "This is my solution to part 1 and 2 in the programming language [VAR](https://github.com/machalvan/VAR):   \n[Gist](https://gist.github.com/machalvan/885556a17aefa97589a036496fc5c297)\n\nIt
        can also be found, and run here:\n\n[Try it online](https://tio.run/##lVdLb@M2EL7rVxA5JVgnltNF0e4tCLZFDn0gu20PQSDQ0sgmViJVkXLi/fPpzJCSKMV2UiNBInHm4zy@eXgn25eX5VJ8MVXnlNFWOCNuih1oJ0wpbk0B4jpd/bQQhdyL1UI0snViJaQuxLVIUHPrXGM/LZeSlUyZo8pVbuolqS1Ra7lCMZL8p1XOgRZKi79v7ifKG@W23ZrVaplvZbWTeolCQfMvXZrWdVo6qPZCih20e1HJdgMI1nROnEsrNgoNEOu9uDG3FwKec4AC3dmC@DEVFnKDJjtVg6hUrRxZ8fXuj6sk2cnWo2Q7WXVgRSpmH7TgTiunZKW@g0B5JdcVWNbMTacdtCJNEgQJ5hz7INCv4IJQpTQk5N0d6qNnwqBbbK8/xxDTKf1LL4NxaLZEVYvnlo@NRct2wBnRsJH8oNCmDbT2KnnaVm8bdWNFZfQGIYOsskIbJ6Bu3H4hgD1cVyb/lgjh41XAM/rsnzBhIYQPfPA4Rf@CLrMIUmsN7EypWutfypywlfb6AbCpOivOPpwl0XNG0lmhytIfxxd0a0dA/payNTWLLFC7gHyuzUKRtioFvYcWdA7kebogG3Vwy2K8@UKrNjqJPM7g305WNuPD1SyetqvJU@kOoXCu8L1m/mLWnp2wDhoyRenctC3kLr4JczG5LSU7kNBz116xtpxLhMSm86QecSuNwG7JkSfpASJvFlhc7rUqJrvEB5iCzz1Z4TEg0fEPeh54dZSnv2GJEDBHjPCOEZDwiPmTXB/H/cW0ArDviBZqqbTCUmBNjLDbYsi4VHs/@IasVhoDazT4Zz4lss1PD953x25eImsoH9inoKDak/j/U4iB0lwoAzeS4X7d1WtoH2YXPUa@UrKMzrGnUMf0nvHpeegLFxREGZCGhpaId3/wht@98pOqKnEO1Psxq9X@gnjpZF/QHDoUclsT@hilfclm@4oiuLdSf5IAxygQEcv1rh7D/dqCHIQoE7pvoUPDGwbEWH2vOD@vvsi5Ud3fEsyLgOalMQJ97svIE@wI1GtL7UOYTo8TLd@iiiJkyL/EoNJU6QsxKPLT6akWZtpAVq4VtmfHzRhdwsa6z75Da4IBq5Q@B7KApNwZNZljRArvzGIEw76EhVPLpsHCQcs94P/gb38hFXcNktYe6tXjBZer6Q0/04f7tjXYFma@8TxOD7x8OOT/o58WRGfZTJw6ly64zB5xmboWI7aGXHYW48GjucTkhPjSOpatshZsV7nXm8vRJcYanE@1afu9Ymp77wtN6UzxeoK7YUYLSjZZlVYsV3RNpajdZKO7xGa2E2VoT/ni0FJqrNQLeP5QV5IFtT4GIyEe3eMGxGGlta5vjQP81Ym9ibVaaLCioaj2JIlcVhVijA72URTuSeXg16STbvSTpl/33qLWPfBUHMpo3kQOlmk/tqbVeuKWz2xMZUzYHea729CAIs@PYoeuwJXsOyHN8EERHzZDoUe5GCfTGDZP4lH3YLuIbSJxXN2RD8SRqJ4nxs9xo6LyVlAzPVqB0W7K6wzk3yhqoxlb7PxrwM3PU2MN@K2jn4o0vs7ufZnh6/A96JM4m1ABcf9sad74grRB2bpZpUag0/enbrvm2yLIMQWj1iwtr2fCYeoSl2wuGyKmDpSKAE5XeDoBQCtigDCa5gw5nJvVob4YmuAi7oLTVCUDVcaCe2fJjZTk6RWHNFjOnHqzEx7IfsQTHBn0xbWkyPjvPgPWYOq0lU9z@75unAaj8ffl5cMPCf18TC6vk8uPSfIf)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is my solution
        to part 1 and 2 in the programming language &lt;a href=\"https://github.com/machalvan/VAR\"&gt;VAR&lt;/a&gt;:&lt;br/&gt;\n&lt;a
        href=\"https://gist.github.com/machalvan/885556a17aefa97589a036496fc5c297\"&gt;Gist&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It
        can also be found, and run here:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://tio.run/##lVdLb@M2EL7rVxA5JVgnltNF0e4tCLZFDn0gu20PQSDQ0sgmViJVkXLi/fPpzJCSKMV2UiNBInHm4zy@eXgn25eX5VJ8MVXnlNFWOCNuih1oJ0wpbk0B4jpd/bQQhdyL1UI0snViJaQuxLVIUHPrXGM/LZeSlUyZo8pVbuolqS1Ra7lCMZL8p1XOgRZKi79v7ifKG@W23ZrVaplvZbWTeolCQfMvXZrWdVo6qPZCih20e1HJdgMI1nROnEsrNgoNEOu9uDG3FwKec4AC3dmC@DEVFnKDJjtVg6hUrRxZ8fXuj6sk2cnWo2Q7WXVgRSpmH7TgTiunZKW@g0B5JdcVWNbMTacdtCJNEgQJ5hz7INCv4IJQpTQk5N0d6qNnwqBbbK8/xxDTKf1LL4NxaLZEVYvnlo@NRct2wBnRsJH8oNCmDbT2KnnaVm8bdWNFZfQGIYOsskIbJ6Bu3H4hgD1cVyb/lgjh41XAM/rsnzBhIYQPfPA4Rf@CLrMIUmsN7EypWutfypywlfb6AbCpOivOPpwl0XNG0lmhytIfxxd0a0dA/payNTWLLFC7gHyuzUKRtioFvYcWdA7kebogG3Vwy2K8@UKrNjqJPM7g305WNuPD1SyetqvJU@kOoXCu8L1m/mLWnp2wDhoyRenctC3kLr4JczG5LSU7kNBz116xtpxLhMSm86QecSuNwG7JkSfpASJvFlhc7rUqJrvEB5iCzz1Z4TEg0fEPeh54dZSnv2GJEDBHjPCOEZDwiPmTXB/H/cW0ArDviBZqqbTCUmBNjLDbYsi4VHs/@IasVhoDazT4Zz4lss1PD953x25eImsoH9inoKDak/j/U4iB0lwoAzeS4X7d1WtoH2YXPUa@UrKMzrGnUMf0nvHpeegLFxREGZCGhpaId3/wht@98pOqKnEO1Psxq9X@gnjpZF/QHDoUclsT@hilfclm@4oiuLdSf5IAxygQEcv1rh7D/dqCHIQoE7pvoUPDGwbEWH2vOD@vvsi5Ud3fEsyLgOalMQJ97svIE@wI1GtL7UOYTo8TLd@iiiJkyL/EoNJU6QsxKPLT6akWZtpAVq4VtmfHzRhdwsa6z75Da4IBq5Q@B7KApNwZNZljRArvzGIEw76EhVPLpsHCQcs94P/gb38hFXcNktYe6tXjBZer6Q0/04f7tjXYFma@8TxOD7x8OOT/o58WRGfZTJw6ly64zB5xmboWI7aGXHYW48GjucTkhPjSOpatshZsV7nXm8vRJcYanE@1afu9Ymp77wtN6UzxeoK7YUYLSjZZlVYsV3RNpajdZKO7xGa2E2VoT/ni0FJqrNQLeP5QV5IFtT4GIyEe3eMGxGGlta5vjQP81Ym9ibVaaLCioaj2JIlcVhVijA72URTuSeXg16STbvSTpl/33qLWPfBUHMpo3kQOlmk/tqbVeuKWz2xMZUzYHea729CAIs@PYoeuwJXsOyHN8EERHzZDoUe5GCfTGDZP4lH3YLuIbSJxXN2RD8SRqJ4nxs9xo6LyVlAzPVqB0W7K6wzk3yhqoxlb7PxrwM3PU2MN@K2jn4o0vs7ufZnh6/A96JM4m1ABcf9sad74grRB2bpZpUag0/enbrvm2yLIMQWj1iwtr2fCYeoSl2wuGyKmDpSKAE5XeDoBQCtigDCa5gw5nJvVob4YmuAi7oLTVCUDVcaCe2fJjZTk6RWHNFjOnHqzEx7IfsQTHBn0xbWkyPjvPgPWYOq0lU9z@75unAaj8ffl5cMPCf18TC6vk8uPSfIf\"&gt;Try
        it online&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eboyobz/",
        "subreddit_type": "public", "locked": false, "name": "t1_eboyobz", "created":
        1544702993.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "ec9dysx",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Studentik",
        "can_mod_post": false, "created_utc": 1545410715.0, "send_replies": true,
        "parent_id": "t3_a20646", "score": 1, "author_fullname": "t2_a4bxr", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "No coconut lovers here? \n\n**Coconut**\n\n    # part 1\n    open(''day01.txt'')
        |&gt; .readlines() |&gt; map$(int) |&gt; reduce$((+)) |&gt; print\n    \n    \n    #
        part 2\n    import itertools\n    \n    seen = {0}\n    def tw(v):\n      if
        v in seen:\n        return False\n      seen.add(v)\n      return True\n    \n    numbers
        = open(''day01.txt'') |&gt; .readlines() |&gt; map$(int)\n    repeats = numbers
        |&gt; itertools.cycle |&gt; scan$(+) |&gt; dropwhile$(tw)\n    repeats$[0]
        |&gt; print\n    \n\n&amp;#x200B;", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;No coconut lovers here? &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Coconut&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#
        part 1\nopen(&amp;#39;day01.txt&amp;#39;) |&amp;gt; .readlines() |&amp;gt;
        map$(int) |&amp;gt; reduce$((+)) |&amp;gt; print\n\n\n# part 2\nimport itertools\n\nseen
        = {0}\ndef tw(v):\n  if v in seen:\n    return False\n  seen.add(v)\n  return
        True\n\nnumbers = open(&amp;#39;day01.txt&amp;#39;) |&amp;gt; .readlines()
        |&amp;gt; map$(int)\nrepeats = numbers |&amp;gt; itertools.cycle |&amp;gt;
        scan$(+) |&amp;gt; dropwhile$(tw)\nrepeats$[0] |&amp;gt; print\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/ec9dysx/",
        "subreddit_type": "public", "locked": false, "name": "t1_ec9dysx", "created":
        1545410715.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1543667472.0, "mod_reason_by": null,
        "banned_by": null, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eau6362", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_a20646", "score":
        -7, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_eau6362", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau6362/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1543642144.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543642144.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": -7}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 6, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eau6ljg",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "willkill07",
        "can_mod_post": false, "created_utc": 1543642721.0, "send_replies": true,
        "parent_id": "t1_eau6362", "score": 6, "author_fullname": "t2_7j0ca", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "In most coding competitions, it''s a 10 minute penalty rather than a lockout
        for each. Considering that most problems (~15 days per year) are solvable
        within 10 minutes, a minute penalty is more than reasonable.", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;In most coding competitions, it&amp;#39;s
        a 10 minute penalty rather than a lockout for each. Considering that most
        problems (~15 days per year) are solvable within 10 minutes, a minute penalty
        is more than reasonable.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eau6ljg/",
        "subreddit_type": "public", "locked": false, "name": "t1_eau6ljg", "created":
        1543642721.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], true]],
        [0, 12, "attr", "things"], [12, 13, "call", ["t1_eazrcov"]], [13, 14, "attr",
        "focus"], [14, 15, "call", []], [0, 16, "attr", "things"], [16, 17, "call",
        ["None"]], [17, 18, "attr", "filter"], [18, 19, "call", [".morechildren"]],
        [19, 20, "attr", "remove"], [20, 21, "call", []]], "success": true}'
  recorded_at: Sat, 08 Mar 2025 23:21:37 GMT
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:21:37 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=15Pl6f2biRAvh4ecS0; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sat, 08 Mar 2025 23:21:37 GMT
- request:
    method: post
    uri: https://oauth.reddit.com/api/morechildren.json
    body:
      encoding: UTF-8
      string: link_id=t3_a20646&children=eav37m4
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '1570'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      set-cookie:
      - loid=000000001ksjdn953i.2.1741476097979.Z0FBQUFBQm56TkVDLU1zOW11eW1EX1JFZWNBdnpXZFNGQmNka2F2bjdUb2pkcGx2WkdHcWg5cjRPLXpGME9aUEpFUHc4U0Z0d0NJWWkyLXNVbXE4YXEtd21QVFJFSnVCRHBTQTAtcEpvdlFzTl9iUkplNlVpOEtxb2tZNVJfMmZTdEVPZkRzWUVrVDE;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Mon, 08-Mar-2027 23:21:38
        GMT; secure, session_tracker=jrhlpkioeajhfaanir.0.1741476097992.Z0FBQUFBQm56TkVDZ0EyZHcwc3JhcHNZc1dvb0RieUN5RldZUXVKTXc1cUN3dGsySUNwMjY5SWxUekVPMkotb19GeXM5cU5CVTVLQjM0aGpwN3VzN0FQRmR0dDYtTlFCMWFSenF3N2JKV0V6aXM2eHVDZXpLZVcwMXBmUjY1aEdNZTB4QkVBLURLRUk;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 01:21:38
        GMT; secure, edgebucket=rvFYB6fYfoYehvNyL1; Domain=reddit.com; Max-Age=63071999;
        Path=/;  secure
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '10'
      x-ratelimit-remaining:
      - '90.0'
      x-ratelimit-reset:
      - '502'
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:21:38 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"jquery": [[0, 1, "call", ["body"]], [1, 2, "attr", "find"], [2, 3,
        "call", [".status"]], [3, 4, "attr", "hide"], [4, 5, "call", []], [5, 6, "attr",
        "html"], [6, 7, "call", [""]], [7, 8, "attr", "end"], [8, 9, "call", []],
        [0, 10, "attr", "insert_things"], [10, 11, "call", [[{"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eav37m4",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Karl_Marxxx",
        "can_mod_post": false, "created_utc": 1543684196.0, "send_replies": true,
        "parent_id": "t1_eau8pho", "score": 1, "author_fullname": "t2_enbb7", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "&gt; puts data.sum\n\nIs this not a standard ruby thing? I get `undefined
        method sum for array`", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;puts
        data.sum&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Is this not a standard
        ruby thing? I get &lt;code&gt;undefined method sum for array&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eav37m4/",
        "subreddit_type": "public", "locked": false, "name": "t1_eav37m4", "created":
        1543684196.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_a20646", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "eaviujt", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_eav37m4", "score":
        2, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_eaviujt", "collapsed": true, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaviujt/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1543696233.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1543696233.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 2}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaviwk1",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Karl_Marxxx",
        "can_mod_post": false, "created_utc": 1543696272.0, "send_replies": true,
        "parent_id": "t1_eaviujt", "score": 1, "author_fullname": "t2_enbb7", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Ah I''m on 2.0. Thanks.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ah
        I&amp;#39;m on 2.0. Thanks.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaviwk1/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaviwk1", "created":
        1543696272.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eaz6nsv",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "vanderzee94",
        "can_mod_post": false, "created_utc": 1543806304.0, "send_replies": true,
        "parent_id": "t1_eav37m4", "score": 1, "author_fullname": "t2_e0tcb", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "you can also do \n\n    data.inject(:+)\n\ninstead of sum", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;you can also do &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;data.inject(:+)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;instead
        of sum&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eaz6nsv/",
        "subreddit_type": "public", "locked": false, "name": "t1_eaz6nsv", "created":
        1543806304.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], true]],
        [0, 12, "attr", "things"], [12, 13, "call", ["t1_eav37m4"]], [13, 14, "attr",
        "focus"], [14, 15, "call", []], [0, 16, "attr", "things"], [16, 17, "call",
        ["None"]], [17, 18, "attr", "filter"], [18, 19, "call", [".morechildren"]],
        [19, 20, "attr", "remove"], [20, 21, "call", []]], "success": true}'
  recorded_at: Sat, 08 Mar 2025 23:21:38 GMT
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:21:38 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=gHTMddRBxjonRURhZ4; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sat, 08 Mar 2025 23:21:38 GMT
- request:
    method: post
    uri: https://oauth.reddit.com/api/morechildren.json
    body:
      encoding: UTF-8
      string: link_id=t3_a20646&children=eauu4rn
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '1180'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      set-cookie:
      - loid=000000001ksjdnch6t.2.1741476098420.Z0FBQUFBQm56TkVDbDUtMUFfSlJ1OU9jLS14dWpnX2lYeGdDcFJZb01yQ2RWcjB4a1gwZjdBcm1xWEEzMExHZ3BaN0hYMW11RHY2YVVGTXM5NEdRUjNmaTgtQWhubERYb3JaMzhWZTFlMVpqcFpTTV9nZi1sanFHOUZvY1E1X3JtR0tfV3VWWjMzbDc;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Mon, 08-Mar-2027 23:21:38
        GMT; secure, session_tracker=prijipeeqilleefplf.0.1741476098432.Z0FBQUFBQm56TkVDaEJ5U1pFZU8tcXQ4ZENlQjA0OGI1QWZpSnFiUjRTSE5sMlE3ZDdmN3JheFk5dkhBSzJUTkFRcXhTUm9NOW1aLXN5SDVaaC1IU3kwSU1TazJNa2oyaE1ILUtqenZtVjF3TTRWNWw5QjMxME1idUFabWpHVTF3QjAwTDNpbEFuOUI;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 01:21:38
        GMT; secure, edgebucket=BSmfoTWcxgfXqokTbI; Domain=reddit.com; Max-Age=63071999;
        Path=/;  secure
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '11'
      x-ratelimit-remaining:
      - '89.0'
      x-ratelimit-reset:
      - '501'
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:21:38 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"jquery": [[0, 1, "call", ["body"]], [1, 2, "attr", "find"], [2, 3,
        "call", [".status"]], [3, 4, "attr", "hide"], [4, 5, "call", []], [5, 6, "attr",
        "html"], [6, 7, "call", [""]], [7, 8, "attr", "end"], [8, 9, "call", []],
        [0, 10, "attr", "insert_things"], [10, 11, "call", [[{"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauu4rn",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "jschulenklopper",
        "can_mod_post": false, "created_utc": 1543676261.0, "send_replies": true,
        "parent_id": "t1_eau5j8f", "score": 1, "author_fullname": "t2_g7bah", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Had almost the same solution for part 1, but golfed that down to this:\n\n`puts
        gets(nil).split.map(&amp;:to_i).reduce(0,&amp;:+)`.\n\nIt gets the whole input
        file in a string, splits that (on whitespace), converts to integers and reduces
        the array by adding all the values.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Had almost the same solution for part 1, but golfed
        that down to this:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;puts gets(nil).split.map(&amp;amp;:to_i).reduce(0,&amp;amp;:+)&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;It
        gets the whole input file in a string, splits that (on whitespace), converts
        to integers and reduces the array by adding all the values.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauu4rn/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauu4rn", "created":
        1543676261.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], true]],
        [0, 12, "attr", "things"], [12, 13, "call", ["t1_eauu4rn"]], [13, 14, "attr",
        "focus"], [14, 15, "call", []], [0, 16, "attr", "things"], [16, 17, "call",
        ["None"]], [17, 18, "attr", "filter"], [18, 19, "call", [".morechildren"]],
        [19, 20, "attr", "remove"], [20, 21, "call", []]], "success": true}'
  recorded_at: Sat, 08 Mar 2025 23:21:38 GMT
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:21:38 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=I6HDzwwZFQ2rstu0nR; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sat, 08 Mar 2025 23:21:38 GMT
- request:
    method: post
    uri: https://oauth.reddit.com/api/morechildren.json
    body:
      encoding: UTF-8
      string: link_id=t3_a20646&children=eauhjk2
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '1008'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      set-cookie:
      - loid=000000001ksjdnge4g.2.1741476098839.Z0FBQUFBQm56TkVDZExhT08wdi1yRTY3d0gycFhmc2NtWkltZ2c1X0drZy1VaHU5dTM2M1VBRTJvWVpwbkx2T0I1TWs5STlOTjlQeS1SUzZyeTEzdnlidW5kQlhPLXo1OWNuYjR2eVFlbkFvZzN1X2NQekdSWVk1dXJZS29COUtDYUZYSDBhR2g5Rnk;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Mon, 08-Mar-2027 23:21:38
        GMT; secure, session_tracker=dlhjgkiqnmgpriqrkl.0.1741476098853.Z0FBQUFBQm56TkVDeUlRaEVRTmlDMmd0MHh6djg4WmdSLWwxU0RaS3UtSjlfYXd1Qm1vdnJCVlE2Rl93c0xoa3RIQ3hOcUFmT3NJWXBrNEJuUldfRmNPT3MyZHgwM1JTbXJWTldYX3hneGczN0VqZDVSVktsZlNYLU50Y1Y2ZUZsYjBnUUtyTDVvZkE;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 01:21:38
        GMT; secure, edgebucket=Cv3sp3jcqzqu8pOxz6; Domain=reddit.com; Max-Age=63071999;
        Path=/;  secure
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '12'
      x-ratelimit-remaining:
      - '88.0'
      x-ratelimit-reset:
      - '501'
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:21:38 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"jquery": [[0, 1, "call", ["body"]], [1, 2, "attr", "find"], [2, 3,
        "call", [".status"]], [3, 4, "attr", "hide"], [4, 5, "call", []], [5, 6, "attr",
        "html"], [6, 7, "call", [""]], [7, 8, "attr", "end"], [8, 9, "call", []],
        [0, 10, "attr", "insert_things"], [10, 11, "call", [[{"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "eauhjk2",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "DaDiscoBeat",
        "can_mod_post": false, "created_utc": 1543660358.0, "send_replies": true,
        "parent_id": "t1_eauei50", "score": 1, "author_fullname": "t2_107hwl", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Add 4 spaces in front of each lines :)\n\n\n", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Add 4 spaces in front of each lines :)&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/a20646/2018_day_1_solutions/eauhjk2/",
        "subreddit_type": "public", "locked": false, "name": "t1_eauhjk2", "created":
        1543660358.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_a20646", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], true]],
        [0, 12, "attr", "things"], [12, 13, "call", ["t1_eauhjk2"]], [13, 14, "attr",
        "focus"], [14, 15, "call", []], [0, 16, "attr", "things"], [16, 17, "call",
        ["None"]], [17, 18, "attr", "filter"], [18, 19, "call", [".morechildren"]],
        [19, 20, "attr", "remove"], [20, 21, "call", []]], "success": true}'
  recorded_at: Sat, 08 Mar 2025 23:21:38 GMT
recorded_with: VCR 6.3.1
