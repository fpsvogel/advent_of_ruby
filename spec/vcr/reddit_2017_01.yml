---
http_interactions:
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:31:40 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=gSviSVlgibr1c585Ic; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sat, 08 Mar 2025 23:31:40 GMT
- request:
    method: get
    uri: https://oauth.reddit.com/r/adventofcode/comments/7gsrc2/2017_day_1_solutions.json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '70419'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      access-control-allow-origin:
      - "*"
      access-control-expose-headers:
      - X-Moose
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '1'
      x-ratelimit-remaining:
      - '99.0'
      x-ratelimit-reset:
      - '498'
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:31:41 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - loid=000000001ksjzumk26.2.1741476701086.Z0FBQUFBQm56Tk5kbWRKNGVkNkhxYlUxZ2hkUjJ5REZjTk9FUm1OVEJGTVNKUzJ5akdHZS1jRGlTUWhPS1dMVlNmQjNOUWpjTUVyNENnWTNMaDl2a2lvSlozY3c4S1doN1R4VkozWUtOSlRDdnM3amlxamo1Tk5mTS13V2hCbTMyQjNKeEZRdTRHZ08;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Mon, 08-Mar-2027 23:31:41
        GMT; secure; SameSite=None; Secure, session_tracker=roibcciaihhjqorool.0.1741476701099.Z0FBQUFBQm56Tk5kR2V2TXhDZEJaSElCcDhxTzU3bXJGU045ckMxbGNkNmEtZG5kT3pBWHNhTGNnUkRWc2Z6SU5FQklEUElzMFpKUFNRcHNOTXREVVdKeWxfSnVPREJSZ0lQbmV4MlhwVUYzOWctbFVSSXhLNHNpZ0hRVldYb29McGZGWTRPQWxOLWs;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 01:31:41
        GMT; secure; SameSite=None; Secure, csv=2; Max-Age=63072000; Domain=.reddit.com;
        Path=/; Secure; SameSite=None, edgebucket=NMgDUwJXEwgft5eNys; Domain=reddit.com;
        Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '[{"kind": "Listing", "data": {"after": null, "dist": 1, "modhash":
        "", "geo_filter": "", "children": [{"kind": "t3", "data": {"approved_at_utc":
        null, "subreddit": "adventofcode", "selftext": "Welcome to Advent of Code
        2017!  If you participated in a previous year, welcome back, and if you''re
        new this year, we hope you have fun and learn lots!\n\nWe''re going to follow
        the same general format as previous years'' megathreads:\n\n1. Each day''s
        puzzle will release at exactly midnight EST (UTC -5).\n1. The daily megathread
        for each day will be posted very soon afterwards and immediately locked.\n
        * We know we can''t control people posting solutions elsewhere and trying
        to exploit the leaderboard, but this way we can try to reduce the leaderboard
        gaming from the official subreddit.\n1. The daily megathread will remain locked
        until there are a significant number of people on the leaderboard with gold
        stars.\n * \"A significant number\" is whatever number we decide is appropriate,
        but the leaderboards usually fill up fast, so no worries.\n1. When the thread
        is unlocked, you may post your solution as a comment or, for longer solutions,
        consider linking to your repo (e.g. GitHub/gists/Pastebin/[blag](https://xkcd.com/148/)/whatever).\n\nAbove
        all, remember, AoC is all about having fun and learning more about the wonderful
        world of programming!\n\n***\n\n#--- Day 1: Inverse Captcha ---\n\n***\n\nPost
        your solution as a comment or, for longer solutions, consider linking to your
        repo (e.g. GitHub/gists/Pastebin/blag or whatever).\n\nNote: The Solution
        Megathreads are for *solutions* only. If you have questions, please post your
        own thread and make sure to flair it with `Help`.\n\n***\n\n### Need a hint
        from the [Hugely^* Handy^\u2020 Haversack^\u2021 of Helpful^\u00a7 Hints^\u00a4](/r/adventofcode/w/h5)?\n\n[Spoiler](#s
        \"Most, if not all, of the puzzles in this year\u2019s Advent of Code can
        be solved with algorithms and code.\")\n\n***\n\n###~~This thread will be
        unlocked when there are a significant number of people on the leaderboard
        with gold stars for today''s puzzle.~~\n\n###*edit:* Leaderboard capped, thread
        unlocked!", "user_reports": [], "saved": false, "mod_reason_title": null,
        "gilded": 0, "clicked": false, "title": "-\ud83c\udf84- 2017 Day 1 Solutions
        -\ud83c\udf84-", "link_flair_richtext": [], "subreddit_name_prefixed": "r/adventofcode",
        "hidden": false, "pwls": 6, "link_flair_css_class": "flair-solutionmegathread",
        "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_7gsrc2",
        "quarantine": false, "link_flair_text_color": null, "upvote_ratio": 0.94,
        "author_flair_background_color": null, "subreddit_type": "public", "ups":
        34, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id":
        null, "is_original_content": false, "author_fullname": "t2_60niu", "secure_media":
        null, "is_reddit_media_domain": false, "is_meta": false, "category": null,
        "secure_media_embed": {}, "link_flair_text": "SOLUTION MEGATHREAD", "can_mod_post":
        false, "score": 34, "approved_by": null, "is_created_from_ads_ui": false,
        "author_premium": false, "thumbnail": "", "edited": 1512278599.0, "author_flair_css_class":
        null, "author_flair_richtext": [], "gildings": {}, "content_categories": null,
        "is_self": true, "mod_note": null, "created": 1512104407.0, "link_flair_type":
        "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type":
        "text", "domain": "self.adventofcode", "allow_live_comments": false, "selftext_html":
        "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Welcome to Advent of
        Code 2017!  If you participated in a previous year, welcome back, and if you&amp;#39;re
        new this year, we hope you have fun and learn lots!&lt;/p&gt;\n\n&lt;p&gt;We&amp;#39;re
        going to follow the same general format as previous years&amp;#39; megathreads:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Each
        day&amp;#39;s puzzle will release at exactly midnight EST (UTC -5).&lt;/li&gt;\n&lt;li&gt;The
        daily megathread for each day will be posted very soon afterwards and immediately
        locked.\n\n&lt;ul&gt;\n&lt;li&gt;We know we can&amp;#39;t control people posting
        solutions elsewhere and trying to exploit the leaderboard, but this way we
        can try to reduce the leaderboard gaming from the official subreddit.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;The
        daily megathread will remain locked until there are a significant number of
        people on the leaderboard with gold stars.\n\n&lt;ul&gt;\n&lt;li&gt;&amp;quot;A
        significant number&amp;quot; is whatever number we decide is appropriate,
        but the leaderboards usually fill up fast, so no worries.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;When
        the thread is unlocked, you may post your solution as a comment or, for longer
        solutions, consider linking to your repo (e.g. GitHub/gists/Pastebin/&lt;a
        href=\"https://xkcd.com/148/\"&gt;blag&lt;/a&gt;/whatever).&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Above
        all, remember, AoC is all about having fun and learning more about the wonderful
        world of programming!&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h1&gt;--- Day 1: Inverse
        Captcha ---&lt;/h1&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;Post your solution as a
        comment or, for longer solutions, consider linking to your repo (e.g. GitHub/gists/Pastebin/blag
        or whatever).&lt;/p&gt;\n\n&lt;p&gt;Note: The Solution Megathreads are for
        &lt;em&gt;solutions&lt;/em&gt; only. If you have questions, please post your
        own thread and make sure to flair it with &lt;code&gt;Help&lt;/code&gt;.&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h3&gt;Need
        a hint from the &lt;a href=\"/r/adventofcode/w/h5\"&gt;Hugely&lt;sup&gt;*&lt;/sup&gt;
        Handy&lt;sup&gt;\u2020&lt;/sup&gt; Haversack&lt;sup&gt;\u2021&lt;/sup&gt;
        of Helpful&lt;sup&gt;\u00a7&lt;/sup&gt; Hints&lt;sup&gt;\u00a4&lt;/sup&gt;&lt;/a&gt;?&lt;/h3&gt;\n\n&lt;p&gt;&lt;a
        href=\"#s\" title=\"Most, if not all, of the puzzles in this year\u2019s Advent
        of Code can be solved with algorithms and code.\"&gt;Spoiler&lt;/a&gt;&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h3&gt;&lt;del&gt;This
        thread will be unlocked when there are a significant number of people on the
        leaderboard with gold stars for today&amp;#39;s puzzle.&lt;/del&gt;&lt;/h3&gt;\n\n&lt;h3&gt;&lt;em&gt;edit:&lt;/em&gt;
        Leaderboard capped, thread unlocked!&lt;/h3&gt;\n&lt;/div&gt;&lt;!-- SC_ON
        --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count":
        null, "archived": true, "no_follow": false, "is_crosspostable": false, "pinned":
        false, "over_18": false, "all_awardings": [], "awarders": [], "media_only":
        false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text":
        null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports":
        null, "distinguished": "moderator", "subreddit_id": "t5_3b3wa", "author_is_blocked":
        false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color":
        null, "id": "7gsrc2", "is_robot_indexable": true, "num_duplicates": 0, "report_reasons":
        null, "author": "daggerdragon", "discussion_type": null, "num_comments": 373,
        "send_replies": false, "media": null, "contest_mode": false, "author_patreon_flair":
        false, "author_flair_text_color": null, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/",
        "stickied": false, "url": "https://www.reddit.com/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/",
        "subreddit_subscribers": 131311, "created_utc": 1512104407.0, "num_crossposts":
        0, "mod_reports": [], "is_video": false}}], "before": null}}, {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqljjac", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "that_lego_guy", "can_mod_post": false,
        "send_replies": true, "parent_id": "t1_dqlj9cd", "score": 11, "author_fullname":
        "t2_nxpb5", "removal_reason": null, "approved_by": null, "mod_note": null,
        "all_awardings": [], "body": "I''M BACK!!", "edited": false, "top_awarded_type":
        null, "downs": 0, "author_flair_css_class": null, "name": "t1_dqljjac", "is_submitter":
        false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;M BACK!!&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqljjac/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512109276.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512109276.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 11}}], "before": null}},
        "user_reports": [], "saved": false, "id": "dqlj9cd", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "Reibello", "can_mod_post": false, "created_utc":
        1512108762.0, "send_replies": true, "parent_id": "t1_dqlj3kn", "score": 16,
        "author_fullname": "t2_srfpq", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "You are a monster.", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqlj9cd",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You are a monster.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlj9cd/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512108762.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 16}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqmiq6c",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "Reibello",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_dqmh11a", "score":
        6, "author_fullname": "t2_srfpq", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "He...programs in excel.  He
        is truly impressive.  Check out his repo for last year.", "edited": false,
        "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "name":
        "t1_dqmiq6c", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;He...programs
        in excel.  He is truly impressive.  Check out his repo for last year.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmiq6c/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512159252.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512159252.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 6}}], "before": null}},
        "user_reports": [], "saved": false, "id": "dqmh11a", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "8483", "can_mod_post": false, "created_utc":
        1512157598.0, "send_replies": true, "parent_id": "t1_dqlj3kn", "score": 3,
        "author_fullname": "t2_m68sl", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "I am curious how you''ll handle
        the future challenges. :)  \n\nWhat languages do you program in?", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqmh11a",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I am curious how you&amp;#39;ll
        handle the future challenges. :)  &lt;/p&gt;\n\n&lt;p&gt;What languages do
        you program in?&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_7gsrc2", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmh11a/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512157598.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqmwoe8", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "that_lego_guy",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_dqmwjv9", "score":
        6, "author_fullname": "t2_nxpb5", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Yess now I can say \u201cone
        of us\u201d instead of \u201cone of me\u201d", "edited": false, "top_awarded_type":
        null, "downs": 0, "author_flair_css_class": null, "name": "t1_dqmwoe8", "is_submitter":
        false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yess now I can say \u201cone
        of us\u201d instead of \u201cone of me\u201d&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmwoe8/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512174254.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512174254.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 6}}], "before": null}},
        "user_reports": [], "saved": false, "id": "dqmwjv9", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "jenrmagas", "can_mod_post": false, "created_utc":
        1512174093.0, "send_replies": true, "parent_id": "t1_dqlj3kn", "score": 3,
        "author_fullname": "t2_b5pj6", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "My manager is in the lead
        on our private leaderboard, and Excel is her ''language'' of choice, too.",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqmwjv9", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My
        manager is in the lead on our private leaderboard, and Excel is her &amp;#39;language&amp;#39;
        of choice, too.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_7gsrc2", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmwjv9/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512174093.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 3}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "dqlj3kn", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "that_lego_guy",
        "can_mod_post": false, "created_utc": 1512108472.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 67, "author_fullname": "t2_nxpb5", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "DID
        SOMEONE SAY EXCEL?! Day 1 [Parts 1 &amp; 2]\n\n     =if(B1=APH1,B1,0) \n\nhttps://github.com/thatlegoguy/AoC2017/blob/master/Day%201%20Inverse%20Captcha.xlsx",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqlj3kn", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;DID
        SOMEONE SAY EXCEL?! Day 1 [Parts 1 &amp;amp; 2]&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;
        =if(B1=APH1,B1,0) \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/thatlegoguy/AoC2017/blob/master/Day%201%20Inverse%20Captcha.xlsx\"&gt;https://github.com/thatlegoguy/AoC2017/blob/master/Day%201%20Inverse%20Captcha.xlsx&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlj3kn/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512108472.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 67}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 1, "name": "t1_dqm5jxe",
        "id": "dqm5jxe", "parent_id": "t1_dqlkm3a", "depth": 1, "children": ["dqm5jxe"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "dqlkm3a", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "u794575248", "can_mod_post": false, "created_utc":
        1512111382.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 18,
        "author_fullname": "t2_larkuvo", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Python 3.6+ with a regular expression:\n\n    import
        re\n    def solve_regex(captcha, n):\n        return sum(int(c) for c in re.findall(fr''(\\d)(?=.{{{n-1}}}\\1)'',
        captcha+captcha[:n]))\n\n    solve_regex(captcha, 1)\n    solve_regex(captcha,
        len(captcha) // 2)\n\nThings used (you can read about Python''s regular expression
        syntax [here](https://docs.python.org/3/library/re.html#regular-expression-syntax)):\n\n*
        [`re.findall`](https://docs.python.org/3/library/re.html#re.findall) function.\n*
        `(\\d)` matches a digit and then its twin with `\\1`.\n* `(?=.{n-1}\\1)` matches
        any `n-1` symbols between the previous digit and the twin, but doesn\u2019t
        consume the string. This way we check every digit and don''t skip any.\n*
        [PEP 498 -- Literal String Interpolation](https://www.python.org/dev/peps/pep-0498/).
        It makes us use triple braces, the inner pair for interpolation and two outer
        pairs (you need to escape braces in f-strings) which boil down to a pair in
        the final regex string. So if `n` is `1`, we end up with `(\\d)(?=.{0}\\1)`
        which matches two successive identical digits. Somebody may prefer %-format
        like `r''(\\d)(?=.{%d}\\1)'' % n-1`, but I like f-strings more.\n\nThis solution
        doesn''t support `n` greater than `len(captcha)`. In that case you''d better
        use manual iteration with `(i+n) % len(captcha)` on each step. It also doesn''t
        work for infinite streams of characters.", "edited": 1512154024.0, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqlkm3a", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python 3.6+ with a regular
        expression:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import re\ndef solve_regex(captcha,
        n):\n    return sum(int(c) for c in re.findall(fr&amp;#39;(\\d)(?=.{{{n-1}}}\\1)&amp;#39;,
        captcha+captcha[:n]))\n\nsolve_regex(captcha, 1)\nsolve_regex(captcha, len(captcha)
        // 2)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Things used (you can read about
        Python&amp;#39;s regular expression syntax &lt;a href=\"https://docs.python.org/3/library/re.html#regular-expression-syntax\"&gt;here&lt;/a&gt;):&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a
        href=\"https://docs.python.org/3/library/re.html#re.findall\"&gt;&lt;code&gt;re.findall&lt;/code&gt;&lt;/a&gt;
        function.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;(\\d)&lt;/code&gt; matches a digit
        and then its twin with &lt;code&gt;\\1&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;(?=.{n-1}\\1)&lt;/code&gt;
        matches any &lt;code&gt;n-1&lt;/code&gt; symbols between the previous digit
        and the twin, but doesn\u2019t consume the string. This way we check every
        digit and don&amp;#39;t skip any.&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://www.python.org/dev/peps/pep-0498/\"&gt;PEP
        498 -- Literal String Interpolation&lt;/a&gt;. It makes us use triple braces,
        the inner pair for interpolation and two outer pairs (you need to escape braces
        in f-strings) which boil down to a pair in the final regex string. So if &lt;code&gt;n&lt;/code&gt;
        is &lt;code&gt;1&lt;/code&gt;, we end up with &lt;code&gt;(\\d)(?=.{0}\\1)&lt;/code&gt;
        which matches two successive identical digits. Somebody may prefer %-format
        like &lt;code&gt;r&amp;#39;(\\d)(?=.{%d}\\1)&amp;#39; % n-1&lt;/code&gt;,
        but I like f-strings more.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;This solution
        doesn&amp;#39;t support &lt;code&gt;n&lt;/code&gt; greater than &lt;code&gt;len(captcha)&lt;/code&gt;.
        In that case you&amp;#39;d better use manual iteration with &lt;code&gt;(i+n)
        % len(captcha)&lt;/code&gt; on each step. It also doesn&amp;#39;t work for
        infinite streams of characters.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlkm3a/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512111382.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 18}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 2, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqmpdi9", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_dqmdck3", "score":
        2, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "I can''t even", "edited": false, "downs": 0, "author_flair_css_class":
        null, "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        can&amp;#39;t even&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "subreddit_type": "public",
        "can_gild": false, "top_awarded_type": null, "unrepliable_reason": null, "author_flair_text_color":
        "dark", "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmpdi9/",
        "num_reports": null, "locked": false, "name": "t1_dqmpdi9", "created": 1512165874.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512165874.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 3, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "dqmdck3", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "askalski", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_dqm8hhc", "score": 10, "author_fullname": "t2_so7w7",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "That is not no.  This is no.\n\n    #! /usr/bin/env perl\n    \n    use
        strict;\n    use warnings;\n    \n    chomp($_ = &lt;&gt;);\n    \n    s/(.)(?!@{[s|..|.|gr
        =~ s|.||r]}\\1)//g;\n    \n    s/([6789])/5$1/g;\n    s/([459])/3$1/g;\n    s/([38])/21/g;\n    s/([257])/11/g;\n    \n    s/\\d/zz/g;\n    \n    s/z{10}/y/g;\n    s/(?&lt;!z)$/0/;\n    \n    s/y{10}/x/g;\n    s/^[a-x]++\\K(?!y)/0/;\n    \n    s/x{10}/w/g;\n    s/^[a-w]++\\K(?!x)/0/;\n    \n    s/([^\\d])\\1{8}/9/g;\n    s/([^\\d])\\1{7}/8/g;\n    s/([^\\d])\\1{6}/7/g;\n    s/([^\\d])\\1{5}/6/g;\n    s/([^\\d])\\1{4}/5/g;\n    s/([^\\d])\\1{3}/4/g;\n    s/([^\\d])\\1{2}/3/g;\n    s/([^\\d])\\1{1}/2/g;\n    s/[^\\d]/1/g;\n    \n    print
        \"Part 2: $_\\n\";\n", "edited": 1512154283.0, "top_awarded_type": null, "downs":
        0, "author_flair_css_class": null, "name": "t1_dqmdck3", "is_submitter": false,
        "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That is not no.  This is no.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!
        /usr/bin/env perl\n\nuse strict;\nuse warnings;\n\nchomp($_ = &amp;lt;&amp;gt;);\n\ns/(.)(?!@{[s|..|.|gr
        =~ s|.||r]}\\1)//g;\n\ns/([6789])/5$1/g;\ns/([459])/3$1/g;\ns/([38])/21/g;\ns/([257])/11/g;\n\ns/\\d/zz/g;\n\ns/z{10}/y/g;\ns/(?&amp;lt;!z)$/0/;\n\ns/y{10}/x/g;\ns/^[a-x]++\\K(?!y)/0/;\n\ns/x{10}/w/g;\ns/^[a-w]++\\K(?!x)/0/;\n\ns/([^\\d])\\1{8}/9/g;\ns/([^\\d])\\1{7}/8/g;\ns/([^\\d])\\1{6}/7/g;\ns/([^\\d])\\1{5}/6/g;\ns/([^\\d])\\1{4}/5/g;\ns/([^\\d])\\1{3}/4/g;\ns/([^\\d])\\1{2}/3/g;\ns/([^\\d])\\1{1}/2/g;\ns/[^\\d]/1/g;\n\nprint
        &amp;quot;Part 2: $_\\n&amp;quot;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmdck3/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512154084.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512154084.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 10}}], "before": null}},
        "user_reports": [], "saved": false, "id": "dqm8hhc", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "topaz2078", "can_mod_post": false, "created_utc":
        1512149529.0, "send_replies": true, "parent_id": "t1_dqljm7b", "score": 11,
        "author_fullname": "t2_3ga32", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "ASKALSKI NO", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": "flair-aoccreator", "name":
        "t1_dqm8hhc", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;ASKALSKI
        NO&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "link_id": "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color":
        "dark", "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm8hhc/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512149529.0, "author_flair_text": "(AoC creator)", "treatment_tags": [],
        "collapsed": false, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 11}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlqen6", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "KnorbenKnutsen", "can_mod_post": false,
        "created_utc": 1512125996.0, "send_replies": true, "parent_id": "t1_dqljm7b",
        "score": 2, "author_fullname": "t2_cuavn", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "I''ve missed you, askalski",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqlqen6", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve
        missed you, askalski&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_7gsrc2", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlqen6/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512125996.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 2}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "dqljm7b", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "askalski",
        "can_mod_post": false, "created_utc": 1512109430.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 13, "author_fullname": "t2_so7w7", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "    #!
        /usr/bin/env perl\n    \n    use strict;\n    use warnings;\n    \n    chomp($_
        = &lt;&gt;);\n    print &lt;&lt;\"\";\n    Part 1: @{[eval join ''+'', 0,
        /(\\d)(?=\\1)/g, /^(\\d).*\\1$/]}\n    Part 2: @{[eval join ''+'', 0, (/(\\d)(?=\\d{@{[length()
        - 1 &gt;&gt; 1]}}\\1)/g) x 2]}\n", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_dqljm7b", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;#! /usr/bin/env perl\n\nuse
        strict;\nuse warnings;\n\nchomp($_ = &amp;lt;&amp;gt;);\nprint &amp;lt;&amp;lt;&amp;quot;&amp;quot;;\nPart
        1: @{[eval join &amp;#39;+&amp;#39;, 0, /(\\d)(?=\\1)/g, /^(\\d).*\\1$/]}\nPart
        2: @{[eval join &amp;#39;+&amp;#39;, 0, (/(\\d)(?=\\d{@{[length() - 1 &amp;gt;&amp;gt;
        1]}}\\1)/g) x 2]}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqljm7b/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512109430.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 13}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 1, "name": "t1_dqmnmn7",
        "id": "dqmnmn7", "parent_id": "t1_dqmn2fu", "depth": 4, "children": ["dqmnmn7"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "dqmn2fu", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Tarmen", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_dqm8dyy", "score": 2, "author_fullname": "t2_7mjdo",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "The problem is that this is exactly the type
        of thing that I meant with toy implementation.\n\nA minor problem is that
        applicative order slightly complicates composition as soon as bottoms are
        involved. The much bigger problem which also exists with call-by-need is sharing.
        Take this example:\n\n    twice = \u03bbf.\u03bbx. f (f x)\n    id = \u03bba.a\n    oh-no
        = twice (twice (...(twice(\u03bbx.id x)...))\n\nthis clearly is just a verbose
        identity function but because id is duplicated over and over it takes `O(2^n)`
        where n is the count of twice''s. That is, naive lambda calculus evaluation
        scales exponentially with the rank of functions which is very-bad-no-good
        for any non trivial program. You can try to memoize but that somewhat breaks
        with higher order functions and the hash tables would become stupidly enormous
        for non-trivial uses.\n\nTo solve this Levi created a notion of optimality
        which roughly means that any expressions that come from the same origin are
        shared. From what I have read so far this usually uses ideas from linear logic
        to make duplication/erasure explicit and then translates to something like
        [interaction nets](https://en.wikipedia.org/wiki/Interaction_nets). Then evaluation
        becomes a graph reduction problem.\n\nInterestingly enough optimal evaluation
        in the sense of Levi comes with significant constant overhead for bookkeeping
        so the fastest solutions just aim to be close to optimal.\n\nTL:DR; Sufficient
        sharing means going from exponential to linear time complexity for evaluation,
        JavaScript doesn''t have enough sharing.", "edited": 1512164331.0, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqmn2fu", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The problem is that this is
        exactly the type of thing that I meant with toy implementation.&lt;/p&gt;\n\n&lt;p&gt;A
        minor problem is that applicative order slightly complicates composition as
        soon as bottoms are involved. The much bigger problem which also exists with
        call-by-need is sharing. Take this example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;twice
        = \u03bbf.\u03bbx. f (f x)\nid = \u03bba.a\noh-no = twice (twice (...(twice(\u03bbx.id
        x)...))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;this clearly is just a verbose
        identity function but because id is duplicated over and over it takes &lt;code&gt;O(2^n)&lt;/code&gt;
        where n is the count of twice&amp;#39;s. That is, naive lambda calculus evaluation
        scales exponentially with the rank of functions which is very-bad-no-good
        for any non trivial program. You can try to memoize but that somewhat breaks
        with higher order functions and the hash tables would become stupidly enormous
        for non-trivial uses.&lt;/p&gt;\n\n&lt;p&gt;To solve this Levi created a notion
        of optimality which roughly means that any expressions that come from the
        same origin are shared. From what I have read so far this usually uses ideas
        from linear logic to make duplication/erasure explicit and then translates
        to something like &lt;a href=\"https://en.wikipedia.org/wiki/Interaction_nets\"&gt;interaction
        nets&lt;/a&gt;. Then evaluation becomes a graph reduction problem.&lt;/p&gt;\n\n&lt;p&gt;Interestingly
        enough optimal evaluation in the sense of Levi comes with significant constant
        overhead for bookkeeping so the fastest solutions just aim to be close to
        optimal.&lt;/p&gt;\n\n&lt;p&gt;TL:DR; Sufficient sharing means going from
        exponential to linear time complexity for evaluation, JavaScript doesn&amp;#39;t
        have enough sharing.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_7gsrc2", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmn2fu/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512163531.0,
        "author_flair_text": null, "treatment_tags": [], "created_utc": 1512163531.0,
        "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0, "depth":
        3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "dqm8dyy", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "topaz2078", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_dqlsr81", "score": 2, "author_fullname": "t2_3ga32",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "On [my blog](http://hexatlas.com/entries/7), I describe a technique
        for using a tiny subset of JavaScript as an untyped lambda calculus interpreter...",
        "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        "flair-aoccreator", "name": "t1_dqm8dyy", "is_submitter": false, "collapsed":
        false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;On &lt;a href=\"http://hexatlas.com/entries/7\"&gt;my
        blog&lt;/a&gt;, I describe a technique for using a tiny subset of JavaScript
        as an untyped lambda calculus interpreter...&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": "moderator", "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": "dark",
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm8dyy/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512149436.0, "author_flair_text": "(AoC creator)", "treatment_tags": [],
        "created_utc": 1512149436.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 2, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "more",
        "data": {"count": 2, "name": "t1_dqma9qw", "id": "dqma9qw", "parent_id": "t1_dqlsr81",
        "depth": 2, "children": ["dqma9qw"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "dqlsr81", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "Tarmen", "can_mod_post": false, "created_utc": 1512131567.0,
        "send_replies": true, "parent_id": "t1_dqlhkcj", "score": 3, "author_fullname":
        "t2_7mjdo", "removal_reason": null, "approved_by": null, "mod_note": null,
        "all_awardings": [], "body": "I somehow didn''t forsee the rotate-by-n variation
        so the second part got a bit bizarre:\n\n    rotate (x:xs) = xs ++ [x]\n    pairs
        xs = zip xs (iterate rotate xs !! (length xs `div` 2))\n    captcha2 = sum
        . map (digitToInt . fst) . filter (uncurry (==)) . pairs\n\nYour use of cycle
        is neat, I usually go for split which needs an additional import.\n\nOriginally
        I planned to solve this AoC in untyped lambda calculus but it is really hard
        to find any non-toy implementations whose source is still available. The best
        bet so far seems [graph-rewriting-lambdascope](https://hackage.haskell.org/package/graph-rewriting-lambdascope-0.5.10)
        but I haven''t gotten around to reading the paper and that seems like all
        the documentation there is.\n", "edited": 1512132104.0, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqlsr81", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I somehow didn&amp;#39;t forsee
        the rotate-by-n variation so the second part got a bit bizarre:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;rotate
        (x:xs) = xs ++ [x]\npairs xs = zip xs (iterate rotate xs !! (length xs `div`
        2))\ncaptcha2 = sum . map (digitToInt . fst) . filter (uncurry (==)) . pairs\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Your
        use of cycle is neat, I usually go for split which needs an additional import.&lt;/p&gt;\n\n&lt;p&gt;Originally
        I planned to solve this AoC in untyped lambda calculus but it is really hard
        to find any non-toy implementations whose source is still available. The best
        bet so far seems &lt;a href=\"https://hackage.haskell.org/package/graph-rewriting-lambdascope-0.5.10\"&gt;graph-rewriting-lambdascope&lt;/a&gt;
        but I haven&amp;#39;t gotten around to reading the paper and that seems like
        all the documentation there is.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlsr81/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512131567.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 2, "name": "t1_dqnat6k",
        "id": "dqnat6k", "parent_id": "t1_dqmpw6l", "depth": 2, "children": ["dqnat6k"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "dqmpw6l", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "4rgento", "can_mod_post": false, "created_utc":
        1512166439.0, "send_replies": true, "parent_id": "t1_dqlhkcj", "score": 2,
        "author_fullname": "t2_50gp3", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Total Idris solution 8-).
        (f is like your lambda)\n\n    solution : Nat -&gt; List Int -&gt; Maybe Int\n    solution
        n [] = Nothing\n    solution n (x::xs) = Just $\n      sum $ zipWith f\n        (x::xs)\n        (take
        (length (x::xs)) (drop n (cycle (x::xs))))", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqmpw6l", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Total Idris solution 8-). (f
        is like your lambda)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;solution : Nat -&amp;gt;
        List Int -&amp;gt; Maybe Int\nsolution n [] = Nothing\nsolution n (x::xs)
        = Just $\n  sum $ zipWith f\n    (x::xs)\n    (take (length (x::xs)) (drop
        n (cycle (x::xs))))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmpw6l/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512166439.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "more",
        "data": {"count": 2, "name": "t1_dqq1t3n", "id": "dqq1t3n", "parent_id": "t1_dqlhkcj",
        "depth": 1, "children": ["dqq1t3n", "dqmo6ww"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "dqlhkcj", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        false, "author": "winhug", "can_mod_post": false, "created_utc": 1512105905.0,
        "send_replies": true, "parent_id": "t3_7gsrc2", "score": 14, "author_fullname":
        "t2_p7aqb", "approved_by": null, "mod_note": null, "all_awardings": [], "collapsed":
        false, "body": "Haskell\n\n    solve n xs = sum $ zipWith (\\a b -&gt; if
        a == b then a else 0) xs (drop n $ cycle xs)\n    solve1 = solve 1\n    solve2
        xs = solve ((length xs) `div` 2) xs", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqlhkcj", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Haskell&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;solve
        n xs = sum $ zipWith (\\a b -&amp;gt; if a == b then a else 0) xs (drop n
        $ cycle xs)\nsolve1 = solve 1\nsolve2 xs = solve ((length xs) `div` 2) xs\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhkcj/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512105905.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 14}}, {"kind": "t1",
        "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 13, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 3, "removal_reason": null, "link_id": "t3_7gsrc2",
        "author_flair_template_id": null, "likes": null, "replies": {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "more", "data": {"count": 6, "name": "t1_dqluct3", "id": "dqluct3",
        "parent_id": "t1_dqli0xc", "depth": 3, "children": ["dqluct3", "dqlvks8"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "dqli0xc", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        "DELETED", "no_follow": true, "author": "[deleted]", "can_mod_post": false,
        "created_utc": 1512106638.0, "send_replies": true, "parent_id": "t1_dqlhky5",
        "score": 3, "approved_by": null, "report_reasons": null, "all_awardings":
        [], "subreddit_id": "t5_3b3wa", "body": "[removed]", "edited": false, "author_flair_css_class":
        null, "downs": 0, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[removed]&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqli0xc/",
        "num_reports": null, "locked": false, "name": "t1_dqli0xc", "created": 1512106638.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "collapsed": true, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "dqlhky5", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "ajn0592", "can_mod_post": false, "created_utc":
        1512105931.0, "send_replies": true, "parent_id": "t1_dqlgvg1", "score": 2,
        "author_fullname": "t2_524hr", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Wow I need to learn from you.
        This is super concise.", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqlhky5", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Wow
        I need to learn from you. This is super concise.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhky5/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512105931.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 2, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 2, "removal_reason": null, "link_id": "t3_7gsrc2",
        "author_flair_template_id": null, "likes": null, "replies": {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "distinguished":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "distinguished": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "more", "data": {"count":
        1, "name": "t1_dqma21u", "id": "dqma21u", "parent_id": "t1_dqlmws5", "depth":
        6, "children": ["dqma21u"]}}], "before": null}}, "user_reports": [], "saved":
        false, "id": "dqlmws5", "banned_at_utc": null, "mod_reason_title": null, "gilded":
        0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author":
        "wimglenn", "can_mod_post": false, "send_replies": true, "parent_id": "t1_dqllk7l",
        "score": 3, "author_fullname": "t2_13atfr", "approved_by": null, "mod_note":
        null, "all_awardings": [], "body": "[`from aocd import data`](https://github.com/wimglenn/advent-of-code-data)",
        "edited": false, "gildings": {}, "downs": 0, "author_flair_css_class": null,
        "name": "t1_dqlmws5", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a
        href=\"https://github.com/wimglenn/advent-of-code-data\"&gt;&lt;code&gt;from
        aocd import data&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "link_id": "t3_7gsrc2", "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlmws5/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512116487.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512116487.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 5, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "more",
        "data": {"count": 1, "name": "t1_dqlt1lu", "id": "dqlt1lu", "parent_id": "t1_dqllk7l",
        "depth": 5, "children": ["dqlt1lu"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "dqllk7l", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "BumpitySnook", "can_mod_post": false, "send_replies": true,
        "parent_id": "t1_dqlhur7", "score": 2, "author_fullname": "t2_kkoug", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "You don''t need to check `__name__` if you''re not writing library code that
        can be run as a problem.  IMO with is also kind of excessive.  Just `inp =
        open(\"problem0.txt\").read().strip()` is sufficient.", "edited": false, "author_flair_css_class":
        null, "name": "t1_dqllk7l", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You
        don&amp;#39;t need to check &lt;code&gt;__name__&lt;/code&gt; if you&amp;#39;re
        not writing library code that can be run as a problem.  IMO with is also kind
        of excessive.  Just &lt;code&gt;inp = open(&amp;quot;problem0.txt&amp;quot;).read().strip()&lt;/code&gt;
        is sufficient.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "link_id": "t3_7gsrc2", "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": null, "treatment_tags": [], "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqllk7l/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512113359.0, "author_flair_text": null, "collapsed": false, "created_utc":
        1512113359.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 4, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "more",
        "data": {"count": 4, "name": "t1_dqlhxu1", "id": "dqlhxu1", "parent_id": "t1_dqlhur7",
        "depth": 4, "children": ["dqlhxu1"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "dqlhur7", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "[deleted]", "can_mod_post": false, "send_replies": true,
        "parent_id": "t1_dqlhe5o", "score": 2, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "How much boilerplate
        do you set up before seeing the problem?  All I do in python is have a\n\n    if
        __name__ == \"__main__\":\n        with open(\"problem0.txt\") as f:\n            inp
        = f.read().strip()", "edited": false, "downs": 0, "author_flair_css_class":
        null, "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;How
        much boilerplate do you set up before seeing the problem?  All I do in python
        is have a&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;if __name__ == &amp;quot;__main__&amp;quot;:\n    with
        open(&amp;quot;problem0.txt&amp;quot;) as f:\n        inp = f.read().strip()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhur7/",
        "num_reports": null, "locked": false, "name": "t1_dqlhur7", "created": 1512106364.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512106364.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 3, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_dqms8yq", "id": "dqms8yq", "parent_id":
        "t1_dqlhe5o", "depth": 3, "children": ["dqms8yq"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "dqlhe5o", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        false, "author": "lemon-meringue", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_dqlh623", "score": 7, "author_fullname": "t2_cvr13",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "I use Java and get on the leaderboard. :)", "edited": false,
        "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "name":
        "t1_dqlhe5o", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        use Java and get on the leaderboard. :)&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhe5o/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512105639.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512105639.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 7}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 2, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "more",
        "data": {"count": 4, "name": "t1_dqlhwue", "id": "dqlhwue", "parent_id": "t1_dqlhj97",
        "depth": 3, "children": ["dqlhwue"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "dqlhj97", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": "DELETED", "no_follow":
        true, "author": "[deleted]", "can_mod_post": false, "created_utc": 1512105858.0,
        "send_replies": true, "parent_id": "t1_dqlh623", "score": 2, "approved_by":
        null, "report_reasons": null, "all_awardings": [], "subreddit_id": "t5_3b3wa",
        "body": "[removed]", "edited": false, "author_flair_css_class": null, "downs":
        0, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[removed]&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhj97/",
        "num_reports": null, "locked": false, "name": "t1_dqlhj97", "created": 1512105858.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "collapsed": true, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 6, "name": "t1_dqm31wv", "id": "dqm31wv", "parent_id":
        "t1_dqlh623", "depth": 2, "children": ["dqm31wv", "dqlxo9o", "dqlr763", "dqlhtp7"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "dqlh623", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "[deleted]", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_dqlgvg1", "score": 2, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "I would be
        surprised if people use anything but Python to get on the leaderboard.  Your
        go code is concise but having to do stuff like import `fmt` and subtract `''0''`
        when converting digit characters to `int`s must take a bit more time to consider
        (or debug) than just doing `print` and `int(c)` in Python.", "edited": false,
        "author_flair_css_class": null, "collapsed": false, "downs": 0, "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I would be surprised
        if people use anything but Python to get on the leaderboard.  Your go code
        is concise but having to do stuff like import &lt;code&gt;fmt&lt;/code&gt;
        and subtract &lt;code&gt;&amp;#39;0&amp;#39;&lt;/code&gt; when converting
        digit characters to &lt;code&gt;int&lt;/code&gt;s must take a bit more time
        to consider (or debug) than just doing &lt;code&gt;print&lt;/code&gt; and
        &lt;code&gt;int(c)&lt;/code&gt; in Python.&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "subreddit_type": "public", "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlh623/", "num_reports":
        null, "locked": false, "name": "t1_dqlh623", "created": 1512105300.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512105300.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_dqmcvby", "id": "dqmcvby", "parent_id":
        "t1_dqlgvg1", "depth": 1, "children": ["dqmcvby"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "dqlgvg1", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": "DELETED", "no_follow":
        true, "author": "[deleted]", "can_mod_post": false, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 13, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "[removed]",
        "edited": false, "downs": 0, "author_flair_css_class": null, "collapsed":
        true, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[removed]&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlgvg1/",
        "num_reports": null, "locked": false, "name": "t1_dqlgvg1", "created": 1512104868.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512104868.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 2, "name": "t1_dr1inls",
        "id": "dr1inls", "parent_id": "t1_dqlhn5e", "depth": 1, "children": ["dr1inls"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "dqlhn5e", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "fatpollo", "can_mod_post": false, "created_utc":
        1512106025.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 13,
        "author_fullname": "t2_an7us", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "My rival is way ahead of me on the leaderboards
        \ud83d\ude2d\ud83d\ude2d\ud83d\ude2d\n\n    def captcha(string):\n        N
        = len(string) // 2 # 1\n        return sum(int(a) for a, b in zip(string,
        string[N:]+string[:N]) if a==b)\n", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_dqlhn5e", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;My rival is way ahead of me on the leaderboards
        \ud83d\ude2d\ud83d\ude2d\ud83d\ude2d&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        captcha(string):\n    N = len(string) // 2 # 1\n    return sum(int(a) for
        a, b in zip(string, string[N:]+string[:N]) if a==b)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhn5e/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512106025.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 13}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqmai1u",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Smylers",
        "can_mod_post": false, "created_utc": 1512151413.0, "send_replies": true,
        "parent_id": "t1_dqm4lym", "score": 3, "author_fullname": "t2_13cudg", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "And **Vim** for part\u00a02:\n\n    :s/\\v(.)(.{\u2039Ctrl+R\u203a=col(''$'')/2-1\u2039Enter\u203a}\\1)@!//g|s/\\v/+/g\u2039Enter\u203a\n    YP0C\u2039Ctrl+R\u203a=\u2039Ctrl+R\u203a-\u2039Enter\u203a\u2039Esc\u203a\n\nFinds
        matches from the first half to the second half of the input, then uses `YP`
        to double them for the corresponding matches from the second half to the first.",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqmai1u", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;And
        &lt;strong&gt;Vim&lt;/strong&gt; for part\u00a02:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;:s/\\v(.)(.{\u2039Ctrl+R\u203a=col(&amp;#39;$&amp;#39;)/2-1\u2039Enter\u203a}\\1)@!//g|s/\\v/+/g\u2039Enter\u203a\nYP0C\u2039Ctrl+R\u203a=\u2039Ctrl+R\u203a-\u2039Enter\u203a\u2039Esc\u203a\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Finds
        matches from the first half to the second half of the input, then uses &lt;code&gt;YP&lt;/code&gt;
        to double them for the corresponding matches from the second half to the first.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmai1u/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512151413.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "more",
        "data": {"count": 1, "name": "t1_dqmt6dx", "id": "dqmt6dx", "parent_id": "t1_dqm4lym",
        "depth": 1, "children": ["dqmt6dx"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "dqm4lym", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        false, "author": "Smylers", "can_mod_post": false, "created_utc": 1512145949.0,
        "send_replies": true, "parent_id": "t3_7gsrc2", "score": 12, "author_fullname":
        "t2_13cudg", "approved_by": null, "mod_note": null, "all_awardings": [], "collapsed":
        false, "body": "**Vim** answer for part\u00a01 \u2014 load your input file
        then type:\n\n    xP$p:s/\\v(.)\\1@!//g|s/\\v/+/g\u2039Enter\u203a\n    C\u2039Ctrl+R\u203a=\u2039Ctrl+R\u203a-\u2039Enter\u203a\u2039Esc\u203a\n\n36
        keystrokes \u2014 anybody able to do it in less?", "edited": 1512146206.0,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqm4lym",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Vim&lt;/strong&gt;
        answer for part\u00a01 \u2014 load your input file then type:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;xP$p:s/\\v(.)\\1@!//g|s/\\v/+/g\u2039Enter\u203a\nC\u2039Ctrl+R\u203a=\u2039Ctrl+R\u203a-\u2039Enter\u203a\u2039Esc\u203a\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;36
        keystrokes \u2014 anybody able to do it in less?&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm4lym/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512145949.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 12}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqllfsq",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "Alexwalled",
        "can_mod_post": false, "created_utc": 1512113095.0, "send_replies": true,
        "parent_id": "t1_dqli1fk", "score": 5, "author_fullname": "t2_ouhcr", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "im glad to see the mad man J programmer again", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqllfsq", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;im glad to see the mad man
        J programmer again&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_7gsrc2", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqllfsq/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512113095.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 5}}, {"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 3, "removal_reason": null, "link_id": "t3_7gsrc2",
        "author_flair_template_id": null, "likes": null, "replies": "", "user_reports":
        [], "saved": false, "id": "dqlwm9e", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "[deleted]", "can_mod_post": false, "send_replies": true,
        "parent_id": "t1_dqli1fk", "score": 3, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "That site
        is really cool, and it supports a buttload of languages too, man this is going
        to steal so much of my time :/", "edited": false, "author_flair_css_class":
        null, "collapsed": false, "downs": 0, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;That site is really cool, and it supports
        a buttload of languages too, man this is going to steal so much of my time
        :/&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "associated_award":
        null, "stickied": false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlwm9e/",
        "num_reports": null, "locked": false, "name": "t1_dqlwm9e", "created": 1512137662.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512137662.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqo6dgl", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "hoosierEE", "can_mod_post": false, "created_utc":
        1512247720.0, "send_replies": true, "parent_id": "t1_dqli1fk", "score": 2,
        "author_fullname": "t2_g6ibf", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "    part1 =: +/(#~(=1&amp;|.))
        input\n    part2 =: +/(#~(=((-:@#)|.]))) input", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqo6dgl", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;part1 =: +/(#~(=1&amp;amp;|.))
        input\npart2 =: +/(#~(=((-:@#)|.]))) input\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqo6dgl/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512247720.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "more",
        "data": {"count": 1, "name": "t1_dqqikbt", "id": "dqqikbt", "parent_id": "t1_dqli1fk",
        "depth": 1, "children": ["dqqikbt"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "dqli1fk", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        false, "author": "_jonah", "can_mod_post": false, "created_utc": 1512106661.0,
        "send_replies": true, "parent_id": "t3_7gsrc2", "score": 17, "author_fullname":
        "t2_sqnqz", "approved_by": null, "mod_note": null, "all_awardings": [], "collapsed":
        false, "body": "J\n\n    f=. [: +/ [: */ ] ,: [: =/ ] ,: [ |. ]\n\n    NB.
        day1 ; day2\n    (1 f a) ; (f~ -:@#) a \n\nwhere a is your input.\n\n[Try
        it online!](https://tio.run/##NZbLih5VFIXn/RSFgkk0dtj3fVoC4gP4ApJBozbixLEgvnr7rWpMwn@rOvuybpU/X58/P14fH795/Orpetd1fN1z94RFbO1Zq/JKL49eW99yP1XV1nGc2zPC25OrObFdmWXZuZ3lu@ZnI/WvKRDcQy3uPxXGTTN90kNHYopfjg@V9d5pmmToGa7LWaezt@y0bpjwHO6rqPC1Pmcp6r0cYuKqyTGn3ZQPw9oZzRaHGh0Mc1gvjU@cSedraOC1mage3uMwNGtU1moafoxO9g2GdGunfZ84p/peNuiXGkHtva26yoyzQUVteOwsR/kKaqO7ORoDoJYgo6GdEWnEZHyjPfhW0srW2G64egB5FvyXO254jaUO9wmftC1WK/hoqLQwY10ViOlh6PVmMjpnF7cvcA3QHGPbAVTqv0EfNUADNVvUL5pQmYOsN2rqEKGVjNMMeg6UAKeWg6EZTThWoEi1AWd4gWOmBcJsM7F/1JtjIiq06N5siRppEO4gJNh39iRtE3U4BCDMWzPpnJ10pjB0AJYwlef0sgwT5hpfh1WYokcK7GFiZLZQwxlnBEoCbsICl6TpADYwSwl3PFtyYBZQADe0jFLZH/kZNAUnbqtoTwhleQmthXBCfNit0m2VZRTIQb4wN5gC2YAUHxp6Dq1QH@vBJ1qE3Ll1BaUNyhxvSfTAF8axEanNNhCGxKmLXKTpxSwgj4fFEt2iUWIgmYQHuZBuoIWpQTWgqCSZko2kwBDpKGLAgQtLzZJeG4QOup/boUfFbPEAysQkEIFCoQxhg@MtlJR/0REqhnKtAnCt/j7KD@KFnmKYlW1x4XJS@qDp6KqcvDAnKEAXoRmUAMB0LRIFV9aHObZk6DlKAvS8oVvAkgWlelGBIouRKB96TSZXS9CSrxmMH5CO5JBS@ugAgkTcpXgw/kpSg9XxIQBw6cgceIwpgYwskpbYh9AiiEajalLqbwE7N9NCXmAItvKSLBVO4pkFb0MheJRwB6XiQRGDGeV3nIxV6Ya9S3L00niYv1iOP0aIo1pWU2W0xTh1i5dIYCt0RKFdJSqrylDAiHsompCfd14Czkq3kinUi25paxQDS6RJH9iKkjSVjWDvnkVpCgSgSA64FB9vvkcMxOTI2wpO9sVfMAOQgyL0iNGjxZmb35S8o0HlbQKMQFQ6AbtrHC63sOJkvBmWw6hc4S2zOJQoDkhzGHNl8Eg8qBvD6NElEfA0AWMEoonBZY@eNiBPmhJCXKOLMkWpuAoRqhFscqV4aUlducdJtSHCoPiWMOuCK2WREi@uEQAEgQAg8kCh2po0lBKkN6ihPQgzMpjhI4yNFMgtF7uCAG2YnqNSLBqkvOlhggQJLzW3OwFNZB856i3roYsUkiZLWaeQOYoGIOHbu9cX/g/wy9P13Se9fvvp@nJ9fNLHz/9/vP55vL48PPz80@P12/Pfdv2gN3/4/dc//rre2/VyPX/gt/cv/17fP/349Yfr@Xp9/Q8
        \"J \u2013 Try It Online\")", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqli1fk", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;J&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;f=.
        [: +/ [: */ ] ,: [: =/ ] ,: [ |. ]\n\nNB. day1 ; day2\n(1 f a) ; (f~ -:@#)
        a \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;where a is your input.&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://tio.run/##NZbLih5VFIXn/RSFgkk0dtj3fVoC4gP4ApJBozbixLEgvnr7rWpMwn@rOvuybpU/X58/P14fH795/Orpetd1fN1z94RFbO1Zq/JKL49eW99yP1XV1nGc2zPC25OrObFdmWXZuZ3lu@ZnI/WvKRDcQy3uPxXGTTN90kNHYopfjg@V9d5pmmToGa7LWaezt@y0bpjwHO6rqPC1Pmcp6r0cYuKqyTGn3ZQPw9oZzRaHGh0Mc1gvjU@cSedraOC1mage3uMwNGtU1moafoxO9g2GdGunfZ84p/peNuiXGkHtva26yoyzQUVteOwsR/kKaqO7ORoDoJYgo6GdEWnEZHyjPfhW0srW2G64egB5FvyXO254jaUO9wmftC1WK/hoqLQwY10ViOlh6PVmMjpnF7cvcA3QHGPbAVTqv0EfNUADNVvUL5pQmYOsN2rqEKGVjNMMeg6UAKeWg6EZTThWoEi1AWd4gWOmBcJsM7F/1JtjIiq06N5siRppEO4gJNh39iRtE3U4BCDMWzPpnJ10pjB0AJYwlef0sgwT5hpfh1WYokcK7GFiZLZQwxlnBEoCbsICl6TpADYwSwl3PFtyYBZQADe0jFLZH/kZNAUnbqtoTwhleQmthXBCfNit0m2VZRTIQb4wN5gC2YAUHxp6Dq1QH@vBJ1qE3Ll1BaUNyhxvSfTAF8axEanNNhCGxKmLXKTpxSwgj4fFEt2iUWIgmYQHuZBuoIWpQTWgqCSZko2kwBDpKGLAgQtLzZJeG4QOup/boUfFbPEAysQkEIFCoQxhg@MtlJR/0REqhnKtAnCt/j7KD@KFnmKYlW1x4XJS@qDp6KqcvDAnKEAXoRmUAMB0LRIFV9aHObZk6DlKAvS8oVvAkgWlelGBIouRKB96TSZXS9CSrxmMH5CO5JBS@ugAgkTcpXgw/kpSg9XxIQBw6cgceIwpgYwskpbYh9AiiEajalLqbwE7N9NCXmAItvKSLBVO4pkFb0MheJRwB6XiQRGDGeV3nIxV6Ya9S3L00niYv1iOP0aIo1pWU2W0xTh1i5dIYCt0RKFdJSqrylDAiHsompCfd14Czkq3kinUi25paxQDS6RJH9iKkjSVjWDvnkVpCgSgSA64FB9vvkcMxOTI2wpO9sVfMAOQgyL0iNGjxZmb35S8o0HlbQKMQFQ6AbtrHC63sOJkvBmWw6hc4S2zOJQoDkhzGHNl8Eg8qBvD6NElEfA0AWMEoonBZY@eNiBPmhJCXKOLMkWpuAoRqhFscqV4aUlducdJtSHCoPiWMOuCK2WREi@uEQAEgQAg8kCh2po0lBKkN6ihPQgzMpjhI4yNFMgtF7uCAG2YnqNSLBqkvOlhggQJLzW3OwFNZB856i3roYsUkiZLWaeQOYoGIOHbu9cX/g/wy9P13Se9fvvp@nJ9fNLHz/9/vP55vL48PPz80@P12/Pfdv2gN3/4/dc//rre2/VyPX/gt/cv/17fP/349Yfr@Xp9/Q8\"
        title=\"J \u2013 Try It Online\"&gt;Try it online!&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqli1fk/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512106661.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 17}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 6, "name": "t1_dqlyxky",
        "id": "dqlyxky", "parent_id": "t1_dqlhveb", "depth": 1, "children": ["dqlyxky",
        "dqltdca", "dqmgxtp"]}}], "before": null}}, "user_reports": [], "saved": false,
        "id": "dqlhveb", "banned_at_utc": null, "mod_reason_title": null, "gilded":
        0, "archived": true, "collapsed_reason_code": null, "no_follow": false, "author":
        "willkill07", "can_mod_post": false, "created_utc": 1512106391.0, "send_replies":
        true, "parent_id": "t3_7gsrc2", "score": 8, "author_fullname": "t2_7j0ca",
        "approved_by": null, "mod_note": null, "all_awardings": [], "collapsed": false,
        "body": "### Modern C++\n\n    std::vector&lt;char&gt; const values(std::istream_iterator&lt;char&gt;{std::cin},
        {});\n    std::size_t const N{values.size()};\n    std::size_t const offset{part2
        ? N / 2 : 1};\n    int sum{0};\n    for (std::size_t i{0lu}; i &lt; N; ++i)
        {\n      if (values[i] == values[(i + offset) % N]) {\n        sum += values[i]
        - ''0'';\n      }\n    }\n    std::cout &lt;&lt; sum &lt;&lt; ''\\n'';\n\n[Repo
        Link](https://github.com/willkill07/AdventOfCode2017/blob/d4bd002ec5e84a85504259f413ca0ef43010d50b/src/Day01.cpp)",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqlhveb", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h3&gt;Modern
        C++&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;std::vector&amp;lt;char&amp;gt; const
        values(std::istream_iterator&amp;lt;char&amp;gt;{std::cin}, {});\nstd::size_t
        const N{values.size()};\nstd::size_t const offset{part2 ? N / 2 : 1};\nint
        sum{0};\nfor (std::size_t i{0lu}; i &amp;lt; N; ++i) {\n  if (values[i] ==
        values[(i + offset) % N]) {\n    sum += values[i] - &amp;#39;0&amp;#39;;\n  }\n}\nstd::cout
        &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; &amp;#39;\\n&amp;#39;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/willkill07/AdventOfCode2017/blob/d4bd002ec5e84a85504259f413ca0ef43010d50b/src/Day01.cpp\"&gt;Repo
        Link&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhveb/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512106391.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_7gsrc2", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 8}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqlnnjx", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "pcein",
        "can_mod_post": false, "created_utc": 1512118374.0, "send_replies": true,
        "parent_id": "t1_dqlia4a", "score": 6, "author_fullname": "t2_1134xk", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "You can also use iterators and zip/chain/map/filter etc for a more concise
        solution!", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqlnnjx", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You
        can also use iterators and zip/chain/map/filter etc for a more concise solution!&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlnnjx/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512118374.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 6}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 2, "name": "t1_dqmem5g",
        "id": "dqmem5g", "parent_id": "t1_dqlpalb", "depth": 2, "children": ["dqmem5g"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "dqlpalb", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "GalacticDessert", "can_mod_post": false,
        "created_utc": 1512122882.0, "send_replies": true, "parent_id": "t1_dqlia4a",
        "score": 4, "author_fullname": "t2_f8lvtou", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "Dang I am just getting
        started with rust and everything I get is mismatched types.", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqlpalb",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Dang I am just getting
        started with rust and everything I get is mismatched types.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlpalb/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512122882.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 2, "name": "t1_dqpr8fs",
        "id": "dqpr8fs", "parent_id": "t1_dqm68dp", "depth": 2, "children": ["dqpr8fs",
        "dqne32y"]}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "dqm68dp", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "sciyoshi",
        "can_mod_post": false, "created_utc": 1512147444.0, "send_replies": true,
        "parent_id": "t1_dqlia4a", "score": 2, "author_fullname": "t2_3x2at", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Great seeing Rust solutions here! Here''s mine using iterators (zip+cycle+skip):\n\nhttps://github.com/sciyoshi/advent-of-rust-2017/blob/master/src/day1/mod.rs",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqm68dp", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Great
        seeing Rust solutions here! Here&amp;#39;s mine using iterators (zip+cycle+skip):&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/sciyoshi/advent-of-rust-2017/blob/master/src/day1/mod.rs\"&gt;https://github.com/sciyoshi/advent-of-rust-2017/blob/master/src/day1/mod.rs&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm68dp/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512147444.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "more",
        "data": {"count": 1, "name": "t1_dqm4xo1", "id": "dqm4xo1", "parent_id": "t1_dqlia4a",
        "depth": 1, "children": ["dqm4xo1"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "dqlia4a", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        false, "author": "throwaway893teoea", "can_mod_post": false, "created_utc":
        1512107054.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 7,
        "author_fullname": "t2_mpxa4kp", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "I used Rust:\n\n    use std::io::BufRead;\n\n    fn
        main() {\n        let stdin = std::io::stdin();\n        for line in stdin.lock().lines()
        {\n            let line = line.unwrap();\n            let mut i = 0;\n            let
        mut acc: u64 = 0;\n            let bytes = line.as_bytes();\n            while
        i &lt; bytes.len() - 1 {\n                let the_num = bytes[i] as u64;\n                if
        bytes[i] == bytes[i+1] {\n                    acc += the_num - 48;\n                }\n                i
        += 1;\n            }\n            if bytes[0] == bytes[bytes.len()-1] {\n                acc
        += bytes[0] as u64 - 48;\n            }\n            println!(\"{}\", acc);\n        }\n    }\n\npart
        2:\n\n    use std::io::BufRead;\n\n    fn main() {\n        let stdin = std::io::stdin();\n        for
        line in stdin.lock().lines() {\n            let line = line.unwrap();\n            let
        mut i = 0;\n            let mut acc: u64 = 0;\n            let bytes = line.as_bytes();\n            while
        i &lt; bytes.len() {\n                let the_num = bytes[i % bytes.len()]
        as u64;\n                if bytes[i] == bytes[(i + bytes.len() / 2) % bytes.len()]
        {\n                    acc += the_num - 48;\n                }\n                i
        += 1;\n            }\n            println!(\"{}\", acc);\n        }\n    }\n\n",
        "edited": 1512107549.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqlia4a", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        used Rust:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use std::io::BufRead;\n\nfn
        main() {\n    let stdin = std::io::stdin();\n    for line in stdin.lock().lines()
        {\n        let line = line.unwrap();\n        let mut i = 0;\n        let
        mut acc: u64 = 0;\n        let bytes = line.as_bytes();\n        while i &amp;lt;
        bytes.len() - 1 {\n            let the_num = bytes[i] as u64;\n            if
        bytes[i] == bytes[i+1] {\n                acc += the_num - 48;\n            }\n            i
        += 1;\n        }\n        if bytes[0] == bytes[bytes.len()-1] {\n            acc
        += bytes[0] as u64 - 48;\n        }\n        println!(&amp;quot;{}&amp;quot;,
        acc);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;part 2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use
        std::io::BufRead;\n\nfn main() {\n    let stdin = std::io::stdin();\n    for
        line in stdin.lock().lines() {\n        let line = line.unwrap();\n        let
        mut i = 0;\n        let mut acc: u64 = 0;\n        let bytes = line.as_bytes();\n        while
        i &amp;lt; bytes.len() {\n            let the_num = bytes[i % bytes.len()]
        as u64;\n            if bytes[i] == bytes[(i + bytes.len() / 2) % bytes.len()]
        {\n                acc += the_num - 48;\n            }\n            i += 1;\n        }\n        println!(&amp;quot;{}&amp;quot;,
        acc);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlia4a/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512107054.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 7}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqli00o", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "miran1", "can_mod_post": false, "created_utc":
        1512106597.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 7,
        "author_fullname": "t2_5nuj7", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Nim:\n\n    var numbers: seq[int] = @[]\n    for
        i in readFile(\"./inputs/01.txt\"):\n      numbers.add(int(i) - int(''0''))\n    \n    proc
        solve(numbers: seq[int], secondPart=false): int =\n      let\n        size
        = len(numbers)\n        jump = if secondPart: size div 2 else: 1\n      for
        i, n in numbers:\n        if n == numbers[(i + jump) mod size]:\n          result
        += n\n          \n    echo solve(numbers)\n    echo solve(numbers, secondPart=true)\n    ",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqli00o", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nim:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var
        numbers: seq[int] = @[]\nfor i in readFile(&amp;quot;./inputs/01.txt&amp;quot;):\n  numbers.add(int(i)
        - int(&amp;#39;0&amp;#39;))\n\nproc solve(numbers: seq[int], secondPart=false):
        int =\n  let\n    size = len(numbers)\n    jump = if secondPart: size div
        2 else: 1\n  for i, n in numbers:\n    if n == numbers[(i + jump) mod size]:\n      result
        += n\n\necho solve(numbers)\necho solve(numbers, secondPart=true)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqli00o/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512106597.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 7}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 2, "name": "t1_dqm4ny0",
        "id": "dqm4ny0", "parent_id": "t1_dqlvi8o", "depth": 1, "children": ["dqm4ny0",
        "dqm4cti"]}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "dqlvi8o", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "thomastc",
        "can_mod_post": false, "created_utc": 1512136129.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 7, "author_fullname": "t2_aje7x", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "No
        love for SQL yet? [Day 1 in PostgreSQL](https://github.com/ttencate/aoc2017/tree/master/01_postgresql).\n\n    WITH\n    digits
        AS (\n      SELECT\n        to_number(digits.digit, ''9'') AS digit, (digits.index
        - 1) AS index\n      FROM\n        unnest(string_to_array(btrim(pg_read_file(''input'',
        0, 999999), E'' \\r\\n''), NULL))\n        WITH ORDINALITY AS digits(digit,
        index)\n    ),\n    num_digits AS (\n      SELECT\n        COUNT(*) as num_digits\n      FROM\n        digits\n    ),\n    next_digits
        AS (\n      SELECT\n        digit, (index - 1 + num_digits) % num_digits AS
        index\n      FROM\n        digits\n        JOIN num_digits ON true\n    )\n    SELECT\n      SUM(digits.digit)
        AS answer\n    FROM\n      digits\n      JOIN next_digits USING (index)\n    WHERE\n      digits.digit
        = next_digits.digit\n    ;\n\nDisclaimer: I don''t know what I''m doing.\n\n",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqlvi8o", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No
        love for SQL yet? &lt;a href=\"https://github.com/ttencate/aoc2017/tree/master/01_postgresql\"&gt;Day
        1 in PostgreSQL&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;WITH\ndigits
        AS (\n  SELECT\n    to_number(digits.digit, &amp;#39;9&amp;#39;) AS digit,
        (digits.index - 1) AS index\n  FROM\n    unnest(string_to_array(btrim(pg_read_file(&amp;#39;input&amp;#39;,
        0, 999999), E&amp;#39; \\r\\n&amp;#39;), NULL))\n    WITH ORDINALITY AS digits(digit,
        index)\n),\nnum_digits AS (\n  SELECT\n    COUNT(*) as num_digits\n  FROM\n    digits\n),\nnext_digits
        AS (\n  SELECT\n    digit, (index - 1 + num_digits) % num_digits AS index\n  FROM\n    digits\n    JOIN
        num_digits ON true\n)\nSELECT\n  SUM(digits.digit) AS answer\nFROM\n  digits\n  JOIN
        next_digits USING (index)\nWHERE\n  digits.digit = next_digits.digit\n;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Disclaimer:
        I don&amp;#39;t know what I&amp;#39;m doing.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlvi8o/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512136129.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 7}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlp7zx", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "coldpleasure", "can_mod_post": false,
        "created_utc": 1512122679.0, "send_replies": true, "parent_id": "t3_7gsrc2",
        "score": 6, "author_fullname": "t2_663o3", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Python, no regex:\n\n    def
        captcha1(digits):\n    \treturn sum(int(digits[i]) \n    \t\t\t   for i in
        range(len(digits)) \n    \t\t\t   if digits[i] == digits[(i+1)%len(digits)])\n    \n    def
        captcha2(digits):\n    \treturn sum(int(digits[i])\n    \t\t\t   for i in
        range(len(digits))\n    \t\t\t   if digits[i] == digits[(i+len(digits)/2)%len(digits)])    ",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqlp7zx", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python,
        no regex:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def captcha1(digits):\n    return
        sum(int(digits[i]) \n               for i in range(len(digits)) \n               if
        digits[i] == digits[(i+1)%len(digits)])\n\ndef captcha2(digits):\n    return
        sum(int(digits[i])\n               for i in range(len(digits))\n               if
        digits[i] == digits[(i+len(digits)/2)%len(digits)])    \n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlp7zx/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512122679.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 6}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqli2oy", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "willkill07", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_dqlhnyn", "score": 2, "author_fullname": "t2_7j0ca",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "^ This\n\n1000x this. There is no need to
        pull out beefy parsers to go from a character to a string to an int.\n", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqli2oy",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;^ This&lt;/p&gt;\n\n&lt;p&gt;1000x
        this. There is no need to pull out beefy parsers to go from a character to
        a string to an int.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_7gsrc2", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqli2oy/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512106719.0,
        "author_flair_text": null, "treatment_tags": [], "created_utc": 1512106719.0,
        "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0, "depth":
        3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "dqlhnyn", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "lemon-meringue", "can_mod_post": false,
        "send_replies": true, "parent_id": "t1_dqlhjxf", "score": 4, "author_fullname":
        "t2_cvr13", "removal_reason": null, "approved_by": null, "mod_note": null,
        "all_awardings": [], "body": "You can also do\n\n    int x = input.charAt(i)
        - ''0'';\n\nexploiting the fact that they''re single digits and ASCII.", "edited":
        false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null,
        "name": "t1_dqlhnyn", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You
        can also do&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;int x = input.charAt(i) -
        &amp;#39;0&amp;#39;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;exploiting the
        fact that they&amp;#39;re single digits and ASCII.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhnyn/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512106062.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512106062.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}], "before": null}},
        "user_reports": [], "saved": false, "id": "dqlhjxf", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "VeeArr", "can_mod_post": false, "created_utc":
        1512105887.0, "send_replies": true, "parent_id": "t1_dqlh2gq", "score": 4,
        "author_fullname": "t2_6h8f6", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "&gt; how to turn a char into
        an int\n\nTIL. This is way prettier than\n\n    Integer.valueOf(input.substring(i,
        i + 1))", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqlhjxf", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;how
        to turn a char into an int&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;TIL.
        This is way prettier than&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Integer.valueOf(input.substring(i,
        i + 1))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_7gsrc2", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhjxf/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512105887.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 4}}, {"kind": "more", "data": {"count": 2, "name": "t1_dqltdco",
        "id": "dqltdco", "parent_id": "t1_dqlh2gq", "depth": 1, "children": ["dqltdco"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "dqlh2gq", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "Sario25", "can_mod_post": false, "created_utc":
        1512105154.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 5,
        "author_fullname": "t2_91j2x", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Tried to use java, forgot how to turn a char
        into an int, whoops\n\\#111th\n\nDirty java:\n\n      public static void main(String[]
        args) throws Exception {\n         Scanner infile = new Scanner(new File(\"src/Day1/instructions\"));\n         String
        thing = infile.nextLine();\n         int sum=0;\n\n         for(int i=0;i&lt;thing.length()-1;i++)
        {\n            if(Character.getNumericValue(thing.charAt(i))==Character.getNumericValue(thing.charAt((i+(thing.length()/2))%thing.length())))\n               sum+=Character.getNumericValue(thing.charAt(i));\n         }\n         System.out.print(sum);\n      }",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqlh2gq", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Tried
        to use java, forgot how to turn a char into an int, whoops\n#111th&lt;/p&gt;\n\n&lt;p&gt;Dirty
        java:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;  public static void main(String[]
        args) throws Exception {\n     Scanner infile = new Scanner(new File(&amp;quot;src/Day1/instructions&amp;quot;));\n     String
        thing = infile.nextLine();\n     int sum=0;\n\n     for(int i=0;i&amp;lt;thing.length()-1;i++)
        {\n        if(Character.getNumericValue(thing.charAt(i))==Character.getNumericValue(thing.charAt((i+(thing.length()/2))%thing.length())))\n           sum+=Character.getNumericValue(thing.charAt(i));\n     }\n     System.out.print(sum);\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlh2gq/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512105154.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 5}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 5, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlkqwh", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "u794575248", "can_mod_post": false, "created_utc":
        1512111650.0, "send_replies": true, "parent_id": "t1_dqlhgbj", "score": 3,
        "author_fullname": "t2_larkuvo", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "It is. Here''s my [solution](https://www.reddit.com/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlkm3a/)
        in Python.", "edited": 1512113311.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqlkqwh", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It
        is. Here&amp;#39;s my &lt;a href=\"https://www.reddit.com/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlkm3a/\"&gt;solution&lt;/a&gt;
        in Python.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null,
        "distinguished": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "link_id": "t3_7gsrc2", "unrepliable_reason": null,
        "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlkqwh/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512111650.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqloeqb", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Smylers", "can_mod_post": false, "created_utc":
        1512120409.0, "send_replies": true, "parent_id": "t1_dqlhgbj", "score": 2,
        "author_fullname": "t2_13cudg", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Here''s a regex that works
        for both part\u00a01 and part\u00a02 (set `$skip` appropriately):\n\n    $total
        += $1 while $input =~ /(.)(?=.{$skip}\\1)/g;\n\nThat''s Perl, but the equivalent
        regex should work elsewhere. [Full solution](https://www.reddit.com/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/#dqlo8am).",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqloeqb", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s
        a regex that works for both part\u00a01 and part\u00a02 (set &lt;code&gt;$skip&lt;/code&gt;
        appropriately):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$total += $1 while $input
        =~ /(.)(?=.{$skip}\\1)/g;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That&amp;#39;s
        Perl, but the equivalent regex should work elsewhere. &lt;a href=\"https://www.reddit.com/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/#dqlo8am\"&gt;Full
        solution&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_7gsrc2", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqloeqb/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512120409.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 2}}, {"kind": "more", "data": {"count": 3, "name": "t1_dqlhija",
        "id": "dqlhija", "parent_id": "t1_dqlhgbj", "depth": 1, "children": ["dqlhija"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "dqlhgbj", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "[deleted]", "can_mod_post": false, "send_replies":
        true, "parent_id": "t3_7gsrc2", "score": 5, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "is it possible
        to complete this challenge task using regex?", "edited": false, "downs": 0,
        "author_flair_css_class": null, "collapsed": false, "is_submitter": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;is it possible to complete
        this challenge task using regex?&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "associated_award": null, "stickied": false, "subreddit_type":
        "public", "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhgbj/", "num_reports":
        null, "locked": false, "name": "t1_dqlhgbj", "created": 1512105730.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512105730.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 6, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "more",
        "data": {"count": 4, "name": "t1_dqlo2fa", "id": "dqlo2fa", "parent_id": "t1_dqlhkrf",
        "depth": 1, "children": ["dqlo2fa", "dqljnyz"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "dqlhkrf", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": "DELETED", "no_follow":
        false, "author": "[deleted]", "can_mod_post": false, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 6, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "[deleted]",
        "edited": 1512121021.0, "downs": 0, "author_flair_css_class": null, "collapsed":
        true, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhkrf/",
        "num_reports": null, "locked": false, "name": "t1_dqlhkrf", "created": 1512105922.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512105922.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 4, "name": "t1_dqlndaf",
        "id": "dqlndaf", "parent_id": "t1_dqljxa3", "depth": 1, "children": ["dqlndaf"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "dqljxa3", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "wlandry", "can_mod_post": false, "created_utc":
        1512110020.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 4,
        "author_fullname": "t2_810ls", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "C++:  Short and sweet (part 2)\n\n    #include
        &lt;string&gt;\n    #include &lt;iostream&gt;\n    \n    int main(int argc,
        char *argv[])\n    {\n      std::string in (argv[1]);\n      size_t total
        (0);\n      for (int i=0; i&lt;in.size(); ++i)\n        {\n          if (in[i]
        == in[(i+(in.size()/2))%in.size()])\n            {\n              total +=
        in[i]-''0'';\n            }\n        }\n      std::cout &lt;&lt; \"total:
        \" &lt;&lt; total &lt;&lt; \"\\n\";\n    }\n", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqljxa3", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C++:  Short and sweet (part
        2)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;string&amp;gt;\n#include
        &amp;lt;iostream&amp;gt;\n\nint main(int argc, char *argv[])\n{\n  std::string
        in (argv[1]);\n  size_t total (0);\n  for (int i=0; i&amp;lt;in.size(); ++i)\n    {\n      if
        (in[i] == in[(i+(in.size()/2))%in.size()])\n        {\n          total +=
        in[i]-&amp;#39;0&amp;#39;;\n        }\n    }\n  std::cout &amp;lt;&amp;lt;
        &amp;quot;total: &amp;quot; &amp;lt;&amp;lt; total &amp;lt;&amp;lt; &amp;quot;\\n&amp;quot;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqljxa3/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512110020.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 4, "name": "t1_dqm3cr3",
        "id": "dqm3cr3", "parent_id": "t1_dqllf0m", "depth": 1, "children": ["dqm3cr3",
        "dqsucar"]}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "dqllf0m", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "schod",
        "can_mod_post": false, "created_utc": 1512113047.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 4, "author_fullname": "t2_90dh78q", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "BASH
        time :D \n\n    #!/bin/bash\n\n    function do_magic {\n      X=$1\n      I=0\n      RES=0\n\n      while
        [  $I -lt ${#X} ]; do\n        let Ip=I+1\n        N=${X:$I:1}\n        Np=${X:$Ip:1}\n\n        if
        [ \"$Np\" == \"\" ]; then\n          Np=${X:0:1}\n        fi\n\n        if
        [ \"$N\" == \"$Np\" ]; then\n          let RES=RES+N\n        fi\n\n        let
        I=I+1\n      done\n\n      echo \"$RES\"\n    }\n\n    # MAIN\n    for N in
        1122 1111 1234 91212129; do\n      do_magic $N\n    done\n", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqllf0m",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;BASH time :D &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/bin/bash\n\nfunction
        do_magic {\n  X=$1\n  I=0\n  RES=0\n\n  while [  $I -lt ${#X} ]; do\n    let
        Ip=I+1\n    N=${X:$I:1}\n    Np=${X:$Ip:1}\n\n    if [ &amp;quot;$Np&amp;quot;
        == &amp;quot;&amp;quot; ]; then\n      Np=${X:0:1}\n    fi\n\n    if [ &amp;quot;$N&amp;quot;
        == &amp;quot;$Np&amp;quot; ]; then\n      let RES=RES+N\n    fi\n\n    let
        I=I+1\n  done\n\n  echo &amp;quot;$RES&amp;quot;\n}\n\n# MAIN\nfor N in 1122
        1111 1234 91212129; do\n  do_magic $N\ndone\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqllf0m/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512113047.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 2, "removal_reason": null, "link_id": "t3_7gsrc2",
        "author_flair_template_id": null, "likes": null, "replies": {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "more", "data": {"count": 2, "name": "t1_dqlsrxa", "id": "dqlsrxa",
        "parent_id": "t1_dqlrx4a", "depth": 2, "children": ["dqlsrxa"]}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "dqlrx4a", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "[deleted]", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_dqlonjs", "score": 2, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "That looks
        really nice :)  quite clear too I''d guess if I was better at parsing . notation
        :p", "edited": false, "author_flair_css_class": null, "collapsed": false,
        "downs": 0, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That
        looks really nice :)  quite clear too I&amp;#39;d guess if I was better at
        parsing . notation :p&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "subreddit_type": "public",
        "can_gild": false, "top_awarded_type": null, "unrepliable_reason": null, "author_flair_text_color":
        "dark", "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlrx4a/",
        "num_reports": null, "locked": false, "name": "t1_dqlrx4a", "created": 1512129822.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512129822.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "dqlonjs", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "yogsototh", "can_mod_post": false, "created_utc":
        1512121080.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 6,
        "author_fullname": "t2_3urbh", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Haskell not golfed\n\n    (&amp;) :: a -&gt;
        (a -&gt; b) -&gt; b\n    x &amp; f = f x\n    \n    day1 :: String -&gt; Int\n    day1
        code = code\n      &amp; cycle\n      &amp; tail\n      &amp; zip code\n      &amp;
        filter (uncurry (==))\n      &amp; map ((\\x -&gt; x - ord ''0'') . ord .
        fst)\n      &amp; folds'' (+) 0\n\nedit: for solution2, simply replace `tail`
        by ``drop (length code `div` 2)``.", "edited": 1512169305.0, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqlonjs", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Haskell not golfed&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(&amp;amp;)
        :: a -&amp;gt; (a -&amp;gt; b) -&amp;gt; b\nx &amp;amp; f = f x\n\nday1 ::
        String -&amp;gt; Int\nday1 code = code\n  &amp;amp; cycle\n  &amp;amp; tail\n  &amp;amp;
        zip code\n  &amp;amp; filter (uncurry (==))\n  &amp;amp; map ((\\x -&amp;gt;
        x - ord &amp;#39;0&amp;#39;) . ord . fst)\n  &amp;amp; folds&amp;#39; (+)
        0\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;edit: for solution2, simply replace
        &lt;code&gt;tail&lt;/code&gt; by &lt;code&gt;drop (length code `div` 2)&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlonjs/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512121080.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 6}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlox8u", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "f0086", "can_mod_post": false, "created_utc":
        1512121827.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 5,
        "author_fullname": "t2_d8g3g", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Emacs elisp:\n\n    (defun calculate (pos
        digs offset)\n      (let ((current (nth pos digs))\n            (comp (nth
        offset digs)))\n        (if (= current comp) current 0)))\n    \n    (defun
        reverse-captcha (digs offset)\n      (let ((answer 0)\n            (len (length
        digs)))\n        (dotimes (pos len)\n          (setq answer (+ answer\n                          (calculate
        pos digs (% (+ pos offset) len)))))\n        answer))\n    \n    (defun day1
        (input offset-fn)\n      (let* ((digits (mapcar ''string-to-number (split-string
        input \"\" t)))\n             (len (length digits))\n             (offset
        (funcall offset-fn len) len))\n        (reverse-captcha digits offset)))\n    \n    (day1
        input1 (lambda (l) 1))\n    (day1 input2 (lambda (l) (/ l 2)))", "edited":
        1512167768.0, "top_awarded_type": null, "author_flair_css_class": null, "name":
        "t1_dqlox8u", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Emacs
        elisp:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(defun calculate (pos digs offset)\n  (let
        ((current (nth pos digs))\n        (comp (nth offset digs)))\n    (if (= current
        comp) current 0)))\n\n(defun reverse-captcha (digs offset)\n  (let ((answer
        0)\n        (len (length digs)))\n    (dotimes (pos len)\n      (setq answer
        (+ answer\n                      (calculate pos digs (% (+ pos offset) len)))))\n    answer))\n\n(defun
        day1 (input offset-fn)\n  (let* ((digits (mapcar &amp;#39;string-to-number
        (split-string input &amp;quot;&amp;quot; t)))\n         (len (length digits))\n         (offset
        (funcall offset-fn len) len))\n    (reverse-captcha digits offset)))\n\n(day1
        input1 (lambda (l) 1))\n(day1 input2 (lambda (l) (/ l 2)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlox8u/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512121827.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 5}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlp38a", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "smarzzz", "can_mod_post": false, "created_utc":
        1512122296.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 10,
        "author_fullname": "t2_jrx4y", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Jesus Christ (I felt this was appropriate
        to say, given the christmas vibe), you all have produced very fancy solutions.\n\n\n[I
        did in in Javascript, but tried to visualize the circle. Repeated numbers
        have been highlighted in the wheel, the brighter the color, the higher the
        number.](https://hasmaxfinished.today/adventofcode/day1/)\n\n\t\t\t\n\tfor
        (i=1; i&lt;input.length; i++){\n \t\tif (input[i] == input [i-1]){\n \t\t\t\n
        \t\t\tfill(floor(255*Number(input[i])/9));\n \t\t\tstroke(floor(255*Number(input[i])/9));\n
        \t\t\tarc(width/2, height/2, height/1.5, height/1.5, (2*PI*i/input.length),
        (2*PI*i/input.length)+2*PI/input.length);\n\t\t\tcounter += Number(input[i]);\n\t\t}\n\t}\n\tif
        (input[0] == input[i-1])\n\t\tcounter += Number(input[0])\n\tconsole.log(counter)\n\t\n\tpush();\n\ttranslate(width/2,25);\n\ttextSize(70);\n\tfill(151);\n\ttext(counter,
        -textWidth(counter)/2, 70)\n\tpop();\n\t\n\ttranslate(width/2, height/2);\n\trotate(PI/2
        );\n\ttextSize(10);\n\tnoStroke();\n\tfill(152);\n\n\tfor (i = 0; i &lt; input.length;i++)
        {\n\t    currentChar = input[i]; \n \t    rotate(2*PI/input.length);\n\t    push();\n\t    translate(0,
        -r);\n\t    text(currentChar, 0, 0);\n\t    pop();\n  \t}\n\nAround the circle
        we find the string with input. You can''t read is because there are way to
        many, but i tried plotting the text on a curved path. ", "edited": 1512123861.0,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqlp38a",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Jesus Christ (I felt
        this was appropriate to say, given the christmas vibe), you all have produced
        very fancy solutions.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://hasmaxfinished.today/adventofcode/day1/\"&gt;I
        did in in Javascript, but tried to visualize the circle. Repeated numbers
        have been highlighted in the wheel, the brighter the color, the higher the
        number.&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for (i=1; i&amp;lt;input.length;
        i++){\n    if (input[i] == input [i-1]){\n\n        fill(floor(255*Number(input[i])/9));\n        stroke(floor(255*Number(input[i])/9));\n        arc(width/2,
        height/2, height/1.5, height/1.5, (2*PI*i/input.length), (2*PI*i/input.length)+2*PI/input.length);\n        counter
        += Number(input[i]);\n    }\n}\nif (input[0] == input[i-1])\n    counter +=
        Number(input[0])\nconsole.log(counter)\n\npush();\ntranslate(width/2,25);\ntextSize(70);\nfill(151);\ntext(counter,
        -textWidth(counter)/2, 70)\npop();\n\ntranslate(width/2, height/2);\nrotate(PI/2
        );\ntextSize(10);\nnoStroke();\nfill(152);\n\nfor (i = 0; i &amp;lt; input.length;i++)
        {\n    currentChar = input[i]; \n    rotate(2*PI/input.length);\n    push();\n    translate(0,
        -r);\n    text(currentChar, 0, 0);\n    pop();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Around
        the circle we find the string with input. You can&amp;#39;t read is because
        there are way to many, but i tried plotting the text on a curved path. &lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlp38a/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512122296.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 10}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlhi3c", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "DFreiberg", "can_mod_post": false, "created_utc":
        1512105807.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 4,
        "author_fullname": "t2_87ozx", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Quick one-liner in Mathematica that took
        me three lines to make legible.  #47.\n\n    input=Import[FileNameJoin[{NotebookDirectory[],\"Day1Input.txt\"}]];\n    s=ToExpression/@Characters[input];\n    Total[Table[If[s[[i]]==RotateRight[s,1][[i]],s[[i]],0],{i,Length[s]-1}]]",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqlhi3c", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Quick
        one-liner in Mathematica that took me three lines to make legible.  #47.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;input=Import[FileNameJoin[{NotebookDirectory[],&amp;quot;Day1Input.txt&amp;quot;}]];\ns=ToExpression/@Characters[input];\nTotal[Table[If[s[[i]]==RotateRight[s,1][[i]],s[[i]],0],{i,Length[s]-1}]]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhi3c/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512105807.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "more", "data": {"count":
        1, "name": "t1_dqo6uu6", "id": "dqo6uu6", "parent_id": "t1_dqljm5y", "depth":
        2, "children": ["dqo6uu6"]}}], "before": null}}, "user_reports": [], "saved":
        false, "id": "dqljm5y", "banned_at_utc": null, "mod_reason_title": null, "gilded":
        0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author":
        "_jonah", "can_mod_post": false, "created_utc": 1512109429.0, "send_replies":
        true, "parent_id": "t1_dqljehy", "score": 2, "author_fullname": "t2_sqnqz",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "Nice to see a fellow J user.  The one I posted is similar, but
        I pulled out a single dyadic verb for both cases (after the fact).", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqljm5y",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nice to see a fellow
        J user.  The one I posted is similar, but I pulled out a single dyadic verb
        for both cases (after the fact).&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqljm5y/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512109429.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "dqljehy", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "Godspiral", "can_mod_post": false, "created_utc":
        1512109027.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 6,
        "author_fullname": "t2_1pvj", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "woke up late but in J,\n\n    a =. wdclippaste
        ''''\n    +/ (}: #~ 2 =/\\ ]) ({. ,~ ] )\".\"0 a NB. part1\n    +/ (#~ ] =
        -:@# |. ] )\".\"0 a NB. part2\n    \nmight have been under 3m", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqljehy",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;woke up late but in
        J,&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;a =. wdclippaste &amp;#39;&amp;#39;\n+/
        (}: #~ 2 =/\\ ]) ({. ,~ ] )&amp;quot;.&amp;quot;0 a NB. part1\n+/ (#~ ] =
        -:@# |. ] )&amp;quot;.&amp;quot;0 a NB. part2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;might
        have been under 3m&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqljehy/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512109027.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_7gsrc2", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 6}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "more", "data": {"count":
        4, "name": "t1_dqlzi77", "id": "dqlzi77", "parent_id": "t1_dqlnz7b", "depth":
        1, "children": ["dqlzi77"]}}], "before": null}}, "user_reports": [], "saved":
        false, "id": "dqlnz7b", "banned_at_utc": null, "mod_reason_title": null, "gilded":
        0, "archived": true, "collapsed_reason_code": null, "no_follow": false, "author":
        "tehjimmeh", "can_mod_post": false, "created_utc": 1512119231.0, "send_replies":
        true, "parent_id": "t3_7gsrc2", "score": 4, "author_fullname": "t2_49ft0",
        "approved_by": null, "mod_note": null, "all_awardings": [], "collapsed": false,
        "body": "C++ Part 1, abusing std::accumulate:\n\n    int main(int argc, char*
        argv[]) {\n        std::vector&lt;char&gt; input(std::istream_iterator&lt;char&gt;(std::ifstream(argv[1])),
        {});\n        std::cout &lt;&lt; (std::accumulate(input.begin(), input.end(),
        std::make_pair(*(input.rbegin()), 0),\n            [](auto x, auto c){ return
        std::make_pair(c, x.second + ((x.first == c) ? (c-''0'') : 0));})).second
        &lt;&lt; \"\\n\";\n    }\n\nNon-abusive part 2 solution:\n\n    int main(int
        argc, char* argv[]) {\n        std::vector&lt;char&gt; a(std::istream_iterator&lt;char&gt;(std::ifstream(argv[1])),
        {}), b;\n        std::rotate_copy(a.begin(), (a.begin() + a.size()/2), a.end(),
        std::back_inserter(b));\n        std::transform(a.begin(), a.end(), b.begin(),
        a.begin(), [](auto x, auto y) { return x == y ? x-''0'' : 0; });\n        std::cout
        &lt;&lt; std::accumulate(a.begin(), a.end(), 0) &lt;&lt; \"\\n\";\n    }\n\nReplace
        ''a.size()/2'' with ''(a.size() - 1)'' for part 1.", "edited": 1512156607.0,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqlnz7b",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C++ Part 1, abusing
        std::accumulate:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;int main(int argc, char*
        argv[]) {\n    std::vector&amp;lt;char&amp;gt; input(std::istream_iterator&amp;lt;char&amp;gt;(std::ifstream(argv[1])),
        {});\n    std::cout &amp;lt;&amp;lt; (std::accumulate(input.begin(), input.end(),
        std::make_pair(*(input.rbegin()), 0),\n        [](auto x, auto c){ return
        std::make_pair(c, x.second + ((x.first == c) ? (c-&amp;#39;0&amp;#39;) : 0));})).second
        &amp;lt;&amp;lt; &amp;quot;\\n&amp;quot;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Non-abusive
        part 2 solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;int main(int argc, char*
        argv[]) {\n    std::vector&amp;lt;char&amp;gt; a(std::istream_iterator&amp;lt;char&amp;gt;(std::ifstream(argv[1])),
        {}), b;\n    std::rotate_copy(a.begin(), (a.begin() + a.size()/2), a.end(),
        std::back_inserter(b));\n    std::transform(a.begin(), a.end(), b.begin(),
        a.begin(), [](auto x, auto y) { return x == y ? x-&amp;#39;0&amp;#39; : 0;
        });\n    std::cout &amp;lt;&amp;lt; std::accumulate(a.begin(), a.end(), 0)
        &amp;lt;&amp;lt; &amp;quot;\\n&amp;quot;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Replace
        &amp;#39;a.size()/2&amp;#39; with &amp;#39;(a.size() - 1)&amp;#39; for part
        1.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason": null,
        "distinguished": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlnz7b/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512119231.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlotn7", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "ZoDalek", "can_mod_post": false, "created_utc":
        1512121554.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 4,
        "author_fullname": "t2_12jkz0", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "C (part 2):\n\n    char *line;\n    int len,
        sum = 0, i;\n\n    /* ... */\n\n    for (i=0; i&lt;len/2; i++)\n        if
        (line[i] == line[len/2 + i])\n            sum += line[i]-''0'';\n\n    printf(\"%d\\n\",
        sum*2);\n", "edited": 1512125520.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqlotn7", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C
        (part 2):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;char *line;\nint len, sum =
        0, i;\n\n/* ... */\n\nfor (i=0; i&amp;lt;len/2; i++)\n    if (line[i] == line[len/2
        + i])\n        sum += line[i]-&amp;#39;0&amp;#39;;\n\nprintf(&amp;quot;%d\\n&amp;quot;,
        sum*2);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlotn7/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512121554.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "more",
        "data": {"count": 2, "name": "t1_dqrtwwb", "id": "dqrtwwb", "parent_id": "t1_dqlugkt",
        "depth": 3, "children": ["dqrtwwb"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "dqlugkt", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        false, "author": "ramilllies", "can_mod_post": false, "send_replies": true,
        "parent_id": "t1_dqlpf1v", "score": 5, "author_fullname": "t2_506jpy0", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "I used this for part B:\n`sub MAIN(Str $s)\n{\n\tsay [+] $s.comb &gt;&gt;*&gt;&gt;
        ( [Z==] $s.comb($s.chars +&gt; 1).map(*.comb))\n}`\nBy the way, your boilerplate
        for slurping the input file is nice! I should adopt something like that too.",
        "edited": 1512134954.0, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_dqlugkt", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        used this for part B:\n&lt;code&gt;sub MAIN(Str $s)\n{\n    say [+] $s.comb
        &amp;gt;&amp;gt;*&amp;gt;&amp;gt; ( [Z==] $s.comb($s.chars +&amp;gt; 1).map(*.comb))\n}&lt;/code&gt;\nBy
        the way, your boilerplate for slurping the input file is nice! I should adopt
        something like that too.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_7gsrc2", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlugkt/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512134555.0,
        "author_flair_text": null, "treatment_tags": [], "created_utc": 1512134555.0,
        "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0, "depth":
        2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 5}}], "before": null}},
        "user_reports": [], "saved": false, "id": "dqlpf1v", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "mschaap", "can_mod_post": false, "created_utc":
        1512123233.0, "send_replies": true, "parent_id": "t1_dqlp7lh", "score": 3,
        "author_fullname": "t2_13dwf0", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Here''s a \u201cone-liner\u201d
        version of part b:\n\n    #!/usr/bin/env perl6\n\n    use v6.c;\n\n    multi
        sub MAIN(Str $input)\n    {\n        say ($input.comb Z $input.comb.List.rotate($input.chars
        div 2))\n            .grep({ [==] @$_ })\n            .map({ $_[0] })\n            .sum;\n    }\n\n    multi
        sub MAIN(Str $inputfile where *.IO.f)\n    {\n        MAIN($inputfile.IO.slurp.trim);\n    }\n\n    multi
        sub MAIN()\n    {\n        MAIN(~$*PROGRAM.parent.child(''aoc1.input''));\n    }\n",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqlpf1v", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s
        a \u201cone-liner\u201d version of part b:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/usr/bin/env
        perl6\n\nuse v6.c;\n\nmulti sub MAIN(Str $input)\n{\n    say ($input.comb
        Z $input.comb.List.rotate($input.chars div 2))\n        .grep({ [==] @$_ })\n        .map({
        $_[0] })\n        .sum;\n}\n\nmulti sub MAIN(Str $inputfile where *.IO.f)\n{\n    MAIN($inputfile.IO.slurp.trim);\n}\n\nmulti
        sub MAIN()\n{\n    MAIN(~$*PROGRAM.parent.child(&amp;#39;aoc1.input&amp;#39;));\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlpf1v/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512123233.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}], "before": null}},
        "user_reports": [], "saved": false, "id": "dqlp7lh", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "mschaap", "can_mod_post": false, "created_utc":
        1512122647.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 5,
        "author_fullname": "t2_13dwf0", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Perl 6.\nPart a is pretty much a one-liner,
        for part b I couldn''t figure out an efficient way to do that.\nUsed a MAIN
        sub for easy command-line handling, and made it a multi so you can call it
        with a string, a filename, or no arguments (in which case it uses aoc1.input
        in the same directory).\n\nPart a:\n\n    #!/usr/bin/env perl6\n\n    use
        v6.c;\n\n    multi sub MAIN(Str $input)\n    {\n        say ($input ~ $input.substr(0,1)).comb.rotor(2=&gt;-1).grep({
        [eq] @$_ }).map({ $_[0] }).sum;\n    }\n\n    multi sub MAIN(Str $inputfile
        where *.IO.f)\n    {\n        MAIN($inputfile.IO.slurp.trim);\n    }\n\n    multi
        sub MAIN()\n    {\n        MAIN(~$*PROGRAM.parent.child(''aoc1.input''));\n    }\n\nPart
        b:\n\n    #!/usr/bin/env perl6\n\n    use v6.c;\n\n    multi sub MAIN(Str
        $input)\n    {\n        my @digits = $input.comb.map(+*);\n        my $skip
        = +@digits div 2;\n        say @digits.pairs.grep({ $_.value == @digits[($_.key
        + $skip) % @digits]}).map(*.value).sum;\n    }\n\n    multi sub MAIN(Str $inputfile
        where *.IO.f)\n    {\n        MAIN($inputfile.IO.slurp.trim);\n    }\n\n    multi
        sub MAIN()\n    {\n        MAIN(~$*PROGRAM.parent.child(''aoc1.input''));\n    }\n",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqlp7lh", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Perl
        6.\nPart a is pretty much a one-liner, for part b I couldn&amp;#39;t figure
        out an efficient way to do that.\nUsed a MAIN sub for easy command-line handling,
        and made it a multi so you can call it with a string, a filename, or no arguments
        (in which case it uses aoc1.input in the same directory).&lt;/p&gt;\n\n&lt;p&gt;Part
        a:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/usr/bin/env perl6\n\nuse v6.c;\n\nmulti
        sub MAIN(Str $input)\n{\n    say ($input ~ $input.substr(0,1)).comb.rotor(2=&amp;gt;-1).grep({
        [eq] @$_ }).map({ $_[0] }).sum;\n}\n\nmulti sub MAIN(Str $inputfile where
        *.IO.f)\n{\n    MAIN($inputfile.IO.slurp.trim);\n}\n\nmulti sub MAIN()\n{\n    MAIN(~$*PROGRAM.parent.child(&amp;#39;aoc1.input&amp;#39;));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        b:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/usr/bin/env perl6\n\nuse v6.c;\n\nmulti
        sub MAIN(Str $input)\n{\n    my @digits = $input.comb.map(+*);\n    my $skip
        = +@digits div 2;\n    say @digits.pairs.grep({ $_.value == @digits[($_.key
        + $skip) % @digits]}).map(*.value).sum;\n}\n\nmulti sub MAIN(Str $inputfile
        where *.IO.f)\n{\n    MAIN($inputfile.IO.slurp.trim);\n}\n\nmulti sub MAIN()\n{\n    MAIN(~$*PROGRAM.parent.child(&amp;#39;aoc1.input&amp;#39;));\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlp7lh/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512122647.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 5}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlqq86", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "AoC--k", "can_mod_post": false, "created_utc":
        1512126881.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 4,
        "author_fullname": "t2_mqs2bcc", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "In [k](http://kparc.com).\n\n    n:.:''*0:\"1.txt\"\n    r:{x_(x+#y)#y}\n    +/n*n=r[1;n]      /part
        1\n    +/n*n=r[_.5*#n;n] /part 2", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_dqlqq86", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;In &lt;a href=\"http://kparc.com\"&gt;k&lt;/a&gt;.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;n:.:&amp;#39;*0:&amp;quot;1.txt&amp;quot;\nr:{x_(x+#y)#y}\n+/n*n=r[1;n]      /part
        1\n+/n*n=r[_.5*#n;n] /part 2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlqq86/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512126881.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 1, "name": "t1_dqrfuq3",
        "id": "dqrfuq3", "parent_id": "t1_dqlujf1", "depth": 1, "children": ["dqrfuq3"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "dqlujf1", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "Jean-Paul_van_Sartre", "can_mod_post":
        false, "created_utc": 1512134677.0, "send_replies": true, "parent_id": "t3_7gsrc2",
        "score": 4, "author_fullname": "t2_nlz4b", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "#C\n\nPart 2 is a
        lot cleaner as usual, one of the best parts of this is that it forces you
        to go back and look at what you''ve done and polish it a little bit further.\n\n[Repo](https://github.com/krokerik/Advent-of-Code/tree/master/2017)\n\n\t#include
        &lt;stdio.h&gt;\n\t#include &lt;stdlib.h&gt;\n\t#include &lt;string.h&gt;\n\n\t#define
        INPUT \"../input/01.txt\"\n\n\tint part1(char* seq);\n\tint part2(char* seq);\n\n\tint
        main() {\n\t\tFILE * fp;\n\t\tchar * line = NULL;\n\t\tsize_t len = 0;\n\n\t\tfp
        = fopen(INPUT, \"r\");\n\t\tif (fp == NULL) {\n\t\t\tperror(INPUT);\n\t\t\texit(EXIT_FAILURE);\n\t\t}\n\n\t\twhile
        (getline(&amp;line, &amp;len, fp) != -1){\n\t\t\tline[strcspn(line, \"\\r\\n\")]
        = 0; //remove line breaks.\n\t\t\tprintf(\"%s: %d %d\\n\\n\", line, part1(line),
        part2(line));\n\t\t}\n\n\t\tfclose(fp);\n\t\tfree(line);\n\t\texit(EXIT_SUCCESS);\n\t}\n\n\tint
        part1(char* seq) {\n\t\tint res = 0, search = 0;\n\t\tfor(int i=0; i&lt;strlen(seq);
        i++) {\n\t\t\tint cur = seq[i] - ''0'';\n\t\t\tif(cur &lt; 1 || cur &gt; 9)
        {\n\t\t\t\tsearch = 0;\n\t\t\t\tcontinue; //ignore non-digits\n\t\t\t}\n\t\t\tif(cur==search)
        {\n\t\t\t\tres+=cur;\n\t\t\t}\n\t\t\tsearch = cur;\n\t\t}\n\t\tif(seq[0]-''0''==search)
        { //check circular loop.\n\t\t\tres+=search;\n\t\t}\n\t\treturn res;\n\t}\n\n\tint
        part2(char* seq) {\n\t\tint res = 0, len = strlen(seq) , jump = len/2;\n\t\tfor(int
        i=0; i&lt;len; i++) {\n\t\t\tint cur = seq[i] - ''0'';\n\t\t\tint pos = (i+jump)%len;\n\t\t\tif(cur
        &lt; 1 || cur &gt; 9) continue; //ignore non-digits\n\t\t\tif(seq[i] == seq[pos])
        {\n\t\t\t\tres += cur;\n\t\t\t}\n\t\t}\n\n\t\treturn res;\n\t}", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqlujf1",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;C&lt;/h1&gt;\n\n&lt;p&gt;Part
        2 is a lot cleaner as usual, one of the best parts of this is that it forces
        you to go back and look at what you&amp;#39;ve done and polish it a little
        bit further.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/krokerik/Advent-of-Code/tree/master/2017\"&gt;Repo&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include
        &amp;lt;stdio.h&amp;gt;\n#include &amp;lt;stdlib.h&amp;gt;\n#include &amp;lt;string.h&amp;gt;\n\n#define
        INPUT &amp;quot;../input/01.txt&amp;quot;\n\nint part1(char* seq);\nint part2(char*
        seq);\n\nint main() {\n    FILE * fp;\n    char * line = NULL;\n    size_t
        len = 0;\n\n    fp = fopen(INPUT, &amp;quot;r&amp;quot;);\n    if (fp == NULL)
        {\n        perror(INPUT);\n        exit(EXIT_FAILURE);\n    }\n\n    while
        (getline(&amp;amp;line, &amp;amp;len, fp) != -1){\n        line[strcspn(line,
        &amp;quot;\\r\\n&amp;quot;)] = 0; //remove line breaks.\n        printf(&amp;quot;%s:
        %d %d\\n\\n&amp;quot;, line, part1(line), part2(line));\n    }\n\n    fclose(fp);\n    free(line);\n    exit(EXIT_SUCCESS);\n}\n\nint
        part1(char* seq) {\n    int res = 0, search = 0;\n    for(int i=0; i&amp;lt;strlen(seq);
        i++) {\n        int cur = seq[i] - &amp;#39;0&amp;#39;;\n        if(cur &amp;lt;
        1 || cur &amp;gt; 9) {\n            search = 0;\n            continue; //ignore
        non-digits\n        }\n        if(cur==search) {\n            res+=cur;\n        }\n        search
        = cur;\n    }\n    if(seq[0]-&amp;#39;0&amp;#39;==search) { //check circular
        loop.\n        res+=search;\n    }\n    return res;\n}\n\nint part2(char*
        seq) {\n    int res = 0, len = strlen(seq) , jump = len/2;\n    for(int i=0;
        i&amp;lt;len; i++) {\n        int cur = seq[i] - &amp;#39;0&amp;#39;;\n        int
        pos = (i+jump)%len;\n        if(cur &amp;lt; 1 || cur &amp;gt; 9) continue;
        //ignore non-digits\n        if(seq[i] == seq[pos]) {\n            res +=
        cur;\n        }\n    }\n\n    return res;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlujf1/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512134677.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 2, "removal_reason": null, "link_id": "t3_7gsrc2",
        "author_flair_template_id": null, "likes": null, "replies": "", "user_reports":
        [], "saved": false, "id": "dqn8ts2", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "[deleted]", "can_mod_post": false, "send_replies": true,
        "parent_id": "t1_dqmnv6l", "score": 2, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "Dope bro.
        Just sad u cant see anything :x xD", "edited": false, "author_flair_css_class":
        null, "collapsed": false, "downs": 0, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Dope bro. Just sad u cant see anything :x
        xD&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "associated_award":
        null, "stickied": false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqn8ts2/",
        "num_reports": null, "locked": false, "name": "t1_dqn8ts2", "created": 1512190568.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512190568.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "dqmnv6l", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "mrhthepie", "can_mod_post": false, "created_utc":
        1512164334.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 4,
        "author_fullname": "t2_51m3y", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Advent of gifs day 1: https://i.imgur.com/51CIVSc.gif",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqmnv6l", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Advent
        of gifs day 1: &lt;a href=\"https://i.imgur.com/51CIVSc.gif\"&gt;https://i.imgur.com/51CIVSc.gif&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmnv6l/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512164334.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqljxwe",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Eddyman",
        "can_mod_post": false, "created_utc": 1512110050.0, "send_replies": true,
        "parent_id": "t1_dqlh43n", "score": 3, "author_fullname": "t2_3mt5v", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "    \n    [...input].reduce((s, n, i, a) =&gt; s + ((n == a[(i + 1) % a.length])
        ? +n : 0), 0);\n    [...input].reduce((s, n, i, a) =&gt; s + ((n == a[(i +
        a.length / 2) % a.length]) ? +n : 0), 0);", "edited": 1512110270.0, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqljxwe", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;[...input].reduce((s,
        n, i, a) =&amp;gt; s + ((n == a[(i + 1) % a.length]) ? +n : 0), 0);\n[...input].reduce((s,
        n, i, a) =&amp;gt; s + ((n == a[(i + a.length / 2) % a.length]) ? +n : 0),
        0);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_7gsrc2", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqljxwe/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512110050.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 3}}, {"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 2, "removal_reason": null, "link_id": "t3_7gsrc2",
        "author_flair_template_id": null, "likes": null, "replies": {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "more", "data": {"count": 1, "name": "t1_dqli23t", "id": "dqli23t",
        "parent_id": "t1_dqlhlym", "depth": 2, "children": ["dqli23t"]}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "dqlhlym", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        "DELETED", "no_follow": true, "author": "[deleted]", "can_mod_post": false,
        "send_replies": true, "parent_id": "t1_dqlh43n", "score": 2, "approved_by":
        null, "report_reasons": null, "all_awardings": [], "subreddit_id": "t5_3b3wa",
        "body": "[removed]", "edited": false, "author_flair_css_class": null, "collapsed":
        true, "downs": 0, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[removed]&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhlym/",
        "num_reports": null, "locked": false, "name": "t1_dqlhlym", "created": 1512105973.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512105973.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 3, "name": "t1_dqli69s", "id": "dqli69s", "parent_id":
        "t1_dqlh43n", "depth": 1, "children": ["dqli69s"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "dqlh43n", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "Eddyman", "can_mod_post": false, "created_utc": 1512105221.0,
        "send_replies": true, "parent_id": "t3_7gsrc2", "score": 3, "author_fullname":
        "t2_3mt5v", "approved_by": null, "mod_note": null, "all_awardings": [], "collapsed":
        false, "body": "    var input = document.getElementById(''day_one'').value;\n    var
        sum = 0;\n    for(var i = 0; i &lt; input.length; i++){\n        var next
        = (i + 1) % input.length;\n        if(input[i] == input[next]){\n            sum
        += Number(input[i]);\n        }\n    }\n    \n    var input = document.getElementById(''day_one_two'').value;\n    var
        sum = 0;\n    for(var i = 0; i &lt; input.length; i++){\n        var next
        = (i + (input.length / 2)) % input.length;\n        if(input[i] == input[next]){\n            sum
        += Number(input[i]);\n        }\n    }\n\n", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqlh43n", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;var input = document.getElementById(&amp;#39;day_one&amp;#39;).value;\nvar
        sum = 0;\nfor(var i = 0; i &amp;lt; input.length; i++){\n    var next = (i
        + 1) % input.length;\n    if(input[i] == input[next]){\n        sum += Number(input[i]);\n    }\n}\n\nvar
        input = document.getElementById(&amp;#39;day_one_two&amp;#39;).value;\nvar
        sum = 0;\nfor(var i = 0; i &amp;lt; input.length; i++){\n    var next = (i
        + (input.length / 2)) % input.length;\n    if(input[i] == input[next]){\n        sum
        += Number(input[i]);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlh43n/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512105221.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 1, "name": "t1_dqug1qe",
        "id": "dqug1qe", "parent_id": "t1_dqllafo", "depth": 1, "children": ["dqug1qe"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "dqllafo", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "raevnos", "can_mod_post": false, "created_utc":
        1512112771.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 3,
        "author_fullname": "t2_3995k", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Scheme:\n    \n    (define (transform str)
        (map (lambda (c) (- (char-&gt;integer c) (char-&gt;integer #\\0)))\n                                 (string-&gt;list
        str)))\n    (define (add-if-= a b sum)\n      (if (= a b)\n          (+ a
        sum)\n          sum))\n    (define (captcha lst)\n      (let* ((first (car
        lst))\n             (len (length lst))\n             (half (div len 2))\n            (get-next-elem
        (lambda (n step) (list-ref lst (remainder (+ step n) len)))))\n        (let
        loop ((lst lst)\n                   (pos 0)\n                   (sum1 0)\n                   (sum2
        0))\n          (if (= pos len)\n              (values sum1 sum2)\n              (loop
        (cdr lst) (+ pos 1)\n                    (add-if-= (car lst) (get-next-elem
        pos 1) sum1)\n                    (add-if-= (car lst) (get-next-elem pos half)
        sum2))))))\n    (define input (transform (read-line)))\n    (let-values (((part1
        part2) (captcha input)))\n      (format #t \"Part 1: ~A\\nPart 2:~A\\n\" part1
        part2))\n     ", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqllafo", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Scheme:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(define
        (transform str) (map (lambda (c) (- (char-&amp;gt;integer c) (char-&amp;gt;integer
        #\\0)))\n                             (string-&amp;gt;list str)))\n(define
        (add-if-= a b sum)\n  (if (= a b)\n      (+ a sum)\n      sum))\n(define (captcha
        lst)\n  (let* ((first (car lst))\n         (len (length lst))\n         (half
        (div len 2))\n        (get-next-elem (lambda (n step) (list-ref lst (remainder
        (+ step n) len)))))\n    (let loop ((lst lst)\n               (pos 0)\n               (sum1
        0)\n               (sum2 0))\n      (if (= pos len)\n          (values sum1
        sum2)\n          (loop (cdr lst) (+ pos 1)\n                (add-if-= (car
        lst) (get-next-elem pos 1) sum1)\n                (add-if-= (car lst) (get-next-elem
        pos half) sum2))))))\n(define input (transform (read-line)))\n(let-values
        (((part1 part2) (captcha input)))\n  (format #t &amp;quot;Part 1: ~A\\nPart
        2:~A\\n&amp;quot; part1 part2))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqllafo/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512112771.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 2, "removal_reason": null, "link_id": "t3_7gsrc2",
        "author_flair_template_id": null, "likes": null, "replies": {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "more", "data": {"count":
        5, "name": "t1_dqmsuus", "id": "dqmsuus", "parent_id": "t1_dqmoion", "depth":
        3, "children": ["dqmsuus", "dqmpaqj"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "dqmoion", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "erlangguy", "can_mod_post": false, "send_replies": true,
        "parent_id": "t1_dqlwzf4", "score": 2, "author_fullname": "t2_mpah5du", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "I rely heavily on pattern matching when solving problems like this, I find
        it much easier to reason about/read.\n\n    explode(Digits) -&gt;\n        explode(Digits
        div 10, [Digits rem 10]).\n    \n    explode(0, List) -&gt;\n        List;\n    explode(Digits,
        List) -&gt;\n        explode(Digits div 10, [Digits rem 10|List]).\n    \n    run(Digits)
        -&gt;\n        LoD = explode(Digits),\n        NewLoD = LoD ++ [hd(LoD)],\n        captcha(NewLoD,
        0).\n    \n    captcha([_V], Sum) -&gt;\n        Sum;\n    captcha([V1,V1|Tail],
        Sum) -&gt;\n        captcha([V1|Tail], Sum + V1);\n    captcha([_V1,V2|Tail],
        Sum) -&gt;\n        captcha([V2|Tail], Sum).\n    \n    split(List) -&gt;\n        lists:split(length(List)
        div 2, List).\n    \n    run2(Digits) -&gt;\n        LoD = explode(Digits),\n        {L1,
        L2} = split(LoD),\n        captcha2(L1, L2, 0).\n    \n    captcha2([], [],
        Sum) -&gt;\n        Sum;\n    captcha2([H|T1], [H|T2], Sum) -&gt;\n        captcha2(T1,
        T2, Sum + 2*H);\n    captcha2([_H1|T1], [_H2|T2], Sum) -&gt;\n        captcha2(T1,
        T2, Sum).", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_dqmoion", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        rely heavily on pattern matching when solving problems like this, I find it
        much easier to reason about/read.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;explode(Digits)
        -&amp;gt;\n    explode(Digits div 10, [Digits rem 10]).\n\nexplode(0, List)
        -&amp;gt;\n    List;\nexplode(Digits, List) -&amp;gt;\n    explode(Digits
        div 10, [Digits rem 10|List]).\n\nrun(Digits) -&amp;gt;\n    LoD = explode(Digits),\n    NewLoD
        = LoD ++ [hd(LoD)],\n    captcha(NewLoD, 0).\n\ncaptcha([_V], Sum) -&amp;gt;\n    Sum;\ncaptcha([V1,V1|Tail],
        Sum) -&amp;gt;\n    captcha([V1|Tail], Sum + V1);\ncaptcha([_V1,V2|Tail],
        Sum) -&amp;gt;\n    captcha([V2|Tail], Sum).\n\nsplit(List) -&amp;gt;\n    lists:split(length(List)
        div 2, List).\n\nrun2(Digits) -&amp;gt;\n    LoD = explode(Digits),\n    {L1,
        L2} = split(LoD),\n    captcha2(L1, L2, 0).\n\ncaptcha2([], [], Sum) -&amp;gt;\n    Sum;\ncaptcha2([H|T1],
        [H|T2], Sum) -&amp;gt;\n    captcha2(T1, T2, Sum + 2*H);\ncaptcha2([_H1|T1],
        [_H2|T2], Sum) -&amp;gt;\n    captcha2(T1, T2, Sum).\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmoion/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512164989.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512164989.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "dqlwzf4", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "[deleted]", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_dqllmpy", "score": 2, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "I''m doing
        them in erlang too!\n\nHere''s my solution for pt.2, mine ended up a bit longer
        than yours though!\n\n    solve() -&gt;\n      checker(lists:reverse(str_to_list(?INPUT,
        []))).\n    \n    str_to_list([], Acc) -&gt; Acc;\n    str_to_list([H|T],
        Acc) -&gt;\n      {N, _} = string:to_integer([H]),\n      str_to_list(T, [N|Acc]).\n    \n    checker(Numbers)
        -&gt;\n      checker(Numbers, 1, 0, Numbers).\n    checker([H|T], Pos, Count,
        Numbers) -&gt;\n      case rotate(Numbers, trunc(length(Numbers) / 2), Pos)
        of\n        H -&gt;\n             checker(T, Pos+1, Count+H, Numbers);\n        _
        -&gt;\n             checker(T, Pos+1, Count, Numbers)\n      end;\n    checker([],
        _, Count, _) -&gt;\n      Count.\n\n    rotate(Numbers, Half, Pos) when Pos+Half
        =&lt; length(Numbers) -&gt;\n      Target = Pos+Half,\n      lists:nth(Target,
        Numbers);\n    rotate(Numbers, Half, Pos) when Pos+Half &gt; length(Numbers)
        -&gt;\n      Target = Pos-Half,\n      lists:nth(Target, Numbers).\n\n", "edited":
        false, "author_flair_css_class": null, "collapsed": false, "downs": 0, "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m doing them
        in erlang too!&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s my solution for pt.2,
        mine ended up a bit longer than yours though!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;solve()
        -&amp;gt;\n  checker(lists:reverse(str_to_list(?INPUT, []))).\n\nstr_to_list([],
        Acc) -&amp;gt; Acc;\nstr_to_list([H|T], Acc) -&amp;gt;\n  {N, _} = string:to_integer([H]),\n  str_to_list(T,
        [N|Acc]).\n\nchecker(Numbers) -&amp;gt;\n  checker(Numbers, 1, 0, Numbers).\nchecker([H|T],
        Pos, Count, Numbers) -&amp;gt;\n  case rotate(Numbers, trunc(length(Numbers)
        / 2), Pos) of\n    H -&amp;gt;\n         checker(T, Pos+1, Count+H, Numbers);\n    _
        -&amp;gt;\n         checker(T, Pos+1, Count, Numbers)\n  end;\nchecker([],
        _, Count, _) -&amp;gt;\n  Count.\n\nrotate(Numbers, Half, Pos) when Pos+Half
        =&amp;lt; length(Numbers) -&amp;gt;\n  Target = Pos+Half,\n  lists:nth(Target,
        Numbers);\nrotate(Numbers, Half, Pos) when Pos+Half &amp;gt; length(Numbers)
        -&amp;gt;\n  Target = Pos-Half,\n  lists:nth(Target, Numbers).\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlwzf4/",
        "num_reports": null, "locked": false, "name": "t1_dqlwzf4", "created": 1512138118.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512138118.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "dqllmpy", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Warbringer007", "can_mod_post": false,
        "created_utc": 1512113509.0, "send_replies": true, "parent_id": "t3_7gsrc2",
        "score": 3, "author_fullname": "t2_87na2", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Erlang ( LOL ) because
        I''m at work and bored:\n\n    Input = \"thatbiginput\",\n    SeparatedInput
        = [[X] || X &lt;- SeparatedInput],\n    {FirstPart, SecondPart} = lists:split(length(SeparatedInput)
        div 2, SeparatedInput),\n    io:format(\"FirstTask: ~p~n\", [firstTask(SeparatedInput,
        0) + 4]),\n    io:format(\"SecondTask: ~p~n\", [secondTask(FirstPart, SecondPart,
        0) * 2]).\n    \n    secondTask([], [], Acc) -&gt;\n\t    Acc;\n\n    secondTask([First
        | FirstEnd], [Second | SecondEnd], Acc) -&gt;\n\t    case First =:= Second
        of\n\t\t    true -&gt;  {Number, _} = string:to_integer(First),\n\t\t\t\t     secondTask(FirstEnd,
        SecondEnd, Acc + Number);\n\t\t    false -&gt; secondTask(FirstEnd, SecondEnd,
        Acc)\n\t    end.\n\t\n    firstTask([_First], Acc) -&gt;\n\t    Acc;\n\n    firstTask([First,
        Second | End], Acc) -&gt;\n\t     case First =:= Second of\n\t\t    true -&gt;  {Number,
        _} = string:to_integer(First),\n\t\t\t\t    firstTask([Second | End], Acc
        + Number);\n\t\t    false -&gt; firstTask([Second | End], Acc)\n\t    end.\n\nThis
        is not the whole code, only important one for solving both tasks. Function
        definitions are missing.\n+4 for first task because function won''t see first
        and last 4 and count them. *2 for second task is self-explanatory.", "edited":
        1512114254.0, "top_awarded_type": null, "author_flair_css_class": null, "name":
        "t1_dqllmpy", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Erlang
        ( LOL ) because I&amp;#39;m at work and bored:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Input
        = &amp;quot;thatbiginput&amp;quot;,\nSeparatedInput = [[X] || X &amp;lt;-
        SeparatedInput],\n{FirstPart, SecondPart} = lists:split(length(SeparatedInput)
        div 2, SeparatedInput),\nio:format(&amp;quot;FirstTask: ~p~n&amp;quot;, [firstTask(SeparatedInput,
        0) + 4]),\nio:format(&amp;quot;SecondTask: ~p~n&amp;quot;, [secondTask(FirstPart,
        SecondPart, 0) * 2]).\n\nsecondTask([], [], Acc) -&amp;gt;\n    Acc;\n\nsecondTask([First
        | FirstEnd], [Second | SecondEnd], Acc) -&amp;gt;\n    case First =:= Second
        of\n        true -&amp;gt;  {Number, _} = string:to_integer(First),\n                 secondTask(FirstEnd,
        SecondEnd, Acc + Number);\n        false -&amp;gt; secondTask(FirstEnd, SecondEnd,
        Acc)\n    end.\n\nfirstTask([_First], Acc) -&amp;gt;\n    Acc;\n\nfirstTask([First,
        Second | End], Acc) -&amp;gt;\n     case First =:= Second of\n        true
        -&amp;gt;  {Number, _} = string:to_integer(First),\n                firstTask([Second
        | End], Acc + Number);\n        false -&amp;gt; firstTask([Second | End],
        Acc)\n    end.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is not the whole
        code, only important one for solving both tasks. Function definitions are
        missing.\n+4 for first task because function won&amp;#39;t see first and last
        4 and count them. *2 for second task is self-explanatory.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqllmpy/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512113509.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqlogd1",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "CatpainCalamari",
        "can_mod_post": false, "created_utc": 1512120535.0, "send_replies": true,
        "parent_id": "t1_dqlm6h8", "score": 5, "author_fullname": "t2_6ubv69j", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "You could also use `asDigit` instead of `.toInt - 48` :-)", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqlogd1",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You could also use &lt;code&gt;asDigit&lt;/code&gt;
        instead of &lt;code&gt;.toInt - 48&lt;/code&gt; :-)&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": true, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlogd1/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512120535.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 5}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqlpool",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "CatpainCalamari",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_dqlpdzu", "score":
        2, "author_fullname": "t2_6ubv69j", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "I like how you startet
        with an index list instead of zipping the indices into the data list. I also
        solved both puzzles with the same method, just with a different offset.\nScala
        is new to me, and I learned something from both of you. Thank you! :-)", "edited":
        false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null,
        "name": "t1_dqlpool", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        like how you startet with an index list instead of zipping the indices into
        the data list. I also solved both puzzles with the same method, just with
        a different offset.\nScala is new to me, and I learned something from both
        of you. Thank you! :-)&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": true, "can_gild": false, "link_id": "t3_7gsrc2", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlpool/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512123985.0,
        "author_flair_text": null, "treatment_tags": [], "created_utc": 1512123985.0,
        "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0, "depth":
        2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "dqlpdzu", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "bahuljain", "can_mod_post": false, "created_utc":
        1512123152.0, "send_replies": true, "parent_id": "t1_dqlm6h8", "score": 3,
        "author_fullname": "t2_139jn1", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "that''s pretty good,\n\nI
        got both parts to work with a single one-liner method\n\n    val in = scala.io.Source.fromFile(\"src/aoc2017/day1.input.txt\").mkString\n\n    def
        adder(off: Int) = (0 until in.length).filter(i =&gt; in(i) == in((i + off)
        % in.length)).map(in(_) - ''0'').sum\n\n    println(s\"part 1 - ${adder(1)}\\npart
        2 - ${adder(in.length / 2)}\")", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_dqlpdzu", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;that&amp;#39;s pretty good,&lt;/p&gt;\n\n&lt;p&gt;I
        got both parts to work with a single one-liner method&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;val
        in = scala.io.Source.fromFile(&amp;quot;src/aoc2017/day1.input.txt&amp;quot;).mkString\n\ndef
        adder(off: Int) = (0 until in.length).filter(i =&amp;gt; in(i) == in((i +
        off) % in.length)).map(in(_) - &amp;#39;0&amp;#39;).sum\n\nprintln(s&amp;quot;part
        1 - ${adder(1)}\\npart 2 - ${adder(in.length / 2)}&amp;quot;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlpdzu/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512123152.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 3, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 2, "removal_reason": null, "link_id": "t3_7gsrc2",
        "author_flair_template_id": null, "likes": null, "replies": "", "user_reports":
        [], "saved": false, "id": "dqmp5u7", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "[deleted]", "can_mod_post": false, "send_replies": true,
        "parent_id": "t1_dqmool0", "score": 2, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "A slightly
        cleaner solution that I realized an hour or so later is to use `collect` instead
        so you don''t need the `case _ =&gt; 0`.", "edited": false, "downs": 0, "author_flair_css_class":
        null, "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;A
        slightly cleaner solution that I realized an hour or so later is to use &lt;code&gt;collect&lt;/code&gt;
        instead so you don&amp;#39;t need the &lt;code&gt;case _ =&amp;gt; 0&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmp5u7/",
        "num_reports": null, "locked": false, "name": "t1_dqmp5u7", "created": 1512165647.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512165647.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 3, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "dqmool0", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "lkasdfjl", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_dqlumdr", "score": 2, "author_fullname": "t2_3pv2n",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "we more or less landed on the same solution:\n\n    def captcha(list:
        Array[Int]): Int =\n      captchaWithOffset(list, 1)\n    \n    def captcha_halfway(arr:
        Array[Int]): Int =\n      captchaWithOffset(arr, arr.length / 2)\n    \n    def
        captchaWithOffset(arr: Array[Int], offset: Int): Int = {\n      arr.zipWithIndex.map
        {\n        case (x, i)\n          if arr((i + offset) % arr.length) == x =&gt;
        x\n        case _ =&gt; 0\n      }.sum\n    }\n", "edited": false, "top_awarded_type":
        null, "downs": 0, "author_flair_css_class": null, "name": "t1_dqmool0", "is_submitter":
        false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;we more or less landed
        on the same solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def captcha(list:
        Array[Int]): Int =\n  captchaWithOffset(list, 1)\n\ndef captcha_halfway(arr:
        Array[Int]): Int =\n  captchaWithOffset(arr, arr.length / 2)\n\ndef captchaWithOffset(arr:
        Array[Int], offset: Int): Int = {\n  arr.zipWithIndex.map {\n    case (x,
        i)\n      if arr((i + offset) % arr.length) == x =&amp;gt; x\n    case _ =&amp;gt;
        0\n  }.sum\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_7gsrc2", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmool0/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512165154.0,
        "author_flair_text": null, "treatment_tags": [], "created_utc": 1512165154.0,
        "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0, "depth":
        2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "dqlumdr", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "[deleted]", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_dqlm6h8", "score": 3, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "~~You can
        do `char.toString.toInt` to avoid needing that `-48`.~~ `char.asDigit` is
        much nicer.\n\nHere''s my Scala:\n\n    def sumDoubles(input: String, offset:
        Int): Int =\n      input.toSeq.zipWithIndex.foldLeft(0) { (cur, next) =&gt;\n        next
        match {\n          case (char, i) if char == input((i + offset) % input.length)
        =&gt; cur + char.asDigit\n          case _ =&gt; cur\n        }\n      }\n",
        "edited": false, "author_flair_css_class": null, "collapsed": false, "downs":
        0, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;del&gt;You
        can do &lt;code&gt;char.toString.toInt&lt;/code&gt; to avoid needing that
        &lt;code&gt;-48&lt;/code&gt;.&lt;/del&gt; &lt;code&gt;char.asDigit&lt;/code&gt;
        is much nicer.&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s my Scala:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        sumDoubles(input: String, offset: Int): Int =\n  input.toSeq.zipWithIndex.foldLeft(0)
        { (cur, next) =&amp;gt;\n    next match {\n      case (char, i) if char ==
        input((i + offset) % input.length) =&amp;gt; cur + char.asDigit\n      case
        _ =&amp;gt; cur\n    }\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "subreddit_type": "public", "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlumdr/", "num_reports":
        null, "locked": false, "name": "t1_dqlumdr", "created": 1512134802.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512134802.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqm095c",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "xkufix",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_dqlxo0d", "score":
        2, "author_fullname": "t2_d541m", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "I like this one, avoids a
        lookup with the index on the input on every element.", "edited": false, "top_awarded_type":
        null, "downs": 0, "author_flair_css_class": null, "name": "t1_dqm095c", "is_submitter":
        false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I like this one, avoids
        a lookup with the index on the input on every element.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm095c/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512141746.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512141746.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "more",
        "data": {"count": 1, "name": "t1_dqmjvwp", "id": "dqmjvwp", "parent_id": "t1_dqlxo0d",
        "depth": 2, "children": ["dqmjvwp"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "dqlxo0d", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "flup12", "can_mod_post": false, "created_utc": 1512138931.0,
        "send_replies": true, "parent_id": "t1_dqlm6h8", "score": 3, "author_fullname":
        "t2_szv6n", "removal_reason": null, "approved_by": null, "mod_note": null,
        "all_awardings": [], "body": "I zipped the list with a rotated copy of itself:\n\n    def
        captcha(input: List[Int], offset: Int): Int = {\n      val rotated = input.drop(offset)
        ::: input.take(offset)\n      input\n        .zip(rotated)\n        .filter(x
        =&gt; x._1 == x._2)\n        .map(_._1)\n        .sum\n    }\n\n    captcha(input,
        1)\n    captcha(input, input.length/2)", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqlxo0d", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I zipped the list with a rotated
        copy of itself:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def captcha(input: List[Int],
        offset: Int): Int = {\n  val rotated = input.drop(offset) ::: input.take(offset)\n  input\n    .zip(rotated)\n    .filter(x
        =&amp;gt; x._1 == x._2)\n    .map(_._1)\n    .sum\n}\n\ncaptcha(input, 1)\ncaptcha(input,
        input.length/2)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlxo0d/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512138931.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "more",
        "data": {"count": 3, "name": "t1_dqmla5f", "id": "dqmla5f", "parent_id": "t1_dqlm6h8",
        "depth": 1, "children": ["dqmla5f", "dqlp667", "dth8nhn"]}}], "before": null}},
        "user_reports": [], "saved": false, "id": "dqlm6h8", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "xkufix", "can_mod_post": false, "created_utc":
        1512114754.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 3,
        "author_fullname": "t2_d541m", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Horrible one-liners in scala. The -48 comes
        from the fact that my loadFile returns a Seq[Char] and not a Seq[String].\n\nPart
        1:\n\n        val input = loadFile(\"day1.txt\").toSeq\n        val sum =
        (input :+ input.head).sliding(2).filter(_.distinct.size == 1).map(_.head.toInt
        - 48).sum\n        println(sum)\n\nPart 2:\n\n        val input = loadFile(\"day1.txt\").toSeq\n\n        val
        length = input.size\n        val halfLength = length / 2\n        val indexedInput
        = input.zipWithIndex\n\n        val sum = indexedInput.filter(i =&gt; i._1
        == indexedInput((halfLength + i._2) % length)._1).map(_._1.toInt - 48).sum\n        println(sum)",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqlm6h8", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Horrible
        one-liners in scala. The -48 comes from the fact that my loadFile returns
        a Seq[Char] and not a Seq[String].&lt;/p&gt;\n\n&lt;p&gt;Part 1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    val
        input = loadFile(&amp;quot;day1.txt&amp;quot;).toSeq\n    val sum = (input
        :+ input.head).sliding(2).filter(_.distinct.size == 1).map(_.head.toInt -
        48).sum\n    println(sum)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part 2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    val
        input = loadFile(&amp;quot;day1.txt&amp;quot;).toSeq\n\n    val length = input.size\n    val
        halfLength = length / 2\n    val indexedInput = input.zipWithIndex\n\n    val
        sum = indexedInput.filter(i =&amp;gt; i._1 == indexedInput((halfLength + i._2)
        % length)._1).map(_._1.toInt - 48).sum\n    println(sum)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlm6h8/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512114754.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "more", "data": {"count":
        1, "name": "t1_dqnisjg", "id": "dqnisjg", "parent_id": "t1_dqmtfxt", "depth":
        2, "children": ["dqnisjg"]}}], "before": null}}, "user_reports": [], "saved":
        false, "id": "dqmtfxt", "banned_at_utc": null, "mod_reason_title": null, "gilded":
        0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author":
        "legaladviceukthrowaa", "can_mod_post": false, "created_utc": 1512170361.0,
        "send_replies": true, "parent_id": "t1_dqlq1sj", "score": 2, "author_fullname":
        "t2_hwo1s9j", "removal_reason": null, "approved_by": null, "mod_note": null,
        "all_awardings": [], "body": "Huh I didn''t think about doing both parts in
        one method. I''m using AoC as an opportunity to brush up on my Scala, so I
        couldn''t resist using a match for the first part, but of course that doesn''t
        help with the second part.\n\nI''ll be keeping an eye on your answers! ",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqmtfxt", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Huh
        I didn&amp;#39;t think about doing both parts in one method. I&amp;#39;m using
        AoC as an opportunity to brush up on my Scala, so I couldn&amp;#39;t resist
        using a match for the first part, but of course that doesn&amp;#39;t help
        with the second part.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ll be keeping an eye
        on your answers! &lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_7gsrc2", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmtfxt/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512170361.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 2}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "dqlq1sj", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "CatpainCalamari",
        "can_mod_post": false, "created_utc": 1512125001.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 3, "author_fullname": "t2_6ubv69j", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "Wow,
        you guys are fast. I didn''t want to stand up at 06:00 am to solve a puzzle,
        so although I am late for the show, here is my solution in Scala:\n    \n    val
        data = scala.io.StdIn.readLine().toList\n    \n    println(s\"Solution first
        star: ${inverseCaptcha(data, 1)}\")\n    println(s\"Solution second star:
        ${inverseCaptcha(data, data.length / 2)}\")\n    \n    def inverseCaptcha(data:
        List[Char], offset: Int): Int = {\n      data.\n        indices.\n        filter(idx
        =&gt; data(idx) == data((idx + offset) % data.length)).\n        map(data(_).asDigit)\n        .sum\n    }",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqlq1sj", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Wow,
        you guys are fast. I didn&amp;#39;t want to stand up at 06:00 am to solve
        a puzzle, so although I am late for the show, here is my solution in Scala:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;val
        data = scala.io.StdIn.readLine().toList\n\nprintln(s&amp;quot;Solution first
        star: ${inverseCaptcha(data, 1)}&amp;quot;)\nprintln(s&amp;quot;Solution second
        star: ${inverseCaptcha(data, data.length / 2)}&amp;quot;)\n\ndef inverseCaptcha(data:
        List[Char], offset: Int): Int = {\n  data.\n    indices.\n    filter(idx =&amp;gt;
        data(idx) == data((idx + offset) % data.length)).\n    map(data(_).asDigit)\n    .sum\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": true, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlq1sj/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512125001.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 4, "removal_reason": null, "link_id": "t3_7gsrc2",
        "author_flair_template_id": null, "likes": null, "replies": {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "more", "data": {"count": 1, "name": "t1_dqmbya7", "id": "dqmbya7",
        "parent_id": "t1_dqltuo8", "depth": 2, "children": ["dqmbya7"]}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "dqltuo8", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        "DELETED", "no_follow": false, "author": "[deleted]", "can_mod_post": false,
        "send_replies": true, "parent_id": "t1_dqlqjqh", "score": 4, "approved_by":
        null, "report_reasons": null, "all_awardings": [], "subreddit_id": "t5_3b3wa",
        "body": "[deleted]", "edited": false, "author_flair_css_class": null, "collapsed":
        true, "downs": 0, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqltuo8/",
        "num_reports": null, "locked": false, "name": "t1_dqltuo8", "created": 1512133551.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512133551.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "dqlqjqh", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "eregontp", "can_mod_post": false, "created_utc":
        1512126386.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 3,
        "author_fullname": "t2_4sh9w", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "2 lines of Ruby:\n\n    digits = File.read(\"1.txt\").strip.chars.map(&amp;:to_i)\n    p
        digits.zip(digits.rotate(digits.size/2)).select { |a, b| a == b }.sum(&amp;:first)\n\nJust
        change the argument to rotate to 1 for part 1.", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqlqjqh", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;2 lines of Ruby:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;digits
        = File.read(&amp;quot;1.txt&amp;quot;).strip.chars.map(&amp;amp;:to_i)\np
        digits.zip(digits.rotate(digits.size/2)).select { |a, b| a == b }.sum(&amp;amp;:first)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Just
        change the argument to rotate to 1 for part 1.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlqjqh/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512126386.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlr92d", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "GalacticDessert", "can_mod_post": false,
        "created_utc": 1512128243.0, "send_replies": true, "parent_id": "t3_7gsrc2",
        "score": 3, "author_fullname": "t2_f8lvtou", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "The worst and most
        verbose Rust you''ll see today! Just getting started and this little event
        is amazing:\n\n    use std::fs::File;\n    use std::io::Read;\n    \n    fn
        main() {\n    \tlet mut data = String::new();\n    \tlet mut f = File::open(\"path/input\").expect(\"Unable
        to open file\");\n    \tf.read_to_string(&amp;mut data).expect(\"Unable to
        read string\");\n        let input: Vec&lt;_&gt; = data\n        \t.chars()\n        \t.filter_map(|c|
        c.to_digit(10))\n        \t.collect();\n    \n        let mut captcha_result:
        u32 = part1(&amp;input);\n        println!(\"part 1 solution is {}\", captcha_result);\n        captcha_result
        = part2(input);\n        println!(\"part 2 solution is {}\", captcha_result);\n    }\n    \n    fn
        part1 (data: &amp;Vec&lt;u32&gt;,) -&gt; u32 {\n    \tlet mut captcha: u32
        = 0;\n    \tfor x in 0..(data.len()-1) {\n    \t\tif data[x] == data[x+1]
        {\n    \t\t\tcaptcha = &amp;captcha + &amp;data[x];\n    \t\t}\n    \t}\n    \tif
        data.last() == data.first() {\n    \t\tcaptcha = &amp;captcha + &amp;data[0];\n    \t}\n    \tcaptcha\n    }\n    \n    fn
        part2 (data: Vec&lt;u32&gt;,) -&gt; u32 {\n    \tlet mut captcha: u32 = 0;\n    \tlet
        half = data.len()/2;\n    \tfor x in 0..(half) {\n    \t\tif data[x] == data[x+half]
        {\n    \t\t\tcaptcha = &amp;captcha + &amp;data[x];\n    \t\t}\n    \t}\n    \tfor
        x in half..(data.len()) {\n    \t\tif data[x] == data[x-half] {\n    \t\t\tcaptcha
        = &amp;captcha + &amp;data[x];\n    \t\t}\n    \t}\n    \tcaptcha\n    }",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqlr92d", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The
        worst and most verbose Rust you&amp;#39;ll see today! Just getting started
        and this little event is amazing:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use
        std::fs::File;\nuse std::io::Read;\n\nfn main() {\n    let mut data = String::new();\n    let
        mut f = File::open(&amp;quot;path/input&amp;quot;).expect(&amp;quot;Unable
        to open file&amp;quot;);\n    f.read_to_string(&amp;amp;mut data).expect(&amp;quot;Unable
        to read string&amp;quot;);\n    let input: Vec&amp;lt;_&amp;gt; = data\n        .chars()\n        .filter_map(|c|
        c.to_digit(10))\n        .collect();\n\n    let mut captcha_result: u32 =
        part1(&amp;amp;input);\n    println!(&amp;quot;part 1 solution is {}&amp;quot;,
        captcha_result);\n    captcha_result = part2(input);\n    println!(&amp;quot;part
        2 solution is {}&amp;quot;, captcha_result);\n}\n\nfn part1 (data: &amp;amp;Vec&amp;lt;u32&amp;gt;,)
        -&amp;gt; u32 {\n    let mut captcha: u32 = 0;\n    for x in 0..(data.len()-1)
        {\n        if data[x] == data[x+1] {\n            captcha = &amp;amp;captcha
        + &amp;amp;data[x];\n        }\n    }\n    if data.last() == data.first()
        {\n        captcha = &amp;amp;captcha + &amp;amp;data[0];\n    }\n    captcha\n}\n\nfn
        part2 (data: Vec&amp;lt;u32&amp;gt;,) -&amp;gt; u32 {\n    let mut captcha:
        u32 = 0;\n    let half = data.len()/2;\n    for x in 0..(half) {\n        if
        data[x] == data[x+half] {\n            captcha = &amp;amp;captcha + &amp;amp;data[x];\n        }\n    }\n    for
        x in half..(data.len()) {\n        if data[x] == data[x-half] {\n            captcha
        = &amp;amp;captcha + &amp;amp;data[x];\n        }\n    }\n    captcha\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlr92d/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512128243.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 1, "name": "t1_dqmmf3w",
        "id": "dqmmf3w", "parent_id": "t1_dqlrb2e", "depth": 1, "children": ["dqmmf3w"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "dqlrb2e", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "timichal", "can_mod_post": false, "created_utc":
        1512128379.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 3,
        "author_fullname": "t2_yye71", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Using simple Python with a backwards list
        looping trick instead of modulo:\n\n     num = (...)\n     total = 0\n     for
        pos, number in enumerate(num):\n\t     if number == num[pos-int(len(num)/2)]:
        #-1 for part 1\n\t\t     total += int(number)\n     print(total)", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqlrb2e",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Using simple Python
        with a backwards list looping trick instead of modulo:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;
        num = (...)\n total = 0\n for pos, number in enumerate(num):\n     if number
        == num[pos-int(len(num)/2)]: #-1 for part 1\n         total += int(number)\n
        print(total)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlrb2e/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512128379.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 2, "name": "t1_dqmh3cp",
        "id": "dqmh3cp", "parent_id": "t1_dqlw7v0", "depth": 1, "children": ["dqmh3cp",
        "dqm4sxy"]}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "dqlw7v0", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "wzkx",
        "can_mod_post": false, "created_utc": 1512137124.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 3, "author_fullname": "t2_t1qbo", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "Nim.
        My first Nim program\n\n    import strutils\n    const orig = - int ''0''\n    let
        code = strip readFile \"01.dat\"\n    let lenc = code.len; let half = lenc
        div 2\n    var sum, sum2 = 0\n    for i,c in code.pairs: # ah I see, can be
        just for i,c in code:\n      if c == code[(i+1)mod lenc]: sum += orig + int
        c\n    for i,c in code.pairs:\n      if c == code[(i+half)mod lenc]: sum2
        += orig + int c\n    echo sum, '' '', sum2", "edited": 1512143507.0, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqlw7v0", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nim. My first Nim program&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        strutils\nconst orig = - int &amp;#39;0&amp;#39;\nlet code = strip readFile
        &amp;quot;01.dat&amp;quot;\nlet lenc = code.len; let half = lenc div 2\nvar
        sum, sum2 = 0\nfor i,c in code.pairs: # ah I see, can be just for i,c in code:\n  if
        c == code[(i+1)mod lenc]: sum += orig + int c\nfor i,c in code.pairs:\n  if
        c == code[(i+half)mod lenc]: sum2 += orig + int c\necho sum, &amp;#39; &amp;#39;,
        sum2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlw7v0/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512137124.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_7gsrc2", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 3}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqm9wto",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "TominatorBE",
        "can_mod_post": false, "created_utc": 1512150856.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 3, "author_fullname": "t2_1451v3", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "PHP\n\n    function
        run_the_code($input) {\n\t\t$shift = strlen($input) / 2;\n\t\t$circular =
        $input . substr($input, 0, $shift); // make it circular\n\t\t$sum = 0;\n\t\tfor
        ($i = 0, $iMax = strlen($input); $i &lt; $iMax; $i++) {\n\t\t\tif ($circular[$i]
        == $circular[$i + $shift]) {\n\t\t\t\t$sum += (int)$circular[$i];\n\t\t\t}\n\t\t}\n\t\treturn
        $sum;\n\t}", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqm9wto", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;PHP&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function
        run_the_code($input) {\n    $shift = strlen($input) / 2;\n    $circular =
        $input . substr($input, 0, $shift); // make it circular\n    $sum = 0;\n    for
        ($i = 0, $iMax = strlen($input); $i &amp;lt; $iMax; $i++) {\n        if ($circular[$i]
        == $circular[$i + $shift]) {\n            $sum += (int)$circular[$i];\n        }\n    }\n    return
        $sum;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm9wto/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512150856.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 3, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqmgwq6", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_7gsrc2", "score":
        3, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Lets get logical with Prolog ;)\n    \n\n    readWord(InStream,Chars):-\n        get_code(InStream,Char),\n        checkCharAndReadRest(Char,Chars,InStream).\n\n\n    checkCharAndReadRest(-1,[],_):-  !.\n    checkCharAndReadRest(end_of_file,[],_):-  !.\n    checkCharAndReadRest(10,[],_):-  !.\n    checkCharAndReadRest(Char,[Char|Chars],InStream):-\n        get_code(InStream,NextChar),\n        checkCharAndReadRest(NextChar,Chars,InStream).\n\n\n    splitAt(_,
        [], [], []).\n    splitAt(Index, [E|RestSource], [E|RestA], B) :-\n        Index
        &gt; 0,\n        NewIndex is Index - 1,\n        splitAt(NewIndex, RestSource,
        RestA, B).\n\n    splitAt(Index, [E|RestSource], A, [E|RestB]) :-\n        splitAt(Index,
        RestSource, A, RestB).\n\n\n    iterateAcc([], [], Acc, Sum) :- Sum is Acc.\n    iterateAcc([E1|R1],
        [E2|R2], Acc, Sum) :-\n        E1 =:= E2,\n        atom_codes(C, [E1]),\n        atom_number(C,
        Number),\n        NewAcc is Acc + Number,\n        iterateAcc(R1, R2, NewAcc,
        Sum).\n\n    iterateAcc([_|R1], [_|R2], Acc, Sum) :-\n        iterateAcc(R1,
        R2, Acc, Sum).\n\n    iterate(Code, RotateValue, Sum) :-\n        splitAt(RotateValue,
        Code, FirstPart, SecondPart),\n        append(SecondPart, FirstPart, RotatedCode),\n        iterateAcc(Code,
        RotatedCode, 0, Sum).\n\n\n    run :-\n        open(''input.txt'', read, Str),\n        readWord(Str,
        Code),\n        iterate(Code, 1, Z),\n        write(Z), nl,\n        length(Code,
        Length),\n        RotateValue is Length / 2,\n        iterate(Code, RotateValue,
        X),\n        write(X).", "edited": false, "downs": 0, "author_flair_css_class":
        null, "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Lets
        get logical with Prolog ;)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;readWord(InStream,Chars):-\n    get_code(InStream,Char),\n    checkCharAndReadRest(Char,Chars,InStream).\n\n\ncheckCharAndReadRest(-1,[],_):-  !.\ncheckCharAndReadRest(end_of_file,[],_):-  !.\ncheckCharAndReadRest(10,[],_):-  !.\ncheckCharAndReadRest(Char,[Char|Chars],InStream):-\n    get_code(InStream,NextChar),\n    checkCharAndReadRest(NextChar,Chars,InStream).\n\n\nsplitAt(_,
        [], [], []).\nsplitAt(Index, [E|RestSource], [E|RestA], B) :-\n    Index &amp;gt;
        0,\n    NewIndex is Index - 1,\n    splitAt(NewIndex, RestSource, RestA, B).\n\nsplitAt(Index,
        [E|RestSource], A, [E|RestB]) :-\n    splitAt(Index, RestSource, A, RestB).\n\n\niterateAcc([],
        [], Acc, Sum) :- Sum is Acc.\niterateAcc([E1|R1], [E2|R2], Acc, Sum) :-\n    E1
        =:= E2,\n    atom_codes(C, [E1]),\n    atom_number(C, Number),\n    NewAcc
        is Acc + Number,\n    iterateAcc(R1, R2, NewAcc, Sum).\n\niterateAcc([_|R1],
        [_|R2], Acc, Sum) :-\n    iterateAcc(R1, R2, Acc, Sum).\n\niterate(Code, RotateValue,
        Sum) :-\n    splitAt(RotateValue, Code, FirstPart, SecondPart),\n    append(SecondPart,
        FirstPart, RotatedCode),\n    iterateAcc(Code, RotatedCode, 0, Sum).\n\n\nrun
        :-\n    open(&amp;#39;input.txt&amp;#39;, read, Str),\n    readWord(Str, Code),\n    iterate(Code,
        1, Z),\n    write(Z), nl,\n    length(Code, Length),\n    RotateValue is Length
        / 2,\n    iterate(Code, RotateValue, X),\n    write(X).\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmgwq6/",
        "num_reports": null, "locked": false, "name": "t1_dqmgwq6", "created": 1512157482.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512157482.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqmx20p", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "TheGermanDoctor", "can_mod_post": false,
        "created_utc": 1512174731.0, "send_replies": true, "parent_id": "t3_7gsrc2",
        "score": 3, "author_fullname": "t2_bmk46", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "You may not like it,
        but this is what peak performance looks like.\n\n\nPart 1 solved in ***x86_64
        assembly language***\n\n\n[Check it out](https://github.com/stolzATrub/adventofcode17/blob/master/day1/captcha.nasm)",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqmx20p", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You
        may not like it, but this is what peak performance looks like.&lt;/p&gt;\n\n&lt;p&gt;Part
        1 solved in &lt;strong&gt;&lt;em&gt;x86_64 assembly language&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/stolzATrub/adventofcode17/blob/master/day1/captcha.nasm\"&gt;Check
        it out&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmx20p/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512174731.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_7gsrc2", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 3}}, {"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 3, "removal_reason": null, "link_id": "t3_7gsrc2",
        "author_flair_template_id": null, "likes": null, "replies": {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "more", "data": {"count": 1, "name": "t1_dqn3msz", "id": "dqn3msz",
        "parent_id": "t1_dqmya3n", "depth": 1, "children": ["dqn3msz"]}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "dqmya3n", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "[deleted]", "can_mod_post": false, "send_replies":
        true, "parent_id": "t3_7gsrc2", "score": 3, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "Day 1.\n\nPowershell
        pipeline is my preferred language this time, lets see how far we get\n\n    param
        (\n        [Parameter(ValueFromPipeline=$true)]\n        [string]$in,\n        [Parameter(Position
        = 1)]\n        [int]$part = 1\n    )\n\n    process \n    {\n        $offset
        = 1\n        if ($part -eq 2) {\n            $offset = $in.length / 2\n        }\n\n        0..$in.length
        |? {$in[$_] -eq $in[($_ + $offset) % $in.length]} | % {[string]$in[$_]} |
        measure -sum | select -expand sum\n    }\n\n\n\nedit: \nbreaking out the pipeline
        a bit, the steps are:\n\n    for c: 0 -&gt; length(input_string) { # pipeline
        is just the index in the array\n        where c satisfies (input_string[c]
        == input_string[(c + offset) % length(input_string)]) { # pipeline is just
        the index in the array\n            foreach c, output input_string[c] # pipeline
        is now the value at that index\n        }\n    } -&gt; sum -&gt; select sum\n\noffset
        is either the next character (part 1) or the character halfway round (part
        2), modulo the length to get a 0 based index even if the offset goes past
        the string.\n", "edited": 1512324435.0, "downs": 0, "author_flair_css_class":
        null, "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Day
        1.&lt;/p&gt;\n\n&lt;p&gt;Powershell pipeline is my preferred language this
        time, lets see how far we get&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;param (\n    [Parameter(ValueFromPipeline=$true)]\n    [string]$in,\n    [Parameter(Position
        = 1)]\n    [int]$part = 1\n)\n\nprocess \n{\n    $offset = 1\n    if ($part
        -eq 2) {\n        $offset = $in.length / 2\n    }\n\n    0..$in.length |?
        {$in[$_] -eq $in[($_ + $offset) % $in.length]} | % {[string]$in[$_]} | measure
        -sum | select -expand sum\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;edit:
        \nbreaking out the pipeline a bit, the steps are:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for
        c: 0 -&amp;gt; length(input_string) { # pipeline is just the index in the
        array\n    where c satisfies (input_string[c] == input_string[(c + offset)
        % length(input_string)]) { # pipeline is just the index in the array\n        foreach
        c, output input_string[c] # pipeline is now the value at that index\n    }\n}
        -&amp;gt; sum -&amp;gt; select sum\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;offset
        is either the next character (part 1) or the character halfway round (part
        2), modulo the length to get a 0 based index even if the offset goes past
        the string.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "subreddit_type": "public",
        "can_gild": false, "top_awarded_type": null, "unrepliable_reason": null, "author_flair_text_color":
        "dark", "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmya3n/",
        "num_reports": null, "locked": false, "name": "t1_dqmya3n", "created": 1512176289.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512176289.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqpyos6", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Porges", "can_mod_post": false, "created_utc":
        1512339664.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 3,
        "author_fullname": "t2_297v6", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "(Dyalog) APL\n\nFirst part:\n\n    {+/(\u2375=1\u233d\u2375)/\u2375}\n\n\n\nSecond
        part:\n\n    {+/(\u2375=(.5\u00d7\u2374\u2375)\u233d\u2375)/\u2375}", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqpyos6",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;(Dyalog) APL&lt;/p&gt;\n\n&lt;p&gt;First
        part:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{+/(\u2375=1\u233d\u2375)/\u2375}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Second
        part:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{+/(\u2375=(.5\u00d7\u2374\u2375)\u233d\u2375)/\u2375}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqpyos6/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512339664.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqqioyw", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Cole_from_SE", "can_mod_post": false,
        "created_utc": 1512363053.0, "send_replies": true, "parent_id": "t3_7gsrc2",
        "score": 3, "author_fullname": "t2_qgp98", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Port of my J answer
        to APL.\n\n    {+/\u2375\u00d7\u2375=\u237a\u2296\u2375}\n\nAnonymous function
        taking the number of rotations as the left argument and array of integers
        as the right argument (solution to part 1 is giving a left argument of 1,
        to part 2 is giving a left argument of the length divided by 2).", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqqioyw",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Port of my J answer
        to APL.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{+/\u2375\u00d7\u2375=\u237a\u2296\u2375}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Anonymous
        function taking the number of rotations as the left argument and array of
        integers as the right argument (solution to part 1 is giving a left argument
        of 1, to part 2 is giving a left argument of the length divided by 2).&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqqioyw/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512363053.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlhakk", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "mmaruseacph2", "can_mod_post": false,
        "created_utc": 1512105487.0, "send_replies": true, "parent_id": "t3_7gsrc2",
        "score": 2, "author_fullname": "t2_3ubxw", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Not fully optimized
        or beautifully written Haskell, but does its job:\n\n    main = do\n      s
        &lt;- init &lt;$&gt; readFile \"input.txt\"\n      print $ process 1 $ s ++
        [head s]\n      let\n        l = length $ s\n        ll = l `div` 2\n      print
        $ process ll $ s ++ take ll s\n    \n    process k s =\n      sum . map (read
        . (:[]) . fst) . filter (uncurry (==)) $ zip s (drop k s)\n", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqlhakk",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not fully optimized
        or beautifully written Haskell, but does its job:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;main
        = do\n  s &amp;lt;- init &amp;lt;$&amp;gt; readFile &amp;quot;input.txt&amp;quot;\n  print
        $ process 1 $ s ++ [head s]\n  let\n    l = length $ s\n    ll = l `div` 2\n  print
        $ process ll $ s ++ take ll s\n\nprocess k s =\n  sum . map (read . (:[])
        . fst) . filter (uncurry (==)) $ zip s (drop k s)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhakk/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512105487.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "more", "data": {"count":
        2, "name": "t1_dqlirhm", "id": "dqlirhm", "parent_id": "t1_dqli3p2", "depth":
        2, "children": ["dqlirhm"]}}], "before": null}}, "user_reports": [], "saved":
        false, "id": "dqli3p2", "banned_at_utc": null, "mod_reason_title": null, "gilded":
        0, "archived": true, "collapsed_reason_code": null, "no_follow": false, "author":
        "willkill07", "can_mod_post": false, "created_utc": 1512106764.0, "send_replies":
        true, "parent_id": "t1_dqlhc78", "score": 4, "author_fullname": "t2_7j0ca",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "for a single-digit character, I''d argue subtracting ''0'' is
        the most idiomatic way.", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqli3p2", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;for
        a single-digit character, I&amp;#39;d argue subtracting &amp;#39;0&amp;#39;
        is the most idiomatic way.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_7gsrc2", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqli3p2/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512106764.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 4}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqlje55",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Surye",
        "can_mod_post": false, "created_utc": 1512109008.0, "send_replies": true,
        "parent_id": "t1_dqlhc78", "score": 2, "author_fullname": "t2_35ccs", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "I am doing this to learn Kotlin, and having spent most of my time in python
        lately, was totally blanking on how to do this, ended up with this abomination:\n\n    runningSum
        += \"$next\".toInt()", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqlje55", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        am doing this to learn Kotlin, and having spent most of my time in python
        lately, was totally blanking on how to do this, ended up with this abomination:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;runningSum
        += &amp;quot;$next&amp;quot;.toInt()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlje55/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512109008.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "more", "data": {"count":
        3, "name": "t1_dqlr2up", "id": "dqlr2up", "parent_id": "t1_dqlp1lz", "depth":
        3, "children": ["dqlr2up", "dqlvl7m"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "dqlp1lz", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "Hikaru755", "can_mod_post": false, "send_replies": true,
        "parent_id": "t1_dqln26v", "score": 3, "author_fullname": "t2_qz5ws", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Nice! Since we have Kotlin 1.2 now, you could also use `.windowed(2)` instead
        of `.zipWithNext` :)", "edited": false, "top_awarded_type": null, "downs":
        0, "author_flair_css_class": null, "name": "t1_dqlp1lz", "is_submitter": false,
        "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nice! Since we have Kotlin
        1.2 now, you could also use &lt;code&gt;.windowed(2)&lt;/code&gt; instead
        of &lt;code&gt;.zipWithNext&lt;/code&gt; :)&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlp1lz/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512122166.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512122166.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlnhxf", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "reckter", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_dqln26v", "score": 2, "author_fullname": "t2_97xjz",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "I didn''t think of zip with next! \nanyway, here''s mine (I used
        the time to build some helper functions)\n\n\nhelpers:\n    \n    fun List&lt;String&gt;.toIntegers():
        List&lt;Int&gt;\n        = this.map { Integer.parseInt(it) }\n\n    fun &lt;E&gt;
        List&lt;E&gt;.pairWithIndex(indexer: (index: Int) -&gt; Int): List&lt;Pair&lt;E,
        E&gt;&gt;\n        = this.mapIndexed { index, elem -&gt; elem to this[indexer(index)
        % this.size] }\n\n    fun &lt;E&gt; List&lt;E&gt;.pairWithIndexAndSize(indexer:
        (index: Int, size: Int) -&gt; Int): \n        List&lt;Pair&lt;E, E&gt;&gt;\n            =
        this.mapIndexed { index, elem -&gt; elem to this[indexer(index, this.size)
        % this.size] }\n\n    fun Any.print(name: String) = println(name + this.toString())\n\nsollutions:\n\n    override
        fun solvePart1() {\n        loadInput(1)\n            .first()\n            .map
        { it.toString() }\n            .toIntegers()\n            .pairWithIndex {
        it + 1 }\n            .filter { (it, following) -&gt; it == following}\n            .sumBy
        { it.first }\n            .print(\"solution `Day1`: \")\n\n    }\n\n    override
        fun solvePart2() {\n        loadInput(1)\n            .first()\n            .map
        { it.toString() }\n            .toIntegers()\n            .pairWithIndexAndSize
        { index, size -&gt; index + size / 2 }\n            .filter { (it, following)
        -&gt; it == following}\n            .sumBy { it.first }\n            .print(\"solution
        2: \")\n\n    }\n\n\nI like the chain calling way, and it feels really functionally
        :D\n", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_dqlnhxf", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        didn&amp;#39;t think of zip with next! \nanyway, here&amp;#39;s mine (I used
        the time to build some helper functions)&lt;/p&gt;\n\n&lt;p&gt;helpers:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fun
        List&amp;lt;String&amp;gt;.toIntegers(): List&amp;lt;Int&amp;gt;\n    = this.map
        { Integer.parseInt(it) }\n\nfun &amp;lt;E&amp;gt; List&amp;lt;E&amp;gt;.pairWithIndex(indexer:
        (index: Int) -&amp;gt; Int): List&amp;lt;Pair&amp;lt;E, E&amp;gt;&amp;gt;\n    =
        this.mapIndexed { index, elem -&amp;gt; elem to this[indexer(index) % this.size]
        }\n\nfun &amp;lt;E&amp;gt; List&amp;lt;E&amp;gt;.pairWithIndexAndSize(indexer:
        (index: Int, size: Int) -&amp;gt; Int): \n    List&amp;lt;Pair&amp;lt;E, E&amp;gt;&amp;gt;\n        =
        this.mapIndexed { index, elem -&amp;gt; elem to this[indexer(index, this.size)
        % this.size] }\n\nfun Any.print(name: String) = println(name + this.toString())\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;sollutions:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;override
        fun solvePart1() {\n    loadInput(1)\n        .first()\n        .map { it.toString()
        }\n        .toIntegers()\n        .pairWithIndex { it + 1 }\n        .filter
        { (it, following) -&amp;gt; it == following}\n        .sumBy { it.first }\n        .print(&amp;quot;solution
        `Day1`: &amp;quot;)\n\n}\n\noverride fun solvePart2() {\n    loadInput(1)\n        .first()\n        .map
        { it.toString() }\n        .toIntegers()\n        .pairWithIndexAndSize {
        index, size -&amp;gt; index + size / 2 }\n        .filter { (it, following)
        -&amp;gt; it == following}\n        .sumBy { it.first }\n        .print(&amp;quot;solution
        2: &amp;quot;)\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I like the chain
        calling way, and it feels really functionally :D&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlnhxf/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512117976.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512117976.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "dqln26v", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Bruinbrood", "can_mod_post": false, "created_utc":
        1512116859.0, "send_replies": true, "parent_id": "t1_dqlhc78", "score": 2,
        "author_fullname": "t2_37co4c", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "I''m using adventofcode to
        learn kotlin, but a main strength of kotlin seems to be to use the ''functional''
        stuff.\nMy solutions:\n\n    fun main(args: Array&lt;String&gt;) {\n        val
        input = \"...\"\n        val circularInput = input + input[0]\n        val
        result1 = circularInput.zipWithNext{a, b -&gt; if (a==b) a-''0'' else 0}.sum()\n        println(\"1:
        $result1\")\n        \n        val length = input.length\n        val halflength
        = length/2\n        val result2 = input.filterIndexed{index, n -&gt;\n            n==input[(index+halflength)%length]}.map{\n            it-''0''}.sum()\n        println(\"2:
        $result2\")\n    }", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqln26v", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m
        using adventofcode to learn kotlin, but a main strength of kotlin seems to
        be to use the &amp;#39;functional&amp;#39; stuff.\nMy solutions:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fun
        main(args: Array&amp;lt;String&amp;gt;) {\n    val input = &amp;quot;...&amp;quot;\n    val
        circularInput = input + input[0]\n    val result1 = circularInput.zipWithNext{a,
        b -&amp;gt; if (a==b) a-&amp;#39;0&amp;#39; else 0}.sum()\n    println(&amp;quot;1:
        $result1&amp;quot;)\n\n    val length = input.length\n    val halflength =
        length/2\n    val result2 = input.filterIndexed{index, n -&amp;gt;\n        n==input[(index+halflength)%length]}.map{\n        it-&amp;#39;0&amp;#39;}.sum()\n    println(&amp;quot;2:
        $result2&amp;quot;)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqln26v/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512116859.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 1, "name": "t1_dqlvm07",
        "id": "dqlvm07", "parent_id": "t1_dqlpgl0", "depth": 2, "children": ["dqlvm07"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "dqlpgl0", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "abowes", "can_mod_post": false, "created_utc":
        1512123351.0, "send_replies": true, "parent_id": "t1_dqlhc78", "score": 2,
        "author_fullname": "t2_13e5om", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Here''s my Kotlin solution:\n\n    fun
        Char.charToInt() = this.minus(''0'')\n\n    fun naughtyOrNice2(input: String):
        Int {\n        val nums2 = (input.substring(input.length/2) + input)\n        return
        input.zip(nums2)\n               .filter { it.first == it.second }\n               .map{it.first.charToInt()}.sum()\n    }\n",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqlpgl0", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s
        my Kotlin solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fun Char.charToInt()
        = this.minus(&amp;#39;0&amp;#39;)\n\nfun naughtyOrNice2(input: String): Int
        {\n    val nums2 = (input.substring(input.length/2) + input)\n    return input.zip(nums2)\n           .filter
        { it.first == it.second }\n           .map{it.first.charToInt()}.sum()\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlpgl0/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512123351.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "more",
        "data": {"count": 1, "name": "t1_dqo3aeh", "id": "dqo3aeh", "parent_id": "t1_dqlhc78",
        "depth": 1, "children": ["dqo3aeh"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "dqlhc78", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "AMISH_GANGSTER", "can_mod_post": false, "created_utc": 1512105555.0,
        "send_replies": true, "parent_id": "t3_7gsrc2", "score": 2, "author_fullname":
        "t2_dljj2", "approved_by": null, "mod_note": null, "all_awardings": [], "collapsed":
        false, "body": "Part 1 in kotlin:\n\n    fun main(args: Array&lt;String&gt;)
        {\n      val input = \"...\"\n      var sum: Int = 0\n        \n      for
        (i in input.indices) {\n            val char = input[i]\n            val next
        = if (i+1 &gt;= input.length) input[0] else input[i+1]\n            if (char
        == next) sum += char.toString().toInt()\n        }\n        println(sum)\n    }\n\nPart
        2:\n\n    fun main(args: Array&lt;String&gt;) {\n      val input = \"...\"\n      var
        sum: Int = 0\n        \n      for (i in input.indices) {\n            val
        nextIx = input.length / 2\n            val char = input[i]\n            val
        next = if (i+nextIx &gt;= input.length) {\n                input[0 + ((i+nextIx)
        - input.length)]\n            } else {\n                input[i+nextIx]\n            }\n            if
        (char == next) sum += char.toString().toInt()\n        }\n        println(sum)\n    }\n\nIt
        feels bad to convert a Char to a String then to an Int. I suppose I could
        have subtracted ''0'', but that would be just as awkward IMO. Anyone have
        a more idiomatic way to do it?", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_dqlhc78", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Part 1 in kotlin:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fun
        main(args: Array&amp;lt;String&amp;gt;) {\n  val input = &amp;quot;...&amp;quot;\n  var
        sum: Int = 0\n\n  for (i in input.indices) {\n        val char = input[i]\n        val
        next = if (i+1 &amp;gt;= input.length) input[0] else input[i+1]\n        if
        (char == next) sum += char.toString().toInt()\n    }\n    println(sum)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fun main(args: Array&amp;lt;String&amp;gt;)
        {\n  val input = &amp;quot;...&amp;quot;\n  var sum: Int = 0\n\n  for (i in
        input.indices) {\n        val nextIx = input.length / 2\n        val char
        = input[i]\n        val next = if (i+nextIx &amp;gt;= input.length) {\n            input[0
        + ((i+nextIx) - input.length)]\n        } else {\n            input[i+nextIx]\n        }\n        if
        (char == next) sum += char.toString().toInt()\n    }\n    println(sum)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It
        feels bad to convert a Char to a String then to an Int. I suppose I could
        have subtracted &amp;#39;0&amp;#39;, but that would be just as awkward IMO.
        Anyone have a more idiomatic way to do it?&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhc78/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512105555.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 1, "name": "t1_dqltnol",
        "id": "dqltnol", "parent_id": "t1_dqlhdq8", "depth": 1, "children": ["dqltnol"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "dqlhdq8", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "giftpflanze", "can_mod_post": false, "created_utc":
        1512105621.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 2,
        "author_fullname": "t2_d9rz7", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Tcl:\n\n    set list [split [gets [open input01]]
        {}]\n    \n    #part 1\n    \n    set l [lrange $list end end]\n    foreach
        n $list {\n        if {$n == $l} {\n            incr sum1 $n\n        }\n        set
        l $n\n    }\n    \n    puts $sum1\n    \n    #part 2\n    \n    set l {}\n    for
        {set i 0} {$i &lt; [set m [llength $list]]} {incr i} {\n        if {[set n
        [lindex $list $i]] == [lindex $list [expr {($i+$m/2)%$m}]]} {\n            incr
        sum2 $n\n        }\n    }\n    \n    puts $sum2", "edited": 1512195232.0,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqlhdq8",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Tcl:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;set
        list [split [gets [open input01]] {}]\n\n#part 1\n\nset l [lrange $list end
        end]\nforeach n $list {\n    if {$n == $l} {\n        incr sum1 $n\n    }\n    set
        l $n\n}\n\nputs $sum1\n\n#part 2\n\nset l {}\nfor {set i 0} {$i &amp;lt; [set
        m [llength $list]]} {incr i} {\n    if {[set n [lindex $list $i]] == [lindex
        $list [expr {($i+$m/2)%$m}]]} {\n        incr sum2 $n\n    }\n}\n\nputs $sum2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhdq8/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512105621.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlifzk", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "mgoblu3", "can_mod_post": false, "created_utc":
        1512107323.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 2,
        "author_fullname": "t2_c5x0a", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Python 1-liner:\n\n\n    with open(''day1.txt'',
        ''r'') as f:\n        input = f.read()\n    \n    print sum(int(x[0]) for
        x in zip(input, input[len(input)/2:] + input[:len(input)/2 - 1]) if x[0] ==
        x[1])\n\n", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqlifzk", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python
        1-liner:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with open(&amp;#39;day1.txt&amp;#39;,
        &amp;#39;r&amp;#39;) as f:\n    input = f.read()\n\nprint sum(int(x[0]) for
        x in zip(input, input[len(input)/2:] + input[:len(input)/2 - 1]) if x[0] ==
        x[1])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlifzk/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512107323.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_7gsrc2", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqljy3y",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "JeffJankowski",
        "can_mod_post": false, "created_utc": 1512110061.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 2, "author_fullname": "t2_ltu45", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "Trying
        out TypeScript this year\n\n    import fs = require(''fs'')\n    \n    function
        captcha(data: string) {\n        return (next: (n: number) =&gt; number) =&gt;
        {\n            let sum = 0;\n            for (let i = 0; i &lt; data.length;
        i++) {\n                if (data[i] === data[next(i)])\n                    sum
        += parseInt(data[i]);\n            }\n            return sum;\n        }\n    }\n    \n    let
        data = fs.readFileSync(''data/day01.txt'', ''utf8'');\n    let withData =
        captcha(data);\n    \n    //part 1\n    let seq = (i: number) =&gt; (i + 1)
        % data.length;\n    console.log(`Using sequential digit: ${withData(seq)}`);\n    //part
        2\n    let halfway = (i: number) =&gt; (i + data.length / 2) % data.length;\n    console.log(`Using
        halfway digit:    ${withData(halfway)}`);    ", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqljy3y", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Trying out TypeScript this
        year&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import fs = require(&amp;#39;fs&amp;#39;)\n\nfunction
        captcha(data: string) {\n    return (next: (n: number) =&amp;gt; number) =&amp;gt;
        {\n        let sum = 0;\n        for (let i = 0; i &amp;lt; data.length; i++)
        {\n            if (data[i] === data[next(i)])\n                sum += parseInt(data[i]);\n        }\n        return
        sum;\n    }\n}\n\nlet data = fs.readFileSync(&amp;#39;data/day01.txt&amp;#39;,
        &amp;#39;utf8&amp;#39;);\nlet withData = captcha(data);\n\n//part 1\nlet seq
        = (i: number) =&amp;gt; (i + 1) % data.length;\nconsole.log(`Using sequential
        digit: ${withData(seq)}`);\n//part 2\nlet halfway = (i: number) =&amp;gt;
        (i + data.length / 2) % data.length;\nconsole.log(`Using halfway digit:    ${withData(halfway)}`);    \n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqljy3y/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512110061.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 2, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "more",
        "data": {"count": 1, "name": "t1_dqltsoz", "id": "dqltsoz", "parent_id": "t1_dqlkf08",
        "depth": 1, "children": ["dqltsoz"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "dqlkf08", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "[deleted]", "can_mod_post": false, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 2, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "In OCaml:\n\n     open
        Core\n     \n     let shift l n =\n         let first, second = List.split_n
        l n in\n         List.append second first\n\n     let solve n sequence =\n         let
        f acc a b = if a = b then acc + a else acc\n         in List.fold2_exn sequence
        (shift sequence n) ~init:0 ~f\n\n     let sequence file =\n         In_channel.read_all
        file\n         |&gt; String.to_list\n         |&gt; List.filter_map ~f:Char.get_digit\n    \n     let
        a file = sequence file |&gt; solve 1\n\n     let b file =\n          let seq
        = sequence file in\n          solve (List.length seq / 2) seq\n\n     let
        _ =\n         a \"./2017/data/1a.txt\" |&gt; printf \"a: %d\\n\";\n         b
        \"./2017/data/1a.txt\" |&gt; printf \"b: %d\\n\";", "edited": 1512111692.0,
        "downs": 0, "author_flair_css_class": null, "collapsed": false, "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In OCaml:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;
        open Core\n\n let shift l n =\n     let first, second = List.split_n l n in\n     List.append
        second first\n\n let solve n sequence =\n     let f acc a b = if a = b then
        acc + a else acc\n     in List.fold2_exn sequence (shift sequence n) ~init:0
        ~f\n\n let sequence file =\n     In_channel.read_all file\n     |&amp;gt;
        String.to_list\n     |&amp;gt; List.filter_map ~f:Char.get_digit\n\n let a
        file = sequence file |&amp;gt; solve 1\n\n let b file =\n      let seq = sequence
        file in\n      solve (List.length seq / 2) seq\n\n let _ =\n     a &amp;quot;./2017/data/1a.txt&amp;quot;
        |&amp;gt; printf &amp;quot;a: %d\\n&amp;quot;;\n     b &amp;quot;./2017/data/1a.txt&amp;quot;
        |&amp;gt; printf &amp;quot;b: %d\\n&amp;quot;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlkf08/",
        "num_reports": null, "locked": false, "name": "t1_dqlkf08", "created": 1512110979.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512110979.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlkr7d", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "mossygrowth", "can_mod_post": false, "created_utc":
        1512111666.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 2,
        "author_fullname": "t2_8hysx", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Typescript (lazily).\n\nPart one:\n\n    function
        solve (input : string) : number {\n      const numerals : number[] = input.toString().split('''').map(char
        =&gt; parseInt(char));\n    \n      return numerals.reduce((acc : number,
        curr : number, index : number) : number =&gt; {\n        const next = numerals[(index
        + 1) % numerals.length];\n    \n        if (curr === next) {\n          return
        acc + curr;\n        } else {\n          return acc;\n        }\n      },
        0);\n    }\n\nPart two:\n\n    function solveFancier (input : string) : number
        {\n      const numerals : number[] = input.toString().split('''').map(char
        =&gt; parseInt(char));\n      const numberOfStepsAhead : number = numerals.length
        / 2;\n    \n      return numerals.reduce((acc : number, curr : number, index
        : number) : number =&gt; {\n        const next = numerals[(index + numberOfStepsAhead)
        % numerals.length];\n    \n        if (curr === next) {\n          return
        acc + curr;\n        } else {\n          return acc;\n        }\n      },
        0);\n    }", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqlkr7d", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Typescript
        (lazily).&lt;/p&gt;\n\n&lt;p&gt;Part one:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function
        solve (input : string) : number {\n  const numerals : number[] = input.toString().split(&amp;#39;&amp;#39;).map(char
        =&amp;gt; parseInt(char));\n\n  return numerals.reduce((acc : number, curr
        : number, index : number) : number =&amp;gt; {\n    const next = numerals[(index
        + 1) % numerals.length];\n\n    if (curr === next) {\n      return acc + curr;\n    }
        else {\n      return acc;\n    }\n  }, 0);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        two:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function solveFancier (input : string)
        : number {\n  const numerals : number[] = input.toString().split(&amp;#39;&amp;#39;).map(char
        =&amp;gt; parseInt(char));\n  const numberOfStepsAhead : number = numerals.length
        / 2;\n\n  return numerals.reduce((acc : number, curr : number, index : number)
        : number =&amp;gt; {\n    const next = numerals[(index + numberOfStepsAhead)
        % numerals.length];\n\n    if (curr === next) {\n      return acc + curr;\n    }
        else {\n      return acc;\n    }\n  }, 0);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlkr7d/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512111666.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 2, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqlmi7y", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_7gsrc2", "score":
        2, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "simple but effective (kotlin)\n\n    fun main(args: Array&lt;String&gt;)
        {\n        val instructions = Util.loadFile(AOC2017.basePath, \"advent1.txt\")\n        reverseCaptcha(instructions,
        1)\n        reverseCaptcha(instructions, instructions.length / 2)\n    }\n\n    private
        fun reverseCaptcha(instructions: String, skip: Int) {\n        val inst =
        instructions + instructions.substring(0, skip)\n        val length = inst.length
        - skip\n        val sum = (0 until length)\n                .filter { inst[it]
        == inst[it + skip] }\n                .map { inst[it].toString().toInt() }\n                .sum()\n        println(sum)\n\n    }\n\n\nedit:
        even better\n\n    private fun reverseCaptcha(input: String, skip: Int) {\n        val
        sum = (0 until input.length)\n                .filter { input[it] == input[(it
        + skip) % length] }\n                .map { input[it].toString().toInt() }\n                .sum()\n        println(sum)\n    }",
        "edited": 1512331400.0, "downs": 0, "author_flair_css_class": null, "collapsed":
        false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;simple
        but effective (kotlin)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fun main(args:
        Array&amp;lt;String&amp;gt;) {\n    val instructions = Util.loadFile(AOC2017.basePath,
        &amp;quot;advent1.txt&amp;quot;)\n    reverseCaptcha(instructions, 1)\n    reverseCaptcha(instructions,
        instructions.length / 2)\n}\n\nprivate fun reverseCaptcha(instructions: String,
        skip: Int) {\n    val inst = instructions + instructions.substring(0, skip)\n    val
        length = inst.length - skip\n    val sum = (0 until length)\n            .filter
        { inst[it] == inst[it + skip] }\n            .map { inst[it].toString().toInt()
        }\n            .sum()\n    println(sum)\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;edit:
        even better&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;private fun reverseCaptcha(input:
        String, skip: Int) {\n    val sum = (0 until input.length)\n            .filter
        { input[it] == input[(it + skip) % length] }\n            .map { input[it].toString().toInt()
        }\n            .sum()\n    println(sum)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlmi7y/",
        "num_reports": null, "locked": false, "name": "t1_dqlmi7y", "created": 1512115512.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512115512.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqloxyq", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Forricide", "can_mod_post": false, "created_utc":
        1512121884.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 2,
        "author_fullname": "t2_mwe80", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "There''s probably a more efficient way to
        do this... (Python)\n\nBut it was fun nonetheless!\n\n    total = 0\n    buffer
        = int(s[len(s)-1])\n    for n in s:\n        total += (1 - bool(buffer - int(n)))*int(n)\n        buffer
        = int(n)", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqloxyq", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There&amp;#39;s
        probably a more efficient way to do this... (Python)&lt;/p&gt;\n\n&lt;p&gt;But
        it was fun nonetheless!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;total = 0\nbuffer
        = int(s[len(s)-1])\nfor n in s:\n    total += (1 - bool(buffer - int(n)))*int(n)\n    buffer
        = int(n)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqloxyq/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512121884.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 3, "name": "t1_dqly3ba",
        "id": "dqly3ba", "parent_id": "t1_dqlp7lc", "depth": 1, "children": ["dqly3ba",
        "dqmvhie", "dqmersr"]}}], "before": null}}, "user_reports": [], "saved": false,
        "id": "dqlp7lc", "banned_at_utc": null, "mod_reason_title": null, "gilded":
        0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author":
        "disclosure5", "can_mod_post": false, "created_utc": 1512122647.0, "send_replies":
        true, "parent_id": "t3_7gsrc2", "score": 2, "author_fullname": "t2_c57bu",
        "approved_by": null, "mod_note": null, "all_awardings": [], "collapsed": false,
        "body": "Well I expected to have the only Erlang but /u/warbringer007 beat
        me to it.\n\nhttps://github.com/technion/aoc2017/blob/master/one.erl", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqlp7lc",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well I expected to have
        the only Erlang but &lt;a href=\"/u/warbringer007\"&gt;/u/warbringer007&lt;/a&gt;
        beat me to it.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/technion/aoc2017/blob/master/one.erl\"&gt;https://github.com/technion/aoc2017/blob/master/one.erl&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlp7lc/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512122647.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqlws4o",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "jschulenklopper",
        "can_mod_post": false, "created_utc": 1512137869.0, "send_replies": true,
        "parent_id": "t1_dqlq7z2", "score": 2, "author_fullname": "t2_g7bah", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Even more Ruby-esque:\n\n    while line = gets\n      digits = line.strip.chars.map(&amp;:to_i)\n      puts
        digits.reject.each_with_index { |digit, i|\n        # Replace `digits.length/2`
        by `1` for first puzzle.\n        digits[i] != digits[ (i + digits.length/2)
        % digits.length]\n      }.sum\n    end\n\nThis removes the elements not meeting
        the condition from the array, and then totals the remaining digits.", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqlws4o",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Even more Ruby-esque:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;while
        line = gets\n  digits = line.strip.chars.map(&amp;amp;:to_i)\n  puts digits.reject.each_with_index
        { |digit, i|\n    # Replace `digits.length/2` by `1` for first puzzle.\n    digits[i]
        != digits[ (i + digits.length/2) % digits.length]\n  }.sum\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This
        removes the elements not meeting the condition from the array, and then totals
        the remaining digits.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_7gsrc2", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlws4o/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512137869.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 2}}, {"kind": "more", "data": {"count": 1, "name": "t1_dqlu3s6",
        "id": "dqlu3s6", "parent_id": "t1_dqlq7z2", "depth": 1, "children": ["dqlu3s6"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "dqlq7z2", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "jschulenklopper", "can_mod_post": false,
        "created_utc": 1512125482.0, "send_replies": true, "parent_id": "t3_7gsrc2",
        "score": 2, "author_fullname": "t2_g7bah", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Short solution in
        Ruby, combining both parts:\n\n    while line = gets  # Process all lines
        in input file.\n      digits = line.strip.chars.map(&amp;:to_i)  # Turn a
        line into an array of integers.\n      sumA, sumB = 0, 0\n      digits.each.with_index
        do |digit, index|\n        sumA += digit if digit == digits[(index+1) % digits.length]  #
        Add next digit\n        sumB += digit if digit == digits[(index + digits.length
        / 2) % digits.length]  # Add digit half-way.\n      end\n      puts sumA,
        sumB\n    end\n", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqlq7z2", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Short
        solution in Ruby, combining both parts:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;while
        line = gets  # Process all lines in input file.\n  digits = line.strip.chars.map(&amp;amp;:to_i)  #
        Turn a line into an array of integers.\n  sumA, sumB = 0, 0\n  digits.each.with_index
        do |digit, index|\n    sumA += digit if digit == digits[(index+1) % digits.length]  #
        Add next digit\n    sumB += digit if digit == digits[(index + digits.length
        / 2) % digits.length]  # Add digit half-way.\n  end\n  puts sumA, sumB\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlq7z2/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512125482.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 2, "name": "t1_dqlreob",
        "id": "dqlreob", "parent_id": "t1_dqlqcll", "depth": 1, "children": ["dqlreob",
        "dqlu29l"]}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "dqlqcll", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "chunes",
        "can_mod_post": false, "created_utc": 1512125838.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 2, "author_fullname": "t2_7ybf8", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "A
        Factor solution:  \n\n    USING: grouping io kernel locals math math.parser
        prettyprint\n    sequences ;\n    IN: advent-of-code.inverse-captcha\n\n    :  pare  (
        a b -- n ) 2dup = [ drop ] [ 2drop 0 ] if ;\n    :  adj   ( seq -- n ) first2
        pare ;\n    :: opp   ( seq -- n ) 0 seq nth seq length 2 / seq nth pare ;\n    :  solu1
        ( seq -- n ) 2 circular-clump [ adj ] map-sum ;\n    :  solu2 ( seq -- n )
        dup length circular-clump [ opp ] map-sum ;\n    :  input ( -- seq )   readln
        string&gt;digits ;\n    :  main  ( -- )       input [ solu2 ] [ solu1 ] bi
        . . ;\n\n    MAIN: main", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqlqcll", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;A
        Factor solution:  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;USING: grouping io
        kernel locals math math.parser prettyprint\nsequences ;\nIN: advent-of-code.inverse-captcha\n\n:  pare  (
        a b -- n ) 2dup = [ drop ] [ 2drop 0 ] if ;\n:  adj   ( seq -- n ) first2
        pare ;\n:: opp   ( seq -- n ) 0 seq nth seq length 2 / seq nth pare ;\n:  solu1
        ( seq -- n ) 2 circular-clump [ adj ] map-sum ;\n:  solu2 ( seq -- n ) dup
        length circular-clump [ opp ] map-sum ;\n:  input ( -- seq )   readln string&amp;gt;digits
        ;\n:  main  ( -- )       input [ solu2 ] [ solu1 ] bi . . ;\n\nMAIN: main\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlqcll/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512125838.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlqnd5", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Scroph", "can_mod_post": false, "created_utc":
        1512126661.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 2,
        "author_fullname": "t2_6p6h0", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "I solved it in Java (it being my new year''s
        resolution and all) but the solution was too boring for reddit. I''ll give
        you this D code instead :\n\n\timport std.stdio;\n\timport std.algorithm;\n\timport
        std.range;\n\t\n\tvoid main()\n\t{\n\t\tforeach(line; stdin.byLine)\n\t\t{\n\t\t\tint
        offset = line.length / 2;\n\t\t\tiota(0, line.length)\n\t\t\t\t.filter!(i
        =&gt; line[i] == line[(i + offset) % $])\n\t\t\t\t.map!(i =&gt; line[i] -
        ''0'')\n\t\t\t\t.sum\n\t\t\t\t.writeln;\n\t\t}\n\t}", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqlqnd5", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I solved it in Java (it being
        my new year&amp;#39;s resolution and all) but the solution was too boring
        for reddit. I&amp;#39;ll give you this D code instead :&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        std.stdio;\nimport std.algorithm;\nimport std.range;\n\nvoid main()\n{\n    foreach(line;
        stdin.byLine)\n    {\n        int offset = line.length / 2;\n        iota(0,
        line.length)\n            .filter!(i =&amp;gt; line[i] == line[(i + offset)
        % $])\n            .map!(i =&amp;gt; line[i] - &amp;#39;0&amp;#39;)\n            .sum\n            .writeln;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlqnd5/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512126661.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 2, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqlrd8s", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_7gsrc2", "score":
        2, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Hi everyone \\^\\^. I''m trying out Haskell after going
        through some tutorials!\n\n    main = print (\"First star: \" ++ show(sum_next
        inp 1) ++ \", Second star: \" ++ show(sum_next inp (div (length inp) 2)))\n    sum_next
        input step =\n        sum [ read([a]) :: Integer |\n        (a,b) &lt;- zip
        input (take (length input) (drop step (input++input))),\n        a == b]\n",
        "edited": false, "downs": 0, "author_flair_css_class": null, "collapsed":
        false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hi
        everyone ^^. I&amp;#39;m trying out Haskell after going through some tutorials!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;main
        = print (&amp;quot;First star: &amp;quot; ++ show(sum_next inp 1) ++ &amp;quot;,
        Second star: &amp;quot; ++ show(sum_next inp (div (length inp) 2)))\nsum_next
        input step =\n    sum [ read([a]) :: Integer |\n    (a,b) &amp;lt;- zip input
        (take (length input) (drop step (input++input))),\n    a == b]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlrd8s/",
        "num_reports": null, "locked": false, "name": "t1_dqlrd8s", "created": 1512128531.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512128531.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlukxq", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "huyqvu", "can_mod_post": false, "created_utc":
        1512134741.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 2,
        "author_fullname": "t2_k1la7tn", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "**KDB+/q**\n    {show sum 0,\"I\"$'' x where
        x=(1_x),1#x;n:(count x)div 2;show sum 0,\"I\"$'' x where x=(n _x),n#x}", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqlukxq",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;KDB+/q&lt;/strong&gt;\n    {show
        sum 0,&amp;quot;I&amp;quot;$&amp;#39; x where x=(1_x),1#x;n:(count x)div 2;show
        sum 0,&amp;quot;I&amp;quot;$&amp;#39; x where x=(n _x),n#x}&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlukxq/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512134741.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 1, "name": "t1_dqoq2it",
        "id": "dqoq2it", "parent_id": "t1_dqlyd8h", "depth": 1, "children": ["dqoq2it"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "dqlyd8h", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "darshanrampatel", "can_mod_post": false,
        "created_utc": 1512139725.0, "send_replies": true, "parent_id": "t3_7gsrc2",
        "score": 2, "author_fullname": "t2_vfg74", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "[My C# GitHub Repo](https://github.com/darshanrampatel/Advent-of-Code-2017/blob/master/AoC2017/Day1.cs)\n\nIncludes
        Unit Tests!", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqlyd8h", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a
        href=\"https://github.com/darshanrampatel/Advent-of-Code-2017/blob/master/AoC2017/Day1.cs\"&gt;My
        C# GitHub Repo&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Includes Unit Tests!&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlyd8h/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512139725.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqm4bm7", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "sguberman", "can_mod_post": false, "created_utc":
        1512145679.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 2,
        "author_fullname": "t2_zobt6", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Python, with tests and input: [GitHub](https://github.com/sguberman/advent2017/tree/master/day01)\n\nEdit:
        saved you a click by pasting relevant function here\n    \n    def captcha(digits,
        offset=1):\n        neighbors = digits[offset:] + digits[:offset]\n        return
        sum(int(d) for d, n in zip(digits, neighbors) if d == n)\n", "edited": 1512146231.0,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqm4bm7",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python, with tests and
        input: &lt;a href=\"https://github.com/sguberman/advent2017/tree/master/day01\"&gt;GitHub&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Edit:
        saved you a click by pasting relevant function here&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        captcha(digits, offset=1):\n    neighbors = digits[offset:] + digits[:offset]\n    return
        sum(int(d) for d, n in zip(digits, neighbors) if d == n)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm4bm7/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512145679.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqm7y3z", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "blazingkin", "can_mod_post": false, "created_utc":
        1512149036.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 2,
        "author_fullname": "t2_5zfcq", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Literally the first Haskell program I ever
        wrote\n\n    buildList num = if num &lt; 10\n                    then [num]\n                    else
        buildList (quot num 10) ++ [(mod num 10)]\n    \n    addIfMatches list = if
        list !! 0 == list !! 1\n                        then list !! 0\n                        else
        0\n    \n    -- Does not check the last against the first, that needs to be
        done manually\n    reverseCaptcha list = if tail list == []\n                          then
        0\n                          else addIfMatches list + reverseCaptcha (tail
        list)", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqm7y3z", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Literally
        the first Haskell program I ever wrote&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;buildList
        num = if num &amp;lt; 10\n                then [num]\n                else
        buildList (quot num 10) ++ [(mod num 10)]\n\naddIfMatches list = if list !!
        0 == list !! 1\n                    then list !! 0\n                    else
        0\n\n-- Does not check the last against the first, that needs to be done manually\nreverseCaptcha
        list = if tail list == []\n                      then 0\n                      else
        addIfMatches list + reverseCaptcha (tail list)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm7y3z/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512149036.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 2, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqm964g", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_7gsrc2", "score":
        2, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "edited": false, "downs": 0, "author_flair_css_class":
        null, "collapsed": true, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm964g/",
        "num_reports": null, "locked": false, "name": "t1_dqm964g", "created": 1512150166.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512150166.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqmdjwe", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Reibello", "can_mod_post": false, "created_utc":
        1512154273.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 2,
        "author_fullname": "t2_srfpq", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Decided to try and redo each day''s puzzle
        in Lua after solving in Python 3.  We''ll see how far I get.  Comments and
        criticisms welcome - I have literally written three things in Lua before (Days
        1-3 of 2015 AoC)  https://github.com/Reibello/AoC-2017-Lua", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqmdjwe",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Decided to try and redo
        each day&amp;#39;s puzzle in Lua after solving in Python 3.  We&amp;#39;ll
        see how far I get.  Comments and criticisms welcome - I have literally written
        three things in Lua before (Days 1-3 of 2015 AoC)  &lt;a href=\"https://github.com/Reibello/AoC-2017-Lua\"&gt;https://github.com/Reibello/AoC-2017-Lua&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmdjwe/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512154273.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqmgd74", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "equd", "can_mod_post": false, "created_utc":
        1512156954.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 2,
        "author_fullname": "t2_j7v6l", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "My c# solution, first did it using a for
        loop, but wanted to see if I could do it in a single linq statement.\n\n    var
        lineA = Properties.Resources.Day01 + Properties.Resources.Day01.Last();\n    answerA
        += lineA.Take(lineA.Length - 1).Zip(lineA.Skip(1), (a, b) =&gt; (a == b) ?
        a - 48: 0).Sum();\n\n    var lineB = Properties.Resources.Day01 + Properties.Resources.Day01;\n    answerB
        += lineB.Take(lineB.Length / 2).Zip(lineB.Skip(lineB.Length / 4).Take(lineB.Length
        / 2), (a, b) =&gt; (a == b) ? a - 48 : 0).Sum();\n", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqmgd74", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My c# solution, first did it
        using a for loop, but wanted to see if I could do it in a single linq statement.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var
        lineA = Properties.Resources.Day01 + Properties.Resources.Day01.Last();\nanswerA
        += lineA.Take(lineA.Length - 1).Zip(lineA.Skip(1), (a, b) =&amp;gt; (a ==
        b) ? a - 48: 0).Sum();\n\nvar lineB = Properties.Resources.Day01 + Properties.Resources.Day01;\nanswerB
        += lineB.Take(lineB.Length / 2).Zip(lineB.Skip(lineB.Length / 4).Take(lineB.Length
        / 2), (a, b) =&amp;gt; (a == b) ? a - 48 : 0).Sum();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmgd74/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512156954.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqn8vi6", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Isvara", "can_mod_post": false, "created_utc":
        1512190646.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 2,
        "author_fullname": "t2_10v24", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "# Solutions in Scala\n\n    val input = \"...\"\n\nPart
        1:\n\n    (input + input.head)\n        .sliding(2)\n        .filter(pair
        =&gt; pair(0) == pair(1))\n        .map(_(0) - ''0'')\n        .sum\n\nPart
        2:\n\n    input\n        .zipWithIndex\n        .filter { case (n, i) =&gt;
        n == input((i + input.length / 2) % input.length) }\n        .map(_._1 - ''0'')\n        .sum\n",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqn8vi6", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Solutions
        in Scala&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;val input = &amp;quot;...&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(input + input.head)\n    .sliding(2)\n    .filter(pair
        =&amp;gt; pair(0) == pair(1))\n    .map(_(0) - &amp;#39;0&amp;#39;)\n    .sum\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;input\n    .zipWithIndex\n    .filter
        { case (n, i) =&amp;gt; n == input((i + input.length / 2) % input.length)
        }\n    .map(_._1 - &amp;#39;0&amp;#39;)\n    .sum\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqn8vi6/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512190646.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqnhovk", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "aurele", "can_mod_post": false, "created_utc":
        1512210621.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 2,
        "author_fullname": "t2_1w2b", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "**Rust**\n\n    fn p(input: &amp;str, shift:
        usize) -&gt; usize {\n        input\n            .chars()\n            .zip(input.chars().cycle().skip(shift))\n            .filter_map(|(a,
        b)| {\n                if a == b {\n                    Some((a as u8 - b''0'')
        as usize)\n                } else {\n                    None\n                }\n            })\n            .sum()\n    }\n    \n    fn
        main() {\n        let input = include_str!(\"input\").trim();\n        println!(\"P1:
        {}\", p(input, 1));\n        println!(\"P2: {}\", p(input, input.len() / 2));\n    }\n",
        "edited": 1512212854.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqnhovk", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fn
        p(input: &amp;amp;str, shift: usize) -&amp;gt; usize {\n    input\n        .chars()\n        .zip(input.chars().cycle().skip(shift))\n        .filter_map(|(a,
        b)| {\n            if a == b {\n                Some((a as u8 - b&amp;#39;0&amp;#39;)
        as usize)\n            } else {\n                None\n            }\n        })\n        .sum()\n}\n\nfn
        main() {\n    let input = include_str!(&amp;quot;input&amp;quot;).trim();\n    println!(&amp;quot;P1:
        {}&amp;quot;, p(input, 1));\n    println!(&amp;quot;P2: {}&amp;quot;, p(input,
        input.len() / 2));\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqnhovk/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512210621.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 2, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqnwbni", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_7gsrc2", "score":
        2, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "**Excel**\n\nhttps://github.com/imoutopantsu/adventofcode-2017/blob/master/day%201%20-%20Excel.xlsx",
        "edited": false, "downs": 0, "author_flair_css_class": null, "collapsed":
        false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Excel&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/imoutopantsu/adventofcode-2017/blob/master/day%201%20-%20Excel.xlsx\"&gt;https://github.com/imoutopantsu/adventofcode-2017/blob/master/day%201%20-%20Excel.xlsx&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqnwbni/",
        "num_reports": null, "locked": false, "name": "t1_dqnwbni", "created": 1512236249.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512236249.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqoy96y", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "RockyAstro", "can_mod_post": false, "created_utc":
        1512283251.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 2,
        "author_fullname": "t2_rd35u", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Snobol Actually -- it''s spitbol  https://github.com/spitbol/spitbol\n\nThe
        challenge here for me, is that it''s been quite a while since I''ve coded
        in Snobol so I''m knocking the rust off.\n\nThe difficult part for this one
        is that Snobol doesn''t allow a backward reference in a pattern (so indexing
        backwords doesn''t work).  I was able to solve this by using a function to
        handle the inner pattern.\n\nPart 1:\n\n    * Function definitions\n    \n        define(''innerpat(p,c,s)n'')
        :(innerpatend)\n    innerpat\n        s ? tab( remdr(p, size(s)) ) len(1)
        . n :f(freturn)\n        innerpat = n\n        sum = ident(+c,+n) sum + c              :(return)\n    innerpatend\n    \n    *
        Start main line\n        input(.in,1,''input.txt[-L5000]'')\n        sum =
        0\n        s = in \n        \n        pat = fence arb len(1) $ c @p  *innerpat(p,c,s)
        rpos(0) \n       \n    loop s ? succeed pat fail   :s(loop)\n        terminal
        = sum\n    end\n\nPart 2:\n\n    * Function definitions\n    \n        define(''innerpat(p,c,s)n'')
        :(innerpatend)\n    innerpat\n        step = size(s) / 2\n        s ? tab(
        remdr(p + step - 1 , size(s)) ) len(1) . n :f(freturn)\n        innerpat =
        n\n        sum = ident(+c,+n) sum + c              :(return)\n    innerpatend\n    \n    *
        Start main line\n        input(.in,1,''input.txt[-L5000]'')\n        sum =
        0\n        s = in  \n        pat = fence arb len(1) $ c @p  *innerpat(p,c,s)
        rpos(0) \n           \n    loop s ? succeed pat fail   :s(loop)\n        terminal
        = sum\n    end\n\n", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqoy96y", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Snobol
        Actually -- it&amp;#39;s spitbol  &lt;a href=\"https://github.com/spitbol/spitbol\"&gt;https://github.com/spitbol/spitbol&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The
        challenge here for me, is that it&amp;#39;s been quite a while since I&amp;#39;ve
        coded in Snobol so I&amp;#39;m knocking the rust off.&lt;/p&gt;\n\n&lt;p&gt;The
        difficult part for this one is that Snobol doesn&amp;#39;t allow a backward
        reference in a pattern (so indexing backwords doesn&amp;#39;t work).  I was
        able to solve this by using a function to handle the inner pattern.&lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;* Function definitions\n\n    define(&amp;#39;innerpat(p,c,s)n&amp;#39;)
        :(innerpatend)\ninnerpat\n    s ? tab( remdr(p, size(s)) ) len(1) . n :f(freturn)\n    innerpat
        = n\n    sum = ident(+c,+n) sum + c              :(return)\ninnerpatend\n\n*
        Start main line\n    input(.in,1,&amp;#39;input.txt[-L5000]&amp;#39;)\n    sum
        = 0\n    s = in \n\n    pat = fence arb len(1) $ c @p  *innerpat(p,c,s) rpos(0)
        \n\nloop s ? succeed pat fail   :s(loop)\n    terminal = sum\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;* Function definitions\n\n    define(&amp;#39;innerpat(p,c,s)n&amp;#39;)
        :(innerpatend)\ninnerpat\n    step = size(s) / 2\n    s ? tab( remdr(p + step
        - 1 , size(s)) ) len(1) . n :f(freturn)\n    innerpat = n\n    sum = ident(+c,+n)
        sum + c              :(return)\ninnerpatend\n\n* Start main line\n    input(.in,1,&amp;#39;input.txt[-L5000]&amp;#39;)\n    sum
        = 0\n    s = in  \n    pat = fence arb len(1) $ c @p  *innerpat(p,c,s) rpos(0)
        \n\nloop s ? succeed pat fail   :s(loop)\n    terminal = sum\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqoy96y/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512283251.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 2, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqpnixl", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_7gsrc2", "score":
        2, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Swift \n\n    func inverseCaptcha(input: String) -&gt;
        Int {\n    \tguard\n    \t\tlet first = input.first.map ({ String($0) }),\n    \t\tlet
        firstNumber = Int(first)\n    \t\telse { return 0 }\n    \n    \tlet inputNumbers
        = (input + first).dropFirst().flatMap { Int(String($0)) }\n    \treturn inputNumbers.reduce((0,
        firstNumber)) { (arg0, right) -&gt; (Int, Int) in\n    \t\tlet (accu, left)
        = arg0\n    \t\treturn (accu + (left == right ? left : 0), right)\n    \t    }.0\n    }\n    \n    func
        inverseCaptcha2(input: String) -&gt; Int {\n    \tlet inputNumbers = input.flatMap
        { Int(String($0)) }\n    \n    \tlet zipLeft = inputNumbers.prefix(input.count/2)\n    \tlet
        zipRight = inputNumbers.suffix(input.count/2)\n    \treturn 2 * zip(zipLeft,
        zipRight).reduce(0) { r, pair in\n    \t\treturn r + (pair.0 == pair.1 ? pair.0
        : 0)\n    \t}\n    }", "edited": false, "downs": 0, "author_flair_css_class":
        null, "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Swift
        &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func inverseCaptcha(input: String) -&amp;gt;
        Int {\n    guard\n        let first = input.first.map ({ String($0) }),\n        let
        firstNumber = Int(first)\n        else { return 0 }\n\n    let inputNumbers
        = (input + first).dropFirst().flatMap { Int(String($0)) }\n    return inputNumbers.reduce((0,
        firstNumber)) { (arg0, right) -&amp;gt; (Int, Int) in\n        let (accu,
        left) = arg0\n        return (accu + (left == right ? left : 0), right)\n        }.0\n}\n\nfunc
        inverseCaptcha2(input: String) -&amp;gt; Int {\n    let inputNumbers = input.flatMap
        { Int(String($0)) }\n\n    let zipLeft = inputNumbers.prefix(input.count/2)\n    let
        zipRight = inputNumbers.suffix(input.count/2)\n    return 2 * zip(zipLeft,
        zipRight).reduce(0) { r, pair in\n        return r + (pair.0 == pair.1 ? pair.0
        : 0)\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "associated_award": null, "stickied": false, "subreddit_type":
        "public", "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqpnixl/", "num_reports":
        null, "locked": false, "name": "t1_dqpnixl", "created": 1512328259.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512328259.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqqdv4h", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "ritopleaze", "can_mod_post": false, "created_utc":
        1512357310.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 2,
        "author_fullname": "t2_fpp43", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Little late but here is mine in python:\n\n\n    def
        captchaCount(a):\n\n        count = 0\n        size = len(a)\n\n        for
        i in range(size):\n            if i+1 == size:\n                if a[i] ==
        a[0]:\n                    count += int(a[i])\n            elif a[i] == a[i+1]:\n                count
        += int(a[i])\n\n\n\n        print(count)     \n      ", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqqdv4h", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Little late but here is mine
        in python:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def captchaCount(a):\n\n    count
        = 0\n    size = len(a)\n\n    for i in range(size):\n        if i+1 == size:\n            if
        a[i] == a[0]:\n                count += int(a[i])\n        elif a[i] == a[i+1]:\n            count
        += int(a[i])\n\n\n\n    print(count)     \n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqqdv4h/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512357310.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqqpso3", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "autid", "can_mod_post": false, "created_utc":
        1512376836.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 2,
        "author_fullname": "t2_g26j3", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "**Fortran**\n\n    program\tday1\n      implicit
        none\n    \n      character(len=2000000) :: input\n    \n      open(1,file=''input.txt'')\n      read(1,''(a)'')
        input\n      close(1)\n    \n      write(*,''(a,i0)'') ''Part1: '',getsum(trim(input),1)\n      write(*,''(a,i0)'')
        ''Part2: '',getsum(trim(input),len(trim(input))/2)\n    \n    contains\n      function
        getsum(str,offset) result (answer)\n        character(len=*) :: str\n        integer
        :: offset,answer,i,lookup(len(str))\n        lookup(1:offset) = (/(i,i=len(str)+1-offset,len(str))/)\n        lookup(offset+1:len(str))
        = (/(i,i=1,len(str)-offset)/)\n        answer=0\n        do i=1,len(str)\n           if
        (str(i:i)==str(lookup(i):lookup(i))) then\n              answer = answer+iachar(str(i:i))-48\n           end
        if\n        end do\n      end function getsum\n    \n    end program day1",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqqpso3", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Fortran&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;program
        day1\n  implicit none\n\n  character(len=2000000) :: input\n\n  open(1,file=&amp;#39;input.txt&amp;#39;)\n  read(1,&amp;#39;(a)&amp;#39;)
        input\n  close(1)\n\n  write(*,&amp;#39;(a,i0)&amp;#39;) &amp;#39;Part1: &amp;#39;,getsum(trim(input),1)\n  write(*,&amp;#39;(a,i0)&amp;#39;)
        &amp;#39;Part2: &amp;#39;,getsum(trim(input),len(trim(input))/2)\n\ncontains\n  function
        getsum(str,offset) result (answer)\n    character(len=*) :: str\n    integer
        :: offset,answer,i,lookup(len(str))\n    lookup(1:offset) = (/(i,i=len(str)+1-offset,len(str))/)\n    lookup(offset+1:len(str))
        = (/(i,i=1,len(str)-offset)/)\n    answer=0\n    do i=1,len(str)\n       if
        (str(i:i)==str(lookup(i):lookup(i))) then\n          answer = answer+iachar(str(i:i))-48\n       end
        if\n    end do\n  end function getsum\n\nend program day1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqqpso3/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512376836.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqrla2w", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "MyGoodStrayCatFriend", "can_mod_post":
        false, "created_utc": 1512419830.0, "send_replies": true, "parent_id": "t3_7gsrc2",
        "score": 2, "author_fullname": "t2_s5xk7", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Golfed JavaScript/es6/node:\n\n***\n\n    import
        fs from ''fs''\n    import path from ''path''\n\n    require(''colors'')\n\n    const
        INPUT = fs.readFileSync(path.join(__dirname, ''./input.txt''), ''utf-8'').trim().split('''').map(Number),        \n          PT_1  =
        [...INPUT,...[INPUT[0]]].reduce((a,b,i,s)=&gt;b===s[i+1]?a+b:a,0),\n          PT_2  =
        INPUT.reduce((a,b,i,s)=&gt;b===s[i&lt;s.length/2?i+(s.length/2):i-(s.length/2)]?a+b:a,0)\n\n    console.log(`Part
        1: `.blue + `${ PT_1 }`.green)\n    console.log(`Part 2: `.blue + `${ PT_2
        }`.green)\n\n***\n\n\n\n\n", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqrla2w", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Golfed
        JavaScript/es6/node:&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        fs from &amp;#39;fs&amp;#39;\nimport path from &amp;#39;path&amp;#39;\n\nrequire(&amp;#39;colors&amp;#39;)\n\nconst
        INPUT = fs.readFileSync(path.join(__dirname, &amp;#39;./input.txt&amp;#39;),
        &amp;#39;utf-8&amp;#39;).trim().split(&amp;#39;&amp;#39;).map(Number),        \n      PT_1  =
        [...INPUT,...[INPUT[0]]].reduce((a,b,i,s)=&amp;gt;b===s[i+1]?a+b:a,0),\n      PT_2  =
        INPUT.reduce((a,b,i,s)=&amp;gt;b===s[i&amp;lt;s.length/2?i+(s.length/2):i-(s.length/2)]?a+b:a,0)\n\nconsole.log(`Part
        1: `.blue + `${ PT_1 }`.green)\nconsole.log(`Part 2: `.blue + `${ PT_2 }`.green)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr/&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqrla2w/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512419830.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqsfjdj", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "raiph", "can_mod_post": false, "created_utc":
        1512453612.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 2,
        "author_fullname": "t2_3l1mc", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "P6:\n\n    say sum .kv.map: -&gt; \\k, $
        { .[k] if .[k] == .[(k+1   ) % $_] } with input.comb.cache ; # part 1\n    say
        sum .kv.map: -&gt; \\k, $ { .[k] if .[k] == .[(k+$_/2) % $_] } with input.comb.cache
        ; # part 2\n", "edited": 1512454971.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqsfjdj", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;P6:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;say
        sum .kv.map: -&amp;gt; \\k, $ { .[k] if .[k] == .[(k+1   ) % $_] } with input.comb.cache
        ; # part 1\nsay sum .kv.map: -&amp;gt; \\k, $ { .[k] if .[k] == .[(k+$_/2)
        % $_] } with input.comb.cache ; # part 2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqsfjdj/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512453612.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlgzdi", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "fwilson42", "can_mod_post": false, "created_utc":
        1512105028.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 2,
        "author_fullname": "t2_ef0xm", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Cleaned up mine, in Python:\n\n    #!/usr/bin/env
        python3\n    import click\n\n\n    @click.command()\n    @click.argument(''input'',
        type=click.File(''r''), help=''Your input file.'')\n    @click.option(''--part'',
        ''-p'', type=click.IntRange(1, 2), required=True)\n    def solve(input, part):\n        digits
        = input.read().strip()\n        digits = list(map(int, digits))\n        count
        = len(digits)\n\n        result = 0\n\n        for index, value in enumerate(digits):\n\n            if
        part == 1:\n                target = index + 1\n            elif part == 2:\n                target
        = index + (count // 2)\n\n            if value == digits[target % count]:\n                result
        += value\n\n        click.echo(''Captcha result: {}''.format(\n                        click.style(str(result),
        fg=''yellow'')))\n\n\n    if __name__ == ''__main__'':\n        solve()\n\nRun
        with `./day1 /path/to/input --part 1` or `--part 2`.", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqlgzdi", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Cleaned up mine, in Python:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/usr/bin/env
        python3\nimport click\n\n\n@click.command()\n@click.argument(&amp;#39;input&amp;#39;,
        type=click.File(&amp;#39;r&amp;#39;), help=&amp;#39;Your input file.&amp;#39;)\n@click.option(&amp;#39;--part&amp;#39;,
        &amp;#39;-p&amp;#39;, type=click.IntRange(1, 2), required=True)\ndef solve(input,
        part):\n    digits = input.read().strip()\n    digits = list(map(int, digits))\n    count
        = len(digits)\n\n    result = 0\n\n    for index, value in enumerate(digits):\n\n        if
        part == 1:\n            target = index + 1\n        elif part == 2:\n            target
        = index + (count // 2)\n\n        if value == digits[target % count]:\n            result
        += value\n\n    click.echo(&amp;#39;Captcha result: {}&amp;#39;.format(\n                    click.style(str(result),
        fg=&amp;#39;yellow&amp;#39;)))\n\n\nif __name__ == &amp;#39;__main__&amp;#39;:\n    solve()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Run
        with &lt;code&gt;./day1 /path/to/input --part 1&lt;/code&gt; or &lt;code&gt;--part
        2&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlgzdi/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512105028.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_7gsrc2", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "more", "data": {"count":
        1, "name": "t1_dqlw75h", "id": "dqlw75h", "parent_id": "t1_dqlhjqn", "depth":
        1, "children": ["dqlw75h"]}}], "before": null}}, "user_reports": [], "saved":
        false, "id": "dqlhjqn", "banned_at_utc": null, "mod_reason_title": null, "gilded":
        0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author":
        "ajn0592", "can_mod_post": false, "created_utc": 1512105879.0, "send_replies":
        true, "parent_id": "t3_7gsrc2", "score": 2, "author_fullname": "t2_524hr",
        "approved_by": null, "mod_note": null, "all_awardings": [], "collapsed": false,
        "body": "I''m doing mine in Golang this year because I want to learn it better.
        Constructive Criticism welcome! [Day 1 on Github](https://github.com/ajn0592/AdventOfCode2017/blob/master/2017/day01/main.go)\n    \n",
        "edited": 1512108551.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqlhjqn", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m
        doing mine in Golang this year because I want to learn it better. Constructive
        Criticism welcome! &lt;a href=\"https://github.com/ajn0592/AdventOfCode2017/blob/master/2017/day01/main.go\"&gt;Day
        1 on Github&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhjqn/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512105879.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_7gsrc2", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "more", "data": {"count":
        2, "name": "t1_dqltuxu", "id": "dqltuxu", "parent_id": "t1_dqllahk", "depth":
        1, "children": ["dqltuxu", "dqm3177"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "dqllahk", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "iamnotposting", "can_mod_post": false, "created_utc": 1512112774.0,
        "send_replies": true, "parent_id": "t3_7gsrc2", "score": 2, "author_fullname":
        "t2_bvpm3", "approved_by": null, "mod_note": null, "all_awardings": [], "collapsed":
        false, "body": "whoops, i didn''t realize this has started already! (i probably
        could have gotten a spot if not for my 2 hour delay)\n\nanyway, in [oK](http://johnearnest.github.io/ok/)\n\n    a1p1:
        {[list]+/{.x.,0*(=).x}''2'':list,list.,0}\n    a1p2: {[list]+/{+/.:''x*(=).x}''+2
        0N#list}\n\nthis is my first time using array programming languages \"for
        real\", so these probably could be more concise", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqllahk", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;whoops, i didn&amp;#39;t realize
        this has started already! (i probably could have gotten a spot if not for
        my 2 hour delay)&lt;/p&gt;\n\n&lt;p&gt;anyway, in &lt;a href=\"http://johnearnest.github.io/ok/\"&gt;oK&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;a1p1:
        {[list]+/{.x.,0*(=).x}&amp;#39;2&amp;#39;:list,list.,0}\na1p2: {[list]+/{+/.:&amp;#39;x*(=).x}&amp;#39;+2
        0N#list}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;this is my first time using
        array programming languages &amp;quot;for real&amp;quot;, so these probably
        could be more concise&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqllahk/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512112774.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_7gsrc2", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 2}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqmxcks", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "sbguest", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_dqlim8m", "score": 2, "author_fullname": "t2_dnm1a",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "Absolutely, I already updated my skeleton code to trim() the
        data after reading the file. Fool me twice, shame on me.", "edited": false,
        "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "name":
        "t1_dqmxcks", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Absolutely,
        I already updated my skeleton code to trim() the data after reading the file.
        Fool me twice, shame on me.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_7gsrc2", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmxcks/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512175104.0,
        "author_flair_text": null, "treatment_tags": [], "created_utc": 1512175104.0,
        "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0, "depth":
        2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "dqlim8m", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "BumpitySnook", "can_mod_post": false,
        "created_utc": 1512107622.0, "send_replies": true, "parent_id": "t1_dqlhbtu",
        "score": 3, "author_fullname": "t2_kkoug", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "For these kind of puzzles
        it''s usually a good idea to just strip whitespace from the ends without thinking
        about it.", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqlim8m", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;For
        these kind of puzzles it&amp;#39;s usually a good idea to just strip whitespace
        from the ends without thinking about it.&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlim8m/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512107622.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 1, "name": "t1_dqm0uth",
        "id": "dqm0uth", "parent_id": "t1_dqlhom4", "depth": 2, "children": ["dqm0uth"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "dqlhom4", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "autid", "can_mod_post": false, "created_utc":
        1512106090.0, "send_replies": true, "parent_id": "t1_dqlhbtu", "score": 3,
        "author_fullname": "t2_g26j3", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "I, too, was caught out by
        the newline at the end. :(", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqlhom4", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I,
        too, was caught out by the newline at the end. :(&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhom4/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512106090.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}], "before": null}},
        "user_reports": [], "saved": false, "id": "dqlhbtu", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "sbguest", "can_mod_post": false, "created_utc":
        1512105539.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_dnm1a", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "88th on part 1 in nodejs, not realizing that
        the file came back with an extra space/newline at the end cost me a few places.\n\n    var
        fs = require(''fs'');\n\n    fs.readFile(__dirname + ''\\\\input.txt'', ''utf-8'',
        (err, data) =&gt; {\n        var total = 0;\n        data = data.trim();\n        for(var
        index = 0; index &lt; data.length; index++) {\n            if(data[index]
        === data[index + 1]) {\n                total += parseInt(data[index], 10);\n            }\n        }\n        if(data[0]
        === data[data.length - 1]) {\n            total += parseInt(data[0], 10);\n        }\n        console.log(total);\n    });",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqlhbtu", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;88th
        on part 1 in nodejs, not realizing that the file came back with an extra space/newline
        at the end cost me a few places.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var fs
        = require(&amp;#39;fs&amp;#39;);\n\nfs.readFile(__dirname + &amp;#39;\\\\input.txt&amp;#39;,
        &amp;#39;utf-8&amp;#39;, (err, data) =&amp;gt; {\n    var total = 0;\n    data
        = data.trim();\n    for(var index = 0; index &amp;lt; data.length; index++)
        {\n        if(data[index] === data[index + 1]) {\n            total += parseInt(data[index],
        10);\n        }\n    }\n    if(data[0] === data[data.length - 1]) {\n        total
        += parseInt(data[0], 10);\n    }\n    console.log(total);\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhbtu/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512105539.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlhzdu", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Philboyd_Studge", "can_mod_post": false,
        "created_utc": 1512106570.0, "send_replies": true, "parent_id": "t3_7gsrc2",
        "score": 1, "author_fullname": "t2_5xc8m", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Java\n\n    package
        Advent2017;\n    \n    import util.FileIO;\n    import util.Timer;\n    \n    /**\n     *
        @author /u/Philboyd_Studge\n     */\n    public class Day1 {\n    \n        private
        static int part1(String s) {\n            return solve(s, 1);\n        }\n    \n        private
        static int part2(String s) {\n            return solve(s, s.length() / 2);\n        }\n    \n        private
        static int solve(String s, int dist) {\n            int sum = 0;\n            for
        (int i = 0; i &lt; s.length(); i++) {\n                int next = (i + dist)
        % s.length();\n                if (s.charAt(i) == s.charAt(next)) {\n                    sum
        += val(s.charAt(i));\n                }\n            }\n            return
        sum;\n        }\n    \n        private static int val(char c) {\n            return
        c ^ 0x30;\n        }\n    \n        public static void main(String[] args)
        {\n    \n            Timer.startTimer();\n            int result = FileIO.performIntActionOnLine(\"advent2017_day1.txt\",
        Day1::part1);\n            System.out.println(\"Part 1: \" + result);\n            int
        result2 = FileIO.performIntActionOnLine(\"advent2017_day1.txt\", Day1::part2);\n            System.out.println(\"Part
        2: \" + result2);\n            System.out.println(Timer.endTimer());\n    \n        }\n    }\n    ",
        "edited": 1512108245.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqlhzdu", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Java&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package
        Advent2017;\n\nimport util.FileIO;\nimport util.Timer;\n\n/**\n * @author
        /u/Philboyd_Studge\n */\npublic class Day1 {\n\n    private static int part1(String
        s) {\n        return solve(s, 1);\n    }\n\n    private static int part2(String
        s) {\n        return solve(s, s.length() / 2);\n    }\n\n    private static
        int solve(String s, int dist) {\n        int sum = 0;\n        for (int i
        = 0; i &amp;lt; s.length(); i++) {\n            int next = (i + dist) % s.length();\n            if
        (s.charAt(i) == s.charAt(next)) {\n                sum += val(s.charAt(i));\n            }\n        }\n        return
        sum;\n    }\n\n    private static int val(char c) {\n        return c ^ 0x30;\n    }\n\n    public
        static void main(String[] args) {\n\n        Timer.startTimer();\n        int
        result = FileIO.performIntActionOnLine(&amp;quot;advent2017_day1.txt&amp;quot;,
        Day1::part1);\n        System.out.println(&amp;quot;Part 1: &amp;quot; + result);\n        int
        result2 = FileIO.performIntActionOnLine(&amp;quot;advent2017_day1.txt&amp;quot;,
        Day1::part2);\n        System.out.println(&amp;quot;Part 2: &amp;quot; + result2);\n        System.out.println(Timer.endTimer());\n\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhzdu/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512106570.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 1, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 1, "name": "t1_dqm8qxr",
        "id": "dqm8qxr", "parent_id": "t1_dqlrqho", "depth": 2, "children": ["dqm8qxr"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "dqlrqho", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "vyper248", "can_mod_post": false, "created_utc":
        1512129403.0, "send_replies": true, "parent_id": "t1_dqli8hj", "score": 3,
        "author_fullname": "t2_h4ufg", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "But with part 1, that''s not
        taking into account the check to see whether the last digit is equal to the
        first digit, since it loops around.", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqlrqho", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;But with part 1, that&amp;#39;s
        not taking into account the check to see whether the last digit is equal to
        the first digit, since it loops around.&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlrqho/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512129403.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "more",
        "data": {"count": 1, "name": "t1_dqlutt4", "id": "dqlutt4", "parent_id": "t1_dqli8hj",
        "depth": 1, "children": ["dqlutt4"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "dqli8hj", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": "DELETED", "no_follow":
        true, "author": "[deleted]", "can_mod_post": false, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "[deleted]",
        "edited": false, "downs": 0, "author_flair_css_class": null, "collapsed":
        true, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqli8hj/",
        "num_reports": null, "locked": false, "name": "t1_dqli8hj", "created": 1512106977.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512106977.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlik5e", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "disclosure5", "can_mod_post": false, "created_utc":
        1512107520.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_c57bu", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Ruby\n\n    def makecaptcha(input)\n      total
        = 0\n      half = input.length/2\n\n      half.times do |i|\n        if input[i]
        == input[i+half]\n          total = total + (input[i].to_i * 2)\n      end\n    end\n\n    puts
        \"Total was #{total}\"\n    end\n", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_dqlik5e", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Ruby&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        makecaptcha(input)\n  total = 0\n  half = input.length/2\n\n  half.times do
        |i|\n    if input[i] == input[i+half]\n      total = total + (input[i].to_i
        * 2)\n  end\nend\n\nputs &amp;quot;Total was #{total}&amp;quot;\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlik5e/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512107520.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 1, "name": "t1_dqn2rw6",
        "id": "dqn2rw6", "parent_id": "t1_dqlik61", "depth": 1, "children": ["dqn2rw6"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "dqlik61", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "williewillus", "can_mod_post": false,
        "created_utc": 1512107521.0, "send_replies": true, "parent_id": "t3_7gsrc2",
        "score": 1, "author_fullname": "t2_9rr54", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Rust (pretty ordinary,
        forgot about filter_map for a moment):\n\n    use util;\n    \n    pub fn
        run() {\n        let input: Vec&lt;_&gt; = util::read_all(\"d1_input.txt\").unwrap()\n            .chars()\n            .filter_map(|c|
        c.to_digit(10))\n            .collect();\n    \n        part_1(&amp;input);\n        part_2(&amp;input);\n    }\n    \n    fn
        part_1(input: &amp;[u32]) {\n        let mut sum = 0;\n        for i in 0..input.len()
        {\n            if input [i] == input [(i + 1) % input.len()] {\n                sum
        += input[i];\n            }\n        }\n    \n        println!(\"part 1: {}\",
        sum)\n    }\n    \n    fn part_2(input: &amp;[u32]) {\n        let mut sum
        = 0;\n        for i in 0..input.len() {\n            if input [i] == input
        [(i + input.len() / 2) % input.len()] {\n                sum += input[i];\n            }\n        }\n    \n        println!(\"part
        2: {}\", sum)\n    }\n\nDirty clojure:\n\n    (def s\n    \t(-&gt;&gt; (slurp
        \"d1_input.txt\")\n    \t\t (map #(Character/getNumericValue %))\n    \t\t
        (filter (partial not= -1))\n    \t\t (into [])))\n    \n    (let [len (count
        s)\t  \n    \t  opposite-idx-1 #(mod (inc %) len)\n    \t  m (map-indexed
        #(if (= %2 (s (opposite-idx-1 %1))) %2 0) s)\n    \t  opposite-idx-2 #(mod
        (+ % (/ len 2)) len)\n    \t  m2 (map-indexed #(if (= %2 (s (opposite-idx-2
        %1))) %2 0) s)]\n    \n    \t  (println (reduce + m))\n    \t  (println (reduce
        + m2)))", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqlik61", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Rust
        (pretty ordinary, forgot about filter_map for a moment):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use
        util;\n\npub fn run() {\n    let input: Vec&amp;lt;_&amp;gt; = util::read_all(&amp;quot;d1_input.txt&amp;quot;).unwrap()\n        .chars()\n        .filter_map(|c|
        c.to_digit(10))\n        .collect();\n\n    part_1(&amp;amp;input);\n    part_2(&amp;amp;input);\n}\n\nfn
        part_1(input: &amp;amp;[u32]) {\n    let mut sum = 0;\n    for i in 0..input.len()
        {\n        if input [i] == input [(i + 1) % input.len()] {\n            sum
        += input[i];\n        }\n    }\n\n    println!(&amp;quot;part 1: {}&amp;quot;,
        sum)\n}\n\nfn part_2(input: &amp;amp;[u32]) {\n    let mut sum = 0;\n    for
        i in 0..input.len() {\n        if input [i] == input [(i + input.len() / 2)
        % input.len()] {\n            sum += input[i];\n        }\n    }\n\n    println!(&amp;quot;part
        2: {}&amp;quot;, sum)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Dirty clojure:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(def
        s\n    (-&amp;gt;&amp;gt; (slurp &amp;quot;d1_input.txt&amp;quot;)\n         (map
        #(Character/getNumericValue %))\n         (filter (partial not= -1))\n         (into
        [])))\n\n(let [len (count s)   \n      opposite-idx-1 #(mod (inc %) len)\n      m
        (map-indexed #(if (= %2 (s (opposite-idx-1 %1))) %2 0) s)\n      opposite-idx-2
        #(mod (+ % (/ len 2)) len)\n      m2 (map-indexed #(if (= %2 (s (opposite-idx-2
        %1))) %2 0) s)]\n\n      (println (reduce + m))\n      (println (reduce +
        m2)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlik61/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512107521.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_7gsrc2", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqlikqw",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "autid",
        "can_mod_post": false, "created_utc": 1512107550.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_g26j3", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "    with
        open(''input.txt'',''r'') as infile:\n        puzinput = infile.readline()\n    total1=0\n    total2=0\n    puzinput=puzinput[:-1]\n    for
        number in range(len(puzinput)):\n        if puzinput[number]==puzinput[(number+1)%len(puzinput)]:\n            total1
        += int(puzinput[number])\n        if puzinput[number]==puzinput[(number+len(puzinput)/2)%len(puzinput)]:\n            total2
        += int(puzinput[number])\n    print total1\n    print total2\n\nShoulda just
        written the input into the code instead of sticking it in a text file. Got
        caught out by an extra character this way. \n\nPretty happy with 249th and
        189th though. ", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqlikqw", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;with
        open(&amp;#39;input.txt&amp;#39;,&amp;#39;r&amp;#39;) as infile:\n    puzinput
        = infile.readline()\ntotal1=0\ntotal2=0\npuzinput=puzinput[:-1]\nfor number
        in range(len(puzinput)):\n    if puzinput[number]==puzinput[(number+1)%len(puzinput)]:\n        total1
        += int(puzinput[number])\n    if puzinput[number]==puzinput[(number+len(puzinput)/2)%len(puzinput)]:\n        total2
        += int(puzinput[number])\nprint total1\nprint total2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Shoulda
        just written the input into the code instead of sticking it in a text file.
        Got caught out by an extra character this way. &lt;/p&gt;\n\n&lt;p&gt;Pretty
        happy with 249th and 189th though. &lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlikqw/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512107550.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqliqn1", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "kaveman909", "can_mod_post": false, "created_utc":
        1512107836.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_75tv1", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "    \"\"\" AoC Day One \"\"\"\n    \n    \n    def
        sum_input(x_in):\n        \"\"\" sums indexes based on the input \"\"\"\n        accum
        = 0\n        for i in range(0, len(INPUT)):\n            if INPUT[i] == INPUT[(i
        + int(x_in)) % int(len(INPUT))]:\n                accum += int(INPUT[i])\n        print(accum)\n    \n    with
        open(''one.txt'', ''r'') as f:\n        INPUT = f.readline()\n        sum_input(1)\n        sum_input(len(INPUT)
        / 2)", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqliqn1", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;
        AoC Day One &amp;quot;&amp;quot;&amp;quot;\n\n\ndef sum_input(x_in):\n    &amp;quot;&amp;quot;&amp;quot;
        sums indexes based on the input &amp;quot;&amp;quot;&amp;quot;\n    accum
        = 0\n    for i in range(0, len(INPUT)):\n        if INPUT[i] == INPUT[(i +
        int(x_in)) % int(len(INPUT))]:\n            accum += int(INPUT[i])\n    print(accum)\n\nwith
        open(&amp;#39;one.txt&amp;#39;, &amp;#39;r&amp;#39;) as f:\n    INPUT = f.readline()\n    sum_input(1)\n    sum_input(len(INPUT)
        / 2)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqliqn1/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512107836.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_7gsrc2", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqlkcg0",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "torotane",
        "can_mod_post": false, "created_utc": 1512110835.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_h23cc", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "As
        detours are fun...\n\n    from pulp import *\n    \n    digits = [int(d) for
        d in list(instance)]\n    indices = list(range(len(digits)))\n    is_same_as_next
        = LpVariable.dict(''X'', indices, cat=LpBinary)\n    \n    p = LpProblem(''Day01'',
        LpMaximize)\n    p += lpSum(digits[i] * var for i, var in is_same_as_next.items())\n    for
        i in indices:\n        p += is_same_as_next[i] * (digits[i] - digits[(i +
        1) % len(digits)]) == 0, ''''\n\n    p.solve(solver=PULP_CBC_CMD())\n    print(int(value(p.objective)))",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqlkcg0", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;As
        detours are fun...&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from pulp import *\n\ndigits
        = [int(d) for d in list(instance)]\nindices = list(range(len(digits)))\nis_same_as_next
        = LpVariable.dict(&amp;#39;X&amp;#39;, indices, cat=LpBinary)\n\np = LpProblem(&amp;#39;Day01&amp;#39;,
        LpMaximize)\np += lpSum(digits[i] * var for i, var in is_same_as_next.items())\nfor
        i in indices:\n    p += is_same_as_next[i] * (digits[i] - digits[(i + 1) %
        len(digits)]) == 0, &amp;#39;&amp;#39;\n\np.solve(solver=PULP_CBC_CMD())\nprint(int(value(p.objective)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlkcg0/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512110835.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlkd4p", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "XiiencE", "can_mod_post": false, "created_utc":
        1512110874.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_5d1il", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Typescript + Lodash:\n\n    import * as _
        from ''lodash'';\n\n    const solve = function(input: string, distance: number):
        number {\n        const inputArr = input.split('''').map(v =&gt; +v);\n        return
        _.sum(\n            _.zipWith(\n                inputArr, \n                rotate(inputArr,
        distance), \n                (a, b) =&gt; a === b ? a : 0 \n            )\n        );\n    }\n    \n    const
        rotate = &lt;T&gt;(input: T[], n: number): T[] =&gt; {\n        return _.concat(_.takeRight(input,
        input.length - n), _.take(input, input.length - n));\n    }", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqlkd4p",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Typescript + Lodash:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        * as _ from &amp;#39;lodash&amp;#39;;\n\nconst solve = function(input: string,
        distance: number): number {\n    const inputArr = input.split(&amp;#39;&amp;#39;).map(v
        =&amp;gt; +v);\n    return _.sum(\n        _.zipWith(\n            inputArr,
        \n            rotate(inputArr, distance), \n            (a, b) =&amp;gt; a
        === b ? a : 0 \n        )\n    );\n}\n\nconst rotate = &amp;lt;T&amp;gt;(input:
        T[], n: number): T[] =&amp;gt; {\n    return _.concat(_.takeRight(input, input.length
        - n), _.take(input, input.length - n));\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlkd4p/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512110874.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 1, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "more",
        "data": {"count": 4, "name": "t1_dqlr8zg", "id": "dqlr8zg", "parent_id": "t1_dqlks3l",
        "depth": 1, "children": ["dqlr8zg", "dqm2ctw"]}}], "before": null}}, "user_reports":
        [], "saved": false, "id": "dqlks3l", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": "DELETED", "no_follow":
        true, "author": "[deleted]", "can_mod_post": false, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "[deleted]",
        "edited": false, "downs": 0, "author_flair_css_class": null, "collapsed":
        true, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlks3l/",
        "num_reports": null, "locked": false, "name": "t1_dqlks3l", "created": 1512111716.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512111716.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 4, "name": "t1_dqmlrou",
        "id": "dqmlrou", "parent_id": "t1_dqlkt8t", "depth": 1, "children": ["dqmlrou",
        "dqlnt1m"]}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "dqlkt8t", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "kagcc",
        "can_mod_post": false, "created_utc": 1512111780.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_qsc4d", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "Rust.
        Still learning and not sure how rusty this is.\n\n    extern crate aoc2017;\n    use
        aoc2017::read_file; // src/lib.rs : &amp;str -&gt; String, copy from \"the
        book\" ch12-02\n    \n    fn main() {\n        let xs = read_file(\"src/bin/01/input01.txt\");\n        println!(\"answer
        for 1: {}\", solve(&amp;xs, 1));\n        println!(\"answer for 2: {}\", solve_2(&amp;xs));\n    }\n    \n    fn
        solve(input: &amp;str, offset: usize) -&gt; u32 {\n        let xs: Vec&lt;u32&gt;
        = input.trim().chars().map(|n| n.to_string().parse().unwrap()).collect();\n        let
        mut ans = 0;\n        for (i, j) in xs.iter().zip(xs.clone().iter().cycle().skip(offset))
        {\n            if i == j {\n                ans += i;\n            }\n        }\n        ans\n    }\n    \n    fn
        solve_2(input: &amp;str) -&gt; u32 {\n        solve(input, input.trim().chars().count()
        / 2)\n    }\n    \n", "edited": 1512112053.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqlkt8t", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Rust.
        Still learning and not sure how rusty this is.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;extern
        crate aoc2017;\nuse aoc2017::read_file; // src/lib.rs : &amp;amp;str -&amp;gt;
        String, copy from &amp;quot;the book&amp;quot; ch12-02\n\nfn main() {\n    let
        xs = read_file(&amp;quot;src/bin/01/input01.txt&amp;quot;);\n    println!(&amp;quot;answer
        for 1: {}&amp;quot;, solve(&amp;amp;xs, 1));\n    println!(&amp;quot;answer
        for 2: {}&amp;quot;, solve_2(&amp;amp;xs));\n}\n\nfn solve(input: &amp;amp;str,
        offset: usize) -&amp;gt; u32 {\n    let xs: Vec&amp;lt;u32&amp;gt; = input.trim().chars().map(|n|
        n.to_string().parse().unwrap()).collect();\n    let mut ans = 0;\n    for
        (i, j) in xs.iter().zip(xs.clone().iter().cycle().skip(offset)) {\n        if
        i == j {\n            ans += i;\n        }\n    }\n    ans\n}\n\nfn solve_2(input:
        &amp;amp;str) -&amp;gt; u32 {\n    solve(input, input.trim().chars().count()
        / 2)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlkt8t/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512111780.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 1, "name": "t1_drn6347",
        "id": "drn6347", "parent_id": "t1_drn223b", "depth": 4, "children": ["drn6347"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "drn223b", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "baegolas", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_drn1v63", "score": 2, "author_fullname": "t2_55ald",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Same, I''m a big fan of elixir. Didn''t realize
        there was a second part, but may as well update with my solution:\n\n      def
        sum_2(n) do\n        digits = Integer.digits(n)\n        size = Enum.count(digits)\n    \n        digits
        ++ Enum.take(digits, div(size, 2) + 1)\n        |&gt; Enum.chunk(div(size,
        2) + 1, 1)\n        |&gt; Enum.map(fn(l) -&gt; [hd(l), Enum.at(l, -1)] end)\n        |&gt;
        Enum.filter(fn([x, y]) -&gt; x == y end)\n        |&gt; Enum.map(&amp;hd/1)\n        |&gt;
        Enum.sum\n      end\n\nTurns out `Integer.digits/1` is a thing too :P", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_drn223b",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Same, I&amp;#39;m a
        big fan of elixir. Didn&amp;#39;t realize there was a second part, but may
        as well update with my solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;  def
        sum_2(n) do\n    digits = Integer.digits(n)\n    size = Enum.count(digits)\n\n    digits
        ++ Enum.take(digits, div(size, 2) + 1)\n    |&amp;gt; Enum.chunk(div(size,
        2) + 1, 1)\n    |&amp;gt; Enum.map(fn(l) -&amp;gt; [hd(l), Enum.at(l, -1)]
        end)\n    |&amp;gt; Enum.filter(fn([x, y]) -&amp;gt; x == y end)\n    |&amp;gt;
        Enum.map(&amp;amp;hd/1)\n    |&amp;gt; Enum.sum\n  end\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Turns
        out &lt;code&gt;Integer.digits/1&lt;/code&gt; is a thing too :P&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/drn223b/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1513986167.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1513986167.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "drn1v63", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "giodamelio", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_drn09a5", "score": 2, "author_fullname": "t2_63dck",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "That is really clean. I am still not in the habit of using function
        definitions with pattern matching. It''s so powerful though, I love it. ",
        "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_drn1v63", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That
        is really clean. I am still not in the habit of using function definitions
        with pattern matching. It&amp;#39;s so powerful though, I love it. &lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/drn1v63/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1513985906.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1513985906.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "drn09a5", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "baegolas", "can_mod_post": false, "created_utc":
        1513983724.0, "send_replies": true, "parent_id": "t1_dqll260", "score": 2,
        "author_fullname": "t2_55ald", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Late to the party by quite
        a bit, but here''s my elixir solution. I think it''s a bit clearer:\n\n    defmodule
        Day1 do\n      def sum(n) do\n        digits = [h|_] = num_to_list(n)\n    \n        digits\n        |&gt;
        Enum.chunk(2, 1, [h])\n        |&gt; Enum.filter(fn([a, b]) -&gt; a == b end)\n        |&gt;
        Enum.map(&amp;hd/1)\n        |&gt; Enum.sum\n      end\n    \n      def  num_to_list(n),
        do: num_to_list(n, [])\n      defp num_to_list(0, l), do: l\n      defp num_to_list(n,
        l) do\n        num_to_list(div(n, 10), [rem(n, 10)] ++ l)\n      end\n    end\n",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_drn09a5", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Late
        to the party by quite a bit, but here&amp;#39;s my elixir solution. I think
        it&amp;#39;s a bit clearer:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;defmodule
        Day1 do\n  def sum(n) do\n    digits = [h|_] = num_to_list(n)\n\n    digits\n    |&amp;gt;
        Enum.chunk(2, 1, [h])\n    |&amp;gt; Enum.filter(fn([a, b]) -&amp;gt; a ==
        b end)\n    |&amp;gt; Enum.map(&amp;amp;hd/1)\n    |&amp;gt; Enum.sum\n  end\n\n  def  num_to_list(n),
        do: num_to_list(n, [])\n  defp num_to_list(0, l), do: l\n  defp num_to_list(n,
        l) do\n    num_to_list(div(n, 10), [rem(n, 10)] ++ l)\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/drn09a5/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1513983724.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "dqll260", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "giodamelio", "can_mod_post": false, "created_utc":
        1512112287.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_63dck", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Here is mine in Elixir. With a bit more work
        I could probably combine into one function.\n    \n    defmodule AOC.Puzzles.N01
        do\n      def first_half(input) do\n        input\n    \n        # Take the
        first item in the list and add it to the end\n        |&gt; (fn(list) -&gt;\n          list
        ++ Enum.take(list, 1)\n        end).()\n    \n        # Split the list into
        overlapping chunks of two\n        |&gt; Enum.chunk_every(2, 1, :discard)\n    \n        #
        Filter out pairs that are not the same\n        |&gt; Enum.filter(fn([a, b])
        -&gt;\n          a == b\n        end)\n    \n        # Take the first item
        from each pair\n        |&gt; Enum.map(fn([a, _]) -&gt;\n          a\n        end)\n    \n        #
        Sum them\n        |&gt; Enum.sum\n      end\n    \n      def second_half(input)
        do\n        input\n    \n        # Double the list\n        |&gt; (fn(list)
        -&gt;\n          list ++ list\n        end).()\n    \n        # Split the
        list into overlapping subarrays of the length\n        # of the list floor
        divided by 2 and add 1\n        # The last item in the each resulting list
        will be the\n        # number that is \"halfway around\"\n        |&gt; Enum.chunk_every(trunc(length(input)
        / 2) + 1, 1)\n    \n        # We now have twice as many sub lists as we want
        and the last half\n        # are junk anyway, so just grab  the ones we want\n        |&gt;
        Enum.take(length(input))\n    \n        # Filter out pairs that are not the
        same\n        |&gt; Enum.filter(fn(item) -&gt;\n          # Compare first
        and last indexs of list\n          hd(item) == Enum.at(item, -1)\n        end)\n    \n        #
        Take the first item from each pair\n        |&gt; Enum.map(&amp;hd/1)\n    \n        #
        Sum them\n        |&gt; Enum.sum\n      end\n    end", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqll260", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here is mine in Elixir. With
        a bit more work I could probably combine into one function.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;defmodule
        AOC.Puzzles.N01 do\n  def first_half(input) do\n    input\n\n    # Take the
        first item in the list and add it to the end\n    |&amp;gt; (fn(list) -&amp;gt;\n      list
        ++ Enum.take(list, 1)\n    end).()\n\n    # Split the list into overlapping
        chunks of two\n    |&amp;gt; Enum.chunk_every(2, 1, :discard)\n\n    # Filter
        out pairs that are not the same\n    |&amp;gt; Enum.filter(fn([a, b]) -&amp;gt;\n      a
        == b\n    end)\n\n    # Take the first item from each pair\n    |&amp;gt;
        Enum.map(fn([a, _]) -&amp;gt;\n      a\n    end)\n\n    # Sum them\n    |&amp;gt;
        Enum.sum\n  end\n\n  def second_half(input) do\n    input\n\n    # Double
        the list\n    |&amp;gt; (fn(list) -&amp;gt;\n      list ++ list\n    end).()\n\n    #
        Split the list into overlapping subarrays of the length\n    # of the list
        floor divided by 2 and add 1\n    # The last item in the each resulting list
        will be the\n    # number that is &amp;quot;halfway around&amp;quot;\n    |&amp;gt;
        Enum.chunk_every(trunc(length(input) / 2) + 1, 1)\n\n    # We now have twice
        as many sub lists as we want and the last half\n    # are junk anyway, so
        just grab  the ones we want\n    |&amp;gt; Enum.take(length(input))\n\n    #
        Filter out pairs that are not the same\n    |&amp;gt; Enum.filter(fn(item)
        -&amp;gt;\n      # Compare first and last indexs of list\n      hd(item) ==
        Enum.at(item, -1)\n    end)\n\n    # Take the first item from each pair\n    |&amp;gt;
        Enum.map(&amp;amp;hd/1)\n\n    # Sum them\n    |&amp;gt; Enum.sum\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqll260/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512112287.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqllmy6", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "th3_pund1t", "can_mod_post": false, "created_utc":
        1512113522.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_711a0", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Here''s Groovy\n\n    class Day1Support {\n    \n        private
        static int baseFun(String input, int p) {\n            def newStr = input[p..-1]
        + input[0..(p - 1)]\n    \n            def l1 = input.toCharArray().toList()\n            def
        l2 = newStr.toCharArray().toList()\n    \n            [l1, l2].\n                    transpose().\n                    inject(0)
        { int val, List&lt;String&gt; pair -&gt;\n                        val + (pair[0]
        == pair[1] ? pair[0].toString().toInteger() : 0)\n                    }\n        }\n    \n        static
        int problem1(String input) {\n            baseFun(input, input.length() -
        1)\n        }\n    \n        static int problem2(String input) {\n            baseFun(input,
        input.length() / 2 as int)\n        }\n    }\n    \n    new Day1Support().with
        {\n        assert problem1(''1122'') == 3\n        assert problem1(''1111'')
        == 4\n        assert problem1(''1234'') == 0\n        assert problem1(''91212129'')
        == 9\n    \n        println problem1(new File(''day1.txt'').text)\n    \n        assert
        problem2(''1212'') == 6\n        assert problem2(''1221'') == 0\n        assert
        problem2(''123425'') == 4\n        assert problem2(''123123'') == 12\n        assert
        problem2(''12131415'') == 4\n    \n        println problem2(new File(''day1.txt'').text)\n    }\n    ",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqllmy6", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s
        Groovy&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class Day1Support {\n\n    private
        static int baseFun(String input, int p) {\n        def newStr = input[p..-1]
        + input[0..(p - 1)]\n\n        def l1 = input.toCharArray().toList()\n        def
        l2 = newStr.toCharArray().toList()\n\n        [l1, l2].\n                transpose().\n                inject(0)
        { int val, List&amp;lt;String&amp;gt; pair -&amp;gt;\n                    val
        + (pair[0] == pair[1] ? pair[0].toString().toInteger() : 0)\n                }\n    }\n\n    static
        int problem1(String input) {\n        baseFun(input, input.length() - 1)\n    }\n\n    static
        int problem2(String input) {\n        baseFun(input, input.length() / 2 as
        int)\n    }\n}\n\nnew Day1Support().with {\n    assert problem1(&amp;#39;1122&amp;#39;)
        == 3\n    assert problem1(&amp;#39;1111&amp;#39;) == 4\n    assert problem1(&amp;#39;1234&amp;#39;)
        == 0\n    assert problem1(&amp;#39;91212129&amp;#39;) == 9\n\n    println
        problem1(new File(&amp;#39;day1.txt&amp;#39;).text)\n\n    assert problem2(&amp;#39;1212&amp;#39;)
        == 6\n    assert problem2(&amp;#39;1221&amp;#39;) == 0\n    assert problem2(&amp;#39;123425&amp;#39;)
        == 4\n    assert problem2(&amp;#39;123123&amp;#39;) == 12\n    assert problem2(&amp;#39;12131415&amp;#39;)
        == 4\n\n    println problem2(new File(&amp;#39;day1.txt&amp;#39;).text)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqllmy6/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512113522.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 1, "name": "t1_dqluzdd",
        "id": "dqluzdd", "parent_id": "t1_dqlmsuy", "depth": 1, "children": ["dqluzdd"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "dqlmsuy", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "doekaschi", "can_mod_post": false, "created_utc":
        1512116223.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_jkthp", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Python 3:\n\n    s = list(open(\"aoc2017_1_in.txt\").read())\n    print(sum([(int(n)
        if n == s[int(i+1) % len(s)] else 0) for i,n in enumerate(s)])) #task 1\n    print(sum([(int(n)
        if n == s[(int(i+len(s)/2)) % len(s)] else 0) for i,n in enumerate(s)])) #task
        2\n", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqlmsuy", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python
        3:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;s = list(open(&amp;quot;aoc2017_1_in.txt&amp;quot;).read())\nprint(sum([(int(n)
        if n == s[int(i+1) % len(s)] else 0) for i,n in enumerate(s)])) #task 1\nprint(sum([(int(n)
        if n == s[(int(i+len(s)/2)) % len(s)] else 0) for i,n in enumerate(s)])) #task
        2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlmsuy/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512116223.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_7gsrc2", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}, {"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 1, "removal_reason": null, "link_id": "t3_7gsrc2",
        "author_flair_template_id": null, "likes": null, "replies": {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqm3n62",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "SaltyPeaches",
        "can_mod_post": false, "created_utc": 1512145034.0, "send_replies": true,
        "parent_id": "t1_dqlmt1u", "score": 3, "author_fullname": "t2_8qs7h", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Glad to see I''m not the only one attempting this year''s in PowerShell.
        \\^_^", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqm3n62", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Glad
        to see I&amp;#39;m not the only one attempting this year&amp;#39;s in PowerShell.
        ^_^&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "link_id": "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm3n62/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512145034.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 2, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqmyckb", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_dqlmt1u", "score":
        2, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "even uglier powershell cause im constraining myself to
        pipeline only (after variable inits):\n\nhttps://www.reddit.com/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmya3n/",
        "edited": false, "author_flair_css_class": null, "collapsed": false, "downs":
        0, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;even
        uglier powershell cause im constraining myself to pipeline only (after variable
        inits):&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmya3n/\"&gt;https://www.reddit.com/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmya3n/&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmyckb/",
        "num_reports": null, "locked": false, "name": "t1_dqmyckb", "created": 1512176379.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512176379.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "dqlmt1u", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        "DELETED", "no_follow": true, "author": "[deleted]", "can_mod_post": false,
        "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1, "approved_by":
        null, "report_reasons": null, "all_awardings": [], "subreddit_id": "t5_3b3wa",
        "body": "[deleted]", "edited": false, "downs": 0, "author_flair_css_class":
        null, "collapsed": true, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlmt1u/",
        "num_reports": null, "locked": false, "name": "t1_dqlmt1u", "created": 1512116237.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512116237.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlnkkv", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "NeilNjae", "can_mod_post": false, "created_utc":
        1512118162.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_6836y", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Some [very verbose Haskell](https://github.com/NeilNjae/advent-of-code-17/blob/master/adventofcode1701/app/advent01.hs).
        Still rusty from not really having used it since this time last year. Given
        the first part, I reached for `tails` first, though a solution using `zip`
        would be better, especially after seeing the second part.\n\n    module Main(main)
        where\n\n    import Data.List (tails)\n\n    main :: IO ()\n    main = do
        \n            digits &lt;- readFile \"data/advent01.txt\"\n            print
        $ part1 digits\n            print $ part2 digits\n\n    part1 :: String -&gt;
        Integer  \n    part1 = sum_valid_pairs . part1_extract\n\n    part2 :: String
        -&gt; Integer  \n    part2 = sum_valid_pairs . part2_extract\n\n    part1_extract
        :: String -&gt; [String]  \n    part1_extract digits =  map (take 2) $ tails
        (digits ++ [head digits])\n\n    part2_extract :: String -&gt; [String]\n    part2_extract
        digits = map (\\ds -&gt; (take 1 ds) ++ (take 1 $ drop offset ds)) \n            $
        take (length digits) \n            $ tails (digits ++ digits)\n        where
        offset = length digits `div` 2\n\n    sum_valid_pairs :: [String] -&gt; Integer\n    sum_valid_pairs
        possibles = sum $ map (read . take 1) \n                       $ filter (\\(x:y:_)
        -&gt; x == y) \n                       $ filter (\\p -&gt; length p == 2)
        possibles\n", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqlnkkv", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Some
        &lt;a href=\"https://github.com/NeilNjae/advent-of-code-17/blob/master/adventofcode1701/app/advent01.hs\"&gt;very
        verbose Haskell&lt;/a&gt;. Still rusty from not really having used it since
        this time last year. Given the first part, I reached for &lt;code&gt;tails&lt;/code&gt;
        first, though a solution using &lt;code&gt;zip&lt;/code&gt; would be better,
        especially after seeing the second part.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;module
        Main(main) where\n\nimport Data.List (tails)\n\nmain :: IO ()\nmain = do \n        digits
        &amp;lt;- readFile &amp;quot;data/advent01.txt&amp;quot;\n        print $
        part1 digits\n        print $ part2 digits\n\npart1 :: String -&amp;gt; Integer  \npart1
        = sum_valid_pairs . part1_extract\n\npart2 :: String -&amp;gt; Integer  \npart2
        = sum_valid_pairs . part2_extract\n\npart1_extract :: String -&amp;gt; [String]  \npart1_extract
        digits =  map (take 2) $ tails (digits ++ [head digits])\n\npart2_extract
        :: String -&amp;gt; [String]\npart2_extract digits = map (\\ds -&amp;gt; (take
        1 ds) ++ (take 1 $ drop offset ds)) \n        $ take (length digits) \n        $
        tails (digits ++ digits)\n    where offset = length digits `div` 2\n\nsum_valid_pairs
        :: [String] -&amp;gt; Integer\nsum_valid_pairs possibles = sum $ map (read
        . take 1) \n                   $ filter (\\(x:y:_) -&amp;gt; x == y) \n                   $
        filter (\\p -&amp;gt; length p == 2) possibles\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlnkkv/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512118162.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 1, "name": "t1_dqma0d0",
        "id": "dqma0d0", "parent_id": "t1_dqlo8am", "depth": 1, "children": ["dqma0d0"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "dqlo8am", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Smylers", "can_mod_post": false, "created_utc":
        1512119914.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_13cudg", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Using a regexp to find the matching digits
        for part 2, after copying the first half the string to the end of it. In Perl,
        but the approach should work in the same way anywhere that has regexes:\n\n    my
        $offset = (length $input) / 2; # or 1 for part 1\n    $input .= substr $input,
        0, $offset;\n    my $total = 0;\n    my $skip = $offset - 1;\n    $total +=
        $1 while $input =~ /(.)(?=.{$skip}\\1)/g;\n    say $total;", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqlo8am",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Using a regexp to find
        the matching digits for part 2, after copying the first half the string to
        the end of it. In Perl, but the approach should work in the same way anywhere
        that has regexes:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;my $offset = (length
        $input) / 2; # or 1 for part 1\n$input .= substr $input, 0, $offset;\nmy $total
        = 0;\nmy $skip = $offset - 1;\n$total += $1 while $input =~ /(.)(?=.{$skip}\\1)/g;\nsay
        $total;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlo8am/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512119914.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlop53", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "gerikson", "can_mod_post": false, "created_utc":
        1512121206.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_3gib3", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "[A solution in Perl 5](https://github.com/gustafe/aoc2017/blob/master/d01.pl)",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqlop53", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a
        href=\"https://github.com/gustafe/aoc2017/blob/master/d01.pl\"&gt;A solution
        in Perl 5&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlop53/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512121206.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_7gsrc2", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqlozl9",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Hikaru755",
        "can_mod_post": false, "created_utc": 1512122011.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_qz5ws", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "Trying
        out some new stuff in Kotlin 1.2:\n\n    // Part 1\n    fun captchaSumNextChar(input:
        String) =\n        (input + input.first())\n            .windowedSequence(2)\n            .filter
        { it[0] == it[1] }\n            .sumBy { it[0].toString().toInt() }\n\n    //
        Part 2\n    fun captchaSumOppositeChar(input: String) =\n        input\n            .mapIndexed
        { index, char -&gt; char to input[input.oppositeIndex(index)] }\n            .filter
        { (current, next) -&gt; current == next }\n            .sumBy { (current,
        _) -&gt; current.toString().toInt() }\n\n    fun String.oppositeIndex(i: Int)
        = (i + this.length / 2) % this.length\n\nI really don''t like that `.toString().toInt()`
        for reading the integer from the character, but `current - ''0''`felt hacky,
        too.\n\nAlternative solution using String shifting:\n\n    println(captchaSum(input,
        1))\n    println(captchaSum(input, input.length / 2))\n\n    fun captchaSum(input:
        String, shift: Int) =\n        input.zip(input shift shift)\n            .filter
        { it.first == it.second }\n            .sumBy { it.first.toString().toInt()
        }\n\n    infix fun String.shift(n: Int) = when {\n        // Shift right\n        n
        &gt; 0 -&gt; this.takeLast(n) + this.dropLast(n)\n        // Shift left\n        n
        &lt; 0 -&gt; this.drop(-n) + this.take(-n)\n        // No shift\n        else
        -&gt; this\n    }\n\nTechnically I could have just used the first when-branch,
        but why not make it safe for future use :)", "edited": 1512132032.0, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqlozl9", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Trying out some new stuff in
        Kotlin 1.2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// Part 1\nfun captchaSumNextChar(input:
        String) =\n    (input + input.first())\n        .windowedSequence(2)\n        .filter
        { it[0] == it[1] }\n        .sumBy { it[0].toString().toInt() }\n\n// Part
        2\nfun captchaSumOppositeChar(input: String) =\n    input\n        .mapIndexed
        { index, char -&amp;gt; char to input[input.oppositeIndex(index)] }\n        .filter
        { (current, next) -&amp;gt; current == next }\n        .sumBy { (current,
        _) -&amp;gt; current.toString().toInt() }\n\nfun String.oppositeIndex(i: Int)
        = (i + this.length / 2) % this.length\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I
        really don&amp;#39;t like that &lt;code&gt;.toString().toInt()&lt;/code&gt;
        for reading the integer from the character, but &lt;code&gt;current - &amp;#39;0&amp;#39;&lt;/code&gt;felt
        hacky, too.&lt;/p&gt;\n\n&lt;p&gt;Alternative solution using String shifting:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;println(captchaSum(input,
        1))\nprintln(captchaSum(input, input.length / 2))\n\nfun captchaSum(input:
        String, shift: Int) =\n    input.zip(input shift shift)\n        .filter {
        it.first == it.second }\n        .sumBy { it.first.toString().toInt() }\n\ninfix
        fun String.shift(n: Int) = when {\n    // Shift right\n    n &amp;gt; 0 -&amp;gt;
        this.takeLast(n) + this.dropLast(n)\n    // Shift left\n    n &amp;lt; 0 -&amp;gt;
        this.drop(-n) + this.take(-n)\n    // No shift\n    else -&amp;gt; this\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Technically
        I could have just used the first when-branch, but why not make it safe for
        future use :)&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlozl9/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1512122011.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_7gsrc2", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqlq41r",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "PanPirat",
        "can_mod_post": false, "created_utc": 1512125179.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_cvph4", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "Scala
        using recursion:\n\n    def partOne(input: String): Int = {\n      def matchingDigits(list:
        List[Int]): Int = list match {\n          case a :: b :: tail if a == b =&gt;
        a +  matchingDigits(b :: tail)\n          case _ :: tail =&gt; matchingDigits(tail)\n          case
        _ =&gt; 0\n        }\n  \n      val list = input.map(_.asDigit).toList\n      matchingDigits(list
        ::: (list.head :: Nil))\n    }\n  \n    def partTwo(input: String): Int =
        {\n      def sumMatchingPairs(l1: List[Int], l2: List[Int]): Int = (l1, l2)
        match {\n        case (a :: aTail, b :: bTail) =&gt;\n          { if (a ==
        b) a + b else 0 } + sumMatchingPairs(aTail, bTail)\n        case _ =&gt; 0\n      }\n  \n      val
        list = input.map(_.asDigit).toList\n      val half = list.size / 2\n      val
        (first, second) = list.zipWithIndex.partition(t =&gt; t._2 &lt; half)\n  \n      sumMatchingPairs(first.map(_._1),
        second.map(_._1))\n    }\n  ", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_dqlq41r", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Scala using recursion:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        partOne(input: String): Int = {\n  def matchingDigits(list: List[Int]): Int
        = list match {\n      case a :: b :: tail if a == b =&amp;gt; a +  matchingDigits(b
        :: tail)\n      case _ :: tail =&amp;gt; matchingDigits(tail)\n      case
        _ =&amp;gt; 0\n    }\n\n  val list = input.map(_.asDigit).toList\n  matchingDigits(list
        ::: (list.head :: Nil))\n}\n\ndef partTwo(input: String): Int = {\n  def sumMatchingPairs(l1:
        List[Int], l2: List[Int]): Int = (l1, l2) match {\n    case (a :: aTail, b
        :: bTail) =&amp;gt;\n      { if (a == b) a + b else 0 } + sumMatchingPairs(aTail,
        bTail)\n    case _ =&amp;gt; 0\n  }\n\n  val list = input.map(_.asDigit).toList\n  val
        half = list.size / 2\n  val (first, second) = list.zipWithIndex.partition(t
        =&amp;gt; t._2 &amp;lt; half)\n\n  sumMatchingPairs(first.map(_._1), second.map(_._1))\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlq41r/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512125179.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlqa2d", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Dutch_Gh0st", "can_mod_post": false, "created_utc":
        1512125640.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_rwwpkp", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Also in Rust (PUZZLE.txt contains the input):\n\n    const
        PUZZLE: &amp;''static str = include_str!(\"PUZZLE.txt\");\n\n    fn main()
        {\n        println!(\"day 1.1: {}\", summenize(PUZZLE, 1));\n        println!(\"day
        1.2: {}\", summenize(PUZZLE, PUZZLE.len() / 2));\n    }\n\n    /// take an
        &amp;str, loop over the chars,\n    /// and zip with an infinite version of
        itself that skips for `skip`.\n    fn summenize(input: &amp;str, skip: usize)
        -&gt; u32 {\n        input\n            .chars()\n            .zip(input.chars().cycle().skip(skip))\n            .filter_map(|(first,
        second)| if first == second { first.to_digit(10) } else { None })\n            .sum()\n    }\n",
        "edited": 1512150500.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqlqa2d", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Also
        in Rust (PUZZLE.txt contains the input):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const
        PUZZLE: &amp;amp;&amp;#39;static str = include_str!(&amp;quot;PUZZLE.txt&amp;quot;);\n\nfn
        main() {\n    println!(&amp;quot;day 1.1: {}&amp;quot;, summenize(PUZZLE,
        1));\n    println!(&amp;quot;day 1.2: {}&amp;quot;, summenize(PUZZLE, PUZZLE.len()
        / 2));\n}\n\n/// take an &amp;amp;str, loop over the chars,\n/// and zip with
        an infinite version of itself that skips for `skip`.\nfn summenize(input:
        &amp;amp;str, skip: usize) -&amp;gt; u32 {\n    input\n        .chars()\n        .zip(input.chars().cycle().skip(skip))\n        .filter_map(|(first,
        second)| if first == second { first.to_digit(10) } else { None })\n        .sum()\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlqa2d/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512125640.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlqyqf", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "theSprt", "can_mod_post": false, "created_utc":
        1512127500.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_3qiak", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Haskell beginner, part 1:\n\n    import           Data.Char\n    import           Data.List\n\n\n    main
        :: IO ()\n    main = do\n      fileContents &lt;- readFile \"input\"\n      let
        input = dropWhileEnd isSpace $ dropWhile isSpace fileContents\n\n      print
        (sumFirstLast input + sumAdjacent input)\n\n    sumFirstLast :: String -&gt;
        Int\n    sumFirstLast [] = 0\n    sumFirstLast xs =\n      if   head xs ==
        last xs\n      then digitToInt $ head xs\n      else 0\n\n    sumAdjacent
        :: String -&gt; Int\n    sumAdjacent []  = 0\n    sumAdjacent [_] = 0\n    sumAdjacent
        (x:xs)\n      | x == head xs = digitToInt x + sumAdjacent xs\n      | otherwise    =
        sumAdjacent xs\n\nEdit, and part 2:\n\n    import           Data.Char\n    import           Data.List\n\n\n    main
        :: IO ()\n    main = do\n      fileContents &lt;- readFile \"input\"\n      let
        input = dropWhileEnd isSpace $ dropWhile isSpace fileContents\n\n      print
        (sumAdjacent input)\n\n\n    halfwayAroundNext :: Int -&gt; String -&gt; Char\n    halfwayAroundNext
        x ys = cycle ys !! (x + 1 + div (length ys) 2)\n\n    sumAdjacent :: String
        -&gt; Int\n    sumAdjacent xs =\n      foldr\n        (\\a b -&gt;\n           if   snd
        a == halfwayAroundNext (fst a) xs\n           then b + digitToInt (snd a)\n           else
        b)\n        0\n        (zip [0..] xs)\n", "edited": 1512144411.0, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqlqyqf", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Haskell beginner, part 1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import           Data.Char\nimport           Data.List\n\n\nmain
        :: IO ()\nmain = do\n  fileContents &amp;lt;- readFile &amp;quot;input&amp;quot;\n  let
        input = dropWhileEnd isSpace $ dropWhile isSpace fileContents\n\n  print (sumFirstLast
        input + sumAdjacent input)\n\nsumFirstLast :: String -&amp;gt; Int\nsumFirstLast
        [] = 0\nsumFirstLast xs =\n  if   head xs == last xs\n  then digitToInt $
        head xs\n  else 0\n\nsumAdjacent :: String -&amp;gt; Int\nsumAdjacent []  =
        0\nsumAdjacent [_] = 0\nsumAdjacent (x:xs)\n  | x == head xs = digitToInt
        x + sumAdjacent xs\n  | otherwise    = sumAdjacent xs\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Edit,
        and part 2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import           Data.Char\nimport           Data.List\n\n\nmain
        :: IO ()\nmain = do\n  fileContents &amp;lt;- readFile &amp;quot;input&amp;quot;\n  let
        input = dropWhileEnd isSpace $ dropWhile isSpace fileContents\n\n  print (sumAdjacent
        input)\n\n\nhalfwayAroundNext :: Int -&amp;gt; String -&amp;gt; Char\nhalfwayAroundNext
        x ys = cycle ys !! (x + 1 + div (length ys) 2)\n\nsumAdjacent :: String -&amp;gt;
        Int\nsumAdjacent xs =\n  foldr\n    (\\a b -&amp;gt;\n       if   snd a ==
        halfwayAroundNext (fst a) xs\n       then b + digitToInt (snd a)\n       else
        b)\n    0\n    (zip [0..] xs)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlqyqf/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512127500.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlrclb", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "JakDrako", "can_mod_post": false, "created_utc":
        1512128487.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_477xl", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "VB.Net in LinqPad\n\nNothing fancy. \"stp
        = 1\" to do 1st part.\n\n    Sub Main\n    \n        Dim input = GetDay(1)\n    \n        Dim
        len = input.Length, stp = len \\ 2, sum = 0\n\n        For i = 0 To len -
        1\n            Dim chk = (i + stp) Mod len\n            If input(i) = input(chk)
        Then sum += Val(input(i))\n        Next\n    \n        sum.Dump\n        \n    End
        Sub\n\nEdit: a bit fancier with Linq...\n\n    Sub Main\n        Dim input
        = GetDay(1)\n        input.Select(Function(x, i) If(x = input((i + (input.Length
        \\ 2)) Mod input.Length), Val(x), 0)).Sum.Dump\n    End Sub", "edited": 1512129118.0,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqlrclb",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;VB.Net in LinqPad&lt;/p&gt;\n\n&lt;p&gt;Nothing
        fancy. &amp;quot;stp = 1&amp;quot; to do 1st part.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Sub
        Main\n\n    Dim input = GetDay(1)\n\n    Dim len = input.Length, stp = len
        \\ 2, sum = 0\n\n    For i = 0 To len - 1\n        Dim chk = (i + stp) Mod
        len\n        If input(i) = input(chk) Then sum += Val(input(i))\n    Next\n\n    sum.Dump\n\nEnd
        Sub\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Edit: a bit fancier with Linq...&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Sub
        Main\n    Dim input = GetDay(1)\n    input.Select(Function(x, i) If(x = input((i
        + (input.Length \\ 2)) Mod input.Length), Val(x), 0)).Sum.Dump\nEnd Sub\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlrclb/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512128487.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 1, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqlrlw3", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_7gsrc2", "score":
        1, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Here are my **elixir** solutions for this day, for the
        first one I was being very clunky, while when I got to the second one I had
        to think a bit more, and arrived at a much more clever solution.\n\nDay 1
        part 1:\n\n    defmodule Captcha do\n    \n      def _doubles([h|t],acc) do\n        if
        h == List.first(t) do\n          _doubles(t,[h|acc])\n        else\n          _doubles(t,acc)\n        end\n      end\n      def
        _doubles([],acc) do\n        acc\n      end\n    \n      def get_doubles(str)
        do\n        _doubles(String.codepoints(str),[])\n        |&gt; Enum.reverse\n      end\n    \n      def
        first_last(str) do\n        if String.first(str) == String.last(str) do\n          String.first(str)\n          |&gt;
        String.to_integer\n        else\n          0\n        end\n      end\n    \n      def
        solve(str) do\n        doubles = get_doubles(str)\n        |&gt; Enum.map(&amp;String.to_integer/1)\n        |&gt;
        Enum.sum\n    \n        doubles + first_last(str)\n      end\n    end\n    \n    \n    list
        = File.read!(\"input1\") |&gt; String.rstrip\n    IO.puts(Captcha.solve(list))\n\nI
        was first messing around with regexes, and wasn''t getting my unittests to
        pass, so I then ended up doing it with recursion, which works but is so much
        less nice than what I ended up doing in:\n\nDay 1 part 2:\n\n\n    defmodule
        Captcha do\n    \n      def halfway(enu) do\n        half = div(Enum.count(enu),
        2)\n        {first, second} = Enum.split(enu,half)\n        second ++ first\n      end\n    \n      def
        solve(str) do\n        list = String.codepoints(str)\n        \n        Enum.zip(list,
        halfway(list))\n        |&gt; Enum.filter(fn({fst,snd}) -&gt; fst == snd end)\n        |&gt;
        Enum.map(fn({fst,_}) -&gt; String.to_integer(fst) end)\n        |&gt; Enum.sum\n      end\n    \n    end\n    \n    \n    list
        = File.read!(\"input1\") |&gt; String.rstrip\n    IO.puts(Captcha.solve(list))\n    \nI
        think I was working a bit more with the language and not against it there
        :)", "edited": false, "downs": 0, "author_flair_css_class": null, "collapsed":
        false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here
        are my &lt;strong&gt;elixir&lt;/strong&gt; solutions for this day, for the
        first one I was being very clunky, while when I got to the second one I had
        to think a bit more, and arrived at a much more clever solution.&lt;/p&gt;\n\n&lt;p&gt;Day
        1 part 1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;defmodule Captcha do\n\n  def
        _doubles([h|t],acc) do\n    if h == List.first(t) do\n      _doubles(t,[h|acc])\n    else\n      _doubles(t,acc)\n    end\n  end\n  def
        _doubles([],acc) do\n    acc\n  end\n\n  def get_doubles(str) do\n    _doubles(String.codepoints(str),[])\n    |&amp;gt;
        Enum.reverse\n  end\n\n  def first_last(str) do\n    if String.first(str)
        == String.last(str) do\n      String.first(str)\n      |&amp;gt; String.to_integer\n    else\n      0\n    end\n  end\n\n  def
        solve(str) do\n    doubles = get_doubles(str)\n    |&amp;gt; Enum.map(&amp;amp;String.to_integer/1)\n    |&amp;gt;
        Enum.sum\n\n    doubles + first_last(str)\n  end\nend\n\n\nlist = File.read!(&amp;quot;input1&amp;quot;)
        |&amp;gt; String.rstrip\nIO.puts(Captcha.solve(list))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I
        was first messing around with regexes, and wasn&amp;#39;t getting my unittests
        to pass, so I then ended up doing it with recursion, which works but is so
        much less nice than what I ended up doing in:&lt;/p&gt;\n\n&lt;p&gt;Day 1
        part 2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;defmodule Captcha do\n\n  def
        halfway(enu) do\n    half = div(Enum.count(enu), 2)\n    {first, second} =
        Enum.split(enu,half)\n    second ++ first\n  end\n\n  def solve(str) do\n    list
        = String.codepoints(str)\n\n    Enum.zip(list, halfway(list))\n    |&amp;gt;
        Enum.filter(fn({fst,snd}) -&amp;gt; fst == snd end)\n    |&amp;gt; Enum.map(fn({fst,_})
        -&amp;gt; String.to_integer(fst) end)\n    |&amp;gt; Enum.sum\n  end\n\nend\n\n\nlist
        = File.read!(&amp;quot;input1&amp;quot;) |&amp;gt; String.rstrip\nIO.puts(Captcha.solve(list))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I
        think I was working a bit more with the language and not against it there
        :)&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "associated_award":
        null, "stickied": false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlrlw3/",
        "num_reports": null, "locked": false, "name": "t1_dqlrlw3", "created": 1512129105.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512129105.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlrtik", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "binajohny", "can_mod_post": false, "created_utc":
        1512129598.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_12jl19", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "My Kotlin solution:\n\n    fun part1(input:
        String): Int {\n        return (input + input.first())\n                .zipWithNext()\n                .filter
        { it.first == it.second }\n                .sumBy { it.first.toString().toInt()
        }\n    }\n    \n    fun part2(input: String): Int {\n        return input\n                .zip(input.substring(input.length
        / 2) + input)\n                .filter { it.first == it.second }\n                .sumBy
        { it.first.toString().toInt() }\n    }", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqlrtik", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My Kotlin solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fun
        part1(input: String): Int {\n    return (input + input.first())\n            .zipWithNext()\n            .filter
        { it.first == it.second }\n            .sumBy { it.first.toString().toInt()
        }\n}\n\nfun part2(input: String): Int {\n    return input\n            .zip(input.substring(input.length
        / 2) + input)\n            .filter { it.first == it.second }\n            .sumBy
        { it.first.toString().toInt() }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlrtik/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512129598.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "more", "data": {"count": 1, "name": "t1_dqlts0t",
        "id": "dqlts0t", "parent_id": "t1_dqlt0it", "depth": 1, "children": ["dqlts0t"]}}],
        "before": null}}, "user_reports": [], "saved": false, "id": "dqlt0it", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "AlistairJF", "can_mod_post": false, "created_utc":
        1512132061.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_3x5avj", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Trying to learn Python, but also get out
        of the habit of for-loops. Any advice on how to get rid if the one in findMatchedDigits()::\n\n    def
        getOffsetCh(line, start, offset):\n    \tidx = int((start+offset) % len(line))\n    \treturn
        line[idx]\n    \n    def findMatchedDigits(line, offset):\n    \tduplicates
        = [0];\n    \tfor idx, ch in enumerate(line):\n    \t\tnextCh = getOffsetCh(line,
        idx, offset)\n    \t\tif (ch==nextCh):\n    \t\t\tduplicates.append(int(ch))\n    \treturn
        duplicates\n\n    \t\n    with open(\"2017-day1-input.txt\") as fileobj:\n    \tdigits
        = fileobj.read() \n    \t\n    \tduplicatedNext = findMatchedDigits(digits,
        1)\n    \tduplicatedOpposite = findMatchedDigits(digits, len(digits)/2)\n    \tprint
        (\"Sum of duplicated next=\", sum(duplicatedNext))\n    \tprint (\"Sum of
        duplicated opposite=\", sum(duplicatedOpposite))\n\t", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqlt0it", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Trying to learn Python, but
        also get out of the habit of for-loops. Any advice on how to get rid if the
        one in findMatchedDigits()::&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def getOffsetCh(line,
        start, offset):\n    idx = int((start+offset) % len(line))\n    return line[idx]\n\ndef
        findMatchedDigits(line, offset):\n    duplicates = [0];\n    for idx, ch in
        enumerate(line):\n        nextCh = getOffsetCh(line, idx, offset)\n        if
        (ch==nextCh):\n            duplicates.append(int(ch))\n    return duplicates\n\n\nwith
        open(&amp;quot;2017-day1-input.txt&amp;quot;) as fileobj:\n    digits = fileobj.read()
        \n\n    duplicatedNext = findMatchedDigits(digits, 1)\n    duplicatedOpposite
        = findMatchedDigits(digits, len(digits)/2)\n    print (&amp;quot;Sum of duplicated
        next=&amp;quot;, sum(duplicatedNext))\n    print (&amp;quot;Sum of duplicated
        opposite=&amp;quot;, sum(duplicatedOpposite))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlt0it/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512132061.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqltaku", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "LinusCDE98", "can_mod_post": false, "created_utc":
        1512132573.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_13eyv5", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Python:\nhttps://github.com/LinusCDE/AdventOfCode-2017/blob/master/puzzle1.py",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqltaku", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python:\n&lt;a
        href=\"https://github.com/LinusCDE/AdventOfCode-2017/blob/master/puzzle1.py\"&gt;https://github.com/LinusCDE/AdventOfCode-2017/blob/master/puzzle1.py&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqltaku/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512132573.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqltmq4", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "8fingerlouie", "can_mod_post": false,
        "created_utc": 1512133172.0, "send_replies": true, "parent_id": "t3_7gsrc2",
        "score": 1, "author_fullname": "t2_bmb6v", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Solution in Python
        (omitted input variable)\n\n    def scan_input(input, step):\n        return
        sum([int(x) for i,x in enumerate(input) if ((i+step &lt; len(input) and input[i+step]
        == x) or (i+step &gt;= len(input) and input[(i+step)-len(input)]==x))])\n    \n    print(\"a:{}\".format(scan_input(input,1)))\n    print(\"b:{}\".format(scan_input(input,
        len(input)//2)))", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqltmq4", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Solution
        in Python (omitted input variable)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        scan_input(input, step):\n    return sum([int(x) for i,x in enumerate(input)
        if ((i+step &amp;lt; len(input) and input[i+step] == x) or (i+step &amp;gt;=
        len(input) and input[(i+step)-len(input)]==x))])\n\nprint(&amp;quot;a:{}&amp;quot;.format(scan_input(input,1)))\nprint(&amp;quot;b:{}&amp;quot;.format(scan_input(input,
        len(input)//2)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqltmq4/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512133172.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqltwxp", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "adrian17", "can_mod_post": false, "created_utc":
        1512133661.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_8fqaw", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Rust:\n\n\tfn main() {\n\t\tlet input = \"5994521226795838486188872189952551475352929145357284983463678944777228139398117649129843853837124228353689551178129353548331779783742915361343229141538334688254819714813664439268791978215553677772838853328835345484711229767477729948473391228776486456686265114875686536926498634495695692252159373971631543594656954494117149294648876661157534851938933954787612146436571183144494679952452325989212481219139686138139314915852774628718443532415524776642877131763359413822986619312862889689472397776968662148753187767793762654133429349515324333877787925465541588584988827136676376128887819161672467142579261995482731878979284573246533688835226352691122169847832943513758924194232345988726741789247379184319782387757613138742817826316376233443521857881678228694863681971445442663251423184177628977899963919997529468354953548612966699526718649132789922584524556697715133163376463256225181833257692821331665532681288216949451276844419154245423434141834913951854551253339785533395949815115622811565999252555234944554473912359674379862182425695187593452363724591541992766651311175217218144998691121856882973825162368564156726989939993412963536831593196997676992942673571336164535927371229823236937293782396318237879715612956317715187757397815346635454412183198642637577528632393813964514681344162814122588795865169788121655353319233798811796765852443424783552419541481132132344487835757888468196543736833342945718867855493422435511348343711311624399744482832385998592864795271972577548584967433917322296752992127719964453376414665576196829945664941856493768794911984537445227285657716317974649417586528395488789946689914972732288276665356179889783557481819454699354317555417691494844812852232551189751386484638428296871436139489616192954267794441256929783839652519285835238736142997245189363849356454645663151314124885661919451447628964996797247781196891787171648169427894282768776275689124191811751135567692313571663637214298625367655969575699851121381872872875774999172839521617845847358966264291175387374464425566514426499166813392768677233356646752273398541814142523651415521363267414564886379863699323887278761615927993953372779567675\";\n\t\tlet
        numbers: Vec&lt;_&gt; = input.chars().map(|x| x.to_digit(10).unwrap()).collect();\n\n\t\tlet
        size = numbers.len();\n\n\t\t// PART 1\n\t\t//let offset = 1;\n\t\t// PART
        2\n\t\tlet offset = size / 2;\n\n\t\tlet mut sum = 0;\n\n\t\tfor i in 0..size
        {\n\t\t\tlet next = (i+offset) % size;\n\t\t\tif numbers[i] == numbers[next]
        {\n\t\t\t\tsum += numbers[i];\n\t\t\t}\n\t\t}\n\n\t    println!(\"{}\", sum);\n\t}\n",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqltwxp", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Rust:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fn
        main() {\n    let input = &amp;quotamp;quot;;\n    let
        numbers: Vec&amp;lt;_&amp;gt; = input.chars().map(|x| x.to_digit(10).unwrap()).collect();\n\n    let
        size = numbers.len();\n\n    // PART 1\n    //let offset = 1;\n    // PART
        2\n    let offset = size / 2;\n\n    let mut sum = 0;\n\n    for i in 0..size
        {\n        let next = (i+offset) % size;\n        if numbers[i] == numbers[next]
        {\n            sum += numbers[i];\n        }\n    }\n\n    println!(&amp;quot;{}&amp;quot;,
        sum);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqltwxp/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512133661.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqluepk", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Iamnewthere", "can_mod_post": false, "created_utc":
        1512134472.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_134dlq", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "After learning Java last year at university,
        I have had a four hour introduction to C. Guess who had a really terrible
        idea:\n\n    #include &lt;stdio.h&gt;\n    #include &lt;string.h&gt;\n    #include
        &lt;stdlib.h&gt;\n    \n    int main() {\n        \n        char input[] =\n        \"1212\";\n        \n        int
        result = 0;\n        int inputLen = (int)strlen(input);\n        int half
        = inputLen / 2;\n        \n        for (int i = 0; i &lt; inputLen; i++) {\n        \n            if
        ((int) (input[i] - ''0'') == (int) (input[(i + half) % inputLen] - ''0''))
        {\n                \n                int a = input[i] - ''0'';\n            \n                //printf(\"Match
        in %d \\n\", i);\n                //printf(\"Add %d to %d \\n\", a, result);\n            \n                result
        = result + a;\n                \n            } else {\n                //printf(\"No
        Match in %d \\n\", i);\n            }\n        }\n        \n        //printf(\"Input:
        %s \\n\", input);\n        printf(\"Result: %d \\n\", result);\n        \n        return
        0;\n    }\n", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqluepk", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;After
        learning Java last year at university, I have had a four hour introduction
        to C. Guess who had a really terrible idea:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include
        &amp;lt;stdio.h&amp;gt;\n#include &amp;lt;string.h&amp;gt;\n#include &amp;lt;stdlib.h&amp;gt;\n\nint
        main() {\n\n    char input[] =\n    &amp;quot;1212&amp;quot;;\n\n    int result
        = 0;\n    int inputLen = (int)strlen(input);\n    int half = inputLen / 2;\n\n    for
        (int i = 0; i &amp;lt; inputLen; i++) {\n\n        if ((int) (input[i] - &amp;#39;0&amp;#39;)
        == (int) (input[(i + half) % inputLen] - &amp;#39;0&amp;#39;)) {\n\n            int
        a = input[i] - &amp;#39;0&amp;#39;;\n\n            //printf(&amp;quot;Match
        in %d \\n&amp;quot;, i);\n            //printf(&amp;quot;Add %d to %d \\n&amp;quot;,
        a, result);\n\n            result = result + a;\n\n        } else {\n            //printf(&amp;quot;No
        Match in %d \\n&amp;quot;, i);\n        }\n    }\n\n    //printf(&amp;quot;Input:
        %s \\n&amp;quot;, input);\n    printf(&amp;quot;Result: %d \\n&amp;quot;,
        result);\n\n    return 0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqluepk/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512134472.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqmvnlg",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Vitessii",
        "can_mod_post": false, "created_utc": 1512172989.0, "send_replies": true,
        "parent_id": "t1_dqluf5w", "score": 2, "author_fullname": "t2_hfptv6", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "If you keep it as an IntStream, you don''t need to do your reduce, just use
        sum.\n\n    char[] chars = input.toCharArray();\n\n    int sum1 = IntStream.range(0,
        chars.length)\n            .filter(i -&gt; chars[i] == chars[(i + 1) % chars.length])\n            .map(i
        -&gt; (int) chars[i]-''0'')\n            .sum();\n    int sum2 = IntStream.range(0,
        chars.length)\n            .filter(i -&gt; chars[i] == chars[(i + chars.length/2)
        % chars.length])\n            .map(i -&gt; (int) chars[i]-''0'')\n            .sum();",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqmvnlg", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If
        you keep it as an IntStream, you don&amp;#39;t need to do your reduce, just
        use sum.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;char[] chars = input.toCharArray();\n\nint
        sum1 = IntStream.range(0, chars.length)\n        .filter(i -&amp;gt; chars[i]
        == chars[(i + 1) % chars.length])\n        .map(i -&amp;gt; (int) chars[i]-&amp;#39;0&amp;#39;)\n        .sum();\nint
        sum2 = IntStream.range(0, chars.length)\n        .filter(i -&amp;gt; chars[i]
        == chars[(i + chars.length/2) % chars.length])\n        .map(i -&amp;gt; (int)
        chars[i]-&amp;#39;0&amp;#39;)\n        .sum();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_7gsrc2", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmvnlg/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512172989.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "dqluf5w", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "sakisan_be", "can_mod_post": false, "created_utc":
        1512134492.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_kf762", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "java 8 using a stream\n\n    public int solution(String
        input) {\n        String inputCycled = input + input.charAt(0);\n        return
        IntStream.range(0, inputCycled.length() - 1)\n                .mapToObj(i
        -&gt; inputCycled.substring(i, i + 2))\n                .filter(twoCharacters
        -&gt; twoCharacters.charAt(0) == twoCharacters.charAt(1))\n                .map(twoCharacters
        -&gt; twoCharacters.charAt(0) - ''0'')\n                .reduce(0, (integer,
        integer2) -&gt; integer + integer2);\n    }\n\nand part 2\n\n    public int
        part2(String input) {\n        int length = input.length();\n        return
        IntStream.range(0, length)\n                .mapToObj(i -&gt; \"\" + input.charAt(i)
        + input.charAt(halfwayCircular(length, i)))\n                .filter(twoCharacters
        -&gt; twoCharacters.charAt(0) == twoCharacters.charAt(1))\n                .map(twoCharacters
        -&gt; twoCharacters.charAt(0) - ''0'')\n                .reduce(0, (integer,
        integer2) -&gt; integer + integer2);\n    }\n\n    private int halfwayCircular(int
        length, int i) {\n        return (length / 2 + i) % length;\n    }", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_dqluf5w",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;java 8 using a stream&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public
        int solution(String input) {\n    String inputCycled = input + input.charAt(0);\n    return
        IntStream.range(0, inputCycled.length() - 1)\n            .mapToObj(i -&amp;gt;
        inputCycled.substring(i, i + 2))\n            .filter(twoCharacters -&amp;gt;
        twoCharacters.charAt(0) == twoCharacters.charAt(1))\n            .map(twoCharacters
        -&amp;gt; twoCharacters.charAt(0) - &amp;#39;0&amp;#39;)\n            .reduce(0,
        (integer, integer2) -&amp;gt; integer + integer2);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and
        part 2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public int part2(String input)
        {\n    int length = input.length();\n    return IntStream.range(0, length)\n            .mapToObj(i
        -&amp;gt; &amp;quot;&amp;quot; + input.charAt(i) + input.charAt(halfwayCircular(length,
        i)))\n            .filter(twoCharacters -&amp;gt; twoCharacters.charAt(0)
        == twoCharacters.charAt(1))\n            .map(twoCharacters -&amp;gt; twoCharacters.charAt(0)
        - &amp;#39;0&amp;#39;)\n            .reduce(0, (integer, integer2) -&amp;gt;
        integer + integer2);\n}\n\nprivate int halfwayCircular(int length, int i)
        {\n    return (length / 2 + i) % length;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqluf5w/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512134492.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlva7z", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "wzkx", "can_mod_post": false, "created_utc":
        1512135813.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_t1qbo", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "J, still don''t like tacits.\n\n     echo
        (+/\".\"0 t#~t=1|.t), +/\".\"0 t#~t=(-:#t)|.t =. LF-.~CR-.~fread ''01.dat''\n     NB.
        ok, tacit: f =. +/@(\".\"0@([#~[=]|.[)) and then echo (f&amp;1,(f-:@#)) t",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqlva7z", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;J,
        still don&amp;#39;t like tacits.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; echo
        (+/&amp;quot;.&amp;quot;0 t#~t=1|.t), +/&amp;quot;.&amp;quot;0 t#~t=(-:#t)|.t
        =. LF-.~CR-.~fread &amp;#39;01.dat&amp;#39;\n NB. ok, tacit: f =. +/@(&amp;quot;.&amp;quot;0@([#~[=]|.[))
        and then echo (f&amp;amp;1,(f-:@#)) t\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlva7z/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512135813.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlvmyn", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "ikkuhh", "can_mod_post": false, "created_utc":
        1512136315.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_c3t1n", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "My C++ solution for part two:\n\n    #include
        &lt;string&gt;\n    #include &lt;iostream&gt;\n    \n    int main(int argc,
        const char *argv[])\n    {\n        std::size_t i;\n        std::size_t half_length;\n        std::string
        input;\n        int captcha_sum = 0;\n    \n        std::getline(std::cin,
        input);\n        half_length = input.length() / 2;\n    \n        for(i=0;
        i&lt;half_length; i++) {\n            if(input[i] == input[i + half_length])
        {\n                captcha_sum += 2 * (input[i] - ''0'');\n            }\n        }\n    \n        std::cout
        &lt;&lt; captcha_sum &lt;&lt; std::endl;\n    \n        return 0;\n    }",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_dqlvmyn", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My
        C++ solution for part two:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;string&amp;gt;\n#include
        &amp;lt;iostream&amp;gt;\n\nint main(int argc, const char *argv[])\n{\n    std::size_t
        i;\n    std::size_t half_length;\n    std::string input;\n    int captcha_sum
        = 0;\n\n    std::getline(std::cin, input);\n    half_length = input.length()
        / 2;\n\n    for(i=0; i&amp;lt;half_length; i++) {\n        if(input[i] ==
        input[i + half_length]) {\n            captcha_sum += 2 * (input[i] - &amp;#39;0&amp;#39;);\n        }\n    }\n\n    std::cout
        &amp;lt;&amp;lt; captcha_sum &amp;lt;&amp;lt; std::endl;\n\n    return 0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlvmyn/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512136315.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlw51d", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "egze", "can_mod_post": false, "created_utc":
        1512137015.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_4capg", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "My ruby attempt\n\n    class CaptchaSolver\n    \n      attr_reader
        :input, :length\n    \n      def initialize(input)\n        @input = input.to_s.split(\"\").map(&amp;:to_i)\n        @length
        = @input.size\n      end\n      \n      def solve!\n        matches = []\n        input.each_with_index
        do |element, i|\n          matches &lt;&lt; element if element == input[(i
        + 1) % length]\n        end\n        matches.inject(0, :+)\n      end\n    \n    end\n    \n    ?&gt;
        CaptchaSolver.new(input).solve!\n    =&gt; 1175", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqlw51d", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My ruby attempt&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class
        CaptchaSolver\n\n  attr_reader :input, :length\n\n  def initialize(input)\n    @input
        = input.to_s.split(&amp;quot;&amp;quot;).map(&amp;amp;:to_i)\n    @length
        = @input.size\n  end\n\n  def solve!\n    matches = []\n    input.each_with_index
        do |element, i|\n      matches &amp;lt;&amp;lt; element if element == input[(i
        + 1) % length]\n    end\n    matches.inject(0, :+)\n  end\n\nend\n\n?&amp;gt;
        CaptchaSolver.new(input).solve!\n=&amp;gt; 1175\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlw51d/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512137015.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlwpee", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "hendi__", "can_mod_post": false, "created_utc":
        1512137773.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_c96xe", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Here''s my solution in Elixir. It''s pretty
        straight forward using pattern matching and recursion once you have the list
        in the right format. I like my code except the one-liner in day1b::solve/1.\n\n    #!/usr/bin/env
        elixir\n    \n    defmodule Day1a do\n      def main([input]), do: solve(input)
        |&gt; IO.puts\n      \n      def solve(x) do\n        digits = String.graphemes(x)\n        _solve(digits
        ++ [hd digits], 0)\n      end\n      \n      defp _solve([], accu), do: accu\n      defp
        _solve([x,x | tail], accu), do: _solve([x | tail], accu + String.to_integer(x))\n      defp
        _solve([_ | tail], accu), do: _solve(tail, accu)\n    end\n\n    Day1a.main(System.argv)\n\nand\n\n    #!/usr/bin/env
        elixir\n    \n    defmodule Day1b do\n      def main([input]), do: solve(input)
        |&gt; IO.puts\n      \n      def solve(x) do\n        digits = String.graphemes(x)\n        _solve(List.zip([digits,
        Enum.slice(digits ++ digits, div(length(digits), 2), length(digits))]), 0)\n      end\n      \n      defp
        _solve([], accu), do: accu\n      defp _solve([{x,x} | tail], accu), do: _solve(tail,
        accu + String.to_integer(x))\n      defp _solve([_ | tail], accu), do: _solve(tail,
        accu)\n    end\n    \n    Day1b.main(System.argv)\n\n\nEdit: Cleaned up the
        code and put it on github: https://github.com/hendi/aoc2017/tree/master/day1",
        "edited": 1512139559.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_dqlwpee", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s
        my solution in Elixir. It&amp;#39;s pretty straight forward using pattern
        matching and recursion once you have the list in the right format. I like
        my code except the one-liner in day1b::solve/1.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/usr/bin/env
        elixir\n\ndefmodule Day1a do\n  def main([input]), do: solve(input) |&amp;gt;
        IO.puts\n\n  def solve(x) do\n    digits = String.graphemes(x)\n    _solve(digits
        ++ [hd digits], 0)\n  end\n\n  defp _solve([], accu), do: accu\n  defp _solve([x,x
        | tail], accu), do: _solve([x | tail], accu + String.to_integer(x))\n  defp
        _solve([_ | tail], accu), do: _solve(tail, accu)\nend\n\nDay1a.main(System.argv)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/usr/bin/env
        elixir\n\ndefmodule Day1b do\n  def main([input]), do: solve(input) |&amp;gt;
        IO.puts\n\n  def solve(x) do\n    digits = String.graphemes(x)\n    _solve(List.zip([digits,
        Enum.slice(digits ++ digits, div(length(digits), 2), length(digits))]), 0)\n  end\n\n  defp
        _solve([], accu), do: accu\n  defp _solve([{x,x} | tail], accu), do: _solve(tail,
        accu + String.to_integer(x))\n  defp _solve([_ | tail], accu), do: _solve(tail,
        accu)\nend\n\nDay1b.main(System.argv)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Edit:
        Cleaned up the code and put it on github: &lt;a href=\"https://github.com/hendi/aoc2017/tree/master/day1\"&gt;https://github.com/hendi/aoc2017/tree/master/day1&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlwpee/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512137773.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlx5ha", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "omegaxLoL", "can_mod_post": false, "created_utc":
        1512138320.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_7330b", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "[My solution in Go](https://github.com/aosousa/AdventOfCode2017/blob/master/day1.go).
        Constructive criticism welcome of course!", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_dqlx5ha", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/aosousa/AdventOfCode2017/blob/master/day1.go\"&gt;My
        solution in Go&lt;/a&gt;. Constructive criticism welcome of course!&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlx5ha/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1512138320.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "more",
        "data": {"count": 109, "name": "t1_dqlxfsp", "id": "dqlxfsp", "parent_id":
        "t3_7gsrc2", "depth": 0, "children": ["dqlxfsp", "dqm0jzw", "dqm0i1n", "dqm1jkf",
        "dqm2zyl", "dqm234a", "dqmgsow", "dqm3uhl", "dqm2xte", "dqm310w", "dqm3064",
        "dqm3wv1", "dqmces1", "dqmlp3f", "dqmlnbk", "dqm7qi2", "dqm8t5g", "dqmbg3h",
        "dqn5sjb", "dqm5mhw", "dqmll53", "dqm6cdn", "dqm4k1y", "dqm5mbx", "dqm9j6r",
        "dqn1aic", "dqmtv49", "dqr6z85", "dr4tpe2", "dqmon78", "dqmoeah", "dqm8bhe",
        "dqzjsgr", "dqn57aa", "dqmo8ua", "dqmrkzk", "dqmt7eb", "dqn8utz", "dqs1lsx",
        "dqmltc1", "dqmjy41", "dqnshbh", "dqrgjld", "dqmjq3g", "dqzz643", "dqmejhc",
        "dqm6280", "dqmnfxq", "dqm78zr", "dqn7hlu", "dqmkj5n", "dqmx1l1", "dr4bs2g",
        "dqmuq52", "dqnkfwg", "dqm8qej", "dqnmp63", "dqn45w7", "dqmp74a", "dqn37ua",
        "dqn4cpa", "dr9lncu", "dri9xke", "dqn63xn", "dqmmklp", "dqqrdjb", "dqpei0i",
        "dr4ccs5", "dqz3pov", "dr3xs89", "dqmursa", "dvqp9wk", "dqmpaqa", "dqmx4ln",
        "dqnvcnm", "dqmarwl", "dqntmz7", "dr9merj", "dqvh60w", "dr1etc1", "dqo2kpr",
        "dqlhk8u", "dqnqn7e", "dqn0zzb", "drletsg", "dqo0jox", "dqlhfrh", "dqlhiuu",
        "dqn4guo", "dqlhxlw", "dqoafnq", "dqlh3a0", "dqoa5ju", "dqlh01y", "dqlhrwa",
        "dqlgu6o", "dqlgurs", "dr9lqpa"]}}], "before": null}}]'
  recorded_at: Sat, 08 Mar 2025 23:31:42 GMT
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:31:42 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=VuUJEzk5ZrsNp0P0ih; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sat, 08 Mar 2025 23:31:42 GMT
- request:
    method: post
    uri: https://oauth.reddit.com/api/morechildren.json
    body:
      encoding: UTF-8
      string: link_id=t3_7gsrc2&children=dqlxfsp,dqm0jzw,dqm0i1n,dqm1jkf,dqm2zyl,dqm234a,dqmgsow,dqm3uhl,dqm2xte,dqm310w,dqm3064,dqm3wv1,dqmces1,dqmlp3f,dqmlnbk,dqm7qi2,dqm8t5g,dqmbg3h,dqn5sjb,dqm5mhw,dqmll53,dqm6cdn,dqm4k1y,dqm5mbx,dqm9j6r,dqn1aic,dqmtv49,dqr6z85,dr4tpe2,dqmon78,dqmoeah,dqm8bhe,dqzjsgr,dqn57aa,dqmo8ua,dqmrkzk,dqmt7eb,dqn8utz,dqs1lsx,dqmltc1,dqmjy41,dqnshbh,dqrgjld,dqmjq3g,dqzz643,dqmejhc,dqm6280,dqmnfxq,dqm78zr,dqn7hlu,dqmkj5n,dqmx1l1,dr4bs2g,dqmuq52,dqnkfwg,dqm8qej,dqnmp63,dqn45w7,dqmp74a,dqn37ua,dqn4cpa,dr9lncu,dri9xke,dqn63xn,dqmmklp,dqqrdjb,dqpei0i,dr4ccs5,dqz3pov,dr3xs89,dqmursa,dvqp9wk,dqmpaqa,dqmx4ln,dqnvcnm,dqmarwl,dqntmz7,dr9merj,dqvh60w,dr1etc1,dqo2kpr,dqlhk8u,dqnqn7e,dqn0zzb,drletsg,dqo0jox,dqlhfrh,dqlhiuu,dqn4guo,dqlhxlw,dqoafnq,dqlh3a0,dqoa5ju,dqlh01y,dqlhrwa,dqlgu6o,dqlgurs,dr9lqpa
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '35710'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      set-cookie:
      - loid=000000001ksjzv0m0w.2.1741476703011.Z0FBQUFBQm56Tk5md1R2bFZ0ZU0zeDJLVmJnb2hvQzNCbUU1dEJYcjdIeHdxZjh5Mmp1RHpCeDN2VVZYR1FOZmtWYWg4QXJEWlZKLVotU1Y5akpTRnE4RkgwWUsxNGs4MzhkdUY1aXJXYTVvMUxpRWRxTXR3R1p6bWs0eHFTbVd2eE1yeHNBRGJDaGQ;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Mon, 08-Mar-2027 23:31:43
        GMT; secure, session_tracker=cjmakepfiarajqohbm.0.1741476703023.Z0FBQUFBQm56Tk5mTFNGX0tjVjhCelJwb3BPTFVRdEw0Wkwwa1I2OU0wNXRiYTFub0k2UVFjRlVZaDhkOV9fMUFKSmxNM1Y1T29yaHFtUk5sR25UelhfQ0lwYkZ6REhrRXFGdlVQdE9HbVM5QVJuMkYzOS1sZ25xNUN2eWl6QkRLQzFiNlV4NFpCTDQ;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 01:31:43
        GMT; secure, edgebucket=Q2gFcPOFfd1DdMeAp1; Domain=reddit.com; Max-Age=63071999;
        Path=/;  secure
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '2'
      x-ratelimit-remaining:
      - '98.0'
      x-ratelimit-reset:
      - '496'
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:31:43 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"jquery": [[0, 1, "call", ["body"]], [1, 2, "attr", "find"], [2, 3,
        "call", [".status"]], [3, 4, "attr", "hide"], [4, 5, "call", []], [5, 6, "attr",
        "html"], [6, 7, "call", [""]], [7, 8, "attr", "end"], [8, 9, "call", []],
        [0, 10, "attr", "insert_things"], [10, 11, "call", [[{"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqm0i1n",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "doniec",
        "can_mod_post": false, "created_utc": 1512142000.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_glz69", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Rust solutions with iterators\n\n    const INPUT: &amp;str = \"21752342814933766938172121674976879111362417653261522357855816893656462449168377359285244818489723869987861247912289729579296691684761143544956991583942215236568961875851755854977946147178746464675227699149925227227137557479769948569788884399379821111382536722699575759474473273939756348992714667963596189765734743169489599125771443348193383566159843593541134749392569865481578359825844394454173219857919349341442148282229689541561169341622222354651397342928678496478671339383923769856425795211323673389723181967933933832711545885653952861879231537976292517866354812943192728263269524735698423336673735158993853556148833861327959262254756647827739145283577793481526768156921138428318939361859721778556264519643435871835744859243167227889562738712953651128317624673985213525897522378259178625416722152155728615936587369515254936828668564857283226439881266871945998796488472249182538883354186573925183152663862683995449671663285775397453876262722567452435914777363522817594741946638986571793655889466419895996924122915777224499481496837343194149123735355268151941712871245863553836953349887831949788869852929147849489265325843934669999391846286319268686789372513976522282587526866148166337215961493536262851512218794139272361292811529888161198799297966893366553115353639298256788819385272471187213579185523521341651117947676785341146235441411441813242514813227821843819424619974979886871646621918865274574538951761567855845681272364646138584716333599843835167373525248547542442942583122624534494442516259616973235858469131159773167334953658673271599748942956981954699444528689628848694446818825465485122869742839711471129862632128635779658365756362863627135983617613332849756371986376967117549251566281992964573929655589313871976556784849231916513831538254812347116253949818633527185174221565279775766742262687713114114344843534958833372634182176866315441583887177759222598853735114191874277711434653854816841589229914164681364497429324463193669337827467661773833517841763711156376147664749175267212562321567728575765844893232718971471289841171642868948852136818661741238178676857381583155547755219837116125995361896562498721571413742\";\n    \n    fn
        part1(nums: &amp;[u32]) -&gt; u32 {\n        let sum: u32 = nums.iter()\n            .zip(nums.iter().skip(1))\n            .filter_map(|(a,
        b)| if a == b { Some(a) } else { None })\n            .sum();\n        //
        handle cycle\n        if nums.first() == nums.last() {\n            sum +
        nums[0]\n        } else {\n            sum\n        }\n    }\n    \n    fn
        part2(nums: &amp;[u32]) -&gt; u32 {\n        nums.iter()\n            .zip(nums.iter().skip(nums.len()
        / 2))\n            .filter_map(|(a, b)| if a == b { Some(a + b) } else { None
        })\n            .sum()\n    }\n    \n    fn main() {\n        let nums: Vec&lt;_&gt;
        = INPUT.chars().map(|x| x.to_digit(10).unwrap()).collect();\n       println!(\"part1:
        {}\", part1(&amp;nums));\n       println!(\"part2: {}\", part2(&amp;nums));\n   }\n",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Rust solutions with
        iterators&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const INPUT: &amp;amp;str =
        &amp;quotamp;quot;;\n\nfn
        part1(nums: &amp;amp;[u32]) -&amp;gt; u32 {\n    let sum: u32 = nums.iter()\n        .zip(nums.iter().skip(1))\n        .filter_map(|(a,
        b)| if a == b { Some(a) } else { None })\n        .sum();\n    // handle cycle\n    if
        nums.first() == nums.last() {\n        sum + nums[0]\n    } else {\n        sum\n    }\n}\n\nfn
        part2(nums: &amp;amp;[u32]) -&amp;gt; u32 {\n    nums.iter()\n        .zip(nums.iter().skip(nums.len()
        / 2))\n        .filter_map(|(a, b)| if a == b { Some(a + b) } else { None
        })\n        .sum()\n}\n\nfn main() {\n    let nums: Vec&amp;lt;_&amp;gt; =
        INPUT.chars().map(|x| x.to_digit(10).unwrap()).collect();\n   println!(&amp;quot;part1:
        {}&amp;quot;, part1(&amp;amp;nums));\n   println!(&amp;quot;part2: {}&amp;quot;,
        part2(&amp;amp;nums));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm0i1n/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqm0i1n", "created":
        1512142000.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqm0jzw",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Vstebra",
        "can_mod_post": false, "created_utc": 1512142055.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_sway2", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Javascript / Nodejs\n\nhttps://github.com/VaclavStebra/aoc2017/blob/master/01_captcha.js",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Javascript / Nodejs&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/VaclavStebra/aoc2017/blob/master/01_captcha.js\"&gt;https://github.com/VaclavStebra/aoc2017/blob/master/01_captcha.js&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm0jzw/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqm0jzw", "created":
        1512142055.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqm1jkf", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_7gsrc2", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Erlang:\n\n    -define(INPUT, \"41231231231&lt;etc&gt;\").\n    \n    solve()
        -&gt;\n      checker(lists:reverse(str_to_list(?INPUT, []))).\n    \n    str_to_list([],
        Acc) -&gt; Acc;\n    str_to_list([H|T], Acc) -&gt;\n      {N, _} = string:to_integer([H]),\n      str_to_list(T,
        [N|Acc]).\n    \n    checker(Numbers) -&gt;\n      checker(Numbers, 1, 0,
        Numbers).\n    checker([H|T], Pos, Count, Numbers) -&gt;\n      case rotate(Numbers,
        trunc(length(Numbers) / 2), Pos) of\n        H -&gt; checker(T, Pos+1, Count+H,
        Numbers);\n        _ -&gt; checker(T, Pos+1, Count, Numbers)\n      end;\n    checker([],
        _, Count, _) -&gt;\n      Count.\n\n    rotate(Numbers, Half, Pos) when Pos+Half
        =&lt; length(Numbers) -&gt;\n      Target = Pos+Half,\n      lists:nth(Target,
        Numbers);\n    rotate(Numbers, Half, Pos) when Pos+Half &gt; length(Numbers)
        -&gt;\n      Target = Pos-Half,\n      lists:nth(Target, Numbers).", "awarders":
        [], "downs": 0, "author_flair_css_class": null, "name": "t1_dqm1jkf", "collapsed":
        false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Erlang:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;-define(INPUT,
        &amp;quot;41231231231&amp;lt;etc&amp;gt;&amp;quot;).\n\nsolve() -&amp;gt;\n  checker(lists:reverse(str_to_list(?INPUT,
        []))).\n\nstr_to_list([], Acc) -&amp;gt; Acc;\nstr_to_list([H|T], Acc) -&amp;gt;\n  {N,
        _} = string:to_integer([H]),\n  str_to_list(T, [N|Acc]).\n\nchecker(Numbers)
        -&amp;gt;\n  checker(Numbers, 1, 0, Numbers).\nchecker([H|T], Pos, Count,
        Numbers) -&amp;gt;\n  case rotate(Numbers, trunc(length(Numbers) / 2), Pos)
        of\n    H -&amp;gt; checker(T, Pos+1, Count+H, Numbers);\n    _ -&amp;gt;
        checker(T, Pos+1, Count, Numbers)\n  end;\nchecker([], _, Count, _) -&amp;gt;\n  Count.\n\nrotate(Numbers,
        Half, Pos) when Pos+Half =&amp;lt; length(Numbers) -&amp;gt;\n  Target = Pos+Half,\n  lists:nth(Target,
        Numbers);\nrotate(Numbers, Half, Pos) when Pos+Half &amp;gt; length(Numbers)
        -&amp;gt;\n  Target = Pos-Half,\n  lists:nth(Target, Numbers).\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm1jkf/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1512143044.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512143044.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqm2xte",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "alehander42",
        "can_mod_post": false, "created_utc": 1512144372.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_6gipn", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Just to demonstrate some code golf oneliners :\n\nNim\n\n    import sequtils\n\n    proc
        solve(n: string, o: bool): int =\n      result = n.zip(toSeq(0..&lt;len(n))).filterIt(it[0].ord
        == n[(it[1] + (if o: 1 else: len(n) div 2)) mod len(n)].ord).foldl(a + b[0].ord
        - ''0''.ord, 0)\n\n    # o is true for first task\n```", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Just to demonstrate some code golf oneliners :&lt;/p&gt;\n\n&lt;p&gt;Nim&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        sequtils\n\nproc solve(n: string, o: bool): int =\n  result = n.zip(toSeq(0..&amp;lt;len(n))).filterIt(it[0].ord
        == n[(it[1] + (if o: 1 else: len(n) div 2)) mod len(n)].ord).foldl(a + b[0].ord
        - &amp;#39;0&amp;#39;.ord, 0)\n\n# o is true for first task\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;```&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm2xte/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqm2xte", "created":
        1512144372.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqm2zyl",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "fr3dch3n",
        "can_mod_post": false, "created_utc": 1512144430.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_wcqna", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Elixir:\n\n    def read_input() do\n      \"resources/day01\"\n        |&gt;
        File.read\n        |&gt; elem(1)\n    end\n  \n    def get_by_index(list,
        index) do\n      result = Enum.at(list, index, :none)\n      if result ==
        :none do\n        Enum.at(list, index - Kernel.length(list))\n      else\n        result\n      end\n    end\n  \n    def
        process(input, pos_change_fun) do\n     char_list =  input\n        |&gt;
        String.graphemes\n        |&gt; Enum.filter(fn(x) -&gt;  x != \"\\n\" end)\n  \n     char_list\n        |&gt;
        Enum.with_index\n        |&gt; Enum.filter(fn({c, i}) -&gt; c == get_by_index(char_list,
        i + pos_change_fun.(char_list)) end)\n        |&gt; Enum.map(fn({c, _i}) -&gt;
        Integer.parse(c) |&gt; elem(0) end)\n        |&gt; Enum.sum\n    end\n  \n    def
        challenge_a_pos_change(_x), do: 1\n  \n    def challengeA() do\n      read_input()\n      |&gt;
        process(&amp;challenge_a_pos_change/1)\n    end\n  \n    def challenge_b_pos_change(x),
        do: round(Kernel.length(x)/2)\n  \n    def challengeB() do\n      read_input()\n      |&gt;
        process(&amp;challenge_b_pos_change/1)\n    end", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Elixir:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def read_input()
        do\n  &amp;quot;resources/day01&amp;quot;\n    |&amp;gt; File.read\n    |&amp;gt;
        elem(1)\nend\n\ndef get_by_index(list, index) do\n  result = Enum.at(list,
        index, :none)\n  if result == :none do\n    Enum.at(list, index - Kernel.length(list))\n  else\n    result\n  end\nend\n\ndef
        process(input, pos_change_fun) do\n char_list =  input\n    |&amp;gt; String.graphemes\n    |&amp;gt;
        Enum.filter(fn(x) -&amp;gt;  x != &amp;quot;\\n&amp;quot; end)\n\n char_list\n    |&amp;gt;
        Enum.with_index\n    |&amp;gt; Enum.filter(fn({c, i}) -&amp;gt; c == get_by_index(char_list,
        i + pos_change_fun.(char_list)) end)\n    |&amp;gt; Enum.map(fn({c, _i}) -&amp;gt;
        Integer.parse(c) |&amp;gt; elem(0) end)\n    |&amp;gt; Enum.sum\nend\n\ndef
        challenge_a_pos_change(_x), do: 1\n\ndef challengeA() do\n  read_input()\n  |&amp;gt;
        process(&amp;amp;challenge_a_pos_change/1)\nend\n\ndef challenge_b_pos_change(x),
        do: round(Kernel.length(x)/2)\n\ndef challengeB() do\n  read_input()\n  |&amp;gt;
        process(&amp;amp;challenge_b_pos_change/1)\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm2zyl/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqm2zyl", "created":
        1512144430.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqm3064",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "SaltyPeaches",
        "can_mod_post": false, "created_utc": 1512144436.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_8qs7h", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Here''s my PowerShell solution! WOOO! So excited for AoC!\n\nhttps://pastebin.com/GNkE78Dj",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s my PowerShell
        solution! WOOO! So excited for AoC!&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://pastebin.com/GNkE78Dj\"&gt;https://pastebin.com/GNkE78Dj&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm3064/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqm3064", "created":
        1512144436.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1512149683.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqm310w", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "RockyAstro",
        "can_mod_post": false, "created_utc": 1512144458.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_rd35u", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Icon programming language (https://www.cs.arizona.edu/icon)\n\nDay1:\n\n    procedure
        main(args)\n        s := args[1] | read(open(\"input.txt\",\"r\"))\n        sum
        := 0\n        every sum +:= ((c := s[i := 1 to *s]) &amp; c == s[ (i % *s)
        +1 ])\n        write(sum)\n    end\n\nDay2:\n\n    procedure main(args)\n        s
        := args[1] | read(open(\"input.txt\",\"r\"))\n        sum := 0\n        step
        := *s/2\n        every sum +:= ((c := s[i := 1 to *s]) &amp; c == s[ (i+step-1)
        % *s +1 ])\n        write(sum)\n    end\n", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Icon programming language (&lt;a href=\"https://www.cs.arizona.edu/icon\"&gt;https://www.cs.arizona.edu/icon&lt;/a&gt;)&lt;/p&gt;\n\n&lt;p&gt;Day1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;procedure
        main(args)\n    s := args[1] | read(open(&amp;quot;input.txt&amp;quot;,&amp;quot;r&amp;quot;))\n    sum
        := 0\n    every sum +:= ((c := s[i := 1 to *s]) &amp;amp; c == s[ (i % *s)
        +1 ])\n    write(sum)\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Day2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;procedure
        main(args)\n    s := args[1] | read(open(&amp;quot;input.txt&amp;quot;,&amp;quot;r&amp;quot;))\n    sum
        := 0\n    step := *s/2\n    every sum +:= ((c := s[i := 1 to *s]) &amp;amp;
        c == s[ (i+step-1) % *s +1 ])\n    write(sum)\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm310w/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqm310w", "created":
        1512144458.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqm3uhl",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "asperellis",
        "can_mod_post": false, "created_utc": 1512145226.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_8w24d", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "js\n\nhttps://github.com/asperellis/adventofcode2017/blob/master/day1.js",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;js&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/asperellis/adventofcode2017/blob/master/day1.js\"&gt;https://github.com/asperellis/adventofcode2017/blob/master/day1.js&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm3uhl/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqm3uhl", "created":
        1512145226.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1512146410.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqm3wv1", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "mehrick",
        "can_mod_post": false, "created_utc": 1512145288.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_10167y", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My solution in JavaScript using node:\n\n    const readline = require(\"readline\");\n\n    const
        rl = readline.createInterface(process.stdin, process.stdout);\n\n    function
        reverseCaptcha(input, shouldIncludeDigit) {\n      const digits = [...input].map(x
        =&gt; Number.parseInt(x));\n      return digits\n        .filter(shouldIncludeDigit)\n        .reduce((total,
        digit) =&gt; total + digit, 0);\n    }\n\n    function shouldIncludeDigitPartOne(digit,
        index, digits) {\n      return digit === digits[(index + 1) % digits.length];\n    }\n\n    function
        shouldIncludeDigitPartTwo(digit, index, digits) {\n      return digit ===
        digits[(index + digits.length / 2) % digits.length];\n    }\n\n    rl.question(\"Enter
        the captcha to be reversed: \", input =&gt; {\n      console.log(\n        `Part
        one answer is ${reverseCaptcha(input, shouldIncludeDigitPartOne)}`\n      );\n      console.log(\n        `Part
        two answer is ${reverseCaptcha(input, shouldIncludeDigitPartTwo)}`\n      );\n      rl.close();\n    });\n",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My solution in JavaScript
        using node:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const readline = require(&amp;quot;readline&amp;quot;);\n\nconst
        rl = readline.createInterface(process.stdin, process.stdout);\n\nfunction
        reverseCaptcha(input, shouldIncludeDigit) {\n  const digits = [...input].map(x
        =&amp;gt; Number.parseInt(x));\n  return digits\n    .filter(shouldIncludeDigit)\n    .reduce((total,
        digit) =&amp;gt; total + digit, 0);\n}\n\nfunction shouldIncludeDigitPartOne(digit,
        index, digits) {\n  return digit === digits[(index + 1) % digits.length];\n}\n\nfunction
        shouldIncludeDigitPartTwo(digit, index, digits) {\n  return digit === digits[(index
        + digits.length / 2) % digits.length];\n}\n\nrl.question(&amp;quot;Enter the
        captcha to be reversed: &amp;quot;, input =&amp;gt; {\n  console.log(\n    `Part
        one answer is ${reverseCaptcha(input, shouldIncludeDigitPartOne)}`\n  );\n  console.log(\n    `Part
        two answer is ${reverseCaptcha(input, shouldIncludeDigitPartTwo)}`\n  );\n  rl.close();\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm3wv1/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqm3wv1", "created":
        1512145288.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqm4k1y",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "rocamero",
        "can_mod_post": false, "created_utc": 1512145898.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_mmqk18y", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Powershell:\n\n    ($(gc .\\Day_01.data) | % {}{ $arr=[int[]](($($_) -split
        '''')-ne '''')}{$arr} | % {$i=0;}{if($arr[$i] -eq $arr[$i+1]){$arr[$i]} $i++}
        | measure -sum).sum", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Powershell:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;($(gc
        .\\Day_01.data) | % {}{ $arr=[int[]](($($_) -split &amp;#39;&amp;#39;)-ne
        &amp;#39;&amp;#39;)}{$arr} | % {$i=0;}{if($arr[$i] -eq $arr[$i+1]){$arr[$i]}
        $i++} | measure -sum).sum\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm4k1y/", "subreddit_type":
        "public", "locked": false, "name": "t1_dqm4k1y", "created": 1512145898.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_7gsrc2", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqm5mbx", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "ijustupvoteeverythin", "can_mod_post":
        false, "created_utc": 1512146879.0, "send_replies": true, "parent_id": "t3_7gsrc2",
        "score": 1, "author_fullname": "t2_5sp3r", "report_reasons": null, "approved_by":
        null, "all_awardings": [], "collapsed": false, "body": "js\n \n    const solve
        = x =&gt; x.split('''').reduce((a, v, i) =&gt; v === x.charAt((i + 1) % x.length)
        ? a + (+v) : a, 0);\n\n    console.log(solve(''1221''));", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;js&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const
        solve = x =&amp;gt; x.split(&amp;#39;&amp;#39;).reduce((a, v, i) =&amp;gt;
        v === x.charAt((i + 1) % x.length) ? a + (+v) : a, 0);\n\nconsole.log(solve(&amp;#39;1221&amp;#39;));\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm5mbx/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqm5mbx", "created":
        1512146879.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqm5mhw",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "bolshedvorsky",
        "can_mod_post": false, "created_utc": 1512146884.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_ln86dma", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Learning Python this year\n\n    f = open(''01.txt'',''r'')\n    contents
        = f.read()\n\n    def calculate(shift):\n        sum = 0\n        for index
        in range(1, len(contents)):\n            index2 = index + shift\n            if
        index2 &gt;= len(contents):\n                index2 -= len(contents)\n\n            if
        contents[index] == contents[index2]:\n                sum += int(contents[index])\n\n        return
        sum\n\n    print(calculate(1))\n    print(calculate(len(contents) / 2))",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Learning Python this
        year&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;f = open(&amp;#39;01.txt&amp;#39;,&amp;#39;r&amp;#39;)\ncontents
        = f.read()\n\ndef calculate(shift):\n    sum = 0\n    for index in range(1,
        len(contents)):\n        index2 = index + shift\n        if index2 &amp;gt;=
        len(contents):\n            index2 -= len(contents)\n\n        if contents[index]
        == contents[index2]:\n            sum += int(contents[index])\n\n    return
        sum\n\nprint(calculate(1))\nprint(calculate(len(contents) / 2))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm5mhw/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqm5mhw", "created":
        1512146884.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqm6280", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_7gsrc2", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_dqm6280", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm6280/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1512147285.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512147285.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqmw5ow",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Vitessii",
        "can_mod_post": false, "created_utc": 1512173608.0, "send_replies": true,
        "parent_id": "t1_dqm6280", "score": 2, "author_fullname": "t2_hfptv6", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Rather than looping through converting the string to integers in the array,
        why not just do:\n\n    char[] chars = input.toCharArray();\n\nThen change
        your sum to be: \n\n    output += array[i] - ''0'';\n\nFor later problems,
        rather than using scanner, you might want to just do:\n\n    BufferedReader
        input = new BufferedReader(new FileReader(FILENAME));\n\n(or you can use a
        StringReader if you just paste the input into a variable in your class)\n\nThe
        BufferedReader has some nice utilities on it:\n\n    String line = reader.readLine();\n    Stream&lt;String&gt;
        lineStream = reader.lines();\n    List&lt;String&gt; lines = reader.lines().collect(Collectors.toList());\n",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Rather than looping
        through converting the string to integers in the array, why not just do:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;char[]
        chars = input.toCharArray();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Then change
        your sum to be: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;output += array[i] -
        &amp;#39;0&amp;#39;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For later problems,
        rather than using scanner, you might want to just do:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;BufferedReader
        input = new BufferedReader(new FileReader(FILENAME));\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(or
        you can use a StringReader if you just paste the input into a variable in
        your class)&lt;/p&gt;\n\n&lt;p&gt;The BufferedReader has some nice utilities
        on it:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;String line = reader.readLine();\nStream&amp;lt;String&amp;gt;
        lineStream = reader.lines();\nList&amp;lt;String&amp;gt; lines = reader.lines().collect(Collectors.toList());\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmw5ow/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqmw5ow", "created":
        1512173608.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqm6cdn",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "TesticularCatHat",
        "can_mod_post": false, "created_utc": 1512147544.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_fuuyv", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Here''s my solution in python\n\n    with open(\"dayOne.txt\") as f:\n        input_list
        = [int(s) for s in list(f.read()) if not s == ''\\n'']\n\n    def dayOne(offset,
        list_input):\n        sum_list = 0\n        for x in range(len(list_input)):\n            if(list_input[x]
        == list_input[((x+offset) % len(list_input))]):\n                sum_list
        += list_input[x]\n        return sum_list\n        \n\n    print(\"Part One:
        {} \\nPart Two: {}\".format(dayOne(1, input_list), dayOne(len(input_list)//2,
        input_list)))\n", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s
        my solution in python&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with open(&amp;quot;dayOne.txt&amp;quot;)
        as f:\n    input_list = [int(s) for s in list(f.read()) if not s == &amp;#39;\\n&amp;#39;]\n\ndef
        dayOne(offset, list_input):\n    sum_list = 0\n    for x in range(len(list_input)):\n        if(list_input[x]
        == list_input[((x+offset) % len(list_input))]):\n            sum_list += list_input[x]\n    return
        sum_list\n\n\nprint(&amp;quot;Part One: {} \\nPart Two: {}&amp;quot;.format(dayOne(1,
        input_list), dayOne(len(input_list)//2, input_list)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm6cdn/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqm6cdn", "created":
        1512147544.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqm78zr",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Derpstiny123",
        "can_mod_post": false, "created_utc": 1512148381.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_to6re", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "This is my code in C++.\n\n    #include &lt;iostream&gt;\n\n    using namespace
        std;\n\n    //Adventforcode.com Dec 2017, Day 1: Captcha.\n    int main()\n    {\n        //part
        1\n        string stringPart1 = \"\";\n        int sumPart1 = 5;\n\n        for(int
        i = 1; i &lt; stringPart1.length()-1;  i++)\n        {\n            if((stringPart1[i-1]-''0'')
        == (stringPart1[i]-''0''))\n            {\n                sumPart1 += stringPart1[i]
        - ''0'';\n            }\n        }\n\n        cout &lt;&lt; sumPart1 &lt;&lt;
        endl;\n\n        //part 2\n        string stringPart2 = \"\";\n        int
        sumPart2 = 0;\n\n        for(int i = 0; i &lt; stringPart2.length();  i++)\n        {\n            if((stringPart2[i]-''0'')
        == (stringPart2[i + (stringPart2.length()/2)]-''0''))\n            {\n                sumPart2
        += (stringPart2[i] - ''0'')*2;\n            }\n        }\n\n        cout &lt;&lt;
        sumPart2 &lt;&lt; endl;\n\n        return 0;\n    }\n", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;This is my code in C++.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include
        &amp;lt;iostream&amp;gt;\n\nusing namespace std;\n\n//Adventforcode.com Dec
        2017, Day 1: Captcha.\nint main()\n{\n    //part 1\n    string stringPart1
        = &amp;quot;&amp;quot;;\n    int sumPart1 = 5;\n\n    for(int i = 1; i &amp;lt;
        stringPart1.length()-1;  i++)\n    {\n        if((stringPart1[i-1]-&amp;#39;0&amp;#39;)
        == (stringPart1[i]-&amp;#39;0&amp;#39;))\n        {\n            sumPart1
        += stringPart1[i] - &amp;#39;0&amp;#39;;\n        }\n    }\n\n    cout &amp;lt;&amp;lt;
        sumPart1 &amp;lt;&amp;lt; endl;\n\n    //part 2\n    string stringPart2 =
        &amp;quot;&amp;quot;;\n    int sumPart2 = 0;\n\n    for(int i = 0; i &amp;lt;
        stringPart2.length();  i++)\n    {\n        if((stringPart2[i]-&amp;#39;0&amp;#39;)
        == (stringPart2[i + (stringPart2.length()/2)]-&amp;#39;0&amp;#39;))\n        {\n            sumPart2
        += (stringPart2[i] - &amp;#39;0&amp;#39;)*2;\n        }\n    }\n\n    cout
        &amp;lt;&amp;lt; sumPart2 &amp;lt;&amp;lt; endl;\n\n    return 0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm78zr/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqm78zr", "created":
        1512148381.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqm8bhe",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "JuLoOr",
        "can_mod_post": false, "created_utc": 1512149372.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_wav2x", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Another Kotlin solution:\n\n    fun calc(input: List&lt;Int&gt;): Int {\n        val
        step = input.size.div(2)\n        return input.filterIndexed({ i, v -&gt;\n            v
        == input[compIndex(i, input.size, step)]\n        }).sum()\n    }\n\n    private
        fun compIndex(currentIndex: Int, listSize: Int, step: Int): Int {\n        return
        when {\n            currentIndex.plus(step) &gt;= listSize -&gt; currentIndex.plus(step).minus(listSize)\n            else
        -&gt; currentIndex.plus(step)\n        }\n    }", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Another Kotlin solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fun
        calc(input: List&amp;lt;Int&amp;gt;): Int {\n    val step = input.size.div(2)\n    return
        input.filterIndexed({ i, v -&amp;gt;\n        v == input[compIndex(i, input.size,
        step)]\n    }).sum()\n}\n\nprivate fun compIndex(currentIndex: Int, listSize:
        Int, step: Int): Int {\n    return when {\n        currentIndex.plus(step)
        &amp;gt;= listSize -&amp;gt; currentIndex.plus(step).minus(listSize)\n        else
        -&amp;gt; currentIndex.plus(step)\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm8bhe/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqm8bhe", "created":
        1512149372.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqm8qej", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_7gsrc2", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Yeah... I didn''t do any regex magic,  Doing regex magic
        has bit me in the ass a while back.\n\nPart 1: Create a list of all the potential
        \"pairs\" of numbers, add the final \"pair\" to the list. Consider all the
        potentials to see if the first character matches the second character.  If
        so, put one copy of the character into a \"matched\" list.  Sum up the matched
        list results\n\nPart 2: Calculate the pivot point, Append the first half of
        the list to the back half, get a list of the 2 \"potential\" characters (using
        the pivot value to get the second character), consider all the part 2 matches
        using the same algorithm above.\n\nRank 11410 on P1, and rank 9193 on P2.
        Not pushing for leaderbord as sleep is nice. https://github.com/hasteur/advent_of_code/blob/master/2017/puzzle1.py",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_dqm8qej",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yeah...
        I didn&amp;#39;t do any regex magic,  Doing regex magic has bit me in the
        ass a while back.&lt;/p&gt;\n\n&lt;p&gt;Part 1: Create a list of all the potential
        &amp;quot;pairs&amp;quot; of numbers, add the final &amp;quot;pair&amp;quot;
        to the list. Consider all the potentials to see if the first character matches
        the second character.  If so, put one copy of the character into a &amp;quot;matched&amp;quot;
        list.  Sum up the matched list results&lt;/p&gt;\n\n&lt;p&gt;Part 2: Calculate
        the pivot point, Append the first half of the list to the back half, get a
        list of the 2 &amp;quot;potential&amp;quot; characters (using the pivot value
        to get the second character), consider all the part 2 matches using the same
        algorithm above.&lt;/p&gt;\n\n&lt;p&gt;Rank 11410 on P1, and rank 9193 on
        P2. Not pushing for leaderbord as sleep is nice. &lt;a href=\"https://github.com/hasteur/advent_of_code/blob/master/2017/puzzle1.py\"&gt;https://github.com/hasteur/advent_of_code/blob/master/2017/puzzle1.py&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm8qej/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1512149757.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512149757.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqm8t5g", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_7gsrc2", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "C#\n\n        int Subject(string input)\n        {\n            var
        sum = new List&lt;int&gt;();\n\n            for (int i = 0; i &lt; input.Length;
        i++)\n            {\n                if (LookAhead(input, i, input.Length
        / 2) == input[i])\n                {\n                    sum.Add(int.Parse(input[i].ToString()));\n                }\n            }\n\n            return
        sum.Sum();\n        }\n\n        char LookAhead(string input, int index, int
        step)\n        {\n            return input[(index + step) % input.Length];\n        }",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_dqm8t5g",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C#&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    int
        Subject(string input)\n    {\n        var sum = new List&amp;lt;int&amp;gt;();\n\n        for
        (int i = 0; i &amp;lt; input.Length; i++)\n        {\n            if (LookAhead(input,
        i, input.Length / 2) == input[i])\n            {\n                sum.Add(int.Parse(input[i].ToString()));\n            }\n        }\n\n        return
        sum.Sum();\n    }\n\n    char LookAhead(string input, int index, int step)\n    {\n        return
        input[(index + step) % input.Length];\n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqm8t5g/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1512149829.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512149829.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqmarwl", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_7gsrc2", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Python 3 solutions(easy to read): https://github.com/target111/AoC2017
        :)\n", "awarders": [], "downs": 0, "author_flair_css_class": null, "name":
        "t1_dqmarwl", "collapsed": false, "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Python 3 solutions(easy to read): &lt;a href=\"https://github.com/target111/AoC2017\"&gt;https://github.com/target111/AoC2017&lt;/a&gt;
        :)&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished":
        null, "associated_award": null, "stickied": false, "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmarwl/",
        "num_reports": null, "locked": false, "report_reasons": null, "created": 1512151674.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512151674.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1512182108.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqmbg3h", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "suck_at_coding",
        "can_mod_post": false, "created_utc": 1512152311.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_a0uxm", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Learning go:\n\n    package main\n    \n    import (\n    \t\"fmt\"\n    \t\"strconv\"\n    \t\"container/ring\"\n    )\n    \n    func
        main() {\n    \tvar input = ``\n    \tday1part1(input)\n    \tday1part2(input)\n    }\n    \n    func
        day1part1(input string) {\n    \tlast := input[len(input)-1:]\n    \tvar total
        int\n    \tfor i := 0; i &lt; len(input)-1; i++ {\n    \t\tif input[i] ==
        input[i+1] {\n    \t\t\ttoAdd, _ := strconv.Atoi(string(input[i]))\n    \t\t\ttotal
        += toAdd\n    \t\t}\n    \t}\n    \tif string(input[0]) == last {\n    \t\ttoAdd,
        _ := strconv.Atoi(last)\n    \t\ttotal += toAdd\n    \t}\n    \n    \tfmt.Println(total)\n    }\n    \n    func
        day1part2(input string) {\n    \tvar total int\n    \tstep := int(len(input)
        / 2)\n    \tr := ring.New(len(input))\n    \n    \tfor i := 0; i &lt; r.Len();
        i++ {\n    \t\tv, _ := strconv.Atoi(string(input[i]))\n    \t\tr = r.Next()\n    \t\tr.Value
        = v\n    \t}\n    \n    \tfor i := 0; i &lt; len(input); i++ {\n    \t\tcur
        := r.Value.(int)\n    \t\tr = r.Move(step)\n    \t\tnext := r.Value.(int)\n    \t\tif
        cur == next {\n    \t\t\ttotal += cur\n    \t\t}\n    \t\tr = r.Move(-(step
        + 1))\n    \t}\n    \tfmt.Println(total)\n    }\n\nUpdate: Remembered there''s
        a way better way to do part 2:\n\n    func day1part2(input string) int {\n    \tvar
        total int\n    \tvar end = len(input)\n    \tstep := end / 2\n    \n    \tfor
        i := 0; i &lt; end; i++ {\n    \t\tc, _ := strconv.Atoi(string(input[i]))\n    \t\tn,
        _ := strconv.Atoi(string(input[(i + step) % end]))\n    \t\tif c == n {\n    \t\t\ttotal
        += c\n    \t\t}\n    \t}\n    \n    \treturn total\n    }", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Learning go:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package
        main\n\nimport (\n    &amp;quot;fmt&amp;quot;\n    &amp;quot;strconv&amp;quot;\n    &amp;quot;container/ring&amp;quot;\n)\n\nfunc
        main() {\n    var input = ``\n    day1part1(input)\n    day1part2(input)\n}\n\nfunc
        day1part1(input string) {\n    last := input[len(input)-1:]\n    var total
        int\n    for i := 0; i &amp;lt; len(input)-1; i++ {\n        if input[i] ==
        input[i+1] {\n            toAdd, _ := strconv.Atoi(string(input[i]))\n            total
        += toAdd\n        }\n    }\n    if string(input[0]) == last {\n        toAdd,
        _ := strconv.Atoi(last)\n        total += toAdd\n    }\n\n    fmt.Println(total)\n}\n\nfunc
        day1part2(input string) {\n    var total int\n    step := int(len(input) /
        2)\n    r := ring.New(len(input))\n\n    for i := 0; i &amp;lt; r.Len(); i++
        {\n        v, _ := strconv.Atoi(string(input[i]))\n        r = r.Next()\n        r.Value
        = v\n    }\n\n    for i := 0; i &amp;lt; len(input); i++ {\n        cur :=
        r.Value.(int)\n        r = r.Move(step)\n        next := r.Value.(int)\n        if
        cur == next {\n            total += cur\n        }\n        r = r.Move(-(step
        + 1))\n    }\n    fmt.Println(total)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Update:
        Remembered there&amp;#39;s a way better way to do part 2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func
        day1part2(input string) int {\n    var total int\n    var end = len(input)\n    step
        := end / 2\n\n    for i := 0; i &amp;lt; end; i++ {\n        c, _ := strconv.Atoi(string(input[i]))\n        n,
        _ := strconv.Atoi(string(input[(i + step) % end]))\n        if c == n {\n            total
        += c\n        }\n    }\n\n    return total\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": true, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmbg3h/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqmbg3h", "created":
        1512152311.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqmces1",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "alchzh",
        "can_mod_post": false, "created_utc": 1512153214.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_d8ahd", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "\nIn rust... forgot about `filter_map`\n\n    const CHALLENGE: &amp;''static
        str = include_str!(\"day1.txt\");\n\n    fn main() {\n        println!(\"{}\",
        day1(CHALLENGE, 1));\n        println!(\"{}\", day1(CHALLENGE, CHALLENGE.len()
        / 2));\n    }\n\n    fn day1(input_str: &amp;str, rotate: usize) -&gt; u32
        {\n        let rotated = input_str.chars().cycle().skip(rotate);\n        input_str.chars()\n            .zip(rotated)\n            .fold(0,
        |acc, (ic, rc)|\n                 if ic == rc {\n                    if let
        Some(n) = ic.to_digit(10) {\n                        acc + n\n                    }
        else { acc }\n                } else { acc }\n            )\n    }", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;In rust... forgot about &lt;code&gt;filter_map&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const
        CHALLENGE: &amp;amp;&amp;#39;static str = include_str!(&amp;quot;day1.txt&amp;quot;);\n\nfn
        main() {\n    println!(&amp;quot;{}&amp;quot;, day1(CHALLENGE, 1));\n    println!(&amp;quot;{}&amp;quot;,
        day1(CHALLENGE, CHALLENGE.len() / 2));\n}\n\nfn day1(input_str: &amp;amp;str,
        rotate: usize) -&amp;gt; u32 {\n    let rotated = input_str.chars().cycle().skip(rotate);\n    input_str.chars()\n        .zip(rotated)\n        .fold(0,
        |acc, (ic, rc)|\n             if ic == rc {\n                if let Some(n)
        = ic.to_digit(10) {\n                    acc + n\n                } else {
        acc }\n            } else { acc }\n        )\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmces1/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqmces1", "created":
        1512153214.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqmejhc",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "tvtas",
        "can_mod_post": false, "created_utc": 1512155213.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_13epnh", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Solution Day 1 in MATLAB:\n\n    fid = fopen(''input.txt'');\n    z = fread(fid)-48;\n    x
        = z(1:end-1); % remove EOL\n    \n    %Part I\n    sum(x(diff([x;x(1)])==0))  %solution
        Part I\n    \n    %Part II\n    L   = size(x,1);\n    \n    cnt = 0;\n    for
        i=1:size(x,1)/2\n       cmpdigit = mod(i + L/2,L);\n       if cmpdigit==0\n           cmpdigit=L;\n       end\n       if  x(cmpdigit)==x(i)\n           cnt=cnt+x(i);\n       end\n    end\n    \n    cnt*2
        %solution Part II", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Solution
        Day 1 in MATLAB:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fid = fopen(&amp;#39;input.txt&amp;#39;);\nz
        = fread(fid)-48;\nx = z(1:end-1); % remove EOL\n\n%Part I\nsum(x(diff([x;x(1)])==0))  %solution
        Part I\n\n%Part II\nL   = size(x,1);\n\ncnt = 0;\nfor i=1:size(x,1)/2\n   cmpdigit
        = mod(i + L/2,L);\n   if cmpdigit==0\n       cmpdigit=L;\n   end\n   if  x(cmpdigit)==x(i)\n       cnt=cnt+x(i);\n   end\nend\n\ncnt*2
        %solution Part II\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmejhc/", "subreddit_type":
        "public", "locked": false, "name": "t1_dqmejhc", "created": 1512155213.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_7gsrc2", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqmgsow", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "8483", "can_mod_post": false, "created_utc":
        1512157372.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_m68sl", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "**Node/Javascript**  \n\n**Same
        for both parts**  \n\n    var fs = require(\"fs\");\n    \n    var input_file
        = ''./aoc_01a.txt''\n    var input = fs.readFileSync(input_file, ''utf8'');\n    \n    function
        get_digit(n){\n        var digit = parseInt(input.substring(n, n+1));\n        return
        digit;\n    }\n\n**Part 1**  \n\n    var sum = 0;\n    for(var i = 0; i &lt;
        input.length - 1; i++){\n        var n = get_digit(i);\n        if(i == input.length
        - 2 &amp;&amp; n == get_digit(0)){\n            sum += n;\n        } else
        if (n == get_digit(i+1)){\n            sum += n;\n        }\n    }\n\n    console.log(sum);\n\n**Part
        2**  \n\n    var sum = 0;\n    var jump = input.length / 2;\n    \n    for(var
        i = 0; i &lt; input.length - 1; i++){\n        var n = get_digit(i);\n        if
        (n == get_digit(i + jump)){\n            sum += n * 2;\n        }\n    }\n\n    console.log(sum);",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Node/Javascript&lt;/strong&gt;  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Same
        for both parts&lt;/strong&gt;  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var fs
        = require(&amp;quot;fs&amp;quot;);\n\nvar input_file = &amp;#39;./aoc_01a.txt&amp;#39;\nvar
        input = fs.readFileSync(input_file, &amp;#39;utf8&amp;#39;);\n\nfunction get_digit(n){\n    var
        digit = parseInt(input.substring(n, n+1));\n    return digit;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Part
        1&lt;/strong&gt;  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var sum = 0;\nfor(var
        i = 0; i &amp;lt; input.length - 1; i++){\n    var n = get_digit(i);\n    if(i
        == input.length - 2 &amp;amp;&amp;amp; n == get_digit(0)){\n        sum +=
        n;\n    } else if (n == get_digit(i+1)){\n        sum += n;\n    }\n}\n\nconsole.log(sum);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Part
        2&lt;/strong&gt;  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var sum = 0;\nvar jump
        = input.length / 2;\n\nfor(var i = 0; i &amp;lt; input.length - 1; i++){\n    var
        n = get_digit(i);\n    if (n == get_digit(i + jump)){\n        sum += n *
        2;\n    }\n}\n\nconsole.log(sum);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmgsow/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqmgsow", "created":
        1512157372.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqmjq3g",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "sasashimi",
        "can_mod_post": false, "created_utc": 1512160233.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_qyedm", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "for this one jsfiddle is enough :)\n\nhttps://jsfiddle.net/jn0caojb/1/\n",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;for this one jsfiddle
        is enough :)&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://jsfiddle.net/jn0caojb/1/\"&gt;https://jsfiddle.net/jn0caojb/1/&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmjq3g/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqmjq3g", "created":
        1512160233.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqmkj5n",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "keyObjective",
        "can_mod_post": false, "created_utc": 1512161018.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_k8qssgn", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I''m learning Objective C :)\n\n    NSString* text = @\"1111\";\n    \n    NSInteger
        textLength = [text length];\n    NSInteger sum = 0;\n\n//part 1\n\n    for
        (int position=0; position &lt; textLength; position++) {\n        \n        unichar
        ch1 = [text characterAtIndex:position];\n        unichar ch2 = [text characterAtIndex:((position+1)
        % textLength)];\n        \n        NSLog(@\"ch1 = %d\", ch1);\n        NSLog(@\"ch2
        = %d\", ch2);\n        \n        NSInteger ch = ch1 - ''0''; // converts char
        to int and substracting 49 - from ASCII\n        NSInteger temp = ch2 - ''0'';
        // converts char to int and substracting 49 - from ASCII\n        NSLog(@\"ch
        = %li\", ch);\n        NSLog(@\"temp = %li\", temp);\n        \n       if
        (ch == temp) {\n           sum = sum + ch;\n        }\n    }\n\n        NSLog(@\"sum
        = %li\", sum);\n\n//part 2\n  \n  \n    for (NSInteger position = 0; position
        &lt; textLength; position++) {\n        \n        NSInteger circlePosition
        =  (position+(textLength/2)) % textLength;\n        \n        unichar ch1
        = [text characterAtIndex:position];\n        unichar ch2 = [text characterAtIndex:circlePosition];\n       \n        \n        NSInteger
        ch = ch1 - ''0'';\n        NSInteger temp = ch2 - ''0'';\n        NSLog(@\"ch
        = %li\", ch);\n        NSLog(@\"temp = %li\", temp);\n        \n        if
        (ch == temp) {\n            sum = sum + ch;\n        }\n    }\n\n    NSLog(@\"sum
        = %li\", sum);", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m
        learning Objective C :)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;NSString* text
        = @&amp;quot;1111&amp;quot;;\n\nNSInteger textLength = [text length];\nNSInteger
        sum = 0;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;//part 1&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for
        (int position=0; position &amp;lt; textLength; position++) {\n\n    unichar
        ch1 = [text characterAtIndex:position];\n    unichar ch2 = [text characterAtIndex:((position+1)
        % textLength)];\n\n    NSLog(@&amp;quot;ch1 = %d&amp;quot;, ch1);\n    NSLog(@&amp;quot;ch2
        = %d&amp;quot;, ch2);\n\n    NSInteger ch = ch1 - &amp;#39;0&amp;#39;; //
        converts char to int and substracting 49 - from ASCII\n    NSInteger temp
        = ch2 - &amp;#39;0&amp;#39;; // converts char to int and substracting 49 -
        from ASCII\n    NSLog(@&amp;quot;ch = %li&amp;quot;, ch);\n    NSLog(@&amp;quot;temp
        = %li&amp;quot;, temp);\n\n   if (ch == temp) {\n       sum = sum + ch;\n    }\n}\n\n    NSLog(@&amp;quot;sum
        = %li&amp;quot;, sum);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;//part 2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for
        (NSInteger position = 0; position &amp;lt; textLength; position++) {\n\n    NSInteger
        circlePosition =  (position+(textLength/2)) % textLength;\n\n    unichar ch1
        = [text characterAtIndex:position];\n    unichar ch2 = [text characterAtIndex:circlePosition];\n\n\n    NSInteger
        ch = ch1 - &amp;#39;0&amp;#39;;\n    NSInteger temp = ch2 - &amp;#39;0&amp;#39;;\n    NSLog(@&amp;quot;ch
        = %li&amp;quot;, ch);\n    NSLog(@&amp;quot;temp = %li&amp;quot;, temp);\n\n    if
        (ch == temp) {\n        sum = sum + ch;\n    }\n}\n\nNSLog(@&amp;quot;sum
        = %li&amp;quot;, sum);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmkj5n/", "subreddit_type":
        "public", "locked": false, "name": "t1_dqmkj5n", "created": 1512161018.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_7gsrc2", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqmltc1", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Cowsareinme", "can_mod_post": false, "created_utc":
        1512162283.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_7jg57", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "My Python3 solution. Tried
        to keep it readable while still being able to fit it in a tweet. Did I succeed?\n\n    i
        = str(input(''input: ''))\n    length = len(i)\n    c = sum1 = sum2 = 0\n    while
        c &lt; length:\n        if i[c] == i[(c+1)%length]:\n            sum1 += int(i[c])\n        if
        i[c] == i[int((c+(length/2))%length)]:\n            sum2 += int(i[c])\n        c
        += 1\n    print(\"Sum Part 1: \"+str(sum1)+\"\\nSum Part 2: \"+str(sum2))\n\nhttps://github.com/JFitzMan/AdventofCode2017/blob/master/Day1.py",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My Python3 solution.
        Tried to keep it readable while still being able to fit it in a tweet. Did
        I succeed?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;i = str(input(&amp;#39;input:
        &amp;#39;))\nlength = len(i)\nc = sum1 = sum2 = 0\nwhile c &amp;lt; length:\n    if
        i[c] == i[(c+1)%length]:\n        sum1 += int(i[c])\n    if i[c] == i[int((c+(length/2))%length)]:\n        sum2
        += int(i[c])\n    c += 1\nprint(&amp;quot;Sum Part 1: &amp;quot;+str(sum1)+&amp;quot;\\nSum
        Part 2: &amp;quot;+str(sum2))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/JFitzMan/AdventofCode2017/blob/master/Day1.py\"&gt;https://github.com/JFitzMan/AdventofCode2017/blob/master/Day1.py&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmltc1/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqmltc1", "created":
        1512162283.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqmmklp",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "LandOfTheLostPass",
        "can_mod_post": false, "created_utc": 1512163039.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_bmq99", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Powershell solution:\n\n    Param (\n        [parameter(position=0, mandatory=$true,
        ValueFromPipeline=$true)]\n        [Alias(''in'')]\n        [string]$InputString,\n        [switch]$Part2\n    )\n\n    $In
        = $InputString.ToCharArray()\n    $Out = 0\n    if(-not $Part2) {\n        if($In[0]
        -eq $In[-1]) { $Out += [int][string]$In[0] }\n        for($i = 1; $i -lt $In.Length;
        $i++) {\n            if($In[$i] -eq $In[$i - 1]) { $Out += [int][string]$In[$i]
        }\n        }\n    } else {\n        $Dist = $In.Length / 2\n        for($i
        = 0; $i -lt $In.Length; $i++) {\n            if($i + $Dist -lt $In.Length)
        {\n                if($In[$i] -eq $In[$i + $Dist]) { $Out += [int][string]$In[$i]
        }\n            } else {\n                $Wrap = $Dist - ($In.Length - $i)\n                if($In[$i]
        -eq $In[$Wrap]) { $Out += [int][string]$In[$i] }\n            }\n        }\n    }\n    Write-Output
        $Out", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Powershell
        solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Param (\n    [parameter(position=0,
        mandatory=$true, ValueFromPipeline=$true)]\n    [Alias(&amp;#39;in&amp;#39;)]\n    [string]$InputString,\n    [switch]$Part2\n)\n\n$In
        = $InputString.ToCharArray()\n$Out = 0\nif(-not $Part2) {\n    if($In[0] -eq
        $In[-1]) { $Out += [int][string]$In[0] }\n    for($i = 1; $i -lt $In.Length;
        $i++) {\n        if($In[$i] -eq $In[$i - 1]) { $Out += [int][string]$In[$i]
        }\n    }\n} else {\n    $Dist = $In.Length / 2\n    for($i = 0; $i -lt $In.Length;
        $i++) {\n        if($i + $Dist -lt $In.Length) {\n            if($In[$i] -eq
        $In[$i + $Dist]) { $Out += [int][string]$In[$i] }\n        } else {\n            $Wrap
        = $Dist - ($In.Length - $i)\n            if($In[$i] -eq $In[$Wrap]) { $Out
        += [int][string]$In[$i] }\n        }\n    }\n}\nWrite-Output $Out\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmmklp/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqmmklp", "created":
        1512163039.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqmnfxq",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "StevoTVR",
        "can_mod_post": false, "created_utc": 1512163907.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_380rl", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "NodeJS\n\n    const fs = require(''fs'');\n\n    fs.readFile(__dirname +
        ''/input.txt'', ''utf8'', (err, data) =&gt; {\n        data = data.trim();\n        var
        sum = 0;\n        for (var i = 0; i &lt; data.length; i++) {\n            var
        next = (i + (data.length / 2)) % data.length;\n            if (data.charAt(i)
        === data.charAt(next)) {\n                sum += parseInt(data.charAt(i));\n            }\n        }\n\n        console.log(sum);\n    });\n",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;NodeJS&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const
        fs = require(&amp;#39;fs&amp;#39;);\n\nfs.readFile(__dirname + &amp;#39;/input.txt&amp;#39;,
        &amp;#39;utf8&amp;#39;, (err, data) =&amp;gt; {\n    data = data.trim();\n    var
        sum = 0;\n    for (var i = 0; i &amp;lt; data.length; i++) {\n        var
        next = (i + (data.length / 2)) % data.length;\n        if (data.charAt(i)
        === data.charAt(next)) {\n            sum += parseInt(data.charAt(i));\n        }\n    }\n\n    console.log(sum);\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmnfxq/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqmnfxq", "created":
        1512163907.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqmo8ua",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "4rgento",
        "can_mod_post": false, "created_utc": 1512164720.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_50gp3", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Total Idris Solution :)\n\n    module Main\n    \n    %default total\n    \n    parseInput
        : String -&gt; List Int\n    parseInput = \n      filter (\\x =&gt; (x&gt;=0)
        &amp;&amp; (x&lt;=9)) . map (\\x =&gt; ord x - ord ''0'') . unpack\n    \n    nathalf
        : Nat -&gt; Nat\n    nathalf Z = Z\n    nathalf (S Z) = Z\n    nathalf (S
        (S n)) = S (nathalf n)\n    \n    f : Int -&gt; Int -&gt; Int\n    f a b =
        if a == b then b else 0\n    \n    solution : Nat -&gt; List Int -&gt; Maybe
        Int\n    solution n [] = Nothing\n    solution n (x::xs) = Just $\n      sum
        $ zipWith f\n        (x::xs)\n        (take (length (x::xs)) (drop n (cycle
        (x::xs))))\n    \n    main : IO ()\n    main = do\n      inputResult &lt;-  (parseInput
        &lt;$&gt;) &lt;$&gt; (readFile \"input.txt\")\n      case inputResult of\n        Right
        input =&gt; do\n            let len = length input\n            putStrLn $
        \"Input Length 1: \" ++ (show len)\n            putStr \"Solution Part 1:
        \"\n            printLn (solution (S Z) input)\n            putStr \"Solution
        Part 2: \"\n            printLn (solution (nathalf len) input)\n        Left
        err =&gt; putStrLn \"Errors were made\"\n", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Total Idris Solution :)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;module
        Main\n\n%default total\n\nparseInput : String -&amp;gt; List Int\nparseInput
        = \n  filter (\\x =&amp;gt; (x&amp;gt;=0) &amp;amp;&amp;amp; (x&amp;lt;=9))
        . map (\\x =&amp;gt; ord x - ord &amp;#39;0&amp;#39;) . unpack\n\nnathalf
        : Nat -&amp;gt; Nat\nnathalf Z = Z\nnathalf (S Z) = Z\nnathalf (S (S n)) =
        S (nathalf n)\n\nf : Int -&amp;gt; Int -&amp;gt; Int\nf a b = if a == b then
        b else 0\n\nsolution : Nat -&amp;gt; List Int -&amp;gt; Maybe Int\nsolution
        n [] = Nothing\nsolution n (x::xs) = Just $\n  sum $ zipWith f\n    (x::xs)\n    (take
        (length (x::xs)) (drop n (cycle (x::xs))))\n\nmain : IO ()\nmain = do\n  inputResult
        &amp;lt;-  (parseInput &amp;lt;$&amp;gt;) &amp;lt;$&amp;gt; (readFile &amp;quot;input.txt&amp;quot;)\n  case
        inputResult of\n    Right input =&amp;gt; do\n        let len = length input\n        putStrLn
        $ &amp;quot;Input Length 1: &amp;quot; ++ (show len)\n        putStr &amp;quot;Solution
        Part 1: &amp;quot;\n        printLn (solution (S Z) input)\n        putStr
        &amp;quot;Solution Part 2: &amp;quot;\n        printLn (solution (nathalf
        len) input)\n    Left err =&amp;gt; putStrLn &amp;quot;Errors were made&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmo8ua/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqmo8ua", "created":
        1512164720.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqmon78",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "TheBossYeti",
        "can_mod_post": false, "created_utc": 1512165115.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_16alzk", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "T-SQL\n\n    DECLARE @Input VARCHAR(MAX) = ''428812''\n    \n    DECLARE
        @Length INT = LEN(@Input);\n    \n    -- Create a numbers table to do the
        string splitting\n    WITH N\n         AS (SELECT N = ROW_NUMBER() OVER(ORDER
        BY name)\n             FROM sys.columns)\n         SELECT S1 = SUM(IIF(N1
        = N2, N1, 0))\n              , S2 = SUM(IIF(N1 = N3, N1, 0))\n         FROM
        N\n              CROSS APPLY (SELECT N1 = SUBSTRING(@Input, N, 1)\n                                ,
        N2 = SUBSTRING(@Input, N%@Length+1, 1)\n                                ,
        N3 = SUBSTRING(@Input, (N-1+(@Length/2))%@Length+1, 1)) v\n         WHERE
        N &lt;= @Length;\n    ", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;T-SQL&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;DECLARE
        @Input VARCHAR(MAX) = &amp;#39;428812&amp;#39;\n\nDECLARE @Length INT = LEN(@Input);\n\n--
        Create a numbers table to do the string splitting\nWITH N\n     AS (SELECT
        N = ROW_NUMBER() OVER(ORDER BY name)\n         FROM sys.columns)\n     SELECT
        S1 = SUM(IIF(N1 = N2, N1, 0))\n          , S2 = SUM(IIF(N1 = N3, N1, 0))\n     FROM
        N\n          CROSS APPLY (SELECT N1 = SUBSTRING(@Input, N, 1)\n                            ,
        N2 = SUBSTRING(@Input, N%@Length+1, 1)\n                            , N3 =
        SUBSTRING(@Input, (N-1+(@Length/2))%@Length+1, 1)) v\n     WHERE N &amp;lt;=
        @Length;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmon78/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqmon78", "created":
        1512165115.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqmp74a",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "rikkus",
        "can_mod_post": false, "created_utc": 1512165684.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_a4su9", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Elixir, with one function to do the dirty work:\n\n    def captcha(digits,
        offset) do\n      count = Enum.count(digits)\n      digits\n      |&gt; Enum.with_index()\n      |&gt;
        Enum.filter(fn({n, index}) -&gt; n == Enum.at(digits, rem(offset + index +
        1, count)) end)\n      |&gt; Enum.map(&amp;elem(&amp;1, 0))\n      |&gt; Enum.sum\n    end\n\nCalled
        from my test module using these helpers:\n\n    def split(x) when is_integer(x),
        do: x |&gt; Integer.digits\n    def split(x) when is_binary(x), do: x |&gt;
        String.graphemes |&gt; Enum.map(&amp;String.to_integer/1)\n\n    def captcha_test(input,
        expected, :one) do\n      assert AOC.captcha(split(input), 0) == expected\n    end\n\n    def
        captcha_test(input, expected, :two) do\n      input = split(input)\n      assert
        AOC.captcha(input, div(Enum.count(input), 2) - 1) == expected\n    end\n\n[github
        link](https://github.com/rikkus/adventofcode2017/tree/master/1)", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Elixir, with one function to do the dirty
        work:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def captcha(digits, offset) do\n  count
        = Enum.count(digits)\n  digits\n  |&amp;gt; Enum.with_index()\n  |&amp;gt;
        Enum.filter(fn({n, index}) -&amp;gt; n == Enum.at(digits, rem(offset + index
        + 1, count)) end)\n  |&amp;gt; Enum.map(&amp;amp;elem(&amp;amp;1, 0))\n  |&amp;gt;
        Enum.sum\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Called from my test module
        using these helpers:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def split(x) when
        is_integer(x), do: x |&amp;gt; Integer.digits\ndef split(x) when is_binary(x),
        do: x |&amp;gt; String.graphemes |&amp;gt; Enum.map(&amp;amp;String.to_integer/1)\n\ndef
        captcha_test(input, expected, :one) do\n  assert AOC.captcha(split(input),
        0) == expected\nend\n\ndef captcha_test(input, expected, :two) do\n  input
        = split(input)\n  assert AOC.captcha(input, div(Enum.count(input), 2) - 1)
        == expected\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/rikkus/adventofcode2017/tree/master/1\"&gt;github
        link&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmp74a/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqmp74a", "created":
        1512165684.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqmrkzk",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "SirJohnSmith",
        "can_mod_post": false, "created_utc": 1512168270.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_bhlng", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "    from functools import reduce\n\n    def sumHalfConsequentNumbers(number):\n\t    return
        reduce(lambda x, y: x+y, [int(i[0]) for i in filter((lambda x: x[0]==x[1]),[[str(number)[i],
        str(number)[(i+len(str(number))//2)%len(str(number))]] for i in range(len(str(number)))])],0)\n    print(sumHalfConsequentNumbers(input()))  \n\nGlorious
        functional programming in Python", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;from functools import reduce\n\ndef
        sumHalfConsequentNumbers(number):\n    return reduce(lambda x, y: x+y, [int(i[0])
        for i in filter((lambda x: x[0]==x[1]),[[str(number)[i], str(number)[(i+len(str(number))//2)%len(str(number))]]
        for i in range(len(str(number)))])],0)\nprint(sumHalfConsequentNumbers(input()))  \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Glorious
        functional programming in Python&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmrkzk/", "subreddit_type":
        "public", "locked": false, "name": "t1_dqmrkzk", "created": 1512168270.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_7gsrc2", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqmt7eb", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "TheBrightman", "can_mod_post": false,
        "created_utc": 1512170087.0, "send_replies": true, "parent_id": "t3_7gsrc2",
        "score": 1, "author_fullname": "t2_jz95u", "report_reasons": null, "approved_by":
        null, "all_awardings": [], "collapsed": false, "body": "Had anyone tried this
        in powerpoint yet? ", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Had
        anyone tried this in powerpoint yet? &lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmt7eb/", "subreddit_type":
        "public", "locked": false, "name": "t1_dqmt7eb", "created": 1512170087.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_7gsrc2", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "removal_reason":
        null, "link_id": "t3_7gsrc2", "author_flair_template_id": null, "likes": null,
        "replies": "", "user_reports": [], "saved": false, "id": "dqn8fx3", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "[deleted]", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_dqmt7eb", "score": 1, "approved_by": null, "mod_note":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "... powerpoint
        ?! xD how should that work :x", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_dqn8fx3", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;... powerpoint ?! xD how should that work
        :x&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished":
        null, "associated_award": null, "stickied": false, "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqn8fx3/",
        "num_reports": null, "locked": false, "report_reasons": null, "created": 1512189947.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512189947.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1512176505.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqmtv49", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "roggiabr",
        "can_mod_post": false, "created_utc": 1512170855.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_llhdd", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Java**\n\n* First Part\n\n    \n        public class CaptchaSolver {\n\n        public
        static void main(String[] args) throws IOException {\n\n            try(Scanner
        scanner = new Scanner(new BufferedReader(new FileReader(\"./src/com/rroggia/day1/puzzleInput\"))))
        {\n             \n                String puzzleInput = scanner.next();\n\n                int
        firstValue;\n                int secondValue;\n                int sum = 0;\n\n                for
        (int i = 0; i &lt; puzzleInput.length(); i++) {\n                    firstValue
        = Character.getNumericValue(puzzleInput.charAt(i));\n                    secondValue
        = Character.getNumericValue(puzzleInput.charAt(getNextIndex(puzzleInput, i)));\n\n                    if
        (firstValue == secondValue) {\n                        sum += firstValue;\n                    }\n                }\n\n                System.out.println(sum);\n\n            }
        \n        }\n\n        private static int getNextIndex(String string, int
        currentIndex) {\n            return string.length() - 1 == currentIndex ?
        0 : currentIndex + 1;\n        }\n\n         }\n\n* Second Part\n\n    \n        public
        class CaptchaSolver {\n\n        public static void main(String[] args) throws
        IOException {\n\n            try(Scanner scanner = new Scanner(new BufferedReader(new
        FileReader(\"./src/com/rroggia/day1/puzzleInput\")))) {\n                String
        puzzleInput = scanner.next();\n\n                int firstValue;\n                int
        secondValue;\n                int sum = 0;\n\n                for (int i =
        0; i &lt; puzzleInput.length(); i++) {\n                    firstValue = Character.getNumericValue(puzzleInput.charAt(i));\n                    secondValue
        = Character.getNumericValue(puzzleInput.charAt(getNextIndex(puzzleInput, i)));\n\n                    if
        (firstValue == secondValue) {\n                        sum += firstValue;\n                    }\n                }\n\n                System.out.println(sum);\n\n            }
        \n        }\n\n        private static int getNextIndex(String string, int
        currentIndex) {\n            int index = (string.length() / 2) + currentIndex;\n            return
        (index &gt;= string.length()) ? index - string.length() : index;\n        }\n\n         }\n",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;First
        Part&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public class CaptchaSolver {\n\npublic
        static void main(String[] args) throws IOException {\n\n    try(Scanner scanner
        = new Scanner(new BufferedReader(new FileReader(&amp;quot;./src/com/rroggia/day1/puzzleInput&amp;quot;))))
        {\n\n        String puzzleInput = scanner.next();\n\n        int firstValue;\n        int
        secondValue;\n        int sum = 0;\n\n        for (int i = 0; i &amp;lt; puzzleInput.length();
        i++) {\n            firstValue = Character.getNumericValue(puzzleInput.charAt(i));\n            secondValue
        = Character.getNumericValue(puzzleInput.charAt(getNextIndex(puzzleInput, i)));\n\n            if
        (firstValue == secondValue) {\n                sum += firstValue;\n            }\n        }\n\n        System.out.println(sum);\n\n    }
        \n}\n\nprivate static int getNextIndex(String string, int currentIndex) {\n    return
        string.length() - 1 == currentIndex ? 0 : currentIndex + 1;\n}\n\n }\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Second
        Part&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public class CaptchaSolver {\n\npublic
        static void main(String[] args) throws IOException {\n\n    try(Scanner scanner
        = new Scanner(new BufferedReader(new FileReader(&amp;quot;./src/com/rroggia/day1/puzzleInput&amp;quot;))))
        {\n        String puzzleInput = scanner.next();\n\n        int firstValue;\n        int
        secondValue;\n        int sum = 0;\n\n        for (int i = 0; i &amp;lt; puzzleInput.length();
        i++) {\n            firstValue = Character.getNumericValue(puzzleInput.charAt(i));\n            secondValue
        = Character.getNumericValue(puzzleInput.charAt(getNextIndex(puzzleInput, i)));\n\n            if
        (firstValue == secondValue) {\n                sum += firstValue;\n            }\n        }\n\n        System.out.println(sum);\n\n    }
        \n}\n\nprivate static int getNextIndex(String string, int currentIndex) {\n    int
        index = (string.length() / 2) + currentIndex;\n    return (index &amp;gt;=
        string.length()) ? index - string.length() : index;\n}\n\n }\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmtv49/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqmtv49", "created":
        1512170855.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqmwnfs",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Vitessii",
        "can_mod_post": false, "created_utc": 1512174219.0, "send_replies": true,
        "parent_id": "t1_dqmtv49", "score": 2, "author_fullname": "t2_hfptv6", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Since Scanner implements closeable, you can do try-with-resources rather
        than needing a finally block:\n\n    try (scanner = new Scanner(...)) {\n        //
        your code\n    }", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Since
        Scanner implements closeable, you can do try-with-resources rather than needing
        a finally block:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;try (scanner = new Scanner(...))
        {\n    // your code\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmwnfs/", "subreddit_type":
        "public", "locked": false, "name": "t1_dqmwnfs", "created": 1512174219.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_7gsrc2", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqmxb8o", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "roggiabr", "can_mod_post": false, "created_utc":
        1512175057.0, "send_replies": true, "parent_id": "t1_dqmwnfs", "score": 1,
        "author_fullname": "t2_llhdd", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "Yeah, that''s true and it
        makes the code way cleaner.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yeah,
        that&amp;#39;s true and it makes the code way cleaner.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmxb8o/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqmxb8o", "created":
        1512175057.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqmursa", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_7gsrc2", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "My solution for Part 2 in c++ :\n\n\n    int sum(std::string
        seq){\n        int sum=0;\n        int len = seq.length();\n        for(int
        i = 0; i &lt; (len/2); i++){\n            if(seq[i] == seq[i+(len/2)]){\n                sum
        += (seq[i] - ''0'');\n            }\n        }\n       return sum*2;\n    }    \n\nI
        am a newbie in C++ so any any criticism/advice is welcome.", "awarders": [],
        "downs": 0, "author_flair_css_class": null, "name": "t1_dqmursa", "collapsed":
        false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My
        solution for Part 2 in c++ :&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;int sum(std::string
        seq){\n    int sum=0;\n    int len = seq.length();\n    for(int i = 0; i &amp;lt;
        (len/2); i++){\n        if(seq[i] == seq[i+(len/2)]){\n            sum +=
        (seq[i] - &amp;#39;0&amp;#39;);\n        }\n    }\n   return sum*2;\n}    \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I
        am a newbie in C++ so any any criticism/advice is welcome.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmursa/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1512171932.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512171932.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqmx4ln",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Vitessii",
        "can_mod_post": false, "created_utc": 1512174821.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_hfptv6", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Java streams:\n\n    char[] chars = input.toCharArray();\n    int sum1 =
        IntStream.range(0, chars.length)\n            .filter(i -&gt; chars[i] ==
        chars[(i + 1) % chars.length])\n            .map(i -&gt; (int) chars[i]-''0'')\n            .sum();\n    int
        sum2 = IntStream.range(0, chars.length)\n            .filter(i -&gt; chars[i]
        == chars[(i + chars.length/2) % chars.length])\n            .map(i -&gt; (int)
        chars[i]-''0'')\n            .sum();\n", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Java streams:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;char[]
        chars = input.toCharArray();\nint sum1 = IntStream.range(0, chars.length)\n        .filter(i
        -&amp;gt; chars[i] == chars[(i + 1) % chars.length])\n        .map(i -&amp;gt;
        (int) chars[i]-&amp;#39;0&amp;#39;)\n        .sum();\nint sum2 = IntStream.range(0,
        chars.length)\n        .filter(i -&amp;gt; chars[i] == chars[(i + chars.length/2)
        % chars.length])\n        .map(i -&amp;gt; (int) chars[i]-&amp;#39;0&amp;#39;)\n        .sum();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqmx4ln/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqmx4ln", "created":
        1512174821.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1512180455.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqn1aic", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "SomeAnonElsewhere",
        "can_mod_post": false, "created_utc": 1512180187.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_6fvkjcs", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "C++\n    \n    void dayOne() {\n    \tfstream myfile;\n    \tmyfile.open(\"DayOneInput.txt\");\n    \tstring
        digitstr;\n    \tmyfile &gt;&gt; digitstr;\n    \tmyfile.close();\n    \n    \tint
        digits[3000];\n    \tint i = 0, sumOne = 0, sumTwo = 0;\n    \tint step =
        digitstr.length() / 2;\n    \n    \tfor each(char c in digitstr) \n    \t{\n    \t\tdigits[i]
        = c - ''0'';\n    \t\tcout &lt;&lt; digits[i];\n    \n    \t\t//Part 1\n    \t\tif
        (i &gt; 0 &amp;&amp; digits[i] == digits[i-1] || i == digitstr.length() -
        1 &amp;&amp; digits[0] == digits[i])\n    \t\t{\n    \t\t\tsumOne += digits[i];\n    \t\t}\n    \n    \t\t//Part
        2\n    \t\tif (i &gt; step &amp;&amp; digits[i] == digits[i-step]) \n    \t\t{\n    \t\t\tsumTwo
        += 2*digits[i];\n    \t\t}\n    \n    \t\ti++;\n    \t}\n    \n    \tcout
        &lt;&lt; \"\\nThe first sum is: \" &lt;&lt; sumOne &lt;&lt; \"\\n\";\n    \tcout
        &lt;&lt; \"\\nThe second sum is: \" &lt;&lt; sumTwo &lt;&lt; \"\\n\";\n    }\n\nI
        don''t usually use c++ so any tips/suggestions for improvement will be great.
        ", "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C++&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;void
        dayOne() {\n    fstream myfile;\n    myfile.open(&amp;quot;DayOneInput.txt&amp;quot;);\n    string
        digitstr;\n    myfile &amp;gt;&amp;gt; digitstr;\n    myfile.close();\n\n    int
        digits[3000];\n    int i = 0, sumOne = 0, sumTwo = 0;\n    int step = digitstr.length()
        / 2;\n\n    for each(char c in digitstr) \n    {\n        digits[i] = c -
        &amp;#39;0&amp;#39;;\n        cout &amp;lt;&amp;lt; digits[i];\n\n        //Part
        1\n        if (i &amp;gt; 0 &amp;amp;&amp;amp; digits[i] == digits[i-1] ||
        i == digitstr.length() - 1 &amp;amp;&amp;amp; digits[0] == digits[i])\n        {\n            sumOne
        += digits[i];\n        }\n\n        //Part 2\n        if (i &amp;gt; step
        &amp;amp;&amp;amp; digits[i] == digits[i-step]) \n        {\n            sumTwo
        += 2*digits[i];\n        }\n\n        i++;\n    }\n\n    cout &amp;lt;&amp;lt;
        &amp;quot;\\nThe first sum is: &amp;quot; &amp;lt;&amp;lt; sumOne &amp;lt;&amp;lt;
        &amp;quot;\\n&amp;quot;;\n    cout &amp;lt;&amp;lt; &amp;quot;\\nThe second
        sum is: &amp;quot; &amp;lt;&amp;lt; sumTwo &amp;lt;&amp;lt; &amp;quot;\\n&amp;quot;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I
        don&amp;#39;t usually use c++ so any tips/suggestions for improvement will
        be great. &lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqn1aic/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqn1aic", "created":
        1512180187.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqn45w7",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "fgsguedes",
        "can_mod_post": false, "created_utc": 1512183904.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_80p9h", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My functional approach in Kotlin:\n\n    fun solveCaptchaPart1(input: String)
        = input.foldIndexed(0) { index, sum, char -&gt;\n      val nextChar = input[(index
        + 1) % input.length]\n      \n      if (char == nextChar) Character.getNumericValue(char)
        + sum\n      else sum\n    }\n    \n    fun solveCaptchaPart2(input: String):
        Int {\n      val step = input.length / 2\n      \n      return input.foldIndexed(0)
        { index, sum, char -&gt;\n        val nextChar = input[(index + step) % input.length]\n        \n        if
        (char == nextChar) Character.getNumericValue(char) + sum\n        else sum\n      }\n    }\n\n",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My functional approach
        in Kotlin:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fun solveCaptchaPart1(input:
        String) = input.foldIndexed(0) { index, sum, char -&amp;gt;\n  val nextChar
        = input[(index + 1) % input.length]\n\n  if (char == nextChar) Character.getNumericValue(char)
        + sum\n  else sum\n}\n\nfun solveCaptchaPart2(input: String): Int {\n  val
        step = input.length / 2\n\n  return input.foldIndexed(0) { index, sum, char
        -&amp;gt;\n    val nextChar = input[(index + step) % input.length]\n\n    if
        (char == nextChar) Character.getNumericValue(char) + sum\n    else sum\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqn45w7/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqn45w7", "created":
        1512183904.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqn4cpa",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "andrewstewart",
        "can_mod_post": false, "created_utc": 1512184158.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_4z8qg", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Mine, in Rust:\n\n\n    fn main() {\n        let input: Vec&lt;u32&gt; =
        INPUT.\n            chars().\n            map(|c| c.to_digit(10).unwrap()).\n            collect();\n\n        println!(\"1
        -&gt; {}\", process(&amp;input, 1));\n        println!(\"2 -&gt; {}\", process(&amp;input,
        input.len() / 2));\n    }\n\n    fn process(input: &amp;[u32], offset: usize)
        -&gt; u32 {\n        input.iter()\n            .zip(input.iter().cycle().skip(offset))\n            .filter_map(|(a,
        b)| if a == b { Some(a) } else { None })\n            .sum()\n    }\n\n`INPUT`
        is defined as a `&amp;''static str`, since I didn''t want to bother implementing
        reading from `STDIN` or a file.", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Mine, in Rust:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fn
        main() {\n    let input: Vec&amp;lt;u32&amp;gt; = INPUT.\n        chars().\n        map(|c|
        c.to_digit(10).unwrap()).\n        collect();\n\n    println!(&amp;quot;1
        -&amp;gt; {}&amp;quot;, process(&amp;amp;input, 1));\n    println!(&amp;quot;2
        -&amp;gt; {}&amp;quot;, process(&amp;amp;input, input.len() / 2));\n}\n\nfn
        process(input: &amp;amp;[u32], offset: usize) -&amp;gt; u32 {\n    input.iter()\n        .zip(input.iter().cycle().skip(offset))\n        .filter_map(|(a,
        b)| if a == b { Some(a) } else { None })\n        .sum()\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;INPUT&lt;/code&gt;
        is defined as a &lt;code&gt;&amp;amp;&amp;#39;static str&lt;/code&gt;, since
        I didn&amp;#39;t want to bother implementing reading from &lt;code&gt;STDIN&lt;/code&gt;
        or a file.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqn4cpa/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqn4cpa", "created":
        1512184158.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqn4guo",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "McBooley",
        "can_mod_post": false, "created_utc": 1512184316.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_beuib4h", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My version is probably a bit sloppy but here it is in C#\n\nPart one:\n\n            string
        path = AppDomain.CurrentDomain.BaseDirectory;\n            string captcha
        = File.ReadAllText(Path.GetFullPath(Path.Combine(path, @\"..\\..\\captcha.txt\")));\n            int
        sum = 0;\n            int repeats = 0;\n            int result = 0;\n\n            for
        (int i = 0; i &lt; captcha.Length - 1; i++)\n            {\n                if
        (captcha[i] == captcha[i + 1])\n                {\n                    repeats++;\n                    if
        (repeats == 1)\n                    {\n                        sum = (int)Char.GetNumericValue((captcha[i]));\n                    }\n                    else
        if (repeats &gt; 1)\n                    {\n                        sum =
        repeats * (int)Char.GetNumericValue((captcha[i]));\n                    }\n                }\n                else\n                {\n                    if
        (repeats &gt;= 1)\n                    {\n                        result +=
        sum;\n                    }\n\n                    repeats = 0;\n                }\n            }\n            if
        (captcha[0] == captcha[captcha.Length - 1])\n            {\n                result
        += (int)Char.GetNumericValue((captcha[0]));\n            }\n            return
        result;\n\nPart Two:\n            \n            string path = AppDomain.CurrentDomain.BaseDirectory;\n            string
        captcha = File.ReadAllText(Path.GetFullPath(Path.Combine(path, @\"..\\..\\captcha.txt\")));\n            int
        result = 0;\n\n            for (int i = 0; i &lt; captcha.Length - (captcha.Length
        / 2); i++)\n            {\n                if (captcha[i] == captcha[i + (captcha.Length
        / 2)])\n                {\n                    result += 2 *(int)Char.GetNumericValue((captcha[i]));\n                }\n            }\n            return
        result;", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My
        version is probably a bit sloppy but here it is in C#&lt;/p&gt;\n\n&lt;p&gt;Part
        one:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;        string path = AppDomain.CurrentDomain.BaseDirectory;\n        string
        captcha = File.ReadAllText(Path.GetFullPath(Path.Combine(path, @&amp;quot;..\\..\\captcha.txt&amp;quot;)));\n        int
        sum = 0;\n        int repeats = 0;\n        int result = 0;\n\n        for
        (int i = 0; i &amp;lt; captcha.Length - 1; i++)\n        {\n            if
        (captcha[i] == captcha[i + 1])\n            {\n                repeats++;\n                if
        (repeats == 1)\n                {\n                    sum = (int)Char.GetNumericValue((captcha[i]));\n                }\n                else
        if (repeats &amp;gt; 1)\n                {\n                    sum = repeats
        * (int)Char.GetNumericValue((captcha[i]));\n                }\n            }\n            else\n            {\n                if
        (repeats &amp;gt;= 1)\n                {\n                    result += sum;\n                }\n\n                repeats
        = 0;\n            }\n        }\n        if (captcha[0] == captcha[captcha.Length
        - 1])\n        {\n            result += (int)Char.GetNumericValue((captcha[0]));\n        }\n        return
        result;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part Two:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;        string
        path = AppDomain.CurrentDomain.BaseDirectory;\n        string captcha = File.ReadAllText(Path.GetFullPath(Path.Combine(path,
        @&amp;quot;..\\..\\captcha.txt&amp;quot;)));\n        int result = 0;\n\n        for
        (int i = 0; i &amp;lt; captcha.Length - (captcha.Length / 2); i++)\n        {\n            if
        (captcha[i] == captcha[i + (captcha.Length / 2)])\n            {\n                result
        += 2 *(int)Char.GetNumericValue((captcha[i]));\n            }\n        }\n        return
        result;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqn4guo/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqn4guo", "created":
        1512184316.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqn5sjb",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Billquisha",
        "can_mod_post": false, "created_utc": 1512186091.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_4q984", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Trying out some Elixir! Day one done, bah-bam:\n\n    defmodule CaptchaThingy
        do\n\n      @doc \"\"\"\n      Does some calculation stuff\n      \"\"\"\n      @spec
        calculate(number :: integer) :: integer\n      def calculate(number) do\n        digits
        = Integer.digits(number)\n        digits ++ [Enum.at(digits, 0)]\n        |&gt;
        add_consecutive_matching_digits(Enum.at(digits, 1), 0)\n      end\n\n      defp
        add_consecutive_matching_digits([], _next_digit, sum) do\n        sum\n      end\n\n      defp
        add_consecutive_matching_digits([head | tail], next_digit, sum) when head
        == next_digit do\n        add_consecutive_matching_digits(tail, Enum.at(tail,
        1), sum + head)\n      end\n\n      defp add_consecutive_matching_digits([head
        | tail], next_digit, sum) when head != next_digit do\n        add_consecutive_matching_digits(tail,
        Enum.at(tail, 1), sum)\n      end\n    end\n\nDefinitely not the prettiest,
        but I learned more about Elixir.", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Trying out some Elixir! Day one done, bah-bam:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;defmodule
        CaptchaThingy do\n\n  @doc &amp;quot;&amp;quot;&amp;quot;\n  Does some calculation
        stuff\n  &amp;quot;&amp;quot;&amp;quot;\n  @spec calculate(number :: integer)
        :: integer\n  def calculate(number) do\n    digits = Integer.digits(number)\n    digits
        ++ [Enum.at(digits, 0)]\n    |&amp;gt; add_consecutive_matching_digits(Enum.at(digits,
        1), 0)\n  end\n\n  defp add_consecutive_matching_digits([], _next_digit, sum)
        do\n    sum\n  end\n\n  defp add_consecutive_matching_digits([head | tail],
        next_digit, sum) when head == next_digit do\n    add_consecutive_matching_digits(tail,
        Enum.at(tail, 1), sum + head)\n  end\n\n  defp add_consecutive_matching_digits([head
        | tail], next_digit, sum) when head != next_digit do\n    add_consecutive_matching_digits(tail,
        Enum.at(tail, 1), sum)\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Definitely
        not the prettiest, but I learned more about Elixir.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqn5sjb/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqn5sjb", "created":
        1512186091.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1512249896.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqn63xn", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ForgedBanana",
        "can_mod_post": false, "created_utc": 1512186540.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_spiui", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My code for part 1, in C++:\n\n    // main.cpp\n    // compile with: g++
        -std=c++17 main.cpp\n    // the input has to be in a file named numbers.txt\n    //
        pass any argument for part 2\n    \n    #include &lt;iostream&gt;\n    #include
        &lt;string&gt;\n    #include &lt;fstream&gt;\n    \n    int ctoi(char c)\n    {\n    \treturn
        c - ''0'';\n    }\n    \n    int main(int argc, char** argv)\n    {\n    \tstd::ifstream
        file(\"numbers.txt\", std::fstream::binary | std::fstream::ate);\n    \tif
        (!file.is_open())\n    \t\treturn 1;\n    \tint length = file.tellg();\n    \tfile.seekg(0);\n    \t\n    \tstd::string
        numbers{};\n    \tnumbers.resize(length);\n    \tfile.read(numbers.data(),
        length);\n    \t\n    \tint offset = (argc == 2) ? (length / 2) : 1;\n    \tint
        sum = 0;\n    \tfor (int i = 0; i &lt; numbers.size(); i++) {\n    \t\tif
        (int j = ((i + offset) % length); numbers[i] == numbers[j])\n    \t\t\tsum
        += ctoi(numbers[i]);\n    \t}\n    \tstd::cout &lt;&lt; \"sum: \" &lt;&lt;
        sum &lt;&lt; ''\\n'';\n    }", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My
        code for part 1, in C++:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// main.cpp\n//
        compile with: g++ -std=c++17 main.cpp\n// the input has to be in a file named
        numbers.txt\n// pass any argument for part 2\n\n#include &amp;lt;iostream&amp;gt;\n#include
        &amp;lt;string&amp;gt;\n#include &amp;lt;fstream&amp;gt;\n\nint ctoi(char
        c)\n{\n    return c - &amp;#39;0&amp;#39;;\n}\n\nint main(int argc, char**
        argv)\n{\n    std::ifstream file(&amp;quot;numbers.txt&amp;quot;, std::fstream::binary
        | std::fstream::ate);\n    if (!file.is_open())\n        return 1;\n    int
        length = file.tellg();\n    file.seekg(0);\n\n    std::string numbers{};\n    numbers.resize(length);\n    file.read(numbers.data(),
        length);\n\n    int offset = (argc == 2) ? (length / 2) : 1;\n    int sum
        = 0;\n    for (int i = 0; i &amp;lt; numbers.size(); i++) {\n        if (int
        j = ((i + offset) % length); numbers[i] == numbers[j])\n            sum +=
        ctoi(numbers[i]);\n    }\n    std::cout &amp;lt;&amp;lt; &amp;quot;sum: &amp;quot;
        &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; &amp;#39;\\n&amp;#39;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqn63xn/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqn63xn", "created":
        1512186540.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1512189307.0, "mod_reason_by": null,
        "banned_by": null, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqn7hlu", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_7gsrc2", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Nope, im creating a vector out of the massive number
        xD :p  \nFirst post on reddit for me, I hope, everything works.. xD  \n&amp;nbsp;  \n   &amp;nbsp;&amp;nbsp;**C++**\n\n    #include
        &lt;iostream&gt;\n    #include &lt;string&gt;\n    #include &lt;iomanip&gt;\n    #include
        &lt;vector&gt;\n    using namespace std;\n          \n     int main() {\n\t     int
        sum = 0;\n\t     string inpuz = \"[MY NUMBER]\";\n\t     int num1, num2 =
        0;\n          \n\t     vector&lt;char&gt; invec(inpuz.begin(), inpuz.end());\n          \n\t     cout
        &lt;&lt; \"Puzzle input: \" &lt;&lt; endl &lt;&lt; endl;\n\t     for (char
        c : invec) {\n\t\t     num1 = c - ''0'';\n\t\t     cout &lt;&lt; num1;\n\t     }\n\t     cout
        &lt;&lt; endl &lt;&lt; \"Lengh of converted Vector: \" &lt;&lt; invec.size()
        &lt;&lt; endl &lt;&lt; endl;\n                           //Number 1\n\t     for
        (int i = 0; i &lt;= (inpuz.size()-1); i++) {\n\t\t     char one = invec[i];\n\t\t     num1
        = one - ''0'';\n\t\t     char two = invec[(i+1)%invec.size()];\n\t\t     num2
        = two - ''0'';\n\t\t     if (num1 == num2) sum += num1;\n\t     }\n\t     cout
        &lt;&lt; \"Sum for exercise 1 is!!!: \" &lt;&lt; sum &lt;&lt; endl;\n                          //Number2\n\t     sum
        = 0;\n\t     int steps = invec.size() / 2;\n\t     for (int i = 0; i &lt;=
        (inpuz.size() - 1); i++) {\n\t\t     char one = invec[i];\n\t\t     num1 =
        one - ''0'';\n\t\t     char two = invec[(i + steps) % invec.size()];\n\t\t     num2
        = two - ''0'';\n\t\t     if (num1 == num2) sum += num1;\n\t     }\n\t     cout
        &lt;&lt; endl &lt;&lt; \"Sum for exercise 2 is!!!: \" &lt;&lt; sum;\n          \n\t     cout
        &lt;&lt; endl &lt;&lt; endl &lt;&lt; endl;\n\t     system(\"pause\");\n     }\n\n",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_dqn7hlu",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nope,
        im creating a vector out of the massive number xD :p&lt;br/&gt;\nFirst post
        on reddit for me, I hope, everything works.. xD&lt;br/&gt;\n&amp;nbsp;&lt;br/&gt;\n   &amp;nbsp;&amp;nbsp;&lt;strong&gt;C++&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include
        &amp;lt;iostream&amp;gt;\n#include &amp;lt;string&amp;gt;\n#include &amp;lt;iomanip&amp;gt;\n#include
        &amp;lt;vector&amp;gt;\nusing namespace std;\n\n int main() {\n     int sum
        = 0;\n     string inpuz = &amp;quot;[MY NUMBER]&amp;quot;;\n     int num1,
        num2 = 0;\n\n     vector&amp;lt;char&amp;gt; invec(inpuz.begin(), inpuz.end());\n\n     cout
        &amp;lt;&amp;lt; &amp;quot;Puzzle input: &amp;quot; &amp;lt;&amp;lt; endl
        &amp;lt;&amp;lt; endl;\n     for (char c : invec) {\n         num1 = c - &amp;#39;0&amp;#39;;\n         cout
        &amp;lt;&amp;lt; num1;\n     }\n     cout &amp;lt;&amp;lt; endl &amp;lt;&amp;lt;
        &amp;quot;Lengh of converted Vector: &amp;quot; &amp;lt;&amp;lt; invec.size()
        &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; endl;\n                       //Number
        1\n     for (int i = 0; i &amp;lt;= (inpuz.size()-1); i++) {\n         char
        one = invec[i];\n         num1 = one - &amp;#39;0&amp;#39;;\n         char
        two = invec[(i+1)%invec.size()];\n         num2 = two - &amp;#39;0&amp;#39;;\n         if
        (num1 == num2) sum += num1;\n     }\n     cout &amp;lt;&amp;lt; &amp;quot;Sum
        for exercise 1 is!!!: &amp;quot; &amp;lt;&amp;lt; sum &amp;lt;&amp;lt; endl;\n                      //Number2\n     sum
        = 0;\n     int steps = invec.size() / 2;\n     for (int i = 0; i &amp;lt;=
        (inpuz.size() - 1); i++) {\n         char one = invec[i];\n         num1 =
        one - &amp;#39;0&amp;#39;;\n         char two = invec[(i + steps) % invec.size()];\n         num2
        = two - &amp;#39;0&amp;#39;;\n         if (num1 == num2) sum += num1;\n     }\n     cout
        &amp;lt;&amp;lt; endl &amp;lt;&amp;lt; &amp;quot;Sum for exercise 2 is!!!:
        &amp;quot; &amp;lt;&amp;lt; sum;\n\n     cout &amp;lt;&amp;lt; endl &amp;lt;&amp;lt;
        endl &amp;lt;&amp;lt; endl;\n     system(&amp;quot;pause&amp;quot;);\n }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqn7hlu/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1512188528.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512188528.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqn8utz",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "MaxDeviant",
        "can_mod_post": false, "created_utc": 1512190614.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_5fe79", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Here''s my [solution in F#](https://github.com/maxdeviant/advent-of-code/blob/master/2017/src/01/InverseCaptcha.fsx).\n\nStill
        pretty green with the language, so I figured this would be a good opportunity
        to practice more.", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s
        my &lt;a href=\"https://github.com/maxdeviant/advent-of-code/blob/master/2017/src/01/InverseCaptcha.fsx\"&gt;solution
        in F#&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Still pretty green with the language,
        so I figured this would be a good opportunity to practice more.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqn8utz/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqn8utz", "created":
        1512190614.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqnkfwg",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "peterpepo",
        "can_mod_post": false, "created_utc": 1512218360.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_11035k", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Python**\n\n[Full solution](https://github.com/peterpepo/AdventOfCode2017/tree/master/day_01)\n\n    from
        puzzle_commons.puzzle_commons import read_puzzle_input\n    import os\n    \n    \n    def
        solve():\n        \"\"\"Advent Of Code 2017 - Day 01 Solution.\n        :return:
        tuple(part_a_result[int], part_b_result[int])\n        \"\"\"\n    \n        def
        circular_buffer_position(length, offset, order):\n            return (offset
        + order) % length\n    \n        # Read first line from the input file\n        try:\n            puzzle_input
        = read_puzzle_input(os.path.dirname(os.path.abspath(__file__)), \"day_01_input.txt\")[0]\n        except
        IndexError:\n            return -1, -1\n    \n        # Part-A\n        part_a_result
        = sum(int(puzzle_input[i]) for i in range(len(puzzle_input)) if\n                            puzzle_input[i]
        == puzzle_input[circular_buffer_position(len(puzzle_input), i, 1)])\n    \n        #
        Part-B\n        part_b_result = sum(int(puzzle_input[i]) for i in range(len(puzzle_input))
        if\n                            puzzle_input[i] == puzzle_input[\n                                circular_buffer_position(len(puzzle_input),
        i, len(puzzle_input) // 2)])\n    \n    return part_a_result, part_b_result\n\nI''m
        joining the party bit late as I wasn''t on my computer with git setup yesterday
        (I only post my code, once it''s on my github).", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/peterpepo/AdventOfCode2017/tree/master/day_01\"&gt;Full
        solution&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from puzzle_commons.puzzle_commons
        import read_puzzle_input\nimport os\n\n\ndef solve():\n    &amp;quot;&amp;quot;&amp;quot;Advent
        Of Code 2017 - Day 01 Solution.\n    :return: tuple(part_a_result[int], part_b_result[int])\n    &amp;quot;&amp;quot;&amp;quot;\n\n    def
        circular_buffer_position(length, offset, order):\n        return (offset +
        order) % length\n\n    # Read first line from the input file\n    try:\n        puzzle_input
        = read_puzzle_input(os.path.dirname(os.path.abspath(__file__)), &amp;quot;day_01_input.txt&amp;quot;)[0]\n    except
        IndexError:\n        return -1, -1\n\n    # Part-A\n    part_a_result = sum(int(puzzle_input[i])
        for i in range(len(puzzle_input)) if\n                        puzzle_input[i]
        == puzzle_input[circular_buffer_position(len(puzzle_input), i, 1)])\n\n    #
        Part-B\n    part_b_result = sum(int(puzzle_input[i]) for i in range(len(puzzle_input))
        if\n                        puzzle_input[i] == puzzle_input[\n                            circular_buffer_position(len(puzzle_input),
        i, len(puzzle_input) // 2)])\n\nreturn part_a_result, part_b_result\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&amp;#39;m
        joining the party bit late as I wasn&amp;#39;t on my computer with git setup
        yesterday (I only post my code, once it&amp;#39;s on my github).&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqnkfwg/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqnkfwg", "created":
        1512218360.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqnmp63", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_7gsrc2", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "**Clojure**\n\n    (defn part-1 [input]\n      (-&gt;&gt;
        (take (inc (count (cycle input))))\n           (partition-by identity)\n           (filter
        #(&gt; (count %) 1))\n           (mapcat drop-last)\n           (map #(Character/digit
        % 10))\n           (reduce +)))\n\n    (defn part-2 [input]\n      (-&gt;&gt;
        input\n           (partition (/ (count input) 2))\n           (#(interleave
        (first %) (last %)))\n           (partition 2)\n           (filter #(= (first
        %) (last %)))\n           flatten\n           (map #(Character/digit % 10))\n           (reduce
        +)))", "awarders": [], "downs": 0, "author_flair_css_class": null, "name":
        "t1_dqnmp63", "collapsed": false, "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Clojure&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(defn
        part-1 [input]\n  (-&amp;gt;&amp;gt; (take (inc (count (cycle input))))\n       (partition-by
        identity)\n       (filter #(&amp;gt; (count %) 1))\n       (mapcat drop-last)\n       (map
        #(Character/digit % 10))\n       (reduce +)))\n\n(defn part-2 [input]\n  (-&amp;gt;&amp;gt;
        input\n       (partition (/ (count input) 2))\n       (#(interleave (first
        %) (last %)))\n       (partition 2)\n       (filter #(= (first %) (last %)))\n       flatten\n       (map
        #(Character/digit % 10))\n       (reduce +)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqnmp63/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1512223105.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512223105.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqnqn7e",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "TheShallowOne",
        "can_mod_post": false, "created_utc": 1512229225.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_mp81b", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Obligatory Synacor solution: https://pastebin.com/bcFeqDzm\n", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Obligatory Synacor solution: &lt;a href=\"https://pastebin.com/bcFeqDzm\"&gt;https://pastebin.com/bcFeqDzm&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqnqn7e/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqnqn7e", "created":
        1512229225.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1512236269.0, "mod_reason_by": null,
        "banned_by": null, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqntmz7", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_7gsrc2", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "**Java**\n\nhttps://github.com/imoutopantsu/adventofcode-2017/blob/master/day_one_part_one.java\n\nhttps://github.com/imoutopantsu/adventofcode-2017/blob/master/day_one_part_two.java\n\n**Excel**\n\nhttps://github.com/imoutopantsu/adventofcode-2017/blob/master/day%201%20-%20Excel.xlsx",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_dqntmz7",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/imoutopantsu/adventofcode-2017/blob/master/day_one_part_one.java\"&gt;https://github.com/imoutopantsu/adventofcode-2017/blob/master/day_one_part_one.java&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/imoutopantsu/adventofcode-2017/blob/master/day_one_part_two.java\"&gt;https://github.com/imoutopantsu/adventofcode-2017/blob/master/day_one_part_two.java&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Excel&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/imoutopantsu/adventofcode-2017/blob/master/day%201%20-%20Excel.xlsx\"&gt;https://github.com/imoutopantsu/adventofcode-2017/blob/master/day%201%20-%20Excel.xlsx&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqntmz7/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1512233020.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512233020.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqnvcnm",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "lovela47",
        "can_mod_post": false, "created_utc": 1512235086.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_1udc", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Solution in Scheme ([scsh](https://scsh.net)):\n\n    (define captcha-input
        \"91212129\") ; Replace with actual input\n\n    (define (gather-matches s)\n      ;;
        String -&gt; List\n      (let ((in-port (make-string-input-port s)) (count
        0) (head #f) (vals ''()))\n        (let loop ((cur (read-char in-port)) (next
        (peek-char in-port)) (count count) (vals vals))\n          (if (eof-object?
        next)\n              (if (char=? cur head)\n                  (cons cur vals)\n                  vals)\n              (cond
        ((= count 0)\n                     (begin\n                       (set! head
        cur)\n                       (loop cur next (+ 1 count) vals)))\n                     ((char=?
        cur next)\n                     (loop (read-char in-port) (peek-char in-port)
        (+ 1 count) (cons cur vals)))\n                    (else (loop (read-char
        in-port) (peek-char in-port) (+ 1 count) vals)))))))\n\n    (define (main
        prog+args)\n      (let* ((matches (gather-matches captcha-input))\n             (matches*
        (map (lambda (c) (string-&gt;number (string c))) matches))\n             (sum
        (apply + matches*)))\n        (begin\n          (format #t \"MATCHES*: ~A~%\"
        matches*)\n          (format #t \"SUM: ~A~%\" sum))))\n", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Solution in Scheme (&lt;a href=\"https://scsh.net\"&gt;scsh&lt;/a&gt;):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(define
        captcha-input &amp;quot;91212129&amp;quot;) ; Replace with actual input\n\n(define
        (gather-matches s)\n  ;; String -&amp;gt; List\n  (let ((in-port (make-string-input-port
        s)) (count 0) (head #f) (vals &amp;#39;()))\n    (let loop ((cur (read-char
        in-port)) (next (peek-char in-port)) (count count) (vals vals))\n      (if
        (eof-object? next)\n          (if (char=? cur head)\n              (cons cur
        vals)\n              vals)\n          (cond ((= count 0)\n                 (begin\n                   (set!
        head cur)\n                   (loop cur next (+ 1 count) vals)))\n                 ((char=?
        cur next)\n                 (loop (read-char in-port) (peek-char in-port)
        (+ 1 count) (cons cur vals)))\n                (else (loop (read-char in-port)
        (peek-char in-port) (+ 1 count) vals)))))))\n\n(define (main prog+args)\n  (let*
        ((matches (gather-matches captcha-input))\n         (matches* (map (lambda
        (c) (string-&amp;gt;number (string c))) matches))\n         (sum (apply +
        matches*)))\n    (begin\n      (format #t &amp;quot;MATCHES*: ~A~%&amp;quot;
        matches*)\n      (format #t &amp;quot;SUM: ~A~%&amp;quot; sum))))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqnvcnm/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqnvcnm", "created":
        1512235086.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqo0jox",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "bottomlesscoffeecup",
        "can_mod_post": false, "created_utc": 1512241001.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_ynccw", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Late to the game here but this is my python attempt: \n\n    def non_human_captcha(puzzle_input):\n        sum_array
        = []\n        for x in range(len(puzzle_input)):\n            next_val = puzzle_input[(x
        + 1) % len(puzzle_input)]\n            if puzzle_input[x] == next_val:\n                sum_array.append(puzzle_input[x])\n        return
        sum(sum_array)\n    \n    def non_human_captcha_2(puzzle_input):\n        length_puzzle_input
        = len(puzzle_input) * 2\n        comp_val = int(len(puzzle_input) / 2)\n        sum_array
        = []\n    \n        for x in range(int(length_puzzle_input/2)):\n            current_val
        = puzzle_input[x % len(puzzle_input)]\n            next_val = puzzle_input[(x+comp_val)
        % len(puzzle_input)]\n            if current_val == next_val:\n                sum_array.append(current_val)\n        return
        sum(sum_array)\n    ", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Late
        to the game here but this is my python attempt: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        non_human_captcha(puzzle_input):\n    sum_array = []\n    for x in range(len(puzzle_input)):\n        next_val
        = puzzle_input[(x + 1) % len(puzzle_input)]\n        if puzzle_input[x] ==
        next_val:\n            sum_array.append(puzzle_input[x])\n    return sum(sum_array)\n\ndef
        non_human_captcha_2(puzzle_input):\n    length_puzzle_input = len(puzzle_input)
        * 2\n    comp_val = int(len(puzzle_input) / 2)\n    sum_array = []\n\n    for
        x in range(int(length_puzzle_input/2)):\n        current_val = puzzle_input[x
        % len(puzzle_input)]\n        next_val = puzzle_input[(x+comp_val) % len(puzzle_input)]\n        if
        current_val == next_val:\n            sum_array.append(current_val)\n    return
        sum(sum_array)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqo0jox/", "subreddit_type":
        "public", "locked": false, "name": "t1_dqo0jox", "created": 1512241001.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_7gsrc2", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqo2kpr", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "dgJenkins", "can_mod_post": false, "created_utc":
        1512243247.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_exlqy", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "[COBOL Solutions!] (https://github.com/alexchro93/AdventOfCode/tree/master/2017/COBOL/Day_1)  Still
        new to the language, so any tips would be appreciated.", "awarders": [], "top_awarded_type":
        null, "author_flair_css_class": null, "author_patreon_flair": false, "downs":
        0, "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/alexchro93/AdventOfCode/tree/master/2017/COBOL/Day_1\"&gt;COBOL
        Solutions!&lt;/a&gt;  Still new to the language, so any tips would be appreciated.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqo2kpr/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqo2kpr", "created":
        1512243247.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqoa5ju",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ewilderj",
        "can_mod_post": false, "created_utc": 1512252350.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_jcyha0n", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Clojure\n\n    (def c (map #(- (int %) 48) (first (str/split-lines (slurp
        \"puzzle.txt\")))))\n\n    (defn solution [i o]\n      (reduce + (map first
        (filter #(apply = %) (partition 2 (interleave i (drop o (cycle i))))))))\n\n    (println
        \"part1 \" (solution c 1))\n    (println \"part2 \" (solution c (/ (count
        c) 2)))\n", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Clojure&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(def
        c (map #(- (int %) 48) (first (str/split-lines (slurp &amp;quot;puzzle.txt&amp;quot;)))))\n\n(defn
        solution [i o]\n  (reduce + (map first (filter #(apply = %) (partition 2 (interleave
        i (drop o (cycle i))))))))\n\n(println &amp;quot;part1 &amp;quot; (solution
        c 1))\n(println &amp;quot;part2 &amp;quot; (solution c (/ (count c) 2)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqoa5ju/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqoa5ju", "created":
        1512252350.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqoafnq",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "APLtooter",
        "can_mod_post": false, "created_utc": 1512252700.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_4vdei2", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "APL [GNU]\n\n    AHCTPAC\u2190{+/\u234e\u00a8(\u2375=\u237a\u233d\u2375)/\u2375}\n    \u235d
        INPUT is a character array of numeric digits\n    1 AHCTPAC INPUT                 \u235d
        Part 1\n    (.5\u00d7\u2374INPUT) AHCTPAC INPUT       \u235d Part 2\n", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;APL [GNU]&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;AHCTPAC\u2190{+/\u234e\u00a8(\u2375=\u237a\u233d\u2375)/\u2375}\n\u235d
        INPUT is a character array of numeric digits\n1 AHCTPAC INPUT                 \u235d
        Part 1\n(.5\u00d7\u2374INPUT) AHCTPAC INPUT       \u235d Part 2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqoafnq/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqoafnq", "created":
        1512252700.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqpei0i",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "QuadDrummer",
        "can_mod_post": false, "created_utc": 1512318522.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_cjqx4", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I''m trying out Julia for this year, so all of this code is really bad.  I''d
        love any pointers if anyone else is hopping on the Julia train!\n\n    input
        = readstring(\"input_1.txt\")\n    input = strip(input, ''\\n'')\n    \n    #
        Part 1\n    sum_1 = 0\n    for i = 1:length(input)-1\n        first = input[i]\n        second
        = input[i+1]\n        if first == second\n            sum_1 = sum_1 + parse(Int64,first)\n        end\n    end\n    \n    if
        input[1] == input[end]\n        sum_1 = sum_1 + parse(Int64,input[1])\n    end\n    \n    sum_1\n    \n    #
        Part 2\n    sum_2 = 0\n    disp = convert(Int64,length(input)/2)\n    for
        i = 1:length(input)\n        first = input[i]\n        if i+disp &gt; length(input)\n            second
        = input[(i+disp-length(input))]\n        else\n            second = input[(i+disp)]\n        end\n        if
        first == second\n            sum_2 = sum_2 + parse(Int64,first)\n        end\n    end\n    \n    sum_2\n",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m trying out
        Julia for this year, so all of this code is really bad.  I&amp;#39;d love
        any pointers if anyone else is hopping on the Julia train!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;input
        = readstring(&amp;quot;input_1.txt&amp;quot;)\ninput = strip(input, &amp;#39;\\n&amp;#39;)\n\n#
        Part 1\nsum_1 = 0\nfor i = 1:length(input)-1\n    first = input[i]\n    second
        = input[i+1]\n    if first == second\n        sum_1 = sum_1 + parse(Int64,first)\n    end\nend\n\nif
        input[1] == input[end]\n    sum_1 = sum_1 + parse(Int64,input[1])\nend\n\nsum_1\n\n#
        Part 2\nsum_2 = 0\ndisp = convert(Int64,length(input)/2)\nfor i = 1:length(input)\n    first
        = input[i]\n    if i+disp &amp;gt; length(input)\n        second = input[(i+disp-length(input))]\n    else\n        second
        = input[(i+disp)]\n    end\n    if first == second\n        sum_2 = sum_2
        + parse(Int64,first)\n    end\nend\n\nsum_2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqpei0i/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqpei0i", "created":
        1512318522.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqr6z85",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "__Abigail__",
        "can_mod_post": false, "created_utc": 1512405977.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_13exmr", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "## Perl\n\n    #!/opt/perl/bin/perl\n\n    use 5.010;\n\n    use strict;\n    use
        warnings;\n    no  warnings ''syntax'';\n\n    use List::Util ''sum'';\n\n    my
        $input = `cat input`;\n    chomp $input;\n\n    #\n    # Part 1\n    #\n    my
        $str1 = $input . substr $input, 0, 1;\n\n    say sum $str1 =~ /(.)(?=\\1)/g;\n\n    #\n    #
        Part 2\n    #\n    my $str2 = $input;\n    my $skip = length ($input) / 2
        - 1;\n\n    no warnings ''uninitialized'';\n    say 2 * sum $str2 =~ /(.)(?=.{$skip}\\1)/g;\n\n    __END__\n",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;h2&gt;Perl&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/opt/perl/bin/perl\n\nuse
        5.010;\n\nuse strict;\nuse warnings;\nno  warnings &amp;#39;syntax&amp;#39;;\n\nuse
        List::Util &amp;#39;sum&amp;#39;;\n\nmy $input = `cat input`;\nchomp $input;\n\n#\n#
        Part 1\n#\nmy $str1 = $input . substr $input, 0, 1;\n\nsay sum $str1 =~ /(.)(?=\\1)/g;\n\n#\n#
        Part 2\n#\nmy $str2 = $input;\nmy $skip = length ($input) / 2 - 1;\n\nno warnings
        &amp;#39;uninitialized&amp;#39;;\nsay 2 * sum $str2 =~ /(.)(?=.{$skip}\\1)/g;\n\n__END__\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqr6z85/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqr6z85", "created":
        1512405977.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqrgjld", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_7gsrc2", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "My simple answer in Python. Feedback welcome!\n\n\tdef
        calc_sum_of_repeating_digits(digits, look_ahead):\n\t\ts = 0\n\t\tl = len(digits)\n\t\t\n\t\tfor
        i, link in enumerate(digits):\t\t\n\t\t\tnext = digits[(i + look_ahead) %
        l]\n\t\t\t\n\t\t\tif link == next:\n\t\t\t\ts += link\n\t\t\n\t\treturn s",
        "awarders": [], "downs": 0, "author_flair_css_class": null, "name": "t1_dqrgjld",
        "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My
        simple answer in Python. Feedback welcome!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        calc_sum_of_repeating_digits(digits, look_ahead):\n    s = 0\n    l = len(digits)\n\n    for
        i, link in enumerate(digits):       \n        next = digits[(i + look_ahead)
        % l]\n\n        if link == next:\n            s += link\n\n    return s\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqrgjld/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1512415289.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512415289.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqs1lsx",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "erik88lrl",
        "can_mod_post": false, "created_utc": 1512437200.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_8pfror5", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Game Maker\nwhile (finished = false){\n//check the string\n\nfor (var i =
        1; i != string_length(Numbers) + 1; i++;)\n   {\n        \n\n        //get
        char in string\n\tget_char = string_char_at(Numbers,i);\n\t//store and convert
        to int\n\tds_list_add(list, real(get_char));\t\n   }\n\nfor (var I = 0; I
        != string_length(Numbers); I++;){\n\tlistSize = string_length(Numbers);\n\tlistLoop
        = listSize - 1;\n\t\n\tb = I;\n\tc = I+1;\n\t\n\tcurretNumber = list[|b];\n\t//curret
        number\n\tnextNumber = list[|c];\n\t//next number\n\t\n\tif(list[|b] == list[|c]){\n\t//if
        curret number = next number or curret number = previous number\n\tsum = sum
        + list[|b];\n\t//Store curret number\n\t} \n\t\n\tif(I == (string_length(Numbers)-1)
        &amp;&amp; list[|0] == list[|listLoop]){\n\tsum = sum + list[|0]; \n\t}\n}\nfinished
        = true;\n\n}", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Game
        Maker\nwhile (finished = false){\n//check the string&lt;/p&gt;\n\n&lt;p&gt;for
        (var i = 1; i != string_length(Numbers) + 1; i++;)\n   {&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    //get
        char in string\nget_char = string_char_at(Numbers,i);\n//store and convert
        to int\nds_list_add(list, real(get_char));  \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n\n&lt;p&gt;for
        (var I = 0; I != string_length(Numbers); I++;){\n    listSize = string_length(Numbers);\n    listLoop
        = listSize - 1;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;b = I;\nc = I+1;\n\ncurretNumber
        = list[|b];\n//curret number\nnextNumber = list[|c];\n//next number\n\nif(list[|b]
        == list[|c]){\n//if curret number = next number or curret number = previous
        number\nsum = sum + list[|b];\n//Store curret number\n} \n\nif(I == (string_length(Numbers)-1)
        &amp;amp;&amp;amp; list[|0] == list[|listLoop]){\nsum = sum + list[|0]; \n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}\nfinished
        = true;&lt;/p&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqs1lsx/", "subreddit_type":
        "public", "locked": false, "name": "t1_dqs1lsx", "created": 1512437200.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_7gsrc2", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "removal_reason":
        null, "link_id": "t3_7gsrc2", "author_flair_template_id": null, "likes": null,
        "replies": "", "user_reports": [], "saved": false, "id": "dqvh60w", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "[deleted]", "can_mod_post": false, "send_replies":
        true, "parent_id": "t3_7gsrc2", "score": 1, "approved_by": null, "mod_note":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "Simpe JS.
        Just remembered it already started\n\n    function compute() {\n    \tvar
        inputStr = document.getElementById(\"entry\").value;\n      var inputArray
        = inputStr.split('''').map( (x) =&gt; {return parseInt(x);});\n      var acceptedDigits
        = [];\n      for (var i = 1; i &lt; inputArray.length; i++) {\n      \tif
        (inputArray[i-1] === inputArray[i])\n        \tacceptedDigits.push(inputArray[i-1]);\n      }\n      if
        (inputArray[0] === inputArray[inputArray.length-1])\n        \tacceptedDigits.push(inputArray[0]);\n    \tdocument.getElementById(\"digits\").textContent
        = acceptedDigits.join(\",\");\n      document.getElementById(\"result\").textContent
        = acceptedDigits.reduce((x, y) =&gt; { return x + y; });\n    }\n    \n    function
        compute2() {\n    \tvar inputStr = document.getElementById(\"entry\").value;\n      var
        inputArray = inputStr.split('''').map( (x) =&gt; {return parseInt(x);});\n      var
        middleArray = inputArray.length / 2;\n      var acceptedDigits = [];\n      for
        (var i = 0; i &lt; inputArray.length; i++) {\n      \tvar offset = middleArray
        + i;\n      \tif (offset &gt;= inputArray.length)\n        \toffset -= inputArray.length;\n      \tif
        (inputArray[i] === inputArray[offset])\n        \tacceptedDigits.push(inputArray[i]);\n      }\n    \tdocument.getElementById(\"digits\").textContent
        = acceptedDigits.join(\",\");\n      document.getElementById(\"result\").textContent
        = acceptedDigits.reduce((x, y) =&gt; { return x + y; });\n    }    ", "awarders":
        [], "downs": 0, "author_flair_css_class": null, "name": "t1_dqvh60w", "collapsed":
        false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Simpe
        JS. Just remembered it already started&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function
        compute() {\n    var inputStr = document.getElementById(&amp;quot;entry&amp;quot;).value;\n  var
        inputArray = inputStr.split(&amp;#39;&amp;#39;).map( (x) =&amp;gt; {return
        parseInt(x);});\n  var acceptedDigits = [];\n  for (var i = 1; i &amp;lt;
        inputArray.length; i++) {\n    if (inputArray[i-1] === inputArray[i])\n        acceptedDigits.push(inputArray[i-1]);\n  }\n  if
        (inputArray[0] === inputArray[inputArray.length-1])\n        acceptedDigits.push(inputArray[0]);\n    document.getElementById(&amp;quot;digits&amp;quot;).textContent
        = acceptedDigits.join(&amp;quot;,&amp;quot;);\n  document.getElementById(&amp;quot;result&amp;quot;).textContent
        = acceptedDigits.reduce((x, y) =&amp;gt; { return x + y; });\n}\n\nfunction
        compute2() {\n    var inputStr = document.getElementById(&amp;quot;entry&amp;quot;).value;\n  var
        inputArray = inputStr.split(&amp;#39;&amp;#39;).map( (x) =&amp;gt; {return
        parseInt(x);});\n  var middleArray = inputArray.length / 2;\n  var acceptedDigits
        = [];\n  for (var i = 0; i &amp;lt; inputArray.length; i++) {\n    var offset
        = middleArray + i;\n    if (offset &amp;gt;= inputArray.length)\n        offset
        -= inputArray.length;\n    if (inputArray[i] === inputArray[offset])\n        acceptedDigits.push(inputArray[i]);\n  }\n    document.getElementById(&amp;quot;digits&amp;quot;).textContent
        = acceptedDigits.join(&amp;quot;,&amp;quot;);\n  document.getElementById(&amp;quot;result&amp;quot;).textContent
        = acceptedDigits.reduce((x, y) =&amp;gt; { return x + y; });\n}    \n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqvh60w/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1512600932.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512600932.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1512778689.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqz3pov", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "bhtooefr",
        "can_mod_post": false, "created_utc": 1512776291.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_3qyvr", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Applesoft BASIC solutions.\n\n1. https://github.com/bhtooefr/aoc2017/blob/master/AOC1.1.BAS\n2.
        https://github.com/bhtooefr/aoc2017/blob/master/AOC1.2.BAS\n\nThis is running
        in ProDOS (I believe DOS 3.3 will work for any of this, though), with a text
        file containing only the puzzle input, with no empty line at the end.\n\nI
        had to rethink things for part 2, because my approach for part 1 was not at
        all suitable there - strings are a maximum of 255 bytes long in Applesoft.\n\nThere
        were basically two sane ways I could go - make an array of integers (2 bytes
        per integer, plus some overhead)... or I could poke the values directly into
        a convenient chunk of easily clearable RAM, like, oh, one of the high-res
        graphics pages. Note that this whole process is *extremely slow* - I must
        admit that I did this on an emulator, and did the debugging at 8 MHz.", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Applesoft BASIC solutions.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;a
        href=\"https://github.com/bhtooefr/aoc2017/blob/master/AOC1.1.BAS\"&gt;https://github.com/bhtooefr/aoc2017/blob/master/AOC1.1.BAS&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a
        href=\"https://github.com/bhtooefr/aoc2017/blob/master/AOC1.2.BAS\"&gt;https://github.com/bhtooefr/aoc2017/blob/master/AOC1.2.BAS&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;This
        is running in ProDOS (I believe DOS 3.3 will work for any of this, though),
        with a text file containing only the puzzle input, with no empty line at the
        end.&lt;/p&gt;\n\n&lt;p&gt;I had to rethink things for part 2, because my
        approach for part 1 was not at all suitable there - strings are a maximum
        of 255 bytes long in Applesoft.&lt;/p&gt;\n\n&lt;p&gt;There were basically
        two sane ways I could go - make an array of integers (2 bytes per integer,
        plus some overhead)... or I could poke the values directly into a convenient
        chunk of easily clearable RAM, like, oh, one of the high-res graphics pages.
        Note that this whole process is &lt;em&gt;extremely slow&lt;/em&gt; - I must
        admit that I did this on an emulator, and did the debugging at 8 MHz.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqz3pov/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqz3pov", "created":
        1512776291.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqzjsgr",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Akhoris",
        "can_mod_post": false, "created_utc": 1512799332.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_bda7k", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "My solution in Rust\n\n    use std::io::prelude::*;\n    use std::fs::File;\n\n    fn
        find_sum_match_next_digit(inputs: &amp;Vec&lt;i32&gt;) -&gt; i32 {\n        let
        mut sum: i32 = 0;\n        let mut previous = inputs[0];\n        let last
        = inputs[inputs.len() - 1];\n\n        if last == previous {\n            sum
        += last;  \n        }\n\n        for x in &amp;inputs[1..] {\n            if
        *x == previous {\n                sum += *x;  \n            }\n            previous
        = *x;\n        }\n\n        sum\n    }\n\n    fn main() {\n        let mut
        input_file = File::open(\"input.txt\").expect(\"Unable to open file\");\n        let
        mut buffer = String::new();\n        let mut input = Vec::new();\n\n        input_file.read_to_string(&amp;mut
        buffer).expect(\"Unable to read data\");\n        for digit in buffer.chars()
        {\n            match digit.to_digit(10) {\n                Some(value) =&gt;
        input.push(value as i32),\n                None =&gt; ()\n            }\n        }\n        let
        sum = find_sum_match_next_digit(&amp;input);\n\n        println!(\"Inputs
        = {:?}\", input);\n        println!(\"Sum = {}\", sum);\n    }\n", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;My solution in Rust&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use
        std::io::prelude::*;\nuse std::fs::File;\n\nfn find_sum_match_next_digit(inputs:
        &amp;amp;Vec&amp;lt;i32&amp;gt;) -&amp;gt; i32 {\n    let mut sum: i32 = 0;\n    let
        mut previous = inputs[0];\n    let last = inputs[inputs.len() - 1];\n\n    if
        last == previous {\n        sum += last;  \n    }\n\n    for x in &amp;amp;inputs[1..]
        {\n        if *x == previous {\n            sum += *x;  \n        }\n        previous
        = *x;\n    }\n\n    sum\n}\n\nfn main() {\n    let mut input_file = File::open(&amp;quot;input.txt&amp;quot;).expect(&amp;quot;Unable
        to open file&amp;quot;);\n    let mut buffer = String::new();\n    let mut
        input = Vec::new();\n\n    input_file.read_to_string(&amp;amp;mut buffer).expect(&amp;quot;Unable
        to read data&amp;quot;);\n    for digit in buffer.chars() {\n        match
        digit.to_digit(10) {\n            Some(value) =&amp;gt; input.push(value as
        i32),\n            None =&amp;gt; ()\n        }\n    }\n    let sum = find_sum_match_next_digit(&amp;amp;input);\n\n    println!(&amp;quot;Inputs
        = {:?}&amp;quot;, input);\n    println!(&amp;quot;Sum = {}&amp;quot;, sum);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqzjsgr/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqzjsgr", "created":
        1512799332.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1513386232.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqzz643", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "matusbzk",
        "can_mod_post": false, "created_utc": 1512834587.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_1zgrks", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "**Haskell**\n\n    inputString :: String\n\n    -- |This function takes the
        number, written in string, and returns it such that each digit is a member
        of a list\n    toList  :: String -&gt; [Integer]\n    toList = map (\\x -&gt;
        read [x])\n\n    inputList :: [Integer]\n    inputList = toList inputString\n\n    --
        |Takes a list and only leaves the digits that I am supposed to sum in part
        1\n    digitsToSum :: [Integer] -&gt; [Integer]\n    digitsToSum [x] = if
        head inputString == last inputString then [x] else []   --the last number
        is there iff it''s the same as the first\n    digitsToSum (x:y:xs) = if x
        == y then x : digitsToSum (y:xs)\n                else digitsToSum (y:xs)\n\n    --
        |Returns the solution of the captcha\n    captcha :: Integer\n    captcha
        = sum $ digitsToSum inputList\n\n    -- |Takes a list and moves it halfway
        around\n    moveList :: [Integer] -&gt; [Integer]\n    moveList list = drop
        (length list `div` 2) list ++ take (length list `div` 2) list\n\n    -- |Takes
        a list and only leaves the digits that I am supposed to sum in part 2\n    digitsToSum2
        :: [Integer] -&gt; [Integer]\n    digitsToSum2 list = map fst (filter (\\(a,b)
        -&gt; a == b) $ zip list $ moveList list)\n\n    -- |Returns the solution
        of the second captcha\n    captcha2 :: Integer\n    captcha2 = sum $ digitsToSum2
        inputList\n\n[link to git](https://github.com/matusbzk/AoC2017/blob/master/Day01_captcha.hs)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Haskell&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;inputString
        :: String\n\n-- |This function takes the number, written in string, and returns
        it such that each digit is a member of a list\ntoList  :: String -&amp;gt;
        [Integer]\ntoList = map (\\x -&amp;gt; read [x])\n\ninputList :: [Integer]\ninputList
        = toList inputString\n\n-- |Takes a list and only leaves the digits that I
        am supposed to sum in part 1\ndigitsToSum :: [Integer] -&amp;gt; [Integer]\ndigitsToSum
        [x] = if head inputString == last inputString then [x] else []   --the last
        number is there iff it&amp;#39;s the same as the first\ndigitsToSum (x:y:xs)
        = if x == y then x : digitsToSum (y:xs)\n            else digitsToSum (y:xs)\n\n--
        |Returns the solution of the captcha\ncaptcha :: Integer\ncaptcha = sum $
        digitsToSum inputList\n\n-- |Takes a list and moves it halfway around\nmoveList
        :: [Integer] -&amp;gt; [Integer]\nmoveList list = drop (length list `div`
        2) list ++ take (length list `div` 2) list\n\n-- |Takes a list and only leaves
        the digits that I am supposed to sum in part 2\ndigitsToSum2 :: [Integer]
        -&amp;gt; [Integer]\ndigitsToSum2 list = map fst (filter (\\(a,b) -&amp;gt;
        a == b) $ zip list $ moveList list)\n\n-- |Returns the solution of the second
        captcha\ncaptcha2 :: Integer\ncaptcha2 = sum $ digitsToSum2 inputList\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/matusbzk/AoC2017/blob/master/Day01_captcha.hs\"&gt;link
        to git&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqzz643/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqzz643", "created":
        1512834587.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dr1etc1", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_7gsrc2", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Crystal.\n\nPart 1:\n\n\tsum = 0\n\n\tinput = File.read(\"#{__DIR__}/input.txt\").strip\n\tinput.each_char_with_index
        do |char, i|\n\t  next_char = input[(i + 1) % input.size]\n\t  sum += char.to_i
        if char == next_char\n\tend\n\n\tputs sum\n\nPart 2:\n\n\tsum = 0\n\n\tinput
        = File.read(\"#{__DIR__}/input.txt\").strip\n\tinput.each_char_with_index
        do |char, i|\n\t  next_char = input[(i + input.size/2) % input.size]\n\t  sum
        += char.to_i if char == next_char\n\tend\n\n\tputs sum\n", "awarders": [],
        "downs": 0, "author_flair_css_class": null, "name": "t1_dr1etc1", "collapsed":
        false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Crystal.&lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;sum = 0\n\ninput = File.read(&amp;quot;#{__DIR__}/input.txt&amp;quot;).strip\ninput.each_char_with_index
        do |char, i|\n  next_char = input[(i + 1) % input.size]\n  sum += char.to_i
        if char == next_char\nend\n\nputs sum\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;sum = 0\n\ninput = File.read(&amp;quot;#{__DIR__}/input.txt&amp;quot;).strip\ninput.each_char_with_index
        do |char, i|\n  next_char = input[(i + input.size/2) % input.size]\n  sum
        += char.to_i if char == next_char\nend\n\nputs sum\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dr1etc1/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1512918148.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512918148.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1513073805.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dr4ccs5", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ScottRudiger",
        "can_mod_post": false, "created_utc": 1513051089.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_34c3y9x", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Some code-golfy JavaScript answers to Part I in ascending order of shortness:\n\n    p=n=&gt;(l=n.length,s=n[0]==(f=n[l-1])?+f:0,s+=eval([...n].filter((e,i)=&gt;e==n[i+1]).join`+`),s)\n    p=(n,s=n[0]==(f=[...n].pop())?+f:0,i=0)=&gt;i==n.length?s:p(n,s+(n[i]==n[i+1]?+n[i]:0),i+1)\n    p=n=&gt;(n[0]==(f=[...n].pop())?+f:0)+[...n].reduce((s,e,i)=&gt;s+(n[i]==n[i+1]?+n[i]:0),0)\n    p=n=&gt;(l=n.length,s=n[0]==(f=n[l-1])?+f:0,s+=eval(n.match(/(.)(?=\\1)/g).join`+`),s)\n    p=n=&gt;(l=n.length,s=n[0]==n[l-1]?+n[l-1]:0,[...n].map((e,i)=&gt;e==n[i+1]&amp;&amp;(s+=+e)),s)\n    p=n=&gt;(l=n.length,s=n[0]==(f=n[l-1])?+f:0,[...n].map((e,i)=&gt;e==n[i+1]&amp;&amp;(s+=+e)),s)\n    p=(n,a=[...n])=&gt;(n[0]==(f=a.pop())?+f:0)+a.reduce((s,e,i)=&gt;s+(e==n[i+1]?+e:0),0)\n    p=n=&gt;(n[0]==(f=[...n].pop())?+f:0)+[...n].reduce((s,e,i)=&gt;s+(e==n[i+1]?+e:0),0)\n    p=n=&gt;(s=n[0]==(f=n[n.length-1])?+f:0,[...n].map((e,i)=&gt;e==n[i+1]&amp;&amp;(s+=+e)),s)\n    p=n=&gt;(n[0]==(f=n[n.length-1])?+f:0)+eval(n.match(/(.)(?=\\1)/g).join`+`)\n    p=n=&gt;(n[0]==(f=[...n].pop())?+f:0)+eval(n.match(/(.)(?=\\1)/g).join`+`)\n    p=(n,s=0,l=n.length,i=l)=&gt;i?p(n,((e=n[i-1])==n[i%l]?+e:0)+s,l,i-1):s\n    p=(n,s,i=l=n.length)=&gt;i?p(n,((e=n[i-1])==n[i%l]?+e:0)+~~s,i-1):s\n    p=n=&gt;(s=0,[...n].map((e,i)=&gt;e==n[(i+1)%n.length]&amp;&amp;(s+=+e)),s)\n    p=n=&gt;[...n].reduce((s,e,i)=&gt;(e==n[(i+1)%n.length]?+e:0)+s,0)\n    p=n=&gt;(s=0,[...n].map((e,i)=&gt;s+=e==n[(i+1)%n.length]?+e:0),s)\n    p=n=&gt;eval([...n,n[0]].filter((e,i,n)=&gt;e==n[i+1]).join`+`)\n    p=n=&gt;(s=0,[...n,n[0]].map((e,i,n)=&gt;s+=e==n[i+1]?+e:0),s)\n    p=n=&gt;[...n,n[0]].reduce((s,e,i,n)=&gt;e==n[i+1]?+e+s:s,0)\n    p=n=&gt;eval((n+n[0]).match(/(.)(?=\\1)/g).join`+`)",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Some code-golfy JavaScript
        answers to Part I in ascending order of shortness:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;p=n=&amp;gt;(l=n.length,s=n[0]==(f=n[l-1])?+f:0,s+=eval([...n].filter((e,i)=&amp;gt;e==n[i+1]).join`+`),s)\np=(n,s=n[0]==(f=[...n].pop())?+f:0,i=0)=&amp;gt;i==n.length?s:p(n,s+(n[i]==n[i+1]?+n[i]:0),i+1)\np=n=&amp;gt;(n[0]==(f=[...n].pop())?+f:0)+[...n].reduce((s,e,i)=&amp;gt;s+(n[i]==n[i+1]?+n[i]:0),0)\np=n=&amp;gt;(l=n.length,s=n[0]==(f=n[l-1])?+f:0,s+=eval(n.match(/(.)(?=\\1)/g).join`+`),s)\np=n=&amp;gt;(l=n.length,s=n[0]==n[l-1]?+n[l-1]:0,[...n].map((e,i)=&amp;gt;e==n[i+1]&amp;amp;&amp;amp;(s+=+e)),s)\np=n=&amp;gt;(l=n.length,s=n[0]==(f=n[l-1])?+f:0,[...n].map((e,i)=&amp;gt;e==n[i+1]&amp;amp;&amp;amp;(s+=+e)),s)\np=(n,a=[...n])=&amp;gt;(n[0]==(f=a.pop())?+f:0)+a.reduce((s,e,i)=&amp;gt;s+(e==n[i+1]?+e:0),0)\np=n=&amp;gt;(n[0]==(f=[...n].pop())?+f:0)+[...n].reduce((s,e,i)=&amp;gt;s+(e==n[i+1]?+e:0),0)\np=n=&amp;gt;(s=n[0]==(f=n[n.length-1])?+f:0,[...n].map((e,i)=&amp;gt;e==n[i+1]&amp;amp;&amp;amp;(s+=+e)),s)\np=n=&amp;gt;(n[0]==(f=n[n.length-1])?+f:0)+eval(n.match(/(.)(?=\\1)/g).join`+`)\np=n=&amp;gt;(n[0]==(f=[...n].pop())?+f:0)+eval(n.match(/(.)(?=\\1)/g).join`+`)\np=(n,s=0,l=n.length,i=l)=&amp;gt;i?p(n,((e=n[i-1])==n[i%l]?+e:0)+s,l,i-1):s\np=(n,s,i=l=n.length)=&amp;gt;i?p(n,((e=n[i-1])==n[i%l]?+e:0)+~~s,i-1):s\np=n=&amp;gt;(s=0,[...n].map((e,i)=&amp;gt;e==n[(i+1)%n.length]&amp;amp;&amp;amp;(s+=+e)),s)\np=n=&amp;gt;[...n].reduce((s,e,i)=&amp;gt;(e==n[(i+1)%n.length]?+e:0)+s,0)\np=n=&amp;gt;(s=0,[...n].map((e,i)=&amp;gt;s+=e==n[(i+1)%n.length]?+e:0),s)\np=n=&amp;gt;eval([...n,n[0]].filter((e,i,n)=&amp;gt;e==n[i+1]).join`+`)\np=n=&amp;gt;(s=0,[...n,n[0]].map((e,i,n)=&amp;gt;s+=e==n[i+1]?+e:0),s)\np=n=&amp;gt;[...n,n[0]].reduce((s,e,i,n)=&amp;gt;e==n[i+1]?+e+s:s,0)\np=n=&amp;gt;eval((n+n[0]).match(/(.)(?=\\1)/g).join`+`)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dr4ccs5/",
        "subreddit_type": "public", "locked": false, "name": "t1_dr4ccs5", "created":
        1513051089.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1513085109.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dr4tpe2", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "_ambersariya",
        "can_mod_post": false, "created_utc": 1513084828.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_12qpbx", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "New to Python. There''s surely a better way to do it but here''s my solution
        to part 2 that works\n\n    num_sequence = [int(n) for n in list(input(''enter
        string: ''))]\n    steps = len(num_sequence) // 2\n    value_array = []\n\n    for
        index, character in enumerate(num_sequence):\n        next_item_index = index
        + steps\n        if index &gt;= steps:\n            next_item_index -= len(num_sequence)\n\n        if
        num_sequence[index] == num_sequence[next_item_index]:\n            value_array.append(num_sequence[index])\n\n    print(sum(value_array))\n",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;New to Python. There&amp;#39;s
        surely a better way to do it but here&amp;#39;s my solution to part 2 that
        works&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;num_sequence = [int(n) for n in
        list(input(&amp;#39;enter string: &amp;#39;))]\nsteps = len(num_sequence)
        // 2\nvalue_array = []\n\nfor index, character in enumerate(num_sequence):\n    next_item_index
        = index + steps\n    if index &amp;gt;= steps:\n        next_item_index -=
        len(num_sequence)\n\n    if num_sequence[index] == num_sequence[next_item_index]:\n        value_array.append(num_sequence[index])\n\nprint(sum(value_array))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dr4tpe2/",
        "subreddit_type": "public", "locked": false, "name": "t1_dr4tpe2", "created":
        1513084828.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dri9xke",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "nefthias",
        "can_mod_post": false, "created_utc": 1513744859.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_7vzdlrd", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "why do i get infinity ? and how will i calculate the thing if i dont have
        a proper number", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;why
        do i get infinity ? and how will i calculate the thing if i dont have a proper
        number&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dri9xke/",
        "subreddit_type": "public", "locked": false, "name": "t1_dri9xke", "created":
        1513744859.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "drletsg", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_7gsrc2", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "**Factor**\n\n    USING: command-line grouping io io.encodings.utf8
        io.files kernel math\n           math.parser namespaces prettyprint sequences
        ;\n    IN: aoc.day1\n    \n    : day1 ( s n -- n )\n        circular-clump\n        [
        [ first ] [ last ] bi = ] filter\n        [ first ] map-sum ;\n    \n    :
        part1 ( s -- n ) 2 day1 ;\n    : part2 ( s -- n ) dup length 2 / 1 + day1
        ;\n    \n    : get-input ( -- seq )\n         command-line get first\n         utf8
        [ readln ] with-file-reader\n         string&gt;digits ;\n    \n    : main
        ( -- )\n        get-input\n        [ part1 ] [ part2 ] bi\n        [ . ] bi@
        ;\n    \n    MAIN: main", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_drletsg", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Factor&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;USING:
        command-line grouping io io.encodings.utf8 io.files kernel math\n       math.parser
        namespaces prettyprint sequences ;\nIN: aoc.day1\n\n: day1 ( s n -- n )\n    circular-clump\n    [
        [ first ] [ last ] bi = ] filter\n    [ first ] map-sum ;\n\n: part1 ( s --
        n ) 2 day1 ;\n: part2 ( s -- n ) dup length 2 / 1 + day1 ;\n\n: get-input
        ( -- seq )\n     command-line get first\n     utf8 [ readln ] with-file-reader\n     string&amp;gt;digits
        ;\n\n: main ( -- )\n    get-input\n    [ part1 ] [ part2 ] bi\n    [ . ] bi@
        ;\n\nMAIN: main\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/drletsg/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1513899809.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1513899809.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dvqp9wk",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "AdamSteffanick",
        "can_mod_post": false, "created_utc": 1521124708.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_11nolmqw", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "I detail a fun **XQuery** solution for both parts in [a blog post](https://www.steffanick.com/adam/blog/solve-advent-of-code-2017-day-1-with-xquery/).",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I detail a fun &lt;strong&gt;XQuery&lt;/strong&gt;
        solution for both parts in &lt;a href=\"https://www.steffanick.com/adam/blog/solve-advent-of-code-2017-day-1-with-xquery/\"&gt;a
        blog post&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dvqp9wk/",
        "subreddit_type": "public", "locked": false, "name": "t1_dvqp9wk", "created":
        1521124708.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1512105526.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqlgurs", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "asdfkjasdhkasd",
        "can_mod_post": false, "created_utc": 1512104840.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_15jlfw", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "    input_str = \"818275977931166178424892653779931342156567268946849597948944469863818248114327524824136924486891794739281668741616818614613222585132742386168687517939432911753846817997473555693821316918473474459788714917665794336753628836231159578734813485687247273288926216976992516314415836985611354682821892793983922755395577592859959966574329787693934242233159947846757279523939217844194346599494858459582798326799512571365294673978955928416955127211624234143497546729348687844317864243859238665326784414349618985832259224761857371389133635711819476969854584123589566163491796442167815899539788237118339218699137497532932492226948892362554937381497389469981346971998271644362944839883953967698665427314592438958181697639594631142991156327257413186621923369632466918836951277519421695264986942261781256412377711245825379412978876134267384793694756732246799739464721215446477972737883445615664755923441441781128933369585655925615257548499628878242122434979197969569971961379367756499884537433839217835728263798431874654317137955175565253555735968376115749641527957935691487965161211853476747758982854811367422656321836839326818976668191525884763294465366151349347633968321457954152621175837754723675485348339261288195865348545793575843874731785852718281311481217515834822185477982342271937155479432673815629144664144538221768992733498856934255518875381672342521819499939835919827166318715849161715775427981485233467222586764392783699273452228728667175488552924399518855743923659815483988899924199449721321589476864161778841352853573584489497263216627369841455165476954483715112127465311353411346132671561568444626828453687183385215975319858714144975174516356117245993696521941589168394574287785233685284294357548156487538175462176268162852746996633977948755296869616778577327951858348313582783675149343562362974553976147259225311183729415381527435926224781181987111454447371894645359797229493458443522549386769845742557644349554641538488252581267341635761715674381775778868374988451463624332123361576518411234438681171864923916896987836734129295354684962897616358722633724198278552339794629939574841672355699222747886785616814449297817352118452284785694551841431869545321438468118\"\n    print(sum([int(n1)
        for n1, n2 in zip(input_str, input_str[1:] + input_str[0]) if n1 == n2]))",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;input_str
        = &amp;quotamp;quot;\nprint(sum([int(n1)
        for n1, n2 in zip(input_str, input_str[1:] + input_str[0]) if n1 == n2]))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlgurs/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqlgurs", "created":
        1512104840.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqlh9bo", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_dqlgurs", "score":
        7, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "I never get why people mix functional programming and
        list comprehensions in Python.\n\nWhy not just do `sum(x[0] for x in tuples
        if x[0] == x[1])`?", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_dqlh9bo", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;I never get why people mix functional programming
        and list comprehensions in Python.&lt;/p&gt;\n\n&lt;p&gt;Why not just do &lt;code&gt;sum(x[0]
        for x in tuples if x[0] == x[1])&lt;/code&gt;?&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlh9bo/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1512105435.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512105435.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 7}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqlh01y",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Deckard666",
        "can_mod_post": false, "created_utc": 1512105057.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_e924e", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "In Rust:\n\n    use std::io::Read;\n\n    fn main() {\n        let mut file
        = std::fs::File::open(\"./input.txt\").unwrap();\n        let mut input =
        String::new();\n        file.read_to_string(&amp;mut input).unwrap();\n        let
        input = input\n            .trim()\n            .chars()\n            .map(|x|
        x.to_digit(10).unwrap())\n            .collect::&lt;Vec&lt;u32&gt;&gt;();\n        let
        mut counter = 0;\n        let mut counter2 = 0;\n        let len = input.len();\n        for
        i in 0..len {\n            if input[i] == input[(i + 1) % len] {\n                counter
        += input[i]\n            }\n            if input[i] == input[(i + len / 2)
        % len] {\n                counter2 += input[i]\n            }\n        }\n        println!(\"{}\",
        counter);\n        println!(\"{}\", counter2);\n    }\n", "awarders": [],
        "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;In Rust:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use
        std::io::Read;\n\nfn main() {\n    let mut file = std::fs::File::open(&amp;quot;./input.txt&amp;quot;).unwrap();\n    let
        mut input = String::new();\n    file.read_to_string(&amp;amp;mut input).unwrap();\n    let
        input = input\n        .trim()\n        .chars()\n        .map(|x| x.to_digit(10).unwrap())\n        .collect::&amp;lt;Vec&amp;lt;u32&amp;gt;&amp;gt;();\n    let
        mut counter = 0;\n    let mut counter2 = 0;\n    let len = input.len();\n    for
        i in 0..len {\n        if input[i] == input[(i + 1) % len] {\n            counter
        += input[i]\n        }\n        if input[i] == input[(i + len / 2) % len]
        {\n            counter2 += input[i]\n        }\n    }\n    println!(&amp;quot;{}&amp;quot;,
        counter);\n    println!(&amp;quot;{}&amp;quot;, counter2);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlh01y/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqlh01y", "created":
        1512105057.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqlhiy3",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ButItMightJustWork",
        "can_mod_post": false, "created_utc": 1512105844.0, "send_replies": true,
        "parent_id": "t1_dqlh01y", "score": 2, "author_fullname": "t2_dq2fuzt", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "&gt; `let input = input .trim() .chars() .map(|x| x.to_digit(10).unwrap())
        .collect::&lt;Vec&lt;u32&gt;&gt;();`\n\nVery nice, I used `let x: i32 = ch.to_string().parse().unwrap();`
        all over the place :/", "awarders": [], "top_awarded_type": null, "author_flair_css_class":
        null, "author_patreon_flair": false, "downs": 0, "author_flair_richtext":
        [], "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;&lt;code&gt;let
        input = input .trim() .chars() .map(|x| x.to_digit(10).unwrap()) .collect::&amp;lt;Vec&amp;lt;u32&amp;gt;&amp;gt;();&lt;/code&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Very
        nice, I used &lt;code&gt;let x: i32 = ch.to_string().parse().unwrap();&lt;/code&gt;
        all over the place :/&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhiy3/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqlhiy3", "created":
        1512105844.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 1, "name": "t1_dqli0tq", "id": "dqli0tq", "parent_id":
        "t1_dqlhiy3", "depth": 2, "children": ["dqli0tq"]}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqlirw1", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_dqlh01y", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "&gt; Rust\n\nI stole your code because I picked up Rust
        about an hour ago, but I wanted to avoid using for loops, so instead came
        up with this logic after the input parsing:\n\n    let counter = input.iter().enumerate()\n                    .fold(0,
        |acc, (i, v)| if *v == input[(i + 1) % len] as u32 { acc + v } else { acc
        } );\n\n    let counter2 = input.iter().enumerate()\n                    .fold(0,
        |acc, (i, v)| if *v == input[(i + len / 2) % len] as u32 { acc + v } else
        { acc } );\n", "awarders": [], "downs": 0, "author_flair_css_class": null,
        "name": "t1_dqlirw1", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;Rust&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I
        stole your code because I picked up Rust about an hour ago, but I wanted to
        avoid using for loops, so instead came up with this logic after the input
        parsing:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let counter = input.iter().enumerate()\n                .fold(0,
        |acc, (i, v)| if *v == input[(i + 1) % len] as u32 { acc + v } else { acc
        } );\n\nlet counter2 = input.iter().enumerate()\n                .fold(0,
        |acc, (i, v)| if *v == input[(i + len / 2) % len] as u32 { acc + v } else
        { acc } );\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "can_gild": false, "top_awarded_type": null, "unrepliable_reason": null, "author_flair_text_color":
        "dark", "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlirw1/",
        "num_reports": null, "locked": false, "report_reasons": null, "created": 1512107895.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1512107895.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 5, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqlkjbm",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "gtllama",
        "can_mod_post": false, "created_utc": 1512111226.0, "send_replies": true,
        "parent_id": "t1_dqlirw1", "score": 5, "author_fullname": "t2_3afmw", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "You could also do this:\n\n    fn sum_match(input: &amp;[u32], offset: usize)
        -&gt; u32 {\n        input.iter().zip(input.iter().cycle().skip(offset))\n            .filter(|&amp;(a,b)|
        a == b)\n            .map(|p| p.0)\n            .sum()\n    }\n", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;You could also do this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fn
        sum_match(input: &amp;amp;[u32], offset: usize) -&amp;gt; u32 {\n    input.iter().zip(input.iter().cycle().skip(offset))\n        .filter(|&amp;amp;(a,b)|
        a == b)\n        .map(|p| p.0)\n        .sum()\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlkjbm/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqlkjbm", "created":
        1512111226.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "more", "data": {"count": 8, "name": "t1_dqlh3a0", "id": "dqlh3a0", "parent_id":
        "t3_7gsrc2", "depth": 0, "children": ["dqlh3a0", "dqlhfrh", "dqlhk8u", "dqlgu6o",
        "dqlhiuu", "dqlhxlw", "dqlhrwa"]}}], true]], [0, 12, "attr", "things"], [12,
        13, "call", ["t1_dqm0i1n"]], [13, 14, "attr", "focus"], [14, 15, "call", []],
        [0, 16, "attr", "things"], [16, 17, "call", ["None"]], [17, 18, "attr", "filter"],
        [18, 19, "call", [".morechildren"]], [19, 20, "attr", "remove"], [20, 21,
        "call", []]], "success": true}'
  recorded_at: Sat, 08 Mar 2025 23:31:43 GMT
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:31:44 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=QQ9WhSIXYB8kXlBfy9; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sat, 08 Mar 2025 23:31:44 GMT
- request:
    method: post
    uri: https://oauth.reddit.com/api/morechildren.json
    body:
      encoding: UTF-8
      string: link_id=t3_7gsrc2&children=dqlh3a0,dqlhfrh,dqlhk8u,dqlgu6o,dqlhiuu,dqlhxlw,dqlhrwa
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '3870'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      set-cookie:
      - loid=000000001ksjzv8rnp.2.1741476704214.Z0FBQUFBQm56Tk5nanBSRUttRDQ2M3RiaEZnRWVUbG9VS1FzQ3NEZmlOY3pHbDNMR3R2ZTlValVNNFdMcm45ajJ3bW1QR192LVY5YTZ5WVg3Y09BUzdUY2VMang5cDZDeGhMMTRmamZ3UUstUWVtNmktRDVSVnhkVXV6Q3R5UlhuWWR5LTZ4emdDZlE;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Mon, 08-Mar-2027 23:31:44
        GMT; secure, session_tracker=jlfpjporicpppqendk.0.1741476704229.Z0FBQUFBQm56Tk5nRFNJa0daaTBpZDY3TjloR09ZaGNRVEtMSk9jTlF0OXJEM2hQQkhXWW5ZVDR6czZ1UlllLUZFSmtUMDRRS0VmeHhlN01TaFlCQVJVN1hqdE1OMVBnUjJZR0dFRUhJVjMtRklYc2xsdExVdUJCLWdPbDBWSkZzcjJXYy0wel9Cdk4;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 01:31:44
        GMT; secure, edgebucket=FLfoZuvNWddAhXBco3; Domain=reddit.com; Max-Age=63071999;
        Path=/;  secure
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '3'
      x-ratelimit-remaining:
      - '97.0'
      x-ratelimit-reset:
      - '495'
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:31:44 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"jquery": [[0, 1, "call", ["body"]], [1, 2, "attr", "find"], [2, 3,
        "call", [".status"]], [3, 4, "attr", "hide"], [4, 5, "call", []], [5, 6, "attr",
        "html"], [6, 7, "call", [""]], [7, 8, "attr", "end"], [8, 9, "call", []],
        [0, 10, "attr", "insert_things"], [10, 11, "call", [[{"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqlh3a0",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "gbear605",
        "can_mod_post": false, "created_utc": 1512105187.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_8dvxa", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Rust:\n\n    use std::io::Read;\n    use std::fs::File;\n    use std::env;\n    \n    fn
        main() {\n        run_from_file(env::args().nth(1).unwrap() as String)\n    }\n    \n    fn
        run_from_file(filename: String) {\n        let mut f = File::open(filename).unwrap();\n        let
        mut input = String::new();\n    \n        let _ = f.read_to_string(&amp;mut
        input);\n    \n        println!(\"star 1: {}\", process1(input.clone()));\n        println!(\"star
        2: {}\", process2(input));\n    \n    }\n    \n    fn process1(input: String)
        -&gt; u32 {\n        let digits: Vec&lt;u32&gt; = input.chars()\n            .map(|digit_char|
        digit_char.to_digit(10).unwrap())\n            .collect();\n        let mut
        sum = 0;\n        for i in 0..digits.len() {\n            if i == digits.len()
        - 1 {\n                if digits[0] == digits[i] {\n                    sum
        = sum + digits[i];\n                }\n            } else {\n                if
        digits[i + 1] == digits[i] {\n                    sum = sum + digits[i];\n                }\n            }\n        }\n        sum\n    }\n    \n    fn
        process2(input: String) -&gt; u32 {\n        let digits: Vec&lt;u32&gt; =
        input.chars()\n            .map(|digit_char| digit_char.to_digit(10).unwrap())\n            .collect();\n        let
        mut sum = 0;\n        for i in 0..digits.len() {\n            if i &gt;= digits.len()
        / 2 {\n                if digits[i - (digits.len()) / 2] == digits[i] {\n                    sum
        = sum + digits[i];\n                }\n            } else {\n                if
        digits[i + (digits.len()) / 2] == digits[i] {\n                    sum = sum
        + digits[i];\n                }\n            }\n        }\n        sum\n    }\n    ",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Rust:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;use
        std::io::Read;\nuse std::fs::File;\nuse std::env;\n\nfn main() {\n    run_from_file(env::args().nth(1).unwrap()
        as String)\n}\n\nfn run_from_file(filename: String) {\n    let mut f = File::open(filename).unwrap();\n    let
        mut input = String::new();\n\n    let _ = f.read_to_string(&amp;amp;mut input);\n\n    println!(&amp;quot;star
        1: {}&amp;quot;, process1(input.clone()));\n    println!(&amp;quot;star 2:
        {}&amp;quot;, process2(input));\n\n}\n\nfn process1(input: String) -&amp;gt;
        u32 {\n    let digits: Vec&amp;lt;u32&amp;gt; = input.chars()\n        .map(|digit_char|
        digit_char.to_digit(10).unwrap())\n        .collect();\n    let mut sum =
        0;\n    for i in 0..digits.len() {\n        if i == digits.len() - 1 {\n            if
        digits[0] == digits[i] {\n                sum = sum + digits[i];\n            }\n        }
        else {\n            if digits[i + 1] == digits[i] {\n                sum =
        sum + digits[i];\n            }\n        }\n    }\n    sum\n}\n\nfn process2(input:
        String) -&amp;gt; u32 {\n    let digits: Vec&amp;lt;u32&amp;gt; = input.chars()\n        .map(|digit_char|
        digit_char.to_digit(10).unwrap())\n        .collect();\n    let mut sum =
        0;\n    for i in 0..digits.len() {\n        if i &amp;gt;= digits.len() /
        2 {\n            if digits[i - (digits.len()) / 2] == digits[i] {\n                sum
        = sum + digits[i];\n            }\n        } else {\n            if digits[i
        + (digits.len()) / 2] == digits[i] {\n                sum = sum + digits[i];\n            }\n        }\n    }\n    sum\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlh3a0/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqlh3a0", "created":
        1512105187.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "removal_reason": null, "link_id": "t3_7gsrc2", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqlhfrh", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_7gsrc2", "score":
        1, "approved_by": null, "mod_note": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "awarders": [], "downs": 0, "author_flair_css_class":
        null, "name": "t1_dqlhfrh", "collapsed": false, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhfrh/", "num_reports":
        null, "locked": false, "report_reasons": null, "created": 1512105705.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1512105705.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "subreddit_type": "public", "ups": 1}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqlip5d",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "rtlechow",
        "can_mod_post": false, "created_utc": 1512107762.0, "send_replies": true,
        "parent_id": "t1_dqlhfrh", "score": 2, "author_fullname": "t2_3i34m", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Another Part 1:\n\n    enum, sum = input.split('''').map(&amp;:to_i).to_enum,
        0\n    while number = enum.next\n      begin\n        sum += number if number
        == enum.peek\n      rescue StopIteration\n        sum += number if number
        == enum.first\n        break\n      end\n    end\n    puts sum", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Another Part 1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;enum,
        sum = input.split(&amp;#39;&amp;#39;).map(&amp;amp;:to_i).to_enum, 0\nwhile
        number = enum.next\n  begin\n    sum += number if number == enum.peek\n  rescue
        StopIteration\n    sum += number if number == enum.first\n    break\n  end\nend\nputs
        sum\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlip5d/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqlip5d", "created":
        1512107762.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqlhiuu",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "IMovedYourCheese",
        "can_mod_post": false, "created_utc": 1512105840.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_ld7yx", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Cleaned-up TypeScript + Node.js. Spent a couple minutes looking up the readfile
        syntax, and ended up #121. Oh well.\n\n        \n    import * as fs from ''fs'';\n    \n    const
        input = fs.readFileSync(''input/day1.txt'').toString();\n    sol(input, t
        =&gt; t + 1);\n    sol(input, t =&gt; t + (input.length / 2));\n    \n    function
        sol(input: string, compare: (source: number) =&gt; number) {\n        let
        sum: number = 0;\n        for (let i = 0; i &lt; input.length; i++) {\n            let
        target = compare(i);\n            if (target &gt;= input.length) {\n                target
        -= input.length;\n            }\n            if (input[i] === input[target])
        {\n                sum += Number(input[i]);\n            }\n        }\n        console.log(sum);\n    }",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Cleaned-up TypeScript
        + Node.js. Spent a couple minutes looking up the readfile syntax, and ended
        up #121. Oh well.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import * as fs from
        &amp;#39;fs&amp;#39;;\n\nconst input = fs.readFileSync(&amp;#39;input/day1.txt&amp;#39;).toString();\nsol(input,
        t =&amp;gt; t + 1);\nsol(input, t =&amp;gt; t + (input.length / 2));\n\nfunction
        sol(input: string, compare: (source: number) =&amp;gt; number) {\n    let
        sum: number = 0;\n    for (let i = 0; i &amp;lt; input.length; i++) {\n        let
        target = compare(i);\n        if (target &amp;gt;= input.length) {\n            target
        -= input.length;\n        }\n        if (input[i] === input[target]) {\n            sum
        += Number(input[i]);\n        }\n    }\n    console.log(sum);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhiuu/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqlhiuu", "created":
        1512105840.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqlhk8u",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "dylanfromwinnipeg",
        "can_mod_post": false, "created_utc": 1512105901.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_7524szs", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "C#\n\n    public static string ProcessA(string input)\n    {\n        input
        += input.Substring(0, 1);\n        var sum = 0;\n\n        for (int i = 0;
        i &lt; (input.Length - 1); i++)\n        {\n            if (input[i] == input[i
        + 1])\n            {\n                sum += int.Parse(input[i].ToString());\n            }\n        }\n\n        return
        sum.ToString();\n    }\n\n    public static string ProcessB(string input)\n    {\n        var
        sum = 0;\n\n        for (int i = 0; i &lt; input.Length; i++)\n        {\n            if
        (GetCompareDigit(input, i) == input[i])\n            {\n                sum
        += int.Parse(input[i].ToString());\n            }\n        }\n\n        return
        sum.ToString();\n    }\n\n    private static char GetCompareDigit(string input,
        int i)\n    {\n        var steps = input.Length / 2;\n\n        var pos =
        (i + steps) % input.Length;\n\n        return input[pos];\n    }", "awarders":
        [], "top_awarded_type": null, "author_flair_css_class": null, "author_patreon_flair":
        false, "downs": 0, "author_flair_richtext": [], "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;C#&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public
        static string ProcessA(string input)\n{\n    input += input.Substring(0, 1);\n    var
        sum = 0;\n\n    for (int i = 0; i &amp;lt; (input.Length - 1); i++)\n    {\n        if
        (input[i] == input[i + 1])\n        {\n            sum += int.Parse(input[i].ToString());\n        }\n    }\n\n    return
        sum.ToString();\n}\n\npublic static string ProcessB(string input)\n{\n    var
        sum = 0;\n\n    for (int i = 0; i &amp;lt; input.Length; i++)\n    {\n        if
        (GetCompareDigit(input, i) == input[i])\n        {\n            sum += int.Parse(input[i].ToString());\n        }\n    }\n\n    return
        sum.ToString();\n}\n\nprivate static char GetCompareDigit(string input, int
        i)\n{\n    var steps = input.Length / 2;\n\n    var pos = (i + steps) % input.Length;\n\n    return
        input[pos];\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhk8u/", "subreddit_type":
        "public", "locked": false, "name": "t1_dqlhk8u", "created": 1512105901.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_7gsrc2", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "mod_note":
        null, "distinguished": null}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa",
        "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "edited": false, "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "dqlhrwa", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "mmvdv", "can_mod_post": false, "created_utc":
        1512106235.0, "send_replies": true, "parent_id": "t3_7gsrc2", "score": 1,
        "author_fullname": "t2_7s2fbsw", "report_reasons": null, "approved_by": null,
        "all_awardings": [], "collapsed": false, "body": "Swift (playground):\n\n    import
        Foundation\n    \n    func read1(_ fileName: String = \"input\") -&gt; [Int]
        {\n        let fileURL = Bundle.main.url(forResource: fileName, withExtension:
        \"txt\")\n        let content = try! String(contentsOf: fileURL!)\n        return
        content.flatMap {\n            Int(String($0))\n        }\n    }\n    \n    func
        solve1() {\n        let ints = read1()\n    \n        var sum = 0\n        for
        i in 0..&lt;ints.count - 1 where ints[i] == ints[i+1] {\n            sum +=
        ints[i]\n        }\n        if ints.first == ints.last {\n            sum
        += ints.first!\n        }\n        print(sum)\n    }\n    \n    func solve2()
        {\n        let ints = read1()\n    \n        var sum = 0\n        let halfRound
        = ints.count / 2\n        for i in 0..&lt;ints.count {\n            let match
        = (i + halfRound) % ints.count\n            if ints[i] == ints[match] {\n                sum
        += ints[i]\n            }\n        }\n        print(sum)\n    }\n    \n    solve1()\n    solve2()\n",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Swift (playground):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        Foundation\n\nfunc read1(_ fileName: String = &amp;quot;input&amp;quot;) -&amp;gt;
        [Int] {\n    let fileURL = Bundle.main.url(forResource: fileName, withExtension:
        &amp;quot;txt&amp;quot;)\n    let content = try! String(contentsOf: fileURL!)\n    return
        content.flatMap {\n        Int(String($0))\n    }\n}\n\nfunc solve1() {\n    let
        ints = read1()\n\n    var sum = 0\n    for i in 0..&amp;lt;ints.count - 1
        where ints[i] == ints[i+1] {\n        sum += ints[i]\n    }\n    if ints.first
        == ints.last {\n        sum += ints.first!\n    }\n    print(sum)\n}\n\nfunc
        solve2() {\n    let ints = read1()\n\n    var sum = 0\n    let halfRound =
        ints.count / 2\n    for i in 0..&amp;lt;ints.count {\n        let match =
        (i + halfRound) % ints.count\n        if ints[i] == ints[match] {\n            sum
        += ints[i]\n        }\n    }\n    print(sum)\n}\n\nsolve1()\nsolve2()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhrwa/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqlhrwa", "created":
        1512106235.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": 1512206458.0, "mod_reason_by": null,
        "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text",
        "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "dqlhxlw", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "misnohmer",
        "can_mod_post": false, "created_utc": 1512106489.0, "send_replies": true,
        "parent_id": "t3_7gsrc2", "score": 1, "author_fullname": "t2_13ds19", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Another C# solution:\n \n    using System;\n    using System.Linq;\n    using
        System.IO;\n    using static System.Console;\n    using static System.IO.File;\n\n    namespace
        day_01\n    {\n        class Program\n        {\n            static void Main(string[]
        args)\n            {\n                var list = ReadAllText(\"input.txt\").ToCharArray().Select(c
        =&gt; (int) char.GetNumericValue(c));\n                list = list.Concat(new
        [] { list.First() });\n\n                var sum = list.Zip(list.Skip(1),
        (a, b) =&gt; a == b ? a : 0).Sum();\n\n                WriteLine(sum);\n            }\n        }\n    }\n    ",
        "awarders": [], "top_awarded_type": null, "author_flair_css_class": null,
        "author_patreon_flair": false, "downs": 0, "author_flair_richtext": [], "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Another C# solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;using
        System;\nusing System.Linq;\nusing System.IO;\nusing static System.Console;\nusing
        static System.IO.File;\n\nnamespace day_01\n{\n    class Program\n    {\n        static
        void Main(string[] args)\n        {\n            var list = ReadAllText(&amp;quot;input.txt&amp;quot;).ToCharArray().Select(c
        =&amp;gt; (int) char.GetNumericValue(c));\n            list = list.Concat(new
        [] { list.First() });\n\n            var sum = list.Zip(list.Skip(1), (a,
        b) =&amp;gt; a == b ? a : 0).Sum();\n\n            WriteLine(sum);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlhxlw/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqlhxlw", "created":
        1512106489.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], true]],
        [0, 12, "attr", "things"], [12, 13, "call", ["t1_dqlh3a0"]], [13, 14, "attr",
        "focus"], [14, 15, "call", []], [0, 16, "attr", "things"], [16, 17, "call",
        ["None"]], [17, 18, "attr", "filter"], [18, 19, "call", [".morechildren"]],
        [19, 20, "attr", "remove"], [20, 21, "call", []]], "success": true}'
  recorded_at: Sat, 08 Mar 2025 23:31:44 GMT
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:31:45 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=20rqLJSI9BYRjvPgzl; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sat, 08 Mar 2025 23:31:45 GMT
- request:
    method: post
    uri: https://oauth.reddit.com/api/morechildren.json
    body:
      encoding: UTF-8
      string: link_id=t3_7gsrc2&children=dqlu3s6
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '1073'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      set-cookie:
      - loid=000000001ksjzvhj6e.2.1741476705362.Z0FBQUFBQm56Tk5oYm5zRWxvWldQbE5oNGhlRkE3S1JRSVRCWjd6TVFlTGJ4dXI0YUNoQUgxOVFUTno5elVZaHIxanRrdl8yNnU3UFkwUFhZaURmQl9UUTZCOXRiSVg1bk5QZTRUbHFES1l2dnFwUnY0VVhSUC04dk9SWEl4c3dYUnQ1VDUxU0dxVHA;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Mon, 08-Mar-2027 23:31:45
        GMT; secure, session_tracker=kaehaaonrihpjfoopp.0.1741476705374.Z0FBQUFBQm56Tk5oZGxhRDJvS0FyT254UmFiREhyb1hwS3pJbGh6TnhDcVdhV2pyaWd5bXpRcG5LYTMyd2tGUTRHbDdvYkJMMUk2NU1hZzZjZER4UWJaN3YyWmZxVW9hcW1VUTlNZ2c4WVc3UkNaU0FZMkpfYVAwV3pEeXQ5ZHNCYS1sOHdVQ3lXUm8;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 01:31:45
        GMT; secure, edgebucket=J3siF2VLfcsTRimYmE; Domain=reddit.com; Max-Age=63071999;
        Path=/;  secure
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '4'
      x-ratelimit-remaining:
      - '96.0'
      x-ratelimit-reset:
      - '494'
      accept-ranges:
      - bytes
      date:
      - Sat, 08 Mar 2025 23:31:45 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"jquery": [[0, 1, "call", ["body"]], [1, 2, "attr", "find"], [2, 3,
        "call", [".status"]], [3, 4, "attr", "hide"], [4, 5, "call", []], [5, 6, "attr",
        "html"], [6, 7, "call", [""]], [7, 8, "attr", "end"], [8, 9, "call", []],
        [0, 10, "attr", "insert_things"], [10, 11, "call", [[{"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "edited": false, "mod_reason_by": null, "banned_by":
        null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "dqlu3s6",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Grimnur87",
        "can_mod_post": false, "created_utc": 1512133981.0, "send_replies": true,
        "parent_id": "t1_dqlq7z2", "score": 1, "author_fullname": "t2_eyiuto8", "report_reasons":
        null, "approved_by": null, "all_awardings": [], "collapsed": false, "body":
        "Good to know. Same approach here, at least the crux lines. I did use an `each_cons(2)`
        in the first part. This is neater.", "awarders": [], "top_awarded_type": null,
        "author_flair_css_class": null, "author_patreon_flair": false, "downs": 0,
        "author_flair_richtext": [], "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Good to know. Same approach here, at least the crux
        lines. I did use an &lt;code&gt;each_cons(2)&lt;/code&gt; in the first part.
        This is neater.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "gildings": {}, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/7gsrc2/2017_day_1_solutions/dqlu3s6/",
        "subreddit_type": "public", "locked": false, "name": "t1_dqlu3s6", "created":
        1512133981.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_7gsrc2", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], true]],
        [0, 12, "attr", "things"], [12, 13, "call", ["t1_dqlu3s6"]], [13, 14, "attr",
        "focus"], [14, 15, "call", []], [0, 16, "attr", "things"], [16, 17, "call",
        ["None"]], [17, 18, "attr", "filter"], [18, 19, "call", [".morechildren"]],
        [19, 20, "attr", "remove"], [20, 21, "call", []]], "success": true}'
  recorded_at: Sat, 08 Mar 2025 23:31:45 GMT
recorded_with: VCR 6.3.1
