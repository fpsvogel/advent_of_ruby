---
http_interactions:
- request:
    method: post
    uri: https://www.reddit.com/api/v1/access_token
    body:
      encoding: UTF-8
      string: grant_type=password&username=fpsvogel&password=stubbed_reddit_password
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Authorization:
      - Basic Ukpwcjc0Zjl6TFBXQzNjcUVCLXFsdzpGQm5kLWdnR2JrWF9na1RRVVIxV2hGeFo1emRRNkE=
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '26'
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      accept-ranges:
      - bytes
      date:
      - Sun, 09 Mar 2025 05:15:31 GMT
      via:
      - 1.1 varnish
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - edgebucket=Dh7VCsIaMJWzjLBmsd; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '{"error": "invalid_grant"}'
  recorded_at: Sun, 09 Mar 2025 05:15:31 GMT
- request:
    method: get
    uri: https://oauth.reddit.com/r/adventofcode/comments/3v3w2f/day_2_solutions.json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - AdventOfRubyScript/0.2.0 by fpsvogel
      Accept:
      - application/json
      Authorization:
      - 'Bearer '
  response:
    status:
      code: 200
      message: OK
    headers:
      connection:
      - keep-alive
      content-length:
      - '73366'
      x-ua-compatible:
      - IE=edge
      content-type:
      - application/json; charset=UTF-8
      expires:
      - "-1"
      cache-control:
      - private, s-maxage=0, max-age=0, must-revalidate, no-store
      access-control-allow-origin:
      - "*"
      access-control-expose-headers:
      - X-Moose
      content-encoding:
      - gzip
      x-ratelimit-used:
      - '35'
      x-ratelimit-remaining:
      - '65.0'
      x-ratelimit-reset:
      - '268'
      accept-ranges:
      - bytes
      date:
      - Sun, 09 Mar 2025 05:15:33 GMT
      via:
      - 1.1 varnish
      vary:
      - accept-encoding
      strict-transport-security:
      - max-age=31536000; includeSubdomains
      x-content-type-options:
      - nosniff
      x-frame-options:
      - SAMEORIGIN
      x-xss-protection:
      - 1; mode=block
      set-cookie:
      - loid=000000001kt57exsuu.2.1741497331976.Z0FBQUFBQm56U1AxX0Ftem8zWVd2c2xpRllsSlg0RnJldG5mZUFzQTRLZV91UlBPWExvSEJjaF9Ucmg0VUc4eUozM2l4aklKQ0p4WmNHX0lDd0xnV0dVZm5nNlFtNUJKaHhYOGd1aDlrbzFNdDB1Y1cyYkV5eGxPc0xiMG9ndzhXYmFVcGRST3daQUo;
        Domain=reddit.com; Max-Age=63071999; Path=/; expires=Tue, 09-Mar-2027 05:15:33
        GMT; secure; SameSite=None; Secure, session_tracker=kefdamnplgeeqbmlpa.0.1741497331989.Z0FBQUFBQm56U1AxeGF4OGQtRnFHSVg4YVBVODhvSm5JaGNSWmZOeXoyMTZSeGpyUC15bEhuQUx4b1oxRTIyMGNmWmxCQ1laLTRfUk1Ba0Z1Y211Nk5sNW55VENSeXdybnlEQVZzNjBlQ3cxQzRRSkZ0ODFvYkM3RW5QZVQzbmFQOU5zMFZWUzB2Rm4;
        Domain=reddit.com; Max-Age=7199; Path=/; expires=Sun, 09-Mar-2025 07:15:33
        GMT; secure; SameSite=None; Secure, csv=2; Max-Age=63072000; Domain=.reddit.com;
        Path=/; Secure; SameSite=None, edgebucket=UU7t3HZYCEGKeE14Nq; Domain=reddit.com;
        Max-Age=63071999; Path=/;  secure
      server:
      - snooserv
      report-to:
      - '{"group": "w3-reporting-nel", "max_age": 14400, "include_subdomains": true,  "endpoints":
        [{ "url": "https://w3-reporting-nel.reddit.com/reports" }]}, {"group": "w3-reporting",
        "max_age": 14400, "include_subdomains": true, "endpoints": [{ "url": "https://w3-reporting.reddit.com/reports"
        }]}, {"group": "w3-reporting-csp", "max_age": 14400, "include_subdomains":
        true, "endpoints": [{ "url": "https://w3-reporting-csp.reddit.com/reports"
        }]}'
      nel:
      - '{"report_to": "w3-reporting-nel", "max_age": 14400, "include_subdomains":
        false, "success_fraction": 1.0, "failure_fraction": 1.0}'
    body:
      encoding: UTF-8
      string: '[{"kind": "Listing", "data": {"after": null, "dist": 1, "modhash":
        "", "geo_filter": "", "children": [{"kind": "t3", "data": {"approved_at_utc":
        null, "subreddit": "adventofcode", "selftext": "Hi!\nI would like to structure
        posts like the [first one](https://www.reddit.com/r/programming/comments/3uyl7s/daily_programming_puzzles_at_advent_of_code/
        ) in r/programming, please post solutions in comments.", "user_reports": [],
        "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title":
        "Day 2 solutions", "link_flair_richtext": [], "subreddit_name_prefixed": "r/adventofcode",
        "hidden": false, "pwls": 6, "link_flair_css_class": "flair-spoilers", "downs":
        0, "top_awarded_type": null, "hide_score": false, "name": "t3_3v3w2f", "quarantine":
        false, "link_flair_text_color": null, "upvote_ratio": 0.86, "author_flair_background_color":
        null, "subreddit_type": "public", "ups": 14, "total_awards_received": 0, "media_embed":
        {}, "author_flair_template_id": null, "is_original_content": false, "author_fullname":
        "t2_6nadw", "secure_media": null, "is_reddit_media_domain": false, "is_meta":
        false, "category": null, "secure_media_embed": {}, "link_flair_text": "Spoilers",
        "can_mod_post": false, "score": 14, "approved_by": null, "is_created_from_ads_ui":
        false, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class":
        null, "author_flair_richtext": [], "gildings": {}, "content_categories": null,
        "is_self": true, "mod_note": null, "created": 1449036201.0, "link_flair_type":
        "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type":
        "text", "domain": "self.adventofcode", "allow_live_comments": false, "selftext_html":
        "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi!\nI would like to
        structure posts like the &lt;a href=\"https://www.reddit.com/r/programming/comments/3uyl7s/daily_programming_puzzles_at_advent_of_code/\"&gt;first
        one&lt;/a&gt; in &lt;a href=\"/r/programming\"&gt;r/programming&lt;/a&gt;,
        please post solutions in comments.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
        "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count":
        null, "archived": true, "no_follow": false, "is_crosspostable": false, "pinned":
        false, "over_18": false, "all_awardings": [], "awarders": [], "media_only":
        false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text":
        null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports":
        null, "distinguished": null, "subreddit_id": "t5_3b3wa", "author_is_blocked":
        false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color":
        null, "id": "3v3w2f", "is_robot_indexable": true, "num_duplicates": 0, "report_reasons":
        null, "author": "taliriktug", "discussion_type": null, "num_comments": 163,
        "send_replies": true, "media": null, "contest_mode": false, "author_patreon_flair":
        false, "author_flair_text_color": null, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/",
        "stickied": false, "url": "https://www.reddit.com/r/adventofcode/comments/3v3w2f/day_2_solutions/",
        "subreddit_subscribers": 131310, "created_utc": 1449036201.0, "num_crossposts":
        0, "mod_reports": [], "is_video": false}}], "before": null}}, {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "cxk6xmg",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": false, "author": "markz440",
        "can_mod_post": false, "created_utc": 1449044078.0, "send_replies": true,
        "parent_id": "t3_3v3w2f", "score": 12, "author_fullname": "t2_sm0pp", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "And
        how about Linux one-liners\n\n**Area**\n\n    awk -F \"x\" \\\n        ''{
        a[1]=$1;a[2]=$2;a[3]=$3; asort(a,s); area += 2*s[1]*s[2] + 2*s[1]*s[3] + 2*s[2]*s[3]
        + s[1]*s[2]  } \\\n        END { print area }'' day2.dat\n\n\n**Ribbon**\n    \n    awk
        -F \"x\" \\\n        ''{ a[1]=$1;a[2]=$2;a[3]=$3; asort(a,s); ribbon += 2*s[1]+2*s[2]
        + s[1]*s[2]*s[3] } \\\n        END { print ribbon }'' day2.dat", "edited":
        1449044330.0, "top_awarded_type": null, "author_flair_css_class": null, "name":
        "t1_cxk6xmg", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;And
        how about Linux one-liners&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Area&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;awk
        -F &amp;quot;x&amp;quot; \\\n    &amp;#39;{ a[1]=$1;a[2]=$2;a[3]=$3; asort(a,s);
        area += 2*s[1]*s[2] + 2*s[1]*s[3] + 2*s[2]*s[3] + s[1]*s[2]  } \\\n    END
        { print area }&amp;#39; day2.dat\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Ribbon&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;awk
        -F &amp;quot;x&amp;quot; \\\n    &amp;#39;{ a[1]=$1;a[2]=$2;a[3]=$3; asort(a,s);
        ribbon += 2*s[1]+2*s[2] + s[1]*s[2]*s[3] } \\\n    END { print ribbon }&amp;#39;
        day2.dat\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk6xmg/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449044078.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 12}}, {"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "cxl29bf", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "stuque",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_cxl0or9", "score":
        2, "author_fullname": "t2_v3c7", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Maybe. I find the two-lines
        clearer than the single-line solution.", "edited": false, "top_awarded_type":
        null, "downs": 0, "author_flair_css_class": null, "name": "t1_cxl29bf", "is_submitter":
        false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Maybe. I find the two-lines
        clearer than the single-line solution.&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxl29bf/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449102336.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449102336.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxm5ova", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "rafblecher", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_cxl0or9", "score": 2, "author_fullname": "t2_l20a9",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "I usually go for\n\n    l, w, h = map(int, line.split(''x''))",
        "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_cxm5ova", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        usually go for&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;l, w, h = map(int, line.split(&amp;#39;x&amp;#39;))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxm5ova/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449179567.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449179567.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxl0or9", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "volatilebit", "can_mod_post": false, "created_utc":
        1449099809.0, "send_replies": true, "parent_id": "t1_cxk4a6i", "score": 2,
        "author_fullname": "t2_44keq", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Would this code\n\n    l,
        w, h = line.split(''x'')\n    l, w, h = int(l), int(w), int(h)\nbe more \"pythonic\"
        written as...\n\n    l, w, h = [int(i) for i in line.split(''x'')]", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxl0or9",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Would this code&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;l,
        w, h = line.split(&amp;#39;x&amp;#39;)\nl, w, h = int(l), int(w), int(h)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;be
        more &amp;quot;pythonic&amp;quot; written as...&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;l,
        w, h = [int(i) for i in line.split(&amp;#39;x&amp;#39;)]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxl0or9/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449099809.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "cxku5yk", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Bonooru",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_cxk5g38", "score":
        1, "author_fullname": "t2_6xy07", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "collapsed": false, "body": "When the
        program ends, the file is closed. So, you should be fine.", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxku5yk",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;When the program ends,
        the file is closed. So, you should be fine.&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxku5yk/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449090465.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449090465.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxk5g38", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "stuque", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_cxk5bny", "score": 3, "author_fullname": "t2_v3c7",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "As far as I know, Python automatically closes files when they
        become garbage, so an explicit close isn''t needed. Using \"with\" is useful
        in larger programs, but in small one-shot scripts I think it''s overkill.",
        "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_cxk5g38", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;As
        far as I know, Python automatically closes files when they become garbage,
        so an explicit close isn&amp;#39;t needed. Using &amp;quot;with&amp;quot;
        is useful in larger programs, but in small one-shot scripts I think it&amp;#39;s
        overkill.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null,
        "distinguished": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "link_id": "t3_3v3w2f", "unrepliable_reason": null,
        "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk5g38/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449039350.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449039350.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxk5bny", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "sinjp", "can_mod_post": false, "created_utc":
        1449039007.0, "send_replies": true, "parent_id": "t1_cxk4a6i", "score": 1,
        "author_fullname": "t2_sl1kc", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "I like it! A minor comment
        - should the file be opened using With instead? i.e. there''s currently no
        close()\n\n    with open(''day2input.txt'') as input:\n        for line in
        input:", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxk5bny", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        like it! A minor comment - should the file be opened using With instead? i.e.
        there&amp;#39;s currently no close()&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;with
        open(&amp;#39;day2input.txt&amp;#39;) as input:\n    for line in input:\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk5bny/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449039007.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 1, "removal_reason": null, "link_id": "t3_3v3w2f",
        "author_flair_template_id": null, "likes": null, "replies": {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "cxkrcoi",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "larivact",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_cxkpnjx", "score":
        2, "author_fullname": "t2_niazw", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "collapsed": false, "body": "That''s
        probably because there is a \" missing at the end.", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxkrcoi", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s probably because
        there is a &amp;quot; missing at the end.&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkrcoi/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449086717.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449086717.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxkpnjx", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "[deleted]", "can_mod_post": false, "created_utc":
        1449084433.0, "send_replies": true, "parent_id": "t1_cxkone0", "score": 1,
        "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "the stormlight in this thread has faded", "edited": 1474829126.0,
        "author_flair_css_class": null, "downs": 0, "is_submitter": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;the stormlight in this thread has faded&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkpnjx/",
        "num_reports": null, "locked": false, "name": "t1_cxkpnjx", "created": 1449084433.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "collapsed": false, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "cxkone0", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "larivact", "can_mod_post": false, "created_utc":
        1449083030.0, "send_replies": true, "parent_id": "t1_cxk4a6i", "score": 1,
        "author_fullname": "t2_niazw", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "I like your code. Here''s
        mine:\n\n    wrappingPaperNeeded = 0\n    ribbonNeeded = 0\n\n    for line
        in open(''day2.txt''):\n        args = line.split(''x'')\n        length,
        width, height = int(args[0]), int(args[1]), int(args[2])\n\n        #Part
        1\n        sideAreas = [width*length, width*height, length*height]\n        wrappingPaperNeeded
        += 2 * sum(sideAreas) + min(sideAreas)\n\n        #Part 2\n        volume
        = length * width * height\n        ribbonNeeded += 2 * min(width+length, width+height,
        length+height) + volume\n\n    print \"\\nBuying list\"\n    print \"-----------\"\n    print
        \"Square feets of wrapping paper:\",wrappingPaperNeeded\n    print \"Feets
        of ribbon needed:\",ribbonNeeded", "edited": 1449083342.0, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxkone0", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I like your code. Here&amp;#39;s
        mine:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;wrappingPaperNeeded = 0\nribbonNeeded
        = 0\n\nfor line in open(&amp;#39;day2.txt&amp;#39;):\n    args = line.split(&amp;#39;x&amp;#39;)\n    length,
        width, height = int(args[0]), int(args[1]), int(args[2])\n\n    #Part 1\n    sideAreas
        = [width*length, width*height, length*height]\n    wrappingPaperNeeded +=
        2 * sum(sideAreas) + min(sideAreas)\n\n    #Part 2\n    volume = length *
        width * height\n    ribbonNeeded += 2 * min(width+length, width+height, length+height)
        + volume\n\nprint &amp;quot;\\nBuying list&amp;quot;\nprint &amp;quot;-----------&amp;quot;\nprint
        &amp;quot;Square feets of wrapping paper:&amp;quot;,wrappingPaperNeeded\nprint
        &amp;quot;Feets of ribbon needed:&amp;quot;,ribbonNeeded\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkone0/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449083030.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 1, "removal_reason": null, "link_id": "t3_3v3w2f", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "cxmagy6", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_cxk4a6i", "score":
        1, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "I also went for Python, here''s what I did (both of the
        parts are combined).\n\nI went for splitting the numbers by regular expression
        groups, because that''s just where my mind goes! Doing the line split is a
        cleaner approach, IMO.\n\n    import re\n\n    totalPaper = 0\n    totalRibbon
        = 0\n    with open(''day2input.txt'') as file:\n        for line in file:\n            m
        = re.search(\"(\\d{1,3})x(\\d{1,3})x(\\d{1,3})\", line)\n        \n            l
        = int(m.group(1))\n            w = int(m.group(2))\n            h = int(m.group(3))\n\n            sides
        = [l, w, h]\n            perims = [2*l + 2*w, 2*w + 2*h,2*h + 2*l]\n        \n            sides.sort()\n            perims.sort()\n        \n            slack
        = sides[0] * sides[1]\n        \n            totalPaper += 2*(l*w) + 2*(w*h)
        + 2*(h*l) + slack\n            totalRibbon += (l*w*h) + perims[0]\n        \n\n    print
        \"Paper: %d\" %(totalPaper)\n    print \"Ribbon: %d\" %(totalRibbon)", "edited":
        false, "author_flair_css_class": null, "collapsed": false, "downs": 0, "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I also went for Python,
        here&amp;#39;s what I did (both of the parts are combined).&lt;/p&gt;\n\n&lt;p&gt;I
        went for splitting the numbers by regular expression groups, because that&amp;#39;s
        just where my mind goes! Doing the line split is a cleaner approach, IMO.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        re\n\ntotalPaper = 0\ntotalRibbon = 0\nwith open(&amp;#39;day2input.txt&amp;#39;)
        as file:\n    for line in file:\n        m = re.search(&amp;quot;(\\d{1,3})x(\\d{1,3})x(\\d{1,3})&amp;quot;,
        line)\n\n        l = int(m.group(1))\n        w = int(m.group(2))\n        h
        = int(m.group(3))\n\n        sides = [l, w, h]\n        perims = [2*l + 2*w,
        2*w + 2*h,2*h + 2*l]\n\n        sides.sort()\n        perims.sort()\n\n        slack
        = sides[0] * sides[1]\n\n        totalPaper += 2*(l*w) + 2*(w*h) + 2*(h*l)
        + slack\n        totalRibbon += (l*w*h) + perims[0]\n\n\nprint &amp;quot;Paper:
        %d&amp;quot; %(totalPaper)\nprint &amp;quot;Ribbon: %d&amp;quot; %(totalRibbon)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxmagy6/",
        "num_reports": null, "locked": false, "name": "t1_cxmagy6", "created": 1449186987.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1449186987.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "cxk4a6i", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "stuque", "can_mod_post": false, "created_utc":
        1449036367.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 5,
        "author_fullname": "t2_v3c7", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Here''s a Python solution:\n\n    def day2_1():\n        total
        = 0\n        for line in open(''day2input.txt''):\n            l, w, h = line.split(''x'')\n            l,
        w, h = int(l), int(w), int(h)\n            area = 2*l*w + 2*w*h + 2*h*l\n            slack
        = min(l*w, w*h, h*l)\n            total += area + slack\n        print total\n\n    def
        day2_2():\n        total = 0\n        for line in open(''day2input.txt''):\n            l,
        w, h = line.split(''x'')\n            l, w, h = int(l), int(w), int(h)\n            ribbon
        = 2 * min(l+w, w+h, h+l)\n            bow = l*w*h\n            total += ribbon
        + bow\n        print total\n\n    if __name__ == ''__main__'':\n        day2_1()\n        day2_2()",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_cxk4a6i", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s
        a Python solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def day2_1():\n    total
        = 0\n    for line in open(&amp;#39;day2input.txt&amp;#39;):\n        l, w,
        h = line.split(&amp;#39;x&amp;#39;)\n        l, w, h = int(l), int(w), int(h)\n        area
        = 2*l*w + 2*w*h + 2*h*l\n        slack = min(l*w, w*h, h*l)\n        total
        += area + slack\n    print total\n\ndef day2_2():\n    total = 0\n    for
        line in open(&amp;#39;day2input.txt&amp;#39;):\n        l, w, h = line.split(&amp;#39;x&amp;#39;)\n        l,
        w, h = int(l), int(w), int(h)\n        ribbon = 2 * min(l+w, w+h, h+l)\n        bow
        = l*w*h\n        total += ribbon + bow\n    print total\n\nif __name__ ==
        &amp;#39;__main__&amp;#39;:\n    day2_1()\n    day2_2()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk4a6i/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449036367.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 5}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 1, "removal_reason": null, "link_id": "t3_3v3w2f",
        "author_flair_template_id": null, "likes": null, "replies": "", "user_reports":
        [], "saved": false, "id": "cxk4b9h", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "[deleted]", "can_mod_post": false, "send_replies": true,
        "parent_id": "t1_cxk4990", "score": 1, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "You could
        just make a list of the two smallest components as you go.", "edited": false,
        "author_flair_css_class": null, "collapsed": false, "downs": 0, "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You could just make
        a list of the two smallest components as you go.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk4b9h/",
        "num_reports": null, "locked": false, "name": "t1_cxk4b9h", "created": 1449036441.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1449036441.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxkgail", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Arrem_", "can_mod_post": false, "created_utc":
        1449071128.0, "send_replies": true, "parent_id": "t1_cxk4990", "score": 1,
        "author_fullname": "t2_d2txr", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Ah nice, a Rust solution.
        :)\n\n\nBut yeah, at one point or another, you''re gonna need a sort/comparison
        in there. Unless someone thinks of something truly magical. As for performance,
        I assume that a 3 input sorting network might be a tiny bit faster than a
        sort, but meh, it doesn''t really matter here and the `.sort()` looks a bit
        cleaner.", "edited": 1449071770.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxkgail", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ah
        nice, a Rust solution. :)&lt;/p&gt;\n\n&lt;p&gt;But yeah, at one point or
        another, you&amp;#39;re gonna need a sort/comparison in there. Unless someone
        thinks of something truly magical. As for performance, I assume that a 3 input
        sorting network might be a tiny bit faster than a sort, but meh, it doesn&amp;#39;t
        really matter here and the &lt;code&gt;.sort()&lt;/code&gt; looks a bit cleaner.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkgail/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449071128.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxl47kw", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "minno", "can_mod_post": false, "created_utc":
        1449105404.0, "send_replies": true, "parent_id": "t1_cxk4990", "score": 1,
        "author_fullname": "t2_4rhvq", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "I made a more imperative version
        [here](https://bitbucket.org/minno/advent-of-code/src/bb551410ff252d72e631c8e1d509311312270eb1/src/day2.rs?fileviewer=file-view-default).
        Please excuse my horrendous abuse of `unwrap`.", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxl47kw", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I made a more imperative version
        &lt;a href=\"https://bitbucket.org/minno/advent-of-code/src/bb551410ff252d72e631c8e1d509311312270eb1/src/day2.rs?fileviewer=file-view-default\"&gt;here&lt;/a&gt;.
        Please excuse my horrendous abuse of &lt;code&gt;unwrap&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxl47kw/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449105404.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxls7ae", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "SimonWoodburyForget", "can_mod_post":
        false, "created_utc": 1449160492.0, "send_replies": true, "parent_id": "t1_cxk4990",
        "score": 1, "author_fullname": "t2_itegn", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "**Rust**\n\nI tried
        to use combine/num to implement it to but ended up giving up and doing it
        how i am used to, iteratively done in a idiomatic python way. My heads just
        not there yet.\n\n    fn open_to_string&lt;P&gt;(file_path: P) -&gt; String\n    where
        P: AsRef&lt;Path&gt; {\n        let mut file = File::open(file_path).unwrap();\n        let
        mut inputs = String::new();\n        file.read_to_string(&amp;mut inputs).unwrap();\n        inputs\n    }\n\n    fn
        calc_gift_materials(inputs: &amp;String) -&gt; (u32, u32) {\n        let mut
        total_wrap = 0;\n        let mut total_ribbon = 0;\n        for line in inputs.lines()
        {\n\n            let mut dimensions = [0; 3];\n            for (i, v) in line.split(''x'').enumerate()
        {\n                let value = v.parse::&lt;u32&gt;().unwrap();\n                dimensions[i]
        = value;\n            }\n\n            dimensions.sort();\n            let
        x = dimensions[0];\n            let y = dimensions[1];\n            let z
        = dimensions[2]; // largest\n\n            // ( dimentions wrapping ) + (
        extra slack )\n            total_wrap += (2*x*y + 2*y*z + 2*z*x) + (x*y);\n            //
        ( ribbon to wrap gift ) + ( bow tie )\n            total_ribbon += (x + x
        + y + y) + (x*y*z);\n        }\n        (total_wrap, total_ribbon)\n    }\n\n    fn
        main() {\n        let inputs = open_to_string(\"inputs/day2.txt\");\n        let
        (total_wrap, total_ribbon) = calc_gift_materials(&amp;inputs);\n\n        println!(\"{}
        feets of wrapping\", total_wrap);\n        println!(\"{} feets of ribbon\",
        total_ribbon);\n    }", "edited": 1449162691.0, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_cxls7ae", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Rust&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I
        tried to use combine/num to implement it to but ended up giving up and doing
        it how i am used to, iteratively done in a idiomatic python way. My heads
        just not there yet.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fn open_to_string&amp;lt;P&amp;gt;(file_path:
        P) -&amp;gt; String\nwhere P: AsRef&amp;lt;Path&amp;gt; {\n    let mut file
        = File::open(file_path).unwrap();\n    let mut inputs = String::new();\n    file.read_to_string(&amp;amp;mut
        inputs).unwrap();\n    inputs\n}\n\nfn calc_gift_materials(inputs: &amp;amp;String)
        -&amp;gt; (u32, u32) {\n    let mut total_wrap = 0;\n    let mut total_ribbon
        = 0;\n    for line in inputs.lines() {\n\n        let mut dimensions = [0;
        3];\n        for (i, v) in line.split(&amp;#39;x&amp;#39;).enumerate() {\n            let
        value = v.parse::&amp;lt;u32&amp;gt;().unwrap();\n            dimensions[i]
        = value;\n        }\n\n        dimensions.sort();\n        let x = dimensions[0];\n        let
        y = dimensions[1];\n        let z = dimensions[2]; // largest\n\n        //
        ( dimentions wrapping ) + ( extra slack )\n        total_wrap += (2*x*y +
        2*y*z + 2*z*x) + (x*y);\n        // ( ribbon to wrap gift ) + ( bow tie )\n        total_ribbon
        += (x + x + y + y) + (x*y*z);\n    }\n    (total_wrap, total_ribbon)\n}\n\nfn
        main() {\n    let inputs = open_to_string(&amp;quot;inputs/day2.txt&amp;quot;);\n    let
        (total_wrap, total_ribbon) = calc_gift_materials(&amp;amp;inputs);\n\n    println!(&amp;quot;{}
        feets of wrapping&amp;quot;, total_wrap);\n    println!(&amp;quot;{} feets
        of ribbon&amp;quot;, total_ribbon);\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxls7ae/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449160492.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxk4990", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "taliriktug", "can_mod_post": false, "created_utc":
        1449036306.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 4,
        "author_fullname": "t2_6nadw", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Here is my \"kinda\" FP solutions in Rust.
        Is it possible to avoid sort at all?\n\n    fn how_many_paper_fp() -&gt; i32
        {\n        let f = File::open(\"input\").unwrap();\n        let reader = BufReader::new(f);\n\n        reader.lines().map(|line|
        {\n            let mut dimensions = get_dimensions(line.unwrap());\n            dimensions.sort();\n            dimensions\n        })\n        .fold(0,
        |acc, x| acc + 3 * x[0] * x[1]\n                              + 2 * x[1] *
        x[2]\n                              + 2 * x[0] * x[2])\n    }\n\n    fn how_many_ribbon_fp()
        -&gt; i32 {\n        let f = File::open(\"input\").unwrap();\n        let
        reader = BufReader::new(f);\n\n        reader.lines().map(|line| {\n            let
        mut dimensions = get_dimensions(line.unwrap());\n            dimensions.sort();\n            dimensions\n        })\n        .fold(0,
        |acc, x| acc + 2 * x[0]\n                              + 2 * x[1]\n                              +
        x[0] * x[1] * x[2])\n    }", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxk4990", "is_submitter": true, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here
        is my &amp;quot;kinda&amp;quot; FP solutions in Rust. Is it possible to avoid
        sort at all?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fn how_many_paper_fp() -&amp;gt;
        i32 {\n    let f = File::open(&amp;quot;input&amp;quot;).unwrap();\n    let
        reader = BufReader::new(f);\n\n    reader.lines().map(|line| {\n        let
        mut dimensions = get_dimensions(line.unwrap());\n        dimensions.sort();\n        dimensions\n    })\n    .fold(0,
        |acc, x| acc + 3 * x[0] * x[1]\n                          + 2 * x[1] * x[2]\n                          +
        2 * x[0] * x[2])\n}\n\nfn how_many_ribbon_fp() -&amp;gt; i32 {\n    let f
        = File::open(&amp;quot;input&amp;quot;).unwrap();\n    let reader = BufReader::new(f);\n\n    reader.lines().map(|line|
        {\n        let mut dimensions = get_dimensions(line.unwrap());\n        dimensions.sort();\n        dimensions\n    })\n    .fold(0,
        |acc, x| acc + 2 * x[0]\n                          + 2 * x[1]\n                          +
        x[0] * x[1] * x[2])\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk4990/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449036306.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 4}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "cxkm2dr",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "taliriktug",
        "can_mod_post": false, "created_utc": 1449079481.0, "send_replies": true,
        "parent_id": "t1_cxk7mm1", "score": 1, "author_fullname": "t2_6nadw", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Your solutions amaze me two days successively. I can''t build such beautiful
        chains.", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxkm2dr", "is_submitter": true, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Your
        solutions amaze me two days successively. I can&amp;#39;t build such beautiful
        chains.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null,
        "distinguished": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "link_id": "t3_3v3w2f", "unrepliable_reason": null,
        "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkm2dr/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449079481.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxk7mm1", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": false, "author": "xkufix", "can_mod_post": false, "created_utc":
        1449046648.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 5,
        "author_fullname": "t2_d541m", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Like yesterday, my solution in scala.\n\n    val
        presents = Source.fromFile(\"input.txt\").getLines().toList().filter(_ !=
        \"\").map(_.split(\"x\").map(_.toInt))\n\n    //part 1\n    presents.map(a
        =&gt; Seq(a(0) * a(1), a(0) * a(2), a(1) * a(2))).map(b =&gt; b.map(_ * 2)
        :+ b.min).flatten.sum\n\n    //part 2\n    present.map(_.sorted).map(a =&gt;
        a(0)*2 + a(1) * 2 + a.reduceLeft(_ * _)).sum", "edited": 1449047223.0, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxk7mm1", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Like yesterday, my solution
        in scala.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;val presents = Source.fromFile(&amp;quot;input.txt&amp;quot;).getLines().toList().filter(_
        != &amp;quot;&amp;quot;).map(_.split(&amp;quot;x&amp;quot;).map(_.toInt))\n\n//part
        1\npresents.map(a =&amp;gt; Seq(a(0) * a(1), a(0) * a(2), a(1) * a(2))).map(b
        =&amp;gt; b.map(_ * 2) :+ b.min).flatten.sum\n\n//part 2\npresent.map(_.sorted).map(a
        =&amp;gt; a(0)*2 + a(1) * 2 + a.reduceLeft(_ * _)).sum\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk7mm1/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449046648.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 5}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 3, "removal_reason": null, "link_id": "t3_3v3w2f", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "cxkaur7",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "lucasaxm",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_cxk9pkg", "score":
        3, "author_fullname": "t2_at4h3", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "I didn''t know you could put
        the result of split in different vars like you did. Nice to learn something
        here =)", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_cxkaur7", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        didn&amp;#39;t know you could put the result of split in different vars like
        you did. Nice to learn something here =)&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkaur7/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449059606.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449059606.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxk9pkg", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "haitei", "can_mod_post": false, "created_utc":
        1449055449.0, "send_replies": true, "parent_id": "t1_cxk4h75", "score": 3,
        "author_fullname": "t2_9tbj6", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "My solutions:\n\n    puts
        STDIN.read.lines.map { |ln| \n        w,h,l = ln.split(''x'').map{ |str| str.to_i
        }.sort\n        3*w*h + 2*w*l + 2*h*l\n    }.inject(:+)\n\n-\n\n    puts STDIN.read.lines.map
        { |ln| \n        w,h,l = ln.split(''x'').map{ |str| str.to_i }.sort\n        2*w+2*h+w*h*l\n    }.inject(:+)",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_cxk9pkg", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My
        solutions:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;puts STDIN.read.lines.map {
        |ln| \n    w,h,l = ln.split(&amp;#39;x&amp;#39;).map{ |str| str.to_i }.sort\n    3*w*h
        + 2*w*l + 2*h*l\n}.inject(:+)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h2&gt;&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;puts
        STDIN.read.lines.map { |ln| \n    w,h,l = ln.split(&amp;#39;x&amp;#39;).map{
        |str| str.to_i }.sort\n    2*w+2*h+w*h*l\n}.inject(:+)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk9pkg/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449055449.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "cxkbbsu",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "haitei",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_cxkaf6g", "score":
        1, "author_fullname": "t2_9tbj6", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "    m.combination(2).map{
        |x| x.reduce(:*) }.reduce(:+)*2 + m.take(2).reduce(:*)\n\nI did something
        like this at first but in the end\n\n    2*m[0]*m[1] + 2*m[0]*m[2] + 2*m[1]*m[2]
        + m[0]*m[1]\n\nis just shorter and more readable :x\n", "edited": false, "top_awarded_type":
        null, "downs": 0, "author_flair_css_class": null, "name": "t1_cxkbbsu", "is_submitter":
        false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;m.combination(2).map{
        |x| x.reduce(:*) }.reduce(:+)*2 + m.take(2).reduce(:*)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I
        did something like this at first but in the end&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;2*m[0]*m[1]
        + 2*m[0]*m[2] + 2*m[1]*m[2] + m[0]*m[1]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is
        just shorter and more readable :x&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkbbsu/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449061062.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449061062.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxkaf6g", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "lucasaxm", "can_mod_post": false, "created_utc":
        1449058167.0, "send_replies": true, "parent_id": "t1_cxk4h75", "score": 2,
        "author_fullname": "t2_at4h3", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "I solved using Ruby too\n\n    #!/usr/bin/env
        ruby\n    part1=0\n    part2=0\n    ARGV[0] &amp;&amp; File.foreach(ARGV[0])
        do |line|\n        m = line.split(\"x\").map!{ |x| x.to_i }.sort\n        part1+=(
        m.combination(2).map{ |x| x.reduce(:*) }.reduce(:+)*2 + m.take(2).reduce(:*)
        )\n        part2+=( (m[0]+m[1])*2 + m.reduce(:*) )\n    end\n    puts \"Part
        1: #{part1}\"\n    puts \"Part 2: #{part2}\"", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxkaf6g", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I solved using Ruby too&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/usr/bin/env
        ruby\npart1=0\npart2=0\nARGV[0] &amp;amp;&amp;amp; File.foreach(ARGV[0]) do
        |line|\n    m = line.split(&amp;quot;x&amp;quot;).map!{ |x| x.to_i }.sort\n    part1+=(
        m.combination(2).map{ |x| x.reduce(:*) }.reduce(:+)*2 + m.take(2).reduce(:*)
        )\n    part2+=( (m[0]+m[1])*2 + m.reduce(:*) )\nend\nputs &amp;quot;Part 1:
        #{part1}&amp;quot;\nputs &amp;quot;Part 2: #{part2}&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkaf6g/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449058167.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxk4h75", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        "DELETED", "no_follow": true, "author": "[deleted]", "can_mod_post": false,
        "send_replies": true, "parent_id": "t3_3v3w2f", "score": 3, "approved_by":
        null, "report_reasons": null, "all_awardings": [], "subreddit_id": "t5_3b3wa",
        "body": "[deleted]", "edited": false, "downs": 0, "author_flair_css_class":
        null, "collapsed": true, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk4h75/",
        "num_reports": null, "locked": false, "name": "t1_cxk4h75", "created": 1449036826.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1449036826.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxk5438", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "tehjimmeh", "can_mod_post": false, "created_utc":
        1449038435.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 3,
        "author_fullname": "t2_49ft0", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "In PowerShell one-liners:\n\nPart 1:\n\n    \"&lt;paste
        input here&gt;\" -split \"`n\" |\n        %{ ,([int[]]($_ -split \"x\") |
        sort) } |\n        %{ 3*$_[0]*$_[1] + 2*$_[0]*$_[2] + 2*$_[1]*$_[2] } | measure
        -sum | % Sum\n\nPart 2:\n\n    \"&lt;paste input here&gt;\" -split \"`n\"
        |\n        %{ ,([int[]]($_ -split \"x\") | sort) } |\n        %{ 2*$_[0] +
        2*$_[1] + $_[0]*$_[1]*$_[2] } | measure -sum | % Sum", "edited": 1449045699.0,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxk5438",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In PowerShell one-liners:&lt;/p&gt;\n\n&lt;p&gt;Part
        1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;lt;paste input here&amp;gt;&amp;quot;
        -split &amp;quot;`n&amp;quot; |\n    %{ ,([int[]]($_ -split &amp;quot;x&amp;quot;)
        | sort) } |\n    %{ 3*$_[0]*$_[1] + 2*$_[0]*$_[2] + 2*$_[1]*$_[2] } | measure
        -sum | % Sum\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part 2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;lt;paste
        input here&amp;gt;&amp;quot; -split &amp;quot;`n&amp;quot; |\n    %{ ,([int[]]($_
        -split &amp;quot;x&amp;quot;) | sort) } |\n    %{ 2*$_[0] + 2*$_[1] + $_[0]*$_[1]*$_[2]
        } | measure -sum | % Sum\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk5438/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449038435.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 3, "removal_reason": null, "link_id": "t3_3v3w2f", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 2, "removal_reason": null, "link_id": "t3_3v3w2f",
        "author_flair_template_id": null, "likes": null, "replies": {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "awarders": [], "mod_reason_by": null, "banned_by": null, "ups": 2, "removal_reason":
        null, "link_id": "t3_3v3w2f", "author_flair_template_id": null, "likes": null,
        "replies": "", "user_reports": [], "saved": false, "id": "cxuw410", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "[deleted]", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_cxuan6x", "score": 2, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "I believe
        that for this kind of problems (competition-like challenges) using Crystal
        could be good because the bottleneck is the CPU. But without comparing the
        running programs it''s hard to know what''s going to be the difference.",
        "edited": false, "author_flair_css_class": null, "collapsed": false, "downs":
        0, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        believe that for this kind of problems (competition-like challenges) using
        Crystal could be good because the bottleneck is the CPU. But without comparing
        the running programs it&amp;#39;s hard to know what&amp;#39;s going to be
        the difference.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "subreddit_type": "public",
        "can_gild": false, "top_awarded_type": null, "unrepliable_reason": null, "author_flair_text_color":
        "dark", "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxuw410/",
        "num_reports": null, "locked": false, "name": "t1_cxuw410", "created": 1449801546.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1449801546.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 4, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "cxuan6x", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "1bree", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_cxu3s5t", "score": 1, "author_fullname": "t2_pkst8",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Should crystal be used instead of Ruby when
        executing scripts? Is there a way to determine how much time you''d save if
        you switched (without running a bench mark)", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxuan6x", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Should crystal be used instead
        of Ruby when executing scripts? Is there a way to determine how much time
        you&amp;#39;d save if you switched (without running a bench mark)&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxuan6x/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449769123.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449769123.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxu3s5t", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "[deleted]", "can_mod_post": false, "created_utc":
        1449758836.0, "send_replies": true, "parent_id": "t1_cxtzilx", "score": 2,
        "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "You are right, it almost looks like Ruby. The main differences
        are:\n\n1. the syntactic difference in `map(&amp;.to_i)` vs. `map(&amp;:to_i)`
        (in Crystal it''s just a syntax rewrite, in Ruby it''s converting the symbol
        to a proc). \n2. Using tuples to compute the minimum (`{x, y, z}.min`). In
        Ruby you''d use `[x, y, z].min` which allocates a new array each time (although
        Ruby probably optimizes this to share the array somehow).\n\nBut yes, we try
        to preserve as much as we can from Ruby''s look and feel, but we obviously
        have to change many things for a compiled language.\n\nIn this case the times
        between Crystal and Ruby are almost the same, as this is a small problem.
        But for other days the difference is much higher.", "edited": false, "author_flair_css_class":
        null, "downs": 0, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You
        are right, it almost looks like Ruby. The main differences are:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;the
        syntactic difference in &lt;code&gt;map(&amp;amp;.to_i)&lt;/code&gt; vs. &lt;code&gt;map(&amp;amp;:to_i)&lt;/code&gt;
        (in Crystal it&amp;#39;s just a syntax rewrite, in Ruby it&amp;#39;s converting
        the symbol to a proc). &lt;/li&gt;\n&lt;li&gt;Using tuples to compute the
        minimum (&lt;code&gt;{x, y, z}.min&lt;/code&gt;). In Ruby you&amp;#39;d use
        &lt;code&gt;[x, y, z].min&lt;/code&gt; which allocates a new array each time
        (although Ruby probably optimizes this to share the array somehow).&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;But
        yes, we try to preserve as much as we can from Ruby&amp;#39;s look and feel,
        but we obviously have to change many things for a compiled language.&lt;/p&gt;\n\n&lt;p&gt;In
        this case the times between Crystal and Ruby are almost the same, as this
        is a small problem. But for other days the difference is much higher.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxu3s5t/",
        "num_reports": null, "locked": false, "name": "t1_cxu3s5t", "created": 1449758836.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "collapsed": false, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "cxtzilx", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "1bree", "can_mod_post": false, "created_utc":
        1449747720.0, "send_replies": true, "parent_id": "t1_cxkanka", "score": 1,
        "author_fullname": "t2_pkst8", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Nice one! I forgot about one
        line assignments until day 3. I like how you signed LWH\n\nWhat in your code
        is unique to only crystal? It looks like regular ruby to me", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxtzilx",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nice one! I forgot about
        one line assignments until day 3. I like how you signed LWH&lt;/p&gt;\n\n&lt;p&gt;What
        in your code is unique to only crystal? It looks like regular ruby to me&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxtzilx/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449747720.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxkanka", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "[deleted]", "can_mod_post": false, "send_replies":
        true, "parent_id": "t3_3v3w2f", "score": 3, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "My Crystal
        solution\n\n    # Part 1\n    area = ARGF.each_line.sum do |line|\n      l,
        w, h = line.split(''x'').map(&amp;.to_i)\n      min = {l*w, w*h, h*l}.min\n      2
        * (l*w + w*h + h*l) + min\n    end\n    puts area\n\n    # Part 2\n    length
        = ARGF.each_line.sum do |line|\n      l, w, h = line.split(''x'').map(&amp;.to_i)\n      min
        = {l + w, w + h, h + l}.min\n      2*min + l*w*h\n    end\n    puts length",
        "edited": false, "downs": 0, "author_flair_css_class": null, "collapsed":
        false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My
        Crystal solution&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;# Part 1\narea = ARGF.each_line.sum
        do |line|\n  l, w, h = line.split(&amp;#39;x&amp;#39;).map(&amp;amp;.to_i)\n  min
        = {l*w, w*h, h*l}.min\n  2 * (l*w + w*h + h*l) + min\nend\nputs area\n\n#
        Part 2\nlength = ARGF.each_line.sum do |line|\n  l, w, h = line.split(&amp;#39;x&amp;#39;).map(&amp;amp;.to_i)\n  min
        = {l + w, w + h, h + l}.min\n  2*min + l*w*h\nend\nputs length\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkanka/",
        "num_reports": null, "locked": false, "name": "t1_cxkanka", "created": 1449058953.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1449058953.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "cxkt2ax", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Godspiral",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_cxks2zk", "score":
        1, "author_fullname": "t2_1pvj", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "nice code, and cute trick
        for the pairwise mult.", "edited": false, "top_awarded_type": null, "downs":
        0, "author_flair_css_class": null, "name": "t1_cxkt2ax", "is_submitter": false,
        "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;nice code, and cute trick for
        the pairwise mult.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_3v3w2f", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkt2ax/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1449088975.0,
        "author_flair_text": null, "treatment_tags": [], "created_utc": 1449088975.0,
        "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0, "depth":
        2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxks2zk", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "hoosierEE", "can_mod_post": false, "created_utc":
        1449087683.0, "send_replies": true, "parent_id": "t1_cxkb3qa", "score": 3,
        "author_fullname": "t2_g6ibf", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Nice to see another J-er.  One-liners
        like these seem to increase my ability to comprehend tacit J.  Well, writing
        it anyway.  Reading someone else''s is still very slow.\nHere are mine, where
        `S` is the input string.\nPart one:\n\n    +/({.\"1+([:+/\"1@:+:]))(2*/\\(],{.))\"1/:~\"1]\".&amp;&gt;''x''cut&amp;&gt;cutLF
        S\n\nPart two:\n\n    +/((+:@+/@}:)+(*/))\"1/:~\"1]\".&amp;&gt;''x''cut&amp;&gt;cutLF
        S\n", "edited": 1449093057.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxks2zk", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nice
        to see another J-er.  One-liners like these seem to increase my ability to
        comprehend tacit J.  Well, writing it anyway.  Reading someone else&amp;#39;s
        is still very slow.\nHere are mine, where &lt;code&gt;S&lt;/code&gt; is the
        input string.\nPart one:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;+/({.&amp;quot;1+([:+/&amp;quot;1@:+:]))(2*/\\(],{.))&amp;quot;1/:~&amp;quot;1]&amp;quot;.&amp;amp;&amp;gt;&amp;#39;x&amp;#39;cut&amp;amp;&amp;gt;cutLF
        S\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part two:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;+/((+:@+/@}:)+(*/))&amp;quot;1/:~&amp;quot;1]&amp;quot;.&amp;amp;&amp;gt;&amp;#39;x&amp;#39;cut&amp;amp;&amp;gt;cutLF
        S\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_3v3w2f", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxks2zk/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1449087683.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 3}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "cxkb3qa", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Godspiral",
        "can_mod_post": false, "created_utc": 1449060390.0, "send_replies": true,
        "parent_id": "t3_3v3w2f", "score": 3, "author_fullname": "t2_1pvj", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "In
        J, 1: with input parsing\n\n    +/ +/ (&lt;./, 2&amp;*)\"1 */every@:((0 2&amp;{)
        ; (1 2&amp;{) ;  (0 1&amp;{))\"1 \". &gt; cutLF ''x '' rplc~ wdclippaste ''''\n\n2:\n\n
        +/ +/@(*/ , +:@(2 {. /:~))(\"1) \". &gt; cutLF ''x '' rplc~  wdclippaste ''''",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_cxkb3qa", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In
        J, 1: with input parsing&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;+/ +/ (&amp;lt;./,
        2&amp;amp;*)&amp;quot;1 */every@:((0 2&amp;amp;{) ; (1 2&amp;amp;{) ;  (0
        1&amp;amp;{))&amp;quot;1 &amp;quot;. &amp;gt; cutLF &amp;#39;x &amp;#39; rplc~
        wdclippaste &amp;#39;&amp;#39;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;2:&lt;/p&gt;\n\n&lt;p&gt;+/
        +/@(*/ , +:@(2 {. /:~))(&amp;quot;1) &amp;quot;. &amp;gt; cutLF &amp;#39;x
        &amp;#39; rplc~  wdclippaste &amp;#39;&amp;#39;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkb3qa/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449060390.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxkfzzr", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "lifow", "can_mod_post": false, "created_utc":
        1449070671.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 3,
        "author_fullname": "t2_j5u9q", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Haskell!\n\n    -- Part 1\n    import Data.List    \n\n    --
        we first hand process the input so that it is in the form [..[l, w, h]..]    \n\n    paper
        :: [Int] -&gt; Int -- assumes x &lt;= y &lt;= z\n    paper [x, y, z] = 3*x*y
        + 2*y*z + 2*z*x \n\n    totalPaper :: [[Int]] -&gt; Int\n    totalPaper =
        sum . map paper . map sort \n\n    -- Part 2\n    ribbon :: [Int] -&gt; Int
        -- assumes x &lt;= y &lt;= z\n    ribbon [x, y, z] = 2*x + 2*y + x*y*z    \n\n    totalRibbon
        :: [[Int]] -&gt; Int\n    totalRibbon = sum . map ribbon . map sort\n", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxkfzzr",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Haskell!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;--
        Part 1\nimport Data.List    \n\n-- we first hand process the input so that
        it is in the form [..[l, w, h]..]    \n\npaper :: [Int] -&amp;gt; Int -- assumes
        x &amp;lt;= y &amp;lt;= z\npaper [x, y, z] = 3*x*y + 2*y*z + 2*z*x \n\ntotalPaper
        :: [[Int]] -&amp;gt; Int\ntotalPaper = sum . map paper . map sort \n\n-- Part
        2\nribbon :: [Int] -&amp;gt; Int -- assumes x &amp;lt;= y &amp;lt;= z\nribbon
        [x, y, z] = 2*x + 2*y + x*y*z    \n\ntotalRibbon :: [[Int]] -&amp;gt; Int\ntotalRibbon
        = sum . map ribbon . map sort\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkfzzr/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449070671.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"body": "I also went Clojure. I''m
        very new, so dunno how idiomatic it is - it''s fun writing it though :D \n\nSolutions
        to this and any future ones I do at https://github.com/SimonS/adventofcode-answers/
        - dunno if I''ll do all 24 in Clojure, it''s quite the departure for me.\n\nI
        don''t like that the total-data function processes the lists twice, but it
        reads nicer than the version compounded into one reduce call.\n\n    (def
        normalised-data\n      (-&gt;&gt; (slurp \"answers/inputs/day02.txt\")\n           clojure.string/split-lines\n           (map
        #(map read-string (clojure.string/split % #\"x\")))))\n\n    (defn paper [[l
        w h]] (let [sides [(* l w) (* w h) (* h l)]]\n                          (+
        (* 2 (reduce + sides))\n                          (apply min sides))))\n\n    (defn
        ribbon [dimensions]\n      (let [surface-area (apply * dimensions)\n            perimeter
        (-&gt;&gt; (sort dimensions)\n                           (take 2)\n                           (map
        (partial * 2))\n                           (reduce +))]\n        (+ surface-area
        perimeter)))\n\n    (defn total-data [func]\n      (-&gt;&gt; (map func normalised-data)\n           (reduce
        +)))\n\n    ;; Part 1\n    (total-data ribbon)\n\n    ;; Part 2\n    (total-data
        paper)", "subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxkkmn8", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "SimonS", "can_mod_post": false, "created_utc":
        1449077499.0, "send_replies": true, "parent_id": "t1_cxkjfvd", "score": 2,
        "author_fullname": "t2_18s6r", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "author_cakeday": true, "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxkkmn8",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I also went Clojure.
        I&amp;#39;m very new, so dunno how idiomatic it is - it&amp;#39;s fun writing
        it though :D &lt;/p&gt;\n\n&lt;p&gt;Solutions to this and any future ones
        I do at &lt;a href=\"https://github.com/SimonS/adventofcode-answers/\"&gt;https://github.com/SimonS/adventofcode-answers/&lt;/a&gt;
        - dunno if I&amp;#39;ll do all 24 in Clojure, it&amp;#39;s quite the departure
        for me.&lt;/p&gt;\n\n&lt;p&gt;I don&amp;#39;t like that the total-data function
        processes the lists twice, but it reads nicer than the version compounded
        into one reduce call.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(def normalised-data\n  (-&amp;gt;&amp;gt;
        (slurp &amp;quot;answers/inputs/day02.txt&amp;quot;)\n       clojure.string/split-lines\n       (map
        #(map read-string (clojure.string/split % #&amp;quot;x&amp;quot;)))))\n\n(defn
        paper [[l w h]] (let [sides [(* l w) (* w h) (* h l)]]\n                      (+
        (* 2 (reduce + sides))\n                      (apply min sides))))\n\n(defn
        ribbon [dimensions]\n  (let [surface-area (apply * dimensions)\n        perimeter
        (-&amp;gt;&amp;gt; (sort dimensions)\n                       (take 2)\n                       (map
        (partial * 2))\n                       (reduce +))]\n    (+ surface-area perimeter)))\n\n(defn
        total-data [func]\n  (-&amp;gt;&amp;gt; (map func normalised-data)\n       (reduce
        +)))\n\n;; Part 1\n(total-data ribbon)\n\n;; Part 2\n(total-data paper)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkkmn8/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449077499.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "cxkq9v9", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "jaffakek",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_cxkplq8", "score":
        1, "author_fullname": "t2_pdtdk", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "collapsed": false, "body": "That course
        looks pretty good! Been meaning to learn more about ML since my brother always
        goes on about how great Ocaml is, so I''ll keep my eyes open for the next
        time it''s offered.\n\nDrRacket is pretty handy, but it can be a bit memory
        hungry. That goes with the \"batteries included\" territory, I suppose.",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_cxkq9v9", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That
        course looks pretty good! Been meaning to learn more about ML since my brother
        always goes on about how great Ocaml is, so I&amp;#39;ll keep my eyes open
        for the next time it&amp;#39;s offered.&lt;/p&gt;\n\n&lt;p&gt;DrRacket is
        pretty handy, but it can be a bit memory hungry. That goes with the &amp;quot;batteries
        included&amp;quot; territory, I suppose.&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkq9v9/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449085279.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449085279.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxkplq8", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "charliegriefer", "can_mod_post": false,
        "send_replies": true, "parent_id": "t1_cxkp8kt", "score": 1, "author_fullname":
        "t2_enm8j", "removal_reason": null, "approved_by": null, "mod_note": null,
        "all_awardings": [], "body": "Clojure''s got a `line-seq` function that I
        tried to use, but was not successful. Going to have to try again tonite. \n\nI
        played around with Racket during a Coursera course. https://www.coursera.org/course/proglang.
        Damned good course, btw. Racket was pretty slick. Really liked DrRacket. \n\nBut
        we''re a Clojure shop at work, and I''m digging Clojure as well. Never would
        have thought a few years back that I''d be an Emacs fan ;) ", "edited": false,
        "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "name":
        "t1_cxkplq8", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Clojure&amp;#39;s
        got a &lt;code&gt;line-seq&lt;/code&gt; function that I tried to use, but
        was not successful. Going to have to try again tonite. &lt;/p&gt;\n\n&lt;p&gt;I
        played around with Racket during a Coursera course. &lt;a href=\"https://www.coursera.org/course/proglang\"&gt;https://www.coursera.org/course/proglang&lt;/a&gt;.
        Damned good course, btw. Racket was pretty slick. Really liked DrRacket. &lt;/p&gt;\n\n&lt;p&gt;But
        we&amp;#39;re a Clojure shop at work, and I&amp;#39;m digging Clojure as well.
        Never would have thought a few years back that I&amp;#39;d be an Emacs fan
        ;) &lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished":
        null, "associated_award": null, "stickied": false, "author_premium": false,
        "can_gild": false, "link_id": "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkplq8/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449084365.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449084365.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxkp8kt", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "jaffakek", "can_mod_post": false, "created_utc":
        1449083853.0, "send_replies": true, "parent_id": "t1_cxkjfvd", "score": 2,
        "author_fullname": "t2_pdtdk", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "I''m using Racket (Scheme)
        rather than Clojure, so I''m not sure if there''s anything equivalent, but
        Racket has a nice built-in `file-&gt;lines` function that reads in a file
        and returns a list of strings, one per line. \n\nThen I just recursed over
        the list, separated the line into a list of strings, mapped `string-&gt;number`
        on that list, did calculations, and accumulated the amount of paper and ribbon.\n\nI''m
        definitely a beginner, but I''m enjoying Racket a whole bunch.", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxkp8kt",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m using Racket
        (Scheme) rather than Clojure, so I&amp;#39;m not sure if there&amp;#39;s anything
        equivalent, but Racket has a nice built-in &lt;code&gt;file-&amp;gt;lines&lt;/code&gt;
        function that reads in a file and returns a list of strings, one per line.
        &lt;/p&gt;\n\n&lt;p&gt;Then I just recursed over the list, separated the line
        into a list of strings, mapped &lt;code&gt;string-&amp;gt;number&lt;/code&gt;
        on that list, did calculations, and accumulated the amount of paper and ribbon.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m
        definitely a beginner, but I&amp;#39;m enjoying Racket a whole bunch.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkp8kt/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449083853.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxkjfvd", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "charliegriefer", "can_mod_post": false,
        "created_utc": 1449075808.0, "send_replies": true, "parent_id": "t3_3v3w2f",
        "score": 3, "author_fullname": "t2_enm8j", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "My solution in Clojure.
        I''ve not done much yet with reading files in. I''m fairly certain there''s
        a more elegant way to read that file in and convert each \"lxwxh\" string
        to a list of ints. But for now, this works, and got me the right answers.\n\nThe
        answers come from calling `(total-wrapping-paper)` and `(total-ribbon)`.\n\n\t;;
        In response to http://adventofcode.com/day/2\n\t;; dimensions.txt can be seen
        at http://charlie.griefer.com/dimensions.txt\n\n\t(ns adventofcode.core\n\t  (:require
        [clojure.java.io :as io]\n\t            [clojure.string :as str]))\n\n\n\t(def
        dimensions (-&gt;&gt; (-&gt; (slurp (io/resource \"dimensions.txt\"))\n\t                  (str/split
        #\"\\n\"))\n\t              (map #(str/split % #\"x\"))\n\t              (map
        (fn [a] (map #(Integer/parseInt %) a)))))\n\n\n\t(defn get-smallest-sides\n\t  [dims]\n\t  (-&gt;
        dims\n\t      sort\n\t      reverse\n\t      rest))\n\n\n\t;; Part One (Wrapping
        Paper)\n\n\t(defn get-surface-area\n\t  [[length width height]]\n\t  (+ (*
        2 length width)\n\t     (* 2 width height)\n\t     (* 2 height length)))\n\n\t(defn
        get-slack\n\t  [dims]\n\t  (apply * (get-smallest-sides dims)))\n\n\t(defn
        total-wrapping-paper\n\t  [data]\n\t  (-&gt;&gt; (map #(+ (get-surface-area
        %) (get-slack %)) data)\n\t       (apply +)))\n\n\n\t;; Part Two (Ribbon)\n\n\t(defn
        get-ribbon-length\n\t  [dims]\n\t  (-&gt;&gt; (get-smallest-sides dims)\n\t       (apply
        +)\n\t       (* 2)))\n\n\t(defn get-bow-length\n\t  [dims]\n\t  (apply * dims))\n\n\t(defn
        total-ribbon\n\t  [data]\n\t  (-&gt;&gt; (map #(+ (get-ribbon-length %) (get-bow-length
        %)) data)\n\t\t       (apply +)))", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_cxkjfvd", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;My solution in Clojure. I&amp;#39;ve not
        done much yet with reading files in. I&amp;#39;m fairly certain there&amp;#39;s
        a more elegant way to read that file in and convert each &amp;quot;lxwxh&amp;quot;
        string to a list of ints. But for now, this works, and got me the right answers.&lt;/p&gt;\n\n&lt;p&gt;The
        answers come from calling &lt;code&gt;(total-wrapping-paper)&lt;/code&gt;
        and &lt;code&gt;(total-ribbon)&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;;;
        In response to http://adventofcode.com/day/2\n;; dimensions.txt can be seen
        at http://charlie.griefer.com/dimensions.txt\n\n(ns adventofcode.core\n  (:require
        [clojure.java.io :as io]\n            [clojure.string :as str]))\n\n\n(def
        dimensions (-&amp;gt;&amp;gt; (-&amp;gt; (slurp (io/resource &amp;quot;dimensions.txt&amp;quot;))\n                  (str/split
        #&amp;quot;\\n&amp;quot;))\n              (map #(str/split % #&amp;quot;x&amp;quot;))\n              (map
        (fn [a] (map #(Integer/parseInt %) a)))))\n\n\n(defn get-smallest-sides\n  [dims]\n  (-&amp;gt;
        dims\n      sort\n      reverse\n      rest))\n\n\n;; Part One (Wrapping Paper)\n\n(defn
        get-surface-area\n  [[length width height]]\n  (+ (* 2 length width)\n     (*
        2 width height)\n     (* 2 height length)))\n\n(defn get-slack\n  [dims]\n  (apply
        * (get-smallest-sides dims)))\n\n(defn total-wrapping-paper\n  [data]\n  (-&amp;gt;&amp;gt;
        (map #(+ (get-surface-area %) (get-slack %)) data)\n       (apply +)))\n\n\n;;
        Part Two (Ribbon)\n\n(defn get-ribbon-length\n  [dims]\n  (-&amp;gt;&amp;gt;
        (get-smallest-sides dims)\n       (apply +)\n       (* 2)))\n\n(defn get-bow-length\n  [dims]\n  (apply
        * dims))\n\n(defn total-ribbon\n  [data]\n  (-&amp;gt;&amp;gt; (map #(+ (get-ribbon-length
        %) (get-bow-length %)) data)\n           (apply +)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkjfvd/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449075808.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 2, "removal_reason": null, "link_id": "t3_3v3w2f", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "cxk4az8", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_3v3w2f", "score":
        2, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "My python solution:\n    \n    file = open(\"2.txt\",\"r\");\n    area
        = 0;\n    ribbon = 0;\n    text = file.readline();\n    while(text != ''''):\n        text
        = text.replace(\"/n\",\"\")\n        stage = 0;\n        highest = 0;\n        areas
        = [];\n        pointer = 0;\n        temp = '''';\n        while(stage !=
        3):\n            if(len(text) &gt; pointer and text[pointer] != ''x''):\n                temp
        += text[pointer];\n            else:\n                stage += 1;\n                areas
        += [int(temp)];\n                temp = '''';\n            pointer += 1;\n        areas.sort();\n        area
        += areas[2]*areas[1]*2 + areas[1]*areas[0]*2 + areas[0]*areas[2]*2 + areas[0]*areas[1];\n        ribbon
        += areas[0]*2 + areas[1]*2 + areas[0]*areas[1]*areas[2];\n        text = file.readline();\n    print(area);\n    print(ribbon);",
        "edited": false, "downs": 0, "author_flair_css_class": null, "collapsed":
        false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My
        python solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;file = open(&amp;quot;2.txt&amp;quot;,&amp;quot;r&amp;quot;);\narea
        = 0;\nribbon = 0;\ntext = file.readline();\nwhile(text != &amp;#39;&amp;#39;):\n    text
        = text.replace(&amp;quot;/n&amp;quot;,&amp;quot;&amp;quot;)\n    stage = 0;\n    highest
        = 0;\n    areas = [];\n    pointer = 0;\n    temp = &amp;#39;&amp;#39;;\n    while(stage
        != 3):\n        if(len(text) &amp;gt; pointer and text[pointer] != &amp;#39;x&amp;#39;):\n            temp
        += text[pointer];\n        else:\n            stage += 1;\n            areas
        += [int(temp)];\n            temp = &amp;#39;&amp;#39;;\n        pointer +=
        1;\n    areas.sort();\n    area += areas[2]*areas[1]*2 + areas[1]*areas[0]*2
        + areas[0]*areas[2]*2 + areas[0]*areas[1];\n    ribbon += areas[0]*2 + areas[1]*2
        + areas[0]*areas[1]*areas[2];\n    text = file.readline();\nprint(area);\nprint(ribbon);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk4az8/",
        "num_reports": null, "locked": false, "name": "t1_cxk4az8", "created": 1449036423.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1449036423.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxk4htu", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "red75prim", "can_mod_post": false, "created_utc":
        1449036867.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 2,
        "author_fullname": "t2_60lnx", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Day 2 Part 1 and 2: F#. input() generates
        one time sequence, which cannot be reused, so I do Seq.cache\n\n    let rec
        input() = \n      seq {\n        let line = System.Console.ReadLine()\n        if
        line &lt;&gt; null then\n          yield line\n          yield! input()\n      }\n\n    let
        parseLine (line:string) = \n      match line.Split(''x'') |&gt; Array.map
        System.Int64.Parse with\n      |[|l; w; h|] -&gt; (l,w,h)\n      |_ -&gt;
        raise &lt;| new System.Exception(\"Wrong input format\")\n\n    let paperArea
        (l,w,h) =\n      let sides = [l*w; w*h; l*h]\n      (List.sumBy ((*)2L) sides)
        + (List.min sides)\n\n    let ribbonLenght (l,w,h) =\n      let perims = [2L*(l+w);2L*(w+h);2L*(l+h)]\n      (List.min
        perims) + (l*w*h)\n\n    [&lt;EntryPoint&gt;]\n    let main argv = \n      let
        result = \n        input() |&gt; Seq.map parseLine |&gt; Seq.cache\n          |&gt;
        (fun sq -&gt; (Seq.sumBy paperArea sq, Seq.sumBy ribbonLenght sq))\n      printf
        \"Total (paper area, ribbon length): %A\" result\n      0\n\nAdded: program
        is not optimal, as it stores entire input in memory (Seq.cache), I should
        have used \n\n    Seq.fold (fun (area, length) box -&gt; (area+(paperArea
        box),length+(ribbonLength box))) (0L,0L)\n\n", "edited": 1449039529.0, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxk4htu", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Day 2 Part 1 and 2: F#. input()
        generates one time sequence, which cannot be reused, so I do Seq.cache&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let
        rec input() = \n  seq {\n    let line = System.Console.ReadLine()\n    if
        line &amp;lt;&amp;gt; null then\n      yield line\n      yield! input()\n  }\n\nlet
        parseLine (line:string) = \n  match line.Split(&amp;#39;x&amp;#39;) |&amp;gt;
        Array.map System.Int64.Parse with\n  |[|l; w; h|] -&amp;gt; (l,w,h)\n  |_
        -&amp;gt; raise &amp;lt;| new System.Exception(&amp;quot;Wrong input format&amp;quot;)\n\nlet
        paperArea (l,w,h) =\n  let sides = [l*w; w*h; l*h]\n  (List.sumBy ((*)2L)
        sides) + (List.min sides)\n\nlet ribbonLenght (l,w,h) =\n  let perims = [2L*(l+w);2L*(w+h);2L*(l+h)]\n  (List.min
        perims) + (l*w*h)\n\n[&amp;lt;EntryPoint&amp;gt;]\nlet main argv = \n  let
        result = \n    input() |&amp;gt; Seq.map parseLine |&amp;gt; Seq.cache\n      |&amp;gt;
        (fun sq -&amp;gt; (Seq.sumBy paperArea sq, Seq.sumBy ribbonLenght sq))\n  printf
        &amp;quot;Total (paper area, ribbon length): %A&amp;quot; result\n  0\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Added:
        program is not optimal, as it stores entire input in memory (Seq.cache), I
        should have used &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Seq.fold (fun (area,
        length) box -&amp;gt; (area+(paperArea box),length+(ribbonLength box))) (0L,0L)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk4htu/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449036867.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxkpowp", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "notanotherreddituser", "can_mod_post":
        false, "send_replies": true, "parent_id": "t1_cxklzhq", "score": 3, "author_fullname":
        "t2_5mp2h", "removal_reason": null, "approved_by": null, "mod_note": null,
        "all_awardings": [], "collapsed": false, "body": "You just need to pass sort()
        a compare function in order to sort by return value. By default it will sort
        by unicode point value, but you can tell it to sort in a number of ways.",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_cxkpowp", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You
        just need to pass sort() a compare function in order to sort by return value.
        By default it will sort by unicode point value, but you can tell it to sort
        in a number of ways.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_3v3w2f", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkpowp/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1449084484.0,
        "author_flair_text": null, "treatment_tags": [], "created_utc": 1449084484.0,
        "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0, "depth":
        3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxklzhq", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "sentry07", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_cxk5dhi", "score": 3, "author_fullname": "t2_3foi6",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "Seriously? That sort function seems pretty useless then. Is there
        a different sort function that sorts on value instead?", "edited": false,
        "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "name":
        "t1_cxklzhq", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Seriously?
        That sort function seems pretty useless then. Is there a different sort function
        that sorts on value instead?&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_3v3w2f", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxklzhq/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1449079369.0,
        "author_flair_text": null, "treatment_tags": [], "created_utc": 1449079369.0,
        "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0, "depth":
        2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "cxk5huc",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Runenmeister",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_cxk5g2a", "score":
        1, "author_fullname": "t2_6x147", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "collapsed": false, "body": "Read my
        edit, sorry. Looks like you might need to make a compare function for your
        array.", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxk5huc", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Read
        my edit, sorry. Looks like you might need to make a compare function for your
        array.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null,
        "distinguished": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "link_id": "t3_3v3w2f", "unrepliable_reason": null,
        "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk5huc/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449039490.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449039490.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxk5g2a", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "purrrfessionalwidow", "can_mod_post":
        false, "send_replies": true, "parent_id": "t1_cxk5dhi", "score": 1, "author_fullname":
        "t2_qraw7", "removal_reason": null, "approved_by": null, "mod_note": null,
        "all_awardings": [], "body": "It did. I just tested it with [''2x3x4'', ''1x1x10'']
        and the result is 101.", "edited": false, "top_awarded_type": null, "downs":
        0, "author_flair_css_class": null, "name": "t1_cxk5g2a", "is_submitter": false,
        "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It did. I just tested it with
        [&amp;#39;2x3x4&amp;#39;, &amp;#39;1x1x10&amp;#39;] and the result is 101.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk5g2a/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449039348.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449039348.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "distinguished": null, "likes": null, "replies": {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "distinguished":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "cxk6187", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Runenmeister",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_cxk5u1m", "score":
        1, "author_fullname": "t2_6x147", "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "You''re welcome!", "edited": false, "gildings": {}, "downs":
        0, "author_flair_css_class": null, "name": "t1_cxk6187", "is_submitter": false,
        "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You&amp;#39;re welcome!&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "link_id": "t3_3v3w2f",
        "associated_award": null, "stickied": false, "author_premium": false, "can_gild":
        false, "top_awarded_type": null, "unrepliable_reason": null, "author_flair_text_color":
        null, "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk6187/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449041097.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449041097.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 5, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxk5u1m", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "purrrfessionalwidow", "can_mod_post":
        false, "send_replies": true, "parent_id": "t1_cxk5itj", "score": 1, "author_fullname":
        "t2_qraw7", "removal_reason": null, "approved_by": null, "mod_note": null,
        "all_awardings": [], "body": "It works! I used reduce() to find the smallest
        number and now it''s correct. Thank you so much!", "edited": false, "author_flair_css_class":
        null, "name": "t1_cxk5u1m", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It
        works! I used reduce() to find the smallest number and now it&amp;#39;s correct.
        Thank you so much!&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "link_id": "t3_3v3w2f", "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": null, "treatment_tags": [], "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk5u1m/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449040493.0, "author_flair_text": null, "collapsed": false, "created_utc":
        1449040493.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 4, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxk5itj", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Runenmeister", "can_mod_post": false,
        "send_replies": true, "parent_id": "t1_cxk5ie1", "score": 2, "author_fullname":
        "t2_6x147", "removal_reason": null, "approved_by": null, "mod_note": null,
        "all_awardings": [], "collapsed": false, "body": "No problem. Good luck!",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_cxk5itj", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No
        problem. Good luck!&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_3v3w2f", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk5itj/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1449039572.0,
        "author_flair_text": null, "treatment_tags": [], "created_utc": 1449039572.0,
        "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0, "depth":
        3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxk5ie1", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "purrrfessionalwidow", "can_mod_post":
        false, "send_replies": true, "parent_id": "t1_cxk5dhi", "score": 1, "author_fullname":
        "t2_qraw7", "removal_reason": null, "approved_by": null, "mod_note": null,
        "all_awardings": [], "body": "That might be it! I forgot sort() does that.
        Let me change it and test. Thank you!", "edited": false, "top_awarded_type":
        null, "downs": 0, "author_flair_css_class": null, "name": "t1_cxk5ie1", "is_submitter":
        false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That might be it! I
        forgot sort() does that. Let me change it and test. Thank you!&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk5ie1/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449039535.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449039535.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxk5dhi", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Runenmeister", "can_mod_post": false,
        "created_utc": 1449039143.0, "send_replies": true, "parent_id": "t1_cxk56i7",
        "score": 1, "author_fullname": "t2_6x147", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "Try doing it with just
        two presents and see if it gives the right answer.\n\nEdit:\n\nAlso, https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n\nis
        your sort method working correctly?\n\n    var scores = [1, 10, 2, 21]; \n    scores.sort();
        // [1, 10, 2, 21]\n    // Watch out that 10 comes before 2,\n    // because
        ''10'' comes before ''2'' in Unicode code point order.", "edited": 1449039509.0,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxk5dhi",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Try doing it with just
        two presents and see if it gives the right answer.&lt;/p&gt;\n\n&lt;p&gt;Edit:&lt;/p&gt;\n\n&lt;p&gt;Also,
        &lt;a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;is
        your sort method working correctly?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var
        scores = [1, 10, 2, 21]; \nscores.sort(); // [1, 10, 2, 21]\n// Watch out
        that 10 comes before 2,\n// because &amp;#39;10&amp;#39; comes before &amp;#39;2&amp;#39;
        in Unicode code point order.\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk5dhi/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449039143.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxk56i7", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "purrrfessionalwidow", "can_mod_post":
        false, "created_utc": 1449038614.0, "send_replies": true, "parent_id": "t3_3v3w2f",
        "score": 2, "author_fullname": "t2_qraw7", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "I''m having issues
        with the first puzzle. I tried to do it in JS. The test cases passed, but
        when I put in all of the data, I am told the number is too large and is the
        wrong answer. Forgive the terrible code; I''m very new to this.  \n\nhttp://pastebin.com/tzwVj2pf\n\nETA:
        It''s working now. Thanks so much for the help, Runenmeister!\nhttp://pastebin.com/5sHzG3cX\n",
        "edited": 1449040628.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxk56i7", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m
        having issues with the first puzzle. I tried to do it in JS. The test cases
        passed, but when I put in all of the data, I am told the number is too large
        and is the wrong answer. Forgive the terrible code; I&amp;#39;m very new to
        this.  &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://pastebin.com/tzwVj2pf\"&gt;http://pastebin.com/tzwVj2pf&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;ETA:
        It&amp;#39;s working now. Thanks so much for the help, Runenmeister!\n&lt;a
        href=\"http://pastebin.com/5sHzG3cX\"&gt;http://pastebin.com/5sHzG3cX&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk56i7/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449038614.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxkde9j", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "IspeakHOHO", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_cxk8y37", "score": 2, "author_fullname": "t2_slzmv",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Ahh okay ty very much for that. I did know
        I could use the min function for that but lately I have been trying to use
        as little of the libraries as possible just because I find it fun to try and
        ''re-invent the wheel''.", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxkde9j", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ahh
        okay ty very much for that. I did know I could use the min function for that
        but lately I have been trying to use as little of the libraries as possible
        just because I find it fun to try and &amp;#39;re-invent the wheel&amp;#39;.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkde9j/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449066032.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449066032.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxk8y37", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "FuriousProgrammer", "can_mod_post": false,
        "send_replies": true, "parent_id": "t1_cxk7t1v", "score": 1, "author_fullname":
        "t2_fv5yf", "removal_reason": null, "approved_by": null, "mod_note": null,
        "all_awardings": [], "body": "since you don''t need to know which two give
        you the minimum perimeter or surface area, only the actual minimum, you can
        simply use `math.min()` with the three possible minimums.\n\nAlso, your main
        loop can be significantly shorter of you use string pattern captures instead
        of gmatch:\n\n    for line in io.lines(files) do\n        l, w, h = line:match(\"(%d+)x(%d+)x(%d+)\")\n        --math...\n    end",
        "edited": 1449052459.0, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_cxk8y37", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;since
        you don&amp;#39;t need to know which two give you the minimum perimeter or
        surface area, only the actual minimum, you can simply use &lt;code&gt;math.min()&lt;/code&gt;
        with the three possible minimums.&lt;/p&gt;\n\n&lt;p&gt;Also, your main loop
        can be significantly shorter of you use string pattern captures instead of
        gmatch:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for line in io.lines(files) do\n    l,
        w, h = line:match(&amp;quot;(%d+)x(%d+)x(%d+)&amp;quot;)\n    --math...\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk8y37/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449052133.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449052133.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxk7t1v", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "IspeakHOHO", "can_mod_post": false, "created_utc":
        1449047355.0, "send_replies": true, "parent_id": "t1_cxk5wti", "score": 2,
        "author_fullname": "t2_slzmv", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Also if anybody notices where
        an improvement could be made I''d welcome the feedback :&gt;", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxk7t1v",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Also if anybody notices
        where an improvement could be made I&amp;#39;d welcome the feedback :&amp;gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk7t1v/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449047355.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxk5wti", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "IspeakHOHO", "can_mod_post": false, "created_utc":
        1449040725.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 2,
        "author_fullname": "t2_slzmv", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Lua solution, idk if this is a good lua solution
        but I like it.\n    \n    local function read_dimensions(file)\n    \tlocal
        result = {}\n    \tif type(file) == \"string\" then\n    \t\tfor line in io.lines(file)
        do\n    \t\t\tresult[#result + 1] = {}\n    \t\t\tfor i in string.gmatch(line,
        \"%x+\") do\n    \t\t\t\tresult[#result][#result[#result] + 1] = tonumber(i)
        \n    \t\t\tend\n    \t\tend\n    \tend\n    \treturn result\n    end\n\n    local
        dimensions = read_dimensions(\"dimensions.txt\")\n    local totalSurfaceArea,
        totalRibbonLegnth, minsurfaceArea, minPerimetre = 0, 0, 0, 0 \n    local l,
        w, h\n    for i=1, #dimensions do \n    \tl, w, h = dimensions[i][1], dimensions[i][2],
        dimensions[i][3]\n    \tminsurfaceArea = (l*w &lt;= w*h and l*w &lt;= h*l)
        and l*w or (w*h &lt;= l*w and w*h &lt;= h*l) and w*h or h*l\n    \tminPerimetre
        = (l+w &lt;= w+h and l+w &lt;= h+l) and 2*(l+w) or (w+h &lt;= l+w and w+h
        &lt;= h+l) and 2*(w+h) or 2*(h+l)\n    \ttotalSurfaceArea = totalSurfaceArea
        + 2*l*w + 2*w*h + 2*h*l + minsurfaceArea\n    \ttotalRibbonLegnth = totalRibbonLegnth
        + minPerimetre + l*w*h\n    end\n\n    print(totalSurfaceArea)\n    print(totalRibbonLegnth)",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_cxk5wti", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Lua
        solution, idk if this is a good lua solution but I like it.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;local
        function read_dimensions(file)\n    local result = {}\n    if type(file) ==
        &amp;quot;string&amp;quot; then\n        for line in io.lines(file) do\n            result[#result
        + 1] = {}\n            for i in string.gmatch(line, &amp;quot;%x+&amp;quot;)
        do\n                result[#result][#result[#result] + 1] = tonumber(i) \n            end\n        end\n    end\n    return
        result\nend\n\nlocal dimensions = read_dimensions(&amp;quot;dimensions.txt&amp;quot;)\nlocal
        totalSurfaceArea, totalRibbonLegnth, minsurfaceArea, minPerimetre = 0, 0,
        0, 0 \nlocal l, w, h\nfor i=1, #dimensions do \n    l, w, h = dimensions[i][1],
        dimensions[i][2], dimensions[i][3]\n    minsurfaceArea = (l*w &amp;lt;= w*h
        and l*w &amp;lt;= h*l) and l*w or (w*h &amp;lt;= l*w and w*h &amp;lt;= h*l)
        and w*h or h*l\n    minPerimetre = (l+w &amp;lt;= w+h and l+w &amp;lt;= h+l)
        and 2*(l+w) or (w+h &amp;lt;= l+w and w+h &amp;lt;= h+l) and 2*(w+h) or 2*(h+l)\n    totalSurfaceArea
        = totalSurfaceArea + 2*l*w + 2*w*h + 2*h*l + minsurfaceArea\n    totalRibbonLegnth
        = totalRibbonLegnth + minPerimetre + l*w*h\nend\n\nprint(totalSurfaceArea)\nprint(totalRibbonLegnth)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk5wti/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449040725.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxk78qu", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Opticity", "can_mod_post": false, "created_utc":
        1449045172.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 2,
        "author_fullname": "t2_cujuk", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Not a programmer (yet), my shoddy attempt
        using C. My variable declaration skills are a little lacking.\n\n\t#include
        &lt;stdio.h&gt;\n\n\tint main(){\n\n\t\tint l,w,h,min,min2,prm1,prm2,prm3,sum=0,wrap=0,bow,area=0,ribbon=0,side1,side2,side3;\n\n\t\tFILE
        *fp = fopen(\"puzzle2.txt\",\"r\");\n\t\n\t\twhile((fscanf(fp,\"%dx%dx%d\",&amp;l,&amp;w,&amp;h))!=EOF){\n\t\n\t\t\tside1
        = 2*l*h;\n\t\t\tside2 = 2*w*h;\n\t\t\tside3 = 2*l*w;\n\t\t\tmin = side1;\n\t\t\tif(min&gt;side2)
        min = side2;\n\t\t\tif(min&gt;side3) min = side3;\n\t\t\tmin /= 2;\n\t\t\n\t\t\tarea
        = side1+side2+side3+min;\n\t\t\twrap += area;\n\t\t\n\t\t\tprm1 = 2*(l+h);\n\t\t\tprm2
        = 2*(w+h);\n\t\t\tprm3 = 2*(l+w);\n\t\t\tmin2 = prm1;\n\t\t\tif(min2&gt;prm2)
        min2 = prm2;\n\t\t\tif(min2&gt;prm3) min2 = prm3;\n\t\t\t\n\t\t\tbow = l*w*h;\n\t\t\n\t\t\tsum
        = min2+bow;\n\t\t\tribbon += sum;\n\n\t\t}\n\t\n\t\tprintf(\"Total area of
        wrapping paper\\t= %d\\n\",wrap);\n\t\tprintf(\"Total length of ribbon needed\\t=
        %d\\n\",ribbon);\n\t\n\t\tfclose(fp);\n\n\t\treturn 0;\n\t}\n", "edited":
        1449045519.0, "top_awarded_type": null, "author_flair_css_class": null, "name":
        "t1_cxk78qu", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not
        a programmer (yet), my shoddy attempt using C. My variable declaration skills
        are a little lacking.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;\n\nint
        main(){\n\n    int l,w,h,min,min2,prm1,prm2,prm3,sum=0,wrap=0,bow,area=0,ribbon=0,side1,side2,side3;\n\n    FILE
        *fp = fopen(&amp;quot;puzzle2.txt&amp;quot;,&amp;quot;r&amp;quot;);\n\n    while((fscanf(fp,&amp;quot;%dx%dx%d&amp;quot;,&amp;amp;l,&amp;amp;w,&amp;amp;h))!=EOF){\n\n        side1
        = 2*l*h;\n        side2 = 2*w*h;\n        side3 = 2*l*w;\n        min = side1;\n        if(min&amp;gt;side2)
        min = side2;\n        if(min&amp;gt;side3) min = side3;\n        min /= 2;\n\n        area
        = side1+side2+side3+min;\n        wrap += area;\n\n        prm1 = 2*(l+h);\n        prm2
        = 2*(w+h);\n        prm3 = 2*(l+w);\n        min2 = prm1;\n        if(min2&amp;gt;prm2)
        min2 = prm2;\n        if(min2&amp;gt;prm3) min2 = prm3;\n\n        bow = l*w*h;\n\n        sum
        = min2+bow;\n        ribbon += sum;\n\n    }\n\n    printf(&amp;quot;Total
        area of wrapping paper\\t= %d\\n&amp;quot;,wrap);\n    printf(&amp;quot;Total
        length of ribbon needed\\t= %d\\n&amp;quot;,ribbon);\n\n    fclose(fp);\n\n    return
        0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk78qu/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1449045172.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_3v3w2f", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 2}}, {"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 2, "removal_reason": null, "link_id": "t3_3v3w2f",
        "author_flair_template_id": null, "likes": null, "replies": {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "cxkkvzc",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ChildishBonVonnegut",
        "can_mod_post": false, "created_utc": 1449077866.0, "send_replies": true,
        "parent_id": "t1_cxk93l5", "score": 2, "author_fullname": "t2_6iuwo", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Store entry.split(''x'') as a variable so it doesn''t have to do the split
        every time you are getting the length width or height.\n\nAlso you can just
        use your sorted variable to get the lwh from because it doesn''t matter which
        side you use for each dimension.", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_cxkkvzc", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Store entry.split(&amp;#39;x&amp;#39;) as
        a variable so it doesn&amp;#39;t have to do the split every time you are getting
        the length width or height.&lt;/p&gt;\n\n&lt;p&gt;Also you can just use your
        sorted variable to get the lwh from because it doesn&amp;#39;t matter which
        side you use for each dimension.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkkvzc/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449077866.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxk93l5", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "[deleted]", "can_mod_post": false, "send_replies":
        true, "parent_id": "t3_3v3w2f", "score": 2, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "so this is
        my js solution for both puzzles. Tips/hints are appreciated since i am still
        learning! \n\n    var papertotal = 0;\n    var ribbontotal = 0;\n    var line
        = document.body.innerText.split(''\\n'');\n    line.splice(-1, 1);\n    line.forEach(function(entry){\n        var
        length = entry.split(''x'')[0];\n        var width = entry.split(''x'')[1];\n        var
        height = entry.split(''x'')[2];\n        var sorted = entry.split(''x'').sort(function(a,
        b){return a-b});\n        var paper = 2*length*width + 2*length*height + 2*width*height
        + sorted[0]*sorted[1];\n        var ribbon = sorted[0]*2 + sorted[1]*2 + length*width*height;\n        papertotal
        += paper;\n        ribbontotal += ribbon;\n    });\n    alert(papertotal +
        \",\" + ribbontotal);", "edited": false, "downs": 0, "author_flair_css_class":
        null, "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;so
        this is my js solution for both puzzles. Tips/hints are appreciated since
        i am still learning! &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var papertotal =
        0;\nvar ribbontotal = 0;\nvar line = document.body.innerText.split(&amp;#39;\\n&amp;#39;);\nline.splice(-1,
        1);\nline.forEach(function(entry){\n    var length = entry.split(&amp;#39;x&amp;#39;)[0];\n    var
        width = entry.split(&amp;#39;x&amp;#39;)[1];\n    var height = entry.split(&amp;#39;x&amp;#39;)[2];\n    var
        sorted = entry.split(&amp;#39;x&amp;#39;).sort(function(a, b){return a-b});\n    var
        paper = 2*length*width + 2*length*height + 2*width*height + sorted[0]*sorted[1];\n    var
        ribbon = sorted[0]*2 + sorted[1]*2 + length*width*height;\n    papertotal
        += paper;\n    ribbontotal += ribbon;\n});\nalert(papertotal + &amp;quot;,&amp;quot;
        + ribbontotal);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings": {},
        "collapsed_reason": null, "associated_award": null, "stickied": false, "subreddit_type":
        "public", "can_gild": false, "top_awarded_type": null, "unrepliable_reason":
        null, "author_flair_text_color": "dark", "score_hidden": false, "permalink":
        "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk93l5/", "num_reports":
        null, "locked": false, "name": "t1_cxk93l5", "created": 1449052798.0, "subreddit":
        "adventofcode", "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449052798.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxk99r2", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "THE_TIDE_TURNER", "can_mod_post": false,
        "created_utc": 1449053548.0, "send_replies": true, "parent_id": "t3_3v3w2f",
        "score": 2, "author_fullname": "t2_g5vq8", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "My java solution \n
        \n    import java.io.File;\n    import java.util.Scanner;\n\n    public class
        AdventDay2 {\n\n      public static void main(String args[]) throws Exception{\n\n        Scanner
        scanFile = new Scanner(new File(\"paper.txt\"));\n\n        int paper_length
        = 0;\n        int ribon_length = 0;\n\n        while(scanFile.hasNext()){\n            int
        length;\n            int width;\n            int height;\n\n            String[]
        temp = scanFile.next().split(\"x\");\n\n            length = Integer.parseInt(temp[0]);\n            width  =
        Integer.parseInt(temp[1]);\n            height = Integer.parseInt(temp[2]);\n\n            //
        TASK 1\n            paper_length += ((2 * length * width) + (2 * width * height)
        + (2 * height * length));\n\n            if(length &gt;= width &amp;&amp;
        length &gt;= height){\n                paper_length += width * height;\n                ribon_length
        += 2 * width + 2 * height;\n            }else if(width &gt;= height &amp;&amp;
        width &gt;= length){\n                paper_length += length * height;\n                ribon_length
        += 2 * length + 2 * height;\n            }else if(height &gt;= length &amp;&amp;
        height &gt;= width){\n                paper_length += length * width;\n                ribon_length
        += 2 * width + 2 * length;\n            }\n\n            // TASK 2\n            ribon_length
        += length * height * width;\n        }\n\n        System.out.println(String.format(\"The
        required paper length: %d\", paper_length));\n        System.out.println(String.format(\"The
        required ribon length: %d\", ribon_length));\n    }\n}\n", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxk99r2",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My java solution &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        java.io.File;\nimport java.util.Scanner;\n\npublic class AdventDay2 {\n\n  public
        static void main(String args[]) throws Exception{\n\n    Scanner scanFile
        = new Scanner(new File(&amp;quot;paper.txt&amp;quot;));\n\n    int paper_length
        = 0;\n    int ribon_length = 0;\n\n    while(scanFile.hasNext()){\n        int
        length;\n        int width;\n        int height;\n\n        String[] temp
        = scanFile.next().split(&amp;quot;x&amp;quot;);\n\n        length = Integer.parseInt(temp[0]);\n        width  =
        Integer.parseInt(temp[1]);\n        height = Integer.parseInt(temp[2]);\n\n        //
        TASK 1\n        paper_length += ((2 * length * width) + (2 * width * height)
        + (2 * height * length));\n\n        if(length &amp;gt;= width &amp;amp;&amp;amp;
        length &amp;gt;= height){\n            paper_length += width * height;\n            ribon_length
        += 2 * width + 2 * height;\n        }else if(width &amp;gt;= height &amp;amp;&amp;amp;
        width &amp;gt;= length){\n            paper_length += length * height;\n            ribon_length
        += 2 * length + 2 * height;\n        }else if(height &amp;gt;= length &amp;amp;&amp;amp;
        height &amp;gt;= width){\n            paper_length += length * width;\n            ribon_length
        += 2 * width + 2 * length;\n        }\n\n        // TASK 2\n        ribon_length
        += length * height * width;\n    }\n\n    System.out.println(String.format(&amp;quot;The
        required paper length: %d&amp;quot;, paper_length));\n    System.out.println(String.format(&amp;quot;The
        required ribon length: %d&amp;quot;, ribon_length));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk99r2/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449053548.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "cxkkpue",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ChildishBonVonnegut",
        "can_mod_post": false, "created_utc": 1449077624.0, "send_replies": true,
        "parent_id": "t1_cxk9y0b", "score": 2, "author_fullname": "t2_6iuwo", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "If you saved your sorted array, you could use it everywhere you are using
        min().", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxkkpue", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If
        you saved your sorted array, you could use it everywhere you are using min().&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkkpue/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449077624.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxk9y0b", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "PersianMG", "can_mod_post": false, "created_utc":
        1449056396.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 2,
        "author_fullname": "t2_cxq23", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "#My python solution\n\n    # Day 2 - Part
        1 and 2\n    with open(''input.txt'') as f:\n      lines = f.readlines()\n    \n    totalPaper
        = 0\n    totalRibbon = 0\n      \n    for line in lines:\n      l,w,h = map(int,
        line.split(''x''))\n      totalPaper += (2*l*w + 2*w*h + 2*h*l) + min(l*w,
        w*h, h*l)\n      totalRibbon += min(l,w,h)*2 + sorted([l,w,h])[1] * 2 + (l*w*h)\n      \n    #
        answers\n    print \"Total wrapping paper needed:\", totalPaper\n    print
        \"Total ribbon needed:\", totalRibbon", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxk9y0b", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;My python solution&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;#
        Day 2 - Part 1 and 2\nwith open(&amp;#39;input.txt&amp;#39;) as f:\n  lines
        = f.readlines()\n\ntotalPaper = 0\ntotalRibbon = 0\n\nfor line in lines:\n  l,w,h
        = map(int, line.split(&amp;#39;x&amp;#39;))\n  totalPaper += (2*l*w + 2*w*h
        + 2*h*l) + min(l*w, w*h, h*l)\n  totalRibbon += min(l,w,h)*2 + sorted([l,w,h])[1]
        * 2 + (l*w*h)\n\n# answers\nprint &amp;quot;Total wrapping paper needed:&amp;quot;,
        totalPaper\nprint &amp;quot;Total ribbon needed:&amp;quot;, totalRibbon\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk9y0b/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449056396.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "cxku91j",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Bonooru",
        "can_mod_post": false, "created_utc": 1449090581.0, "send_replies": true,
        "parent_id": "t1_cxkb2vc", "score": 1, "author_fullname": "t2_6xy07", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Not cheating. The tool you used isn''t the same as what others were using,
        but that doesn''t mean that yours is wrong.", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxku91j", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not cheating. The tool you
        used isn&amp;#39;t the same as what others were using, but that doesn&amp;#39;t
        mean that yours is wrong.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_3v3w2f", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxku91j/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1449090581.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}, {"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 1, "removal_reason": null, "link_id": "t3_3v3w2f",
        "author_flair_template_id": null, "likes": null, "replies": "", "user_reports":
        [], "saved": false, "id": "cxl9kh4", "banned_at_utc": null, "mod_reason_title":
        null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow":
        true, "author": "[deleted]", "can_mod_post": false, "send_replies": true,
        "parent_id": "t1_cxkb2vc", "score": 1, "approved_by": null, "report_reasons":
        null, "all_awardings": [], "subreddit_id": "t5_3b3wa", "body": "Well, it is
        an advent of **code**.", "edited": false, "author_flair_css_class": null,
        "collapsed": false, "downs": 0, "is_submitter": false, "body_html": "&lt;div
        class=\"md\"&gt;&lt;p&gt;Well, it is an advent of &lt;strong&gt;code&lt;/strong&gt;.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxl9kh4/",
        "num_reports": null, "locked": false, "name": "t1_cxl9kh4", "created": 1449113946.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1449113946.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 1, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "cxkb2vc", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "zolk333", "can_mod_post": false, "created_utc":
        1449060315.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 2,
        "author_fullname": "t2_d1o5q", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "I did it with excel .-.\n[Solution](\nhttps://docs.google.com/spreadsheets/d/1_ub6zZuUDDkdoMTVjhwvBqkSdLb1rgYTEiHuRlqKfCo/edit?usp=sharing)\nWas
        this cheating?", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxkb2vc", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        did it with excel .-.\n&lt;a href=\"https://docs.google.com/spreadsheets/d/1_ub6zZuUDDkdoMTVjhwvBqkSdLb1rgYTEiHuRlqKfCo/edit?usp=sharing\"&gt;Solution&lt;/a&gt;\nWas
        this cheating?&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkb2vc/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1449060315.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_3v3w2f", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 2}}, {"kind": "t1", "data": {"total_awards_received": 0, "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "ups": 2, "removal_reason": null, "link_id": "t3_3v3w2f",
        "author_flair_template_id": null, "likes": null, "replies": {"kind": "Listing",
        "data": {"after": null, "dist": null, "modhash": "", "geo_filter": "", "children":
        [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null,
        "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"total_awards_received":
        0, "approved_at_utc": null, "author_is_blocked": false, "comment_type": null,
        "awarders": [], "mod_reason_by": null, "banned_by": null, "ups": 1, "removal_reason":
        null, "link_id": "t3_3v3w2f", "author_flair_template_id": null, "likes": null,
        "replies": {"kind": "Listing", "data": {"after": null, "dist": null, "modhash":
        "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 1, "removal_reason": null, "link_id": "t3_3v3w2f", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "cxpy8gq", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_cxpw366", "score":
        1, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "And here''s mine :)  https://www.reddit.com/r/adventofcode/comments/3vmltn/day_6_solutions/cxpy7m6",
        "edited": false, "author_flair_css_class": null, "collapsed": false, "downs":
        0, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;And
        here&amp;#39;s mine :)  &lt;a href=\"https://www.reddit.com/r/adventofcode/comments/3vmltn/day_6_solutions/cxpy7m6\"&gt;https://www.reddit.com/r/adventofcode/comments/3vmltn/day_6_solutions/cxpy7m6&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxpy8gq/",
        "num_reports": null, "locked": false, "name": "t1_cxpy8gq", "created": 1449463750.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1449463750.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 4, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "cxpw366", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "masasin", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_cxpvvp9", "score": 1, "author_fullname": "t2_8y0z9",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Yep, it''s my first time really doing full
        TDD too. When everything is done I put it in a single function to show Reddit.\n\nP.S.,
        for Day 6, numpy is awesome. [Here](https://www.reddit.com/r/adventofcode/comments/3vmltn/day_6_solutions/cxp83sp)''s
        my answer.", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxpw366", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yep,
        it&amp;#39;s my first time really doing full TDD too. When everything is done
        I put it in a single function to show Reddit.&lt;/p&gt;\n\n&lt;p&gt;P.S.,
        for Day 6, numpy is awesome. &lt;a href=\"https://www.reddit.com/r/adventofcode/comments/3vmltn/day_6_solutions/cxp83sp\"&gt;Here&lt;/a&gt;&amp;#39;s
        my answer.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null,
        "distinguished": null, "associated_award": null, "stickied": false, "author_premium":
        false, "can_gild": false, "link_id": "t3_3v3w2f", "unrepliable_reason": null,
        "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxpw366/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449459671.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449459671.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxpvvp9", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "[deleted]", "can_mod_post": false, "created_utc":
        1449459296.0, "send_replies": true, "parent_id": "t1_cxptsl5", "score": 1,
        "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Thanks for the comments! You''re totally right about
        the face_areas thing. That''s a much better choice of name than just \"sides\".
        \n\nAnd I see what you''re saying about using a list comprehension rather
        than the functional map. \n\nThe testable units have been incredible. I almost
        never write code in a TDD way, so it''s been pretty nice to write these small
        units, stick them together, and know with pretty good certainty that my answer''s
        correct before I submit it. Especially with Day 6, because I got a few off-by-one
        errors with the ranges, and ended up changing from mapping on/off to 1/-1
        and instead doing 1/0. Once I updated my tests, then it was nice knowing that
        I hadn''t screwed it up along the way. ", "edited": false, "author_flair_css_class":
        null, "downs": 0, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks
        for the comments! You&amp;#39;re totally right about the face_areas thing.
        That&amp;#39;s a much better choice of name than just &amp;quot;sides&amp;quot;.
        &lt;/p&gt;\n\n&lt;p&gt;And I see what you&amp;#39;re saying about using a
        list comprehension rather than the functional map. &lt;/p&gt;\n\n&lt;p&gt;The
        testable units have been incredible. I almost never write code in a TDD way,
        so it&amp;#39;s been pretty nice to write these small units, stick them together,
        and know with pretty good certainty that my answer&amp;#39;s correct before
        I submit it. Especially with Day 6, because I got a few off-by-one errors
        with the ranges, and ended up changing from mapping on/off to 1/-1 and instead
        doing 1/0. Once I updated my tests, then it was nice knowing that I hadn&amp;#39;t
        screwed it up along the way. &lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "subreddit_type": "public",
        "can_gild": false, "top_awarded_type": null, "unrepliable_reason": null, "author_flair_text_color":
        "dark", "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxpvvp9/",
        "num_reports": null, "locked": false, "name": "t1_cxpvvp9", "created": 1449459296.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "collapsed": false, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}], "before":
        null}}, "user_reports": [], "saved": false, "id": "cxptsl5", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "masasin", "can_mod_post": false, "created_utc":
        1449455557.0, "send_replies": true, "parent_id": "t1_cxkk5qj", "score": 1,
        "author_fullname": "t2_8y0z9", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Very nice. Some comments for
        you though:\n\n* In `get_wrapping_paper_area`, `sides` is a bad name because
        you have `face_areas`.\n* `[int(i) for i in line.split(''x'')]` tends to be
        more common.\n\nI love the testable units, too.", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxptsl5", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Very nice. Some comments for
        you though:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;In &lt;code&gt;get_wrapping_paper_area&lt;/code&gt;,
        &lt;code&gt;sides&lt;/code&gt; is a bad name because you have &lt;code&gt;face_areas&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;[int(i)
        for i in line.split(&amp;#39;x&amp;#39;)]&lt;/code&gt; tends to be more common.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I
        love the testable units, too.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_3v3w2f", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxptsl5/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1449455557.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "cxkk5qj", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_3v3w2f", "score":
        2, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "I''ve been going for total overkill in my Python 3 programs.
        For instance, here''s my part 1 for today, complete with full preamble at
        the top describing the problem, test cases (using doctest), and as many best
        practices as I can (although I''m sure I''ve messed up a few of them):\n\n    #!/usr/bin/env
        python3\n    \"\"\"Solve Day 2/Part 1 of the AdventOfCode\n    \n    The elves
        are running low on wrapping paper, and so they need to\n    submit an order
        for more. They have a list of the dimensions (length\n    l, width w, and
        height h) of each present, and only want to order\n    exactly as much as
        they need.\n    \n    Fortunately, every present is a box (a perfect right
        rectangular\n    prism), which makes calculating the required wrapping paper
        for each\n    gift a little easier: find the surface area of the box, which
        is 2*l*w\n    + 2*w*h + 2*h*l. The elves also need a little extra paper for
        each\n    present: the area of the smallest side.\n    \n    For example:\n    \n    -
        A present with dimensions 2x3x4 requires 2*6 + 2*12 + 2*8 = 52\n      square
        feet of wrapping paper plus 6 square feet of slack, for a\n      total of
        58 square feet.\n    \n    - A present with dimensions 1x1x10 requires 2*1
        + 2*10 + 2*10 = 42\n      square feet of wrapping paper plus 1 square foot
        of slack, for a\n      total of 43 square feet.\n    \n    All numbers in
        the elves'' list are in feet. How many total square feet\n    of wrapping
        paper should they order?\n    \n    \"\"\"\n    \n    def get_total_wrapping_paper_area(dimensions):\n        \"\"\"Return
        the total area needed for all boxes\n    \n        This function accepts an
        iterator which returns length, width,\n        height tuples and determines
        the total area needed for all of the\n        boxes.\n    \n        &gt;&gt;&gt;
        get_total_wrapping_paper_area([(1, 1, 1)])\n        7\n        &gt;&gt;&gt;
        get_total_wrapping_paper_area([(1, 1, 1), (1, 1, 10)])\n        50\n        &gt;&gt;&gt;
        get_total_wrapping_paper_area([])\n        0\n    \n        \"\"\"\n        total_area
        = 0\n        for (length, width, height) in dimensions:\n            total_area
        += get_wrapping_paper_area(length, width, height)\n    \n        return total_area\n    \n    def
        get_wrapping_paper_area(length, width, height):\n        \"\"\"Return the
        area of paper needed to cover the box\n    \n        The area is found by
        taking the surface area of the box (which is\n        the sum of the areas
        of each side) and then adding a little bit\n        extra slack for the elves
        to wrap with.\n    \n        The slack is defined as the area of the smallest
        side.\n    \n        &gt;&gt;&gt; get_wrapping_paper_area(1, 1, 1)\n        7\n        &gt;&gt;&gt;
        get_wrapping_paper_area(1, 1, 10)\n        43\n        &gt;&gt;&gt; get_wrapping_paper_area(2,
        3, 4)\n        58\n    \n        \"\"\"\n        sides = (\n            length
        * width,\n            width * height,\n            length * height,\n        )\n    \n        return
        2 * sum(sides) + min(sides)\n    \n    def dimensions_from_line(line):\n        \"\"\"Get
        dimensions from a single line of text\n    \n        Dimensions in a file
        are expected to be in the form:\n        \"LxWxH\". Where L, W, and H are
        integers. For example, 2x4x8\n        represents the dimensions of a box with
        length 2, width 4, and\n        height 8.\n    \n        &gt;&gt;&gt; dimensions_from_line(\"1x2x3\")\n        (1,
        2, 3)\n        &gt;&gt;&gt; dimensions_from_line(\"2x4x8\")\n        (2, 4,
        8)\n        &gt;&gt;&gt; dimensions_from_line(\"\")\n        Traceback (most
        recent call last):\n         ...\n        ValueError: invalid literal for
        int() with base 10: ''''\n    \n        \"\"\"\n        (length, width, height)
        = map(int, line.split(''x''))\n    \n        return (length, width, height)\n    \n    def
        dimension_reader(fileobj):\n        \"\"\"Return iterator for each set of
        dimensions in file\n    \n        Dimensions are in the form specified by\n        :func:`dimensions_from_line`.\n    \n        &gt;&gt;&gt;
        list(dimension_reader([\"2x4x8\", \"1x2x3\"]))\n        [(2, 4, 8), (1, 2,
        3)]\n        &gt;&gt;&gt; list(dimension_reader([]))\n        []\n    \n        \"\"\"\n        for
        line in fileobj:\n            (length, width, height) = dimensions_from_line(line)\n            yield
        (length, width, height)\n    \n    def main(filename):\n        \"\"\"Read
        dimensions from file and print the total wrapping paper area\"\"\"\n        with
        open(filename, ''r'') as f:\n            iterator = dimension_reader(f)\n            total_area
        = get_total_wrapping_paper_area(iterator)\n    \n            print(total_area)\n    \n    if
        __name__ == \"__main__\":\n        import argparse\n    \n        parser =
        argparse.ArgumentParser()\n        parser.add_argument(''filename'')\n        args
        = parser.parse_args()\n    \n        main(**vars(args))", "edited": false,
        "downs": 0, "author_flair_css_class": null, "collapsed": false, "is_submitter":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been going
        for total overkill in my Python 3 programs. For instance, here&amp;#39;s my
        part 1 for today, complete with full preamble at the top describing the problem,
        test cases (using doctest), and as many best practices as I can (although
        I&amp;#39;m sure I&amp;#39;ve messed up a few of them):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/usr/bin/env
        python3\n&amp;quot;&amp;quot;&amp;quot;Solve Day 2/Part 1 of the AdventOfCode\n\nThe
        elves are running low on wrapping paper, and so they need to\nsubmit an order
        for more. They have a list of the dimensions (length\nl, width w, and height
        h) of each present, and only want to order\nexactly as much as they need.\n\nFortunately,
        every present is a box (a perfect right rectangular\nprism), which makes calculating
        the required wrapping paper for each\ngift a little easier: find the surface
        area of the box, which is 2*l*w\n+ 2*w*h + 2*h*l. The elves also need a little
        extra paper for each\npresent: the area of the smallest side.\n\nFor example:\n\n-
        A present with dimensions 2x3x4 requires 2*6 + 2*12 + 2*8 = 52\n  square feet
        of wrapping paper plus 6 square feet of slack, for a\n  total of 58 square
        feet.\n\n- A present with dimensions 1x1x10 requires 2*1 + 2*10 + 2*10 = 42\n  square
        feet of wrapping paper plus 1 square foot of slack, for a\n  total of 43 square
        feet.\n\nAll numbers in the elves&amp;#39; list are in feet. How many total
        square feet\nof wrapping paper should they order?\n\n&amp;quot;&amp;quot;&amp;quot;\n\ndef
        get_total_wrapping_paper_area(dimensions):\n    &amp;quot;&amp;quot;&amp;quot;Return
        the total area needed for all boxes\n\n    This function accepts an iterator
        which returns length, width,\n    height tuples and determines the total area
        needed for all of the\n    boxes.\n\n    &amp;gt;&amp;gt;&amp;gt; get_total_wrapping_paper_area([(1,
        1, 1)])\n    7\n    &amp;gt;&amp;gt;&amp;gt; get_total_wrapping_paper_area([(1,
        1, 1), (1, 1, 10)])\n    50\n    &amp;gt;&amp;gt;&amp;gt; get_total_wrapping_paper_area([])\n    0\n\n    &amp;quot;&amp;quot;&amp;quot;\n    total_area
        = 0\n    for (length, width, height) in dimensions:\n        total_area +=
        get_wrapping_paper_area(length, width, height)\n\n    return total_area\n\ndef
        get_wrapping_paper_area(length, width, height):\n    &amp;quot;&amp;quot;&amp;quot;Return
        the area of paper needed to cover the box\n\n    The area is found by taking
        the surface area of the box (which is\n    the sum of the areas of each side)
        and then adding a little bit\n    extra slack for the elves to wrap with.\n\n    The
        slack is defined as the area of the smallest side.\n\n    &amp;gt;&amp;gt;&amp;gt;
        get_wrapping_paper_area(1, 1, 1)\n    7\n    &amp;gt;&amp;gt;&amp;gt; get_wrapping_paper_area(1,
        1, 10)\n    43\n    &amp;gt;&amp;gt;&amp;gt; get_wrapping_paper_area(2, 3,
        4)\n    58\n\n    &amp;quot;&amp;quot;&amp;quot;\n    sides = (\n        length
        * width,\n        width * height,\n        length * height,\n    )\n\n    return
        2 * sum(sides) + min(sides)\n\ndef dimensions_from_line(line):\n    &amp;quot;&amp;quot;&amp;quot;Get
        dimensions from a single line of text\n\n    Dimensions in a file are expected
        to be in the form:\n    &amp;quot;LxWxH&amp;quot;. Where L, W, and H are integers.
        For example, 2x4x8\n    represents the dimensions of a box with length 2,
        width 4, and\n    height 8.\n\n    &amp;gt;&amp;gt;&amp;gt; dimensions_from_line(&amp;quot;1x2x3&amp;quot;)\n    (1,
        2, 3)\n    &amp;gt;&amp;gt;&amp;gt; dimensions_from_line(&amp;quot;2x4x8&amp;quot;)\n    (2,
        4, 8)\n    &amp;gt;&amp;gt;&amp;gt; dimensions_from_line(&amp;quot;&amp;quot;)\n    Traceback
        (most recent call last):\n     ...\n    ValueError: invalid literal for int()
        with base 10: &amp;#39;&amp;#39;\n\n    &amp;quot;&amp;quot;&amp;quot;\n    (length,
        width, height) = map(int, line.split(&amp;#39;x&amp;#39;))\n\n    return (length,
        width, height)\n\ndef dimension_reader(fileobj):\n    &amp;quot;&amp;quot;&amp;quot;Return
        iterator for each set of dimensions in file\n\n    Dimensions are in the form
        specified by\n    :func:`dimensions_from_line`.\n\n    &amp;gt;&amp;gt;&amp;gt;
        list(dimension_reader([&amp;quot;2x4x8&amp;quot;, &amp;quot;1x2x3&amp;quot;]))\n    [(2,
        4, 8), (1, 2, 3)]\n    &amp;gt;&amp;gt;&amp;gt; list(dimension_reader([]))\n    []\n\n    &amp;quot;&amp;quot;&amp;quot;\n    for
        line in fileobj:\n        (length, width, height) = dimensions_from_line(line)\n        yield
        (length, width, height)\n\ndef main(filename):\n    &amp;quot;&amp;quot;&amp;quot;Read
        dimensions from file and print the total wrapping paper area&amp;quot;&amp;quot;&amp;quot;\n    with
        open(filename, &amp;#39;r&amp;#39;) as f:\n        iterator = dimension_reader(f)\n        total_area
        = get_total_wrapping_paper_area(iterator)\n\n        print(total_area)\n\nif
        __name__ == &amp;quot;__main__&amp;quot;:\n    import argparse\n\n    parser
        = argparse.ArgumentParser()\n    parser.add_argument(&amp;#39;filename&amp;#39;)\n    args
        = parser.parse_args()\n\n    main(**vars(args))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkk5qj/",
        "num_reports": null, "locked": false, "name": "t1_cxkk5qj", "created": 1449076845.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1449076845.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "cxkmjmr",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Moontayle",
        "can_mod_post": false, "created_utc": 1449080141.0, "send_replies": true,
        "parent_id": "t1_cxk4tfg", "score": 1, "author_fullname": "t2_miu10", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "Pretty close to what I did. I used a TreeSet for the first solution since
        I was only interested in the first item (and it has that handy first() method).",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_cxkmjmr", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Pretty
        close to what I did. I used a TreeSet for the first solution since I was only
        interested in the first item (and it has that handy first() method).&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkmjmr/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449080141.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxk4tfg", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "karstens_rage", "can_mod_post": false,
        "created_utc": 1449037669.0, "send_replies": true, "parent_id": "t3_3v3w2f",
        "score": 1, "author_fullname": "t2_e5zi", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Java boiler plate
        (pretty inefficient but wanted the answer not a fast implementation): \n\n    import
        java.io.FileReader;\n    import java.io.BufferedReader;\n\n    import java.util.ArrayList;\n    import
        java.util.Collections;\n    import java.util.List;\n\n    public class ElvesTest
        {\n        public static void main(String [] args) throws Exception {\n            BufferedReader
        reader = new BufferedReader(new FileReader(args[0]));\n            String
        line = reader.readLine();\n            long feet = 0;\n            while (line
        != null) {\n                String [] parts = line.split(\"x\");\n                int
        l = Integer.parseInt(parts[0]);\n                int w = Integer.parseInt(parts[1]);\n                int
        h = Integer.parseInt(parts[2]);\n                List&lt;Integer&gt; list
        = new ArrayList&lt;Integer&gt;();\n\n    ....\n                line = reader.readLine();\n        }\n            reader.close();\n            System.out.println(String.format(\"required
        feet: %d\", feet));\n        }\n    }\n\npart 1 meat:\n\n            list.add(l*w);\n            list.add(w*h);\n            list.add(h*l);\n            \n            for
        (Integer area : list) {\n                feet += 2*area;\n            }\n\n            feet
        += Collections.min(list);\n\npart 2 meat:\n\n            list.add(l);\n            list.add(w);\n            list.add(h);\n            \n            Collections.sort(list);\n            feet
        += 2*list.get(0) + 2*list.get(1);\n            feet += list.get(0) * list.get(1)
        * list.get(2);\n", "edited": 1449038236.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxk4tfg", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Java
        boiler plate (pretty inefficient but wanted the answer not a fast implementation):
        &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import java.io.FileReader;\nimport java.io.BufferedReader;\n\nimport
        java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic
        class ElvesTest {\n    public static void main(String [] args) throws Exception
        {\n        BufferedReader reader = new BufferedReader(new FileReader(args[0]));\n        String
        line = reader.readLine();\n        long feet = 0;\n        while (line !=
        null) {\n            String [] parts = line.split(&amp;quot;x&amp;quot;);\n            int
        l = Integer.parseInt(parts[0]);\n            int w = Integer.parseInt(parts[1]);\n            int
        h = Integer.parseInt(parts[2]);\n            List&amp;lt;Integer&amp;gt; list
        = new ArrayList&amp;lt;Integer&amp;gt;();\n\n....\n            line = reader.readLine();\n    }\n        reader.close();\n        System.out.println(String.format(&amp;quot;required
        feet: %d&amp;quot;, feet));\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;part
        1 meat:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;        list.add(l*w);\n        list.add(w*h);\n        list.add(h*l);\n\n        for
        (Integer area : list) {\n            feet += 2*area;\n        }\n\n        feet
        += Collections.min(list);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;part 2 meat:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;        list.add(l);\n        list.add(w);\n        list.add(h);\n\n        Collections.sort(list);\n        feet
        += 2*list.get(0) + 2*list.get(1);\n        feet += list.get(0) * list.get(1)
        * list.get(2);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk4tfg/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449037669.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxk4uhp", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "NotAllToilets", "can_mod_post": false,
        "created_utc": 1449037740.0, "send_replies": true, "parent_id": "t3_3v3w2f",
        "score": 1, "author_fullname": "t2_slyho", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Here''s my F# solutions
        \n\n    type Present = {\n        length: int\n        width:  int\n        height:
        int\n    }\n\n    let GetWrappingPaperNeeded (p: Present) =\n        let sides
        = [p.length * p.width; p.width * p.height; p.height * p.length]\n        let
        double x = x * 2\n        let surfaceArea = List.map double sides |&gt; List.sum\n        let
        slack = List.min sides\n        surfaceArea + slack\n\n    let input = File.ReadAllLines(\"\"\"C:\\temp\\day2.txt\"\"\")\n\n    let
        parsePresent (str: string) = \n        let dimensions = str.Split([|''x''|])\n        {
        length = int dimensions.[0]; width = int dimensions.[1]; height = int dimensions.[2]}\n\n    let
        allPresents = Array.map parsePresent input\n\n    let totalWrappingPaperNeeded
        = \n        Array.map GetWrappingPaperNeeded allPresents\n        |&gt; Array.sum\n\n    ////
        pt2.\n\n    let getRibbonNeeded (p:Present) = \n        let dimensions = [p.length;
        p.width; p.height]\n        let bow = List.reduce (*) dimensions\n        let
        ribbon =\n            dimensions\n            |&gt; List.sortDescending\n            |&gt;
        List.tail\n            |&gt; List.map (fun x -&gt; x + x)\n            |&gt;
        List.sum\n        ribbon + bow\n\n    let totalRibbonNeeded = \n        Array.map
        getRibbonNeeded allPresents\n        |&gt; Array.sum", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxk4uhp", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s my F# solutions
        &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type Present = {\n    length: int\n    width:  int\n    height:
        int\n}\n\nlet GetWrappingPaperNeeded (p: Present) =\n    let sides = [p.length
        * p.width; p.width * p.height; p.height * p.length]\n    let double x = x
        * 2\n    let surfaceArea = List.map double sides |&amp;gt; List.sum\n    let
        slack = List.min sides\n    surfaceArea + slack\n\nlet input = File.ReadAllLines(&amp;quot;&amp;quot;&amp;quot;C:\\temp\\day2.txt&amp;quot;&amp;quot;&amp;quot;)\n\nlet
        parsePresent (str: string) = \n    let dimensions = str.Split([|&amp;#39;x&amp;#39;|])\n    {
        length = int dimensions.[0]; width = int dimensions.[1]; height = int dimensions.[2]}\n\nlet
        allPresents = Array.map parsePresent input\n\nlet totalWrappingPaperNeeded
        = \n    Array.map GetWrappingPaperNeeded allPresents\n    |&amp;gt; Array.sum\n\n////
        pt2.\n\nlet getRibbonNeeded (p:Present) = \n    let dimensions = [p.length;
        p.width; p.height]\n    let bow = List.reduce (*) dimensions\n    let ribbon
        =\n        dimensions\n        |&amp;gt; List.sortDescending\n        |&amp;gt;
        List.tail\n        |&amp;gt; List.map (fun x -&amp;gt; x + x)\n        |&amp;gt;
        List.sum\n    ribbon + bow\n\nlet totalRibbonNeeded = \n    Array.map getRibbonNeeded
        allPresents\n    |&amp;gt; Array.sum\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk4uhp/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449037740.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "cxki7t4", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "gnuconsulting",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_cxk5rbh", "score":
        1, "author_fullname": "t2_slykl", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Heh. Pure coincidence I''m
        sure :-P", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_cxki7t4", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Heh.
        Pure coincidence I&amp;#39;m sure :-P&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxki7t4/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449074038.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449074038.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxk5rbh", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Aneurysm9", "can_mod_post": false, "created_utc":
        1449040266.0, "send_replies": true, "parent_id": "t1_cxk4xpj", "score": 2,
        "author_fullname": "t2_4b465", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "I''m so proud of you! For
        a not-a-programmer you came up with pretty much the mirror of my Perl solution.",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_cxk5rbh", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m
        so proud of you! For a not-a-programmer you came up with pretty much the mirror
        of my Perl solution.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_3v3w2f", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk5rbh/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1449040266.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 2}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "cxk4xpj", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "gnuconsulting",
        "can_mod_post": false, "created_utc": 1449037970.0, "send_replies": true,
        "parent_id": "t3_3v3w2f", "score": 1, "author_fullname": "t2_slykl", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "Not-a-programmer
        solutions in ruby\n\nPart 1:\n\n    #!/usr/bin/env ruby\n\n    data = File.readlines(\"input.txt\")\n\n    total
        = 0\n    present = []\n    data.each do |c|\n      temp = c.strip.split(\"x\")\n      present
        = temp.collect{|i| i.to_i}\n      present = present.sort\n      x = 2 * present[0]
        * present[1]\n      y = 2 * present[1] * present[2]\n      z = 2 * present[2]
        * present[0]\n      total += x + y + z + (present[0] * present[1])\n    end\n\n    p
        total\n\n\nPart 2:\n\n    #!/usr/bin/env ruby\n\n    data = File.readlines(\"input.txt\")\n\n    total
        = 0\n    present = []\n    data.each do |c|\n      temp = c.strip.split(\"x\")\n      present
        = temp.collect{|i| i.to_i}\n      present = present.sort\n      ribbon = (present[0]
        * 2) + (present[1] * 2)\n      bow = present[0] * present[1] * present[2]\n      total
        += ribbon + bow\n    end\n\n    p total\n", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxk4xpj", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not-a-programmer solutions
        in ruby&lt;/p&gt;\n\n&lt;p&gt;Part 1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/usr/bin/env
        ruby\n\ndata = File.readlines(&amp;quot;input.txt&amp;quot;)\n\ntotal = 0\npresent
        = []\ndata.each do |c|\n  temp = c.strip.split(&amp;quot;x&amp;quot;)\n  present
        = temp.collect{|i| i.to_i}\n  present = present.sort\n  x = 2 * present[0]
        * present[1]\n  y = 2 * present[1] * present[2]\n  z = 2 * present[2] * present[0]\n  total
        += x + y + z + (present[0] * present[1])\nend\n\np total\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/usr/bin/env ruby\n\ndata = File.readlines(&amp;quot;input.txt&amp;quot;)\n\ntotal
        = 0\npresent = []\ndata.each do |c|\n  temp = c.strip.split(&amp;quot;x&amp;quot;)\n  present
        = temp.collect{|i| i.to_i}\n  present = present.sort\n  ribbon = (present[0]
        * 2) + (present[1] * 2)\n  bow = present[0] * present[1] * present[2]\n  total
        += ribbon + bow\nend\n\np total\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk4xpj/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449037970.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxk50d1", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Runenmeister", "can_mod_post": false,
        "created_utc": 1449038165.0, "send_replies": true, "parent_id": "t3_3v3w2f",
        "score": 1, "author_fullname": "t2_6x147", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "https://github.com/WuSage3/AdventOfCode_2015\n\nHere''s
        my C++ solution:\n\nDay2_part1.cpp\n    \n    /* Written for the C++14 compiler
        at \"https://ideone.com/\" */\n    \n    #include &lt;iostream&gt;\n    #include
        &lt;string&gt;\n    #include &lt;sstream&gt;\n    #include &lt;vector&gt;\n    \n    using
        namespace std;\n    \n    /* Prototypes */\n    vector&lt;string&gt;&amp;
        split(const string&amp;, char, vector&lt;string&gt;&amp;);\n    vector&lt;string&gt;  split(const
        string&amp;, char);\n    int getSurfaceArea(int, int, int);\n    int getSmallestSideArea(int,
        int, int);\n    \n    int main() {\n      string input;\n      vector&lt;string&gt;
        parsedInput;\n      int l, w, h, surfaceArea, smallestSideArea;\n      int
        totalWrappingPaper = 0;\n      while(getline(cin, input)) {\n        parsedInput
        = split(input, ''x'');\n    \tl = stoi(parsedInput.at(0));\n    \tw = stoi(parsedInput.at(1));\n    \th
        = stoi(parsedInput.at(2));\n    \t// cout &lt;&lt; \"Input: \" &lt;&lt; input
        &lt;&lt; \" L W H: \" &lt;&lt; l &lt;&lt; \" \" &lt;&lt; w &lt;&lt; \" \"
        &lt;&lt; h &lt;&lt; endl;\n    \tsurfaceArea = getSurfaceArea(l, w, h);\n    \tsmallestSideArea
        = getSmallestSideArea(l, w, h);\n    \ttotalWrappingPaper += surfaceArea +
        smallestSideArea;\n      }\n      \n      cout &lt;&lt; \"Total wrapping paper:
        \" &lt;&lt; totalWrappingPaper &lt;&lt; \" feet.\" &lt;&lt; endl;\n      return
        0;\n    }\n    \n    vector&lt;string&gt;&amp; split(const string&amp; s,
        char delim, vector&lt;string&gt;&amp; elems) {\n    \t/* Taken from: \"http://stackoverflow.com/questions/236129/split-a-string-in-c\"\n    \t
        * Stores results in pre-constructed vector\n    \t */\n        stringstream
        ss(s);\n        string item;\n        while (getline(ss, item, delim)) {\n          elems.push_back(item);\n        }\n        return
        elems;\n    }\n    \n    vector&lt;string&gt; split(const string&amp; s, char
        delim) {\n    \t/* Taken from: \"http://stackoverflow.com/questions/236129/split-a-string-in-c\"\n    \t
        * Returns a new vector\n    \t */\n        vector&lt;string&gt; elems;\n        split(s,
        delim, elems);\n        return elems;\n    }\n    \n    int getSurfaceArea(int
        l, int w, int h) {\n      int surfaceArea = 2*l*w + 2*w*h + 2*h*l;\n      return
        surfaceArea;\n    }\n    \n    int getSmallestSideArea(int l, int w, int h)
        {\n      int side1 = l*w;\n      int side2 = w*h;\n      int side3 = h*l;\n      \n      int
        smallestSideArea = side1;\n      \n      if(side2 &lt; smallestSideArea) {\n        smallestSideArea
        = side2;\n      }\n      if(side3 &lt; smallestSideArea) {\n        smallestSideArea
        = side3;\n      }\n      \n      return smallestSideArea;\n    }\n\nDay2_part2.cpp\n    \n    /*
        Written for the C++14 compiler at \"https://ideone.com/\" */\n    \n    #include
        &lt;iostream&gt;\n    #include &lt;string&gt;\n    #include &lt;sstream&gt;\n    #include
        &lt;vector&gt;\n    \n    using namespace std;\n    \n    /* Prototypes */\n    vector&lt;string&gt;&amp;
        split(const string&amp;, char, vector&lt;string&gt;&amp;);\n    vector&lt;string&gt;  split(const
        string&amp;, char);\n    int getVolume(int, int, int);\n    int getSmallestSidePerimeter(int,
        int, int);\n    \n    int main() {\n      string input;\n      vector&lt;string&gt;
        parsedInput;\n      int l, w, h, volume, smallestSidePerimeter;\n      int
        totalRibbon = 0;\n      while(getline(cin, input)) {\n        parsedInput
        = split(input, ''x'');\n    \tl = stoi(parsedInput.at(0));\n    \tw = stoi(parsedInput.at(1));\n    \th
        = stoi(parsedInput.at(2));\n    \t// cout &lt;&lt; \"Input: \" &lt;&lt; input
        &lt;&lt; \" L W H: \" &lt;&lt; l &lt;&lt; \" \" &lt;&lt; w &lt;&lt; \" \"
        &lt;&lt; h &lt;&lt; endl;\n    \tvolume = getVolume(l, w, h);\n    \tsmallestSidePerimeter
        = getSmallestSidePerimeter(l, w, h);\n    \ttotalRibbon += volume + smallestSidePerimeter;\n      }\n      \n      cout
        &lt;&lt; \"Total ribbon: \" &lt;&lt; totalRibbon &lt;&lt; \" feet.\" &lt;&lt;
        endl;\n      return 0;\n    }\n    \n    vector&lt;string&gt;&amp; split(const
        string&amp; s, char delim, vector&lt;string&gt;&amp; elems) {\n    \t/* Taken
        from: \"http://stackoverflow.com/questions/236129/split-a-string-in-c\"\n    \t
        * Stores results in pre-constructed vector\n    \t */\n        stringstream
        ss(s);\n        string item;\n        while (getline(ss, item, delim)) {\n          elems.push_back(item);\n        }\n        return
        elems;\n    }\n    \n    vector&lt;string&gt; split(const string&amp; s, char
        delim) {\n    \t/* Taken from: \"http://stackoverflow.com/questions/236129/split-a-string-in-c\"\n    \t
        * Returns a new vector\n    \t */\n        vector&lt;string&gt; elems;\n        split(s,
        delim, elems);\n        return elems;\n    }\n    \n    int getVolume(int
        l, int w, int h) {\n      int volume = l*w*h;\n      return volume;\n    }\n    \n    int
        getSmallestSidePerimeter(int l, int w, int h) {\n      int side1 = l+l+w+w;\n      int
        side2 = w+w+h+h;\n      int side3 = h+h+l+l;\n      \n      int smallestSidePerimeter
        = side1;\n      \n      if(side2 &lt; smallestSidePerimeter) {\n        smallestSidePerimeter
        = side2;\n      }\n      if(side3 &lt; smallestSidePerimeter) {\n        smallestSidePerimeter
        = side3;\n      }\n      \n      return smallestSidePerimeter;\n    }", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxk50d1",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/WuSage3/AdventOfCode_2015\"&gt;https://github.com/WuSage3/AdventOfCode_2015&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s
        my C++ solution:&lt;/p&gt;\n\n&lt;p&gt;Day2_part1.cpp&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;/*
        Written for the C++14 compiler at &amp;quot;https://ideone.com/&amp;quot;
        */\n\n#include &amp;lt;iostream&amp;gt;\n#include &amp;lt;string&amp;gt;\n#include
        &amp;lt;sstream&amp;gt;\n#include &amp;lt;vector&amp;gt;\n\nusing namespace
        std;\n\n/* Prototypes */\nvector&amp;lt;string&amp;gt;&amp;amp; split(const
        string&amp;amp;, char, vector&amp;lt;string&amp;gt;&amp;amp;);\nvector&amp;lt;string&amp;gt;  split(const
        string&amp;amp;, char);\nint getSurfaceArea(int, int, int);\nint getSmallestSideArea(int,
        int, int);\n\nint main() {\n  string input;\n  vector&amp;lt;string&amp;gt;
        parsedInput;\n  int l, w, h, surfaceArea, smallestSideArea;\n  int totalWrappingPaper
        = 0;\n  while(getline(cin, input)) {\n    parsedInput = split(input, &amp;#39;x&amp;#39;);\n    l
        = stoi(parsedInput.at(0));\n    w = stoi(parsedInput.at(1));\n    h = stoi(parsedInput.at(2));\n    //
        cout &amp;lt;&amp;lt; &amp;quot;Input: &amp;quot; &amp;lt;&amp;lt; input &amp;lt;&amp;lt;
        &amp;quot; L W H: &amp;quot; &amp;lt;&amp;lt; l &amp;lt;&amp;lt; &amp;quot;
        &amp;quot; &amp;lt;&amp;lt; w &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt;
        h &amp;lt;&amp;lt; endl;\n    surfaceArea = getSurfaceArea(l, w, h);\n    smallestSideArea
        = getSmallestSideArea(l, w, h);\n    totalWrappingPaper += surfaceArea + smallestSideArea;\n  }\n\n  cout
        &amp;lt;&amp;lt; &amp;quot;Total wrapping paper: &amp;quot; &amp;lt;&amp;lt;
        totalWrappingPaper &amp;lt;&amp;lt; &amp;quot; feet.&amp;quot; &amp;lt;&amp;lt;
        endl;\n  return 0;\n}\n\nvector&amp;lt;string&amp;gt;&amp;amp; split(const
        string&amp;amp; s, char delim, vector&amp;lt;string&amp;gt;&amp;amp; elems)
        {\n    /* Taken from: &amp;quot;http://stackoverflow.com/questions/236129/split-a-string-in-c&amp;quot;\n     *
        Stores results in pre-constructed vector\n     */\n    stringstream ss(s);\n    string
        item;\n    while (getline(ss, item, delim)) {\n      elems.push_back(item);\n    }\n    return
        elems;\n}\n\nvector&amp;lt;string&amp;gt; split(const string&amp;amp; s, char
        delim) {\n    /* Taken from: &amp;quot;http://stackoverflow.com/questions/236129/split-a-string-in-c&amp;quot;\n     *
        Returns a new vector\n     */\n    vector&amp;lt;string&amp;gt; elems;\n    split(s,
        delim, elems);\n    return elems;\n}\n\nint getSurfaceArea(int l, int w, int
        h) {\n  int surfaceArea = 2*l*w + 2*w*h + 2*h*l;\n  return surfaceArea;\n}\n\nint
        getSmallestSideArea(int l, int w, int h) {\n  int side1 = l*w;\n  int side2
        = w*h;\n  int side3 = h*l;\n\n  int smallestSideArea = side1;\n\n  if(side2
        &amp;lt; smallestSideArea) {\n    smallestSideArea = side2;\n  }\n  if(side3
        &amp;lt; smallestSideArea) {\n    smallestSideArea = side3;\n  }\n\n  return
        smallestSideArea;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Day2_part2.cpp&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;/*
        Written for the C++14 compiler at &amp;quot;https://ideone.com/&amp;quot;
        */\n\n#include &amp;lt;iostream&amp;gt;\n#include &amp;lt;string&amp;gt;\n#include
        &amp;lt;sstream&amp;gt;\n#include &amp;lt;vector&amp;gt;\n\nusing namespace
        std;\n\n/* Prototypes */\nvector&amp;lt;string&amp;gt;&amp;amp; split(const
        string&amp;amp;, char, vector&amp;lt;string&amp;gt;&amp;amp;);\nvector&amp;lt;string&amp;gt;  split(const
        string&amp;amp;, char);\nint getVolume(int, int, int);\nint getSmallestSidePerimeter(int,
        int, int);\n\nint main() {\n  string input;\n  vector&amp;lt;string&amp;gt;
        parsedInput;\n  int l, w, h, volume, smallestSidePerimeter;\n  int totalRibbon
        = 0;\n  while(getline(cin, input)) {\n    parsedInput = split(input, &amp;#39;x&amp;#39;);\n    l
        = stoi(parsedInput.at(0));\n    w = stoi(parsedInput.at(1));\n    h = stoi(parsedInput.at(2));\n    //
        cout &amp;lt;&amp;lt; &amp;quot;Input: &amp;quot; &amp;lt;&amp;lt; input &amp;lt;&amp;lt;
        &amp;quot; L W H: &amp;quot; &amp;lt;&amp;lt; l &amp;lt;&amp;lt; &amp;quot;
        &amp;quot; &amp;lt;&amp;lt; w &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt;
        h &amp;lt;&amp;lt; endl;\n    volume = getVolume(l, w, h);\n    smallestSidePerimeter
        = getSmallestSidePerimeter(l, w, h);\n    totalRibbon += volume + smallestSidePerimeter;\n  }\n\n  cout
        &amp;lt;&amp;lt; &amp;quot;Total ribbon: &amp;quot; &amp;lt;&amp;lt; totalRibbon
        &amp;lt;&amp;lt; &amp;quot; feet.&amp;quot; &amp;lt;&amp;lt; endl;\n  return
        0;\n}\n\nvector&amp;lt;string&amp;gt;&amp;amp; split(const string&amp;amp;
        s, char delim, vector&amp;lt;string&amp;gt;&amp;amp; elems) {\n    /* Taken
        from: &amp;quot;http://stackoverflow.com/questions/236129/split-a-string-in-c&amp;quot;\n     *
        Stores results in pre-constructed vector\n     */\n    stringstream ss(s);\n    string
        item;\n    while (getline(ss, item, delim)) {\n      elems.push_back(item);\n    }\n    return
        elems;\n}\n\nvector&amp;lt;string&amp;gt; split(const string&amp;amp; s, char
        delim) {\n    /* Taken from: &amp;quot;http://stackoverflow.com/questions/236129/split-a-string-in-c&amp;quot;\n     *
        Returns a new vector\n     */\n    vector&amp;lt;string&amp;gt; elems;\n    split(s,
        delim, elems);\n    return elems;\n}\n\nint getVolume(int l, int w, int h)
        {\n  int volume = l*w*h;\n  return volume;\n}\n\nint getSmallestSidePerimeter(int
        l, int w, int h) {\n  int side1 = l+l+w+w;\n  int side2 = w+w+h+h;\n  int
        side3 = h+h+l+l;\n\n  int smallestSidePerimeter = side1;\n\n  if(side2 &amp;lt;
        smallestSidePerimeter) {\n    smallestSidePerimeter = side2;\n  }\n  if(side3
        &amp;lt; smallestSidePerimeter) {\n    smallestSidePerimeter = side3;\n  }\n\n  return
        smallestSidePerimeter;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk50d1/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449038165.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxk54ki", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "segfaultvicta", "can_mod_post": false,
        "created_utc": 1449038470.0, "send_replies": true, "parent_id": "t3_3v3w2f",
        "score": 1, "author_fullname": "t2_52257", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "I''m not proud of
        myself. (C#, omitting the file-read boilerplate.)\n\n    private static int
        DayTwo(string line)\n        {\n            var split = line.Split(''x'');\n            int
        l = Convert.ToInt32(split[0]);\n            int w = Convert.ToInt32(split[1]);\n            int
        h = Convert.ToInt32(split[2]);\n            int[] areas = new int[3];\n            int[]
        perims = new int[3];\n            areas[0] = l * w;\n            areas[1]
        = w * h;\n            areas[2] = h * l;\n            perims[0] = l * 2 + w
        * 2;\n            perims[1] = w * 2 + h * 2;\n            perims[2] = h *
        2 + l * 2;\n            int sideA = 2 * areas[0] + 2 * areas[1] + 2 * areas[2]
        + areas.Min();\n            int sideB = l * w * h + perims.Min();\n            return
        sideB;\n        }", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxk54ki", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m
        not proud of myself. (C#, omitting the file-read boilerplate.)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;private
        static int DayTwo(string line)\n    {\n        var split = line.Split(&amp;#39;x&amp;#39;);\n        int
        l = Convert.ToInt32(split[0]);\n        int w = Convert.ToInt32(split[1]);\n        int
        h = Convert.ToInt32(split[2]);\n        int[] areas = new int[3];\n        int[]
        perims = new int[3];\n        areas[0] = l * w;\n        areas[1] = w * h;\n        areas[2]
        = h * l;\n        perims[0] = l * 2 + w * 2;\n        perims[1] = w * 2 +
        h * 2;\n        perims[2] = h * 2 + l * 2;\n        int sideA = 2 * areas[0]
        + 2 * areas[1] + 2 * areas[2] + areas.Min();\n        int sideB = l * w *
        h + perims.Min();\n        return sideB;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk54ki/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449038470.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxk58t6", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Aneurysm9", "can_mod_post": false, "created_utc":
        1449038787.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_4b465", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "My simplified Perl solution:\n\n    #!/usr/bin/env
        perl\n    \n    use strict;\n    use warnings;\n    \n    use File::Slurp
        qw/read_file/;\n    \n    my @boxes = read_file(''input'');\n    my $total
        = 0;\n    my $ribbon = 0;\n    \n    foreach my $box (@boxes) {\n    \tchomp
        $box;\n    \tmy @dims = sort {$a &lt;=&gt; $b } split /x/, $box;\n    \t$total
        += (2 * $dims[0] * $dims[1]) + (2 * $dims[1] * $dims[2]) + (2 * $dims[2] *
        $dims[0]) + ($dims[0] * $dims[1]);\n    \t$ribbon += $dims[0] + $dims[0] +
        $dims[1] + $dims[1] + ($dims[0]*$dims[1]*$dims[2]);\n    }\n    \n    print
        \"Total: $total\\tRibbon: $ribbon\\n\";", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxk58t6", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My simplified Perl solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/usr/bin/env
        perl\n\nuse strict;\nuse warnings;\n\nuse File::Slurp qw/read_file/;\n\nmy
        @boxes = read_file(&amp;#39;input&amp;#39;);\nmy $total = 0;\nmy $ribbon =
        0;\n\nforeach my $box (@boxes) {\n    chomp $box;\n    my @dims = sort {$a
        &amp;lt;=&amp;gt; $b } split /x/, $box;\n    $total += (2 * $dims[0] * $dims[1])
        + (2 * $dims[1] * $dims[2]) + (2 * $dims[2] * $dims[0]) + ($dims[0] * $dims[1]);\n    $ribbon
        += $dims[0] + $dims[0] + $dims[1] + $dims[1] + ($dims[0]*$dims[1]*$dims[2]);\n}\n\nprint
        &amp;quot;Total: $total\\tRibbon: $ribbon\\n&amp;quot;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk58t6/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449038787.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxk62pr", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "theMoriarty", "can_mod_post": false, "created_utc":
        1449041229.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_5n9lp", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "python 3-liner:\n\n    d = lambda sss, d:
        int(sss.split(\"x\")[d])\n    s2 = lambda sss: 2 * (d(sss, 0) * d(sss, 1)
        + d(sss, 0) * d(sss, 2) + d(sss, 1) * d(sss, 2)) + min([d(sss, 0) * d(sss,
        1), d(sss, 0) * d(sss, 2), d(sss, 1) * d(sss, 2)]) # this one is straightforward\n    s2_2
        = lambda sss: 2 * sum(sorted([d(sss, x) for x in range(3)])[:2]) + d(sss,
        0) * d(sss, 1) * d(sss, 2) # this one is tricky\npart 1: sum([s2(x.strip())
        for x in open(''/tmp/d2'').readlines() if x.strip()])\n\npart 2: sum([s2_2(x.strip())
        for x in open(''/tmp/d2'').readlines() if x.strip()])", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxk62pr", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;python 3-liner:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;d
        = lambda sss, d: int(sss.split(&amp;quot;x&amp;quot;)[d])\ns2 = lambda sss:
        2 * (d(sss, 0) * d(sss, 1) + d(sss, 0) * d(sss, 2) + d(sss, 1) * d(sss, 2))
        + min([d(sss, 0) * d(sss, 1), d(sss, 0) * d(sss, 2), d(sss, 1) * d(sss, 2)])
        # this one is straightforward\ns2_2 = lambda sss: 2 * sum(sorted([d(sss, x)
        for x in range(3)])[:2]) + d(sss, 0) * d(sss, 1) * d(sss, 2) # this one is
        tricky\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;part 1: sum([s2(x.strip()) for
        x in open(&amp;#39;/tmp/d2&amp;#39;).readlines() if x.strip()])&lt;/p&gt;\n\n&lt;p&gt;part
        2: sum([s2_2(x.strip()) for x in open(&amp;#39;/tmp/d2&amp;#39;).readlines()
        if x.strip()])&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk62pr/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1449041229.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_3v3w2f", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "cxk6c64",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "hicklc01",
        "can_mod_post": false, "created_utc": 1449042070.0, "send_replies": true,
        "parent_id": "t3_3v3w2f", "score": 1, "author_fullname": "t2_4i7c7", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "I
        enjoyed the problem.\n\nNotes: I changed up how I separated the dimensions
        on part 2. Also no data validation. This will break on bad input. Probably
        shouldn''t be using namespace but I hate having to write std:: before almost
        everything. Should be using auto.\n\nPart1\n\n    #include &lt;iostream&gt;\n    #include
        &lt;iterator&gt;\n    #include &lt;numeric&gt;\n    #include &lt;vector&gt;\n    #include
        &lt;sstream&gt;\n    #include &lt;algorithm&gt;\n   \n    using namespace
        std;\n   \n    int main()\n    {\n        int total = accumulate(\n            istream_iterator&lt;string&gt;(cin),\n            istream_iterator&lt;string&gt;(),\n            0,\n            [&amp;](int
        x, string y) {\n                stringstream ss(y);\n                vector&lt;int&gt;
        sides;\n                while(ss.good())\n                {\n                    string
        raw;\n                    getline( ss, raw,''x'');\n                    sides.push_back(stoi(raw));\n                }\n                sort(sides.begin(),sides.end());\n                return
        x + 3*sides[0]*sides[1]+2*sides[1]*sides[2]+2*sides[0]*sides[2];\n            }\n        );\n        cout&lt;&lt;total&lt;&lt;endl;\n        return
        0;\n    }\n\n\nPart2\n\n    #include &lt;iostream&gt;\n    #include &lt;iterator&gt;\n    #include
        &lt;numeric&gt;\n    #include &lt;vector&gt;\n    #include &lt;sstream&gt;\n    #include
        &lt;algorithm&gt;\n   \n    using namespace std;\n   \n    struct xsv_reader:
        ctype&lt;char&gt;{\n        xsv_reader(): ctype&lt;char&gt;(get_table()){}\n        static
        ctype_base::mask const* get_table(){\n        static vector&lt;ctype_base::mask&gt;
        rc(table_size, ctype_base::mask());\n            rc[''x''] = ctype_base::space;\n            rc[''\\n'']
        = ctype_base::space;\n            rc['' ''] = ctype_base::space;\n            return
        &amp;rc[0];\n        }\n    };\n   \n    int main()\n    {\n        int total
        = accumulate(\n            istream_iterator&lt;string&gt;(cin),\n            istream_iterator&lt;string&gt;(),\n            0,\n            [&amp;](int
        x, string y) {\n                stringstream ss(y);\n                ss.imbue(std::locale(std::locale(),new
        xsv_reader()));\n                vector&lt;int&gt; sides = vector&lt;int&gt;(istream_iterator&lt;int&gt;(ss),\n                    istream_iterator&lt;int&gt;());\n                sort(sides.begin(),sides.end());\n                return
        x + 2*(sides[0]+sides[1]) + sides[0]*sides[1]*sides[2];\n            }\n        );\n        cout&lt;&lt;total&lt;&lt;endl;\n        return
        0;\n    }\n", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxk6c64", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        enjoyed the problem.&lt;/p&gt;\n\n&lt;p&gt;Notes: I changed up how I separated
        the dimensions on part 2. Also no data validation. This will break on bad
        input. Probably shouldn&amp;#39;t be using namespace but I hate having to
        write std:: before almost everything. Should be using auto.&lt;/p&gt;\n\n&lt;p&gt;Part1&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include
        &amp;lt;iostream&amp;gt;\n#include &amp;lt;iterator&amp;gt;\n#include &amp;lt;numeric&amp;gt;\n#include
        &amp;lt;vector&amp;gt;\n#include &amp;lt;sstream&amp;gt;\n#include &amp;lt;algorithm&amp;gt;\n\nusing
        namespace std;\n\nint main()\n{\n    int total = accumulate(\n        istream_iterator&amp;lt;string&amp;gt;(cin),\n        istream_iterator&amp;lt;string&amp;gt;(),\n        0,\n        [&amp;amp;](int
        x, string y) {\n            stringstream ss(y);\n            vector&amp;lt;int&amp;gt;
        sides;\n            while(ss.good())\n            {\n                string
        raw;\n                getline( ss, raw,&amp;#39;x&amp;#39;);\n                sides.push_back(stoi(raw));\n            }\n            sort(sides.begin(),sides.end());\n            return
        x + 3*sides[0]*sides[1]+2*sides[1]*sides[2]+2*sides[0]*sides[2];\n        }\n    );\n    cout&amp;lt;&amp;lt;total&amp;lt;&amp;lt;endl;\n    return
        0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part2&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include
        &amp;lt;iostream&amp;gt;\n#include &amp;lt;iterator&amp;gt;\n#include &amp;lt;numeric&amp;gt;\n#include
        &amp;lt;vector&amp;gt;\n#include &amp;lt;sstream&amp;gt;\n#include &amp;lt;algorithm&amp;gt;\n\nusing
        namespace std;\n\nstruct xsv_reader: ctype&amp;lt;char&amp;gt;{\n    xsv_reader():
        ctype&amp;lt;char&amp;gt;(get_table()){}\n    static ctype_base::mask const*
        get_table(){\n    static vector&amp;lt;ctype_base::mask&amp;gt; rc(table_size,
        ctype_base::mask());\n        rc[&amp;#39;x&amp;#39;] = ctype_base::space;\n        rc[&amp;#39;\\n&amp;#39;]
        = ctype_base::space;\n        rc[&amp;#39; &amp;#39;] = ctype_base::space;\n        return
        &amp;amp;rc[0];\n    }\n};\n\nint main()\n{\n    int total = accumulate(\n        istream_iterator&amp;lt;string&amp;gt;(cin),\n        istream_iterator&amp;lt;string&amp;gt;(),\n        0,\n        [&amp;amp;](int
        x, string y) {\n            stringstream ss(y);\n            ss.imbue(std::locale(std::locale(),new
        xsv_reader()));\n            vector&amp;lt;int&amp;gt; sides = vector&amp;lt;int&amp;gt;(istream_iterator&amp;lt;int&amp;gt;(ss),\n                istream_iterator&amp;lt;int&amp;gt;());\n            sort(sides.begin(),sides.end());\n            return
        x + 2*(sides[0]+sides[1]) + sides[0]*sides[1]*sides[2];\n        }\n    );\n    cout&amp;lt;&amp;lt;total&amp;lt;&amp;lt;endl;\n    return
        0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk6c64/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1449042070.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_3v3w2f", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "cxk6kdk", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Aneurysm9",
        "can_mod_post": false, "created_utc": 1449042826.0, "send_replies": true,
        "parent_id": "t1_cxk6fzf", "score": 3, "author_fullname": "t2_4b465", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "The creator of AoC is also the creator of phpsadness.com, but I''m sure he
        won''t hold your choice of language against you!\n\nIt does seem that PHP
        is falling out of favor, but maybe PHP7 can revitalize it a bit.  I suspect
        it''s just as capable of solving all of the AoC challenges as any other language
        and the solutions will probably be pretty similar to any Perl or Ruby solution.",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_cxk6kdk", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The
        creator of AoC is also the creator of phpsadness.com, but I&amp;#39;m sure
        he won&amp;#39;t hold your choice of language against you!&lt;/p&gt;\n\n&lt;p&gt;It
        does seem that PHP is falling out of favor, but maybe PHP7 can revitalize
        it a bit.  I suspect it&amp;#39;s just as capable of solving all of the AoC
        challenges as any other language and the solutions will probably be pretty
        similar to any Perl or Ruby solution.&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk6kdk/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449042826.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 3}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "distinguished": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "cxkw7ag",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "artesea",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_cxkh4hk", "score":
        1, "author_fullname": "t2_c2pur", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Wonder what is causing it
        to be treated as a string instead then, works fine with my code on my machine.
        Tried adding random spaces within the data but still get the same numbers.
        Also not sure why it''s only affecting the second answer.", "edited": false,
        "author_flair_css_class": null, "name": "t1_cxkw7ag", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;Wonder what is causing it to be treated
        as a string instead then, works fine with my code on my machine. Tried adding
        random spaces within the data but still get the same numbers. Also not sure
        why it&amp;#39;s only affecting the second answer.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "link_id": "t3_3v3w2f", "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": null, "treatment_tags":
        [], "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkw7ag/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449093188.0, "author_flair_text": null, "collapsed": false, "created_utc":
        1449093188.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 4, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxkh4hk", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "jamosaur-", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_cxkbp1l", "score": 1, "author_fullname": "t2_sl5sf",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "    php day2.php\n    1588178 3783758\n\n    php
        day2-golfed.php\n    1588178 3783758\n\nif i change `sort($b,1)` to `sort($b)`
        i get this:\n\n    php day2-golfed.php\n    1588178 3792506\n\nwhich is incorrect,
        it''s something to do with the linebreaks i think, adding a `trim()` in the
        `explode()` gives the correct answer.", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxkh4hk", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;php day2.php\n1588178
        3783758\n\nphp day2-golfed.php\n1588178 3783758\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;if
        i change &lt;code&gt;sort($b,1)&lt;/code&gt; to &lt;code&gt;sort($b)&lt;/code&gt;
        i get this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;php day2-golfed.php\n1588178
        3792506\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;which is incorrect, it&amp;#39;s
        something to do with the linebreaks i think, adding a &lt;code&gt;trim()&lt;/code&gt;
        in the &lt;code&gt;explode()&lt;/code&gt; gives the correct answer.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkh4hk/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449072415.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449072415.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxkbp1l", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "artesea", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_cxkamv9", "score": 1, "author_fullname": "t2_c2pur",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "I like the use of @ to silence the missing \"\" saving 2 chars,
        but wonder why you''ve left the ,1 in the sort?\nMy one liner was\n\n    &lt;?php
        $p=$r=0;foreach(file(\"b\")as$x){$s=explode(\"x\",$x);sort($s);$p+=3*$s[0]*$s[1]+2*$s[2]*$s[1]+2*$s[0]*$s[2];$r+=2*$s[0]+2*$s[1]+$s[0]*$s[1]*$s[2];}echo\"$p/$r\";\n\nCouldn''t
        be bothered the do the actual maths to factorise.", "edited": false, "top_awarded_type":
        null, "downs": 0, "author_flair_css_class": null, "name": "t1_cxkbp1l", "is_submitter":
        false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I like the use of @
        to silence the missing &amp;quot;&amp;quot; saving 2 chars, but wonder why
        you&amp;#39;ve left the ,1 in the sort?\nMy one liner was&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;?php
        $p=$r=0;foreach(file(&amp;quot;b&amp;quot;)as$x){$s=explode(&amp;quot;x&amp;quot;,$x);sort($s);$p+=3*$s[0]*$s[1]+2*$s[2]*$s[1]+2*$s[0]*$s[2];$r+=2*$s[0]+2*$s[1]+$s[0]*$s[1]*$s[2];}echo&amp;quot;$p/$r&amp;quot;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Couldn&amp;#39;t
        be bothered the do the actual maths to factorise.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkbp1l/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449062084.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449062084.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxkamv9", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "jamosaur-", "can_mod_post": false, "created_utc":
        1449058895.0, "send_replies": true, "parent_id": "t1_cxk6fzf", "score": 2,
        "author_fullname": "t2_sl5sf", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "    &lt;?php\n    $file =
        file(''i'');\n\n    $paper = 0; \n    $ribbon = 0;\n\n    foreach ($file as
        $dimensions) {\n\t    $box = explode(''x'', $dimensions);\n\t    sort($box,
        1);\n\t    $extra = $box[0]*$box[1];\n\t    $sides = $extra*2;\n\t    $tb
        = ($box[1]*$box[2])*2;\n\t    $fb = ($box[0]*$box[2])*2;\n        $ribbon
        += ($box[0]*$box[1]*$box[2]) + $box[0]*2 + $box[1]*2;\n    \t$paper += $extra+$sides+$tb+$fb;\n    }\n    \n    echo
        \"$paper $ribbon\";\n\n\n###Golfed\n    &lt;?php $p=$r=0;foreach(@file(i)as$d){@$b=explode(x,$d);sort($b,1);$s=$b[0]*$b[1];$y=$b[0]+$b[1];$p+=3*$s+2*$b[2]*$y;$r+=$y*2+$s*$b[2];}echo\"$p
        $r\";", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxkamv9", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php\n$file
        = file(&amp;#39;i&amp;#39;);\n\n$paper = 0; \n$ribbon = 0;\n\nforeach ($file
        as $dimensions) {\n    $box = explode(&amp;#39;x&amp;#39;, $dimensions);\n    sort($box,
        1);\n    $extra = $box[0]*$box[1];\n    $sides = $extra*2;\n    $tb = ($box[1]*$box[2])*2;\n    $fb
        = ($box[0]*$box[2])*2;\n    $ribbon += ($box[0]*$box[1]*$box[2]) + $box[0]*2
        + $box[1]*2;\n    $paper += $extra+$sides+$tb+$fb;\n}\n\necho &amp;quot;$paper
        $ribbon&amp;quot;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h3&gt;Golfed&lt;/h3&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;?php
        $p=$r=0;foreach(@file(i)as$d){@$b=explode(x,$d);sort($b,1);$s=$b[0]*$b[1];$y=$b[0]+$b[1];$p+=3*$s+2*$b[2]*$y;$r+=$y*2+$s*$b[2];}echo&amp;quot;$p
        $r&amp;quot;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_3v3w2f", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkamv9/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1449058895.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 2}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "cxk6fzf", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "markz440",
        "can_mod_post": false, "created_utc": 1449042421.0, "send_replies": true,
        "parent_id": "t3_3v3w2f", "score": 1, "author_fullname": "t2_sm0pp", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "Nobody
        likes PHP these days?\n\n    &lt;?php\n    $data = file(\"task2.dat\");\n\n    $totalArea
        = 0;\n    $totalRibbon = 0;\n    foreach ($data as $i =&gt; $package) {\n        $dim
        = explode(\"x\", trim($package));\n        sort($dim);\n\n        // find
        ribbon length\n        $ribbonLength = $dim[0]*$dim[1]*$dim[2] + 2*$dim[0]
        + 2*$dim[1];\n        $totalRibbon += $ribbonLength;\n\n        // find area\n        $area
        = 2*$dim[0]*$dim[1] + 2*$dim[0]*$dim[2] + 2*$dim[1]*$dim[2] + $dim[0]*$dim[1];\n        $totalArea
        += $area;\n    }\n\n    echo \"Total area: \". $totalArea. PHP_EOL;\n    echo
        \"Total ribbon length: \". $totalRibbon. PHP_EOL;", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxk6fzf", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nobody likes PHP these days?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;?php\n$data
        = file(&amp;quot;task2.dat&amp;quot;);\n\n$totalArea = 0;\n$totalRibbon =
        0;\nforeach ($data as $i =&amp;gt; $package) {\n    $dim = explode(&amp;quot;x&amp;quot;,
        trim($package));\n    sort($dim);\n\n    // find ribbon length\n    $ribbonLength
        = $dim[0]*$dim[1]*$dim[2] + 2*$dim[0] + 2*$dim[1];\n    $totalRibbon += $ribbonLength;\n\n    //
        find area\n    $area = 2*$dim[0]*$dim[1] + 2*$dim[0]*$dim[2] + 2*$dim[1]*$dim[2]
        + $dim[0]*$dim[1];\n    $totalArea += $area;\n}\n\necho &amp;quot;Total area:
        &amp;quot;. $totalArea. PHP_EOL;\necho &amp;quot;Total ribbon length: &amp;quot;.
        $totalRibbon. PHP_EOL;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk6fzf/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449042421.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxk6sga", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "porridge123", "can_mod_post": false, "created_utc":
        1449043584.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_6mzpt", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "https://github.com/randreucetti/advent-code\n\nJava
        solutions", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxk6sga", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a
        href=\"https://github.com/randreucetti/advent-code\"&gt;https://github.com/randreucetti/advent-code&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Java
        solutions&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk6sga/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1449043584.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_3v3w2f", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "cxk79bv", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Aneurysm9",
        "can_mod_post": false, "created_utc": 1449045230.0, "send_replies": true,
        "parent_id": "t1_cxk6xzp", "score": 1, "author_fullname": "t2_4b465", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "arr.map() should return a new array with the mapped values, so I''d do something
        like this:\n\n    function howMuchRibbon(arr) {\n      return arr.map(function(item)
        {\n        var box = item.split(''x'').map(function(len) {\n          return
        parseInt(len, 10);\n        });\n        var cubed = box.reduce(function(a,
        b) {\n          return a * b;\n        });\n        // find biggest number\n        //
        maybe sort and pop the item from the end?\n        var biggest = box.reduce(function(a,
        b) {\n          return a &gt; b ? a : b;\n        });\n        // remove biggest
        item from array\n        box.splice(box.indexOf(biggest), 1);\n    \n        return
        cubed + (box[0] * 2) + (box[1] * 2);\n      }).reduce(function(a,b) {\n        return
        a + b;\n      });\n    }\n\nI haven''t actually tested this and I''m not much
        of a javascript programmer, but it looks correct-ish! :)", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxk79bv",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;arr.map() should return
        a new array with the mapped values, so I&amp;#39;d do something like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function
        howMuchRibbon(arr) {\n  return arr.map(function(item) {\n    var box = item.split(&amp;#39;x&amp;#39;).map(function(len)
        {\n      return parseInt(len, 10);\n    });\n    var cubed = box.reduce(function(a,
        b) {\n      return a * b;\n    });\n    // find biggest number\n    // maybe
        sort and pop the item from the end?\n    var biggest = box.reduce(function(a,
        b) {\n      return a &amp;gt; b ? a : b;\n    });\n    // remove biggest item
        from array\n    box.splice(box.indexOf(biggest), 1);\n\n    return cubed +
        (box[0] * 2) + (box[1] * 2);\n  }).reduce(function(a,b) {\n    return a +
        b;\n  });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I haven&amp;#39;t actually
        tested this and I&amp;#39;m not much of a javascript programmer, but it looks
        correct-ish! :)&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_3v3w2f", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk79bv/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1449045230.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "cxk6xzp", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "purrrfessionalwidow",
        "can_mod_post": false, "created_utc": 1449044112.0, "send_replies": true,
        "parent_id": "t3_3v3w2f", "score": 1, "author_fullname": "t2_qraw7", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "My
        JS solution for puzzle #2. I''d appreciate any input as I am just learning.
        I''m sure there are far better ways.  \n\n    function howMuchRibbon(arr)
        {\n      var totalRibbon = 0;\n\n      function calcRibbon(item) {\n        var
        box = item.replace(/x/g, '' '').split('' '');\n        for(var i = 0; i &lt;
        box.length; i++) {\n          box[i] = parseInt(box[i], 10);\n        }\n        var
        cubed = box.reduce(function(a, b) {\n          return a * b;\n        });\n        //
        find biggest number\n        var biggest = box.reduce(function(a, b) {\n          return
        a &gt; b ? a : b;\n        });\n        // remove biggest item from array\n        box.splice(box.indexOf(biggest),
        1);\n    \n        var wrap = (box[0] * 2) + (box[1] * 2);\n        totalRibbon
        += cubed + wrap;\n\n      }\n        arr.map(calcRibbon);\n\n        return
        totalRibbon;\n\n    }\n", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxk6xzp", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My
        JS solution for puzzle #2. I&amp;#39;d appreciate any input as I am just learning.
        I&amp;#39;m sure there are far better ways.  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function
        howMuchRibbon(arr) {\n  var totalRibbon = 0;\n\n  function calcRibbon(item)
        {\n    var box = item.replace(/x/g, &amp;#39; &amp;#39;).split(&amp;#39; &amp;#39;);\n    for(var
        i = 0; i &amp;lt; box.length; i++) {\n      box[i] = parseInt(box[i], 10);\n    }\n    var
        cubed = box.reduce(function(a, b) {\n      return a * b;\n    });\n    //
        find biggest number\n    var biggest = box.reduce(function(a, b) {\n      return
        a &amp;gt; b ? a : b;\n    });\n    // remove biggest item from array\n    box.splice(box.indexOf(biggest),
        1);\n\n    var wrap = (box[0] * 2) + (box[1] * 2);\n    totalRibbon += cubed
        + wrap;\n\n  }\n    arr.map(calcRibbon);\n\n    return totalRibbon;\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk6xzp/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449044112.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxk7bkw", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "ribbet", "can_mod_post": false, "created_utc":
        1449045458.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_1510p", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "reading some of these solutions is fucking
        awesome.  well done, guys!\n    \nhere''s the main functions of my C# code,
        omitting the file reader and adding everything together.  lwh is the array
        with the original values.\n    \n        // Part 1\n        public static
        int[] calculateSides(int[] lwh)\n        {\n            int[] lwhSides = new
        int[3];\n\n            // side 1\n            lwhSides[0] = lwh[0] * lwh[1];\n\n            //
        side 2\n            lwhSides[1] = lwh[1] * lwh[2];\n\n            // side
        3\n            lwhSides[2] = lwh[0] * lwh[2];\n            \n            return
        lwhSides;\n        }\n\n        public static int smallestSideValue(int[]
        lwhSides)\n        {\n            return lwhSides.Min();\n        }\n\n        public
        static int calculateSurfaceArea(int[] lwhSides)\n        {\n            return
        (2 * lwhSides[0]) + (2 * lwhSides[1]) + (2 * lwhSides[2]);\n        }\n\n        //
        Part 2\n        public static int calculateRibbon(int[] lwh)\n        {\n            lwh
        = lwh.OrderBy(c =&gt; c).ToArray();\n            // yes, that''s a shitty
        way to do it.  i''m not proud.\n            return (2 * lwh[0]) + (2 * lwh[1]);\n        }\n\n        public
        static int calculateBow(int[] lwh)\n        {\n            return (lwh[0]
        * lwh[1] * lwh[2]);\n        }", "edited": 1449046109.0, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxk7bkw", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;reading some of these solutions
        is fucking awesome.  well done, guys!&lt;/p&gt;\n\n&lt;p&gt;here&amp;#39;s
        the main functions of my C# code, omitting the file reader and adding everything
        together.  lwh is the array with the original values.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    //
        Part 1\n    public static int[] calculateSides(int[] lwh)\n    {\n        int[]
        lwhSides = new int[3];\n\n        // side 1\n        lwhSides[0] = lwh[0]
        * lwh[1];\n\n        // side 2\n        lwhSides[1] = lwh[1] * lwh[2];\n\n        //
        side 3\n        lwhSides[2] = lwh[0] * lwh[2];\n\n        return lwhSides;\n    }\n\n    public
        static int smallestSideValue(int[] lwhSides)\n    {\n        return lwhSides.Min();\n    }\n\n    public
        static int calculateSurfaceArea(int[] lwhSides)\n    {\n        return (2
        * lwhSides[0]) + (2 * lwhSides[1]) + (2 * lwhSides[2]);\n    }\n\n    // Part
        2\n    public static int calculateRibbon(int[] lwh)\n    {\n        lwh =
        lwh.OrderBy(c =&amp;gt; c).ToArray();\n        // yes, that&amp;#39;s a shitty
        way to do it.  i&amp;#39;m not proud.\n        return (2 * lwh[0]) + (2 *
        lwh[1]);\n    }\n\n    public static int calculateBow(int[] lwh)\n    {\n        return
        (lwh[0] * lwh[1] * lwh[2]);\n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk7bkw/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449045458.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxk7d38", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "xFrostbite94", "can_mod_post": false,
        "created_utc": 1449045618.0, "send_replies": true, "parent_id": "t3_3v3w2f",
        "score": 1, "author_fullname": "t2_65gxi", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "These are fun to do,
        looking forward to tomorrow :-)", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_cxk7d38", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;These are fun to do, looking forward to
        tomorrow :-)&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk7d38/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1449045618.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_3v3w2f", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "cxlmq50",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "PM_ME_INSIDER_INFO",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_cxlkyeb", "score":
        1, "author_fullname": "t2_lm638", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "collapsed": false, "body": "Alright.
        It may just be your perspective but I get lost in the if statements. I do
        believe the sorting function would be more understandable by a larger audience.",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_cxlmq50", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Alright.
        It may just be your perspective but I get lost in the if statements. I do
        believe the sorting function would be more understandable by a larger audience.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxlmq50/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449151012.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449151012.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxlkyeb", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "aveavaeva", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_cxlirvq", "score": 1, "author_fullname": "t2_p4pw4",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "Sure that''s smaller and simpler but I prefer to keep solutions
        easily understandable as much as I can. I have used the sort for the ribbon
        part though. There are many more things in the solution that  can be skimmed
        down but for the sake of understandable code I decided to keep it this way.\n\n\n\nPeace",
        "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class":
        null, "name": "t1_cxlkyeb", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Sure
        that&amp;#39;s smaller and simpler but I prefer to keep solutions easily understandable
        as much as I can. I have used the sort for the ribbon part though. There are
        many more things in the solution that  can be skimmed down but for the sake
        of understandable code I decided to keep it this way.&lt;/p&gt;\n\n&lt;p&gt;Peace&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxlkyeb/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449146347.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449146347.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxlirvq", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "PM_ME_INSIDER_INFO", "can_mod_post": false,
        "created_utc": 1449137722.0, "send_replies": true, "parent_id": "t1_cxk8equ",
        "score": 2, "author_fullname": "t2_lm638", "removal_reason": null, "approved_by":
        null, "mod_note": null, "all_awardings": [], "body": "Just FYI instead of
        doing:\n\n    if (side1 &lt;= side2 &amp;&amp; side1 &lt;= side3) {\n      smallestSide
        = side1;\n    } else if (side2 &lt;= side1 &amp;&amp; side2 &lt;= side3) {\n      smallestSide
        = side2;\n    } else if (side3 &lt;= side1 &amp;&amp; side3 &lt;= side2) {\n      smallestSide
        = side3;\n    }\n\nYou could just do:\n\n    var dim = [l, w, h].sort(function
        (a, b) {\n        return a - b;\n    });\n\nAnd then you already know what
        the smallest, mid, and largest are.", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxlirvq", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Just FYI instead of doing:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;if
        (side1 &amp;lt;= side2 &amp;amp;&amp;amp; side1 &amp;lt;= side3) {\n  smallestSide
        = side1;\n} else if (side2 &amp;lt;= side1 &amp;amp;&amp;amp; side2 &amp;lt;=
        side3) {\n  smallestSide = side2;\n} else if (side3 &amp;lt;= side1 &amp;amp;&amp;amp;
        side3 &amp;lt;= side2) {\n  smallestSide = side3;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You
        could just do:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var dim = [l, w, h].sort(function
        (a, b) {\n    return a - b;\n});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And
        then you already know what the smallest, mid, and largest are.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxlirvq/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449137722.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 2}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxk8equ", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "aveavaeva", "can_mod_post": false, "created_utc":
        1449049780.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_p4pw4", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "    $(''textarea'').change(function () {\n\n      var
        dimensions = $(''textarea'').val().split(''\\n'');\n      var reqWrappingPaper
        = 0;\n      var reqRibbon = 0;\n\n      $.each(dimensions, function (i, box)
        {\n        var numbers = box.split(''x'').map(Number);\n\n        var l =
        numbers[0];\n        var w = numbers[1];\n        var h = numbers[2];\n\n        var
        surfaceArea = 2 * l * w + 2 * w * h + 2 * h * l;\n        var smallestSide
        = 0;\n\n        var side1 = l * w;\n        var side2 = w * h;\n        var
        side3 = h * l;\n\n        if (side1 &lt;= side2 &amp;&amp; side1 &lt;= side3)
        {\n          smallestSide = side1;\n        } else if (side2 &lt;= side1 &amp;&amp;
        side2 &lt;= side3) {\n          smallestSide = side2;\n        } else if (side3
        &lt;= side1 &amp;&amp; side3 &lt;= side2) {\n          smallestSide = side3;\n        }\n\n        reqWrappingPaper
        += surfaceArea + smallestSide;\n\n        var volume = l * w * h;\n        var
        sorted = numbers.sort(function (a, b) {\n          return a - b\n        });\n        reqRibbon
        += volume + 2 * (sorted[0] + sorted[1]);\n\n      });\n\n      $(''p'').html(''Required
        Wrapping Paper : '' + reqWrappingPaper + '' Sq. Ft. &lt;br&gt; Required Ribbon
        : '' + reqRibbon + '' Ft.'');\n\n    });", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxk8equ", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;$(&amp;#39;textarea&amp;#39;).change(function
        () {\n\n  var dimensions = $(&amp;#39;textarea&amp;#39;).val().split(&amp;#39;\\n&amp;#39;);\n  var
        reqWrappingPaper = 0;\n  var reqRibbon = 0;\n\n  $.each(dimensions, function
        (i, box) {\n    var numbers = box.split(&amp;#39;x&amp;#39;).map(Number);\n\n    var
        l = numbers[0];\n    var w = numbers[1];\n    var h = numbers[2];\n\n    var
        surfaceArea = 2 * l * w + 2 * w * h + 2 * h * l;\n    var smallestSide = 0;\n\n    var
        side1 = l * w;\n    var side2 = w * h;\n    var side3 = h * l;\n\n    if (side1
        &amp;lt;= side2 &amp;amp;&amp;amp; side1 &amp;lt;= side3) {\n      smallestSide
        = side1;\n    } else if (side2 &amp;lt;= side1 &amp;amp;&amp;amp; side2 &amp;lt;=
        side3) {\n      smallestSide = side2;\n    } else if (side3 &amp;lt;= side1
        &amp;amp;&amp;amp; side3 &amp;lt;= side2) {\n      smallestSide = side3;\n    }\n\n    reqWrappingPaper
        += surfaceArea + smallestSide;\n\n    var volume = l * w * h;\n    var sorted
        = numbers.sort(function (a, b) {\n      return a - b\n    });\n    reqRibbon
        += volume + 2 * (sorted[0] + sorted[1]);\n\n  });\n\n  $(&amp;#39;p&amp;#39;).html(&amp;#39;Required
        Wrapping Paper : &amp;#39; + reqWrappingPaper + &amp;#39; Sq. Ft. &amp;lt;br&amp;gt;
        Required Ribbon : &amp;#39; + reqRibbon + &amp;#39; Ft.&amp;#39;);\n\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk8equ/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449049780.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxk8soe", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "mikealxmitchell", "can_mod_post": false,
        "created_utc": 1449051473.0, "send_replies": true, "parent_id": "t3_3v3w2f",
        "score": 1, "author_fullname": "t2_sm46u", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Ruby: Day 2 Part I\n\n    sum
        = 0\n    File.open(ARGV[0]).each do |line|\n      box = line.split(''x'').map(&amp;:to_i).sort\n      sum
        += 3*box[0]*box[1] + 2*box[1]*box[2] + 2*box[0]*box[2]\n    end\n    puts
        sum\n\nRuby: Day 2 Part II\n\n    sum = 0\n    File.open(ARGV[0]).each do
        |line|\n      box = line.split(''x'').map(&amp;:to_i).sort\n      sum += 2*box[0]
        + 2*box[1] + box[0]*box[1]*box[2]\n    end\n    puts sum", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxk8soe",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Ruby: Day 2 Part I&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;sum
        = 0\nFile.open(ARGV[0]).each do |line|\n  box = line.split(&amp;#39;x&amp;#39;).map(&amp;amp;:to_i).sort\n  sum
        += 3*box[0]*box[1] + 2*box[1]*box[2] + 2*box[0]*box[2]\nend\nputs sum\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Ruby:
        Day 2 Part II&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;sum = 0\nFile.open(ARGV[0]).each
        do |line|\n  box = line.split(&amp;#39;x&amp;#39;).map(&amp;amp;:to_i).sort\n  sum
        += 2*box[0] + 2*box[1] + box[0]*box[1]*box[2]\nend\nputs sum\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk8soe/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449051473.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxk9701", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "xPaw", "can_mod_post": false, "created_utc":
        1449053224.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_55f80", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "My javascript solution: https://github.com/xPaw/adventofcode-solutions/blob/master/js/day2.js\n\nHad
        to mess around with `sort` method, as it doesn''t work with numbers out of
        the box.", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxk9701", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My
        javascript solution: &lt;a href=\"https://github.com/xPaw/adventofcode-solutions/blob/master/js/day2.js\"&gt;https://github.com/xPaw/adventofcode-solutions/blob/master/js/day2.js&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Had
        to mess around with &lt;code&gt;sort&lt;/code&gt; method, as it doesn&amp;#39;t
        work with numbers out of the box.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk9701/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449053224.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxk9v62", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "shuckc", "can_mod_post": false, "created_utc":
        1449056086.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_hs7p7", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "python, both parts. [repo](https://github.com/shuckc/adventofcode):\n\n    import
        requests, os\n    r = requests.get(''http://adventofcode.com/day/2/input'',
        cookies=dict(session=os.environ[''ADVENT_SESSION'']))\n    s, ri = 0, 0\n    for
        parcel in r.text.splitlines():\n    \tl,w,h = map(int, parcel.split(''x''))\n    \t#
        print (\"l = {0}, w={1}, h={2}\".format(l,w,h))\n    \tsurf = 2*l*w + 2*w*h
        + 2*h*l\n    \tslack = min(l*w, w*h, h*l)\n    \ts += surf + slack\n    \t#
        a,b are least two dimensions\n    \ta,b,_ = sorted([l,w,h])\n    \tri += (a+a+b+b)
        + (l*w*h)\n    print ''paper %d'' % s\n    print ''ribbon %d'' % ri\n", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxk9v62",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;python, both parts.
        &lt;a href=\"https://github.com/shuckc/adventofcode\"&gt;repo&lt;/a&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        requests, os\nr = requests.get(&amp;#39;http://adventofcode.com/day/2/input&amp;#39;,
        cookies=dict(session=os.environ[&amp;#39;ADVENT_SESSION&amp;#39;]))\ns, ri
        = 0, 0\nfor parcel in r.text.splitlines():\n    l,w,h = map(int, parcel.split(&amp;#39;x&amp;#39;))\n    #
        print (&amp;quot;l = {0}, w={1}, h={2}&amp;quot;.format(l,w,h))\n    surf
        = 2*l*w + 2*w*h + 2*h*l\n    slack = min(l*w, w*h, h*l)\n    s += surf + slack\n    #
        a,b are least two dimensions\n    a,b,_ = sorted([l,w,h])\n    ri += (a+a+b+b)
        + (l*w*h)\nprint &amp;#39;paper %d&amp;#39; % s\nprint &amp;#39;ribbon %d&amp;#39;
        % ri\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxk9v62/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1449056086.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_3v3w2f", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "cxkb5wc",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "venerated",
        "can_mod_post": false, "created_utc": 1449060576.0, "send_replies": true,
        "parent_id": "t3_3v3w2f", "score": 1, "author_fullname": "t2_77pcx", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "Fuck.
        This stuff is making me feel like maybe I''m not a bad programmer, but that
        I am bad at math lmao", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxkb5wc", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Fuck.
        This stuff is making me feel like maybe I&amp;#39;m not a bad programmer,
        but that I am bad at math lmao&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkb5wc/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449060576.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxkbm9h", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Lekoaf", "can_mod_post": false, "created_utc":
        1449061876.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_a1dp8", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Posted my Javascript solutions on [Github](https://github.com/lekoaf/aoc).
        Will try and keep them updated every day, if I finish the tasks.", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxkbm9h",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Posted my Javascript
        solutions on &lt;a href=\"https://github.com/lekoaf/aoc\"&gt;Github&lt;/a&gt;.
        Will try and keep them updated every day, if I finish the tasks.&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkbm9h/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449061876.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxkbt9o", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "EpicRisc", "can_mod_post": false, "created_utc":
        1449062387.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_apvv6", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "**JavaScript** - Both Parts in one\nJust
        used Developer Console in Chrome :)\n\n    var boxes = ''3x11x24,13x5x19,1x9x27,24x8x21,6x8x17,19x18x22,10x9x12,12x2x5,26x6x11,9x23x15,12x8x17,13x29x10,28x18x6,22x28x26,1x5x11,29x26x12,8x28x29,27x4x21,12x7x16,7x4x23,15x24x8,15x14x2,11x6x29,28x19x9,10x3x1,5x20x13,10x25x1,22x17x7,16x29x3,18x22x8,18x11x19,21x24x20,4x7x17,22x27x12,1x26x6,5x27x24,29x21x3,25x30x2,21x26x2,10x24x27,10x16x28,18x16x23,6x5x26,19x12x20,6x24x25,11x20x7,4x8x5,2x13x11,11x17x1,13x24x6,22x29x16,4x24x20,10x25x10,12x29x23,23x27x12,11x21x9,13x2x6,15x30x2,8x26x24,24x7x30,22x22x8,29x27x8,28x23x27,13x16x14,9x28x20,21x4x30,21x20x20,11x17x30,9x14x22,20x2x6,10x11x14,1x8x23,23x19x19,26x10x13,21x12x12,25x7x24,1x28x17,20x23x9,2x24x27,20x24x29,1x3x10,5x20x14,25x21x3,15x5x22,14x17x19,27x3x18,29x23x19,14x21x19,20x8x3,22x27x12,24x15x18,9x10x19,29x25x28,14x22x6,4x19x28,4x24x14,17x19x17,7x19x29,28x8x26,7x20x16,11x26x29,2x18x3,12x7x18,11x15x21,24x7x26,2x22x23,2x30x5,1x19x8,15x29x10,15x26x22,20x16x14,25x29x22,3x13x19,1x12x30,3x15x27,19x9x11,30x8x21,26x12x20,11x17x19,17x25x1,19x24x12,30x6x20,11x19x18,18x15x29,18x8x9,25x15x5,15x6x26,13x27x19,23x24x12,3x15x28,17x10x10,15x4x7,15x27x7,21x8x11,9x18x2,7x20x20,17x23x12,2x19x1,7x26x26,13x23x8,10x3x12,11x1x9,1x11x19,25x14x26,16x10x15,7x6x11,8x1x27,20x28x17,3x25x9,30x7x5,17x17x4,23x25x27,23x8x5,13x11x1,15x10x21,22x16x1,12x15x28,27x18x26,25x18x5,21x3x27,15x25x5,29x27x19,11x10x12,22x16x21,11x8x18,6x10x23,21x21x2,13x27x28,2x5x20,23x16x20,1x21x7,22x2x13,11x10x4,7x3x4,19x2x5,21x11x1,7x27x26,12x4x23,12x3x15,25x7x4,20x7x15,16x5x11,1x18x26,11x27x10,17x6x24,19x13x16,6x3x11,4x19x18,16x15x15,1x11x17,19x11x29,18x19x1,1x25x7,8x22x14,15x6x19,5x30x18,30x24x22,11x16x2,21x29x19,20x29x11,27x1x18,20x5x30,12x4x28,3x9x30,26x20x15,18x25x18,20x28x28,21x5x3,20x21x25,19x27x22,8x27x9,1x5x15,30x6x19,16x5x15,18x30x21,4x15x8,9x3x28,18x15x27,25x11x6,17x22x15,18x12x18,14x30x30,1x7x23,27x21x12,15x7x18,16x17x24,11x12x19,18x15x21,6x18x15,2x21x4,12x9x14,19x7x25,22x3x1,29x19x7,30x25x7,6x27x27,5x13x9,21x4x18,13x1x16,11x21x25,27x20x27,14x25x9,23x11x15,22x10x26,15x16x4,14x16x21,1x1x24,17x27x3,25x28x16,12x2x29,9x19x28,12x7x17,6x9x19,15x14x24,25x21x23,26x27x25,7x18x13,15x10x6,22x28x2,15x2x14,3x24x18,30x22x7,18x27x17,29x18x7,20x2x4,4x20x26,23x30x15,5x7x3,4x24x12,24x30x20,26x18x17,6x28x3,29x19x29,14x10x4,15x5x23,12x25x4,7x15x19,26x21x19,18x2x23,19x20x3,3x13x9,29x21x24,26x13x29,30x27x4,20x10x29,21x18x8,7x26x10,29x16x21,22x5x11,17x15x2,7x29x5,6x18x15,23x6x14,10x30x14,26x6x16,24x13x25,17x29x20,4x27x19,28x12x11,23x20x3,22x6x20,29x9x19,10x16x22,30x26x4,29x26x11,2x11x15,1x3x30,30x30x29,9x1x3,30x13x16,20x4x5,23x28x11,24x27x1,4x25x10,9x3x6,14x4x15,4x5x25,27x14x13,20x30x3,28x15x25,5x19x2,10x24x29,29x30x18,30x1x25,7x7x15,1x13x16,23x18x4,1x28x8,24x11x8,22x26x19,30x30x14,2x4x13,27x20x26,16x20x17,11x12x13,28x2x17,15x26x13,29x15x25,30x27x9,2x6x25,10x26x19,16x8x23,12x17x18,26x14x22,13x17x4,27x27x29,17x13x22,9x8x3,25x15x20,14x13x16,8x7x13,12x4x21,27x16x15,6x14x5,28x29x17,23x17x25,10x27x28,1x28x21,18x2x30,25x30x16,25x21x7,2x3x4,9x6x13,19x6x10,28x17x8,13x24x28,24x12x7,5x19x5,18x10x27,16x1x6,12x14x30,1x2x28,23x21x2,13x3x23,9x22x10,10x17x2,24x20x11,30x6x14,28x1x16,24x20x1,28x7x7,1x24x21,14x9x7,22x8x15,20x1x21,6x3x7,7x26x14,5x7x28,5x4x4,15x7x28,30x16x23,7x26x2,1x2x30,24x28x20,5x17x28,4x15x20,15x26x2,1x3x23,22x30x24,9x20x16,7x15x2,6x21x18,21x21x29,29x10x10,4x3x23,23x2x18,29x24x14,29x29x16,22x28x24,21x18x24,16x21x6,3x9x22,9x18x4,22x9x9,12x9x13,18x21x14,7x8x29,28x28x14,1x6x24,11x11x3,8x28x6,11x16x10,9x16x16,6x6x19,21x5x12,15x17x12,3x6x29,19x1x26,10x30x25,24x26x21,1x10x18,6x1x16,4x17x27,17x11x27,15x15x21,14x23x1,8x9x30,22x22x25,20x27x22,12x7x9,9x26x19,26x25x12,8x8x16,28x15x10,29x18x2,25x22x6,4x6x15,12x18x4,10x3x20,17x28x17,14x25x13,14x10x3,14x5x10,7x7x22,21x2x14,1x21x5,27x29x1,6x20x4,7x19x23,28x19x27,3x9x18,13x17x17,18x8x15,26x23x17,10x10x13,11x5x21,25x15x29,6x23x24,10x7x2,19x10x30,4x3x23,22x12x6,11x17x16,6x8x12,18x20x11,6x2x2,17x4x11,20x23x22,29x23x24,25x11x21,22x11x15,29x3x9,13x30x5,17x10x12,10x30x8,21x16x17,1x5x26,22x15x16,27x7x11,16x8x18,29x9x7,25x4x17,10x21x25,2x19x21,29x11x16,18x26x21,2x8x20,17x29x27,25x27x4,14x3x14,25x29x29,26x18x11,8x24x28,7x30x24,12x30x22,29x20x6,3x17x1,6x15x14,6x22x20,13x26x26,12x2x1,7x14x12,15x16x11,3x21x4,30x17x29,9x18x27,11x28x16,22x3x25,18x15x15,2x30x12,3x27x22,10x8x8,26x16x14,15x2x29,12x10x7,21x20x15,2x15x25,4x14x13,3x15x13,29x8x3,7x7x28,15x10x24,23x15x5,5x7x14,24x1x22,1x11x13,26x4x19,19x16x26,5x25x5,17x25x14,23x7x14,24x6x17,5x13x12,20x20x5,22x29x17,11x17x29,25x6x4,29x8x16,28x22x24,24x23x17,16x17x4,17x8x25,22x9x13,24x4x8,18x10x20,21x23x21,13x14x12,23x26x4,4x10x29,2x18x18,19x5x21,2x27x23,6x29x30,21x9x20,6x5x16,25x10x27,5x29x21,24x14x19,19x11x8,2x28x6,19x25x6,27x1x11,6x8x29,18x25x30,4x27x26,8x12x1,7x17x25,7x14x27,12x9x5,14x29x13,18x17x5,23x1x3,28x5x13,3x2x26,3x7x11,1x8x7,12x5x4,2x30x21,16x30x11,3x26x4,16x9x4,11x9x22,23x5x6,13x20x3,4x3x2,14x10x29,11x8x12,26x15x16,7x17x29,18x19x18,8x28x4,22x6x13,9x23x7,11x23x20,13x11x26,15x30x13,1x5x8,5x10x24,22x25x17,27x20x25,30x10x21,16x28x24,20x12x8,17x25x1,30x14x9,14x18x6,8x28x29,12x18x29,9x7x18,6x12x25,20x13x24,22x3x12,5x23x22,8x10x17,7x23x5,10x26x27,14x26x19,10x18x24,8x4x4,16x15x11,3x14x9,18x5x30,29x12x26,16x13x12,15x10x7,18x5x26,14x1x6,10x8x29,3x4x9,19x4x23,28x17x23,30x7x17,19x5x9,26x29x28,22x13x17,28x2x1,20x30x8,15x13x21,25x23x19,27x23x1,4x6x23,29x29x24,5x18x7,4x6x30,17x15x2,27x4x2,25x24x14,28x8x30,24x29x5,14x30x14,10x18x19,15x26x22,24x19x21,29x23x27,21x10x16,7x4x29,14x21x3,21x4x28,17x16x15,24x7x13,21x24x15,25x11x16,10x26x13,23x20x14,20x29x27,14x24x14,14x23x12,18x6x5,3x18x9,8x18x19,20x26x15,16x14x13,30x16x3,17x13x4,15x19x30,20x3x8,13x4x5,12x10x15,8x23x26,16x8x15,22x8x11,12x11x18,28x3x30,15x8x4,13x22x13,21x26x21,29x1x15,28x9x5,27x3x26,22x19x30,4x11x22,21x27x20,22x26x7,19x28x20,24x23x16,26x12x9,13x22x9,5x6x23,20x7x2,18x26x30,3x6x28,24x18x13,28x19x16,25x21x25,25x19x23,22x29x10,29x19x30,4x7x27,5x12x28,8x26x6,14x14x25,17x17x2,5x27x11,8x2x2,3x20x24,26x10x9,22x28x27,18x15x20,12x11x1,5x14x30,7x3x16,2x16x16,18x20x15,13x14x29,1x17x12,13x5x23,19x4x10,25x19x11,15x17x14,1x28x27,11x9x28,9x10x18,30x11x22,21x21x20,2x1x5,2x25x1,7x3x4,22x15x29,21x28x15,12x12x4,21x30x6,15x10x7,10x14x6,21x26x18,14x25x6,9x7x11,22x3x1,1x16x27,1x14x23,2x13x8,14x19x11,21x26x1,4x28x13,12x16x20,21x13x9,3x4x13,14x9x8,21x21x12,27x10x17,6x20x6,28x23x23,2x28x12,8x10x10,3x9x2,20x3x29,19x4x16,29x24x9,26x20x8,15x28x26,18x17x10,7x22x10,20x15x9,6x10x8,7x26x21,8x8x16,15x6x29,22x30x11,18x25x8,6x21x20,7x23x25,8x25x26,11x25x27,22x18x23,3x2x14,16x16x1,15x13x11,3x9x25,29x25x24,9x15x1,12x4x1,23x30x20,3x1x23,6x10x29,28x13x24,4x19x17,6x6x25,27x29x17,12x13x2,10x7x13,14x15x8,22x2x3,27x17x19,23x10x16,5x9x25,9x25x14,11x18x6,18x10x12,9x4x15,7x16x14,17x24x10,11x4x6,12x9x17,22x18x12,6x24x24,6x22x23,5x17x30,6x9x5,17x20x10,6x8x12,14x17x13,29x10x17,22x4x5,10x19x30,22x29x11,10x12x29,21x22x26,16x6x25,1x26x24,30x17x16,27x28x5,30x13x22,7x26x12,11x24x30,1x17x25,22x1x3,29x24x6,4x8x24,13x9x20,8x12x9,21x25x4,23x23x28,5x2x19,29x3x15,22x1x14,3x23x30,8x25x3,15x8x14,30x14x6,23x27x24,19x1x2,10x9x13,13x8x7,8x13x22,5x15x20,17x14x8,5x11x20,5x10x27,24x17x19,21x2x3,15x30x26,21x19x15,2x7x23,13x17x25,30x15x19,26x4x10,2x25x8,9x9x10,2x25x8,19x21x30,17x26x12,7x5x10,2x22x14,10x17x30,1x8x5,23x2x25,22x29x8,13x26x1,26x3x30,25x17x8,25x18x26,26x19x15,8x28x10,12x16x29,30x6x29,28x19x4,27x26x18,15x23x17,5x21x30,8x11x13,2x26x7,19x9x24,3x22x23,6x7x18,4x26x30,13x25x20,17x3x15,8x20x18,23x18x23,28x23x9,16x3x4,1x29x14,20x26x22,3x2x22,23x8x17,19x5x17,21x18x20,17x21x8,30x28x1,29x19x23,12x12x11,24x18x7,21x18x14,14x26x25,9x11x3,10x7x15,27x6x28,14x26x4,28x4x1,22x25x29,6x26x6,1x3x13,26x22x12,6x21x26,23x4x27,26x13x24,5x24x28,22x16x7,3x27x24,19x28x2,11x13x9,29x16x22,30x10x24,14x14x22,22x23x16,14x8x3,20x5x14,28x6x13,3x15x25,4x12x22,15x12x25,10x11x24,7x7x6,8x11x9,21x10x29,23x28x30,8x29x26,16x27x11,1x10x2,24x20x16,7x12x28,28x8x20,14x10x30,1x19x6,4x12x20,18x2x7,24x18x17,16x11x10,1x12x22,30x16x28,18x12x11,28x9x8,23x6x17,10x3x11,5x12x8,22x2x23,9x19x14,15x28x13,27x20x23,19x16x12,19x30x15,8x17x4,10x22x18,13x22x4,3x12x19,22x16x23,11x8x19,8x11x6,7x14x7,29x17x29,21x8x12,21x9x11,20x1x27,1x22x11,5x28x4,26x7x26,30x12x18,29x11x20,3x12x15,24x25x17,14x6x11''.split(\",\"),\n        area   =
        0,\n        ribbon = 0;\n\n    for (var i = 0; i&lt;boxes.length; i++) {\n        var
        box = boxes[i].split(\"x\"),\n            sortedBox = box.sort(function(a,b){return
        a-b});\n    \n        area   += ( (2*box[0]*box[1]) + (2*box[1]*box[2]) +
        (2*box[2]*box[0]) ) + (sortedBox[0] * sortedBox[1] ) ;\n        ribbon +=
        ( 2*sortedBox[0] + 2*sortedBox[1] ) + ( sortedBox[0] * sortedBox[1] * sortedBox[2]
        );\n    }\n    console.log(\"Area Size: \"+area);\n    console.log(\"Ribbon
        Length: \"+ribbon);", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxkbt9o", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;
        - Both Parts in one\nJust used Developer Console in Chrome :)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var
        boxes = &amp;#39;3x11x24,13x5x19,1x9x27,24x8x21,6x8x17,19x18x22,10x9x12,12x2x5,26x6x11,9x23x15,12x8x17,13x29x10,28x18x6,22x28x26,1x5x11,29x26x12,8x28x29,27x4x21,12x7x16,7x4x23,15x24x8,15x14x2,11x6x29,28x19x9,10x3x1,5x20x13,10x25x1,22x17x7,16x29x3,18x22x8,18x11x19,21x24x20,4x7x17,22x27x12,1x26x6,5x27x24,29x21x3,25x30x2,21x26x2,10x24x27,10x16x28,18x16x23,6x5x26,19x12x20,6x24x25,11x20x7,4x8x5,2x13x11,11x17x1,13x24x6,22x29x16,4x24x20,10x25x10,12x29x23,23x27x12,11x21x9,13x2x6,15x30x2,8x26x24,24x7x30,22x22x8,29x27x8,28x23x27,13x16x14,9x28x20,21x4x30,21x20x20,11x17x30,9x14x22,20x2x6,10x11x14,1x8x23,23x19x19,26x10x13,21x12x12,25x7x24,1x28x17,20x23x9,2x24x27,20x24x29,1x3x10,5x20x14,25x21x3,15x5x22,14x17x19,27x3x18,29x23x19,14x21x19,20x8x3,22x27x12,24x15x18,9x10x19,29x25x28,14x22x6,4x19x28,4x24x14,17x19x17,7x19x29,28x8x26,7x20x16,11x26x29,2x18x3,12x7x18,11x15x21,24x7x26,2x22x23,2x30x5,1x19x8,15x29x10,15x26x22,20x16x14,25x29x22,3x13x19,1x12x30,3x15x27,19x9x11,30x8x21,26x12x20,11x17x19,17x25x1,19x24x12,30x6x20,11x19x18,18x15x29,18x8x9,25x15x5,15x6x26,13x27x19,23x24x12,3x15x28,17x10x10,15x4x7,15x27x7,21x8x11,9x18x2,7x20x20,17x23x12,2x19x1,7x26x26,13x23x8,10x3x12,11x1x9,1x11x19,25x14x26,16x10x15,7x6x11,8x1x27,20x28x17,3x25x9,30x7x5,17x17x4,23x25x27,23x8x5,13x11x1,15x10x21,22x16x1,12x15x28,27x18x26,25x18x5,21x3x27,15x25x5,29x27x19,11x10x12,22x16x21,11x8x18,6x10x23,21x21x2,13x27x28,2x5x20,23x16x20,1x21x7,22x2x13,11x10x4,7x3x4,19x2x5,21x11x1,7x27x26,12x4x23,12x3x15,25x7x4,20x7x15,16x5x11,1x18x26,11x27x10,17x6x24,19x13x16,6x3x11,4x19x18,16x15x15,1x11x17,19x11x29,18x19x1,1x25x7,8x22x14,15x6x19,5x30x18,30x24x22,11x16x2,21x29x19,20x29x11,27x1x18,20x5x30,12x4x28,3x9x30,26x20x15,18x25x18,20x28x28,21x5x3,20x21x25,19x27x22,8x27x9,1x5x15,30x6x19,16x5x15,18x30x21,4x15x8,9x3x28,18x15x27,25x11x6,17x22x15,18x12x18,14x30x30,1x7x23,27x21x12,15x7x18,16x17x24,11x12x19,18x15x21,6x18x15,2x21x4,12x9x14,19x7x25,22x3x1,29x19x7,30x25x7,6x27x27,5x13x9,21x4x18,13x1x16,11x21x25,27x20x27,14x25x9,23x11x15,22x10x26,15x16x4,14x16x21,1x1x24,17x27x3,25x28x16,12x2x29,9x19x28,12x7x17,6x9x19,15x14x24,25x21x23,26x27x25,7x18x13,15x10x6,22x28x2,15x2x14,3x24x18,30x22x7,18x27x17,29x18x7,20x2x4,4x20x26,23x30x15,5x7x3,4x24x12,24x30x20,26x18x17,6x28x3,29x19x29,14x10x4,15x5x23,12x25x4,7x15x19,26x21x19,18x2x23,19x20x3,3x13x9,29x21x24,26x13x29,30x27x4,20x10x29,21x18x8,7x26x10,29x16x21,22x5x11,17x15x2,7x29x5,6x18x15,23x6x14,10x30x14,26x6x16,24x13x25,17x29x20,4x27x19,28x12x11,23x20x3,22x6x20,29x9x19,10x16x22,30x26x4,29x26x11,2x11x15,1x3x30,30x30x29,9x1x3,30x13x16,20x4x5,23x28x11,24x27x1,4x25x10,9x3x6,14x4x15,4x5x25,27x14x13,20x30x3,28x15x25,5x19x2,10x24x29,29x30x18,30x1x25,7x7x15,1x13x16,23x18x4,1x28x8,24x11x8,22x26x19,30x30x14,2x4x13,27x20x26,16x20x17,11x12x13,28x2x17,15x26x13,29x15x25,30x27x9,2x6x25,10x26x19,16x8x23,12x17x18,26x14x22,13x17x4,27x27x29,17x13x22,9x8x3,25x15x20,14x13x16,8x7x13,12x4x21,27x16x15,6x14x5,28x29x17,23x17x25,10x27x28,1x28x21,18x2x30,25x30x16,25x21x7,2x3x4,9x6x13,19x6x10,28x17x8,13x24x28,24x12x7,5x19x5,18x10x27,16x1x6,12x14x30,1x2x28,23x21x2,13x3x23,9x22x10,10x17x2,24x20x11,30x6x14,28x1x16,24x20x1,28x7x7,1x24x21,14x9x7,22x8x15,20x1x21,6x3x7,7x26x14,5x7x28,5x4x4,15x7x28,30x16x23,7x26x2,1x2x30,24x28x20,5x17x28,4x15x20,15x26x2,1x3x23,22x30x24,9x20x16,7x15x2,6x21x18,21x21x29,29x10x10,4x3x23,23x2x18,29x24x14,29x29x16,22x28x24,21x18x24,16x21x6,3x9x22,9x18x4,22x9x9,12x9x13,18x21x14,7x8x29,28x28x14,1x6x24,11x11x3,8x28x6,11x16x10,9x16x16,6x6x19,21x5x12,15x17x12,3x6x29,19x1x26,10x30x25,24x26x21,1x10x18,6x1x16,4x17x27,17x11x27,15x15x21,14x23x1,8x9x30,22x22x25,20x27x22,12x7x9,9x26x19,26x25x12,8x8x16,28x15x10,29x18x2,25x22x6,4x6x15,12x18x4,10x3x20,17x28x17,14x25x13,14x10x3,14x5x10,7x7x22,21x2x14,1x21x5,27x29x1,6x20x4,7x19x23,28x19x27,3x9x18,13x17x17,18x8x15,26x23x17,10x10x13,11x5x21,25x15x29,6x23x24,10x7x2,19x10x30,4x3x23,22x12x6,11x17x16,6x8x12,18x20x11,6x2x2,17x4x11,20x23x22,29x23x24,25x11x21,22x11x15,29x3x9,13x30x5,17x10x12,10x30x8,21x16x17,1x5x26,22x15x16,27x7x11,16x8x18,29x9x7,25x4x17,10x21x25,2x19x21,29x11x16,18x26x21,2x8x20,17x29x27,25x27x4,14x3x14,25x29x29,26x18x11,8x24x28,7x30x24,12x30x22,29x20x6,3x17x1,6x15x14,6x22x20,13x26x26,12x2x1,7x14x12,15x16x11,3x21x4,30x17x29,9x18x27,11x28x16,22x3x25,18x15x15,2x30x12,3x27x22,10x8x8,26x16x14,15x2x29,12x10x7,21x20x15,2x15x25,4x14x13,3x15x13,29x8x3,7x7x28,15x10x24,23x15x5,5x7x14,24x1x22,1x11x13,26x4x19,19x16x26,5x25x5,17x25x14,23x7x14,24x6x17,5x13x12,20x20x5,22x29x17,11x17x29,25x6x4,29x8x16,28x22x24,24x23x17,16x17x4,17x8x25,22x9x13,24x4x8,18x10x20,21x23x21,13x14x12,23x26x4,4x10x29,2x18x18,19x5x21,2x27x23,6x29x30,21x9x20,6x5x16,25x10x27,5x29x21,24x14x19,19x11x8,2x28x6,19x25x6,27x1x11,6x8x29,18x25x30,4x27x26,8x12x1,7x17x25,7x14x27,12x9x5,14x29x13,18x17x5,23x1x3,28x5x13,3x2x26,3x7x11,1x8x7,12x5x4,2x30x21,16x30x11,3x26x4,16x9x4,11x9x22,23x5x6,13x20x3,4x3x2,14x10x29,11x8x12,26x15x16,7x17x29,18x19x18,8x28x4,22x6x13,9x23x7,11x23x20,13x11x26,15x30x13,1x5x8,5x10x24,22x25x17,27x20x25,30x10x21,16x28x24,20x12x8,17x25x1,30x14x9,14x18x6,8x28x29,12x18x29,9x7x18,6x12x25,20x13x24,22x3x12,5x23x22,8x10x17,7x23x5,10x26x27,14x26x19,10x18x24,8x4x4,16x15x11,3x14x9,18x5x30,29x12x26,16x13x12,15x10x7,18x5x26,14x1x6,10x8x29,3x4x9,19x4x23,28x17x23,30x7x17,19x5x9,26x29x28,22x13x17,28x2x1,20x30x8,15x13x21,25x23x19,27x23x1,4x6x23,29x29x24,5x18x7,4x6x30,17x15x2,27x4x2,25x24x14,28x8x30,24x29x5,14x30x14,10x18x19,15x26x22,24x19x21,29x23x27,21x10x16,7x4x29,14x21x3,21x4x28,17x16x15,24x7x13,21x24x15,25x11x16,10x26x13,23x20x14,20x29x27,14x24x14,14x23x12,18x6x5,3x18x9,8x18x19,20x26x15,16x14x13,30x16x3,17x13x4,15x19x30,20x3x8,13x4x5,12x10x15,8x23x26,16x8x15,22x8x11,12x11x18,28x3x30,15x8x4,13x22x13,21x26x21,29x1x15,28x9x5,27x3x26,22x19x30,4x11x22,21x27x20,22x26x7,19x28x20,24x23x16,26x12x9,13x22x9,5x6x23,20x7x2,18x26x30,3x6x28,24x18x13,28x19x16,25x21x25,25x19x23,22x29x10,29x19x30,4x7x27,5x12x28,8x26x6,14x14x25,17x17x2,5x27x11,8x2x2,3x20x24,26x10x9,22x28x27,18x15x20,12x11x1,5x14x30,7x3x16,2x16x16,18x20x15,13x14x29,1x17x12,13x5x23,19x4x10,25x19x11,15x17x14,1x28x27,11x9x28,9x10x18,30x11x22,21x21x20,2x1x5,2x25x1,7x3x4,22x15x29,21x28x15,12x12x4,21x30x6,15x10x7,10x14x6,21x26x18,14x25x6,9x7x11,22x3x1,1x16x27,1x14x23,2x13x8,14x19x11,21x26x1,4x28x13,12x16x20,21x13x9,3x4x13,14x9x8,21x21x12,27x10x17,6x20x6,28x23x23,2x28x12,8x10x10,3x9x2,20x3x29,19x4x16,29x24x9,26x20x8,15x28x26,18x17x10,7x22x10,20x15x9,6x10x8,7x26x21,8x8x16,15x6x29,22x30x11,18x25x8,6x21x20,7x23x25,8x25x26,11x25x27,22x18x23,3x2x14,16x16x1,15x13x11,3x9x25,29x25x24,9x15x1,12x4x1,23x30x20,3x1x23,6x10x29,28x13x24,4x19x17,6x6x25,27x29x17,12x13x2,10x7x13,14x15x8,22x2x3,27x17x19,23x10x16,5x9x25,9x25x14,11x18x6,18x10x12,9x4x15,7x16x14,17x24x10,11x4x6,12x9x17,22x18x12,6x24x24,6x22x23,5x17x30,6x9x5,17x20x10,6x8x12,14x17x13,29x10x17,22x4x5,10x19x30,22x29x11,10x12x29,21x22x26,16x6x25,1x26x24,30x17x16,27x28x5,30x13x22,7x26x12,11x24x30,1x17x25,22x1x3,29x24x6,4x8x24,13x9x20,8x12x9,21x25x4,23x23x28,5x2x19,29x3x15,22x1x14,3x23x30,8x25x3,15x8x14,30x14x6,23x27x24,19x1x2,10x9x13,13x8x7,8x13x22,5x15x20,17x14x8,5x11x20,5x10x27,24x17x19,21x2x3,15x30x26,21x19x15,2x7x23,13x17x25,30x15x19,26x4x10,2x25x8,9x9x10,2x25x8,19x21x30,17x26x12,7x5x10,2x22x14,10x17x30,1x8x5,23x2x25,22x29x8,13x26x1,26x3x30,25x17x8,25x18x26,26x19x15,8x28x10,12x16x29,30x6x29,28x19x4,27x26x18,15x23x17,5x21x30,8x11x13,2x26x7,19x9x24,3x22x23,6x7x18,4x26x30,13x25x20,17x3x15,8x20x18,23x18x23,28x23x9,16x3x4,1x29x14,20x26x22,3x2x22,23x8x17,19x5x17,21x18x20,17x21x8,30x28x1,29x19x23,12x12x11,24x18x7,21x18x14,14x26x25,9x11x3,10x7x15,27x6x28,14x26x4,28x4x1,22x25x29,6x26x6,1x3x13,26x22x12,6x21x26,23x4x27,26x13x24,5x24x28,22x16x7,3x27x24,19x28x2,11x13x9,29x16x22,30x10x24,14x14x22,22x23x16,14x8x3,20x5x14,28x6x13,3x15x25,4x12x22,15x12x25,10x11x24,7x7x6,8x11x9,21x10x29,23x28x30,8x29x26,16x27x11,1x10x2,24x20x16,7x12x28,28x8x20,14x10x30,1x19x6,4x12x20,18x2x7,24x18x17,16x11x10,1x12x22,30x16x28,18x12x11,28x9x8,23x6x17,10x3x11,5x12x8,22x2x23,9x19x14,15x28x13,27x20x23,19x16x12,19x30x15,8x17x4,10x22x18,13x22x4,3x12x19,22x16x23,11x8x19,8x11x6,7x14x7,29x17x29,21x8x12,21x9x11,20x1x27,1x22x11,5x28x4,26x7x26,30x12x18,29x11x20,3x12x15,24x25x17,14x6x11&amp;#39;.split(&amp;quot;,&amp;quot;),\n    area   =
        0,\n    ribbon = 0;\n\nfor (var i = 0; i&amp;lt;boxes.length; i++) {\n    var
        box = boxes[i].split(&amp;quot;x&amp;quot;),\n        sortedBox = box.sort(function(a,b){return
        a-b});\n\n    area   += ( (2*box[0]*box[1]) + (2*box[1]*box[2]) + (2*box[2]*box[0])
        ) + (sortedBox[0] * sortedBox[1] ) ;\n    ribbon += ( 2*sortedBox[0] + 2*sortedBox[1]
        ) + ( sortedBox[0] * sortedBox[1] * sortedBox[2] );\n}\nconsole.log(&amp;quot;Area
        Size: &amp;quot;+area);\nconsole.log(&amp;quot;Ribbon Length: &amp;quot;+ribbon);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkbt9o/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449062387.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "cxkhb0v", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "ModishNouns",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_cxkfudt", "score":
        1, "author_fullname": "t2_5k42w", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "That''s one of my problems,
        yes. I have it now. Thanks :)", "edited": false, "top_awarded_type": null,
        "downs": 0, "author_flair_css_class": null, "name": "t1_cxkhb0v", "is_submitter":
        false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s one of
        my problems, yes. I have it now. Thanks :)&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkhb0v/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449072688.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449072688.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxkfudt", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Aneurysm9", "can_mod_post": false, "created_utc":
        1449070425.0, "send_replies": true, "parent_id": "t1_cxkeel2", "score": 1,
        "author_fullname": "t2_4b465", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "I think the problem is here:\n\n    a
        += min(l, w) * min(w, h)\n\nWhat happens when `w &lt; l &lt; h`?", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxkfudt",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think the problem
        is here:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;a += min(l, w) * min(w, h)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What
        happens when &lt;code&gt;w &amp;lt; l &amp;lt; h&lt;/code&gt;?&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkfudt/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449070425.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxkeel2", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "ModishNouns", "can_mod_post": false, "created_utc":
        1449067968.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_5k42w", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "What am I doing wrong? I get 1571805.\n\n\t#!/usr/bin/python\n\n\tdef
        calc_area(l, w, h):\n\t\ta = (2 * l * w) + (2 * w * h) + (2 * h * l)\n\t\ta
        += min(l, w) * min(w, h)\n\t\treturn a\n\n\t# Main\n\tin_file = open(\"presents.txt\",
        \"r\")\n\tarea = 0\n\n\tfor line in in_file:\n\t\tdims = line.split(\"x\")\n\t\tarea
        += calc_area(int(dims[0]), int(dims[1]), int(dims[2]))\n\t\t\n\tprint \"Example
        1:\", calc_area(2,3,4)\n\tprint \"Example 2:\", calc_area(1,1,10)\n\n\tprint
        \"From input file:\", area\n\n", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_cxkeel2", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;What am I doing wrong? I get 1571805.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/usr/bin/python\n\ndef
        calc_area(l, w, h):\n    a = (2 * l * w) + (2 * w * h) + (2 * h * l)\n    a
        += min(l, w) * min(w, h)\n    return a\n\n# Main\nin_file = open(&amp;quot;presents.txt&amp;quot;,
        &amp;quot;r&amp;quot;)\narea = 0\n\nfor line in in_file:\n    dims = line.split(&amp;quot;x&amp;quot;)\n    area
        += calc_area(int(dims[0]), int(dims[1]), int(dims[2]))\n\nprint &amp;quot;Example
        1:&amp;quot;, calc_area(2,3,4)\nprint &amp;quot;Example 2:&amp;quot;, calc_area(1,1,10)\n\nprint
        &amp;quot;From input file:&amp;quot;, area\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkeel2/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449067968.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "cxkmfso",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "sentry07",
        "can_mod_post": false, "created_utc": 1449079997.0, "send_replies": true,
        "parent_id": "t1_cxkegzb", "score": 1, "author_fullname": "t2_3foi6", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "LISP gives me headaches. I used to work in Autocad and I wrote a fairly large
        library of helper functions in AutoLISP. A couple years later I went back
        and looked at the code and I have no idea what it all does.", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxkmfso",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;LISP gives me headaches.
        I used to work in Autocad and I wrote a fairly large library of helper functions
        in AutoLISP. A couple years later I went back and looked at the code and I
        have no idea what it all does.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_3v3w2f", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkmfso/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1449079997.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "cxkegzb", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "tangus",
        "can_mod_post": false, "created_utc": 1449068086.0, "send_replies": true,
        "parent_id": "t3_3v3w2f", "score": 1, "author_fullname": "t2_277mj", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "#
        Common Lisp\n\nText processing isn''t one of CL''s fortes...\n\n    (defun
        puzzle-2-parse (string)\n      (let ((strpos 0))\n        (flet ((read-next-dimension
        ()\n                 (multiple-value-bind (n nextpos)\n                     (parse-integer
        string :start strpos :junk-allowed t)\n                   (assert (or (&gt;=
        nextpos (length string))\n                               (char= (aref string
        nextpos) #\\x)\n                               (&lt;= (char-code (aref string
        nextpos)) 32)))\n                   (setf strpos (1+ nextpos))\n                   n)))\n          (values
        (read-next-dimension) (read-next-dimension) (read-next-dimension)))))\n\n    (defun
        puzzle-2 (input)\n      (multiple-value-bind (l w h)\n          (puzzle-2-parse
        input)\n        (let ((side1 (* l w))\n              (side2 (* w h))\n              (side3
        (* l h)))\n          (+ (* side1 2) (* side2 2) (* side3 2)\n             (min
        side1 side2 side3)))))\n\n    (defun puzzle-2-part2 (input)\n      (multiple-value-bind
        (l w h)\n          (puzzle-2-parse input)\n        (+ (* l w h)  ;; ribbon\n           (min
        (* 2 (+ l w))  ;; perimeter\n                (* 2 (+ w h))\n                (*
        2 (+ l h))))))\n\n    (defun puzzle-2-file (filename &amp;optional (fn #''puzzle-2))\n      (with-open-file
        (f filename)\n        (loop\n           for line = (read-line f nil nil)\n           while
        line\n           sum (funcall fn line))))\n\n    ;; part 1:\n    ;; (puzzle-2-file
        \"puzzle02.input.txt\")\n\n    ;; part 2:\n    ;; (puzzle-2-file \"puzzle02.input.txt\"
        #''puzzle-2-part2)\n", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxkegzb", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;h1&gt;Common
        Lisp&lt;/h1&gt;\n\n&lt;p&gt;Text processing isn&amp;#39;t one of CL&amp;#39;s
        fortes...&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(defun puzzle-2-parse (string)\n  (let
        ((strpos 0))\n    (flet ((read-next-dimension ()\n             (multiple-value-bind
        (n nextpos)\n                 (parse-integer string :start strpos :junk-allowed
        t)\n               (assert (or (&amp;gt;= nextpos (length string))\n                           (char=
        (aref string nextpos) #\\x)\n                           (&amp;lt;= (char-code
        (aref string nextpos)) 32)))\n               (setf strpos (1+ nextpos))\n               n)))\n      (values
        (read-next-dimension) (read-next-dimension) (read-next-dimension)))))\n\n(defun
        puzzle-2 (input)\n  (multiple-value-bind (l w h)\n      (puzzle-2-parse input)\n    (let
        ((side1 (* l w))\n          (side2 (* w h))\n          (side3 (* l h)))\n      (+
        (* side1 2) (* side2 2) (* side3 2)\n         (min side1 side2 side3)))))\n\n(defun
        puzzle-2-part2 (input)\n  (multiple-value-bind (l w h)\n      (puzzle-2-parse
        input)\n    (+ (* l w h)  ;; ribbon\n       (min (* 2 (+ l w))  ;; perimeter\n            (*
        2 (+ w h))\n            (* 2 (+ l h))))))\n\n(defun puzzle-2-file (filename
        &amp;amp;optional (fn #&amp;#39;puzzle-2))\n  (with-open-file (f filename)\n    (loop\n       for
        line = (read-line f nil nil)\n       while line\n       sum (funcall fn line))))\n\n;;
        part 1:\n;; (puzzle-2-file &amp;quot;puzzle02.input.txt&amp;quot;)\n\n;; part
        2:\n;; (puzzle-2-file &amp;quot;puzzle02.input.txt&amp;quot; #&amp;#39;puzzle-2-part2)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkegzb/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449068086.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxkfbwf", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "mrthedon", "can_mod_post": false, "created_utc":
        1449069577.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_7milr", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "PHP solution for part 1 and 2.\n\n    $totalArea
        = 0;\n    $totalRibbon = 0;\n\n    foreach (explode(\"\\n\", trim(file_get_contents(__DIR__
        . ''/day2-input.txt''))) as $dimensions) {\n        $lwh = explode(''x'',
        $dimensions);\n        list($sideA, $sideB, $sideC) = [2 * $lwh[0]* $lwh[1],
        2 * $lwh[0] * $lwh[2], 2 * $lwh[1] * $lwh[2]];\n        $totalArea += $sideA
        + $sideB + $sideC + (min($sideA, $sideB, $sideC) / 2);\n\n        sort($lwh);\n        $totalRibbon
        += ($lwh[0] * $lwh[1] * $lwh[2]) + array_shift($lwh) * 2  + array_shift($lwh)
        * 2;\n    }\n\n    echo $totalArea . \"\\n\";\n    echo $totalRibbon . \"\\n\";\n",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_cxkfbwf", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;PHP
        solution for part 1 and 2.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;$totalArea
        = 0;\n$totalRibbon = 0;\n\nforeach (explode(&amp;quot;\\n&amp;quot;, trim(file_get_contents(__DIR__
        . &amp;#39;/day2-input.txt&amp;#39;))) as $dimensions) {\n    $lwh = explode(&amp;#39;x&amp;#39;,
        $dimensions);\n    list($sideA, $sideB, $sideC) = [2 * $lwh[0]* $lwh[1], 2
        * $lwh[0] * $lwh[2], 2 * $lwh[1] * $lwh[2]];\n    $totalArea += $sideA + $sideB
        + $sideC + (min($sideA, $sideB, $sideC) / 2);\n\n    sort($lwh);\n    $totalRibbon
        += ($lwh[0] * $lwh[1] * $lwh[2]) + array_shift($lwh) * 2  + array_shift($lwh)
        * 2;\n}\n\necho $totalArea . &amp;quot;\\n&amp;quot;;\necho $totalRibbon .
        &amp;quot;\\n&amp;quot;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkfbwf/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449069577.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "cxkntnt", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Hoi_A",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_cxkmujn", "score":
        1, "author_fullname": "t2_hqjgd", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "ill see what I can do with
        this. Also im sure something is wrong considering it doesnt accept the awnser
        on the website :/\n\nBut thanks for the tips :)", "edited": false, "top_awarded_type":
        null, "downs": 0, "author_flair_css_class": null, "name": "t1_cxkntnt", "is_submitter":
        false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;ill see what I can do
        with this. Also im sure something is wrong considering it doesnt accept the
        awnser on the website :/&lt;/p&gt;\n\n&lt;p&gt;But thanks for the tips :)&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkntnt/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449081880.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449081880.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "cxktxoz",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "Serialloser",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_cxkpafe", "score":
        1, "author_fullname": "t2_5o0ih", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "collapsed": false, "body": "1) I would
        read the input from a file instead of a string\n2) There''s a method called
        split on the String class, it splits (doh) your String into a String[] using
        a delimiter that you pass to the method.\n\nYou can find a solution here http://pastebin.com/Sg66jaea\nIt''s
        over engineered but it uses the technique presented above.\nIt needs the latest
        jdk to run I think (used an online compiler to test) and it expects a file
        called \"input\" next to your app.\n", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxktxoz", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;1) I would read the input from
        a file instead of a string\n2) There&amp;#39;s a method called split on the
        String class, it splits (doh) your String into a String[] using a delimiter
        that you pass to the method.&lt;/p&gt;\n\n&lt;p&gt;You can find a solution
        here &lt;a href=\"http://pastebin.com/Sg66jaea\"&gt;http://pastebin.com/Sg66jaea&lt;/a&gt;\nIt&amp;#39;s
        over engineered but it uses the technique presented above.\nIt needs the latest
        jdk to run I think (used an online compiler to test) and it expects a file
        called &amp;quot;input&amp;quot; next to your app.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxktxoz/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449090149.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449090149.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 3, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxkpafe", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Hoi_A", "can_mod_post": false, "send_replies":
        true, "parent_id": "t1_cxkmujn", "score": 1, "author_fullname": "t2_hqjgd",
        "removal_reason": null, "approved_by": null, "mod_note": null, "all_awardings":
        [], "body": "I just found out what was wrong with my program, and im sure
        your solution wouldnt have fixed it. So I think ill leave my code as is now.\n\nThe
        problem was that I was adding the extra paper 2 times instead of once.", "edited":
        false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null,
        "name": "t1_cxkpafe", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I
        just found out what was wrong with my program, and im sure your solution wouldnt
        have fixed it. So I think ill leave my code as is now.&lt;/p&gt;\n\n&lt;p&gt;The
        problem was that I was adding the extra paper 2 times instead of once.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkpafe/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449083928.0, "author_flair_text": null, "treatment_tags": [], "created_utc":
        1449083928.0, "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxkmujn", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "lukz", "can_mod_post": false, "created_utc":
        1449080555.0, "send_replies": true, "parent_id": "t1_cxkg6qq", "score": 1,
        "author_fullname": "t2_6yqkf", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Your code is probably working,
        I didn''t try it, just had a look at it. You are processing the input one
        character at a time. That is ok. But it was a good idea for day 1 problem,
        not so good idea for day 2 problem.\n\nSo I would give this hint: can you
        make a program that does the following? 1. read all characters up to the ''x'',
        put all of them into a string (without the ''x'') then convert the string
        into integer, 2. do the same from the previous position up to the ''x'', 3.
        read all characters from previous position up to the ''\\n'', put them into
        a string (without the ''\\n''), convert to integer. Doing it this way may
        make your program shorter.", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxkmujn", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Your
        code is probably working, I didn&amp;#39;t try it, just had a look at it.
        You are processing the input one character at a time. That is ok. But it was
        a good idea for day 1 problem, not so good idea for day 2 problem.&lt;/p&gt;\n\n&lt;p&gt;So
        I would give this hint: can you make a program that does the following? 1.
        read all characters up to the &amp;#39;x&amp;#39;, put all of them into a
        string (without the &amp;#39;x&amp;#39;) then convert the string into integer,
        2. do the same from the previous position up to the &amp;#39;x&amp;#39;, 3.
        read all characters from previous position up to the &amp;#39;\\n&amp;#39;,
        put them into a string (without the &amp;#39;\\n&amp;#39;), convert to integer.
        Doing it this way may make your program shorter.&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkmujn/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449080555.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxkg6qq", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Hoi_A", "can_mod_post": false, "created_utc":
        1449070967.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_hqjgd", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Im having a really hard time with part 1
        of D2\nhttp://pastebin.com/ekKwJb51\n\nI know my code is kinda weird and noobish,
        so if someone could tell me what I should do/not do, or what can be done better
        in general but isnt \"wrong\", then i''d appreciate if you could help.\n\n\n---------------------------------------------------------------------------------------------------------------------------------------\n\n\nFound
        the Issue, I was adding the extra paper 2x on accident.\n\nhttps://gist.github.com/Hoi15A/29faab64146273f65332
        is the functional code for anyone interested :)", "edited": 1449084011.0,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxkg6qq",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Im having a really hard
        time with part 1 of D2\n&lt;a href=\"http://pastebin.com/ekKwJb51\"&gt;http://pastebin.com/ekKwJb51&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I
        know my code is kinda weird and noobish, so if someone could tell me what
        I should do/not do, or what can be done better in general but isnt &amp;quot;wrong&amp;quot;,
        then i&amp;#39;d appreciate if you could help.&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;Found
        the Issue, I was adding the extra paper 2x on accident.&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://gist.github.com/Hoi15A/29faab64146273f65332\"&gt;https://gist.github.com/Hoi15A/29faab64146273f65332&lt;/a&gt;
        is the functional code for anyone interested :)&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkg6qq/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449070967.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxkgitc", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "weters", "can_mod_post": false, "created_utc":
        1449071486.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_7mevs", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Part 1.\n\n    | perl -E ''my $total = 0;
        $total += $_ for map { my @d = sort { $a &lt;=&gt; $b } split /x/; $d[0] *
        $d[1] * 3 + $d[1] * $d[2] * 2 + $d[0] * $d[2] * 2  } &lt;&gt;; say $total''\n\nPart
        2.\n\n    | perl -E ''my $total = 0; $total += $_ for map { my @d = sort {
        $a &lt;=&gt; $b } split /x/; $d[0] * 2 + $d[1] * 2 + $d[0] * $d[1] * $d[2]  }
        &lt;&gt;; say $total''", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxkgitc", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Part
        1.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;| perl -E &amp;#39;my $total = 0; $total
        += $_ for map { my @d = sort { $a &amp;lt;=&amp;gt; $b } split /x/; $d[0]
        * $d[1] * 3 + $d[1] * $d[2] * 2 + $d[0] * $d[2] * 2  } &amp;lt;&amp;gt;; say
        $total&amp;#39;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part 2.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;|
        perl -E &amp;#39;my $total = 0; $total += $_ for map { my @d = sort { $a &amp;lt;=&amp;gt;
        $b } split /x/; $d[0] * 2 + $d[1] * 2 + $d[0] * $d[1] * $d[2]  } &amp;lt;&amp;gt;;
        say $total&amp;#39;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkgitc/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449071486.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 1, "removal_reason": null, "link_id": "t3_3v3w2f", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "cxkguxu", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_3v3w2f", "score":
        1, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Here''s my C# solution\n\n    void Main()\n    {\n    \tstring[]
        input = {\"4x23x21\",\"22x29x19\",...,\"20x29x30\",\"23x11x5\"};\n    \tList&lt;Box&gt;
        boxes = new List&lt;Box&gt;();\n    \tint totalWrappingPaper = 0;\n    \tint
        totalRibbon = 0;\n    \tfor(var i = 0; i &lt; input.Count(); i++) {\n    \t\tstring[]
        boxDimensions = input[i].Split(''x'');\n    \t\tBox _box = new Box();\n    \t\t_box.length
        = Convert.ToInt32(boxDimensions[0]);\n    \t\t_box.width = Convert.ToInt32(boxDimensions[1]);\n    \t\t_box.height
        = Convert.ToInt32(boxDimensions[2]);\n    \t\tboxes.Add(_box);\n    \t}\n    \tforeach(Box
        box in boxes) {\n    \t\ttotalWrappingPaper += box.area + box.extra;\n    \t\ttotalRibbon
        += box.ribbon;\n    \t}\n        totalWrappingPaper.Dump();\n    \ttotalRibbon.Dump();\n    }\n    \n    //
        Define other methods and classes here\n    struct Box {\n    \tpublic int
        length;\n    \tpublic int width;\n    \tpublic int height;\n    \t\n    \tpublic
        int extra \n    \t{\n    \t\tget \n    \t\t{\n    \t\t\tint min1 = length;\n    \t\t\tint
        min2 = width;\n    \t\t\tif (min2 &lt; min1)\n    \t\t\t{\n    \t\t\t\tmin1
        = width;\n    \t\t\t\tmin2 = length;\n    \t\t\t}\n    \t\t\tif (height &lt;
        min1)\n    \t\t\t{\n    \t\t\t\tmin2 = min1;\n    \t\t\t\tmin1 = height;\n    \t\t\t}\n    \t\t\telse
        if (height &lt; min2)\n    \t\t\t{\n    \t\t\t\tmin2 = height;\n    \t\t\t}\n    \t\t\treturn
        min1 * min2;\n    \t\t}\n    \t}\n    \t\n    \tpublic int area\n    \t{\n    \t\tget\n    \t\t{\n    \t\t\treturn
        2*length*width + 2*width*height + 2*height*length;\n    \t\t}\n    \t}\n    \t\n    \tpublic
        int ribbon\n    \t{\n    \t\tget\n    \t\t{\n    \t\t\tint min1 = length;\n    \t\t\tint
        min2 = width;\n    \t\t\tif (min2 &lt; min1)\n    \t\t\t{\n    \t\t\t\tmin1
        = width;\n    \t\t\t\tmin2 = length;\n    \t\t\t}\n    \t\t\tif (height &lt;
        min1)\n    \t\t\t{\n    \t\t\t\tmin2 = min1;\n    \t\t\t\tmin1 = height;\n    \t\t\t}\n    \t\t\telse
        if (height &lt; min2)\n    \t\t\t{\n    \t\t\t\tmin2 = height;\n    \t\t\t}\n    \t\t\treturn
        (min1 + min1 + min2 + min2) + (length*width*height);\n    \t\t}\n    \t}\n    }\n\nDone
        in linqpad for the curious ones about `Dump()`\n\n**Edit:** This is, one of
        those time, that you look at your code and say `I can do better!`\n\n    void
        Main()\n    {\n    \tstring[] input = {\"4x23x21\",\"22x29x19\",...,\"20x29x30\",\"23x11x5\"};\n    \tList&lt;Box&gt;
        boxes = new List&lt;Box&gt;();\n    \tfor(var i = 0; i &lt; input.Count();
        i++) {\n    \t\tstring[] boxDimensions = input[i].Split(''x'');\n    \t\tBox
        _box = new Box();\n    \t\t_box.length = Convert.ToInt32(boxDimensions[0]);\n    \t\t_box.width
        = Convert.ToInt32(boxDimensions[1]);\n    \t\t_box.height = Convert.ToInt32(boxDimensions[2]);\n    \t\tboxes.Add(_box);\n    \t}\n    \tboxes.Sum(b
        =&gt; b.area + b.extra).Dump();\n\t    boxes.Sum(b =&gt; b.ribbon).Dump();\n    }\n\nPretty
        sure that `for` can also be wrote better, but, I need to get back to work,
        xD", "edited": 1449072444.0, "downs": 0, "author_flair_css_class": null, "collapsed":
        false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s
        my C# solution&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;void Main()\n{\n    string[]
        input = {&amp;quot;4x23x21&amp;quot;,&amp;quot;22x29x19&amp;quot;,...,&amp;quot;20x29x30&amp;quot;,&amp;quot;23x11x5&amp;quot;};\n    List&amp;lt;Box&amp;gt;
        boxes = new List&amp;lt;Box&amp;gt;();\n    int totalWrappingPaper = 0;\n    int
        totalRibbon = 0;\n    for(var i = 0; i &amp;lt; input.Count(); i++) {\n        string[]
        boxDimensions = input[i].Split(&amp;#39;x&amp;#39;);\n        Box _box = new
        Box();\n        _box.length = Convert.ToInt32(boxDimensions[0]);\n        _box.width
        = Convert.ToInt32(boxDimensions[1]);\n        _box.height = Convert.ToInt32(boxDimensions[2]);\n        boxes.Add(_box);\n    }\n    foreach(Box
        box in boxes) {\n        totalWrappingPaper += box.area + box.extra;\n        totalRibbon
        += box.ribbon;\n    }\n    totalWrappingPaper.Dump();\n    totalRibbon.Dump();\n}\n\n//
        Define other methods and classes here\nstruct Box {\n    public int length;\n    public
        int width;\n    public int height;\n\n    public int extra \n    {\n        get
        \n        {\n            int min1 = length;\n            int min2 = width;\n            if
        (min2 &amp;lt; min1)\n            {\n                min1 = width;\n                min2
        = length;\n            }\n            if (height &amp;lt; min1)\n            {\n                min2
        = min1;\n                min1 = height;\n            }\n            else if
        (height &amp;lt; min2)\n            {\n                min2 = height;\n            }\n            return
        min1 * min2;\n        }\n    }\n\n    public int area\n    {\n        get\n        {\n            return
        2*length*width + 2*width*height + 2*height*length;\n        }\n    }\n\n    public
        int ribbon\n    {\n        get\n        {\n            int min1 = length;\n            int
        min2 = width;\n            if (min2 &amp;lt; min1)\n            {\n                min1
        = width;\n                min2 = length;\n            }\n            if (height
        &amp;lt; min1)\n            {\n                min2 = min1;\n                min1
        = height;\n            }\n            else if (height &amp;lt; min2)\n            {\n                min2
        = height;\n            }\n            return (min1 + min1 + min2 + min2) +
        (length*width*height);\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Done
        in linqpad for the curious ones about &lt;code&gt;Dump()&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt;
        This is, one of those time, that you look at your code and say &lt;code&gt;I
        can do better!&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;void Main()\n{\n    string[]
        input = {&amp;quot;4x23x21&amp;quot;,&amp;quot;22x29x19&amp;quot;,...,&amp;quot;20x29x30&amp;quot;,&amp;quot;23x11x5&amp;quot;};\n    List&amp;lt;Box&amp;gt;
        boxes = new List&amp;lt;Box&amp;gt;();\n    for(var i = 0; i &amp;lt; input.Count();
        i++) {\n        string[] boxDimensions = input[i].Split(&amp;#39;x&amp;#39;);\n        Box
        _box = new Box();\n        _box.length = Convert.ToInt32(boxDimensions[0]);\n        _box.width
        = Convert.ToInt32(boxDimensions[1]);\n        _box.height = Convert.ToInt32(boxDimensions[2]);\n        boxes.Add(_box);\n    }\n    boxes.Sum(b
        =&amp;gt; b.area + b.extra).Dump();\n    boxes.Sum(b =&amp;gt; b.ribbon).Dump();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Pretty
        sure that &lt;code&gt;for&lt;/code&gt; can also be wrote better, but, I need
        to get back to work, xD&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "associated_award": null, "stickied": false, "subreddit_type": "public",
        "can_gild": false, "top_awarded_type": null, "unrepliable_reason": null, "author_flair_text_color":
        "dark", "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkguxu/",
        "num_reports": null, "locked": false, "name": "t1_cxkguxu", "created": 1449072003.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1449072003.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxkhxsf", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "xdg", "can_mod_post": false, "created_utc":
        1449073630.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_58oej", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "For people doing Perl one-liners, don''t
        forget the -a and -F flags for autosplitting input lines.  :-)\n\n", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxkhxsf",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;For people doing Perl
        one-liners, don&amp;#39;t forget the -a and -F flags for autosplitting input
        lines.  :-)&lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkhxsf/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1449073630.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_3v3w2f", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "cxkihye",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "jimsmithkka",
        "can_mod_post": false, "created_utc": 1449074454.0, "send_replies": true,
        "parent_id": "t3_3v3w2f", "score": 1, "author_fullname": "t2_fmxbs", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "My
        day 2 solutions (advent2 is a file that contains a dump of the data):\n\n    #/usr/bin/perl
        -w\n    \n    use strict;\n    use warnings;\n    use List::Util qw( min max
        );\n    \n    my $file = ''advent2'';\n    open my $info, $file or die \"Could
        not open $file: $!\";\n    \n    my $sqft=0;\n    my $rib=0;\n    \n    while(
        my $line = &lt;$info&gt;)\n    {\n    \tmy @dimen=split ''x'',$line;\n    \tmy
        @size;\n    \t$size[0]=$dimen[0] * $dimen[1];\n    \t$size[1]=$dimen[0] *
        $dimen[2];\n    \t$size[2]=$dimen[1] * $dimen[2];\n    \tmy $patch=min @size;\n    \n        $sqft+=$size[0]*2;\n        $sqft+=$size[1]*2;\n        $sqft+=$size[2]*2;\n        $sqft+=$patch;\n\n        my
        @sdimen=sort {$a &lt;=&gt; $b} @dimen;\n        my $bow=$dimen[0]*$dimen[1]*$dimen[2];\n    \n        $rib+=$sdimen[0]*2;\n        $rib+=$sdimen[1]*2;\n        $rib+=$bow;\n    }\n    print
        \"$sqft pap\\n\";\n    print \"$rib rib\\n\";", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxkihye", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My day 2 solutions (advent2
        is a file that contains a dump of the data):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#/usr/bin/perl
        -w\n\nuse strict;\nuse warnings;\nuse List::Util qw( min max );\n\nmy $file
        = &amp;#39;advent2&amp;#39;;\nopen my $info, $file or die &amp;quot;Could
        not open $file: $!&amp;quot;;\n\nmy $sqft=0;\nmy $rib=0;\n\nwhile( my $line
        = &amp;lt;$info&amp;gt;)\n{\n    my @dimen=split &amp;#39;x&amp;#39;,$line;\n    my
        @size;\n    $size[0]=$dimen[0] * $dimen[1];\n    $size[1]=$dimen[0] * $dimen[2];\n    $size[2]=$dimen[1]
        * $dimen[2];\n    my $patch=min @size;\n\n    $sqft+=$size[0]*2;\n    $sqft+=$size[1]*2;\n    $sqft+=$size[2]*2;\n    $sqft+=$patch;\n\n    my
        @sdimen=sort {$a &amp;lt;=&amp;gt; $b} @dimen;\n    my $bow=$dimen[0]*$dimen[1]*$dimen[2];\n\n    $rib+=$sdimen[0]*2;\n    $rib+=$sdimen[1]*2;\n    $rib+=$bow;\n}\nprint
        &amp;quot;$sqft pap\\n&amp;quot;;\nprint &amp;quot;$rib rib\\n&amp;quot;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkihye/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449074454.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "cxkk6dv",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "jgomo3",
        "can_mod_post": false, "created_utc": 1449076869.0, "send_replies": true,
        "parent_id": "t1_cxkirj4", "score": 1, "author_fullname": "t2_3hp9z", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "I minimized by sum of dimensions and should did by area, and still got lucky
        with the answer.\n\nThe min call should be:\n\n    extra = min(faces, key=mult)\n\nSo,
        this particular case produce the same result.", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxkk6dv", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I minimized by sum of dimensions
        and should did by area, and still got lucky with the answer.&lt;/p&gt;\n\n&lt;p&gt;The
        min call should be:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;extra = min(faces,
        key=mult)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So, this particular case
        produce the same result.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_3v3w2f", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkk6dv/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1449076869.0,
        "author_flair_text": null, "treatment_tags": [], "collapsed": false, "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 1, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}], "before": null}}, "user_reports": [], "saved": false, "id":
        "cxkirj4", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "jgomo3",
        "can_mod_post": false, "created_utc": 1449074838.0, "send_replies": true,
        "parent_id": "t3_3v3w2f", "score": 1, "author_fullname": "t2_3hp9z", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "Python3:\n\n    from
        itertools import combinations\n    from functools import partial, reduce\n\n    mult
        = partial(reduce, lambda a, b: a*b)\n\n    def paper_area(*dims):\n        faces
        = list(combinations(dims, 2))\n        extra = min(faces, key=sum)\n        return
        sum(2*mult(dim, 1) for dim in faces) + mult(extra, 1)\n\n    def boxes():\n        with
        open(''advent_2_1.in'') as boxes_file:\n            for box in boxes_file:\n                yield
        map(int, box.strip().split(''x''))\n\n    def total_area(boxes):\n        return
        sum(paper_area(*box) for box in boxes)\n\n    print(total_area(boxes()))",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_cxkirj4", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python3:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;from
        itertools import combinations\nfrom functools import partial, reduce\n\nmult
        = partial(reduce, lambda a, b: a*b)\n\ndef paper_area(*dims):\n    faces =
        list(combinations(dims, 2))\n    extra = min(faces, key=sum)\n    return sum(2*mult(dim,
        1) for dim in faces) + mult(extra, 1)\n\ndef boxes():\n    with open(&amp;#39;advent_2_1.in&amp;#39;)
        as boxes_file:\n        for box in boxes_file:\n            yield map(int,
        box.strip().split(&amp;#39;x&amp;#39;))\n\ndef total_area(boxes):\n    return
        sum(paper_area(*box) for box in boxes)\n\nprint(total_area(boxes()))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkirj4/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449074838.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxkiv5i", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "ChildishBonVonnegut", "can_mod_post":
        false, "created_utc": 1449074985.0, "send_replies": true, "parent_id": "t3_3v3w2f",
        "score": 1, "author_fullname": "t2_6iuwo", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "JAVASCRIPT SOLUTION\nJust
        open console and paste this in there \n\n\n**PART 1**\n\n    function one(string)
        {\n        var dimensions = string.split(''x'').sort(function(a, b) {\n            return
        a - b;\n        });\n        var l = parseInt(dimensions[0]),\n            w
        = parseInt(dimensions[1]),\n            h = parseInt(dimensions[2]);\n        return
        (3 * l * w) + (2 * w * h) + (2 * h * l);\n    }\n    \n    function multiple(string)
        {\n        var entries = string.split(''\\n'');\n        entries.splice(-1,
        1);\n    \n        var counter = 0;\n        for (var i = 0; i &lt; entries.length;
        i++) {\n            counter += one(entries[i]);\n        }\n        return
        counter;\n    }\n    \n    var string = $(''pre'').innerHTML;\n    \n    multiple(string);    \n\n**PART
        2**\n\n    function one(string) {\n        var dimensions = string.split(''x'').sort(function(a,
        b) { return a - b; });\n        var l = parseInt(dimensions[0]),\n            w
        = parseInt(dimensions[1]),\n            h = parseInt(dimensions[2]);\n        return
        l + l + w + w + (l * w * h);\n    }\n    \n    function multiple(string) {\n        var
        entries = string.split(''\\n'');\n        entries.splice(-1, 1);\n    \n        var
        counter = 0;\n        for (var i = 0; i &lt; entries.length; i++) {\n            counter
        += one(entries[i]);\n        }\n        return counter;\n    }\n    \n    var
        string = $(''pre'').innerHTML;\n    \n    multiple(string);\n    ", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxkiv5i",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;JAVASCRIPT SOLUTION\nJust
        open console and paste this in there &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;PART
        1&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function one(string)
        {\n    var dimensions = string.split(&amp;#39;x&amp;#39;).sort(function(a,
        b) {\n        return a - b;\n    });\n    var l = parseInt(dimensions[0]),\n        w
        = parseInt(dimensions[1]),\n        h = parseInt(dimensions[2]);\n    return
        (3 * l * w) + (2 * w * h) + (2 * h * l);\n}\n\nfunction multiple(string) {\n    var
        entries = string.split(&amp;#39;\\n&amp;#39;);\n    entries.splice(-1, 1);\n\n    var
        counter = 0;\n    for (var i = 0; i &amp;lt; entries.length; i++) {\n        counter
        += one(entries[i]);\n    }\n    return counter;\n}\n\nvar string = $(&amp;#39;pre&amp;#39;).innerHTML;\n\nmultiple(string);    \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;PART
        2&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function one(string)
        {\n    var dimensions = string.split(&amp;#39;x&amp;#39;).sort(function(a,
        b) { return a - b; });\n    var l = parseInt(dimensions[0]),\n        w =
        parseInt(dimensions[1]),\n        h = parseInt(dimensions[2]);\n    return
        l + l + w + w + (l * w * h);\n}\n\nfunction multiple(string) {\n    var entries
        = string.split(&amp;#39;\\n&amp;#39;);\n    entries.splice(-1, 1);\n\n    var
        counter = 0;\n    for (var i = 0; i &amp;lt; entries.length; i++) {\n        counter
        += one(entries[i]);\n    }\n    return counter;\n}\n\nvar string = $(&amp;#39;pre&amp;#39;).innerHTML;\n\nmultiple(string);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkiv5i/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449074985.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxkixxk", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "VuileSokken", "can_mod_post": false, "created_utc":
        1449075096.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_qdukx", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Python:\n\n    import itertools\n    with
        open(''input.txt'') as f:\n        presents = [[int(s) for s in l.strip(''\\n'').split(''x'')]
        for l in f.readlines()]\n    totalPaper  = sum([sum(2*sides) + min(sides)
        for sides in [[combo[0] * combo[1] for combo in itertools.combinations(present,2)]
        for present in presents]])\n    totalRibbon = sum([2*min([combo[0] + combo[1]
        for combo in itertools.combinations(present,2)]) + present[0]*present[1]*present[2]
        for present in presents])\n    print totalPaper\n    print totalRibbon", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxkixxk",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        itertools\nwith open(&amp;#39;input.txt&amp;#39;) as f:\n    presents = [[int(s)
        for s in l.strip(&amp;#39;\\n&amp;#39;).split(&amp;#39;x&amp;#39;)] for l
        in f.readlines()]\ntotalPaper  = sum([sum(2*sides) + min(sides) for sides
        in [[combo[0] * combo[1] for combo in itertools.combinations(present,2)] for
        present in presents]])\ntotalRibbon = sum([2*min([combo[0] + combo[1] for
        combo in itertools.combinations(present,2)]) + present[0]*present[1]*present[2]
        for present in presents])\nprint totalPaper\nprint totalRibbon\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkixxk/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449075096.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxkj4qs", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "streetster_", "can_mod_post": false, "created_utc":
        1449075366.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_smf31", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "**python**\nLearnt a few things along the
        way, made a couple of tweaks based on some comments in the thread :)\n\n    def
        get_volume_and_slack(d):\n      return 3*d[0]*d[1] + 2*d[1]*d[2] + 2*d[2]*d[0]\n    \n    def
        get_ribbon(d):\n      return 2*d[0]+2*d[1] + d[0]*d[1]*d[2]\n    \n    def
        day_2(inst):\n      paper = ribbon = 0\n      for i in inst:\n        dimensions
        = sorted(map(int, i.split(\"x\")))\n        paper  += get_volume_and_slack(dimensions)\n        ribbon
        += get_ribbon(dimensions)\n      return { \"paper\": paper, \"ribbon\" : ribbon
        }\n    \n    # test\n    assert(day_2([\"2x3x4\", \"1x1x10\"])) == { \"paper\":
        101, \"ribbon\" : 48 }\n    \n    # reality\n    with open(\"day2.txt\") as
        instructions:\n      print day_2(instructions)\n\n$ python day2.py\n{''paper'':
        1598415, ''ribbon'': 3812909}", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_cxkj4qs", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;python&lt;/strong&gt;\nLearnt
        a few things along the way, made a couple of tweaks based on some comments
        in the thread :)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def get_volume_and_slack(d):\n  return
        3*d[0]*d[1] + 2*d[1]*d[2] + 2*d[2]*d[0]\n\ndef get_ribbon(d):\n  return 2*d[0]+2*d[1]
        + d[0]*d[1]*d[2]\n\ndef day_2(inst):\n  paper = ribbon = 0\n  for i in inst:\n    dimensions
        = sorted(map(int, i.split(&amp;quot;x&amp;quot;)))\n    paper  += get_volume_and_slack(dimensions)\n    ribbon
        += get_ribbon(dimensions)\n  return { &amp;quot;paper&amp;quot;: paper, &amp;quot;ribbon&amp;quot;
        : ribbon }\n\n# test\nassert(day_2([&amp;quot;2x3x4&amp;quot;, &amp;quot;1x1x10&amp;quot;]))
        == { &amp;quot;paper&amp;quot;: 101, &amp;quot;ribbon&amp;quot; : 48 }\n\n#
        reality\nwith open(&amp;quot;day2.txt&amp;quot;) as instructions:\n  print
        day_2(instructions)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;$ python day2.py\n{&amp;#39;paper&amp;#39;:
        1598415, &amp;#39;ribbon&amp;#39;: 3812909}&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkj4qs/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449075366.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 1, "removal_reason": null, "link_id": "t3_3v3w2f", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "cxkk7pc", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_3v3w2f", "score":
        1, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Here''s my javascript solution!\n\n    // day 2, part
        1\n    var boxes = [\"29x13x26\" // ...etc, truncated for reddit],\n        total
        = 0;\n\n    for(var i = 0; i &lt; boxes.length; i++) {\n        var box =
        boxes[i].split(''x''),\n            l = Number(box[0]),\n            w = Number(box[1]),\n            h
        = Number(box[2]),\n            lByW = l * w,\n            lByH = l * h,\n            wByH
        = w * h,\n            min = Math.min(lByW,lByH,wByH);\n        // ((2*(l*w))
        + (2*(l*h)) + (2*(h*w))) + min\n        total += ((2*lByW) + (2*lByH) + (2*wByH))
        + min;\n    }\n\n    console.log(''part 1: '' + total);\n\n    //day 2, part
        2\n    var ribbonTotal = 0;\n\n    for(var x = 0; x &lt; boxes.length; x++)
        {\n        // ribbon = two smallest dimensions * 2, added together\n        //
        bow = length * width * height\n        var box = boxes[x].split(''x''),\n            l
        = Number(box[0]),\n            w = Number(box[1]),\n            h = Number(box[2]),\n            max
        = Math.max(l, w, h),\n            bow = l * w * h,\n            indexOfLargest
        = box.indexOf(''''+max+'''');\n\n        box.splice(indexOfLargest, 1);\n        var
        ribbon = (Number(box[0])*2) + (Number(box[1])*2);\n\n        ribbonTotal +=
        ribbon + bow;\n    }\n\n    console.log(''part 2: '' + ribbonTotal);", "edited":
        1449077222.0, "downs": 0, "author_flair_css_class": null, "collapsed": false,
        "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s
        my javascript solution!&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// day 2, part
        1\nvar boxes = [&amp;quot;29x13x26&amp;quot; // ...etc, truncated for reddit],\n    total
        = 0;\n\nfor(var i = 0; i &amp;lt; boxes.length; i++) {\n    var box = boxes[i].split(&amp;#39;x&amp;#39;),\n        l
        = Number(box[0]),\n        w = Number(box[1]),\n        h = Number(box[2]),\n        lByW
        = l * w,\n        lByH = l * h,\n        wByH = w * h,\n        min = Math.min(lByW,lByH,wByH);\n    //
        ((2*(l*w)) + (2*(l*h)) + (2*(h*w))) + min\n    total += ((2*lByW) + (2*lByH)
        + (2*wByH)) + min;\n}\n\nconsole.log(&amp;#39;part 1: &amp;#39; + total);\n\n//day
        2, part 2\nvar ribbonTotal = 0;\n\nfor(var x = 0; x &amp;lt; boxes.length;
        x++) {\n    // ribbon = two smallest dimensions * 2, added together\n    //
        bow = length * width * height\n    var box = boxes[x].split(&amp;#39;x&amp;#39;),\n        l
        = Number(box[0]),\n        w = Number(box[1]),\n        h = Number(box[2]),\n        max
        = Math.max(l, w, h),\n        bow = l * w * h,\n        indexOfLargest = box.indexOf(&amp;#39;&amp;#39;+max+&amp;#39;&amp;#39;);\n\n    box.splice(indexOfLargest,
        1);\n    var ribbon = (Number(box[0])*2) + (Number(box[1])*2);\n\n    ribbonTotal
        += ribbon + bow;\n}\n\nconsole.log(&amp;#39;part 2: &amp;#39; + ribbonTotal);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkk7pc/",
        "num_reports": null, "locked": false, "name": "t1_cxkk7pc", "created": 1449076922.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1449076922.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxkkxh6", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "kiasaki", "can_mod_post": false, "created_utc":
        1449077922.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_epeex", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Love the awk solution!\n\nNot many people
        doing scheme https://gist.github.com/kiasaki/18ea329b62203c5b8712", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxkkxh6",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Love the awk solution!&lt;/p&gt;\n\n&lt;p&gt;Not
        many people doing scheme &lt;a href=\"https://gist.github.com/kiasaki/18ea329b62203c5b8712\"&gt;https://gist.github.com/kiasaki/18ea329b62203c5b8712&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkkxh6/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449077922.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 1, "removal_reason": null, "link_id": "t3_3v3w2f", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "cxklm8f", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_3v3w2f", "score":
        1, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Here''s some good ol'' JavaScript coming up (run in node);
        both parts: \n\n**Area and Ribbon**\n    \n    var fs = require(''fs'');\n\n    fs.readFile(''./boxdata.txt'',
        function(err, data) {\n\tif(err) throw err;\n\tvar boxList = data.toString().split(\"\\n\");\n\tvar
        totalWrappingPaper = 0, totalRibbonLength = 0;\n\n\tboxList.forEach(function(box)
        {\n\t\t//parse out all of the lengths, widths, heights\n\t\tvar len = parseInt(box.substr(0,
        box.indexOf(''x'')));\n\t\tvar wid = parseInt(box.substr(box.indexOf(''x'')
        + 1, box.lastIndexOf(''x'') - 1));\n\t\tvar hei = parseInt(box.substr(box.lastIndexOf(''x'')
        + 1, box.length - 1));\n\n\t\t//for the slack space, we''ll need the smallest
        two dimentions \n\t\tvar min = Math.min(len, wid, hei), secondMin;\n\t\tif(min
        == len) secondMin = Math.min(wid, hei);\n\t\telse if(min == wid) secondMin
        = Math.min(len, hei);\n\t\telse secondMin = Math.min(len, wid);\n\n\t\t//calculate
        box surface area \n\t\tvar surfaceArea = (2 * len * wid) + (2 * len * hei)
        + (2 * wid * hei);\n\t\t//calculate slack area \n\t\tvar slackArea = min *
        secondMin;\n\t\t//calculate total box area for this box \n\t\tvar totalBoxArea
        = surfaceArea + slackArea;\n\n\t\t//add this box''s total wrapping paper area
        to the total \n\t\ttotalWrappingPaper += totalBoxArea;\t\n\n\t\t//part two
        asks for the bow length needed\n\t\tvar minPerimeter = (2 * min) + (2 * secondMin);\n\t\tvar
        volume = len * wid * hei;\n\t\tvar boxRibbonLength = minPerimeter + volume;\n\n\t\t//add
        this box''s ribbon length to the total \n\t\ttotalRibbonLength += boxRibbonLength;\n\t});\n\n\tconsole.log(\"The
        total wrapping paper needed is \" + totalWrappingPaper + \" square feet.\");\n\tconsole.log(\"The
        total ribbon length needed to wrap these boxes is \" + totalRibbonLength +
        \" feet.\");\n    });", "edited": false, "downs": 0, "author_flair_css_class":
        null, "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s
        some good ol&amp;#39; JavaScript coming up (run in node); both parts: &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Area
        and Ribbon&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var fs = require(&amp;#39;fs&amp;#39;);\n\nfs.readFile(&amp;#39;./boxdata.txt&amp;#39;,
        function(err, data) {\nif(err) throw err;\nvar boxList = data.toString().split(&amp;quot;\\n&amp;quot;);\nvar
        totalWrappingPaper = 0, totalRibbonLength = 0;\n\nboxList.forEach(function(box)
        {\n    //parse out all of the lengths, widths, heights\n    var len = parseInt(box.substr(0,
        box.indexOf(&amp;#39;x&amp;#39;)));\n    var wid = parseInt(box.substr(box.indexOf(&amp;#39;x&amp;#39;)
        + 1, box.lastIndexOf(&amp;#39;x&amp;#39;) - 1));\n    var hei = parseInt(box.substr(box.lastIndexOf(&amp;#39;x&amp;#39;)
        + 1, box.length - 1));\n\n    //for the slack space, we&amp;#39;ll need the
        smallest two dimentions \n    var min = Math.min(len, wid, hei), secondMin;\n    if(min
        == len) secondMin = Math.min(wid, hei);\n    else if(min == wid) secondMin
        = Math.min(len, hei);\n    else secondMin = Math.min(len, wid);\n\n    //calculate
        box surface area \n    var surfaceArea = (2 * len * wid) + (2 * len * hei)
        + (2 * wid * hei);\n    //calculate slack area \n    var slackArea = min *
        secondMin;\n    //calculate total box area for this box \n    var totalBoxArea
        = surfaceArea + slackArea;\n\n    //add this box&amp;#39;s total wrapping
        paper area to the total \n    totalWrappingPaper += totalBoxArea; \n\n    //part
        two asks for the bow length needed\n    var minPerimeter = (2 * min) + (2
        * secondMin);\n    var volume = len * wid * hei;\n    var boxRibbonLength
        = minPerimeter + volume;\n\n    //add this box&amp;#39;s ribbon length to
        the total \n    totalRibbonLength += boxRibbonLength;\n});\n\nconsole.log(&amp;quot;The
        total wrapping paper needed is &amp;quot; + totalWrappingPaper + &amp;quot;
        square feet.&amp;quot;);\nconsole.log(&amp;quot;The total ribbon length needed
        to wrap these boxes is &amp;quot; + totalRibbonLength + &amp;quot; feet.&amp;quot;);\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxklm8f/",
        "num_reports": null, "locked": false, "name": "t1_cxklm8f", "created": 1449078868.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1449078868.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 1, "removal_reason": null, "link_id": "t3_3v3w2f", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "cxkp5tl", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": "DELETED", "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_3v3w2f", "score":
        1, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "[deleted]", "edited": false, "downs": 0, "author_flair_css_class":
        null, "collapsed": true, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkp5tl/",
        "num_reports": null, "locked": false, "name": "t1_cxkp5tl", "created": 1449083746.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1449083746.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxkpmo5", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "RedditWithBoners", "can_mod_post": false,
        "created_utc": 1449084401.0, "send_replies": true, "parent_id": "t3_3v3w2f",
        "score": 1, "author_fullname": "t2_otuar", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Python (puzzle one):\n\n    IN=''...''\n\n    def
        wrapping_paper_area(l,w,h):\n        return 2*l*w + 2*w*h + 2*h*l\n\n    def
        smallest_side_area(l,w,h):\n        return min(l*w, l*h, w*h)\n\n    def f(x):
        return wrapping_paper_area(x[0],x[1],x[2]) + smallest_side_area(x[0],x[1],x[2])\n\n    G
        = [ f( [int(x) for x in dim.split(''x'')] ) for dim in IN.split(''\\n'') ]\n\n    print(sum(G))",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_cxkpmo5", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python
        (puzzle one):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;IN=&amp;#39;...&amp;#39;\n\ndef
        wrapping_paper_area(l,w,h):\n    return 2*l*w + 2*w*h + 2*h*l\n\ndef smallest_side_area(l,w,h):\n    return
        min(l*w, l*h, w*h)\n\ndef f(x): return wrapping_paper_area(x[0],x[1],x[2])
        + smallest_side_area(x[0],x[1],x[2])\n\nG = [ f( [int(x) for x in dim.split(&amp;#39;x&amp;#39;)]
        ) for dim in IN.split(&amp;#39;\\n&amp;#39;) ]\n\nprint(sum(G))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkpmo5/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449084401.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxkqhxw", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "adherry", "can_mod_post": false, "created_utc":
        1449085576.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_fird9", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "My Ruby solution, could be a bit more dry,
        but does the job\n\n    # Day 2\n    file = File.new(\"input\", \"r\")\n    arr
        = []\n    while (line = file.gets)\n      arr &lt;&lt; line.split(''x'')\n      arr[-1][-1]
        = arr[-1][-1].gsub(\"\\n\",\"\")\n    end\n    arr.each do |element|\n      element.map!
        { |e| e.to_i }\n    end\n    #star 1\n    total_amount_paper = 0\n    arr.each
        do |element|\n      sides = []\n      sides &lt;&lt; element[0]*element[1]\n      sides
        &lt;&lt; element[1]*element[2]\n      sides &lt;&lt; element[0]*element[2]\n      smallest_side
        = sides.min\n      sum_of_sides = 0\n      sides.map { |e| sum_of_sides +=
        e*2  }\n      total_amount_paper += smallest_side + sum_of_sides\n    end\n\n    #star
        2\n    total_amount_ribbon = 0\n    arr.each do |element|\n      required_length
        = 0\n      element.min(2).map { |e| required_length += 2*e}\n      volume
        = element[0]*element[1]*element[2]\n      total_amount_ribbon += required_length
        + volume\n    end\n    puts \"Total amount of paper needed: #{total_amount_paper}\"\n    puts
        \"Total amound of ribbon needed: #{total_amount_ribbon}\"\n", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxkqhxw",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My Ruby solution, could
        be a bit more dry, but does the job&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#
        Day 2\nfile = File.new(&amp;quot;input&amp;quot;, &amp;quot;r&amp;quot;)\narr
        = []\nwhile (line = file.gets)\n  arr &amp;lt;&amp;lt; line.split(&amp;#39;x&amp;#39;)\n  arr[-1][-1]
        = arr[-1][-1].gsub(&amp;quot;\\n&amp;quot;,&amp;quot;&amp;quot;)\nend\narr.each
        do |element|\n  element.map! { |e| e.to_i }\nend\n#star 1\ntotal_amount_paper
        = 0\narr.each do |element|\n  sides = []\n  sides &amp;lt;&amp;lt; element[0]*element[1]\n  sides
        &amp;lt;&amp;lt; element[1]*element[2]\n  sides &amp;lt;&amp;lt; element[0]*element[2]\n  smallest_side
        = sides.min\n  sum_of_sides = 0\n  sides.map { |e| sum_of_sides += e*2  }\n  total_amount_paper
        += smallest_side + sum_of_sides\nend\n\n#star 2\ntotal_amount_ribbon = 0\narr.each
        do |element|\n  required_length = 0\n  element.min(2).map { |e| required_length
        += 2*e}\n  volume = element[0]*element[1]*element[2]\n  total_amount_ribbon
        += required_length + volume\nend\nputs &amp;quot;Total amount of paper needed:
        #{total_amount_paper}&amp;quot;\nputs &amp;quot;Total amound of ribbon needed:
        #{total_amount_ribbon}&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkqhxw/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449085576.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxkr553", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "georgehotelling", "can_mod_post": false,
        "created_utc": 1449086434.0, "send_replies": true, "parent_id": "t3_3v3w2f",
        "score": 1, "author_fullname": "t2_1w6f", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "**JavaScript** - I
        used this as an excuse to play with Ramda and point-free style.\n\n    var
        R = require(''ramda'');\n    var readline = require(''readline'');\n    \n    var
        compare = function(a, b) { \n        return a - b; \n    }\n    \n    var
        measurements = R.compose(R.sort(compare), R.map(parseInt), R.split(''x''));\n    \n    function
        packageArea(small, medium, large) {\n        var sides = [(small * medium),
        (medium * large), (large * small)];\n        var extra = small * medium;\n        var
        area = (R.sum(sides) * 2) + extra;\n        return area;\n    }\n    \n    function
        ribbonLength(small, medium, large) {\n        var wrap = small + small + medium
        + medium;\n        var bow = small * medium * large;\n        return wrap
        + bow;\n    }\n    \n    var sumDimensions = R.compose(R.sum, R.map(R.apply(packageArea)));\n    var
        sumRibbon = R.compose(R.sum, R.map(R.apply(ribbonLength)));\n    \n    var
        input = [];\n    \n    var rl = readline.createInterface({\n      input: process.stdin,\n      output:
        process.stdout\n    });\n    \n    rl.on(''line'', function (line) {\n        input.push(line);\n    });\n    \n    rl.on(''close'',
        function() {\n        var sortedDimensions = input.map(measurements);\n        console.log(\"Total
        square footage:\" + sumDimensions(sortedDimensions));\n        console.log(\"Total
        ribbon length: \" + sumRibbon(sortedDimensions));\n    })\n    ", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxkr553",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;
        - I used this as an excuse to play with Ramda and point-free style.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var
        R = require(&amp;#39;ramda&amp;#39;);\nvar readline = require(&amp;#39;readline&amp;#39;);\n\nvar
        compare = function(a, b) { \n    return a - b; \n}\n\nvar measurements = R.compose(R.sort(compare),
        R.map(parseInt), R.split(&amp;#39;x&amp;#39;));\n\nfunction packageArea(small,
        medium, large) {\n    var sides = [(small * medium), (medium * large), (large
        * small)];\n    var extra = small * medium;\n    var area = (R.sum(sides)
        * 2) + extra;\n    return area;\n}\n\nfunction ribbonLength(small, medium,
        large) {\n    var wrap = small + small + medium + medium;\n    var bow = small
        * medium * large;\n    return wrap + bow;\n}\n\nvar sumDimensions = R.compose(R.sum,
        R.map(R.apply(packageArea)));\nvar sumRibbon = R.compose(R.sum, R.map(R.apply(ribbonLength)));\n\nvar
        input = [];\n\nvar rl = readline.createInterface({\n  input: process.stdin,\n  output:
        process.stdout\n});\n\nrl.on(&amp;#39;line&amp;#39;, function (line) {\n    input.push(line);\n});\n\nrl.on(&amp;#39;close&amp;#39;,
        function() {\n    var sortedDimensions = input.map(measurements);\n    console.log(&amp;quot;Total
        square footage:&amp;quot; + sumDimensions(sortedDimensions));\n    console.log(&amp;quot;Total
        ribbon length: &amp;quot; + sumRibbon(sortedDimensions));\n})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkr553/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449086434.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxks1an", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Nacamaka", "can_mod_post": false, "created_utc":
        1449087619.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_4izvr", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Can anyone help me figure out why this isn''t
        working?\n\n\n\n\n    #include &lt;iostream&gt;\n    #include &lt;string&gt;\n    #include
        &lt;fstream&gt;\n    #include &lt;cassert&gt;\n\n    using namespace std;\n\n    void
        calcPaper(ifstream &amp; myIn, int&amp; paperNeeded);\n    string replaceChar(string
        str, char ch1, char ch2);\n\n    int main(){\n\n\tint paperNeeded = 0;\n\tifstream
        myIn;\n\tmyIn.open(\"input.dat\");\n\tassert(myIn);\n\tcalcPaper(myIn, paperNeeded);\n\n\tcout
        &lt;&lt; paperNeeded &lt;&lt; endl;\n\n\treturn 0;\n    }\n    void calcPaper(ifstream
        &amp; myIn, int&amp; paperNeeded){\n\n\tint l, w, h, sideA, sideB, sideC;\n\tstring
        input;\n\tofstream myOut;\n\tifstream newIn;\n\tmyOut.open(\"output.dat\");\n\twhile
        (myIn){\n\t\tgetline(myIn, input);\n\t\tmyOut &lt;&lt; replaceChar(input,
        ''x'', '' '') &lt;&lt; \" \";\n\t}\n\tmyOut.close();\n\tnewIn.open(\"output.dat\");\n\n\twhile
        (newIn &gt;&gt; l &gt;&gt; w &gt;&gt; h){\n\t\tpaperNeeded += (2 * l*w) +
        (2 * w*h) + (2 * h*l);\n\t\tsideA = l*w;\n\t\tsideB = w*h;\n\t\tsideC = h*l;\n\t\tif
        (sideA &lt; sideB &amp;&amp; sideA &lt; sideC)\n\t\t\tpaperNeeded += sideA;\n\t\telse
        if (sideB &lt; sideA &amp;&amp; sideB &lt; sideC)\n\t\t\tpaperNeeded += sideB;\n\t\telse\n\t\t\tpaperNeeded
        += sideC;\n\t}\n\treturn;\n    }\n\n    string replaceChar(string str, char
        ch1, char ch2) {\n\tfor (int i = 0; i &lt; str.length(); ++i) {\n\t\tif (str[i]
        == ch1)\n\t\t\tstr[i] = ch2;\n\t}\n\treturn str;\n\n}", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxks1an", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Can anyone help me figure out
        why this isn&amp;#39;t working?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include
        &amp;lt;iostream&amp;gt;\n#include &amp;lt;string&amp;gt;\n#include &amp;lt;fstream&amp;gt;\n#include
        &amp;lt;cassert&amp;gt;\n\nusing namespace std;\n\nvoid calcPaper(ifstream
        &amp;amp; myIn, int&amp;amp; paperNeeded);\nstring replaceChar(string str,
        char ch1, char ch2);\n\nint main(){\n\nint paperNeeded = 0;\nifstream myIn;\nmyIn.open(&amp;quot;input.dat&amp;quot;);\nassert(myIn);\ncalcPaper(myIn,
        paperNeeded);\n\ncout &amp;lt;&amp;lt; paperNeeded &amp;lt;&amp;lt; endl;\n\nreturn
        0;\n}\nvoid calcPaper(ifstream &amp;amp; myIn, int&amp;amp; paperNeeded){\n\nint
        l, w, h, sideA, sideB, sideC;\nstring input;\nofstream myOut;\nifstream newIn;\nmyOut.open(&amp;quot;output.dat&amp;quot;);\nwhile
        (myIn){\n    getline(myIn, input);\n    myOut &amp;lt;&amp;lt; replaceChar(input,
        &amp;#39;x&amp;#39;, &amp;#39; &amp;#39;) &amp;lt;&amp;lt; &amp;quot; &amp;quot;;\n}\nmyOut.close();\nnewIn.open(&amp;quot;output.dat&amp;quot;);\n\nwhile
        (newIn &amp;gt;&amp;gt; l &amp;gt;&amp;gt; w &amp;gt;&amp;gt; h){\n    paperNeeded
        += (2 * l*w) + (2 * w*h) + (2 * h*l);\n    sideA = l*w;\n    sideB = w*h;\n    sideC
        = h*l;\n    if (sideA &amp;lt; sideB &amp;amp;&amp;amp; sideA &amp;lt; sideC)\n        paperNeeded
        += sideA;\n    else if (sideB &amp;lt; sideA &amp;amp;&amp;amp; sideB &amp;lt;
        sideC)\n        paperNeeded += sideB;\n    else\n        paperNeeded += sideC;\n}\nreturn;\n}\n\nstring
        replaceChar(string str, char ch1, char ch2) {\nfor (int i = 0; i &amp;lt;
        str.length(); ++i) {\n    if (str[i] == ch1)\n        str[i] = ch2;\n}\nreturn
        str;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxks1an/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449087619.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxktt6r", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "bet46", "can_mod_post": false, "created_utc":
        1449089979.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_sdck6", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Python 3\n    import sys, os, time\n    file
        = open(\"day2.txt\", \"r\")\n    total = 0\n    smallest = 0\n    ribbon =
        0\n    for line in file.readlines():\n\n      #print(line)\n        line =
        line.strip()\n        newlist = line.split(\"x\")\n        l = int(newlist[0])\n        w
        = int(newlist[1])\n        h = int(newlist[2])\n        #smallest square\n        a
        = l*h\n        b = l*w\n        c = h*w\n        if a &lt; b and a &lt; c:\n            smallest
        = a\n        elif b &lt; a and b &lt; c:\n            smallest = b\n        elif
        c &lt; a and c &lt; b:\n            smallest = c\n        else:\n            smallest
        = a\n    #ribbon\n        ribbon = smallest\n        \n        total += ribbon
        + (a + b + c)*2\n    print(total)\n\nHello I tried to find my mistake 2hours
        but I can\u00b4t find it! I know you can write the programm shortner and more
        efficient, but it is my own solution! I hope you can tell me my mistake! Thank
        you.\n\nMy Eorror: I get a to high number ", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxktt6r", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python 3\n    import sys, os,
        time\n    file = open(&amp;quot;day2.txt&amp;quot;, &amp;quot;r&amp;quot;)\n    total
        = 0\n    smallest = 0\n    ribbon = 0\n    for line in file.readlines():&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;  #print(line)\n    line
        = line.strip()\n    newlist = line.split(&amp;quot;x&amp;quot;)\n    l = int(newlist[0])\n    w
        = int(newlist[1])\n    h = int(newlist[2])\n    #smallest square\n    a =
        l*h\n    b = l*w\n    c = h*w\n    if a &amp;lt; b and a &amp;lt; c:\n        smallest
        = a\n    elif b &amp;lt; a and b &amp;lt; c:\n        smallest = b\n    elif
        c &amp;lt; a and c &amp;lt; b:\n        smallest = c\n    else:\n        smallest
        = a\n#ribbon\n    ribbon = smallest\n\n    total += ribbon + (a + b + c)*2\nprint(total)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Hello
        I tried to find my mistake 2hours but I can\u00b4t find it! I know you can
        write the programm shortner and more efficient, but it is my own solution!
        I hope you can tell me my mistake! Thank you.&lt;/p&gt;\n\n&lt;p&gt;My Eorror:
        I get a to high number &lt;/p&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxktt6r/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449089979.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxkttoa", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "roxyard", "can_mod_post": false, "created_utc":
        1449089999.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_6tilz", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "A bit late, but here''s my java solution.
        This is the first time i''m posting a solution to reddit\n\n\n    public class
        Dec2Puzzle1\n    {\n        public static void main(String[] args) throws
        Exception\n        {\n            int total = 0;\n            int widt = 0;\n            int
        height = 0;\n            int lenght = 0;\n\n            BufferedReader br
        = new BufferedReader(new FileReader(\"elvesorder.txt\"));\n\n            String
        line = null;\n            while ((line = br.readLine()) != null)\n            {\n                String[]
        tempLine = line.split(\"x\");\n                widt = Integer.parseInt(tempLine[0]);\n                height
        = Integer.parseInt(tempLine[1]);\n                lenght = Integer.parseInt(tempLine[2]);\n                total
        += calcTotal(widt,height,lenght);\n            }\n            System.out.print(total);\n        }\n\n        public
        static int calcTotal(int w, int h, int l)\n        {\n            int dim1
        = w*h;\n            int dim2 = w*l;\n            int dim3 = h*l;\n\n            int[]
        dimensions = {dim1,dim2,dim3};\n            int slack = dimensions[0];\n            for
        (int i = 0; i &lt; dimensions.length; i++)\n                if (dimensions[i]
        &lt; slack)\n                {\n                    slack = dimensions[i];\n                }\n            int
        result = ((2*(dim1)) + (2*(dim2)) + (2*(dim3)));\n            return result
        + slack;\n        }\n    }\n", "edited": false, "top_awarded_type": null,
        "author_flair_css_class": null, "name": "t1_cxkttoa", "is_submitter": false,
        "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false, "body_html":
        "&lt;div class=\"md\"&gt;&lt;p&gt;A bit late, but here&amp;#39;s my java solution.
        This is the first time i&amp;#39;m posting a solution to reddit&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public
        class Dec2Puzzle1\n{\n    public static void main(String[] args) throws Exception\n    {\n        int
        total = 0;\n        int widt = 0;\n        int height = 0;\n        int lenght
        = 0;\n\n        BufferedReader br = new BufferedReader(new FileReader(&amp;quot;elvesorder.txt&amp;quot;));\n\n        String
        line = null;\n        while ((line = br.readLine()) != null)\n        {\n            String[]
        tempLine = line.split(&amp;quot;x&amp;quot;);\n            widt = Integer.parseInt(tempLine[0]);\n            height
        = Integer.parseInt(tempLine[1]);\n            lenght = Integer.parseInt(tempLine[2]);\n            total
        += calcTotal(widt,height,lenght);\n        }\n        System.out.print(total);\n    }\n\n    public
        static int calcTotal(int w, int h, int l)\n    {\n        int dim1 = w*h;\n        int
        dim2 = w*l;\n        int dim3 = h*l;\n\n        int[] dimensions = {dim1,dim2,dim3};\n        int
        slack = dimensions[0];\n        for (int i = 0; i &amp;lt; dimensions.length;
        i++)\n            if (dimensions[i] &amp;lt; slack)\n            {\n                slack
        = dimensions[i];\n            }\n        int result = ((2*(dim1)) + (2*(dim2))
        + (2*(dim3)));\n        return result + slack;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkttoa/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449089999.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxktwb5", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "sizzleplatter", "can_mod_post": false,
        "created_utc": 1449090097.0, "send_replies": true, "parent_id": "t3_3v3w2f",
        "score": 1, "author_fullname": "t2_3oers", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Java solution:\n\n    import
        java.util.ArrayList;\n    import java.util.Arrays;\n    import java.util.Collections;\n    import
        java.util.List;\n    \n    public class AdventDay2 {\n    \tpublic static
        void main(String[] args) {\n    \t\tAdventDay2 av2= new AdventDay2();\n    \t\tArrayList&lt;String&gt;
        dimensions = FileReader.readContentsIntoList(\"c:\\\\input.txt\");\n    \t\t\n    \t\tint
        totalPaperNeeded = 0;\n    \t\tint totalRibbonNeeded = 0;\n    \t\t\n    \t\tfor
        (String d : dimensions) {\t\t\t\n    \t\t\tString[] dimsSplit = d.split(\"x\");\n    \t\t\tint
        l = Integer.parseInt(dimsSplit[0]);\n    \t\t\tint w = Integer.parseInt(dimsSplit[1]);\n    \t\t\tint
        h = Integer.parseInt(dimsSplit[2]);\n    \t\t\t\n    \t\t\ttotalPaperNeeded
        += av2.calculatePaperNeeded(l,w,h);\n    \t\t\ttotalRibbonNeeded += av2.calculateRibbonNeeded(l,
        w, h);\n    \t\t}\n    \t\tSystem.out.println(\"total paper needed=\" + totalPaperNeeded);\n    \t\tSystem.out.println(\"total
        ribbon needed=\" + totalRibbonNeeded);\n    \t}\n    \t\n    \tprivate int
        calculatePaperNeeded(int l, int w, int h) {\n    \t\tint extra = Collections.min(Arrays.asList(l*w,
        w*h, h*l));\n    \t\tint paperNeeded = (2*l*w) + (2*w*h) + (2*h*l) + extra;\n    \t\treturn
        paperNeeded;\n    \t}\n    \t\n    \tprivate int calculateRibbonNeeded(int
        l, int w, int h){\n    \t\tList&lt;Integer&gt; dims = Arrays.asList(l,w,h);\n    \t\tCollections.sort(dims);\n    \t\treturn
        (2*(dims.get(0) + dims.get(1))) + (l*w*h);\t\n    \t}\n    }\n", "edited":
        false, "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxktwb5",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Java solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport
        java.util.List;\n\npublic class AdventDay2 {\n    public static void main(String[]
        args) {\n        AdventDay2 av2= new AdventDay2();\n        ArrayList&amp;lt;String&amp;gt;
        dimensions = FileReader.readContentsIntoList(&amp;quot;c:\\\\input.txt&amp;quot;);\n\n        int
        totalPaperNeeded = 0;\n        int totalRibbonNeeded = 0;\n\n        for (String
        d : dimensions) {           \n            String[] dimsSplit = d.split(&amp;quot;x&amp;quot;);\n            int
        l = Integer.parseInt(dimsSplit[0]);\n            int w = Integer.parseInt(dimsSplit[1]);\n            int
        h = Integer.parseInt(dimsSplit[2]);\n\n            totalPaperNeeded += av2.calculatePaperNeeded(l,w,h);\n            totalRibbonNeeded
        += av2.calculateRibbonNeeded(l, w, h);\n        }\n        System.out.println(&amp;quot;total
        paper needed=&amp;quot; + totalPaperNeeded);\n        System.out.println(&amp;quot;total
        ribbon needed=&amp;quot; + totalRibbonNeeded);\n    }\n\n    private int calculatePaperNeeded(int
        l, int w, int h) {\n        int extra = Collections.min(Arrays.asList(l*w,
        w*h, h*l));\n        int paperNeeded = (2*l*w) + (2*w*h) + (2*h*l) + extra;\n        return
        paperNeeded;\n    }\n\n    private int calculateRibbonNeeded(int l, int w,
        int h){\n        List&amp;lt;Integer&amp;gt; dims = Arrays.asList(l,w,h);\n        Collections.sort(dims);\n        return
        (2*(dims.get(0) + dims.get(1))) + (l*w*h);   \n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxktwb5/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449090097.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxkut12", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Colgajo", "can_mod_post": false, "created_utc":
        1449091313.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_inm4w", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "This is the first time I post a program on
        reddit!\nYour opinion about it is higly welcome :)\n\n**JAVA**\n    \n    import
        java.io.*;    \n    \n    public class Advent2 {    \n    \n    \tpublic static
        void main(String[] args) {\n    \t\tString strLine;\t\n    \t\tint l= 0; int
        w = 0; int h = 0; int paper = 0, ribbon = 0;\t    \n    \n    \t\t\ttry {\n    \t\t\t\tFileInputStream
        fstream = new FileInputStream(\"Advent2Data.txt\");\n    \t\t\t\tDataInputStream
        in = new DataInputStream(fstream);\n    \t\t\t\tBufferedReader br = new BufferedReader(new
        InputStreamReader(in));\n    \t\t\t\twhile((strLine = br.readLine()) != null)
        {\n    \t\t\t\t\tl = Integer.parseInt(strLine.substring(0, strLine.indexOf(''x'')));\n    \t\t\t\t\tw
        = Integer.parseInt(strLine.substring(strLine.indexOf(''x'') + 1, strLine.lastIndexOf(''x'')));\n    \t\t\t\t\th
        = Integer.parseInt(strLine.substring(strLine.lastIndexOf(''x'') + 1));\n    \t\t\t\t\tpaper
        += 2 * l * w + 2 * w * h + 2 * h * l;\n    \t\t\t\t\tif(l * w &lt; w * h &amp;&amp;
        l * w &lt; l * h) {\n    \t\t\t\t\t\tpaper += l * w;\n    \t\t\t\t\t\tribbon
        += 2 * l + 2 * w;\n    \t\t\t\t\t}\n    \t\t\t\t\telse if(w * h &lt; l * h)
        {\n    \t\t\t\t\t\tpaper += w * h;\n    \t\t\t\t\t\tribbon += 2 * w + 2 *
        h;\n    \t\t\t\t\t}\n    \t\t\t\t\telse { \n    \t\t\t\t\t\tpaper += l * h;\n    \t\t\t\t\t\tribbon
        += 2 * l + 2 * h;\n    \t\t\t\t\t}\n    \t\t\t\t\tribbon += l * w * h;\n    \t\t\t\t}\n    \t\t\t}
        catch(Exception e){\n    \t\t\t\tSystem.out.println(e);\n    \t\t\t}\n    \t\t\tSystem.out.println(\"Paper
        = \" + paper);\n    \t\t\tSystem.out.println(\"Ribbon = \" + ribbon);\n    \t}\n    }",
        "edited": 1449094260.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxkut12", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This
        is the first time I post a program on reddit!\nYour opinion about it is higly
        welcome :)&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;JAVA&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import
        java.io.*;    \n\npublic class Advent2 {    \n\n    public static void main(String[]
        args) {\n        String strLine; \n        int l= 0; int w = 0; int h = 0;
        int paper = 0, ribbon = 0;      \n\n            try {\n                FileInputStream
        fstream = new FileInputStream(&amp;quot;Advent2Data.txt&amp;quot;);\n                DataInputStream
        in = new DataInputStream(fstream);\n                BufferedReader br = new
        BufferedReader(new InputStreamReader(in));\n                while((strLine
        = br.readLine()) != null) {\n                    l = Integer.parseInt(strLine.substring(0,
        strLine.indexOf(&amp;#39;x&amp;#39;)));\n                    w = Integer.parseInt(strLine.substring(strLine.indexOf(&amp;#39;x&amp;#39;)
        + 1, strLine.lastIndexOf(&amp;#39;x&amp;#39;)));\n                    h =
        Integer.parseInt(strLine.substring(strLine.lastIndexOf(&amp;#39;x&amp;#39;)
        + 1));\n                    paper += 2 * l * w + 2 * w * h + 2 * h * l;\n                    if(l
        * w &amp;lt; w * h &amp;amp;&amp;amp; l * w &amp;lt; l * h) {\n                        paper
        += l * w;\n                        ribbon += 2 * l + 2 * w;\n                    }\n                    else
        if(w * h &amp;lt; l * h) {\n                        paper += w * h;\n                        ribbon
        += 2 * w + 2 * h;\n                    }\n                    else { \n                        paper
        += l * h;\n                        ribbon += 2 * l + 2 * h;\n                    }\n                    ribbon
        += l * w * h;\n                }\n            } catch(Exception e){\n                System.out.println(e);\n            }\n            System.out.println(&amp;quot;Paper
        = &amp;quot; + paper);\n            System.out.println(&amp;quot;Ribbon =
        &amp;quot; + ribbon);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkut12/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449091313.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxkuxfu", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Dest123", "can_mod_post": false, "created_utc":
        1449091475.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_431ur", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "**Regex + javascript:**\n\n    Find: ([0-9]+)x([0-9]+)x([0-9]+)\n    Replace
        with: \\(2*\\1*\\2+2*\\2*\\3+2*\\3*\\1\\)+Math\\.min\\(Math\\.min\\(\\1*\\2\\,\\2*\\3\\)\\,\\3*\\1\\)
        +\n\nCopy and paste that into window.alert(); and remove the extra + at the
        end.", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxkuxfu", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Regex
        + javascript:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Find: ([0-9]+)x([0-9]+)x([0-9]+)\nReplace
        with: \\(2*\\1*\\2+2*\\2*\\3+2*\\3*\\1\\)+Math\\.min\\(Math\\.min\\(\\1*\\2\\,\\2*\\3\\)\\,\\3*\\1\\)
        +\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Copy and paste that into window.alert();
        and remove the extra + at the end.&lt;/p&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkuxfu/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449091475.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxkvxf0", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "docdurdee", "can_mod_post": false, "created_utc":
        1449092814.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_smore", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "    use Modern::Perl;\n    my ($paper,$ribbon);\n    while(&lt;&gt;){\n        my
        ($l,$w,$h) = sort {$a &lt;=&gt; $b} split (''x'',$_);\n        $paper += 2*($l*$w
        + $w*$h + $h*$l) + $l*$w;\n        $ribbon += $l*$w*$h + 2*($l+$w);\n    }
        \n    say $paper;\n    say $ribbon;", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxkvxf0", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;use Modern::Perl;\nmy
        ($paper,$ribbon);\nwhile(&amp;lt;&amp;gt;){\n    my ($l,$w,$h) = sort {$a
        &amp;lt;=&amp;gt; $b} split (&amp;#39;x&amp;#39;,$_);\n    $paper += 2*($l*$w
        + $w*$h + $h*$l) + $l*$w;\n    $ribbon += $l*$w*$h + 2*($l+$w);\n} \nsay $paper;\nsay
        $ribbon;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkvxf0/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449092814.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxkwhex", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "metric152", "can_mod_post": false, "created_utc":
        1449093563.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_5h879", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Here''s my JS solution. I tend to comment
        my code a lot\nhttps://github.com/metric152/advent-of-code/blob/master/day-2/code.js",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_cxkwhex", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s
        my JS solution. I tend to comment my code a lot\n&lt;a href=\"https://github.com/metric152/advent-of-code/blob/master/day-2/code.js\"&gt;https://github.com/metric152/advent-of-code/blob/master/day-2/code.js&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkwhex/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449093563.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxkwtiu", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "bodagetta", "can_mod_post": false, "created_utc":
        1449094036.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_4c9up", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "My solution in Node / Javascript\n\n    var
        fs = require(''fs'');\n\n    var totalPaper = 0;\n    var totalRibbon = 0;\n\n    function
        processData(data) {\n\n\tdata = data.sort(function(a,b) {\n\t\treturn a -
        b;\n\t});\n\t\n\tvar area = 2*data[0]*data[1] + 2*data[1]*data[2] + 2*data[2]*data[0];\n\tvar
        extra = data[0] * data[1];\n\ttotal += area + extra;\n\n\tvar smallestPerimeter
        = data[0]+data[0]+data[1]+data[1];\n\tvar volume = data[0]*data[1]*data[2];\n\n\ttotalRibbon
        += smallestPerimeter + volume;\n\n    }\n\n\n    fs.readFile(''2input.txt'',
        ''utf8'', function(err, data) {\n\t\n\tif(err) {\n\t\tconsole.log(err)\n\t\treturn;\n\t}\n\tvar
        rows = data.split(''\\n'');\n\tfor (var i = 0; i &lt; rows.length; i++) {\n\t\tvar
        column = rows[i].split(''x'');\n\t\tcolumn = column.map(Number);\n\t\tprocessData(column);\n\t}\n\n\tconsole.log(\"Wrapping
        Paper: \" + total);\n\tconsole.log(\"Ribbon: \" + totalRibbon);\n\n    });",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_cxkwtiu", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My
        solution in Node / Javascript&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var fs =
        require(&amp;#39;fs&amp;#39;);\n\nvar totalPaper = 0;\nvar totalRibbon = 0;\n\nfunction
        processData(data) {\n\ndata = data.sort(function(a,b) {\n    return a - b;\n});\n\nvar
        area = 2*data[0]*data[1] + 2*data[1]*data[2] + 2*data[2]*data[0];\nvar extra
        = data[0] * data[1];\ntotal += area + extra;\n\nvar smallestPerimeter = data[0]+data[0]+data[1]+data[1];\nvar
        volume = data[0]*data[1]*data[2];\n\ntotalRibbon += smallestPerimeter + volume;\n\n}\n\n\nfs.readFile(&amp;#39;2input.txt&amp;#39;,
        &amp;#39;utf8&amp;#39;, function(err, data) {\n\nif(err) {\n    console.log(err)\n    return;\n}\nvar
        rows = data.split(&amp;#39;\\n&amp;#39;);\nfor (var i = 0; i &amp;lt; rows.length;
        i++) {\n    var column = rows[i].split(&amp;#39;x&amp;#39;);\n    column =
        column.map(Number);\n    processData(column);\n}\n\nconsole.log(&amp;quot;Wrapping
        Paper: &amp;quot; + total);\nconsole.log(&amp;quot;Ribbon: &amp;quot; + totalRibbon);\n\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkwtiu/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449094036.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": {"kind": "Listing", "data": {"after": null, "dist": null,
        "modhash": "", "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id":
        "t5_3b3wa", "approved_at_utc": null, "author_is_blocked": false, "comment_type":
        null, "awarders": [], "mod_reason_by": null, "banned_by": null, "author_flair_type":
        "text", "total_awards_received": 0, "subreddit": "adventofcode", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "cxl31bg", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "yatpay",
        "can_mod_post": false, "send_replies": true, "parent_id": "t1_cxl0u6a", "score":
        1, "author_fullname": "t2_1h79u", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "January 2014! My new company
        is a Python shop. It''s got its share of issues but I like it!", "edited":
        false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null,
        "name": "t1_cxl31bg", "is_submitter": false, "collapsed": false, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;January
        2014! My new company is a Python shop. It&amp;#39;s got its share of issues
        but I like it!&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "link_id": "t3_3v3w2f", "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxl31bg/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1449103574.0,
        "author_flair_text": null, "treatment_tags": [], "created_utc": 1449103574.0,
        "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0, "depth":
        2, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxl0u6a", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "volatilebit", "can_mod_post": false, "created_utc":
        1449100052.0, "send_replies": true, "parent_id": "t1_cxkx9it", "score": 1,
        "author_fullname": "t2_44keq", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Hey JP! How long have you
        been writing python??", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxl0u6a", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hey
        JP! How long have you been writing python??&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxl0u6a/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449100052.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxkx9it", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "yatpay", "can_mod_post": false, "created_utc":
        1449094667.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_1h79u", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "[](/ppfear \"That''s a lot of ribbon..\")Nothing
        all that creative but got it done! https://github.com/JPinSPACE/AdventOfCode/tree/master/day02",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_cxkx9it", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a
        href=\"/ppfear\" title=\"That&amp;#39;s a lot of ribbon..\"&gt;&lt;/a&gt;Nothing
        all that creative but got it done! &lt;a href=\"https://github.com/JPinSPACE/AdventOfCode/tree/master/day02\"&gt;https://github.com/JPinSPACE/AdventOfCode/tree/master/day02&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkx9it/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449094667.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxkxspp", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "supersaiyanchocobo", "can_mod_post": false,
        "created_utc": 1449095428.0, "send_replies": true, "parent_id": "t3_3v3w2f",
        "score": 1, "author_fullname": "t2_nbd8p", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Here''s my overly
        verbose JS solution:\n\n    function wrappingCalc(){\n\t    var xhttp = new
        XMLHttpRequest();\n\n\t    xhttp.onreadystatechange = function() {\n\t\t    if
        (xhttp.readyState == 4 &amp;&amp; xhttp.status == 200) {\n\t\t\t    var dimensionArray
        = xhttp.responseText.split(/\\n/);\n\t\t\t    var wrappingPaperSqFeet = 0;\n\t\t\t    var
        extraPaper;\n\t\t\t    var boxSizeArray;\n\t\t\t    var sideOne;\n\t\t\t    var
        sideTwo;\n\t\t\t    var sideThree;\n\t\t\t    var totalRibbonLength = 0;\n\t\t\t    var
        ribbonPerimeter;\n\t\t\t    var ribbonExtra;\n\t\t\t    for (i = 0;i &lt;
        dimensionArray.length; i++) {\n\t\t\t\t    boxSizeArray = dimensionArray[i].split(\"x\");\n\t\t\t\t    boxSizeArray
        = boxSizeArray.sort(function(a, b){return a-b});\n\t\t\t\t    sideOne = boxSizeArray[0]
        * boxSizeArray[1];\n\t\t\t\t    sideTwo = boxSizeArray[1] * boxSizeArray[2];\n\t\t\t\t    sideThree
        = boxSizeArray[2] * boxSizeArray[0];\n\t\t\t\t    extraPaper = Math.min(sideOne,
        sideTwo, sideThree);\n\t\t\t\t    wrappingPaperSqFeet += sideOne * 2 + sideTwo
        * 2 + sideThree * 2 + extraPaper;\n\t\t\t\t\n\t\t\t\t    ribbonPerimeter =
        boxSizeArray[0] * 2 + boxSizeArray[1] * 2;\n\t\t\t\t    ribbonExtra = boxSizeArray[0]
        * boxSizeArray[1] * boxSizeArray[2];\n\t\t\t\t    totalRibbonLength += ribbonPerimeter
        + ribbonExtra;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t    }\n\t\t\t    document.getElementById(\"sqFeet\").innerHTML
        = \"Square Feet: \" + wrappingPaperSqFeet;\n\t\t\t    document.getElementById(\"ribbonFeet\").innerHTML
        = \"Ribbon Length in Feet: \" + totalRibbonLength;\n\t\t    }\n\t    };\n\t    xhttp.open(\"GET\",
        \"input.txt\", true);\n\t    xhttp.send();\n    }\n", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxkxspp", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s my overly verbose
        JS solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function wrappingCalc(){\n    var
        xhttp = new XMLHttpRequest();\n\n    xhttp.onreadystatechange = function()
        {\n        if (xhttp.readyState == 4 &amp;amp;&amp;amp; xhttp.status == 200)
        {\n            var dimensionArray = xhttp.responseText.split(/\\n/);\n            var
        wrappingPaperSqFeet = 0;\n            var extraPaper;\n            var boxSizeArray;\n            var
        sideOne;\n            var sideTwo;\n            var sideThree;\n            var
        totalRibbonLength = 0;\n            var ribbonPerimeter;\n            var
        ribbonExtra;\n            for (i = 0;i &amp;lt; dimensionArray.length; i++)
        {\n                boxSizeArray = dimensionArray[i].split(&amp;quot;x&amp;quot;);\n                boxSizeArray
        = boxSizeArray.sort(function(a, b){return a-b});\n                sideOne
        = boxSizeArray[0] * boxSizeArray[1];\n                sideTwo = boxSizeArray[1]
        * boxSizeArray[2];\n                sideThree = boxSizeArray[2] * boxSizeArray[0];\n                extraPaper
        = Math.min(sideOne, sideTwo, sideThree);\n                wrappingPaperSqFeet
        += sideOne * 2 + sideTwo * 2 + sideThree * 2 + extraPaper;\n\n                ribbonPerimeter
        = boxSizeArray[0] * 2 + boxSizeArray[1] * 2;\n                ribbonExtra
        = boxSizeArray[0] * boxSizeArray[1] * boxSizeArray[2];\n                totalRibbonLength
        += ribbonPerimeter + ribbonExtra;\n\n\n\n            }\n            document.getElementById(&amp;quot;sqFeet&amp;quot;).innerHTML
        = &amp;quot;Square Feet: &amp;quot; + wrappingPaperSqFeet;\n            document.getElementById(&amp;quot;ribbonFeet&amp;quot;).innerHTML
        = &amp;quot;Ribbon Length in Feet: &amp;quot; + totalRibbonLength;\n        }\n    };\n    xhttp.open(&amp;quot;GET&amp;quot;,
        &amp;quot;input.txt&amp;quot;, true);\n    xhttp.send();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkxspp/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449095428.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 1, "removal_reason": null, "link_id": "t3_3v3w2f", "author_flair_template_id":
        null, "likes": null, "replies": {"kind": "Listing", "data": {"after": null,
        "dist": null, "modhash": "", "geo_filter": "", "children": [{"kind": "t1",
        "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxl0sho", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "volatilebit", "can_mod_post": false, "created_utc":
        1449099977.0, "send_replies": true, "parent_id": "t1_cxkzito", "score": 1,
        "author_fullname": "t2_44keq", "removal_reason": null, "approved_by": null,
        "mod_note": null, "all_awardings": [], "body": "Nice use of the map function
        with int. Didn''t even think of that.", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxl0sho", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nice use of the map function
        with int. Didn&amp;#39;t even think of that.&lt;/p&gt;\n&lt;/div&gt;", "gildings":
        {}, "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxl0sho/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449099977.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cxkzito", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        "DELETED", "no_follow": true, "author": "[deleted]", "can_mod_post": false,
        "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1, "approved_by":
        null, "report_reasons": null, "all_awardings": [], "subreddit_id": "t5_3b3wa",
        "body": "[deleted]", "edited": false, "downs": 0, "author_flair_css_class":
        null, "collapsed": true, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;[deleted]&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxkzito/",
        "num_reports": null, "locked": false, "name": "t1_cxkzito", "created": 1449097971.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1449097971.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxl1qnx", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "KeyMaster_", "can_mod_post": false, "created_utc":
        1449101504.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_hceqa", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "I''m doing my solutions in *Haxe* (don''t
        know it? Look it up, it''s cool!)\n\n    package day2;\n\n    class Entry
        {\n        public static function task1(input:String) {\n            var lines
        = input.split(\"\\n\");\n\n            var totalArea:Int = 0;\n            for(line
        in lines) {\n                var lengths = line.split(\"x\").map(function(s:String)
        {return Std.parseInt(s);});\n                var min:Int = lengths[0] * lengths[1];\n                for(i
        in 0...3) {\n                    totalArea += 2 * lengths[i] * lengths[(i
        + 1) % 3];\n                    min = Std.int(Math.min(min, lengths[i] * lengths[(i
        + 1) % 3]));\n                }\n                totalArea += min;\n            }\n            trace(totalArea);\n        }\n\n        public
        static function task2(input:String) {\n            var lines = input.split(\"\\n\");\n\n            var
        totalLength:Int = 0;\n            for(line in lines) {\n                var
        lengths = line.split(\"x\").map(function(s:String) {return Std.parseInt(s);});\n                var
        min:Int = 2 * lengths[0] + 2 * lengths[1];\n                for(i in 0...3)
        {\n                    min = Std.int(Math.min(min, 2 * lengths[i] + 2 * lengths[(i
        + 1) % 3]));\n                }\n                trace(min);\n                trace(lengths[0]
        * lengths[1] * lengths[2]);\n                totalLength += min;\n                totalLength
        += lengths[0] * lengths[1] * lengths[2];\n            }\n            trace(totalLength);\n        }\n    }\n\nAnd
        then I have a bit of central code that reads the file with the input and passes
        that into the function:\n    package ;\n\n    class Main {\n        public
        static function main() {\n            var input = sys.io.File.getContent(\"input.txt\");\n            day2.Entry.task2(input);\n        }\n    }",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_cxl1qnx", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m
        doing my solutions in &lt;em&gt;Haxe&lt;/em&gt; (don&amp;#39;t know it? Look
        it up, it&amp;#39;s cool!)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package day2;\n\nclass
        Entry {\n    public static function task1(input:String) {\n        var lines
        = input.split(&amp;quot;\\n&amp;quot;);\n\n        var totalArea:Int = 0;\n        for(line
        in lines) {\n            var lengths = line.split(&amp;quot;x&amp;quot;).map(function(s:String)
        {return Std.parseInt(s);});\n            var min:Int = lengths[0] * lengths[1];\n            for(i
        in 0...3) {\n                totalArea += 2 * lengths[i] * lengths[(i + 1)
        % 3];\n                min = Std.int(Math.min(min, lengths[i] * lengths[(i
        + 1) % 3]));\n            }\n            totalArea += min;\n        }\n        trace(totalArea);\n    }\n\n    public
        static function task2(input:String) {\n        var lines = input.split(&amp;quot;\\n&amp;quot;);\n\n        var
        totalLength:Int = 0;\n        for(line in lines) {\n            var lengths
        = line.split(&amp;quot;x&amp;quot;).map(function(s:String) {return Std.parseInt(s);});\n            var
        min:Int = 2 * lengths[0] + 2 * lengths[1];\n            for(i in 0...3) {\n                min
        = Std.int(Math.min(min, 2 * lengths[i] + 2 * lengths[(i + 1) % 3]));\n            }\n            trace(min);\n            trace(lengths[0]
        * lengths[1] * lengths[2]);\n            totalLength += min;\n            totalLength
        += lengths[0] * lengths[1] * lengths[2];\n        }\n        trace(totalLength);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And
        then I have a bit of central code that reads the file with the input and passes
        that into the function:\n    package ;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class
        Main {\n    public static function main() {\n        var input = sys.io.File.getContent(&amp;quot;input.txt&amp;quot;);\n        day2.Entry.task2(input);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxl1qnx/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449101504.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxl1rhs", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "fezzinate", "can_mod_post": false, "created_utc":
        1449101540.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_4qre2", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Javascript:\n\nI didn''t want to mess around
        with sorting, so I hacked it\n\n\n    Day2: function(input) {\n\t\tvar inputs
        = input.split(\"\\n\");\n\t\tvar paper = 0; var ribbon = 0;\n\t\tfor ( var
        i=1; i&lt;inputs.length; i++ ) {\n\t\t\tvar dimensions = inputs[i-1].split(\"x\");\n\t\t\tvar
        x = dimensions[0]; var y = dimensions[1]; var z = dimensions[2];\n\t\t\tpaper
        += 2*x*y + 2*x*z + 2*y*z + x*y*z / Math.max(x,y,z);\n\t\t\tribbon += 2*x +
        2*y + 2*z - 2*Math.max(x,y,z) + x*y*z;\n\t\t}\n\t\treturn [paper, ribbon];\n    }",
        "edited": 1449102971.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxl1rhs", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Javascript:&lt;/p&gt;\n\n&lt;p&gt;I
        didn&amp;#39;t want to mess around with sorting, so I hacked it&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Day2:
        function(input) {\n    var inputs = input.split(&amp;quot;\\n&amp;quot;);\n    var
        paper = 0; var ribbon = 0;\n    for ( var i=1; i&amp;lt;inputs.length; i++
        ) {\n        var dimensions = inputs[i-1].split(&amp;quot;x&amp;quot;);\n        var
        x = dimensions[0]; var y = dimensions[1]; var z = dimensions[2];\n        paper
        += 2*x*y + 2*x*z + 2*y*z + x*y*z / Math.max(x,y,z);\n        ribbon += 2*x
        + 2*y + 2*z - 2*Math.max(x,y,z) + x*y*z;\n    }\n    return [paper, ribbon];\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxl1rhs/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449101540.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxl1t46", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "sleepyams", "can_mod_post": false, "created_utc":
        1449101610.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_3hpa5", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Here is my python solution for n-dimensional
        present wrapping:\n\n    \"\"\"\n    Advent of Code: Day 2\n    \"\"\"\n    from
        operator import mul\n    from itertools import combinations\n    \n    \n    #
        input data\n    if __name__ == \"__main__\":\n        with open(''input.txt'')
        as f:\n            sizes = [map(int, t.split(''x'')) for t in f.readlines()]\n    \n    \n    \"\"\"\n    Part
        1\n    \"\"\"\n    def wrapping_needed(dims):\n        areas = [reduce(mul,
        c, 1) for c in combinations(dims, len(dims)-1)]\n        return 2*sum(areas)
        + min(areas)\n    \n    if __name__ == \"__main__\":\n        print sum(map(wrapping_needed,
        sizes))\n    \n    \n    \"\"\"\n    Part 2\n    \"\"\"\n    def ribbon_needed(dims):\n        ribbon
        = 2*sum(sorted(dims)[:-1])\n        bow = reduce(mul, dims, 1)\n        return
        ribbon + bow\n    \n    if __name__ == \"__main__\":\n        print sum(map(ribbon_needed,
        sizes))", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxl1t46", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here
        is my python solution for n-dimensional present wrapping:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;quot;&amp;quot;&amp;quot;\nAdvent
        of Code: Day 2\n&amp;quot;&amp;quot;&amp;quot;\nfrom operator import mul\nfrom
        itertools import combinations\n\n\n# input data\nif __name__ == &amp;quot;__main__&amp;quot;:\n    with
        open(&amp;#39;input.txt&amp;#39;) as f:\n        sizes = [map(int, t.split(&amp;#39;x&amp;#39;))
        for t in f.readlines()]\n\n\n&amp;quot;&amp;quot;&amp;quot;\nPart 1\n&amp;quot;&amp;quot;&amp;quot;\ndef
        wrapping_needed(dims):\n    areas = [reduce(mul, c, 1) for c in combinations(dims,
        len(dims)-1)]\n    return 2*sum(areas) + min(areas)\n\nif __name__ == &amp;quot;__main__&amp;quot;:\n    print
        sum(map(wrapping_needed, sizes))\n\n\n&amp;quot;&amp;quot;&amp;quot;\nPart
        2\n&amp;quot;&amp;quot;&amp;quot;\ndef ribbon_needed(dims):\n    ribbon =
        2*sum(sorted(dims)[:-1])\n    bow = reduce(mul, dims, 1)\n    return ribbon
        + bow\n\nif __name__ == &amp;quot;__main__&amp;quot;:\n    print sum(map(ribbon_needed,
        sizes))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxl1t46/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449101610.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxl4xj1", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "nonades", "can_mod_post": false, "created_utc":
        1449106525.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_32t2z", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "I''m doing this in Powershell because\n \n
        * SysAdmin (and primarily Windows), not a Programmer\n \n * It''s funny to
        do this and contribute to my buddy and my''s Gitlab group because he''s an
        actual programmer\n\nSo, here''s my Module for parts one and two:\n\n    #
        advent of code, day 2\n\n     Function Get-TotalSquareFeet{\n        [cmdletbinding()]\n            Param([Parameter(Mandatory=$true,ValueFromPipeline=$true)]\n            [array]$dimensions\n        )\n        $total
        = 0\n        foreach($box in $dimensions){\n            $box = $box.split(''x'')\n            $sides
        = @{''l'' = [double]$box[0]; ''w'' = [double]$box[1]; ''h'' = [double]$box[2]}\n    \n            $squarefeet
        = GetSquareFeet($sides)\n            $smallestside = GetSmallestSide($sides)\n    \n             $total
        += ($squarefeet + $smallestside)\n        }\n        return $total\n    }\n    \n    Function
        Get-NeededRibbon{\n        [cmdletbinding()]\n        Param(\n            [Parameter(Mandatory=$true,ValueFromPipeline=$true)]\n            [array]$dimensions\n         )\n        $total
        = 0\n        foreach($box in $dimensions){\n            $box = $box.split(''x'')\n            $sides
        = @{''l'' = [double]$box[0]; ''w'' = [double]$box[1]; ''h'' = [double]$box[2]}\n     \n            $ribbonlength
        = GetRibbonLength($sides)\n            $bowlength = GetBowLength($sides)\n     \n             $total
        += ($ribbonlength + $bowlength)\n         }\n         return $total\n    }\n     \n     Function
        GetSmallestSide([hashtable]$sides){\n         $smallest = @(($sides.''l''
        * $sides.''w''), ($sides.''w'' * $sides.''h''), ($sides.''l'' * $sides.''h''))\n          return
        ($smallest | Sort-Object)[0]\n     }\n     \n     Function GetSquareFeet([hashtable]$sides){\n        $squarefeet
        = (($sides.''l'' * $sides.''w'') + ($sides.''w'' * $sides.''h'') + ($sides.''l''
        * $sides.''h'')) * 2\n         return $squarefeet\n     }\n     \n     Function
        GetBowLength([hashtable]$sides){\n         return $sides.''l'' * $sides.''w''
        * $sides.''h''\n     }\n     \n     Function GetRibbonLength([hashtable]$sides){\n        $sides_arr
        = @($sides.''l'', $sides.''w'', $sides.''h'')\n    \n        return (($sides_arr
        | Sort-Object)[0] + ($sides_arr | Sort-       Object)[1] )*2\n    }\n\n    Export-ModuleMember
        -Function Get-TotalSquareFeet\n    Export-ModuleMember -Function Get-NeededRibbon\n",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_cxl4xj1", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m
        doing this in Powershell because&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;SysAdmin
        (and primarily Windows), not a Programmer&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It&amp;#39;s
        funny to do this and contribute to my buddy and my&amp;#39;s Gitlab group
        because he&amp;#39;s an actual programmer&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;So,
        here&amp;#39;s my Module for parts one and two:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#
        advent of code, day 2\n\n Function Get-TotalSquareFeet{\n    [cmdletbinding()]\n        Param([Parameter(Mandatory=$true,ValueFromPipeline=$true)]\n        [array]$dimensions\n    )\n    $total
        = 0\n    foreach($box in $dimensions){\n        $box = $box.split(&amp;#39;x&amp;#39;)\n        $sides
        = @{&amp;#39;l&amp;#39; = [double]$box[0]; &amp;#39;w&amp;#39; = [double]$box[1];
        &amp;#39;h&amp;#39; = [double]$box[2]}\n\n        $squarefeet = GetSquareFeet($sides)\n        $smallestside
        = GetSmallestSide($sides)\n\n         $total += ($squarefeet + $smallestside)\n    }\n    return
        $total\n}\n\nFunction Get-NeededRibbon{\n    [cmdletbinding()]\n    Param(\n        [Parameter(Mandatory=$true,ValueFromPipeline=$true)]\n        [array]$dimensions\n     )\n    $total
        = 0\n    foreach($box in $dimensions){\n        $box = $box.split(&amp;#39;x&amp;#39;)\n        $sides
        = @{&amp;#39;l&amp;#39; = [double]$box[0]; &amp;#39;w&amp;#39; = [double]$box[1];
        &amp;#39;h&amp;#39; = [double]$box[2]}\n\n        $ribbonlength = GetRibbonLength($sides)\n        $bowlength
        = GetBowLength($sides)\n\n         $total += ($ribbonlength + $bowlength)\n     }\n     return
        $total\n}\n\n Function GetSmallestSide([hashtable]$sides){\n     $smallest
        = @(($sides.&amp;#39;l&amp;#39; * $sides.&amp;#39;w&amp;#39;), ($sides.&amp;#39;w&amp;#39;
        * $sides.&amp;#39;h&amp;#39;), ($sides.&amp;#39;l&amp;#39; * $sides.&amp;#39;h&amp;#39;))\n      return
        ($smallest | Sort-Object)[0]\n }\n\n Function GetSquareFeet([hashtable]$sides){\n    $squarefeet
        = (($sides.&amp;#39;l&amp;#39; * $sides.&amp;#39;w&amp;#39;) + ($sides.&amp;#39;w&amp;#39;
        * $sides.&amp;#39;h&amp;#39;) + ($sides.&amp;#39;l&amp;#39; * $sides.&amp;#39;h&amp;#39;))
        * 2\n     return $squarefeet\n }\n\n Function GetBowLength([hashtable]$sides){\n     return
        $sides.&amp;#39;l&amp;#39; * $sides.&amp;#39;w&amp;#39; * $sides.&amp;#39;h&amp;#39;\n
        }\n\n Function GetRibbonLength([hashtable]$sides){\n    $sides_arr = @($sides.&amp;#39;l&amp;#39;,
        $sides.&amp;#39;w&amp;#39;, $sides.&amp;#39;h&amp;#39;)\n\n    return (($sides_arr
        | Sort-Object)[0] + ($sides_arr | Sort-       Object)[1] )*2\n}\n\nExport-ModuleMember
        -Function Get-TotalSquareFeet\nExport-ModuleMember -Function Get-NeededRibbon\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxl4xj1/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449106525.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxl5208", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "faixelorihinal", "can_mod_post": false,
        "created_utc": 1449106721.0, "send_replies": true, "parent_id": "t3_3v3w2f",
        "score": 1, "author_fullname": "t2_hjctf", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Here''s Mine for part
        1\n\n**C++**\n\n\t#include &lt;iostream&gt;\n\tusing namespace std;\n\n\tint
        main(){\n\t  int l, w, h;\n\t  char aux;\n\t  int count = 0; \n\t  while(cin
        &gt;&gt; l &gt;&gt; aux &gt;&gt; w &gt;&gt; aux &gt;&gt; h){\n\t\t  count
        = count + (2*l*w) + (2*l*h) + (2*w*h);\n\t\t  if(l*w &lt;= l*h){\n\t\t\t  if(l*w
        &lt;= w*h) count += (l*w);\n\t\t\t  else count += (w*h);\n\t\t  }\n\t\t  else{\n\t\t\t  if(l*h
        &lt;= w*h)count += (l*h);\n\t\t\t  else count += (w*h);\n\t\t  }\n\t  }\n\t  cout
        &lt;&lt; count &lt;&lt; endl;\n\t}\n\n\nand for part 2\n\n**C++**\n\n\t#include
        &lt;iostream&gt;\n\tusing namespace std;\n\n\tint main(){\n\t\tint l, w, h;\n\t\tchar
        aux;\n\t\tint count = 0;\n\t\twhile(cin &gt;&gt; l &gt;&gt; aux &gt;&gt; w
        &gt;&gt; aux &gt;&gt; h){\n\t\t\tcount += (l*w*h);\n\t\t\tif(l&lt;= w){\n\t\t\t\tif(l
        &lt;= h){\n\t\t\t\t\t// l is smallest\n\t\t\t\t\tcount += (2*l);\n\t\t\t\t\tif(w
        &lt;= h) count += (2*w); //w is second smallest\n\t\t\t\t\telse count += (2*h);
        //h is second smallest\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t//h is smallest
        and l is second smallest\n\t\t\t\t\tcount += (2*h) + (2*l);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse
        if(w &lt;= h){\n\t\t\t\t// w is smallest\n\t\t\t\tcount += (2*w);\n\t\t\t\tif(l
        &lt;= h) count += (2*l); //l is second smallest\n\t\t\t\telse count += (2*h);
        // h is second smallest\n\t\t\t}\n\t\t\telse{\n\t\t\t\t//h is smallest and
        w is second smallest\n\t\t\t\tcount += (2*h) +(2*w);\n\t\t\t}\n\t\t}\n\t\tcout
        &lt;&lt; count &lt;&lt; endl;\n\t}\n\n        ", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cxl5208", "is_submitter":
        false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s Mine for part
        1&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;C++&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include
        &amp;lt;iostream&amp;gt;\nusing namespace std;\n\nint main(){\n  int l, w,
        h;\n  char aux;\n  int count = 0; \n  while(cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt;
        aux &amp;gt;&amp;gt; w &amp;gt;&amp;gt; aux &amp;gt;&amp;gt; h){\n      count
        = count + (2*l*w) + (2*l*h) + (2*w*h);\n      if(l*w &amp;lt;= l*h){\n          if(l*w
        &amp;lt;= w*h) count += (l*w);\n          else count += (w*h);\n      }\n      else{\n          if(l*h
        &amp;lt;= w*h)count += (l*h);\n          else count += (w*h);\n      }\n  }\n  cout
        &amp;lt;&amp;lt; count &amp;lt;&amp;lt; endl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and
        for part 2&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;C++&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include
        &amp;lt;iostream&amp;gt;\nusing namespace std;\n\nint main(){\n    int l,
        w, h;\n    char aux;\n    int count = 0;\n    while(cin &amp;gt;&amp;gt; l
        &amp;gt;&amp;gt; aux &amp;gt;&amp;gt; w &amp;gt;&amp;gt; aux &amp;gt;&amp;gt;
        h){\n        count += (l*w*h);\n        if(l&amp;lt;= w){\n            if(l
        &amp;lt;= h){\n                // l is smallest\n                count +=
        (2*l);\n                if(w &amp;lt;= h) count += (2*w); //w is second smallest\n                else
        count += (2*h); //h is second smallest\n            }\n            else{\n                //h
        is smallest and l is second smallest\n                count += (2*h) + (2*l);\n            }\n        }\n        else
        if(w &amp;lt;= h){\n            // w is smallest\n            count += (2*w);\n            if(l
        &amp;lt;= h) count += (2*l); //l is second smallest\n            else count
        += (2*h); // h is second smallest\n        }\n        else{\n            //h
        is smallest and w is second smallest\n            count += (2*h) +(2*w);\n        }\n    }\n    cout
        &amp;lt;&amp;lt; count &amp;lt;&amp;lt; endl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxl5208/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449106721.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxl55oj", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "alxuseche", "can_mod_post": false, "created_utc":
        1449106883.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_gs8vn", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Long one liners so not very pretty, but fun
        regardless!\n\n**Python**\n\n    f = open(''input.txt'', ''r'')\n    values
        = [[int(n) for n in line.split(''x'')] for line in f]\n    \n    total_paper
        = sum([(2*(n[0]*n[1] + n[1]*n[2] + n[0]*n[2])) + (min(n[0]*n[1], n[1]*n[2],
        n[0]*n[2])) for n in values])\n    total_ribbon = sum([min(2*(n[0] + n[1]),
        2*(n[1] + n[2]), 2*(n[0] + n[2])) + (n[0]*n[1]*n[2]) for n in values])", "edited":
        1449107393.0, "top_awarded_type": null, "author_flair_css_class": null, "name":
        "t1_cxl55oj", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Long
        one liners so not very pretty, but fun regardless!&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;f
        = open(&amp;#39;input.txt&amp;#39;, &amp;#39;r&amp;#39;)\nvalues = [[int(n)
        for n in line.split(&amp;#39;x&amp;#39;)] for line in f]\n\ntotal_paper =
        sum([(2*(n[0]*n[1] + n[1]*n[2] + n[0]*n[2])) + (min(n[0]*n[1], n[1]*n[2],
        n[0]*n[2])) for n in values])\ntotal_ribbon = sum([min(2*(n[0] + n[1]), 2*(n[1]
        + n[2]), 2*(n[0] + n[2])) + (n[0]*n[1]*n[2]) for n in values])\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxl55oj/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449106883.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 1, "removal_reason": null, "link_id": "t3_3v3w2f", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "cxl9wo1", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_3v3w2f", "score":
        1, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "My JS is a bit rusty (been a few years since I''ve last
        used it).\n\n**JavaScript**\n\nPart One:\n\n    function getPaperAmount(arr){\n                \n      var
        total = 0;\n      \n      for(var i=0;i&lt;arr.length;i++){\n        var dimensions
        = arr[i];\n        dimensions = dimensions.split(\"x\");\n        var dimensionsSqFt
        = [dimensions[0]*dimensions[1],dimensions[0]*dimensions[2],dimensions[1]*dimensions[2]];\n        var
        paperAmount = (2*dimensionsSqFt[0]) + (2*dimensionsSqFt[1]) + (2*dimensionsSqFt[2]);\n        var
        extraPaper = Math.min.apply(Math, dimensionsSqFt);\n\n        return total
        = total + paperAmount + extraPaper;\n\n        if(i == (arr.length-1)){\n          console.log(\"Total
        = \" + total);\n        }\n      }\n    }\n\n\nPart Two:\n\n    function getRibbonAmount(arr){\n\n      var
        total = 0;\n\n      for(var i=0;i&lt;arr.length;i++){\n        var dimensions
        = arr[i];\n        dimensions = dimensions.split(\"x\").sort(function(a,b){
        return a - b; });\n        var ribbonAmount = (dimensions[0]*2) + (dimensions[1]*2);\n        var
        extraRibbon = dimensions[0] * dimensions[1] * dimensions[2];\n        total
        = total + ribbonAmount + extraRibbon;\n\n        if(i == (arr.length-1)){\n          console.log(\"Total
        = \" + total);\n        }\n\n      }\n    }\n", "edited": 1449123698.0, "downs":
        0, "author_flair_css_class": null, "collapsed": false, "is_submitter": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My JS is a bit rusty (been
        a few years since I&amp;#39;ve last used it).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Part
        One:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function getPaperAmount(arr){\n\n  var
        total = 0;\n\n  for(var i=0;i&amp;lt;arr.length;i++){\n    var dimensions
        = arr[i];\n    dimensions = dimensions.split(&amp;quot;x&amp;quot;);\n    var
        dimensionsSqFt = [dimensions[0]*dimensions[1],dimensions[0]*dimensions[2],dimensions[1]*dimensions[2]];\n    var
        paperAmount = (2*dimensionsSqFt[0]) + (2*dimensionsSqFt[1]) + (2*dimensionsSqFt[2]);\n    var
        extraPaper = Math.min.apply(Math, dimensionsSqFt);\n\n    return total = total
        + paperAmount + extraPaper;\n\n    if(i == (arr.length-1)){\n      console.log(&amp;quot;Total
        = &amp;quot; + total);\n    }\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Part
        Two:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function getRibbonAmount(arr){\n\n  var
        total = 0;\n\n  for(var i=0;i&amp;lt;arr.length;i++){\n    var dimensions
        = arr[i];\n    dimensions = dimensions.split(&amp;quot;x&amp;quot;).sort(function(a,b){
        return a - b; });\n    var ribbonAmount = (dimensions[0]*2) + (dimensions[1]*2);\n    var
        extraRibbon = dimensions[0] * dimensions[1] * dimensions[2];\n    total =
        total + ribbonAmount + extraRibbon;\n\n    if(i == (arr.length-1)){\n      console.log(&amp;quot;Total
        = &amp;quot; + total);\n    }\n\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxl9wo1/",
        "num_reports": null, "locked": false, "name": "t1_cxl9wo1", "created": 1449114501.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1449114501.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 1, "removal_reason": null, "link_id": "t3_3v3w2f", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "cxlh3pf", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_3v3w2f", "score":
        1, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "Java. Note that the Pattern.compile on line 6 is meant
        to delimit each line by \"x\" and a new line character.\n\n    import java.util.regex.Pattern;\n    import
        java.util.Scanner;\n    \n    public class Day2 {\n        public static void
        main(String[] args) {\n            Scanner scanner = new Scanner(System.in).useDelimiter(Pattern.compile(\"[\\\\nx]\"));\n            int
        required_paper = 0;\n            int required_ribbon = 0;\n            while(scanner.hasNextInt())
        {\n                int l = scanner.nextInt();\n                int w = scanner.nextInt();\n                int
        h = scanner.nextInt();\n                int min = Math.min(l,Math.min(w,h));\n                int
        max = Math.max(l,Math.max(w,h));\n                required_paper += 2*l*w+2*w*h+2*h*l+Math.min(l*w,Math.min(w*h,h*l));\n                required_ribbon
        += 2*(l+w+h-min-max)+2*min+l*w*h;\n            }\n            System.out.println(\"Required
        paper: \" + required_paper);\n            System.out.println(\"Required ribbon:
        \" + required_ribbon);\n        }\n    }", "edited": false, "downs": 0, "author_flair_css_class":
        null, "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Java.
        Note that the Pattern.compile on line 6 is meant to delimit each line by &amp;quot;x&amp;quot;
        and a new line character.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import java.util.regex.Pattern;\nimport
        java.util.Scanner;\n\npublic class Day2 {\n    public static void main(String[]
        args) {\n        Scanner scanner = new Scanner(System.in).useDelimiter(Pattern.compile(&amp;quot;[\\\\nx]&amp;quot;));\n        int
        required_paper = 0;\n        int required_ribbon = 0;\n        while(scanner.hasNextInt())
        {\n            int l = scanner.nextInt();\n            int w = scanner.nextInt();\n            int
        h = scanner.nextInt();\n            int min = Math.min(l,Math.min(w,h));\n            int
        max = Math.max(l,Math.max(w,h));\n            required_paper += 2*l*w+2*w*h+2*h*l+Math.min(l*w,Math.min(w*h,h*l));\n            required_ribbon
        += 2*(l+w+h-min-max)+2*min+l*w*h;\n        }\n        System.out.println(&amp;quot;Required
        paper: &amp;quot; + required_paper);\n        System.out.println(&amp;quot;Required
        ribbon: &amp;quot; + required_ribbon);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxlh3pf/",
        "num_reports": null, "locked": false, "name": "t1_cxlh3pf", "created": 1449131019.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1449131019.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxliohr", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "PM_ME_INSIDER_INFO", "can_mod_post": false,
        "created_utc": 1449137314.0, "send_replies": true, "parent_id": "t3_3v3w2f",
        "score": 1, "author_fullname": "t2_lm638", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Here''s my JavaScript
        solution to Day 2 :)\n\n    function SA (w, h, d) {\n      var small_side
        = Math.min(w * d, h * d, w * h);\n      return 2 * (w * d + h * d + w * h)
        + small_side;\n    }\n    \n    function ribbon (w, h, d) {\n      var ord_dims
        = Array.prototype.slice.call(arguments).sort(function (a, b) {\n        return
        a - b;\n      });\n    \n      return ord_dims[0] + ord_dims[0] + ord_dims[1]
        + ord_dims[1] + w * h * d;\n    }\n    \n    (function () {\n      var nodes
        = document.getElementsByTagName(\"pre\")[0].innerHTML;\n      var sum = 0,
        args;\n    \n      nodes.split(/\\n/g).forEach(function (i, o) {\n        args
        = i.split(/x/g).map(parseFloat);\n        sum += (args.length == 3) ? ribbon.apply(this,
        args) : 0;\n      });\n      console.log(sum);\n    })();\n\nJust replace
        ribbon with SA to get the first part of the challenge!", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxliohr",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s my JavaScript
        solution to Day 2 :)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function SA (w, h,
        d) {\n  var small_side = Math.min(w * d, h * d, w * h);\n  return 2 * (w *
        d + h * d + w * h) + small_side;\n}\n\nfunction ribbon (w, h, d) {\n  var
        ord_dims = Array.prototype.slice.call(arguments).sort(function (a, b) {\n    return
        a - b;\n  });\n\n  return ord_dims[0] + ord_dims[0] + ord_dims[1] + ord_dims[1]
        + w * h * d;\n}\n\n(function () {\n  var nodes = document.getElementsByTagName(&amp;quot;pre&amp;quot;)[0].innerHTML;\n  var
        sum = 0, args;\n\n  nodes.split(/\\n/g).forEach(function (i, o) {\n    args
        = i.split(/x/g).map(parseFloat);\n    sum += (args.length == 3) ? ribbon.apply(this,
        args) : 0;\n  });\n  console.log(sum);\n})();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Just
        replace ribbon with SA to get the first part of the challenge!&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxliohr/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449137314.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxlj7dk", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "RedSpah", "can_mod_post": false, "created_utc":
        1449139617.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_heh0t", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "How about LINQ?\n\n    public object day2_1()\n        {\n            return
        day2str.Split(''\\n'').Select(x =&gt; x.Split(''x'')).Select(x =&gt; x.Select(y
        =&gt; int.Parse(y))).Select(x =&gt; x.ToArray()).Select(x =&gt; 2 * x[0] *
        x[1] + 2 * x[0] * x[2] + 2 * x[1] * x[2] + Math.Min(x[0] * x[1], Math.Min(x[0]
        * x[2], x[1] * x[2]))).Sum();\n        }\n\n    public object day2_2()\n        {\n            return
        day2str.Split(''\\n'').Select(x =&gt; x.Split(''x'')).Select(x =&gt; x.Select(y
        =&gt; int.Parse(y))).Select(x =&gt; x.ToList()).Select(x =&gt; x.OrderBy(y
        =&gt; y).ToList()).Select(x =&gt; 2 * x[0] + 2 * x[1] + x[0] * x[1] * x[2]).Sum();\n        }",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_cxlj7dk", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;How
        about LINQ?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;public object day2_1()\n    {\n        return
        day2str.Split(&amp;#39;\\n&amp;#39;).Select(x =&amp;gt; x.Split(&amp;#39;x&amp;#39;)).Select(x
        =&amp;gt; x.Select(y =&amp;gt; int.Parse(y))).Select(x =&amp;gt; x.ToArray()).Select(x
        =&amp;gt; 2 * x[0] * x[1] + 2 * x[0] * x[2] + 2 * x[1] * x[2] + Math.Min(x[0]
        * x[1], Math.Min(x[0] * x[2], x[1] * x[2]))).Sum();\n    }\n\npublic object
        day2_2()\n    {\n        return day2str.Split(&amp;#39;\\n&amp;#39;).Select(x
        =&amp;gt; x.Split(&amp;#39;x&amp;#39;)).Select(x =&amp;gt; x.Select(y =&amp;gt;
        int.Parse(y))).Select(x =&amp;gt; x.ToList()).Select(x =&amp;gt; x.OrderBy(y
        =&amp;gt; y).ToList()).Select(x =&amp;gt; 2 * x[0] + 2 * x[1] + x[0] * x[1]
        * x[2]).Sum();\n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxlj7dk/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449139617.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxmb8rv", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "tftio", "can_mod_post": false, "created_utc":
        1449188277.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_b2y3x", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "OCaml:\n\n    open Batteries;;\n\n    let
        s_to_l s = List.map (Int.of_string) (String.nsplit s \"x\");;\n\n    let input
        = List.map s_to_l (String.nsplit \"4x23x21\n    22x29x19\n    11x4x11\" \"\\n\");;
        \n\n    let wrap h w l =\n      let lw = l * w in\n      let wh = w * h in\n      let
        hl = h * l in\n      let smallest = min lw (min wh hl) in\n      smallest
        + (2 * lw) + (2 * wh) + (2 * hl);;\n\n    let ribbon h w l =\n      let lw
        = l + w in\n      let wh = w + h in\n      let hl = h + l in\n      let perimeter
        = min lw (min wh hl) in\n      let bow = l * w * h in\n      (2 * perimeter)
        + bow;;\n\n    exception BogusList;;\n    let unpack f = function\n        (a::b::c::[])
        -&gt; f a b c\n      | _  -&gt; raise BogusList;;\n\n    let ok = (wrap 1
        1 10) = 43;;\n    let ok'' = (wrap 2 3 4) = 58;;\n\n    let all_ribbon = List.fold_left
        (fun a e -&gt; (a + ((unpack ribbon) e))) 0 input;;\n    let paper = List.fold_left
        (fun a e -&gt; (a + ((unpack wrap) e))) 0 input;;\n\n\n", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxmb8rv",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;OCaml:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;open
        Batteries;;\n\nlet s_to_l s = List.map (Int.of_string) (String.nsplit s &amp;quot;x&amp;quot;);;\n\nlet
        input = List.map s_to_l (String.nsplit &amp;quot;4x23x21\n22x29x19\n11x4x11&amp;quot;
        &amp;quot;\\n&amp;quot;);; \n\nlet wrap h w l =\n  let lw = l * w in\n  let
        wh = w * h in\n  let hl = h * l in\n  let smallest = min lw (min wh hl) in\n  smallest
        + (2 * lw) + (2 * wh) + (2 * hl);;\n\nlet ribbon h w l =\n  let lw = l + w
        in\n  let wh = w + h in\n  let hl = h + l in\n  let perimeter = min lw (min
        wh hl) in\n  let bow = l * w * h in\n  (2 * perimeter) + bow;;\n\nexception
        BogusList;;\nlet unpack f = function\n    (a::b::c::[]) -&amp;gt; f a b c\n  |
        _  -&amp;gt; raise BogusList;;\n\nlet ok = (wrap 1 1 10) = 43;;\nlet ok&amp;#39;
        = (wrap 2 3 4) = 58;;\n\nlet all_ribbon = List.fold_left (fun a e -&amp;gt;
        (a + ((unpack ribbon) e))) 0 input;;\nlet paper = List.fold_left (fun a e
        -&amp;gt; (a + ((unpack wrap) e))) 0 input;;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxmb8rv/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449188277.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxmrjxo", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "TTSDA", "can_mod_post": false, "created_utc":
        1449220293.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_4xg0e", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "In C\n\n    #include &lt;stdio.h&gt;\n    \n    int
        main()\n    {\n        /* holds a present''s sides */\n        int sides[3];\n    \n        int
        side,\n            area, minArea,\n            perimeter, minPerimeter;\n    \n        /*
        total */\n        int paper = 0,\n            ribbon = 0;\n    \n        while
        (scanf(\"%ix%ix%i\\n\", &amp;sides[0], &amp;sides[1], &amp;sides[2]) == 3)\n        {\n            for
        (side = 0; side &lt; 3; side++)\n            {\n                area = sides[side]
        * sides[(side+1)%3];\n                perimeter = 2*(sides[side] + sides[(side+1)%3]);\n    \n                if
        (side == 0 || area &lt; minArea)\n                    minArea = area;\n    \n                if
        (side == 0 || perimeter &lt; minPerimeter)\n                    minPerimeter
        = perimeter;\n            }\n    \n            /* the paper required is the
        surface area plus the area of\n               the smallest side. */\n            paper
        += 2*sides[0]*sides[1] +\n                     2*sides[1]*sides[2] +\n                     2*sides[2]*sides[0]
        +\n                     minArea;\n    \n            /* the ribbon required
        is the smallest perimeter plus the\n               total volume */\n            ribbon
        += minPerimeter +\n                      sides[0] * sides[1] * sides[2];\n        }\n    \n        printf(\"The
        elves will need:\\n\"\n           \"&gt; %i square feet of wrapping paper;\\n\"\n           \"&gt;
        %i feet of ribbon.\\n\", paper, ribbon);\n    \n        return 0;\n    }\n    \nhttps://github.com/ttsda/advent-of-code/blob/master/src/2/main.c",
        "edited": 1449399494.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxmrjxo", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;In
        C&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;\n\nint
        main()\n{\n    /* holds a present&amp;#39;s sides */\n    int sides[3];\n\n    int
        side,\n        area, minArea,\n        perimeter, minPerimeter;\n\n    /*
        total */\n    int paper = 0,\n        ribbon = 0;\n\n    while (scanf(&amp;quot;%ix%ix%i\\n&amp;quot;,
        &amp;amp;sides[0], &amp;amp;sides[1], &amp;amp;sides[2]) == 3)\n    {\n        for
        (side = 0; side &amp;lt; 3; side++)\n        {\n            area = sides[side]
        * sides[(side+1)%3];\n            perimeter = 2*(sides[side] + sides[(side+1)%3]);\n\n            if
        (side == 0 || area &amp;lt; minArea)\n                minArea = area;\n\n            if
        (side == 0 || perimeter &amp;lt; minPerimeter)\n                minPerimeter
        = perimeter;\n        }\n\n        /* the paper required is the surface area
        plus the area of\n           the smallest side. */\n        paper += 2*sides[0]*sides[1]
        +\n                 2*sides[1]*sides[2] +\n                 2*sides[2]*sides[0]
        +\n                 minArea;\n\n        /* the ribbon required is the smallest
        perimeter plus the\n           total volume */\n        ribbon += minPerimeter
        +\n                  sides[0] * sides[1] * sides[2];\n    }\n\n    printf(&amp;quot;The
        elves will need:\\n&amp;quot;\n       &amp;quot;&amp;gt; %i square feet of
        wrapping paper;\\n&amp;quot;\n       &amp;quot;&amp;gt; %i feet of ribbon.\\n&amp;quot;,
        paper, ribbon);\n\n    return 0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a
        href=\"https://github.com/ttsda/advent-of-code/blob/master/src/2/main.c\"&gt;https://github.com/ttsda/advent-of-code/blob/master/src/2/main.c&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxmrjxo/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449220293.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxnfcmz", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "markokoleznik", "can_mod_post": false,
        "created_utc": 1449266473.0, "send_replies": true, "parent_id": "t3_3v3w2f",
        "score": 1, "author_fullname": "t2_oqrkq", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Python one liner:\n\n    print(sum([(2*(z[0]*z[1]
        + z[0]*z[2] + z[1]*z[2]) + z[0]*z[1]) for z in [sorted(list(map((lambda t:
        int(t)), y))) for y in [x.split(''x'') for x in dimensions.split(''\\n'')]]]))",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_cxnfcmz", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python
        one liner:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;print(sum([(2*(z[0]*z[1] +
        z[0]*z[2] + z[1]*z[2]) + z[0]*z[1]) for z in [sorted(list(map((lambda t: int(t)),
        y))) for y in [x.split(&amp;#39;x&amp;#39;) for x in dimensions.split(&amp;#39;\\n&amp;#39;)]]]))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxnfcmz/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449266473.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxptju2", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "masasin", "can_mod_post": false, "created_utc":
        1449455139.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_8y0z9", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Python\n\n    def parse_dimensions(box_size):\n        return
        sorted(int(i) for i in box_size.split(\"x\"))\n\n\n    def main():\n        with
        open(\"inputs/day_02_input.txt\", \"r\") as input_file:\n            total_area
        = total_length = 0\n            for box_dims in input_file:\n                w,
        h, l = parse_dimensions(box_dims)\n                total_area += 2*(l*w +
        w*h + h*l) + w*h\n                total_length += l*w*h + 2*(w + h)\n\n        print(\"Total
        area: {} square feet\".format(total_area))\n        print(\"Total ribbon length:
        {} feet\".format(total_length))\n\n\n    if __name__ == \"__main__\":\n        main()\n",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_cxptju2", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Python&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        parse_dimensions(box_size):\n    return sorted(int(i) for i in box_size.split(&amp;quot;x&amp;quot;))\n\n\ndef
        main():\n    with open(&amp;quot;inputs/day_02_input.txt&amp;quot;, &amp;quot;r&amp;quot;)
        as input_file:\n        total_area = total_length = 0\n        for box_dims
        in input_file:\n            w, h, l = parse_dimensions(box_dims)\n            total_area
        += 2*(l*w + w*h + h*l) + w*h\n            total_length += l*w*h + 2*(w + h)\n\n    print(&amp;quot;Total
        area: {} square feet&amp;quot;.format(total_area))\n    print(&amp;quot;Total
        ribbon length: {} feet&amp;quot;.format(total_length))\n\n\nif __name__ ==
        &amp;quot;__main__&amp;quot;:\n    main()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxptju2/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449455139.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxqesgt", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "emmanuel_erc", "can_mod_post": false,
        "created_utc": 1449507656.0, "send_replies": true, "parent_id": "t3_3v3w2f",
        "score": 1, "author_fullname": "t2_rkk2o", "approved_by": null, "mod_note":
        null, "all_awardings": [], "collapsed": false, "body": "Here is my Haskell
        solution\n\n    module DayTwo where\n    \n    import Control.Arrow ((&amp;&amp;&amp;))\n    import
        Data.List\n    import Control.Monad\n    \n    main :: IO ()\n    main = do\n      vals1
        &lt;- mapM (liftM box . return) theList\n      vals2 &lt;- mapM (liftM ribbon
        . return) theList\n      print $ sum vals1\n      print $ sum vals2\n    \n    box
        :: [Int] -&gt; Int\n    box [l,w,h] = uncurry (+) . (minimum &amp;&amp;&amp;
        sum . map (*2)) . zipWith (*) [w,h,l] $ [l,w,h]\n    \n    ribbon :: [Int]
        -&gt; Int\n    ribbon = uncurry (+) . (sum'' . take 2 . sort &amp;&amp;&amp;
        product)\n      where\n        sum'' = sum . map (join (+))\n    -- sample
        List    \n    theList :: [[Int]]\n    theList = [[20,3,11]\n              ,[15,27,5]\n              ,[6,29,7]\n             ,[30,15,9]]",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_cxqesgt", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here
        is my Haskell solution&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;module DayTwo where\n\nimport
        Control.Arrow ((&amp;amp;&amp;amp;&amp;amp;))\nimport Data.List\nimport Control.Monad\n\nmain
        :: IO ()\nmain = do\n  vals1 &amp;lt;- mapM (liftM box . return) theList\n  vals2
        &amp;lt;- mapM (liftM ribbon . return) theList\n  print $ sum vals1\n  print
        $ sum vals2\n\nbox :: [Int] -&amp;gt; Int\nbox [l,w,h] = uncurry (+) . (minimum
        &amp;amp;&amp;amp;&amp;amp; sum . map (*2)) . zipWith (*) [w,h,l] $ [l,w,h]\n\nribbon
        :: [Int] -&amp;gt; Int\nribbon = uncurry (+) . (sum&amp;#39; . take 2 . sort
        &amp;amp;&amp;amp;&amp;amp; product)\n  where\n    sum&amp;#39; = sum . map
        (join (+))\n-- sample List    \ntheList :: [[Int]]\ntheList = [[20,3,11]\n          ,[15,27,5]\n          ,[6,29,7]\n         ,[30,15,9]]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxqesgt/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449507656.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxrki1r", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "mjnet", "can_mod_post": false, "created_utc":
        1449588070.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_mh4v8", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "My Haskell solution:\n\n     {-# LANGUAGE
        OverloadedStrings #-}\n\n    import qualified Data.Text as T\n    import qualified
        Data.Text.IO as T\n\n    type Present = (Int, Int, Int)\n\n    triplify ::
        [T.Text] -&gt; Present\n    triplify [l,w,h] = (toInt l, toInt w, toInt h)\n        where
        toInt = read . T.unpack\n\n    dimension :: T.Text -&gt; Present\n    dimension
        = triplify . T.splitOn \"x\"\n\n    -- PART 1\n\n    paperPerPresent :: Present
        -&gt; Int\n    paperPerPresent (l,w,h) = 2*areaA + 2*areaB + 2*areaC + minimum[areaA,
        areaB, areaC]\n        where areaA = l*w\n              areaB = w*h\n              areaC
        = h*l\n\n    partOne :: IO ()\n    partOne = do\n      ls &lt;- getLines \"day2.txt\"\n      let
        totalPaper = sum $ map (paperPerPresent . dimension) ls\n      print totalPaper\n\n\n    --
        PART 2\n\n    ribbonPerPresent :: Present -&gt; Int\n    ribbonPerPresent
        (l,w,h) = 2*sideA + 2*sideB + (l*w*h)\n        where sideA = minimum[l,w,h]\n              sideB
        = minimumSecond [l,w,h]\n              filterSmallest = filter (not . (==
        sideA))\n              minimumSecond xs\n                  | length (filterSmallest
        xs) == 1 =  sideA\n                  | otherwise = minimum $ filterSmallest
        xs\n\n    partTwo :: IO ()\n    partTwo = do\n      ls &lt;- getLines \"day2.txt\"\n      let
        totalRibbon = sum $ map (ribbonPerPresent . dimension) ls\n      print totalRibbon\n\n    --\n\n    getLines
        :: FilePath -&gt; IO [T.Text]\n    getLines fileName = fmap T.lines (T.readFile
        fileName)\n\n    main :: IO ()\n    main = do\n        partOne\n        partTwo",
        "edited": 1449602654.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxrki1r", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My
        Haskell solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; {-# LANGUAGE OverloadedStrings
        #-}\n\nimport qualified Data.Text as T\nimport qualified Data.Text.IO as T\n\ntype
        Present = (Int, Int, Int)\n\ntriplify :: [T.Text] -&amp;gt; Present\ntriplify
        [l,w,h] = (toInt l, toInt w, toInt h)\n    where toInt = read . T.unpack\n\ndimension
        :: T.Text -&amp;gt; Present\ndimension = triplify . T.splitOn &amp;quot;x&amp;quot;\n\n--
        PART 1\n\npaperPerPresent :: Present -&amp;gt; Int\npaperPerPresent (l,w,h)
        = 2*areaA + 2*areaB + 2*areaC + minimum[areaA, areaB, areaC]\n    where areaA
        = l*w\n          areaB = w*h\n          areaC = h*l\n\npartOne :: IO ()\npartOne
        = do\n  ls &amp;lt;- getLines &amp;quot;day2.txt&amp;quot;\n  let totalPaper
        = sum $ map (paperPerPresent . dimension) ls\n  print totalPaper\n\n\n-- PART
        2\n\nribbonPerPresent :: Present -&amp;gt; Int\nribbonPerPresent (l,w,h) =
        2*sideA + 2*sideB + (l*w*h)\n    where sideA = minimum[l,w,h]\n          sideB
        = minimumSecond [l,w,h]\n          filterSmallest = filter (not . (== sideA))\n          minimumSecond
        xs\n              | length (filterSmallest xs) == 1 =  sideA\n              |
        otherwise = minimum $ filterSmallest xs\n\npartTwo :: IO ()\npartTwo = do\n  ls
        &amp;lt;- getLines &amp;quot;day2.txt&amp;quot;\n  let totalRibbon = sum $
        map (ribbonPerPresent . dimension) ls\n  print totalRibbon\n\n--\n\ngetLines
        :: FilePath -&amp;gt; IO [T.Text]\ngetLines fileName = fmap T.lines (T.readFile
        fileName)\n\nmain :: IO ()\nmain = do\n    partOne\n    partTwo\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxrki1r/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449588070.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"total_awards_received": 0, "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "ups": 1, "removal_reason": null, "link_id": "t3_3v3w2f", "author_flair_template_id":
        null, "likes": null, "replies": "", "user_reports": [], "saved": false, "id":
        "cxrp51z", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "[deleted]",
        "can_mod_post": false, "send_replies": true, "parent_id": "t3_3v3w2f", "score":
        1, "approved_by": null, "report_reasons": null, "all_awardings": [], "subreddit_id":
        "t5_3b3wa", "body": "One-liner python solution\n\n`print sum(map(lambda x:2*(x[0]*x[1]+x[0]*x[2]+x[1]*x[2])+min(x[0]*x[1],x[0]*x[2],x[1]*x[2]),[(map(int,
        line.split(''x''))) for line in open(''input2'')]))`\n\nand\n\n`print sum(map(lambda
        x:x[0]*x[1]*x[2]+2*min(x[0]+x[1],x[0]+x[2],x[1]+x[2]),[(map(int, line.split(''x'')))
        for line in open(''input2'')]))`", "edited": 1449673025.0, "downs": 0, "author_flair_css_class":
        null, "collapsed": false, "is_submitter": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;One-liner
        python solution&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;print sum(map(lambda x:2*(x[0]*x[1]+x[0]*x[2]+x[1]*x[2])+min(x[0]*x[1],x[0]*x[2],x[1]*x[2]),[(map(int,
        line.split(&amp;#39;x&amp;#39;))) for line in open(&amp;#39;input2&amp;#39;)]))&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;and&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;print
        sum(map(lambda x:x[0]*x[1]*x[2]+2*min(x[0]+x[1],x[0]+x[2],x[1]+x[2]),[(map(int,
        line.split(&amp;#39;x&amp;#39;))) for line in open(&amp;#39;input2&amp;#39;)]))&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "associated_award": null, "stickied":
        false, "subreddit_type": "public", "can_gild": false, "top_awarded_type":
        null, "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxrp51z/",
        "num_reports": null, "locked": false, "name": "t1_cxrp51z", "created": 1449594846.0,
        "subreddit": "adventofcode", "author_flair_text": null, "treatment_tags":
        [], "created_utc": 1449594846.0, "subreddit_name_prefixed": "r/adventofcode",
        "controversiality": 0, "depth": 0, "author_flair_background_color": "", "collapsed_because_crowd_control":
        null, "mod_reports": [], "mod_note": null, "distinguished": null}}, {"kind":
        "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxrq5o7", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "suudo", "can_mod_post": false, "created_utc":
        1449596214.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_94b5v", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Hey, here''s my Python solution:\n\n    input
        = requests.get(\"http://adventofcode.com/day/2/input\", cookies={\"session\":
        sess}).text\n    \n    def process(input):\n      for line in input.split(\"\\n\"):\n        try:\n          #
        paper\n          l,w,h = [int(_) for _ in line.split(\"x\")]\n          s1,
        s2, s3 = 2*l*w, 2*w*h, 2*h*l\n          slack = min([s1, s2, s3]) / 2\n          paper
        = s1 + s2 + s3 + slack\n          # ribbon\n          sides_sorted = sorted([l,w,h])[:2]\n          ribbon
        = 2*sides_sorted[0] + 2*sides_sorted[1] + l*w*h\n          yield paper, ribbon\n        except:\n          print(\"unable
        to parse {}, continuing\".format(line))\n    \n    papersum = 0\n    ribbonsum
        = 0\n    for paper, ribbon in process(input):\n      papersum += paper\n      ribbonsum
        += ribbon\n    \n    print(\"Paper: {}, ribbon: {} (sqft)\".format(papersum,
        ribbonsum))", "edited": false, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cxrq5o7", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hey,
        here&amp;#39;s my Python solution:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;input
        = requests.get(&amp;quot;http://adventofcode.com/day/2/input&amp;quot;, cookies={&amp;quot;session&amp;quot;:
        sess}).text\n\ndef process(input):\n  for line in input.split(&amp;quot;\\n&amp;quot;):\n    try:\n      #
        paper\n      l,w,h = [int(_) for _ in line.split(&amp;quot;x&amp;quot;)]\n      s1,
        s2, s3 = 2*l*w, 2*w*h, 2*h*l\n      slack = min([s1, s2, s3]) / 2\n      paper
        = s1 + s2 + s3 + slack\n      # ribbon\n      sides_sorted = sorted([l,w,h])[:2]\n      ribbon
        = 2*sides_sorted[0] + 2*sides_sorted[1] + l*w*h\n      yield paper, ribbon\n    except:\n      print(&amp;quot;unable
        to parse {}, continuing&amp;quot;.format(line))\n\npapersum = 0\nribbonsum
        = 0\nfor paper, ribbon in process(input):\n  papersum += paper\n  ribbonsum
        += ribbon\n\nprint(&amp;quot;Paper: {}, ribbon: {} (sqft)&amp;quot;.format(papersum,
        ribbonsum))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null,
        "collapsed_reason": null, "distinguished": null, "associated_award": null,
        "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxrq5o7/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449596214.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxv6d8x", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "Drasive", "can_mod_post": false, "created_utc":
        1449825601.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_efcxl", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "My F# solution ([https://github.com/drasive/advent-of-code-2015](https://github.com/drasive/advent-of-code-2015)):\n\n    let
        private CalculateWrappingPaper (length : int) (width : int) (height : int)\n        :
        int =\n        let side1 = length * width\n        let side2 = width * height\n        let
        side3 = height * length\n        let smallestSide = [|side1; side2; side3|]
        |&gt; Array.min\n    \n        2*side1 + 2*side2 + 2*side3 + smallestSide\n    \n    let
        private CalculateRibbon (length : int) (width : int) (height : int) : int
        =\n        let volume = length * width * height\n    \n        let edgesSorted
        = [|length; width; height|] |&gt; Array.sort\n        let perimeter = 2*edgesSorted.[0]
        + 2*edgesSorted.[1]\n    \n        volume + perimeter\n    \n    \n    let
        Solution (input: string) : (int * int) =\n        if input = null then\n            raise
        (ArgumentNullException \"input\")\n    \n        let mutable wrappingPaper
        = 0\n        let mutable ribbon = 0\n    \n        input.Split(''\\n'')\n        |&gt;
        Seq.filter(fun line -&gt;\n            // Ignore any other lines\n            Regex.IsMatch(line,
        @\"^([\\d])+x([\\d])+x([\\d])+$\"))\n        |&gt; Seq.iter (fun line -&gt;\n            //
        Parse values\n            let values = line.Split(''x'')\n    \n            let
        length = values.[0] |&gt; Int32.Parse\n            let width  = values.[1]
        |&gt; Int32.Parse\n            let height = values.[2] |&gt; Int32.Parse\n    \n            //
        Calculate \n            wrappingPaper &lt;-\n                wrappingPaper
        + (CalculateWrappingPaper length width height)\n            ribbon &lt;-\n                ribbon
        + (CalculateRibbon length width height))\n        \n        (wrappingPaper,
        ribbon)          \n    \n    let FormattedSolution (solution : (int * int))
        : string =\n        String.Format(\"Wrapping paper: {0}\\n\" +\n                      \"Ribbon:
        {1}\",\n                      fst solution, snd solution)", "edited": false,
        "top_awarded_type": null, "author_flair_css_class": null, "name": "t1_cxv6d8x",
        "is_submitter": false, "downs": 0, "author_flair_richtext": [], "author_patreon_flair":
        false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My F# solution (&lt;a
        href=\"https://github.com/drasive/advent-of-code-2015\"&gt;https://github.com/drasive/advent-of-code-2015&lt;/a&gt;):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let
        private CalculateWrappingPaper (length : int) (width : int) (height : int)\n    :
        int =\n    let side1 = length * width\n    let side2 = width * height\n    let
        side3 = height * length\n    let smallestSide = [|side1; side2; side3|] |&amp;gt;
        Array.min\n\n    2*side1 + 2*side2 + 2*side3 + smallestSide\n\nlet private
        CalculateRibbon (length : int) (width : int) (height : int) : int =\n    let
        volume = length * width * height\n\n    let edgesSorted = [|length; width;
        height|] |&amp;gt; Array.sort\n    let perimeter = 2*edgesSorted.[0] + 2*edgesSorted.[1]\n\n    volume
        + perimeter\n\n\nlet Solution (input: string) : (int * int) =\n    if input
        = null then\n        raise (ArgumentNullException &amp;quot;input&amp;quot;)\n\n    let
        mutable wrappingPaper = 0\n    let mutable ribbon = 0\n\n    input.Split(&amp;#39;\\n&amp;#39;)\n    |&amp;gt;
        Seq.filter(fun line -&amp;gt;\n        // Ignore any other lines\n        Regex.IsMatch(line,
        @&amp;quot;^([\\d])+x([\\d])+x([\\d])+$&amp;quot;))\n    |&amp;gt; Seq.iter
        (fun line -&amp;gt;\n        // Parse values\n        let values = line.Split(&amp;#39;x&amp;#39;)\n\n        let
        length = values.[0] |&amp;gt; Int32.Parse\n        let width  = values.[1]
        |&amp;gt; Int32.Parse\n        let height = values.[2] |&amp;gt; Int32.Parse\n\n        //
        Calculate \n        wrappingPaper &amp;lt;-\n            wrappingPaper + (CalculateWrappingPaper
        length width height)\n        ribbon &amp;lt;-\n            ribbon + (CalculateRibbon
        length width height))\n\n    (wrappingPaper, ribbon)          \n\nlet FormattedSolution
        (solution : (int * int)) : string =\n    String.Format(&amp;quot;Wrapping
        paper: {0}\\n&amp;quot; +\n                  &amp;quot;Ribbon: {1}&amp;quot;,\n                  fst
        solution, snd solution)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason":
        null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxv6d8x/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449825601.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        "", "user_reports": [], "saved": false, "id": "cxvjtid", "banned_at_utc":
        null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "kidinside", "can_mod_post": false, "created_utc":
        1449856799.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_a7be6", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "C++ for part 2:\n\n    #include &lt;iostream&gt;\n    using
        namespace std;\n\n    int main() {\n    \tint l, w, h, max,\n    \t\ttotal
        = 0;\n    \tchar x;\n    \twhile(cin &gt;&gt; l &gt;&gt; x &gt;&gt; w &gt;&gt;
        x &gt;&gt; h){\n    \t\ttotal += l*w*h;\n    \t\tl &gt; w? max = l:max = w;\n    \t\th
        &gt; max? max = h: max = max;\n    \t\ttotal += 2*(l+w+h);\n    \t\ttotal
        -= 2*max;\n    \t}\n    \tcout &lt;&lt; total;\n    \treturn 0;\n    }", "edited":
        1449856985.0, "top_awarded_type": null, "author_flair_css_class": null, "name":
        "t1_cxvjtid", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;C++
        for part 2:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;\nusing
        namespace std;\n\nint main() {\n    int l, w, h, max,\n        total = 0;\n    char
        x;\n    while(cin &amp;gt;&amp;gt; l &amp;gt;&amp;gt; x &amp;gt;&amp;gt; w
        &amp;gt;&amp;gt; x &amp;gt;&amp;gt; h){\n        total += l*w*h;\n        l
        &amp;gt; w? max = l:max = w;\n        h &amp;gt; max? max = h: max = max;\n        total
        += 2*(l+w+h);\n        total -= 2*max;\n    }\n    cout &amp;lt;&amp;lt; total;\n    return
        0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "removal_reason": null, "collapsed_reason":
        null, "distinguished": null, "associated_award": null, "stickied": false,
        "author_premium": false, "can_gild": false, "gildings": {}, "unrepliable_reason":
        null, "author_flair_text_color": null, "score_hidden": false, "permalink":
        "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxvjtid/", "subreddit_type":
        "public", "locked": false, "report_reasons": null, "created": 1449856799.0,
        "author_flair_text": null, "treatment_tags": [], "link_id": "t3_3v3w2f", "subreddit_name_prefixed":
        "r/adventofcode", "controversiality": 0, "depth": 0, "author_flair_background_color":
        null, "collapsed_because_crowd_control": null, "mod_reports": [], "num_reports":
        null, "ups": 1}}, {"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "cxwc1dx",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "SoundGuyChris",
        "can_mod_post": false, "created_utc": 1449912560.0, "send_replies": true,
        "parent_id": "t3_3v3w2f", "score": 1, "author_fullname": "t2_ksc6z", "approved_by":
        null, "mod_note": null, "all_awardings": [], "collapsed": false, "body": "Still
        late to the party on these exercises, but if anyone has any way of improving
        upon what I''ve got here, it''d be appreciated as I continue to learn C#.
        :)\n\nThis was my first time working with an external file in code, so if
        you have any critique on how to improve upon what I did, it''s definitely
        welcome. I peeked at some other solutions to get a handle on what was going
        on here but I definitely learned a ton.\n\nhttp://pastebin.com/w8zLbDaA",
        "edited": false, "top_awarded_type": null, "author_flair_css_class": null,
        "name": "t1_cxwc1dx", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Still
        late to the party on these exercises, but if anyone has any way of improving
        upon what I&amp;#39;ve got here, it&amp;#39;d be appreciated as I continue
        to learn C#. :)&lt;/p&gt;\n\n&lt;p&gt;This was my first time working with
        an external file in code, so if you have any critique on how to improve upon
        what I did, it&amp;#39;s definitely welcome. I peeked at some other solutions
        to get a handle on what was going on here but I definitely learned a ton.&lt;/p&gt;\n\n&lt;p&gt;&lt;a
        href=\"http://pastebin.com/w8zLbDaA\"&gt;http://pastebin.com/w8zLbDaA&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cxwc1dx/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1449912560.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}, {"kind": "t1", "data":
        {"subreddit_id": "t5_3b3wa", "approved_at_utc": null, "author_is_blocked":
        false, "comment_type": null, "awarders": [], "mod_reason_by": null, "banned_by":
        null, "author_flair_type": "text", "total_awards_received": 0, "subreddit":
        "adventofcode", "author_flair_template_id": null, "likes": null, "replies":
        {"kind": "Listing", "data": {"after": null, "dist": null, "modhash": "", "geo_filter":
        "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_3b3wa", "approved_at_utc":
        null, "author_is_blocked": false, "comment_type": null, "awarders": [], "mod_reason_by":
        null, "banned_by": null, "author_flair_type": "text", "total_awards_received":
        0, "subreddit": "adventofcode", "author_flair_template_id": null, "likes":
        null, "replies": "", "user_reports": [], "saved": false, "id": "cyejhox",
        "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived":
        true, "collapsed_reason_code": null, "no_follow": true, "author": "taliriktug",
        "can_mod_post": false, "created_utc": 1451358571.0, "send_replies": true,
        "parent_id": "t1_cyedvo2", "score": 1, "author_fullname": "t2_6nadw", "removal_reason":
        null, "approved_by": null, "mod_note": null, "all_awardings": [], "body":
        "I''m not a Python expert, but I have a few tips.\n\n* `readFile` name is
        misleading - this function does many things\n* You don''t need `''r''` in
        `open()` - it is default.\n* You can omit parentheses in some cases:\n\n        surface_area
        = 2 * sides[0] + 2 * sides[1] + 2 * sides[2]\n        return surface_area
        + smallest_side, get_ribbons(l,w,h)", "edited": false, "top_awarded_type":
        null, "author_flair_css_class": null, "name": "t1_cyejhox", "is_submitter":
        true, "downs": 0, "author_flair_richtext": [], "author_patreon_flair": false,
        "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m not a Python expert,
        but I have a few tips.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;readFile&lt;/code&gt;
        name is misleading - this function does many things&lt;/li&gt;\n&lt;li&gt;You
        don&amp;#39;t need &lt;code&gt;&amp;#39;r&amp;#39;&lt;/code&gt; in &lt;code&gt;open()&lt;/code&gt;
        - it is default.&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;You can omit parentheses in
        some cases:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;surface_area = 2 * sides[0]
        + 2 * sides[1] + 2 * sides[2]\nreturn surface_area + smallest_side, get_ribbons(l,w,h)\n&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;",
        "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "link_id":
        "t3_3v3w2f", "unrepliable_reason": null, "author_flair_text_color": null,
        "score_hidden": false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cyejhox/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1451358571.0, "author_flair_text": null, "treatment_tags": [], "collapsed":
        false, "subreddit_name_prefixed": "r/adventofcode", "controversiality": 0,
        "depth": 1, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}},
        "user_reports": [], "saved": false, "id": "cyedvo2", "banned_at_utc": null,
        "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code":
        null, "no_follow": true, "author": "ashollander", "can_mod_post": false, "created_utc":
        1451349179.0, "send_replies": true, "parent_id": "t3_3v3w2f", "score": 1,
        "author_fullname": "t2_ta5o7", "approved_by": null, "mod_note": null, "all_awardings":
        [], "collapsed": false, "body": "Here is my python solution (haven''t used
        python in about 2 years, so if you have any Pythonic tips, that would be appreciated!):\n\n\n    def
        readFile(file):\n        total_surface = 0\n        total_ribbons = 0\n        with
        open(file, ''r'') as f:\n            for line in f:\n                info
        = get_surface_area(line)\n                total_surface += info[0]\n                total_ribbons
        += info[1]\n            print(\"\\n***TOTALS***\")\n            print(total_surface)\n            print(total_ribbons)\n\n          \n    def
        get_surface_area(line):\n        l, w, h = map(int, line.split(''x''))    \n        sides
        = []\n        sides.append(l*w)\n        sides.append(w*h)\n        sides.append(h*l)\n        smallest_side
        = min(int(x) for x in sides)\n        surface_area = ( (2 * sides[0] ) + (2
        * sides[1]) + (2 * sides[2]) )\n        total = ((surface_area + smallest_side),
        get_ribbons(l,w,h))\n        return total\n   \n\n    def get_ribbons(l,w,h):\n        dimensions
        = l * w * h\n        ribbon = 2 * min(l+w, w+h, h+l)\n        ribbon += dimensions
        \n        return ribbon           \n      \n    readFile(''instructions.txt'')\n",
        "edited": 1451349603.0, "top_awarded_type": null, "author_flair_css_class":
        null, "name": "t1_cyedvo2", "is_submitter": false, "downs": 0, "author_flair_richtext":
        [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Here
        is my python solution (haven&amp;#39;t used python in about 2 years, so if
        you have any Pythonic tips, that would be appreciated!):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def
        readFile(file):\n    total_surface = 0\n    total_ribbons = 0\n    with open(file,
        &amp;#39;r&amp;#39;) as f:\n        for line in f:\n            info = get_surface_area(line)\n            total_surface
        += info[0]\n            total_ribbons += info[1]\n        print(&amp;quot;\\n***TOTALS***&amp;quot;)\n        print(total_surface)\n        print(total_ribbons)\n\n\ndef
        get_surface_area(line):\n    l, w, h = map(int, line.split(&amp;#39;x&amp;#39;))    \n    sides
        = []\n    sides.append(l*w)\n    sides.append(w*h)\n    sides.append(h*l)\n    smallest_side
        = min(int(x) for x in sides)\n    surface_area = ( (2 * sides[0] ) + (2 *
        sides[1]) + (2 * sides[2]) )\n    total = ((surface_area + smallest_side),
        get_ribbons(l,w,h))\n    return total\n\n\ndef get_ribbons(l,w,h):\n    dimensions
        = l * w * h\n    ribbon = 2 * min(l+w, w+h, h+l)\n    ribbon += dimensions
        \n    return ribbon           \n\nreadFile(&amp;#39;instructions.txt&amp;#39;)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
        "removal_reason": null, "collapsed_reason": null, "distinguished": null, "associated_award":
        null, "stickied": false, "author_premium": false, "can_gild": false, "gildings":
        {}, "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden":
        false, "permalink": "/r/adventofcode/comments/3v3w2f/day_2_solutions/cyedvo2/",
        "subreddit_type": "public", "locked": false, "report_reasons": null, "created":
        1451349179.0, "author_flair_text": null, "treatment_tags": [], "link_id":
        "t3_3v3w2f", "subreddit_name_prefixed": "r/adventofcode", "controversiality":
        0, "depth": 0, "author_flair_background_color": null, "collapsed_because_crowd_control":
        null, "mod_reports": [], "num_reports": null, "ups": 1}}], "before": null}}]'
  recorded_at: Sun, 09 Mar 2025 05:15:33 GMT
recorded_with: VCR 6.3.1
